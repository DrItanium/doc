\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename chinual6th.info
@settitle Lisp Machine Manual
@c %**end of header

@ifnottex
@node Top
@top Lisp Machine Manual
@end ifnottex

@titlepage
@center @titlefont{Lisp Machine Manual}

@sp 4
@center Sixth Edition, System Version 99

@sp 1
@center June 1984

@sp 5
@center Richard Stallman
@center Daniel Weinreb
@center David Moon

@sp 12
This report describes research done at the Artificial Intelligence
Laboratory of the Massachusetts Institute of Technology.  Support for the
laboratory's artificial intelligence research is provided in part by the
Advanced Research Projects Agency of the Department of Defense under Office
of Naval Research Contract number N00014-80-C-0505.
@page

@sp 2
@center @titlefont{Preface}

The Lisp Machine manual describes both the language and the operating system
of the Lisp Machine.  The language, a dialect of Lisp called Zetalisp,
is completely documented
by this manual.  The software environment and operating-system-like parts of
the system contain many things which are still in a state of flux.
This manual confines itself primarily to the stabler parts of the
system.  It describes how to program, but not for the most part how to
operate the machine.  The window system is documented separately in
the Lisp Machine Window System manual.

Any comments, suggestions, or criticisms will be welcomed.  Please send
Arpa network mail to BUG-LMMAN@@MIT-MC.

Those not on the Arpanet may send U.S. mail to

@sp 1
@verbatim
Richard M. Stallman
Artificial Intelligence Lab
545 Technology Square
Cambridge, Mass. 02139
@end verbatim

@sp 2
Portions of this manual were written by Mike McMahon and Alan Bawden.
The chapter on the LOOP iteration macro is mostly a reprint of
Laboratory for Computer Science memo TM-169, by Glenn Burke.  Sarah
Smith, Meryl Cohen and Richard Ingria of LMI, and Richard Mlynarik of
MIT, helped to correct the manual.

@sp 2
@center @titlefont{Personal Note from Richard Stallman}

The Lisp Machine is a product of the efforts of many people too
numerous to list here and of the former unique unbureaucratic,
free-wheeling and cooperative environment of the M.I.T. Artificial
Intelligence Laboratory.  I believe that the commercialization of
computer software has harmed the spirit which enabled such systems to
be developed.  Now I am attempting to build a software-sharing movement to
revive that spirit from near oblivion.

Since January 1984 I have been working primarily on the development of
GNU, a complete Unix-compatible software system for standard hardware
architectures, to be shared freely with everyone just like EMACS.
This will enable people to use computers and be good neighbors legally
(a good neighbor allows his neighbors to copy any generally useful
software he has a copy of).  This project has inspired a growing
movement of enthusiastic supporters.  Just recently the first free
portable C compiler compiled itself.  If you would like to contribute
to GNU, write to me at the address above.  Restrain social decay--help
get programmers sharing again.
@end titlepage

@chapter Introduction

@section  General Information

	The Lisp Machine is a new computer system designed to provide a
high-performance and economical implementation of the Lisp language.  It
is a personal computation system, which means that processors and main
memories are not time-multiplexed: when using a Lisp Machine, you get
your own processor and memory system for the duration of the session.
It is designed this way to relieve the problems of running large
Lisp programs on time-sharing systems.  Everything on the Lisp Machine
is written in Lisp, including all system programs; there is never any
need to program in machine language.  The system is highly interactive.

	The Lisp Machine executes a new dialect of Lisp called Zetalisp,
developed at the M.I.T. Artificial Intelligence Laboratory for use in
artificial intelligence research and related fields.  It was originally
based on the Maclisp dialect, and attempts to maintain a good degree of
compatibility with Maclisp, while also providing many improvements and
new features.  Maclisp, in turn, was based on Lisp 1.5. 

	Common Lisp is a Lisp dialect designed to standardize all
the various Lisp systems derived from Maclisp.  Zetalisp today is nearly
a superset of Common Lisp, but there are a few important incompatibilities
between them, in places where Common Lisp involves an incompatible change
which is deemed to severe to impose on traditional Zetalisp users.
There is a special mode which provides strict Common Lisp compatibility.
See (common-lisp) for more information.

	This document is the reference manual for the Zetalisp
language.  This document is not a tutorial, and it sometimes refers to
functions and concepts that are not explained until later in the manual.
It is assumed that you have a basic working knowledge of some Lisp
dialect; you will be able to figure out the rest of the language from
this manual.

	There are also facilities explained in this manual that are not
really part of the Lisp language.  Some of these are subroutine packages
of general use, and others are tools used in writing programs.  
The Lisp Machine window system and the major utility programs are,
or ought to be, documented in other manuals.

@section  Structure of the Manual

The manual starts out with an explanation of the language.  Chapter
(object-chapter) explains the different primitive types of Lisp object
and presents some basic @i{predicate} functions for testing types.
Chapter (evaluator-chapter) explains the process of evaluation, which
is the heart of the Lisp language.  Chapter (flow-chapter) introduces
the basic Lisp control structures.

	The next several chapters explain the details of the various
primitive data-types of the language and the functions that deal with
them.  Chapter (cons-chapter) deals with conses and the higher-level
structures that can be built out of them, such as trees, lists,
association lists, and property lists.  Chapter (symbol-chapter) deals
with symbols, chapter (number-chapter) with the various kinds of
numbers, and chapter (array-chapter) with arrays.  Chapter
(string-chapter) explains character strings, which are a special kind
of array.

	After this there are some chapters that explain more about functions,
function-calling, and related matters.  Chapter (function-chapter) presents
all the kinds of functions in the language, explains function-specs, and
tells how to manipulate definitions of functions.  Chapters (closure-chapter)
and (stack-group-chapter) discuss closures and stack-groups, two facilities
useful for creating coroutines and other advanced control and access structures.

	Next, a few lower-level issues are dealt with.  Chapter
(locative-chapter) explains locatives, which are a kind of pointer to
memory cells.  Chapter (subprimitive-chapter) explains the ``subprimitive''
functions, which are primarily useful for implementation of the Lisp
language itself and the Lisp Machine's operating system.  Chapter
(area-chapter) discusses areas, which give you control over storage
allocation and locality of reference.

	Chapter (compiler-chapter) discusses the Lisp compiler, which
converts Lisp programs into ``machine language'' or ``macrocode''.  Chapter
(macros-chapter) explains the Lisp macro facility, which allows users
to write their own extensions to Lisp, extending both the interpreter
and the compiler.  The next two chapters go into detail about two such
extensions, one that provides a powerful iteration control structure
(chapter (loop-chapter)), and one that provides a powerful data
structure facility (chapter (defstruct-chapter)).

	Chapter (flavor-chapter) documents flavors, a language facility
to provide generic functions using the paradigm used in Smalltalk and related
languages, called ``object-oriented programming'' or
``message passing''.  Flavors are widely used by the system programs of
the Lisp Machine, as well as being available to the user as a language
feature.

The next few chapters discuss I/O: chapter (io-chapter) explains I/O
streams and character and line level operations; chapter
(expression-io-chapter) explains reading and printing symbolic
expressions; chapter (pathname-chapter) explains naming of files;
chapter (file-io-chapter) explains input and output to files.  Chapter
(chaos-chapter) describes the use of the Chaosnet.

Chapter (package-chapter) describes the @i{package} system, which
allows many name spaces within a single Lisp environment.  Chapter
(system-chapter) documents the ``system'' facility that helps you
create and maintain systems, which are programs that reside in many
files.

	Chapter (process-chapter) discusses the facilities for
multiple processes and how to write programs that use concurrent
computation.  Chapter (error-chapter) explains how exceptional
conditions (errors) can be handled by programs, handled by users, and
debugged.  Chapter (code-chapter) explains the instruction set of the
Lisp Machine and tells you how to examine the output of the compiler.
Chapter (query-chapter) documents some functions for querying the
user, chapter (time-chapter) explains some functions for manipulating
dates and times, and chapter (misc-chapter) contains other
miscellaneous functions and facilities.


@section  Notational Conventions and Helpful Notes

	There are several conventions of notation and various points
that should be understood before reading the manual.  This section
explains those conventions.

	The symbol `=>' is used to indicate evaluation in
examples.  Thus, when you see `@code{foo} => @code{nil}', this means that
``the result of evaluating @code{foo} is (or would have
been) @code{nil}''. 

	The symbol `==>' is used to indicate macro expansion
in examples.  This, when you see `@code{(foo bar)} ==> @code{(aref bar 0)}',
this means that ``the result of macro-expanding @code{(foo bar)}
is (or would have been) @code{(aref bar 0)}''.

	A typical description of a Lisp function looks like this:

@defun function-name arg1 arg2 &optional arg3 (arg4 @i{arg2})
The @code{function-name} function adds together @i{arg1} and @i{arg2},
and then multiplies the result by @i{arg3}.  If @i{arg3} is not provided,
the multiplication isn't done.  @code{function-name} then returns a list
whose first element is this result and whose second element is @i{arg4}.
Examples:
@lisp
(function-name 3 4) => (7 4)
(function-name 1 2 2 'bar) => (6 bar)
@end lisp
@end defun

	Note the use of fonts (typefaces).  The name of the function is
in bold-face in the first line of the description, and the arguments are
in italics.  Within the text, printed representations of Lisp objects
are in a different bold-face font, as in @code{(+ foo 56)}, and argument
references are italicized, as in @i{arg1} and @i{arg2}.  A different,
fixed-width font, as in 7function-name*, is used for Lisp examples
that are set off from the text.  Other font conventions are that
filenames are in bold-face, all upper case (as in @code{SYS: SYS; SYSDCL
LISP}) while keys on the keyboard are in bold-face and capitalized
(as in @code{Help}, @code{Return} and @code{Meta}).

`Car', `cdr' and `cons' are in bold-face when the actual Lisp objects
are being mentioned, but in the normal text font when used as words.

	The word `&optional' in the list of arguments tells you that all
of the arguments past this point are optional.  The default value can be
specified explicitly, as with @i{arg4} whose default value is the result
of evaluating the form @code{(foo 3)}.  If no default value is specified,
it is the symbol @code{nil}.  This syntax is used in lambda-lists in the
language, which are explained in (lambda-list).  Argument lists may
also contain `&rest' and `&key' to indicate rest and keyword arguments.

The descriptions of special forms and macros look like this:

@defspec do-three-times form
This evaluates @i{form} three times and returns the result of the third
evaluation.
@end defspec

@defmac with-foo-bound-to-nil form...
This evaluates the @i{forms} with the symbol @code{foo} bound to @code{nil}.
It expands as follows:
@lisp
(with-foo-bound-to-nil
    @i{form1}
    @i{form2} ...) ==>
(let ((foo nil))
    @i{form1}
    @i{form2} ...)
@end lisp
@end defmac

Since special forms and macros are the mechanism by which the syntax of Lisp
is extended, their descriptions must describe both their syntax and their
semantics; functions follow a simple consistent set of rules, but each
special form is idiosyncratic.  The syntax is displayed on the first line
of the description using the following conventions.  Italicized words are
names of parts of the form which are referred to in the descriptive text.
They are not arguments, even though they resemble the italicized words in
the first line of a function description.  Parentheses (`@code{(}' and `@code{)}') stand for themselves.
Square brackets (`@code{[}' and @code{`]}') indicate that what they enclose is optional.  
Ellipses (`@code{...}') indicate that the subform (italicized word or parenthesized
list) that precedes them may be repeated any number of times (possibly no times at all).
Curly brackets followed by ellipses (`@code{@{}' and `@code{@}...}') indicate that what they
enclose may be repeated any number of times.  Thus the first line of the
description of a special form is a ``template'' for what an instance of that
special form would look like, with the surrounding parentheses removed.
The syntax of some special forms is sufficiently complicated
that it does not fit comfortably into this style; the first line of the
description of such a special form contains only the name, and the syntax is
given by example in the body of the description.

The semantics of a special form includes not only what it ``does for a living'',
but also which subforms are evaluated and what the returned value is.  Usually
this will be clarified with one or more examples.

A convention used by many special forms is that all of their subforms after
the first few are described as `@i{body}@code{...}'.  This means that the remaining
subforms constitute the ``body'' of this special form; they are Lisp forms that
are evaluated one after another in some environment established by the special
form.

This ridiculous special form exhibits all of the syntactic features:

@defspec twiddle-frob [(frob option...)] @{parameter value@}...
This twiddles the parameters of @i{frob}, which defaults to @code{default-frob}
if not specified.  Each @i{parameter} is the name of one of the adjustable parameters of
a frob; each @i{value} is what value to set that parameter to.  Any number
of @i{parameter/value} pairs may be specified.  If any @i{options} are specified,
they are keywords that select which safety checks to override while twiddling
the parameters.  If neither @i{frob} nor any @i{options} are specified, the
list of them may be omitted and the form may begin directly with the first
@i{parameter} name.

@i{frob} and the @i{values} are evaluated; the @i{parameters} and @i{options}
are syntactic keywords and not evaluated.  The returned value is the frob
whose parameters were adjusted.  An error is signaled if any safety checks
are violated.
@end defspec

Operations, the message-passing equivalent of ordinary Lisp's functions,
are described in this style:

@defmethod flavor-name :operation-name arg1 arg2 &optional arg3
This is the documentation of the effect of performing operation
@code{:operation-name} (or, sending a message named @code{:operation-name}),
with arguments @i{arg1}, @i{arg2}, and @i{arg3}, on an instance of
flavor @code{flavor-name}.
@end defmethod

	Descriptions of variables (``globally special'' variables) look like this:

@defvar typical-variable
The variable @code{typical-variable} has a typical value....
@end defvar

	If the description says `Constant' rather than `Variable',
it means that the value is never set by the system and should not be set by you.
In some cases the value is an array or other structure whose @i{contents} may
be changed by the system or by you.

	Most numbers in this manual are decimal; octal numbers are
labelled as such, using @code{#o} if they appear in examples.  Currently
the default radix for the Lisp Machine system is eight, but this will be
changed in the near future.  If you wish to change to base ten now, see
the documentation on the variables @code{*read-base*} and @code{*print-base*}
((*read-base*-var)).

	All uses of the phrase `Lisp reader', unless further qualified,
refer to the part of Lisp that reads characters from I/O streams
(the @code{read} function), and not the person reading this manual.

	There are several terms that are used widely in other
references on Lisp, but are not used much in this document since they have become
largely obsolete and misleading.  For the benefit of those who may
have seen them before, they are: `s-expression', which means a Lisp
object;  `dotted pair', which means a cons; and `atom', which means,
roughly, symbols and numbers and sometimes other things, but not
conses.   The terms `list' and `tree' are defined in (list-and-tree).
@cindex "s-expression"
@cindex "dotted pair"
@cindex "atom"

	The characters acute accent (@code{'}) (also called "single quote") and
semicolon (`@code{;}') have special meanings when typed to Lisp; they are
examples of what are called @i{macro characters}.  Though the
mechanism of macro characters is not of immediate interest to the new
user, it is important to understand the effect of these two, which are
used in the examples.

	When the Lisp reader encounters a "@code{'}", it reads in the next
Lisp object and encloses it in a @code{quote} special form.  That
is, @code{'foo-symbol} turns into @code{(quote foo-symbol)}, and @code{'(cons 'a 'b)}
turns into @code{(quote (cons (quote a) (quote b)))}.  The reason
for this is that @code{quote} would otherwise have to be typed in very
frequently, and would look ugly.

	The semicolon is used as a commenting character.  When the
Lisp reader sees one, the remainder of the line is
discarded.

	The character `@code{/}' is used for quoting strange characters so
that they are not interpreted in their usual way by the Lisp reader,
but rather are treated the way normal alphabetic characters are treated.
So, for example, in order to give a `@code{/}' to the reader, you must type `@code{//}',
the first `@code{/}' quoting the second one.  When a character
is preceded by a `@code{/}' it is said to be @i{escaped}.  Escaping
also turns off the effects of macro characters such as "@code{'}" and `@code{;}'.

	If you select Common Lisp syntax, escaping is done with `@code{\}' instead,
and `@code{/}' has no special syntactic significance.
The manual uses traditional syntax throughout, however.

	The following characters also have special meanings
and may not be used in symbols without escaping.  These characters
are explained in detail in the section on printed representation
((reader)).
@table @code
@item "
Double-quote delimits character strings.
@item #
Sharp-sign introduces miscellaneous reader macros.
@item `
Backquote is used to construct list structure.
@item ,
Comma is used in conjunction with backquote.
@item :
Colon is the package prefix.
@item |
Characters between pairs of vertical-bars are escaped.
@item 
Circle-cross lets you type in characters using their octal codes.
@end table

	All Lisp code in this manual is written in lower case.
In fact, the reader turns all symbols into upper case, and consequently
everything prints out in upper case.  You may write programs in whichever
case you prefer.

	You will see various symbols that have the colon (@code{:})
character in their names.  The colon and the characters preceding it
are not actually part of the symbol name, but in early stages of
learning the system you can pretend that they are.  Actually they
are a package prefix.  See chapter (package-chapter) for an explanation
of packages and what package prefixes really do.

	Symbols whose names start with @code{si:} are internal to the
system.  These functions and variables are documented here because they
are things you sometimes need to know about.  However, they are subject
to change with little concern for compatibility for users.

	Zetalisp is descended from Maclisp, and a good deal
of effort was expended to try to allow Maclisp programs to run
in Zetalisp.  Throughout the manual, there are notes about
differences between the dialects.  For the new user, it is important
to note that many functions herein exist solely for Maclisp compatibility;
they should @i{not} be used in new programs.  Such functions are
clearly marked in the text.

	The Lisp Machine character set is not quite the same as that
used on I.T.S. nor on Multics; it is described in full detail in
(character-set).  The important thing to note for now is that the
character ``newline'' is the same as @code{Return}, and is represented by the
number 215 octal.  (This number should @i{not} be built into any
programs.)

	When the text speaks of ``typing @code{Control-Q}'' (for example),
this means to hold down the @code{Control} key on the keyboard (either of
the two keys labeled `CTRL'), and, while holding it down, to strike the
@code{Q} key.  Similarly, to type @code{Meta-P}, hold down either of the
@code{Meta} keys and strike @code{P}.  To type @code{Control-Meta-T} hold down
both @code{Control} and @code{Meta}.  Unlike ASCII, the Lisp machine character
set does not simply label a few of the characters as ``control
characters''; @code{Control} and @code{Meta} (and @code{Super} and @code{Hyper}) are
modifiers that can be attached to any character and are represented as
separate bits.  These
modifier bits are not present in characters in strings or files.

	Many of the functions refer to ``areas''.  The @i{area} feature
is of interest only to writers of large systems and can be safely
disregarded by the casual user.  It is described in chapter (area-chapter).

@section  Common Lisp Support
@cindex common lisp

Common Lisp is the name of a standardization project whose goal was to
establish a compatible subset for Lisp systems descended from Maclisp.

Originally it was hoped that Zetalisp and the Lisp Machine system could
be changed to become a superset of Common Lisp; but this proved
impossible because the final Common Lisp design includes several
incompatible changes to widely used functions, which, while of no
fundamental importance, would make most user programs fail to work.
Therefore it was necessary to make Common Lisp a separate mode of operation.
The incompatibilities fall into two classes:

@table @code
@item *
Read syntax: Common Lisp specifies `@code{\}' as the single-character escape
character rather than the traditional `@code{/}'.  A few other constructs,
such as character objects and complex numbers, are also written incompatibly.

@item *
Specific functions: many Lisp functions of ancient pedigree, including
@code{member}, @code{assoc}, @code{subst}, @code{union}, @code{terpri}, @code{close}
and @code{//} are specified to be incompatible with their traditional behavior.
@end table

The read syntax incompatibilities have been dealt with by having separate
readtables for traditional and Common Lisp syntax.  The
incompatibilities in functions have been dealt with by means of @i{reader
symbol substitutions}.  For each function changed incompatibly, such as
@code{member}, a new, distinct symbol exists in a package called @code{cli}
(``Common Lisp Incompatible''); for example, @code{cli:member}.  The function
definition of the symbol @code{member} is the traditional definition, while
that of @code{cli:member} is the Common Lisp definition.  In Common Lisp
programs, the reader is directed to replace @code{member} with
@code{cli:member} wherever it is seen.  So traditional and Common Lisp
programs both get the @code{member} functions they expect.  Programs
written in traditional syntax can refer to the new @code{cli} functions
with explicit @code{cli:} package prefixes.  Programs written in Common Lisp
syntax can refer to the traditional symbols with explicit @code{global:}
package prefixes, but this is not expected to be necessary in code.

The symbol replacements are under control of the current readtable,
so that the Common Lisp readtable is responsible for causing
@code{cli:close} to replace @code{close} and so on.

In this manual, the incompatible Common Lisp functions are documented
under names starting with @code{cli:}, the names by which a traditional
program could refer to them.  Keep in mind that, in Common Lisp programs,
the @code{cli:} would be omitted.  A list of symbols which
have incompatible Common Lisp substitutes can be found by looking up
@code{cli:} in the function and variable indices. 

Traditional read syntax is used nearly everywhere in the manual.
This includes the use of `@code{/}' as an escape character, the escaping of
`@code{/}' itself, and not escaping the character `@code{\}', which in traditional
syntax is not special.  It is up to the user to make appropriate
modifications to express the same Lisp object in Common Lisp syntax when
necessary.

The majority of Common Lisp changes, those that are upward compatible,
have been incorporated directly into Zetalisp and are documented
in this manual with no special notice.

Common Lisp read syntax and function definitions may be used either in
files or interactively.

For listen loops, including Lisp Listener windows, break loops and the
debugger, the choice of syntax and function semantics is made by setting the
variable @code{readtable} to the appropriate readtable (see (si:common-lisp-readtable-var))
or most simply by calling the function @code{common-lisp}.

@defun common-lisp flag
If @i{flag} is @code{t}, selects Common Lisp syntax and function definitions.
If @i{flag} is @code{nil}, selects traditional syntax and function definitions.

In either case, this controls the reading of the following expressions that
you type in the same process.  It works by setting @code{readtable}.
@end defun

In a file, Common Lisp is requested by writing the attribute
@code{Readtable: Common-Lisp;} in the 7-*-* file's line.  This controls
both loading or compiling the file and evaluation or compilation in the
editor while visiting the file.  @code{Readtable: Traditional;} specifies
the use of traditional syntax and function definitions.  If neither
attribute is present, the file is processed using whatever syntax is
selected in the process that loads it.  See (file-attribute-list).

Reading and printing done by programs are controlled by the same things
that control reading of programs.  They can also be controlled explicitly
by binding the variable @code{readtable}.

@chapter Primitive Object Types

@section  Data Types

This section enumerates some of the various different primitive types of
objects in Zetalisp.  The types explained below include
symbols, conses, various types of numbers, two kinds of compiled code
objects, locatives, arrays, stack groups, and closures.
@cindex symbol
@cindex print name
@cindex definition
@cindex property list

	A @i{symbol} (these are sometimes called ``atoms'' or ``atomic
symbols'' by other texts) has a @i{print name}, a @i{value}, a
@i{definition}, a @i{property list}, and a @i{package}.

	The print name is a string, which may be obtained by the
function @code{symbol-name} ((symbol-name-fun)).  This string serves as the
@i{printed representation} (see (printer)) of the symbol.

Each symbol
has a @i{value}, which may be any
Lisp object.  This is the value of the symbol when regarded as a dynamic variable.
It is also referred to sometimes as the ``contents of the
value cell'', since internally every symbol has a cell called the @i{value
cell}, which holds the value.  It is accessed by the @code{symeval}
function ((symeval-fun)), and updated by the @code{set} function
((set-fun)).  (That is, given a symbol, you use @code{symeval} to find out
what its value is, and use @code{set} to change its value.)

Each
symbol has a @i{definition}, which may also be any Lisp object.  It is
also referred to as the ``contents of the function cell'', since
internally every symbol has a cell called the @i{function cell}, which
holds the definition.  The definition can be accessed by the
@code{fsymeval} function ((fsymeval-fun)), and updated with @code{fset}
((fset-fun)), although usually the functions @code{fdefinition} and
@code{fdefine} are employed ((fdefine-fun)).

The property list is a list of an even number of
elements; it can be accessed directly by @code{plist} ((plist-fun)), and
updated directly by @code{setplist} ((setplist-fun)), although usually the
functions @code{get}, @code{putprop}, and @code{remprop} ((get-fun)) are used.
The property list is used to associate any number of additional
attributes with a symbol--attributes not used frequently enough to
deserve their own cells as the value and definition do.

  Symbols also have a
package cell, which indicates which package of names the symbol
belongs to.  This is explained further in the section on packages
(chapter (package-chapter)) and can be disregarded by the casual user.

	The primitive function for creating symbols is
@code{make-symbol} ((make-symbol-fun)), although most symbols
are created by @code{read}, @code{intern}, or
@code{fasload} (which call @code{make-symbol} themselves.)

	A @i{cons} is an object that cares about two
other objects, arbitrarily named the @i{car} and the @i{cdr}.
These objects can be accessed with @code{car} and @code{cdr} ((car-fun)), and updated
with @code{rplaca} and @code{rplacd} ((rplaca-fun)).  The primitive function for creating
conses is @code{cons} ((cons-fun)).

	There are several kinds of numbers in Zetalisp.  @i{Fixnums}
represent integers in the range of -2^24 to 2^24-1.  @i{Bignums}
represent integers of arbitrary size, but they are more expensive to use
than fixnums because they occupy storage and are slower.  The system
automatically converts between fixnums and bignums as required.
@i{Floats} are floating-point numbers.  @i{Short floats} are another
kind of floating-point numbers, with less range and precision, but less
computational overhead.  @i{Ratios} are exact rational numbers that are
represented with a numerator and a denominator, which are integers.
@i{Complexnums} are numbers that have explicitly represented real and
imaginary parts, which can be any real numbers of the same type.  See
(number) for full details of these types and the conversions between
them.

@cindex character object
A @i{character object} is much like a fixnum except that its type
is distinguishable.  Common Lisp programs use character objects to
represent characters.  Traditional programs usually use fixnums to
represent characters, although they can create an manipulate character
objects when they desire.  Character objects behave like fixnums
when used in arithmetic; only a few operations make any distinction.
They do, however, print distinctively.  See (characters) for more information.

@cindex FEF
	The usual form of compiled, executable code is a Lisp object,
called a ``Function Entry Frame'' or ``FEF'' for historical reasons.  A FEF
contains the code for one function.  This is analogous to what Maclisp
calls a ``subr pointer''.  FEFs are produced by the Lisp Compiler
((compiler)), and are usually found as the definitions of symbols.  The
printed representation of a FEF includes its name so that it can be
identified.

	Another kind of Lisp object that represents executable code is
a ``microcode entry''.
These are the microcoded primitive functions of the Lisp system,
and any user functions compiled into microcode.

	About the only useful thing to do with any of these compiled code objects
is to @i{apply} it to arguments.  However, some functions are
provided for examining such objects, for user convenience.  See
@code{arglist} ((arglist-fun)),
@code{args-info} ((args-info-fun)),
@code{describe} ((describe-fun)),
and @code{disassemble} ((disassemble-fun)).

	A @i{locative} (see (locative)) is a kind of a pointer to a single memory cell
anywhere in the system.  The contents of this cell can be accessed by @code{cdr}
(see (cdr-fun)) and updated by @code{rplacd} (see (rplacd-fun)).

	An @i{array} (see (array))
is a set of cells indexed by a tuple of integer subscripts.
The contents of the cells may be accessed and changed individually.  There are several
types of arrays.  Some have cells that may contain any object, while others (numeric
arrays) may only contain small positive numbers.  Strings are a type of array;
the elements are character objects.

	A @i{list} is not a primitive data type, but rather a data structure
made up out of conses and the symbol @code{nil}.  See (list-and-tree).

@section  Data Type Predicates
@cindex predicate
	A @i{predicate} is a function that tests for some condition involving
its arguments and returns the symbol @code{t} if the condition is true, or
the symbol @code{nil} if it is not true.  The following predicates are for
testing what data type an object has.

	By convention, the names of predicates usually end in the letter `p' (which
stands for `predicate').
@c (See [section on naming conventions]).
@cindex naming convention

	The following predicates are for testing data types.  These predicates
return @code{t} if the argument is of the type indicated by the name of the function,
@code{nil} if it is of some other type.
@cindex "data type"

@defun symbolp object
@cindex "symbol"
@code{t} if @i{object} is a symbol, otherwise @code{nil}.
@end defun

@defun nsymbolp object
@code{nil} if @i{object} is a symbol, otherwise @code{t}.
@end defun

@defun listp object
@cindex "cons"
@code{t} if @i{object} is a cons, otherwise @code{nil}.
Note that this means @code{(listp nil)} is @code{nil} even though @code{nil} is the empty list.

[This may be changed in the future to work like @code{cli:listp}.
Since the current definition of @code{listp} is identical to that of @code{consp},
all uses of @code{listp} should be changed to @code{consp} unless the
treatment of @code{nil} is not of concern.]
@end defun

@defun cli:listp object
The Common Lisp version of @code{listp} returns @code{t} if @i{object}
is @code{nil} or a cons.
@end defun

@defun nlistp object
@code{t} if @i{object} is anything besides a cons,
otherwise @code{nil}.  @code{(nlistp nil)} returns @code{t}.

[This may be changed in the future, if and when @code{listp} is changed.
Since the current definition of @code{nlistp} is identical to that of @code{atom},
all uses of @code{nlistp} should be changed to @code{atom} unless the
treatment of @code{nil} is not of concern.]
@end defun

@defun atom object
@cindex "atom"
@code{t} if @i{object} is not a cons,
otherwise @code{nil}.  This is the same as @code{(not (consp @i{object}))}.
@end defun

@defun consp object
@code{t} if @i{object} is a cons, otherwise @code{nil}.  At the
moment, this is the same as @code{listp}; but while @code{listp} may be
changed, @code{consp} will @i{never} be true of @code{nil}.
@end defun

@defun numberp object
@cindex "number"
@code{t} if @i{object} is any kind of number,
otherwise @code{nil}.
@end defun

@defun integerp object
@defunx fixp object
Return @code{t} if @i{object} is a representation of an integer, i.e. a
fixnum or a bignum, otherwise @code{nil}.
@end defun

@defun floatp object
@code{t} if @i{object} is a floating-point number,
i.e. a full-size or short float, otherwise @code{nil}.
@end defun

@defun fixnump object
@code{t} if @i{object} is a fixnum, otherwise @code{nil}.
@end defun

@defun bigp object
@code{t} if @i{object} is a bignum, otherwise @code{nil}.
@end defun

@defun flonump object
@code{t} if @i{object} is a full-size float, otherwise @code{nil}.
@end defun

@defun small-floatp object
@code{t} if @i{object} is a short float, otherwise @code{nil}.
@end defun

@defun rationalp object
@code{t} if @i{object} is an exact representation of a rational number;
that is, if it is a fixnum, a bignum or a ratio.  Otherwise @code{nil}.
@end defun

@defun complexp object
@code{t} if @i{object} is a complexnum, a number explicitly
represented as complex.  Otherwise @code{nil}.
@end defun

@defun realp object
@code{t} if @i{object} is a number whose value is real,
otherwise @code{nil}.  Any fixnum, bignum, float (of either format) or
ratio satisfies this predicate.  So does a complexnum whose imaginary
part is zero.
@end defun

@defun characterp object
@code{t} if @i{object} is a character object, otherwise @code{nil}.
@end defun

@defun stringp object
@cindex "string"
@code{t} if @i{object} is a string, otherwise @code{nil}.
@end defun

@defun arrayp object
@cindex "array"
@code{t} if @i{object} is an array, otherwise @code{nil}.
Note that strings are arrays.
@end defun

@defun vectorp object
@code{t} if @i{object} is an array of rank 1.
@end defun

@defun bit-vector-p object
@code{t} if @i{object} is an array of rank 1 that allows only 0 and 1 as elements.
@end defun

@defun simple-vector-p object
@code{t} if @i{object} is an array of rank 1, with no fill pointer and not displaced,
that can have any Lisp object as an element.
@end defun

@defun simple-bit-vector-p object
@code{t} if @i{object} is an array of rank 1, with no fill pointer and not displaced,
that allows only 0 and 1 as elements.
@end defun

@defun simple-string-p object
@code{t} if @i{object} is a string with no fill pointer and not displaced.
@end defun

@defun functionp object &optional allow-special-forms
@cindex "function"
@cindex "applicable function"
@code{t} if @i{object} is a function (essentially, something
that is acceptable as the first argument to @code{apply}), otherwise @code{nil}.
In addition to interpreted, compiled, and microcoded functions, @code{functionp}
is true of closures, select-methods (see (select-method)), and symbols whose function
definition is @code{functionp}.

@code{functionp} is not true of objects that can be called as functions but
are not normally thought of as functions: arrays, stack groups,
entities, and instances.  As a special case, @code{functionp} of a symbol
whose function definition is an array returns @code{t}, because in this
case the array is being used as a function rather than as an object.

If @i{allow-special-forms} is specified and non-@code{nil}, then
@code{functionp} will be true of macros and special-form functions (those
with quoted arguments).  Normally @code{functionp} returns @code{nil} for
these since they do not behave like functions.
@end defun

@defun compiled-function-p object
@defunx subrp object
@code{t} if @i{object} is any compiled code object, otherwise @code{nil}.
The name @code{subrp} is for Maclisp compatibility.
@end defun

@defun special-form-p symbol
@code{t} if @i{symbol} is defined as a function that takes some
unevaluated args.  Macros do not count as special forms.
@end defun

@code{macro-function} can be used to test whether a symbol is defined as a
macro, but you must be careful because it also returns a non-@code{nil} value
for certain special forms.  See the definition @code{macro-function}
((macro-function-fun)) to find out how to do this properly.

@defun closurep object
@cindex "closure"
@code{t} if @i{object} is a closure, otherwise @code{nil}.
@end defun

@defun entityp object
@cindex "entity"
@code{t} if @i{object} is an entity, otherwise @code{nil}.
See (entity) for information about entities.
@end defun

@defun locativep object
@cindex "locative"
@code{t} if @i{object} is a locative, otherwise @code{nil}.
@end defun

@defun commonp object
@code{t} if @i{object} is of a type that Common Lisp defines operations on.
See the type specifier @code{common} ((common-type-spec)).
@end defun

Other standard type predicates include @code{packagep} (see (packagep-fun)),
@code{random-state-p} (see (random-state-p-fun)), @code{hash-table-p}
((hash-table-p-fun)), @code{pathnamep} ((pathnamep-fun)),
@code{streamp} ((streamp-fun)) and @code{readtablep} ((readtablep-fun)).
@code{defstruct} can define additional type predicates automatically
((defstruct-predicates)).

@section  Type Specifiers
@cindex type specifiers

Data types can be represented symbolically by Lisp objects called @i{type
specifiers}.  A type specifier describes a class of possible Lisp
objects; the function @code{typep} tells whether a given object matches a
given type specifier.

Built-in type specifiers exist for the
actual Lisp Machine data types.  The user can define additional
type specifiers to represent arbitrary classifications of data.
Type specifiers can also be combined into specifiers for more
complex types.

Some type specifiers are symbols: for example, @code{number}, @code{cons},
@code{symbol}, @code{integer}, @code{character}, @code{compiled-function},
@code{array}, @code{vector}.  Their meanings are mostly obvious, but a table
follows below.  Type specifiers that are symbols are called @i{simple}
type specifiers.

Lists can also be type specifiers.  They are usually combinations or
restrictions of other type specifiers.  The car of the list is the key
to understanding what it means.  An example of a combination is @code{(or
array symbol)}, which matches any array or any symbol.  An example of a
restriction type is @code{(integer 0 6)}, which matches only integers
between 0 and 6 (inclusive).

@subsection Standard Type Specifiers

@noindent
Basic Data Types

@table @code
@item cons
non-@code{nil} lists.
@item symbol
symbols.
@item array
all arrays, including strings.
@item number
numbers of all kinds.
@item instance
all instances of any flavor.
@item structure
named structures of any structure type.
@item locative
locatives.
@item closure
closures.
@item entity
entities.
@item stack-group
stack groups.
@item compiled-function
macrocode functions such as the compiler makes.
@item microcode-function
built-in functions implemented by the microcode.
@item select
select-method functions (defined by @code{defselect} or @code{defselect-incremental}).
@item character
character objects.
@end table

@noindent
Other Useful Simple Types

@table @code
@item t
all Lisp objects belongs to this type.
@item nil
nothing belongs to this type.
@item string-char
characters that can go in strings.
@item standard-char
characters defined by Common Lisp.
These are the 95 ASCII printing characters (including @code{Space}),
together with @code{Return}.
@item null
@code{nil} is
the only object that belongs to type @code{null}.
@item list
lists, including @code{nil}.  This type is the union of the types @code{null} and @code{cons}.
@item sequence
lists and vectors.  Many Common Lisp functions accept either a list or a
vector as a way of describing a sequence of elements.
@item keyword
keywords (symbols belonging to package @code{keyword}).
@item atom
anything but conses.
@end table

@noindent
Simple Number Types

@table @code
@item integer
fixnums and bignums.
@item ratio
explicit rational numbers, such as @code{1\2} (@code{1/2} in Common Lisp syntax).
@item rational
integers and ratios.
@item fixnum
small integers, whose @code{%data-type} is @code{dtp-fix} and which occupy no storage.
@item bignum
larger integers, which occupy storage.
@item bit
very small integers--only @code{0} and @code{1} belong to this type.
@item float
any floating point number regardless of format.
@item short-float
short floats
@item single-float
full-size floats
@item double-float
@itemx long-float
defined by Common Lisp, but on the Lisp Machine synonymous with @code{single-float}.
@item real
any number whose value is real.
@item complex
a number explicitly stored as complex.
It is possible for such a number to have zero as an imaginary part
but only if it is a floating point zero.
@item noncomplex
a number which is not explicitly stored as complex.
This is a subtype of @code{real}.
@end table

@noindent
Restriction Types for Numbers

@table @code
@item (complex @i{type-spec})
complex numbers whose components match @i{type-spec}.
Thus, @code{(complex rational)} is the type of complex numbers with
rational components.  @code{(complex t)} is equivalent to @code{complex}.

@item (integer @i{low} @i{high})
integers between @i{low} and @i{high}.
@i{low} can be:
@table @code
@item @i{integer}
@i{integer} is an inclusive lower limit
@item (@i{integer})
@i{integer} is an exclusive lower limit.
@item *
There is no lower limit.
@end table

@i{high} has the same sorts of possibilities.
If @i{high} is omitted, it defaults to @code{*}.  If both @i{low} and @i{high} are omitted,
you have @code{(integer)}, which is equivalent to plain @code{integer}.  Examples:
@lisp
(integer 0 *)      1matches any nonnegative integer.*
(integer 0)        1matches any nonnegative integer.*
(integer -4 3)     1matches any integer between -4 and 3, inclusive.*
(integer -4 (4))   1matches any integer between -4 and 3, inclusive.*
@end lisp
@code{bit} is equivalent to @code{(integer 0 1)}.

@item (rational @i{low} @i{high})
@itemx (float @i{low} @i{high})
@itemx (short-float @i{low} @i{high})
@itemx (single-float @i{low} @i{high})
@itemx (double-float @i{low} @i{high})
@itemx (long-float @i{low} @i{high})
@itemx (noncomplex @i{low} @i{high})
These specify restrictive bounds for the types @code{rational}, @code{float} and so on.
The bounds work on these types just the way they do on @code{integer}.
Exclusive and inclusive bounds make a useful difference here:
@lisp
(float (-4) (3))    1matches any float between -4 and 3, exclusive.*
@end lisp
No possible inclusive bounds could provide the same effect.

@item (mod @i{high})
nonnegative integers less than @i{high}.  @i{high} should be an integer.
@code{(mod)}, @code{(mod *)} and plain @code{mod} are allowed, but are equivalent
to @code{(integer 0)}.

@item (signed-byte @i{size})
integers that fit into a byte of @i{size} bits, of which one bit is the sign bit.
@code{(signed-byte 4)} is equivalent to @code{(integer -8 7)}.
@code{(signed-byte *)} and plain @code{signed-byte} are equivalent to @code{integer}.

@item (unsigned-byte @i{size})
nonnegative integers that fit into a byte of @i{size} bits, with no sign bit.
@code{(unsigned-byte 3)} is equivalent to @code{(integer 0 7)}.
@code{(unsigned-byte *)} and plain @code{unsigned-byte} are equivalent to @code{(integer 0)}.
@end table

@noindent
Simple Types for Arrays

@table @code
@item array
all arrays.
@item simple-array
arrays that are not displaced and have no fill pointers.
(Displaced arrays are defined in (displaced-array) and fill pointers on (fill-pointer)).
@item vector
arrays of rank one.
@item bit-vector
@code{art-1b} arrays of rank one.
@item string
strings; @code{art-string} and @code{art-fat-string} arrays of rank one.
@item simple-bit-vector
bit vectors that are simple arrays.
@item simple-string
strings that are simple arrays.
@item simple-vector
simple-arrays of rank one, whose elements' types are unrestricted.
This is not the same as @code{(and vector simple-array)}!
@end table

@noindent
Restriction Types for Arrays

@table @code
@item (array @i{element-type} @i{dimensions})
arrays whose
rank and dimensions fit the restrictions described by @i{dimensions}
and whose nature restricts possible elements to match @i{element-type}.

The array elements condition has nothing to do with the actual values of
the elements.  Rather, it is a question of whether the array's own type
permits exactly such elements as would match @i{element-type}.  If
anything could be stored in the array that would not match
@i{element-type}, then the array does not match.  If anything that
would match @i{element-type} could not be stored in the array, then the
array does not match.

For example, if @i{element-type} is @code{(signed-byte 4)}, the array must
be an @code{art-4b} array.  An @code{art-1b} array will not do, even though
its elements all do match @code{(signed-byte 4)}, because some objects such
as the number 12 match @code{(signed-byte 4)} but could not be stored in an
@code{art-1b} array.  Likewise an @code{art-q} array whose elements all happen
to match @code{(signed-byte 4)} will not do, since new elements such as
@code{nil} or 231 which fail to match could potentially be stored in the
array.

If @i{element-type} is @code{t}, the type to which all objects belong,
then the array must be one in which any object can be stored:
@code{art-q} or @code{art-q-list}.

@code{*} as @i{element-type} means ``no restriction''.  Any type of
array is then allowed, whether it restricts its elements or not.

@i{dimensions} can be @code{*}, an integer or a list.
If it is @code{*}, the rank and dimensions are not restricted.
If it is an integer, it specifies the rank of the array.
Then any array of that rank matches.

If @i{dimensions} is a list, its length specifies the rank,
and each element of @i{dimensions} restricts one dimension.
If the element is an integer, that dimension's length must equal it.
If the element is *, that dimension's length is not restricted.

@item (simple-array @i{element-type} @i{dimensions})
the restrictions work as in @code{(array @i{element-type} @i{dimensions})},
but in addition the array must be a simple array.

@item (vector @i{element-type} @i{size})
@i{element-type} works as above.  The array must be a vector.
@i{size} must be an integer or *;
if it is an integer, the array's length must equal @i{size}.

@item (bit-vector @i{size})
@itemx (simple-vector @i{size})
@itemx (simple-bit-vector @i{size})
@itemx (string @i{size})
@itemx (simple-string @i{size})
These require the array to match type @code{bit-vector}, @code{simple-vector}, etc.
This implicitly restricts the element type, so there is no point
in allowing an @i{element-type} to be given in the type specifier.
@i{size} works as in @code{vector}.
@end table

@noindent
More Obscure Types

@table @code
@item package
packages, such as @code{find-package} might return.
@item readtable
structures such as can be the value of @code{readtable}.
@item pathname
pathnames (instances of the flavor @code{pathname}).
@item hash-table
hash-tables (instances of the flavor @code{hash-table}).
@item @i{flavor-name}
instances of that flavor, or of any flavor that contains it.
@item @i{defstruct-name}
named structures of that type, or of any structure that includes
that one using @code{:include}.
@end table

@noindent
Common Lisp Compatibility Types

@table @code
@item random-state
random-states.  See @code{random} ((random-fun)).
This is actually a special case of using a defstruct name
as a type specifier, but it is mentioned specifically because
Common Lisp defines this type.
@item common
All objects of types defined by Common Lisp.  This is all Lisp objects
except closures, entities, stack groups, locatives, instances,
select-methods, and compiled and microcode functions.  (A few kinds
of instances, such as pathnames, are @code{common}, because Common Lisp does
define how to manipulate pathnames, and it is considered irrelevant that
the Lisp Machine happens to implement pathnames using instances.)
@item stream
Anything that looks like it might be a valid I/O stream.
It is impossible to tell for certain whether an object
is a stream, since any function with proper behavior
may be used as a stream.  Therefore, use of this
type specifier is discouraged.  It exists for the sake
of Common Lisp.
@end table

@noindent
Combination Type Specifiers

@table @code
@item (member @i{objects})
any one of @i{objects}, as compared with @code{eql}.
Thus, @code{(member t nil x)} is matched only by
@code{t}, @code{nil} or @code{x}.

@item (satisfies @i{predicate})
objects on which the function @i{predicate} returns a non-@code{nil} value.
Thus, @code{(satisfies numberp)} is equivalent
as a type specifier to @code{number} (though the system could not tell that this is so).
@i{predicate} must be a symbol, not a @code{lambda}-expression.

@item (and @i{type-specs}...)
objecs that match all of the @i{type-specs} individually.  Thus, @code{(and
integer (satisfies oddp))} is the type of odd integers.

@item (or @i{type-specs}...)
objects that match at least one of the @i{type-specs} individually.
Thus, @code{(or number array)} includes all numbers and all arrays.

@item (not @i{type-spec})
objects that do not match @i{type-spec}.
@end table

@subsection User-Defined Type Specifiers

@defmac deftype type-name lambda-list body...
Defines @i{type-name} as a type specifier by providing code to expand it into
another type specifier--a sort of type specifier macro.

When a list starting with @i{type-name} is encountered as a type
specifier, the @i{lambda-list} is matched against the cdr of the type
specifier just as the lambda-list of an ordinary @code{defmacro}-defined
macro is matched against the cdr of a form.  Then the @i{body} is
executed and should return a new type specifier to be used instead of
the original one.

If there are optional arguments in @i{lambda-list} for which no default value
is specified, they get @code{*} as a default value.

If @i{type-name} by itself is encountered as a type specifier, it is
treated as if it were @code{(@i{type-name})}; that is to say, the
@i{lambda-list} is matched against no arguments and then the @i{body}
is executed.  So each argument in the @i{lambda-list} gets its
default value, and there is an error if they are not all optional.

@lisp
@exdent Example:
(deftype vector (element-type size)
  `(array ,element-type (,size)))
1could have been used to define @code{vector}.*

(deftype odd-natural-number-below (n)
  `(and (integer 0 (,n)) (satisfies oddp)))

(typep 5 '(odd-natural-number-below 6)) => t
(typep 7 '(odd-natural-number-below 6)) => nil
@end lisp
@end defmac

@subsection Testing Types with Type Specifiers

@defun type-of object
Returns a type specifier which @i{object} matches.
Any given @i{object} matches many different type specifiers,
including @code{t}, so you should not attempt to rely on knowing
which type specifier would be returned for any particular object.
The one actually returned is chosen so as to be informative
for a human.  Programs should generally use @code{typep} rather than @code{type-of}.

See also @code{data-type}, (data-type-fun).
@end defun

@defun typep object type-spec
@code{t} if @i{object} matches @i{type-spec}.  The fundamental
purpose of type specifiers is to be used in @code{typep} or other
functions and constructs that use @code{typep}.  Examples:
@lisp
(typep 5 'number) => t
(typep 5 '(integer 0 7)) => t
(typep 5 'bit) => nil
(typep 5 'array) => nil
(typep "foo" 'array) => t
(typep nil 'list) => t
(typep '(a b) 'list) => t
(typep 'lose 'list) => nil
(typep 'x '(or symbol number)) => t
(typep 5 '(or symbol number)) => t
@end lisp

If the value of @i{type-spec} is known at compile time, the compiler
optimizes @code{typep} so that it does not decode the argument at run
time.

In Maclisp, @code{typep} is used with one argument.  It returns a symbol
describing the type of the object it is given.  This is somewhat like
what @code{type-of} does, except in Maclisp the intention was to compare
the result with @code{eq} to test the type of an object.  The Lisp Machine
supports this usage of @code{typep} for compatibility, but the returned
symbol is a keyword (such as @code{:list}, for conses) which makes it
actually incompatible.  This usage is considered obsolete and should
be removed from programs.
@end defun

@defmac typecase key-form clauses...
Computes the value of @i{key-form} and then executes one (or none) of
the @i{clauses} according to the type of the value (call it @i{key}).

Each clause starts with a type specifier, not evaluated, which
could be the second argument to @code{typep}.  In fact, that is how it is used.
The rest of the clause is composed of forms.  The type specifiers of the
clauses are matched sequentially against @i{key}.  If there is a match,
the rest of that clause is executed and the values of the last form in it
are returned from the @code{typecase} form.  If no clause matches,
the @code{typecase} form returns @code{nil}.

@code{typecase}, like @code{typep} is optimized carefully by the compiler.

Note that @code{t}, the type specifier that matches all objects, is useful
in the last clause of a @code{typecase}.  @code{otherwise} is also permitted
instead of @code{t} by special dispensation, with the same meaning.

@lisp
@exdent Example:
(typecase foo
  (symbol (get-pname foo))
  (string foo)
  (list (apply 'string-append (mapcar 'hack foo)))
  ((integer 0) (hack-positive-integer foo))
  (t (princ-to-string foo)))
@end lisp
@end defmac

@defmac etypecase key-form clauses...
Like @code{typecase} except that an uncorrectable error is signaled if every clause fails.
@code{t} or @code{otherwise} clauses are not allowed.
@end defmac

@defmac ctypecase place clauses...
Like @code{etypecase} except that the error is correctable.  The first
argument is called @i{place} because it must be @code{setf}'able (see
(setf-fun)).  If the user proceeds from the error, a new value is read
and stored into @i{place}; then the clauses are tested again using the
new value.  Errors repeat until a value is specified that makes some
clause succeed.
@end defmac

@subsection Coercion with Type Specifiers

@defun coerce object type-spec
Converts @i{object} to an ``equivalent'' object that matches @i{type-spec}.
Common Lisp specifies exactly which types can be converted to
which other types.  In general, a conversion that would lose information,
such as turning a float into an integer, is not allowed as a coercion.
Here is a complete list of types you can coerce to.

@table @code
@item complex
@itemx (complex @i{type})
Real numbers can be coerced to complex.  If a rational is coerced to
type @code{complex}, the result equals the rational, and is not complex at
all.  This is because complex numbers with rational components are
canonicalized to real if possible.  However, if a rational is coerced to
@code{(complex float)} or @code{(complex single-float)} then an actual complex
number does result.

It is permissible of course to coerce a complex number to a complex type.
The real and imaginary parts are coerced individually to @i{type}
if @i{type} is specified.

@item short-float
@itemx single-float
Rational numbers can be coerced to floating point numbers
and any kind of floating point number can be coerced to
any other floating point format.

@item float
Rational numbers are converted to @code{single-float}'s;
floats of all kinds are left alone.

@item character
Strings of length one can be coerced to characters.
Symbols whose print-names have length one can also be.
An integer can be coerced to a character; this results in a
character whose character code is the specified integer.

@item list
Any vector can be coerced to type @code{list}.
The resulting list has the same elements as the vector.

@item 1@code{vector} or @code{array} or any restricted array type.*
Any sequence (list or vector) can be coerced to any array or vector type.
The new array has rank one and the same elements as the original sequence.

If you specify a type of array with restricted element type, you may
actually get an array which can hold other kinds of things as well.  For
example, the Lisp Machine does not provide anything of type @code{(array
symbol)}, but if you specify that, you will get an array which at least
can hold symbols (but can hold other things as well).  If an element of
the original sequence does not fit in the new array, an error is
signaled.

@item t
Any object can be coerced to type @code{t}, without change
to the object.
@end table

If the value of @i{type-spec} is known at compile time, the compiler
optimizes @code{coerce} so that it does not decode the argument at run
time.
@end defun

@subsection Comparing Type Specifiers

Since a type describes a set of possible objects, it is possible
to ask whether one type is contained in another type.  Another way
to say this is, is one type a @i{subtype} of another?

@defun subtypep type1 type2
@code{t} if @i{type1} is a subtype of @i{type2}.

The system cannot always tell whether @i{type1} is a subtype of
@i{type2}.  When @code{satisfies} type specifiers are in use, this question
is mathematically undecidable.  Because of this, it has not been
considered worthwhile to make the system able to answer obscure subtype
questions even when that is theoretically possible.  If the answer is
not known, @code{subtypep} returns @code{nil}.

Thus, @code{nil} could mean that @i{type1} is certainly not a subtype of
@i{type2}, or it could mean that there is no way to tell whether it is a
subtype.  @code{subtypep} returns a second value to distinguish these two
situations: the second value is @code{t} if @code{subtypep}'s first value is
definitive, @code{nil} if the system does not know the answer.

Examples:
@lisp
(subtypep 'cons 'list) => t t
(subtypep 'null 'list) => t t
(subtypep 'symbol 'list) => nil t

(subtypep 'list 'number) => nil t
1because not all lists are numbers (in fact, no lists are numbers).*

(subtypep 'number 'rational) => nil t
1because not all numbers are rational.*

(subtypep '(satisfies foo) '(satisfies bar)) => nil nil
1because the system does not attempt to figure out your code*.
@end lisp
@end defun

@chapter Evaluation
@cindex evaluation

	The following is a complete description of the actions taken by the
evaluator, given a @i{form} to evaluate.

	If @i{form} is a number, the result is @i{form}.

	If @i{form} is a string, the result is @i{form}.

	If @i{form} is a self-evaluating symbol (@code{nil}, @code{t} or a keyword
such as @code{:foo}), then @i{form} itself is the result.

	If @i{form} is any other symbol, the result is the value of @i{form},
considered as a variable.  If @i{form}'s value is void, an error is
signaled.  The way symbols are bound to values is explained in
(variable-section) below.

	If @i{form} is not any of the above types, and is not a list,
@i{form} itself is the result.

	In all remaining cases, @i{form} is a list.  The evaluator
examines the car of the list to figure out what to do next.  There are
three possibilities: this form may be a @i{special form}, a @i{macro
form}, or a plain old @i{function form}.  If the car is an explicit
function such as a list starting with @code{lambda}, the form is a function
form.  If it is a symbol, things depend on the symbol's function
definition, which may be a special form definition (see
(special-function)), a macro definition, or an ordinary function.

	If @i{form} is a special form, then it is handled accordingly;
each special form works differently.  All of them are documented in this
manual.  The internal workings of special forms are explained in more
detail on (special-function), but this hardly ever affects you.

	If @i{form} is a macro form, then the macro is expanded as
explained in chapter (macros-chapter).

	If @i{form} is a function form, it calls for the @i{application}
of a function to @i{arguments}.  The car of @i{form} is a function or
the name of a function.  The cdr of @i{form} is a list of subforms.  The
subforms are evaluated, sequentially, and each produces one argument for
the function.  The function is then applied to those arguments.
Whatever results the function returns are the values of the original
@i{form}.

	There is a lot more to be said about evaluation.  The way variables
work and the ways in which they are manipulated, including the binding of
arguments, is explained in (variable-section).  A basic explanation of
functions is in (function-section).  The way functions can return more
than one value is explained in (multiple-value).  The description of all
of the kinds of functions, and the means by which they are manipulated, is
in chapter (function-chapter).  Macros are explained in chapter
(macros-chapter).  The @code{evalhook} facility, which lets you do something
arbitrary whenever the evaluator is invoked, is explained in
(evalhook-section).  Special forms are described all over the manual; each
special form is in the section on the facility it is part of.


@section  Variables

In Zetalisp, variables are implemented using symbols.  Symbols
are used for many things in the language, such as naming functions,
naming special forms, and being keywords; they are also useful to
programs written in Lisp, as parts of data structures.  But when
a symbol is evaluated, its value as a variable is taken.

@subsection Variables and Bindings

There are two different ways of changing the value of a variable.  One
is to @i{set} the variable.  Setting a variable changes its value to a
new Lisp object, and the previous value of the variable is forgotten.
Setting of variables is usually done with the @code{setq} special form.

@cindex binding
@cindex shadowing of bindings
The other way to change the value of a variable is with @i{binding}
(also called @i{lambda-binding}).  We say that a variable is @i{bound}
(past participle of active verb) by the action of binding; we also say
that the variable is @i{bound} (state of being) after a binding has been
made.  When a binding is made, the variable's old binding and value are
hidden or @i{shadowed} by a new binding, which holds a new value.
Setting a variable places a new value into the current binding; it does
not change which binding is current.  In addition, shadowed bindings' values
are not affected by setting the variable.  Binding a variable does not affect
the value in the old current binding but that binding ceases to be
current so the value no longer applies.

@cindex unbinding
The action of binding is always followed eventually by the action of
unbinding.  This discards the current binding of the variable, with its
value.  The previous binding becomes current again, and the value in
it--unchanged since the newer binding was made, in normal operation--is
visible again.

@cindex scope of binding
Binding is normally done on entry to a function and by certain special forms
(@code{let}, @code{do}, @code{prog} and others).  The bindings are unbound
on exit from the function or the special form, even nonlocal exit such
as @code{go}, @code{return} or @code{throw}.  The function or special form
is said to be the @i{scope} of the bindings made therein.

Here is a simple example of making a binding, shadowing it,
unshadowing it, examining it, and unbinding it.  The inner, shadowing binding
is made, examined, set, examined and unbound.
@lisp
(let ((a 5))
  (print a)         1;prints @code{5}*
  (let ((a "foo"))
    (print a)       1;prints @code{"foo"}*
    (setq a "bar")
    (print a))      1;prints @code{"bar"}*
  (print a))        1;prints @code{5}*
@end lisp

@cindex global binding
Every symbol has one binding which was never made and is never unbound.
This is the @i{global} binding.  This binding is current whenever
no other binding has been established that would shadow it.
If you type @code{(setq x 5)} in the Lisp listen loop, you set
the global binding of @code{x}.  Programs often set global bindings
permanently using @code{defvar} or one of its cousins ((defvar-fun)).
@code{setq-globally} and related functions can be used to set or
refer to the global binding even when it is shadowed ((setq-globally-fun)).

@lisp
(defvar a 5)   ;1sets the global binding*

(let ((a t))
  (print a))   ;1prints @code{t}*

a => 5         ;1the global binding is visible again*
@end lisp

@cindex void binding
A binding does not need to have an actual value.  It can be @i{void}
instead.  The variable is also called void.  Actually, a void binding
contains a weird internal value, which the system interprets as meaning
``there is no value here''.  (This is the data type code @code{dtp-null},
(dtp-null-var)).  Reference to a variable whose current binding is void
signals an error.  In fact, nearly all variables' global bindings are
void; only those that you or the system have set are not void.
@code{variable-makunbound} makes the current binding of a variable void
again ((variable-makunbound-fun)).

@cindex unbound variable
`Void' used to be called `unbound', and most function names, error
messages and documentation still use the term `unbound'.  The variable
is also called `unbound'.  The term `void' is being adopted because it is
less ambiguous.  `Unbound' can mean `void', or `not bound' (no binding
established), or the past participle of `unbind'.

@cindex lexical scope
@cindex dynamic scope
All bindings except global binding have a limited scope: one function
or special form.  This does not fully specify the scope, however:
it may be @i{lexical} or @i{dynamic}.  When a binding has lexical scope,
it is visible only from code written within the function or special
form that established it.  Subroutines called from within the scope,
but which are written elsewhere, never see the lexical binding.
By contrast, a dynamic binding is visible the whole time it exists
(except when it is shadowed, of course), which includes time spent
in subroutines called from within the binding construct.
The global binding of a symbol can be regarded as a dynamic binding that
lasts from the beginning of the session to the end of the session.

@cindex special variable
Lexical and dynamic bindings are made by the same kinds of function
definitions and special forms.  By default, the bindings are lexical.
You request a dynamic binding instead using a @i{special-declaration} at
the beginning of the body of the function definition or special form.
Also, some symbols are marked @i{globally special}; every binding of
such a symbol is dynamic.  This is what @code{defvar}, etc., do to a
symbol.  Dynamic bindings are also called @i{special bindings}, and the
variable bound is called a @i{special variable}.  Each use of a symbol
as a variable (this includes setting as well as examining) is also
marked as lexical or dynamic by the same declarations.  A dynamic use
sees only dynamic bindings, and a lexical use sees only lexical
bindings.

In the examples above it makes no difference whether the bindings of
@code{a} are lexical or dynamic, because all the code executed between the
binding and unbinding is also written lexically within the @code{let}
which made the binding.  Here is an example where it makes a difference:

@lisp
(defun foo ()
  (print a))

(let ((a 5))
  (foo))

>>Error: the variable A is used free but not special.
@end lisp

If the intention is that 5 be printed, a dynamic binding is required.
A dynamic binding would remain visible for all the execution from the
entry to the @code{let} to the exit from the @code{let}, including the execution
of the definition of @code{foo}.  Actually, the default is to do lexical binding.
Since the binding of @code{a} is lexical, it is visible only for the evaluation
of expressions written inside the @code{let}, which does not include the body
of @code{foo}.  In fact, an error happens when @code{foo} evaluates @code{a},
since @code{a} there is supposed to be lexical and no lexical binding is
visible.  If you compile @code{foo}, you get a compiler warning about @code{a}.

@cindex free variable
The use of @code{a} inside @code{foo}, not lexically within any binding of @code{a},
is called @i{free}, and @code{a} is called a @i{free variable} of @code{foo}.
Free variables are erroneous unless they are special.  Strictly speaking,
it is erroneous to type @code{(setq x 5)} at top level in the Lisp listener
if @code{x} has not been made globally special, but this is permitted
as an exception because it is so often useful.

One way to make the example work is to make @code{a} globally special:

@lisp
(defvar a)

(defun foo () (print a))

(let ((a 5))
  (foo))
@end lisp

@noindent
prints 5.  The global specialness of @code{a} tells @code{let} to make a dynamic
binding and tells the evaluation of @code{a} in @code{foo} to look for one.

Another way is with declarations at the point of binding and the point of use:

@lisp
(defun foo ()
  (declare (special a))
  (print a))

(let ((a 5))
  (declare (special a))
  (foo))
@end lisp

A declaration at the point of binding affects only that binding, not
other bindings made within it to shadow it.  Another way of stating this
is that a binding is affected only by a declaration in the construct
that makes the binding, not by declarations in surrounding constructs.
Thus,
@lisp
(let ((a 5))             ;1this binding is dynamic*
  (declare (special a))
  (let ((a "foo"))       ;1this binding is lexical*
    @i{no declaration here}
    ... a ...            ;1this reference is lexical since*
    ...                  ;1 the innermost binding is lexical*
    (let ()
      (declare (special a))
      ... a ...          ;1this reference is dynamic, and sees value @code{5}*
    ...))
@end lisp

[Currently, for historical compatibility, bindings @i{are} affected
by surrounding declarations.  However, whenever this makes a difference,
the compiler prints a warning to inform the programmer that the declaration
should be moved.]

The classical case where dynamic binding is useful is for
parameter variables like @code{*read-base*}:
@lisp
(let ((*read-base* 16.))
  (read))
@end lisp
reads an expression using hexadecimal numbers by default.
@code{*read-base*} is globally special, and the subroutine of @code{read}
that reads integers uses @code{*read-base*} free.

Here is an example where lexical bindings are desirable:

@lisp
(let ((a nil))
  (mapatoms (function (lambda (symbol) (push symbol a))))
  a)
@end lisp

Because the reference to @code{a} from within the internal function
is lexical, the only binding it can see is the one made by this @code{let}.
@code{mapatoms} cannot interfere by binding @code{a} itself.
Consider: if @code{mapatoms} makes a lexical binding of @code{a},
it is not visible here because this code is not written inside
the definition of @code{mapatoms}.  If @code{mapatoms} makes a dynamic binding
of @code{a}, it is not visible here because the reference to @code{a}
is not declared special and therefore sees only lexical bindings.

@cindex lexical closure
The fact that @code{function} is used to mark the internal function
is crucial.  It causes the lexical environment appropriate for
the function to be combined with the code for the function
in a @i{lexical closure}, which is passed to @code{mapatoms}.

The last example shows @i{downward} use of lexical closures.
@i{Upward} use is also possible, in which a function is closed
inside a lexical environment and then preserved after the
binding construct has been exited.

@lisp
(defun mycons (a d)
  (function (lambda (x)
	      (cond ((eq x 'car) a)
		    ((eq x 'cdr) d)))))

(defun mycar (x) (funcall x 'car))
(defun mycdr (x) (funcall x 'cdr))

(setq mc (mycons 4 t))

(mycar mc)  =>  4
(mycdr mc)  =>  t
@end lisp

@code{mycons} returns an object that can be called as a function
with one argument.  This object retains a pointer to a lexical
environment that has a binding for @code{a} and a binding for @code{d}.
The function @code{mycons} that made those bindings
has been exited, but this is irrelevant because the bindings were
not dynamic.  Since the code of the lambda-expression is lexically
within the body of @code{mycons}, that function can see the lexical bindings
made by @code{mycons} no matter when it is called.
The function returned by @code{mycons} records two values and
can deliver either of them when asked, and is therefore analogous
to a cons cell.

Only lexical bindings are transferred automatically downward and upward,
but dynamic bindings can be used in the same ways if explicitly requested
through the use of the function @code{closure}.  See (closure) for more
information.

@cindex value cell
@cindex special pdl
Dynamic bindings, including the global binding, are stored (unless
shadowed) in a particular place: the symbol's @i{value cell}.
This is a word at a fixed offset in the symbol itself.  When a new
dynamic binding is made, the value in the value cell is saved away
on a stack called the @i{special pdl}.  The new binding's value
is placed in the value cell.  When the new binding is unbound, the
old binding's value is copied off of the special pdl, into the
value cell again.  The function @code{symeval} examines the
value cell of a symbol chosen at run time; therefore, it sees
the current dynamic binding of the symbol.

Lexical bindings are never stored in the symbol's value cell.  The
compiler stores them in fixed slots in stack frames.  The interpreter
stores them in alists that live in the stack.  It should be noted that
if the lexical binding is made by compiled code, then all code that
ought to see the binding is necessarily also compiled; if the binding is
made by interpreted code, then all code that ought to see the binding
is necessarily interpreted.  Therefore, it is safe for the compiler and
interpreter to use completely different techniques for recording lexical
bindings.

Lexical binding is the default because the compiler can find with certainty
all the places where a lexical binding is used, and usually can use short cuts
based on this certainty.  For dynamic bindings slow but general code must always
be generated.

@subsection Setting Variables

Here are the constructs used for setting variables.

@defspec setq @{variable value@}...
The @code{setq} special form is used to set the value of a variable or of
many variables.  The first @i{value} is evaluated, and the first
@i{variable} is set to the result.  Then the second @i{value} is
evaluated, the second @i{variable} is set to the result, and so on for
all the variable/value pairs.  @code{setq} returns the last value, i.e.
the result of the evaluation of its last subform.
@lisp
@exdent Example:
(setq x (+ 3 2 1) y (cons x nil))
@end lisp
@code{x} is set to @code{6}, @code{y} is set to @code{(6)}, and the @code{setq} form
returns @code{(6)}.  Note that the first variable was set before
the second value form was evaluated, allowing that form to use the new value of @code{x}.
@end defspec

@defmac psetq @{variable value@}...
A @code{psetq} form is just like a @code{setq} form, except
that the variables are set ``in parallel''; first all of the @i{value} forms
are evaluated, and then the @i{variables} are set to the resulting
values.
@lisp
@exdent Example:
(setq a 1)
(setq b 2)
(psetq a b b a)
a => 2
b => 1
@end lisp
@end defmac

@defspec variable-location symbol
Returns a locative to the cell in which the value of @i{symbol} is
stored.  @i{symbol} is an unevaluated argument, so the name of the
symbol must appear explicitly in the code.

For a special variable, this is equivalent to
@lisp
(value-cell-location '@i{symbol})
@end lisp
For a lexical variable, the place where the value is stored is
a matter decided by the interpreter or the compiler, but in any case
@code{variable-location} nevertheless returns a pointer to it.

In addition, if @i{symbol} is a special variable that is closed over,
the value returned is an external value cell, the same as the value of
@code{locate-in-closure} applied to the proper closure and @i{symbol}.
This cell @i{always} contains the closure binding's value, which is
@i{current} only inside the closure.  See (external-value-cell).
@end defspec

@defspec variable-boundp symbol
@code{t} if variable @i{symbol} is not void.
It is equivalent to 
@lisp
(location-boundp (variable-location @i{symbol}))
@end lisp
@i{symbol} is not evaluated.
@end defspec

@defspec variable-makunbound symbol
Makes @i{symbol}'s current binding void.  It is equivalent to
@lisp
(location-makunbound (variable-location @i{symbol}))
@end lisp
@i{symbol} is not evaluated.
@end defspec

@subsection Variable Binding Constructs

Here are the constructs used for binding variables.

@defspec let ((var value)...) body...
Is used to bind some variables to some objects, and evaluate some forms
(the body) in the context of those bindings.
A @code{let} form looks like
@lisp
(let ((@i{var1} @i{vform1})
      (@i{var2} @i{vform2})
      ...)
  @i{bform1}
  @i{bform2}
  ...)
@end lisp
When this form is evaluated, first the @i{vforms} (the values) are evaluated.
Then the @i{vars} are bound to the values returned by the
corresponding @i{vforms}.  Thus the bindings happen in parallel;
all the @i{vforms} are evaluated before any of the @i{vars} are bound.
Finally, the @i{bforms} (the body) are evaluated sequentially, the old values
of the variables are restored, and the result of the last @i{bform} is returned.

You may omit the @i{vform} from a @code{let} clause, in which case it is as
if the @i{vform} were @code{nil}: the variable is bound to @code{nil}.
Furthermore, you may replace the entire clause (the list of the variable
and form) with just the variable, which also means that the variable
gets bound to @code{nil}.  Example:
@lisp
(let ((a (+ 3 3))
      (b 'foo)
      (c)
      d)
  ...)
@end lisp
Within the body, @code{a} is bound to @code{6}, @code{b} is bound to @code{foo}, @code{c} is
bound to @code{nil}, and @code{d} is bound to @code{nil}.
@end defspec

@defspec let* ((var value)...) body...
@code{let*} is the same as @code{let} except that the binding is sequential.  Each
@i{var} is bound to the value of its @i{vform} before the next @i{vform}
is evaluated.  This is useful when the computation of a @i{vform} depends on
the value of a variable bound in an earlier @i{vform}.  Example:
@lisp
(let* ((a (+ 1 2))
       (b (+ a a)))
 ...)
@end lisp
Within the body, @code{a} is bound to @code{3} and @code{b} is bound to @code{6}.
@end defspec

@defspec let-if condition ((var value)...) body...
@code{let-if} is a variant of @code{let} in which the binding of variables is conditional.
The @code{let-if} special form, typically written as
@lisp
(let-if @i{cond}
	((@i{var-1} @i{val-1}) (@i{var-2} @i{val-2})...)
  @i{body}...)
@end lisp
first evaluates the predicate form @i{cond}.  If the result is non-@code{nil}, the value forms
@i{val-1}, @i{val-2}, etc. are evaluated and then the variables @i{var-1}, @i{var-2},
etc. are bound to them.  If the result is @code{nil}, the
@i{vars} and @i{vals} are ignored.  Finally the body forms are evaluated.

The bindings are always dynamic, and it is the user's responsibility
to put in appropriate declarations so that the body forms consider
the variables dynamic.
@end defspec

@defmac let-globally ((var value)...) body...
@defmacx let-globally-if condition ((var value)...) body...
@code{let-globally} is similar in form to @code{let} (see (let-fun)).  The
difference is that @code{let-globally} does not @i{bind} the variables;
instead, it saves the old values and @i{sets} the variables, and sets up
an @code{unwind-protect} (see (unwind-protect-fun)) to set them back.  The
important consequence is that, with
@code{let-globally}, when the current stack group (see (stack-group))
co-calls some other stack group, the old values of the variables are
@i{not} restored.  Thus @code{let-globally} makes the new values visible in
all stack groups and processes that don't bind the variables themselves,
not just in the current stack group.  Therefore, @code{let-globally}
can be used for communication between stack groups and between processes.

@code{let-globally-if} modifies and restores the variables only if the
value of @i{condition} is non-@code{nil}.  The @i{body} is executed in any case.

Since @code{let-globally} is based on @code{setq}, it makes sense for both
lexical and dynamic variables.  But its main application exists
only for dynamic variables.

The @code{globally} in @code{let-globally} does not mean the same thing
as the @code{globally} in @code{setq-globally} and related functions.
@end defmac

@defspec progv symbol-list value-list body...
@code{progv} is a special form to provide the user with extra control
over binding.  It binds a list of variables dynamically to a list of values,
and then evaluates some forms.  The lists of variables and values
are computed quantities; this is what makes @code{progv} different from
@code{let}, @code{prog}, and @code{do}.

@code{progv} first evaluates @i{symbol-list} and @i{value-list}, and then binds each
symbol to the corresponding value.  If too few values are supplied, the
remaining symbols' bindings are made empty.  If too many values are
supplied, the excess values are ignored.

After the symbols have been bound to the values, the @i{body} forms are
evaluated, and finally the symbols' bindings are undone.
The result returned is the value of the last form in the body.
Assuming that the variables @code{a}, @code{b}, @code{foo} and @code{bar}
are globally special, we can do:

@lisp
(setq a 'foo b 'bar)

(progv (list a b 'b) (list b)
  (list a b foo bar))
    => (foo nil bar nil)
@end lisp

@noindent
During the evaluation of the body of this @code{progv}, @code{foo}
is bound to @code{bar}, @code{bar} is bound to @code{nil}, @code{b} is
bound to @code{nil}, and @code{a} retains its top-level value @code{foo}.
@end defspec

@defspec progw vars-and-vals-form body...
@code{progw} is like @code{progv} except that it has a different way of
deciding which variables to bind and what values to give them.  Like
@code{progv}, it always makes dynamic bindings.

First, @i{vars-and-val-forms-form} is evaluated.  Its value should be a list
that looks like the first subform of a @code{let}:
@lisp
  ((@i{var1} @i{val-form-1})
   (@i{var2} @i{val-form-2})
   ...)
@end lisp
Each element of this list is processed in turn, by evaluating the
@i{val-form} and binding the @i{var} dynamically to the resulting
value.  Finally, the @i{body} forms are evaluated sequentially, the
bindings are undone, and the result of the last form is returned.  Note
that the bindings are sequential, not parallel.

This is a very unusual special form because of the way the evaluator is
called on the result of an evaluation.  @code{progw} is useful mainly for
implementing special forms and for functions part of whose contract is
that they call the interpreter.  For an example of the latter, see
@code{sys:*break-bindings*} ((sys:*break-bindings*-var)); @code{break}
implements this by using @code{progw}.
@end defspec

See also @code{%bind} ((%bind-fun)), which is a
subprimitive that gives you maximal control over binding.

@subsection Defining Global Variables

Here are the constructs for defining global variables.
Each makes the variable globally special, provides a value,
records documentation, and allows the editor to find where
all this was done.

@defmac defvar variable [initial-value] [documentation]
@code{defvar} is the recommended way to declare the use of a global variable in a
program.  Placed at top level in a file,
@lisp
(defvar @i{variable} @i{initial-value} 
  "@i{documentation}")
@end lisp
declares @i{variable} globally special and records its location in the
file for the sake of the editor so that you can ask to see where the
variable is defined.  The documentation string is remembered and
returned if you do @code{(documentation '@i{variable} 'variable)}.

If @i{variable} is void, it is initialized to the result of evaluating
the form @i{initial-value}.  @i{initial-value} is evaluated only if it
is to be used.

If you do not wish to give @i{variable} any initial value, use the
symbol @code{:unbound} as the @i{initial-value} form.  This is treated
specially; no attempt is made to evaluate @code{:unbound}.

Using a documentation string is better than using a comment to describe
the use of the variable, because the documentation string is accessible
to system programs that can show the documentation to you while you are
using the machine.  While it is still permissible to omit
@i{initial-value} and the documentation string, it is recommended that
you put a documentation string in every @code{defvar}.

@code{defvar} should be used only at top level, never in function
definitions, and only for global variables (those used by more than one
function).  @code{(defvar foo 'bar)} is roughly equivalent to
@lisp
(declare (special foo))
(if (not (boundp 'foo))
    (setq foo 'bar))
@end lisp

If @code{defvar} is used in a patch file (see (patch-facility))
or is a single form (not a region) evaluated with the editor's
compile/evaluate from buffer commands,
if there is an initial-value the variable is always set to it
regardless of whether it is void.
@end defmac

@defmac defconst variable initial-value [documentation]
@defmacx defparameter variable initial-value [documentation]
@code{defconst} is the same as @code{defvar} except that if an initial value
is given the variable is always set to it regardless of whether it is
already bound.  The rationale for this is that @code{defvar} declares a
global variable, whose value is initialized to something but will then
be changed by the functions that use it to maintain some state.  On the
other hand, @code{defconst} declares a constant, whose value will be
changed only by changes @i{to} the program, never by the operation of
the program as written.  @code{defconst} always sets the variable to the
specified value so that if, while developing or debugging the program,
you change your mind about what the constant value should be, and then
you evaluate the @code{defconst} form again, the variable gets the new
value.  It is @i{not} the intent of @code{defconst} to declare that the
value of @i{variable} will never change; for example, @code{defconst} is
@i{not} a license to the compiler to build assumptions about the value of
@i{variable} into programs being compiled.

As with @code{defvar}, you should include a documentation string in every @code{defconst}.
@end defmac

@defmac defconstant symbol value [documentation]
Defines a true constant.  The compiler is permitted to assume
it will never change.  Therefore, if a function that refers
to @i{symbol}'s value is compiled, the compiled function may
contain @i{value} merged into it and may not actually refer
to @i{symbol} at run time.

You should not change the value of @i{symbol} except by
reexecuting the @code{defconstant} with a new @i{value}.  If you do this,
it is necessary to recompile any compiled functions that refer
to @i{symbol}'s value.
@end defmac

@subsection The Global Binding

This section describes functions which examine or set the global binding of a
variable even when it is shadowed and cannot be accessed simply by evaluating
the variable or setting it.

The primary use of these functions is for init files to set
variables which are bound by the @code{load} function, such as @code{package}
or @code{base}.  @code{(setq package (find-package 'foo))} executed from a
file being loaded has no effect beyond the end of loading that file,
since it sets the binding of @code{package} made by @code{load}.  However, if
you use @code{setq-globally} instead, the current binding in effect during
loading is actually not changed, but when the @code{load} exits and the
global binding is in effect again, @code{foo} will become the current package.

@defmac setq-globally @{symbol value@}...
Sets each @i{symbol}'s global binding to the @i{value} that follows.
The @i{value}'s are evaluated but the @i{symbol}'s are not.
@end defmac

@defun set-globally symbol value
Sets the global binding of @i{symbol} to @i{value}.
@end defun

@defun makunbound-globally symbol
Makes the global binding of @i{symbol} be void.
@end defun

@defun boundp-globally symbol
Returns @code{t} if the global binding of @i{symbol} is not void.
@end defun

@defun symeval-globally symbol
@defunx symbol-value-globally symbol
Return the value of the global binding of @i{symbol}.
An error is signaled if the global binding is void.
@end defun

See also @code{pkg-goto-globally} ((pkg-goto-globally-fun)), a ``globally''
version of @code{pkg-goto}.  Note that @code{let-globally} is @i{not} analogous
to these functions, as it modifies the current bindings of symbols rather
than their global bindings.  This is an unfortunate collision of naming
conventions.

@section  Generalized Variables
@cindex setf

In Lisp, a variable is something that can remember one piece of data.
The primary conceptual operations on a variable are to recover that
piece of data and to change it.  These might be called @i{access} and
@i{update}.  The concept of variables named by symbols, explained above,
can be generalized to any storage location that can
remember one piece of data, no matter how that location is named.

For each kind of generalized variable, there are typically three
functions which implement the conceptual @i{access}, @i{update} and
@i{locate} operations.  For example, @code{symeval} accesses a symbol's
value cell, @code{set} updates it, and @code{value-cell-location} returns the
value cell's location.  @code{array-leader} accesses the contents of an
array leader element, @code{store-array-leader} updates it, and
@code{ap-leader} returns the location of the leader element.  @code{car}
accesses the car of a cons, @code{rplaca} updates it, and @code{car-location}
returns the location of the car.

Rather than thinking of this as two functions, which operate on a storage
location somehow deduced from their arguments, we can shift our point of
view and think of the access function as a @i{name} for the storage
location.  Thus @code{(symeval 'foo)} is a name for the value of @code{foo}, and
@code{(aref a 105)} is a name for the 105th element of the array @code{a}.
Rather than having to remember the update function associated with each
access function, we adopt a uniform way of updating storage locations named
in this way, using the @code{setf} special form.  This is analogous to the
way we use the @code{setq} special form to convert the name of a variable
(which is also a form which accesses it) into a form that updates it.
In fact, @code{setf} is an upward compatible generalization of @code{setq}.
Similarly, the location of the generalized variable can be obtained
using the @code{locf} construct.

@subsection setf

@code{setf} is the construct for storing a new value into a generalized variable
which is identified by the form which would obtain the current value of the
variable.  For example,
@lisp
(setf (car x) y)
@end lisp
stores the value of @code{y} into the car of the value of @code{x}.

@code{setf} is particularly useful in combination with structure-accessing
macros, such as those created with @code{defstruct}, because the knowledge of the
representation of the structure is embedded inside the macro, and the programmer
shouldn't have to know what it is in order to alter an element of the structure.

@code{setf} is actually a macro which expands into the appropriate update
code.  It has a database, explained in (setf-extension), that
associates from access functions to update functions.

@defmac setf @{place value@}...
Takes a form called @i{place} that @i{accesses} something and ``inverts'' the form to produce a corresponding form to @i{update} the thing.
A @code{setf} expands into an update form, which stores the result of evaluating
the form @i{value} into the place referenced by the @i{place}.
If multiple @i{place}`s and @i{value}`s are specified,
each one specifies an update, and each update is done before
the following updates' arguments are computed.
@lisp
@exdent Examples:
(setf (array-leader foo 3) 'bar)
		==> (store-array-leader 'bar foo 3)
(setf a 3) ==> (setq a 3)
(setf (plist 'a) '(foo bar)) ==> (setplist 'a '(foo bar))
(setf (aref q 2) 56) ==> (sys:set-aref q 2 56)
(setf (cadr w) x) ==> (sys:setcdr (cdr w) x)
@end lisp

The value of a @code{setf} form is always the @i{value} stored by
the last update it performs.  Thus, @code{(setf (cadr w) x)}
is not really the same as @code{(rplaca (cdr w) x)}, because
the @code{setf} returns @code{x} and the @code{rplaca} returns
@code{w}.  In fact, the expansion of @code{setf} of @code{cdr} uses
an internal function @code{si:setcdr} which exists specifically
for this purpose.

If @i{place} invokes a macro or a substitutable function, then
@code{setf} expands the @i{place} and starts over again.  This lets you
use @code{setf} together with @code{defstruct} accessor macros.
@end defmac

.defcondition sys:unknown-setf-reference (@code{error})
.defcondition1 sys:unknown-locf-reference (@code{error})
These are signaled when @code{setf} or @code{locf} does not know how to expand
the @i{place}.  The @code{:form} operation on the condition instance
returns the @i{access-form}.
.end_defcondition

@defmac psetf @{place value@}...
Stores each @i{value} into the corresponding @i{place}, with the changes taking
effect in parallel.  Thus,
@lisp
(psetf (car x) (cdr x) (cdr x) (car x))
@end lisp
interchanges the car and cdr of @code{x}.

The subforms of the @i{place}s, and the @i{values}, are evaluated
in order; thus, in 
@lisp
(psetf (aref a (tyi)) (tyi)
       (aref b (tyi)) (aref a (tyi)))
@end lisp
the first input character indexes @code{a}, the second is stored, the third
indexes @code{b}, and the fourth indexes @code{a}.  The parallel nature of
@code{psetf} implies that, should the first and fourth characters be equal,
the old value of that element of @code{a} is what is stored into the array
@code{b}, rather than the new value which comes from the second character
read.
@end defmac

@defmac shiftf place... 
Sets the first @i{place} from the second, the second from the third, and
so on.  The last @i{place} is not set, so it doesn't really need to be a
@code{setf}'able place; it can be any form.  The value of the @code{shiftf}
form is the old value of the first @i{place}.  Thus,
@lisp
(shiftf x (car (foo)) b)
@end lisp
evaluates @code{(foo)}, copies the car of that value into @code{x},
copies @code{b} into the car of that value, then returns the
former value of @code{x}.
@end defmac

@defmac rotatef place...
Sets the first @i{place} from the second, the second from the third, and
so on, and sets the last @i{place} from the old value of the first
@i{place}.  Thus, the values of the @i{place}'s are permuted among the
@i{place}'s in a cyclic fashion.

With only two 1place*'s, their values are exchanged:
@lisp
(rotatef (car x) (cdr x))
@end lisp
is equivalent to the @code{psetf} example above.
@end defmac

@defmac swapf place1 place2
Exchanges the contents of @i{place1} and @i{place2}.
This is a special case of @code{rotatef}.
@end defmac

@defmac incf place [amount]
Increments the value of a generalized variable.  @code{(incf @i{ref})} increments
the value of @i{ref} by 1.  @code{(incf @i{ref} @i{amount})} adds @i{amount}
to @i{ref} and stores the sum back into @i{ref}.
The @code{incf} form returns the value after incrementation.

@code{incf} expands into a @code{setf} form, so @i{ref} can be anything that
@code{setf} understands as its @i{place}.

@code{incf} is defined using @code{define-modify-macro}, (define-modify-macro-fun).
@end defmac

@defmac decf place [amount]
Decrements the value of a generalized variable.  Just like @code{incf}
except that @i{amount} (or 1) is subtracted rather than added.
@end defmac

See also @code{push} ((push-fun)), @code{pop} ((pop-fun)), @code{pushnew}
((pushnew-fun)), @code{getf} ((getf-fun)) and @code{remf} ((remf-fun)).

@subsection locf

Besides the @i{access} and @i{update} conceptual operations on
generalized variables, there is a third basic operation, which we might call
@i{locate}.  Given the name of a storage cell, the @i{locate} operation
returns the address of that cell as a locative pointer (see
(locative)).  This locative pointer is a first-class Lisp data object
which is a kind of reference to the cell.  It can be passed as an
argument to a function which operates on any cell,
regardless of where the cell is found.  It can be used to @i{bind} the contents
of the cell, just as special variables are bound,
using the @code{%bind} subprimitive (see (%bind-fun)).

Of course, this can work only on generalized variables whose implementation is really to
store their value in a memory cell.  A generalized variable with an @i{update}
operation that encrypts the value and an @i{access} operation that decrypts
it could not have the @i{locate} operation, since the value per se is not
actually stored anywhere.

@defmac locf place
@code{locf} takes a form that @i{accesses} some cell, and produces
a corresponding form to create a locative pointer to that cell.
@lisp
@exdent Examples:
(locf (array-leader foo 3)) ==> (ap-leader foo 3)
(locf a) ==> (value-cell-location 'a)
(locf (plist 'a)) ==> (property-cell-location 'a)
(locf (aref q 2)) ==> (aloc q 2)
@end lisp

If @i{place} invokes a macro or a substitutable function, then
@code{locf} expands the @i{place} and starts over again.  This lets you
use @code{locf} together with @code{defstruct} accessor macros.
@end defmac

@section  Functions
@cindex lambda list

In the description of evaluation on (description-of-evaluation), we
said that evaluation of a function form works by applying the function
to the results of evaluating the argument subforms.  What is a function,
and what does it mean to apply it?  In Zetalisp there are many
kinds of functions, and applying them may do many different kinds of
things.  For full details, see (function-functions).  Here we
explain the most basic kinds of functions and how they work.  In
particular, this section explains @i{lambda lists} and all their
important features.

The simplest kind of user-defined function is the @i{lambda-expression},
which is a list that looks like:
@lisp
(lambda @i{lambda-list} @i{body1} @i{body2}...)
@end lisp
The first element of the lambda-expression is the symbol @code{lambda}; the
second element is a list called the @i{lambda list}, and the rest of the
elements are called the @i{body}.  The lambda list, in its simplest
form, is just a list of variables.  Assuming that this simple form
is being used, here is what happens when a lambda expression is applied
to some arguments.  First, the number of arguments and the number of
variables in the lambda list must be the same, or else an error is signaled.
Each variable is bound to the corresponding argument value.  Then
the forms of the body are evaluated sequentially.  After this, the
bindings are all undone, and the value of the last form in the body is
returned.

This may sound something like the description of @code{let}, above.  The
most important difference is that the lambda-expression is not a form at
all; if you try to evaluate a lambda-expression, you get an error because
@code{lambda} is not a defined function.  The lambda-expression is a
@i{function}, not a form.   A @code{let} form gets evaluated, and the
values to which the variables are bound come from the evaluation of some
subforms inside the @code{let} form; a lambda-expression gets applied, and
the values are the arguments to which it is applied.

@cindex parameters

The variables in the lambda list are sometimes called @i{parameters},
by analogy with other languages.  Some other terminologies would refer
to these as @i{formal parameters}, and to arguments as @i{actual parameters}.

Lambda lists can have more complex structure than simply being a list of
variables.  There are additional features accessible by using certain
keywords (which start with @code{&}) and/or lists as elements of the
lambda list.

The principal weakness of simple lambda lists is that any
function written with one must only take a certain, fixed number of
arguments.  As we know, many very useful functions, such as @code{list},
@code{append}, @code{+}, and so on, accept a varying number of arguments.
Maclisp solved this problem by the use of @i{lexprs} and @i{lsubrs},
which were somewhat inelegant since the parameters had to be referred to
by numbers instead of names (e.g. @code{(arg 3)}).  (For compatibility
reasons, Zetalisp supports @i{lexpr}s, but they should not be
used in new programs.)  Simple lambda lists also require that
arguments be matched with parameters by their position in the
sequence.  This makes calls hard to read when there are a great many
arguments.  Keyword parameters enable the use of other, more readable styles of call.

@cindex "keyword parameters"
@cindex "positional parameters"
@cindex "optional parameters"
@cindex "required parameters"
@cindex "rest parameters"

	In general, a function in Zetalisp has zero or more
@i{positional} parameters, followed if desired by a single @i{rest}
parameter, followed by zero or more @i{keyword} parameters.  The
positional parameters may be @i{required} or @i{optional},
but all the optional parameters must follow all the required ones.
The required/optional distinction does not apply to the rest
parameter; all keyword parameters are optional.

The caller must provide enough arguments so that each of the required
parameters gets bound, but he may provide extra arguments for some of
the optional parameters.  Also, if there is a rest parameter, he can
provide as many extra arguments as he wants, and the rest parameter
is bound to a list of all these extras.  Optional parameters may
have a @i{default-form}, which is a form to be evaluated to produce
the default value for the parameter if no argument is supplied.

Positional parameters are matched with arguments by the position of
the arguments in the argument list.  Keyword parameters are matched
with their arguments by matching the keyword name; the arguments need
not appear in the same order as the parameters.  If an optional
positional argument is omitted, then no further arguments can be
present.  Keyword parameters allow the caller to decide independently
for each one whether to specify it.

Here is the exact algorithm used to
match up the arguments with the parameters:
@table @strong
@item Required positional parameters:
The first required positional parameter is bound to the first
argument.  @code{apply} continues to bind successive required
positional parameters
to the successive arguments.  If, during this process, there are no
arguments left but there are still some required parameters which have
not been bound yet, it is an error (``too few arguments'').

@item Optional positional parameters:
After all required parameters are handled, @code{apply} continues with the
optional positional parameters, if any.  It binds each successive
parameter to the next argument.  If, during this process, there are no
arguments left, each remaining optional parameter's default-form is
evaluated, and the parameter is bound to it.  This is done one parameter
at a time; that is, first one default-form is evaluated, and then the
parameter is bound to it, then the next default-form is evaluated, and
so on.  This allows the default for an argument to depend on the
previous argument.

@item After the positional parameters:
Now, if there are no remaining parameters (rest or keyword), and there are no
remaining arguments, we are finished.  If there are no more parameters
but there are still some arguments remaining, an error is signaled (``too
many arguments'').  If parameters remain, all the remaining arguments
are used for @i{both} the rest parameter, if any, and the keyword
parameters.

@item Rest parameter:
If there is a rest parameter, it is bound to a list of all
the remaining arguments.  If there are no
remaining arguments, it is bound to @code{nil}.

@item Keyword parameters:
If there are keyword parameters, the same remaining arguments are
used to bind them, as follows.

	The arguments for the keyword parameters are treated as a list
of alternating keyword symbols and associated values.  Each symbol is
matched with @code{eq} against the allowed parameter keywords, which have
by default the same names as the parameters but in the @code{keyword}
package.  (You can specify the keyword symbol explicitly in the lambda
list if you must; see below.)  Often the symbol arguments are constants
in the program, and it is convenient for this usage that keywords all
evaluate to themselves, but it is permissible for them to be computed by
expressions.

	If any keyword parameter has not received a value when all the
arguments have been processed, the default-form for the parameter is
evaluated and the parameter is bound to its value.  All keyword
parameters are optional.
.kindex :allow-other-keys "keyword arguments"
	There may be a keyword symbol among the arguments which does not
match any keyword parameter name.  By default this is an error, but the
lambda list can specify that there should be no error using
@code{&allow-other-keys}.  Also, if one of the keyword symbols among the
arguments is @code{:allow-other-keys} and the value that follows it is
non-@code{nil} then there is no error.  When there is no error, for either
reason, the non-matching symbols and their associated values are simply
ignored.  The function can access these symbols and values through the
rest parameter, if there is one.  It is common for a function to check
only for certain keywords, and pass its rest parameter to another
function using @code{apply}; that function will check for the keywords that
concern it.
@end table

	The way you express which parameters are required, optional, rest and keyword
is by means of specially recognized symbols, which are called
@code{&-@i{keywords}}, in the lambda list.  All such symbols' print names
begin with the character `@code{&}'.  A list of all such symbols is the value of
the symbol @code{lambda-list-keywords}. 
	The keywords used here are @code{&key}, @code{&optional} and @code{&rest}.
The way they are used is best explained by means of examples;
the following are typical lambda lists, followed by descriptions
of which parameters are positional, rest or keyword; and required or optional.
@table @code
@item (a b c)
@code{a}, @code{b}, and @code{c} are all required and positional.  The function must be
passed three arguments.
@item (a b &optional c)
@code{a} and @code{b} are required, @code{c} is optional.  All three are
positional.  The function may be passed either two or three arguments.
@item (&optional a b c)
@code{a}, @code{b}, and @code{c} are all optional and positional.  The function may
be passed zero, one, two or three arguments.
@item (&rest a)
@code{a} is a rest parameter.  The function may be passed any number of arguments.
@item (a b &optional c d &rest e)
@code{a} and @code{b} are required positional, @code{c} and @code{d} are optional
positional, and @code{e} is rest.  The function may be passed two or more
arguments.
@item (&key a b)
@code{a} and @code{b} are both keyword parameters.  A typical
call would look like
@lisp
(foo :b 69 :a '(some elements))
@exdent or
(foo :a '(some elements) :b 69)
@exdent or
(foo :a '(some elements))
@end lisp
This illustrates that the parameters can be matched in either order, or omitted.
If a keyword is specified twice, the first value is used.
@item (x &optional y &rest z &key a b)
@code{x} is required positional, @code{y} is optional positional,
@code{z} is rest, and @code{a} and @code{b} are keyword.
One or more arguments are allowed.  One or two arguments specify only
the positional parameters.  Arguments beyond the second specify both
the rest parameter and the keyword parameters, so that
@lisp
(foo 1 2 :b '(a list))
@end lisp
specifies @code{1} for @code{x}, @code{2} for @code{y}, @code{(:b (a
list))} for @code{z}, and @code{(a list)} for @code{b}.  It does not
specify @code{a}.
@item (&rest z &key a b c &allow-other-keys)
@code{z} is rest, and @code{a}, @code{b} and @code{c} are keyword
parameters.  @code{&allow-other-keys} says that absolutely any keyword
symbols may appear among the arguments; these symbols and the values
that follow them have no effect on the keyword parameters, but do
become part of the value of @code{z}.
@item (&rest z &key &allow-other-keys)
This is equivalent to @code{(&rest z)}.  So, for that matter, is the
previous example, if the function does not use the values of @code{a},
@code{b} and @code{c}.
@end table

	In all of the cases above, the @i{default-form} for each
optional parameter is @code{nil}.  To specify your own default forms,
instead of putting a symbol as the element of a lambda list, put in a
list whose first element is the symbol (the parameter itself) and whose
second element is the default-form.  Only optional parameters may have
default forms; required parameters are never defaulted, and rest
parameters always default to @code{nil}.  For example:
@table @code
@item (a &optional (b 3))
The default-form for @code{b} is @code{3}.  @code{a} is a required parameter, and
so it doesn't have a default form.
@item (&optional (a 'foo) &rest d &key b (c (symeval a)))
@code{a}'s default-form is @code{'foo}, @code{b}'s is @code{nil}, and @code{c}'s is
@code{(symeval a)}.  Note that if
the function were called on no arguments,
@code{a} would be bound to the symbol @code{foo}, and @code{c} would be bound
to the value of the symbol @code{foo}; this illustrates the fact
that each variable is bound immediately after its default-form is evaluated,
and so later default-forms may take advantage of earlier parameters
in the lambda list.  @code{b} and @code{d} would be bound to @code{nil}.
@end table

@cindex supplied-p variable

	Occasionally it is important to know whether a certain optional
parameter was defaulted or not.  Just by looking at the value one cannot
distinguish between omitting it and passing the default value
explicitly as an argument.  The way to tell for sure is to put a third
element into the list: the third element should be a variable (a
symbol), and that variable is bound to @code{nil} if the parameter was not
passed by the caller (and so was defaulted), or @code{t} if the parameter
was passed.  The new variable is called a ``supplied-p'' variable; it is
bound to @code{t} if the parameter is supplied.  For example:
@table @code
@item (a &optional (b 3 c))
The default-form for @code{b} is @code{3}, and the supplied-p variable for @code{b}
is @code{c}.  If the function is called with one argument, @code{b} is bound
to @code{3} and @code{c} is bound to @code{nil}.  If the function is called
with two arguments, @code{b} is bound to the value that was passed
by the caller (which might be @code{3}), and @code{c} is bound to @code{t}.
@end table

It is possible to specify a keyword parameter's symbol independently
of its parameter name.  To do this, use @i{two} nested lists to
specify the parameter.  The outer list is the one which can contain
the default-form and supplied-p variable, if the parameter is
optional.  The first element of this list, instead of a symbol, is
again a list, whose elements are the keyword symbol and the parameter
variable name.
For example:
@table @code
@item (&key ((:a a)) ((:b b) t))
This is equivalent to @code{(&key a (b t))}.
@item (&key ((:base base-value)))
This defines an argument which callers specify with the keyword
@code{:base}, but which within the function is referred to as the
variable @code{base-value} so as to avoid binding the value of
@code{base}, which is a synonym for @code{*print-base*} and controls
how numbers are printed.
@end table

	It is also possible to include, in the lambda list, some other
symbols, which are bound to the values of their default-forms upon
entry to the function.  These are @i{not} parameters, and they are
never bound to arguments; they just get bound, as if they appeared
in a @code{let*} form.  (Whether you use aux-variables or bind the
variables with @code{let*} is a stylistic decision.)
	To include such symbols, put them after any parameters, preceeded
by the @code{&}-keyword @code{&aux}.  Examples:
@table @code
@item (a &optional b &rest c &aux d (e 5) (f (cons a e)))
@code{d}, @code{e}, and @code{f} are bound, when the function is
called, to @code{nil}, @code{5}, and a cons of the first argument and 5.

You could, equivalently, use @code{(a &optional b &rest c)} as
the lamda list and write @code{(let* (d (e 5) (f (cons a e))) ...)}
around the body of the function.
@end table

	It is important to realize that the list of arguments to which a
rest-parameter is bound is set up in whatever way is most efficiently
implemented, rather than in the way that is most convenient for the
function receiving the arguments.  It is not guaranteed to be a ``real''
list.  Sometimes the rest-args list is a stack list (see (stack-list))
stored in the function-calling stack, and loses its validity when the
function returns.  If a rest-argument is to be returned or made part of
permanent list-structure, it must first be copied (see @code{copylist},
(copylist-fun)), as you must always assume that it is one of these
special lists.  The system does not detect the error of omitting to copy
a rest-argument; you will simply find that you have a value which seems
to change behind your back.

At other times the rest-args list may be an argument that was given to
@code{apply}; therefore it is not safe to @code{rplaca} this list as you may
modify permanent data structure.  An attempt to @code{rplacd} a rest-args
list is unsafe in this case, while in the first case it would cause
an error, since lists in the stack are impossible to @code{rplacd}.

.defconst lambda-parameters-limit
Has as its value the limit on the number of parameters that a lambda
list may have.  The implementation limit on the number of parameters
allowed is at least this many.  There is no promise that this many is
forbidden, but it is a promise that any number less than this many is
permitted.
.end_defconst

@subsection Lambda-List Keywords
@cindex lambda-list keywords
@cindex `&' keywords

This section documents all the keywords that may appear in the
lambda list or argument list (see (lambda-list)) of a function, a
macro, or a special form.  Some of them are allowed everywhere, while
others are only allowed in one of these contexts; those are so
indicated.  You need only know about @code{&optional}, @code{&key}, and
@code{&rest} in order to understand the documentation of system functions
in this manual.

.defconst lambda-list-keywords
The value of this variable is a list of all of the allowed `@code{&}' keywords.
A list of them follows.
.end_defconst

@table @code
@item &optional
Separates the required arguments of a function from the optional arguments.
See (lambda-list).

@item &rest
Separates the required and optional arguments of a function from the rest argument.
There may be only one rest argument.  See (&rest) for full information about
rest arguments.  See (lambda-list).

@item &key
Separates the positional arguments and rest argument of a function from the keyword
arguments.  See (lambda-list).

@item &allow-other-keys
In a function that accepts keyword arguments, says that keywords
that are not recognized are allowed.  They and the corresponding values are
ignored, as far as keyword arguments are concerned, but they do become
part of the rest argument, if there is one.

@item &aux
Separates the arguments of a function from the auxiliary variables.
Following @code{&aux} you can put entries of the form
@lisp
(@i{variable} @i{initial-value-form})
@end lisp
or just @i{variable} if you want it initialized to @code{nil} or don't care what the initial
value is.

@item &special
Declares the following arguments and/or auxiliary variables to be special within
the scope of this function.

@item &local
Turns off a preceding @code{&special} for the variables that follow.

@item &quote
Declares that the following arguments are not to be evaluated.  This is how you create
a special function.  See the caveats about special forms on (special-form-caveat).

@item &eval
Turns off a preceding @code{&quote} for the arguments which follow.

@item &list-of
This is for macros defined by @code{defmacro} only.  Refer to (&list-of).

@item &body
This is for macros defined by @code{defmacro} only.  It is similar to @code{&rest},
but declares to @code{grindef} and the code-formatting module of the editor that
the body forms of a special form follow and should be indented accordingly.
Refer to (&body).

@item &whole
This is for macros defined by @code{defmacro} only.  It means that the following
argument is bound to the entire macro call form being expanded.  Refer to
(&whole).

@item &environment
This is for macros defined by @code{defmacro} only.  It means that the following
argument is bound to an environment structure which records the local
@code{macrolet} macro definitions in effect for subforms of the macro call form.
Refer to (&environment).
@end table

@subsection Local Functions

The constructs @code{flet} and @code{labels} permit you to define
a function name in a lexical context only.  If the same name
has a global function definition, it is shadowed temporarily.
Function definitions established by @code{flet} (or @code{labels})
are to global definitions made with @code{defun} as lexical variable bindings
made with @code{let} are to global bindings made with @code{defvar}.
They always have lexical scope.

@defspec flet local-functions body...
Executes @i{body} with local function definitions in effect
according to @i{local-functions}.

@i{local-functions} should be a list of elements which look like
@lisp
(@i{name} @i{lambda-list} @i{function-body}...)
@end lisp
just like the cdr of a @code{defun} form.  The meaning of this element
of @i{local-functions} is to define @i{name} locally with the
indicated definition.
Within the lexical scope of @i{body}, using @i{name} as a function name accesses
the local definition.

@lisp
@exdent Example:
(flet ((triple (x) (* x 3)))
  (print (triple -1))
  (mapcar (function triple) '(1 2 1.2)))
@end lisp
prints the number -3 and returns a list @code{(3 6 3.6)}.

Each local function is closed in the environment outside the @code{flet}.
As a result, the local functions cannot call each other.
@lisp
(flet ((foo (x) (bar x t))
       (bar (y z) (list y z)))
  (foo t))
@end lisp
calls the local definition of @code{foo}, which calls the @i{global} definition
of @code{bar}, because the body of @code{foo} is not within the scope of the
local definition of @code{bar}.

Functions defined with @code{flet} inside of a compiled function
can be referred to by name in a function spec of the form
@code{(:internal @i{outer-function-name} @i{flet-name})}.
See (flet-function-spec).
@end defspec

@defspec labels local-functions body...
Is like @i{flet} except that the local functions can call each other.
They are closed in the environment inside the @code{labels}, so all
the local function names are accessible inside the bodies of the
local functions.  @code{labels} is one of the most ancient Lisp constructs,
but was typically not implemented in second generation Lisp systems
in which no efficient form of closure existed.

@lisp
(labels ((walk (x)
	   (typecase x
	     (cons (walk (car x)) (walk (cdr x)))
	     (t (if (eq x 'haha) (print 'found-it))))))
  (walk foo))
@end lisp
allows @code{walk} to call itself recursively because @code{walk}'s body
is inside the scope of the definition of @code{walk}.
@end defspec

See also @code{macrolet}, an analogous construct for defining macros locally
((macrolet-fun)).

@section  Some Functions and Special Forms

This section describes some functions and special forms.  Some are parts
of the evaluator, or closely related to it.  Some have to do
specifically with issues discussed above such as keyword arguments.
Some are just fundamental Lisp forms that are very important.

@defun eval form &optional nohook
@code{(eval @i{form})} evaluates @i{form}, and returns the result.
@lisp
@exdent Example:
(defvar x 43)
(defvar foo 'bar)
(eval (list 'cons x 'foo))
    => (43 . bar)
@end lisp
The dynamic bindings available at the time @code{eval} is called
are visible for dynamic variables within the expression @i{x}.
No lexical bindings are available for the evaluation of @i{x}.

It is unusual to call @code{eval} explicitly, since usually
evaluation is done implicitly.  If you are writing a simple Lisp program and
explicitly calling @code{eval}, you are probably doing something wrong.
@code{eval} is primarily useful in programs which deal with Lisp itself,
rather than programs about knowledge, mathematics or games.

Also, if you are only interested in getting at the dynamic value of a
symbol (that is, the contents of the symbol's value cell), then you
should use the primitive function @code{symeval} (see (symeval-fun)).

If the argument @i{nohook} is non-@code{nil}, execution of the
evalhook is inhibited for @i{form}, but not for
evaluation of the subforms of @i{form}.  See @code{evalhook}, (evalhook-fun).
@code{evalhook} is also the way to evaluate in a specified lexical environment
if you happen to have got your hands on one.

Note: in Maclisp, the second argument to @code{eval} is a
``binding context pointer''.  There is no such thing in Zetalisp;
closures are used instead (see (closure)).
@end defun

@defun si:eval1 form &optional nohook
Within the definition of a special form, evaluates @i{form} in the
@i{current} lexical environment.
@end defun

@defun funcall f &rest args
@code{(funcall @i{f} @i{a1} @i{a2} ... @i{an})} applies the
function @i{f} to the arguments @i{a1}, @i{a2}, ..., @i{an}.
@i{f} may not
be a special form nor a macro; this would not be meaningful.
@lisp
@exdent Example:
(cons 1 2) => (1 . 2)
(setq cons 'plus)
(funcall cons 1 2) => 3
@end lisp
This shows that the use of the symbol @code{cons} as the name of a function
and the use of that symbol as the name of a variable do not interact.
The @code{cons} form invokes the function named @code{cons}.
The @code{funcall} form evaluates the variable and gets the symbol @code{plus},
which is the name of a different function.
@end defun

Note:  the Maclisp functions @code{subrcall}, @code{lsubrcall}, and @code{arraycall}
are not needed on the Lisp Machine; @code{funcall} is just as efficient.
@code{arraycall} is provided for compatibility; it ignores its first
subform (the Maclisp array type) and is otherwise identical to @code{aref}.
@code{subrcall} and @code{lsubrcall} are not provided.
@findex "subrcall"
@findex "lsubrcall"
@c @findex "arraycall"  -- commented out since it does exist after all

@defun apply f &rest args
@defunx lexpr-funcall f &rest args
@code{apply} is like @code{funcall} except that the last of @i{args} is
really a list of arguments to give to @i{f} rather than a single argument.
@code{lexpr-funcall} is a synonym for @code{apply}; formerly, @code{apply} was
limited to the two argument case.

@code{(apply @i{f} @i{arglist})} applies the function @i{f} to the list of
arguments @i{arglist}.  @i{arglist} should be a list; @i{f} can be any function.
@lisp
@exdent Examples:
(setq fred '+) (apply fred '(1 2)) => 3
(setq fred '-) (apply fred '(1 2)) => -1
(apply 'cons '((+ 2 3) 4)) =>
	((+ 2 3) . 4)	@i{not} (5 . 4)
@end lisp
Of course, @i{arglist} may be @code{nil}.

If there is more than one element of @i{args}, then all but the last
of them are individual arguments to pass to @i{f}, while the last one
is a list of arguments as above.
@lisp
@exdent Examples:
(apply 'plus 1 1 1 '(1 1 1)) => 6

(defun report-error (&rest args)
   (apply 'format *error-output* args))
@end lisp

@code{apply} can also be used with a single argument.  Then this argument
is a list of a function and some arguments to pass it.
@lisp
@exdent Example:
(apply '(car (a))) => a
      1;Not the same as @code{(eval '(car (a)))}*
@end lisp

Note: in Maclisp, @code{apply} takes two or three arguments, and the third
argument, when passed, is interpreted as a ``binding context pointer''.
So the second argument always provides all the args to pass to the function.
There are no binding context pointers in Zetalisp; true lexical scoping
exists and is interfaced in other ways.
@end defun

.defconst call-arguments-limit
Has as its value the limit on the number of arguments that can be dealt with in a
function call.  There is no promise that this many is forbidden, but it is a promise
that any smaller number is acceptable.

Note that if @code{apply} is used with exactly two arguments, the first
one being a function that takes a rest argument, there is no limit
except the size of memory on the number of elements in the second
argument to @code{apply}.
.end_defconst

@defun call function &rest argument-specifications
Offers a very general way of controlling what arguments you
pass to a function.  You can provide either individual arguments as in
@code{funcall} or lists of arguments as in @code{apply}, in any order.  In
addition, you can make some of the arguments @i{optional}.  If the
function is not prepared to accept all the arguments you specify, no
error occurs if the excess arguments are optional ones.  Instead, the
excess arguments are simply not passed to the function.

The @i{argument-specs} are alternating keywords (or lists of keywords)
and values.  Each keyword or list of keywords says what to do with the
value that follows.  If a value happens to require no keywords,
provide @code{()} as a list of keywords for it.

Two keywords are presently defined: @code{:optional} and @code{:spread}.
@code{:spread} says that the following value is a list of arguments.
Otherwise it is a single argument.  @code{:optional} says that all the
following arguments are optional.  It is not necessary to specify
@code{:optional} with all the following @i{argument-specs}, because it is
sticky.

Example:
@lisp
(call #'foo () x :spread y '(:optional :spread) z () w)
@end lisp
The arguments passed to @code{foo} are the value of @code{x}, the
elements of the value of @code{y}, the elements of the value of
@code{z}, and the value of @code{w}.  The function @code{foo} must be
prepared to accept all the arguments which come from @code{x} and
@code{y}, but if it does not want the rest, they are ignored.
@end defun

@defspec quote object
@cindex "quote"
@code{(quote @i{object})} simply returns @i{object}.  @code{quote} is used to
include constants in a form.  It is useful specifically because
@i{object} is not evaluated; the @code{quote} is how you make a form that
returns an arbitrary Lisp object.
@lisp
@exdent Examples:
(quote x) => x
(setq x (quote (some list)))   x => (some list)
@end lisp
	Since @code{quote} is so useful but somewhat cumbersome to type, the reader normally
converts any form preceded by a single quote (@code{'}) character into a @code{quote} form.
@lisp
@exdent For example,
(setq x '(some list))
@exdent is converted by @code{read} into
(setq x (quote (some list)))
@end lisp
@end defspec

@defspec function f
@code{function} has two distinct, though related, meanings.

If @i{f} is a symbol or any other function spec (see (function-spec)),
@code{(function @i{f})} refers to the function definition of @i{f}.
For example, in @code{(mapcar (function car) x)}, the function
definition of @code{car} is passed as the first argument to @code{mapcar}.
@code{function} used this way is like @code{fdefinition}
except that its argument is unevaluated, and so
@lisp
(function fred)  1is like*  (fdefinition 'fred)
@end lisp

@i{f} can also be an explicit function, or lambda-expression, a list such
as @code{(lambda (x) (* x x))} such as could be the function definition of a
symbol.  Then @code{(function @i{f})} represents that function, suitably
interfaced to execute in the lexical environment where it appears.  To
explain:

@lisp
(let (a)
  (mapcar (lambda (x) (push x a)) l))
@end lisp

@noindent
attempts to call the function @code{lambda} and evaluate @code{(x)}
for its first argument.  That is no way to refer to the function
expressed by @code{(lambda (x) (push x a))}.

@lisp
(let (a)
  (mapcar (quote (lambda (x) (push x a))) l))
@end lisp

@noindent
passes to @code{mapcar} the list @code{(lambda (x) (push x a))}.
This list does not in any way record the lexical environment
where the @code{quote} form appeared, so it is impossible to make
this environment, with its binding of @code{a}, available
for the execution of @code{(push x a)}.  Therefore, the reference
to @code{a} does not work properly.

@lisp
(let (a)
  (mapcar (function (lambda (x) (push x a))) l))
@end lisp

@noindent
passes @code{mapcar} a specially designed closure made from the
function represented by @code{(lambda (x) (push x a))}.  When @code{mapcar}
calls this closure, the lexical environment of the @code{function} form
is put again into effect, and the @code{a} in @code{(push x a)} refers
properly to the binding made by this @code{let}.

In addition, the compiler knows that the argument to @code{function}
should be compiled.  The argument of @code{quote} cannot be compiled
since it may be intended for other uses.

To ease typing, the reader converts @code{#'@i{thing}} into @code{(function @i{thing})}.
So @code{#'} is similar to @code{'} except that it produces a
@code{function} form instead of a @code{quote} form.  The last example
could be written as 
@lisp
(let (a)
  (mapcar #'(lambda (x) (push x a)) l))
@end lisp

Another way of explaining @code{function} is that it causes @i{f} to be
treated the same way as it would as the car of a form.  Evaluating
the form @code{(@i{f} @i{arg1} @i{arg2}...)} uses the function definition
of @i{f} if it is a symbol, and otherwise expects @i{f} to be a list
which is a lambda-expression.  Note that the car of a form may not be
a non-symbol function spec, as that would be difficult to make sense of.
Instead, write
@lisp
(funcall (function @i{spec}) @i{args}...)
@end lisp

You should be careful about whether you use @code{#'} or @code{'}.  Suppose
you have a program with a variable @code{x} whose value is assumed to
contain a function that gets called on some arguments.  If you want that
variable to be the @code{test} function, there are two things you could say:
@lisp
(setq x 'test)
@exdent or
(setq x #'test)
@end lisp
The former causes the value of @code{x} to be the symbol @code{test}, whereas
the latter causes the value of @code{x} to be the function object found in
the function cell of @code{test}.  When the time comes to call the function
(the program does @code{(funcall x ...)}), either expression works
because calling a symbol as a function uses its function definition instead.
Using @code{'test} is insignificantly slower, because the function
call has to indirect through the symbol, but it allows the function
to be redefined, traced (see (trace-fun)), or advised (see (advise-fun)).
Use of @code{#'} picks up the function definition out of
the symbol @code{test} when the @code{setq} is done and does not see any later changes to it.
@code{#'} should be used only if you wish specifically to prevent redefinition
of the function from affecting this closure.
@end defspec

@defun false
Takes no arguments and returns @code{nil}.
@end defun

@defun true
Takes no arguments and returns @code{t}.
@end defun

@defun ignore &rest ignore
Takes any number of arguments and returns @code{nil}.  This is often useful
as a ``dummy'' function; if you are calling a function that takes a function
as an argument, and you want to pass one that doesn't do anything and
won't mind being called with any argument pattern, use this.
@end defun

@defspec comment
@code{comment} ignores its form and returns the symbol @code{comment}.
It is most useful for commenting out function definitions
that are not needed or correct but worth preserving in the source.
The @code{#|...|#} syntactic construct is an alternative method.
For comments within code about the code, it is better to use semicolons.
@lisp
@exdent Example:
(comment
;; This is brain-damaged.  Can someone figure out
;; how to do this right?
(defun foo (x)
  ...)
) ;End comment
1;; prevents this definition of @code{foo} from being used.*
@end lisp
@end defspec

@section  Declarations
@cindex declaration

Declarations provide auxiliary information on how to execute a function
or expression properly.  The most important declarations are @code{special}
declarations, which control the scope of variable names.  Some
declarations do not affect execution at all and only provide information
about a function, for the sake of @code{arglist}, for example.

Declarations may apply to an entire function or to any expression within
it.  Declarations can be made around any subexpression by writing a
@code{local-declare} around the subexpression or by writing a @code{declare}
at the front of the body of certain constructs.  Declarations can be
made on an entire function by writing a @code{declare} at the front of the
function's body.

@defspec local-declare (declaration...) body...
A @code{local-declare} form looks like

@lisp
(local-declare (@i{decl1} @i{decl2} ...)
   @i{form1}
   @i{form2}
   ...)
@end lisp

Each @i{decl} is in effect for the forms in the body of the
@code{local-declare} form.
@end defspec

@defspec declare declaration...
The special form @code{declare} is used for writing local declarations
within the construct they apply to.

A @i{declare} inside a function definition, just after the argument
list, is equivalent to putting a @code{local-declare} around the function
definition.  More specifically,

@lisp
(defun foo (a b)
  (declare (special a b))
  (bar))
@end lisp

@noindent
is equivalent to

@lisp
(local-declare ((special a b))
(defun foo (a b)
  (bar)))
@end lisp

Note that

@lisp
(defun foo (a b)
  (local-declare ((special a b))
    (bar)))
@end lisp

does not do the job, because the declaration is not in effect for
the binding of the arguments of @code{foo}.

@code{declare} is preferable to @code{local-declare} in this sort of
situation, because it allows the @code{defun}s themselves to be the
top-level lists in the file.  While @code{local-declare} might appear to
have an advantage in that one @code{local-declare} may go around several
@code{defun}s, it tends to cause trouble to use @code{local-declare} in that
fashion.

@code{declare} has a similar meaning at the front of the body of a
@code{progn}, @code{prog}, @code{let}, @code{prog*}, @code{let*}, or internal @code{lambda}.  For
example,
@lisp
(prog (x)
      (declare (special x))
      ...)
@exdent is equivalent to
(local-declare ((special x))
  (prog (x)
        ...))
@end lisp

At top level in the file, @code{(declare @i{forms}...)} is equivalent to
@code{(eval-when (compile) @i{forms}...)}.  This use of @code{declare}
is nearly obsolete, and should be avoided.  In Common Lisp, @code{proclaim}
(below) is used for such purposes, with a different calling convention.

Elsewhere, @code{declare}'s are ignored.
@end defspec

Here is a list of declarations that have system-defined meanings:
@table @code
@item (special @i{var1 var2 ...})
The variables @i{var1}, @i{var2}, etc. will be treated as special
variables in the scope of the declaration.

@item (unspecial @i{var1 var2 ...})
The variables @i{var1}, @i{var2}, etc. will be treated as lexical
variables in the scope of the declaration, even if they are
globally special.

@item (notinline @i{fun1} @i{fun2 ...})
The functions @i{fun1}, @i{fun2} and so on will not be open coded
or optimized by the compiler within the scope of the declaration.

@item (inline @i{fun1} @i{fun2 ...})
The functions @i{fun1}, @i{fun2} and so on will be open coded or
optimized by the compiler (to whatever extent it knows how) within the
scope of the declaration.  Merely issuing this declaration does not
tell the compiler how to do any useful optimization or open coding
of a function.

@item (ignore @i{var1} @i{var2 ...})
Says that the variables @i{var1}, @i{var2}, etc., which are bound
in the construct in which this declaration is found, are going to
be ignored.  This is currently significant only in a function being compiled;
the compiler issues a warning if the variables are used, and refrains
from its usual warning if the variables are ignored.

@item (declaration @i{decl1} @i{decl2 ...})
Says that declarations @i{decl1}, @i{decl2}, etc. are going to be used,
and prevents any warning about an unrecognized type of declaration.
For example:
@lisp
(defun hack ()
  (declare (declaration lose-method)
	   (lose-method foo bar))
  @i{...} (lose foo) @i{...})
@end lisp
might be useful if @code{(lose foo)} is a macro whose expander function
does @code{(getdecl 'foo 'lose-method)} to see what to do.
See (getdecl-fun) for more information on @code{getdecl} and declarations.
@lisp
(proclaim '(declaration lose-method))
@end lisp
might also be advisable if you expect widespread use of @code{lose-method}
declarations.
@end table

The next two are used by the compiler and generally should not
be written by users.
@table @code
@item (def @i{name}  . @i{definition})
@i{name} will be defined for the compiler in the scope of the declaration.
The compiler uses this automatically to keep track of macros and
open-codable functions (@code{defsubst}s) defined in the file being compiled.
Note that the cddr of this item is a function.

@item (@i{propname} @i{symbol} @i{value})
@code{(getdecl @i{symbol} @i{propname})} will return @i{value}
in the scope of the declaration.  This is how the compiler keeps track of
@code{defdecl}s.
@end table

These declarations are significant only when they apply to an entire @code{defun}.
@table @code
@item (arglist . @i{arglist})
Records @i{arglist} as the argument list of the function, to be used instead of
its lambda list if anyone asks what its arguments are.  This is
purely documentation.

@item (values . @i{values}) 1or* (:return-list . @i{values})
Records @i{values} as the return values list of the function, to be used if
anyone asks what values it returns.  This is purely documentation.

@item (sys:function-parent @i{parent-function-spec})
Records @i{parent-function-spec} as the parent of this function.
If, in the editor, you ask to see the source of this function,
and the editor doesn't know where it is, the editor will show you
the source code for the parent function instead.

For example, the accessor functions generated by @code{defstruct}
have no defuns of their own in the text of the source file.
So @code{defstruct} generates them with @code{sys:function-parent}
declarations giving the @code{defstruct}'s name as the parent function spec.
Visiting the accessor function with @code{Meta-.} sees the declaration
and therefore visits the text of the @code{defstruct}.

@item (:self-flavor @i{flavorname})
Instance variables of the flavor @i{flavorname}, in @code{self}, will be
accessible in the function.
@end table

@defmac locally &body body
Executes the @i{body}, recognizing declarations at the front of it.
@code{locally} is synonymous with @code{progn} except that in Common Lisp
a @code{declare} is allowed at the beginning of a @code{locally} and not
at the beginning of a @code{progn}.

@code{locally} does differ from @code{progn} in one context: at top level
in a file being compiled, @code{progn} causes each of its elements
(including declarations, therefore) to be treated as if at top level.
@code{locally} does not receive this treatment.  The @code{locally} form
is simply evaluated when the QFASL file is loaded.
@end defmac

@defun proclaim &rest declarations
Each of @i{declarations} is put into effect globally.  Currently only
@code{special} and @code{unspecial} declarations mean anything in this way.
@code{proclaim}'s arguments are evaluated, and the values are expected
to be declarations such as you could write in a @code{declare}.
Thus, you would say @code{(proclaim '(special x))} to make a special
declaration globally.

Top-level @code{special} declarations are not the recommended way to make a
variable special.  Use @code{defvar}, @code{defconstant} or @code{defparameter},
so that you can give the variable documentation.  Proclaiming the
variable special should be done only when the variable is used in a file
other than the one which defines it, to enable the file to be compiled
without having to load the defining file first.

@code{proclaim} is fairly new.  Until recently, top-level @code{declare} was
the preferred way to make global special declarations when @code{defvar},
etc., could not be used.  Such top-level @code{declare}'s are still
quite common.  In them, the declaration would not be quoted;
for example, @code{(declare (special x))}.
@end defun

@defspec special variables...
Equivalent to @code{(proclaim (special @i{variables}...))}, this
declares each of the @i{variables} to be globally special.
This function is obsolete.
@end defspec

@defspec unspecial variables...
Removes any global special declarations of the @i{variables}.
This function is obsolete.
@end defspec

@defmac the type-specifier value-form
Is a Common Lisp construct effectively the same as @i{value-form}.  It
declares that the value of @i{value-form} is an object which of type
@i{type-specifier}.  This is to assist compilers in generating better
code for conventional machine architectures.  The Lisp Machine does not
make use of type declarations so this is the same as writing just
@i{value-form}.  @i{type-specifier} is not evaluated.

If you want the type of an object to be checked at run time, with an
error if it is not what it is supposed to be, use @code{check-type}
((check-type-fun)).
@end defmac

@section  Tail Recursion
@cindex tail recursion

When one function ends by calling another function (possibly itself), as in
@lisp
(defun last (x)
  (cond ((atom x) x)
	((atom (cdr x)) x)
	(t (last (cdr x)))))
@end lisp
@noindent
it is called @i{tail recursion}.  In general, if @i{X} is a form, and
@i{Y} is a sub-form of @i{X}, then if the value of @i{Y} is
unconditionally returned as the value of @i{X}, with no intervening
computation, then we say that @i{X} tail-recursively evaluates @i{Y}.

In a tail recursive situation,
it is not strictly necessary to remember anything about the first call
to @code{last} when the second one is activated.  The stack frame for the
first call can be discarded completely, allowing @code{last} to use a
bounded amount of stack space independent of the length of its argument.
A system which does this is called @i{tail recursive}.

The Lisp machine system works tail recursively if the variable
@code{tail-recursion-flag} is non-@code{nil}.  This is often faster, because
it reduces the amount of time spent in refilling the hardware's pdl
buffer.  However, you forfeit a certain amount of useful debugging
information: once the outer call to @code{last} has been removed from the
stack, you can no longer see its frame in the debugger.

@defvar tail-recursion-flag
If this variable is non-@code{nil}, the calling stack frame is
discarded when a tail-recursive call is made in compiled code.
@end defvar

There are many things which a function can do that can make it dangerous
to discard its stack frame.  For example, it may have done a @code{*catch};
it may have bound special variables; it may have a @code{&rest} argument on
the stack; it may have asked for the location of an argument or local
variable.  The system detects all of these conditions automatically and
retains the stack frame to ensure proper execution.  Some of these
conditions occur in @code{eval}; as a result, interpreted code is never
completely tail recursive.

@section  Multiple Values
@cindex multiple values
@cindex returning multiple values

The Lisp Machine includes a facility by which the evaluation of a form
can produce more than one value.  When a function needs to return more
than one result to its caller, multiple values are a cleaner way of
doing this than returning a list of the values or @code{setq}'ing special
variables to the extra values.  In most Lisp function calls, multiple
values are not used.  Special syntax is required both to @i{produce}
multiple values and to @i{receive} them.

The primitive for producing multiple values is @code{values}, which takes
any number of arguments and returns that many values.  If the last form
in the body of a function is a @code{values} with three arguments, then
a call to that function returns three values.  Many system functions
produce multiple values, but they all do it via @code{values}.

@defun values &rest args
Returns multiple values, its arguments.  This is the primitive
function for producing multiple values.  It is legal to call @code{values} with
no arguments; it returns no values in that case.
@end defun

@defun values-list list
Returns multiple values, the elements of the @i{list}.  @code{(values-list '(a b c))}
is the same as @code{(values 'a 'b 'c)}.
@i{list} may be @code{nil}, the empty list, which causes no values to be returned.
Equivalent to @code{(apply 'values @i{list})}.
@end defun

@code{return} and its variants can also be used, within a @code{block}, @code{do} or
@code{prog} special form, to return multiple values.  They are explained on
(return-fun).

Here are the special forms for receiving multiple values.

@defspec multiple-value (variable...) form
@defspecx multiple-value-setq (variable...) form
@code{multiple-value} is a special
form used for calling a function which
is expected to return more than one value.
@i{form} is evaluated, and the @i{variables}
are @i{set} (not lambda-bound) to the values returned by @i{form}.  If more values
are returned than there are variables, the extra values
are ignored.  If there are more variables than values returned,
extra values of @code{nil} are supplied.  If @code{nil} appears in the @i{var-list},
then the corresponding value is ignored (setting @code{nil} is not allowed anyway).
@lisp
@exdent Example:
(multiple-value (symbol already-there-p)
	(intern "goo"))
@end lisp
In addition to its first value (the symbol), @code{intern} returns a second
value, which is non-@code{nil} if an existing symbol was found,
or else @code{nil} if @code{intern} had to create one.  So if
the symbol @code{goo} was already known, the variable @code{already-there-p}
is set non-@code{nil}, otherwise it is set to @code{nil}.  The third value
returned by @code{intern} is ignored by this form of call since there
is no third variable in the @code{multiple-value}.

@code{multiple-value} is usually used for effect rather than for value; however,
its value is defined to be the first of the values returned by @i{form}.

@code{multiple-value-setq} is the Common Lisp name for this construct.
The two names are equivalent.
@end defspec

@defspec multiple-value-bind (variable...) form body...
This is similar to @code{multiple-value}, but locally binds the variables which
receive the values, rather than setting them, and has a body--a set of forms
which are evaluated with these local bindings in effect.
First @i{form} is evaluated.  Then the @i{variables} are
bound to the values returned by @i{form}.  Then the @i{body} forms
are evaluated sequentially, the bindings are undone, and the result
of the last @i{body} form is returned.
@lisp
@exdent Example:
(multiple-value-bind (sym already-there)
    (intern string)
  ;; If an existing symbol was found, deallocate the string.
  (if already-there
      (return-storage (prog1 string (setq string nil))))
  sym)
@end lisp
@end defspec

@defspec multiple-value-call function argforms...
Evaluates the argforms, saving all of their values, and then calls
@i{function} with all those values as arguments.  This differs from
@lisp
(funcall @i{function} @i{argforms}...)
@end lisp
because that would get only one argument for @i{function} from each
@i{argform}, whereas @code{multiple-value-call} gets as many args from each
@i{argform} as the @i{argform} cares to return.  This works by consing a
list of all the values returned, and applying @i{function} to it.  Example:
@lisp
(multiple-value-call 'append
      (values '(a b) '(c d))
      '(e f))
   =>  (a b c d e f)
@end lisp
@end defspec

@defspec multiple-value-prog1 form forms...
Evaluates @i{form}, saves its values, evaluates the @i{forms}, discards their values,
then returns whatever values @i{form} produced.
This does not cons.  Example:
@lisp
(multiple-value-prog1 (values 1 2)
      (print 'foo))
   =>  1 2
@end lisp
@end defspec

@defspec multiple-value-list form
@code{multiple-value-list} evaluates @i{form}, and returns a list of
the values it returned.  This is useful for when you don't know how many values
to expect.
@lisp
@exdent Example:
(setq a (multiple-value-list (intern "goo")))
a => (goo nil #<Package USER 10112147>)
@end lisp
This is similar to the example of @code{multiple-value} above; @code{a} is set
to a list of three elements, the three values returned by @code{intern}.
@end defspec

@defspec nth-value n form
Evaluates @i{form} and returns its value number @i{n}, @i{n} = 0 meaning
the first value.  For example, @code{(nth-value 1 (foo))} returns
the second of @code{foo}'s values.  @code{nth-value} operates without consing
in compiled code if the first argument's value is known at compile time.
@end defspec

When one form finished by tail recursively evaluating a subform (see
(tail-recursion)), all of the subform's multiple values are passed back
by the outer form.  For example, the value of a @code{cond} is the value of
the last form in the selected clause.  If the last form in that clause
produces multiple values, so does the @code{cond}.  This @i{passing-back}
of multiple values of course has no effect unless eventually one of the
special forms for receiving multiple values is reached.

If the outer form returns a value computed by a subform, but not in a
tail recursive fashion (for example, if the value of the subform is
examined first), multiple values or only single values may be returned
at the discretion of the implementation; users should not depend on
whatever way it happens to work, as it may change in the future or in
other implementations.  The reason we don't guarantee non-transmission
of multiple values is because such a guarantee would not be very useful
and the efficiency cost of enforcing it would be high.  Even
@code{setq}'ing a variable to the result of a form, then returning the
value of that variable, might pass multiple values if an
optimizing compiler realized that the @code{setq}'ing of the variable
was unnecessary.  Since extra returned values are generally ignored,
it is not vital to eliminate them.

Note that use of a form as an argument to a function never receives
multiple values from that form.  That is, if the form @code{(foo (bar))}
is evaluated and the call to @code{bar} returns many values, @code{foo} is
still called on only one argument (namely, the first value returned),
rather than being called on all the values returned.  We choose not to
generate several separate arguments from the several values, because
this would make the source code obscure; it would not be syntactically
obvious that a single form does not correspond to a single argument.
To pass all returned values to another function, use @code{multiple-value-call}, above.

For clarity, descriptions of the interaction of several common special
forms with multiple values follow.  This can all be deduced from the
rule given above.  Note well that when it says that multiple values
are not returned, it really means that they may or may not be returned,
and you should not write any programs that depend on which way it actually works.

The body of a @code{defun} or a @code{lambda}, and variations such as the
body of a function, the body of a @code{let}, etc., pass back multiple
values from the last form in the body.

@code{eval}, @code{apply} and @code{funcall},
pass back multiple values from the function called.

@code{progn} passes back multiple values from its last form.  @code{progv} and
@code{progw} do so also.  @code{prog1} and @code{prog2}, however, do not pass
back multiple values.

Multiple values are passed back only from the last subform of an @code{and} or an @code{or} form,
not from previous subforms since the return is conditional.  Remember
that multiple values are only passed back when the value of a subform
is unconditionally returned from the containing form.  For example,
consider the form @code{(or (foo) (bar))}.  If @code{foo} returns a non-@code{nil}
first value, then only that value is returned as the value of the
form.  But if it returns @code{nil} (as its first value), then @code{or}
returns whatever values the call to @code{bar} returns.

@code{cond} passes back multiple values from the last form in the selected
clause, provided that that last form's value is returned
unconditionally.  This is true if the clause has two or more forms in
it, and is always true for the last clause.

The variants of @code{cond} such as @code{if}, @code{select}, @code{selectq}, and
@code{dispatch} pass back multiple values from the last form in the
selected clause.

If a @code{block} form falls through the end, it returns all the values
returned by the last expression in it.  If @code{return-from} or @code{return}
is used to exit a @code{block} form, then the values returned by the
@code{block} form depend on the kind of @code{return}.  If @code{return} is given
two or more subforms, then @code{block} returns as many values as the
@code{return} has subforms.  However, if the @code{return} has only one
subform, then the @code{block} returns all of the values returned by that
one subform.

@code{prog} behaves like @code{block} if it is exited with @code{return} (or
@code{return-from}).  If control falls through the end of a @code{prog}, it
returns the single value @code{nil}.  @code{do} also behaves like @code{block}
with respect to @code{return}, but if it is exited through the exit test,
all the values of the last @i{exit-form} are returned.

@code{unwind-protect} passes back multiple values from its protected form.
In a sense, this is an exception to the rule; but it is useful, and it
makes sense to consider the execution of the unwind forms as a byproduct of
unwinding the stack and not as part of sequential execution.

@code{catch} passes back multiple values from the last form in its
body, if it exits normally.  If a throw is done, multiple values are
passed back from the value form in the @code{throw}.

.defconst multiple-values-limit
The smallest number of values that might possibly fail to work.
Returning a number of values less than this many cannot possibly
run into trouble with an implementation limit on number of values returned.
.end_defconst

@section  Evaluation and Function Calling Errors

Here is a description of the error conditions that the evaluator can
signal.  Some can be signaled by calls to compiled functions also.  This
is for use by those who are writing condition handlers
((condition-handlers)).  The novice should skip this section.

.defcondition sys:invalid-function (@code{error})
This is signaled when an object that is
supposed to be applied to arguments is not a valid Lisp function.
The condition instance supports the
operation @code{:function}, which returns the supposed function to be called.

The @code{:new-function} proceed type is provided; it expects one argument,
a function to call instead.
.end_defcondition

.defcondition sys:invalid-lambda-list (@code{sys:invalid-function} @code{error})
This condition name is present in addition to @code{sys:invalid-function}
when the function to be called looks like an interpreted function, and
the only problem is the syntax of its lambda list.
.end_defcondition

.defcondition sys:too-few-arguments (@code{error})
This condition is signaled when a function is applied to too few arguments.
The condition instance supports the operations @code{:function} and
@code{:arguments} which return the function and the list of the arguments
provided.

The proceed types @code{:additional-arguments} and @code{:new-argument-list}
are provided.  Both take one argument.  In the first case, the argument
is a list of arguments to pass in addition to the ones supplied.  In the
second, it is a list of arguments to replace the ones actually supplied.
.end_defcondition

.defcondition sys:too-many-arguments (@code{error})
This is similar to @code{sys:too-few-arguments}.  Instead of the
@code{:additional-arguments} proceed type, @code{:fewer-arguments} is
provided.  Its argument is a number, which is how many of the originally
supplied arguments to use in calling the function again.
.end_defcondition

.defcondition sys:undefined-keyword-argument (@code{error})
This is signaled when a function that takes keyword arguments is given a
keyword that it does not accept, if @code{&allow-other-keys} was not used
in the function's definition and @code{:allow-other-keys} was not specified
by the caller (see (allow-other-keys-kwd)).  The @code{:keyword} operation
on the condition instance returns the extraneous keyword, and the
@code{:value} operation returns the value supplied with it.

The proceed type @code{:new-keyword} is provided.  It expects one
argument, which is a keyword to use instead of the one supplied.
.end_defcondition

.defcondition-flavor sys:cell-contents-error (@code{error})
This condition name categorizes all the errors signaled because of
references to void memory locations.  It includes ``unbound'' variables,
``undefined'' functions, and other things.

@table @code
@item :address
A locative pointer to the referenced cell.
@item :current-address
A locative pointer to the cell which currently contains the contents
that were found in the referenced cell when the error happened.  This
can be different from the original address in the case of dynamic
variable bindings, which move between special PDLs and symbol value
cells.
@item :cell-type
A keyword saying what type of cell was referred to: @code{:function},
@code{:value}, @code{:closure}, or @code{nil} for a cell that is not one of
those.
@item :containing-structure
The object (list, array, symbol) inside which the referenced memory cell is found.
@item :data-type
@itemx :pointer
The data type and pointer fields of the contents of the memory cell, at
the time of the error.  Both are fixnums.
@end table

The proceed type @code{:no-action} takes no argument.  If the cell's
contents are now valid, the program proceeds, using them.  Otherwise
the error happens again.

The proceed type @code{:package-dwim} looks for symbols with the same name
in other packages; but only if the containing structure is a symbol.

Two other proceed types take one argument: @code{:new-value} and @code{:store-new-value}.
The argument is used as the contents of the memory cell.
@code{:store-new-value} also permanently stores the argument into the cell.
.end_defcondition-flavor

.defcondition sys:unbound-variable (@code{sys:cell-contents-error} @code{error})
This condition name categorizes all errors of variables whose values are void.
.end_defcondition

.defcondition sys:unbound-special-variable
.defcondition1 sys:unbound-closure-variable
.defcondition1 sys:unbound-instance-variable
These condition names appear in addition to @code{sys:unbound-variable} to subcategorize
the kind of variable reference that the error happened in.
.end_defcondition

.defcondition sys:undefined-function (@code{sys:cell-contents-error} @code{error})
This condition name categorizes errors of function specs that are undefined.
.end_defcondition

.defcondition sys:wrong-type-argument (@code{error})
This is signaled when a function checks the type of its argument and
rejects it; for example, if you do @code{(car 1)}.

The condition instance supports these extra operations:
@table @code
@item :arg-name
The name of the erroneous argument.  This may be @code{nil} if there is no
name, or if the system no longer remembers which argument it was.
@item :old-value
The value that was supplied for the argument.
@item :function
The function which received and rejected the argument.
@item :description
A type specifier which says what sort of object was expected for this argument.
@end table

The proceed type @code{:argument-value} is provided; it expects one argument,
which is a value to use instead of the erroneous value.
.end_defcondition

@chapter Flow of Control
@cindex control structure
@cindex flow of control
	Lisp provides a variety of structures for flow of control.

	Function application is the basic method for construction of
programs.  Operations are written as the application of a function
to its arguments.  Usually, Lisp programs are written as a large collection
of small functions, each of which implements a simple operation.
These functions operate by calling one another, and so larger
operations are defined in terms of smaller ones.

@cindex "recursion"
	A function may always call itself in Lisp.  The calling of
a function by itself is known as @i{recursion}; it is analogous
to mathematical induction.

@cindex "iteration"
	The performing of an action repeatedly (usually with some
changes between repetitions) is called @i{iteration}, and is provided as
a basic control structure in most languages.  The @i{do} statement of
PL/I, the @i{for} statement of ALGOL/60, and so on are examples of
iteration primitives.  Lisp provides two general iteration facilities:
@code{do} and @code{loop}, as well as a variety of special-purpose iteration
facilities.  (@code{loop} is sufficiently complex that it is explained
in its own chapter later in the manual; see (loop-fun).)

@cindex "conditional"
	A @i{conditional} construct is one which allows a program
to make a decision, and do one thing or another based on some logical
condition.  Lisp provides the simple one-way conditionals @code{and} and @code{or},
the simple two-way conditional @code{if}, and more general multi-way
conditionals such as @code{cond} and @code{selectq}.
The choice of which form to use in any particular situation is a matter
of personal taste and style.

@cindex "non-local exit"
@cindex "exit"
	There are some @i{non-local exit} control structures, analogous
to the @i{leave}, @i{exit}, and @i{escape} constructs in many modern
languages.
@c French, Italian, ...
Zetalisp provides for both static (lexical) non-local exits with
@code{block} and @code{return-from} and dynamic non-local exits with @code{catch}
and @code{throw}.  Another kind of non-local exit is the goto, provided
by the @code{tagbody} and @code{go} constructs.

	Zetalisp also provides a coroutine capability,
explained in the section on @i{stack-groups} ((stack-group)), and
a multiple-process facility (see (process)).  There is also a facility
for generic function calling using message passing; see (flavor).

@section  "Compound Statements"

@defspec progn body...
The @i{body} forms are evaluated in order from left to right and the value
of the last one is returned.
@code{progn} is the primitive control structure construct for "compound
statements".
@lisp
@exdent Example:
(foo (cdr a)
     (progn (setq b (extract frob))
	    (car b))
     (cadr b))
@end lisp

Lambda-expressions, @code{cond} forms, @code{do} forms, and
many other control structure forms use @code{progn} implicitly, that is,
they allow multiple forms in their bodies.
@end defspec

@defspec prog1 first-form body...
@code{prog1} is similar to @code{progn}, but it returns the value of its @i{first} form rather
than its last.
It is most commonly used to evaluate an expression with side effects, and return
a value which must be computed @i{before} the side effects happen.
@lisp
@exdent Example:
(setq x (prog1 y (setq y x)))
@end lisp
interchanges the values of the variables @i{x} and @i{y}.  @code{prog1} never
returns multiple values.
@end defspec

@defspec prog2 first-form second-form body...
@code{prog2} is similar to @code{progn} and @code{prog1}, but it returns its
@i{second} form.  It is included largely for compatibility with old programs.
@end defspec

@section  "Conditionals"

@defspec if
@code{if} is the simplest conditional form.  The ``if-then'' form looks like:
@lisp
(if @i{predicate-form} @i{then-form})
@end lisp
@i{predicate-form} is evaluated, and if the result is non-@code{nil}, the
@i{then-form} is evaluated and its result is returned.  Otherwise, @code{nil}
is returned.

In the ``if-then-else'' form, it looks like
@lisp
(if @i{predicate-form} @i{then-form} @i{else-form})
@end lisp
@i{predicate-form} is evaluated, and if the result is non-@code{nil}, the
@i{then-form} is evaluated and its result is returned.  Otherwise, the
@i{else-form} is evaluated and its result is returned.

If there are more than three subforms, @code{if} assumes you want more than
one @i{else-form}; if the predicate returns @code{nil}, they are evaluated
sequentially and the result of the last one is returned.
@end defspec

@defmac when condition body...
If @i{condition} evaluates to something non-@code{nil}, the @i{body} is
executed and its value(s) returned.  Otherwise, the value of the @code{when}
is @code{nil} and the @i{body} is not executed.
@end defmac

@defmac unless condition body...
If @i{condition} evaluates to @code{nil}, the @i{body} is
executed and its value(s) returned.  Otherwise, the value of the @code{unless}
is @code{nil} and the @i{body} is not executed.
@end defmac

@defspec cond
The @code{cond} special form consists of the symbol @code{cond} followed by
several @i{clauses}.  Each clause consists of a predicate form, called
the @i{condition}, followed by zero or more @i{body} forms.

@lisp
(cond (@i{condition body body}...)
      (@i{condition})
      (@i{condition body} ...)
      ... )
@end lisp

The idea is that each clause represents a case which
is selected if its condition is satisfied and the conditions
of all preceding clauses were not satisfied.  When a clause
is selected, its body forms are evaluated.

@code{cond} processes its clauses in order from left to right.  First,
the condition of the current clause is evaluated.  If the result is
@code{nil}, @code{cond} advances to the next clause.  Otherwise, the cdr of
the clause is treated as a list of body forms which are
evaluated in order from left to right.  After evaluating the
body forms, @code{cond} returns without inspecting any remaining
clauses.  The value of the @code{cond} form is the value of the
last body form evaluated, or the value of the condition if there
were no body forms in the clause.  If @code{cond} runs out of clauses,
that is, if every condition evaluates to @code{nil}, and thus no case is
selected, the value of the @code{cond} is @code{nil}. 
@lisp
@exdent Example:
(cond ((zerop x)    ;1First clause:*
       (+ y 3))     ; (zerop x)1 is the condition.*
                    ; (+ y 3)1 is the body.*
      ((null y)     ;1A clause with 2 body forms:*
       (setq y 4)   ;1 this*
       (cons x z))  ;1 and this.*
      (z)           ;1A clause with no body forms: the condition is *
                    ;1 just @code{z}.  If @code{z} is non-@code{nil}, it is returned.*
      (t            ;1A condition of *t
       105)         ;1 is always satisfied.*
   )                ;1This is the end of the cond.*
@end lisp
@end defspec

@defmac cond-every
@code{cond-every} has the same syntax as @code{cond}, but executes every clause whose
condition is satisfied, not just the first.  If a condition is the symbol
@code{otherwise}, it is satisfied if and only if no preceding condition is
satisfied.  The value returned
is the value of the last body form in the last clause whose condition
is satisfied.  Multiple values are not returned.
@end defmac


@defspec and form...
@code{and} evaluates the @i{form}s one at a time,
from left to right.  If any @i{form} evaluates to @code{nil}, @code{and}
immediately returns @code{nil} without evaluating the remaining
@i{forms}.  If all the @i{forms} evaluate to non-@code{nil} values, @code{and} returns
the value of the last @i{form}.

@code{and} can be used in two different ways.  You can use it as a logical
@code{and} function, because it returns a true value only if all of its
arguments are true:
@lisp
(if (and socrates-is-a-person
         all-people-are-mortal)
    (setq socrates-is-mortal t))
@end lisp

Because the order of evaluation is well-defined, you can do
@lisp
(if (and (boundp 'x)
         (eq x 'foo))
    (setq y 'bar))
@end lisp
knowing that the @code{x} in the @code{eq} form will not be evaluated if @code{x}
is found to be void.

You can also use @code{and} as a simple conditional form:
@lisp
(and (setq temp (assq x y))
     (rplacd temp z))
@end lisp
@lisp
(and bright-day
     glorious-day
     (princ "It is a bright and glorious day."))
@end lisp
but @code{when} is usually preferable.

Note: @code{(and) => t}, which is the identity for the @code{and} operation.
@end defspec

@defspec or form...
@code{or} evaluates the @i{form}s one by one from left to right.
If a @i{form} evaluates to @code{nil}, @code{or} proceeds to evaluate the
next @i{form}.  If there are no more @i{form}s, @code{or} returns @code{nil}.
But if a @i{form} evaluates to a non-@code{nil} value, @code{or} immediately returns
that value without evaluating any remaining @i{form}s.

As with @code{and}, @code{or} can be used either as a logical @code{or} function,
or as a conditional:

@lisp
(or it-is-fish it-is-fowl)

(or it-is-fish it-is-fowl
    (print "It is neither fish nor fowl.")
@end lisp

but it is often possible and cleaner to use @code{unless} in the latter case.
@cindex fish

Note:  @code{(or) => nil}, the identity for this operation.
@end defspec

@defmac selectq
@defmacx case
@defmacx caseq
@code{selectq} is a conditional which chooses one of its clauses to execute
by comparing the value of a form against various constants using @code{eql}.
Its form is as follows:
@lisp
(selectq @i{key-form}
  (@i{test body}...)
  (@i{test body}...)
  (@i{test body}...)
  ...)
@end lisp
The first thing @code{selectq} does is to evaluate @i{key-form}; call the resulting
value @i{key}.  Then @code{selectq} considers
each of the clauses in turn.  If @i{key} matches the clause's
@i{test}, the body of the clause
is evaluated, and @code{selectq} returns the value of the last
body form.  If there are no matches, @code{selectq} returns @code{nil}.

A @i{test} may be any of:
@table @strong
@item 1) A symbol
If the @i{key} is @code{eql} to the symbol, it matches.
@item 2) A number
If the @i{key} is @code{eql} to the number, it matches.
@i{key} must have the same type and the same value
as the number.
@item 3) A list
If the @i{key} is @code{eql} to one of the elements of the list,
then it matches.  The elements of the list should be symbols
or numbers.
@item 4) @code{t} or @code{otherwise}
The symbols @code{t} and @code{otherwise} are special tests which match anything.  
Either symbol may be used, it makes no difference;
@code{t} is mainly for compatibility with Maclisp's @code{caseq} construct.
To be useful, this should be the last clause in the @code{selectq}.
@end table

@lisp
@exdent Example:
(selectq x
  (foo (do-this))
  (bar (do-that))
  ((baz quux mum) (do-the-other-thing))
  (otherwise (ferror nil "Never heard of ~S" x)))
@end lisp
is equivalent to
@lisp
(cond ((eq x 'foo) (do-this))
      ((eq x 'bar) (do-that))
      ((memq x '(baz quux mum)) (do-the-other-thing))
      (t (ferror nil "Never heard of ~S" x)))
@end lisp

Note that the @i{tests} are @i{not} evaluated; if you want them to
be evaluated use @code{select} rather than @code{selectq}.

@code{case} is the Common Lisp name for this construct.
@code{caseq} is the Maclisp name; it identical
to @code{selectq}, which is not totally compatible with Maclisp,
because @code{selectq} accepts @code{otherwise} as well as @code{t}
where @code{caseq} would not accept @code{otherwise}, and because Maclisp
does some error-checking that @code{selectq} does not.  Maclisp programs
that use @code{caseq} work correctly so long as they don't use the
symbol @code{otherwise} as a key.
@end defmac

@defmac ecase key-form clauses...
Like @code{case} except that an uncorrectable error is signaled if
every clause fails.  @code{t} or @code{otherwise} clauses are not allowed.
@end defmac

@defmac ccase place clauses...
Like @code{ecase} except that the error is correctable.  The first argument
is called @i{place} because it must be @code{setf}'able.
If the user proceeds from the error, a new value is read and stored into
@i{place}; then the clauses are tested again using the new value.
Errors repeat until a value is specified which makes some clause succeed.
@end defmac

@noindent
Also see @code{defselect} ((defselect-fun)), a special form for defining a function
whose body is like a @code{selectq}.

@defmac select
@code{select} is like @code{selectq}, except that the elements of the
@i{tests} are evaluated before they are used.

This creates a syntactic ambiguity: if @code{(bar baz)} is seen the
first element of a clause, is it a list of two forms, or is it one
form?  @code{select} interprets it as a list of two forms.  If you
want to have a clause whose test is a single form, and that form
is a list, you have to write it as a list of one form.
@lisp
@exdent Example:
(select (frob x)
   (foo 1)
   ((bar baz) 2)
   (((current-frob)) 4)
   (otherwise 3))
@end lisp
is equivalent to
@lisp
(let ((var (frob x)))
  (cond ((eq var foo) 1)
	((or (eq var bar) (eq var baz)) 2)
	((eq var (current-frob)) 4)
	(t 3)))
@end lisp
@end defmac

@defmac selector
@code{selector} is like @code{select}, except that you get to specify the function
used for the comparison instead of @code{eq}.  For example,
@lisp
(selector (frob x) equal
   (('(one . two)) (frob-one x))
   (('(three . four)) (frob-three x))
   (otherwise (frob-any x)))
@end lisp
is equivalent to
@lisp
(let ((var (frob x)))
  (cond ((equal var '(one . two)) (frob-one x))
	((equal var '(three . four)) (frob-three x))
	(t (frob-any x))))
@end lisp
@end defmac

@defmac select-match
@code{select-match} is like @code{select} but each clause can specify a pattern
to match the key against.  The general form of use looks like
@lisp
(select-match @i{key-form}
  (@i{pattern} @i{condition} @i{body}...)
  (@i{pattern} @i{condition} @i{body}...)
  ...
  (otherwise @i{body}...))
@end lisp
The value of @i{key-form} is matched against the @i{patterns} one at a
time until a match succeeds and the accompanying @i{condition} evaluates
to something non-@code{nil}.  At this point the @i{body} of that clause is
executed and its value(s) returned.  If all the patterns/conditions
fail, the @i{body} of the @code{otherwise} clause (if any) is executed.  A
pattern can test the shape of the key object, and set variables
which the @i{condition} form can refer to.  All the variables set by the
patterns are bound locally to the @code{select-match} form.

The patterns are matched using @code{list-match-p} ((list-match-p-fun)).

@lisp
@exdent Example:
(select-match '(a b c) 
  (`(,x b ,x) t (vector x))
  (`((,x ,y) b . ,ignore) t (list x y))
  (`(,x b ,y) (symbolp x) (cons x y))
  (otherwise 'lose-big))
@end lisp
returns @code{(a . c)}, having checked @code{(symbolp 'a)}.  The first clause
matches only if the there are three elements, the first and third
elements are @code{equal} and the second element is @code{b}.  The second
matches only if the first element is a list of length two and the second
element is @code{b}.  The third clause accepts any list of length three
whose second element is @code{b}.  The fourth clause accepts anything that did
not match the previous clauses.

@code{select-match} generates highly optimized code using special
instructions.
@end defmac

@defmac dispatch
@code{(dispatch @i{byte-specifier} @i{number} @i{clauses...})} is the same
as @code{select} (not @code{selectq}), but the key is obtained by evaluating
@code{(ldb @i{byte-specifier number})}.
@i{byte-specifier} and @i{number} are both evaluated.  Byte specifiers
and @code{ldb} are explained on (ldb-fun).
@lisp
@exdent Example:
(princ (dispatch (byte 2 13) cat-type
	   (0 "Siamese.")
	   (1 "Persian.")
	   (2 "Alley.")
	   (3 (ferror nil
		      "~S is not a known cat type."
		      cat-type))))
@end lisp
@c This example borrowed from DuMouchel.CatData
@cindex kitty

It is not necessary to include all possible values of the byte which
is dispatched on.
@end defmac

@defmac selectq-every
@code{selectq-every} has the same syntax as @code{selectq}, but, like
@code{cond-every}, executes every selected clause instead of just the first
one.  If an @code{otherwise} clause is present, it is selected if and only
if no preceding clause is selected.  The value returned is the value of
the last form in the last selected clause.  Multiple values are not
returned.  Example:
@lisp
(selectq-every animal
  ((cat dog) (setq legs 4))
  ((bird man) (setq legs 2))
  ((cat bird) (put-in-oven animal))
  ((cat dog man) (beware-of animal)))
@end lisp
@end defmac

@subsection Comparison Predicates

@defun eq x y
@code{(eq @i{x y}) => t} if and only if @i{x} and @i{y} are the same object.
It should be noted that things that print the same are not necessarily @code{eq} to each other.
In particular, numbers with the same value
need not be @code{eq}, and two similar lists are usually not @code{eq}.
@cindex "eq versus equal"
@lisp
@exdent Examples:
(eq 'a 'b) => nil
(eq 'a 'a) => t
(eq (cons 'a 'b) (cons 'a 'b)) => nil
(setq x (cons 'a 'b)) (eq x x) => t
@end lisp

Note that in Zetalisp equal fixnums are @code{eq}; this is not true in Maclisp.
Equality does not imply @code{eq}-ness for other types of numbers.  To compare numbers,
use @code{=}; see (=-fun).
@end defun

@defun neq x y
@code{(neq @i{x y})} = @code{(not (eq @i{x y}))}.  This is provided
simply as an abbreviation for typing convenience.
@end defun

@defun eql x y
@code{eql} is the same as @code{eq} except that if @i{x} and @i{y} are numbers
of the same type they are @code{eql} if they are @code{=}.
@end defun

@defun equal x y
The @code{equal} predicate returns @code{t} if its arguments are similar
(isomorphic) objects.
@cindex "eq versus equal"
@cindex "equal versus ="
Two numbers are @code{equal} if they have the same value and type (for
example, a float is never @code{equal} to a fixnum, even if @code{=} is true of them).
For conses, @code{equal} is defined
recursively as the two cars being @code{equal} and the two cdrs
being equal.  Two strings are @code{equal} if they have the same length,
and the characters composing them are the same; see @code{string=},
(string=-fun).  Alphabetic case is significant.  All other objects
are @code{equal} if and only if they are @code{eq}.  Thus @code{equal} could have
been defined by:
@lisp
(defun equal (x y)
  (cond ((eq x y) t)
	((and (numberp x) (numberp y))
	 (= x y))
	((and (stringp x) (stringp y))
	 (string-equal x y))
	((and (consp x) (consp y))
	 (and (equal (car x) (car y))
	      (equal (cdr x) (cdr y))))))
@end lisp

As a consequence of the above definition, it can be seen that
@code{equal} may compute forever when applied to looped list structure. 
In addition, @code{eq} always implies @code{equal}; that is, if @code{(eq a b)}
then @code{(equal a b)}.  An intuitive definition of @code{equal} (which is
not quite correct) is that two objects are @code{equal} if they look the
same when printed out.  For example:
@lisp
(setq a '(1 2 3))
(setq b '(1 2 3))
(eq a b) => nil
(equal a b) => t
(equal "Foo" "foo") => nil
@end lisp
@end defun

@defun equalp x y
@code{equalp} is a broader kind of equality than @code{equal}.  Two objects that
are @code{equal} are always @code{equalp}.  In addition,
numbers of different types are @code{equalp} if they are @code{=}.  Two character
objects are @code{equalp} if they are @code{char-equal} (that is, they are compared
ignoring font, case and meta bits).

Two arrays of any sort are @code{equalp} if they have the same dimensions
and corresponding elements are @code{equalp}.  In particular, this means
that two strings are @code{equalp} if they match ignoring case and font information.
@lisp
(equalp "Foo" "foo") => t
(equalp '1 '1.0) => t
(equalp '(1 "Foo") '(1.0 "foo")) => t
@end lisp

Because @code{equalp} is a Common Lisp function, it regards a string as having
character objects as its elements:
@lisp
(equalp "Foo" #(#/F #/o #/o)) => t
(equalp "Foo" #(#/F #/o #/o)) => nil
@end lisp
@end defun

@defun not x
@defunx null x
	@code{not} returns @code{t} if @i{x} is @code{nil}, else @code{nil}.
@code{null} is the same as @code{not}; both functions are included for the sake
of clarity.  Use @code{null} to check whether something is @code{nil}; use @code{not}
to invert the sense of a logical value.  Some people prefer to distinguish
between @code{nil} as falsehood and @code{nil} as the empty list by writing:
@lisp
(cond ((not (null lst)) ... )
      ( ... ))
1rather than*
(cond (lst ... )
      ( ... ))
@end lisp
	There is no loss of efficiency, since these compile into exactly
the same instructions.
@end defun


@section  "Iteration"
@cindex "iteration"

@defspec do
The @code{do} special form provides a simple generalized iteration facility,
with an arbitrary number of ``index variables'' whose values are saved
when the @code{do} is entered and restored when it is left, i.e. they are
bound by the @code{do}.  The index variables are used in the iteration
performed by @code{do}.  At the beginning, they are initialized to
specified values, and then at the end of each trip around the loop the
values of the index variables are changed according to specified
rules.  @code{do} allows the programmer to specify a predicate which
determines when the iteration will terminate.  The value to be
returned as the result of the form may, optionally, be specified. 

@code{do} comes in two varieties, new-style and old-style.  The old-style
@code{do} is obsolete and exists for Maclisp compatibility only.
The more general, ``new-style'' @code{do} looks like:
@lisp
(do ((@i{var init repeat}) ...)
  (@i{end-test exit-form} ...)
  @i{body}...)
@end lisp

The first item in the form is a list of zero or more index variable
specifiers.  Each index variable specifier is a list of the name of a
variable @i{var}, an initial value form @i{init}, which defaults to @code{nil}
if it is omitted, and a repeat value form @i{repeat}.  If @i{repeat} is
omitted, the @i{var} is not changed between repetitions.  If @i{init} is
omitted, the @i{var} is initialized to @code{nil}.

An index variable specifier can also be just the name of a variable,
rather than a list.  In this case, the variable has an initial value of
@code{nil}, and is not changed between repetitions.

All assignment to the index variables is done in parallel.  At the
beginning of the first iteration, all the @i{init} forms are evaluated,
then the @i{vars} are bound to the values of the @i{init} forms, their
old values being saved in the usual way.  Note that the @i{init} forms
are evaluated @i{before} the @i{vars} are bound, i.e.  lexically
@i{outside} of the @code{do}.  At the beginning of each succeeding
iteration those @i{vars} that have @i{repeat} forms get set to the
values of their respective @i{repeat} forms.  Note that all the
@i{repeat} forms are evaluated before any of the @i{vars} is set.

The second element of the @code{do}-form is a list of an end-testing
predicate form @i{end-test}, and zero or more forms, called the
@i{exit-forms}.  This resembles a @code{cond} clause.  At the beginning of
each iteration, after processing of the variable specifiers, the
@i{end-test} is evaluated.  If the result is @code{nil}, execution proceeds
with the body of the @code{do}.  If the result is not @code{nil}, the
@i{exit-forms} are evaluated from left to right and then @code{do} returns.
The value of the @code{do} is the value of the last @i{exit-form}, or
@code{nil} if there were no @i{exit-forms} (@i{not} the value of the
@i{end-test}, as you might expect by analogy with @code{cond}).

Note that the @i{end-test} gets evaluated before the first time the body
is evaluated.  @code{do} first initializes the variables from the @i{init}
forms, then it checks the @i{end-test}, then it processes the body, then
it deals with the @i{repeat} forms, then it tests the @i{end-test}
again, and so on.  If the @code{end-test} returns a non-@code{nil} value the
first time, then the body is not executed.

If the second element of the form is @code{nil}, there is no @i{end-test}
nor @i{exit-forms}, and the @i{body} of the @code{do} is executed only
once.  In this type of @code{do} it is an error to have @i{repeats}.  This
type of @code{do} is no more powerful than @code{let}; it is obsolete
and provided only for Maclisp compatibility.

If the second element of the form is @code{(nil)}, the @i{end-test} is
never true and there are no @i{exit-forms}.  The @i{body} of the @code{do}
is executed over and over.  The resulting infinite loop can be terminated by use
of @code{return} or @code{throw}.

@code{do} implicitly creates a @code{block} with name @code{nil}, so @code{return}
can be used lexically within a @code{do} to exit it immediately.  This
unbinds the @code{do} variables and the @code{do} form returns whatever values
were specified in the @code{return} form.  See (block-and-return-section)
for more information on these matters.  The @i{body} of the @code{do} is
actually treated as a @code{tagbody}, so that it may contain @code{go} tags
(see (go-to)), but this usage is discouraged as it is often unclear.
@lisp
@exdent Examples of the new form of @code{do}:
(do ((i 0 (1+ i))	1; This is just the same as the above example,*
     (n (array-length foo-array)))
    ((= i n))		1; but written as a new-style @code{do}.*
  (aset 0 foo-array i))	1; Note how the @code{setq} is avoided.*
@end lisp
@lisp

(do ((z list (cdr z)) 1; z starts as @code{list} and is cdr'd each time.*
     (y other-list)   1; y starts as @code{other-list}, and is unchanged by the do.*
     (x)	      1; x starts as @code{nil} and is not changed by the @code{do}.*
     w) 	      1; w starts as @code{nil} and is not changed by the @code{do}.*
    (nil)	      1; The end-test is @code{nil}, so this is an infinite loop.*
  @i{body})    1; Presumably the @i{body} uses @code{return} somewhere.*
@end lisp

The construction
@lisp
(do ((x e (cdr x))
     (oldx x x))
    ((null x))
  @i{body})
@end lisp
exploits parallel assignment to index variables.  On the first
iteration, the value of @code{oldx} is whatever value @code{x} had before
the @code{do} was entered.  On succeeding iterations, @code{oldx} contains
the value that @code{x} had on the previous iteration. 

The @i{body} of a @code{do} may contains no forms at all.  Very often an
iterative algorithm can be most clearly expressed entirely in the
@i{repeats} and @i{exit-forms} of a new-style @code{do}, and the @i{body}
is empty.  For example,
@lisp
(do ((x x (cdr x))
     (y y (cdr y))
     (z nil (cons (f x y) z))) ;1exploits parallel assignment.*
    ((or (null x) (null y))
     (nreverse z))             ;1typical use of @code{nreverse}.*
    )                          ;1no @code{do}-body required.*
1is like @code{(maplist 'f x y)} (see (maplist-fun)).*
@end lisp

The old-style @code{do} exists only for Maclisp
compatibility.  It looks like:
@lisp
(do @i{var} @i{init} @i{repeat} @i{end-test} @i{body}...)
@end lisp
The first time through the loop @i{var} gets the value of the @i{init} form; 
the remaining times through the loop it gets the value of the @i{repeat} form,
which is re-evaluated each time.  Note that the @i{init} form is evaluated
before @i{var} is bound, i.e. lexically @i{outside} of the @code{do}.
Each time around the loop, after @i{var} is set,
@i{end-test} is evaluated.  If it is non-@code{nil}, the @code{do} finishes
and returns @code{nil}.  If the @i{end-test} evaluated to @code{nil}, the @i{body} of
the loop is executed. As with the new-style do, @code{return} and @code{go}
may be used in the body, and they have the same meaning.
@end defspec

@noindent
Also see @code{loop} ((loop-fun)), a general iteration facility based on a keyword
syntax rather than a list-structure syntax.

@defspec do*
In a word, @code{do*} is to @code{do} as @code{let*} is to @code{let}.

@code{do*} works like @code{do} but binds and steps the variables sequentially
instead of in parallel.  This means that the @i{init} form for one
variable can use the values of previous variables.  The @i{repeat} forms
refer to the new values of previous variables instead of their old
values.  Here is an example:
@lisp
(do* ((x xlist (cdr x))
      (y (car x) (car x)))
  (print (list x y)))
@end lisp
On each iteration, @i{y}'s value is the car of @i{x}.  The same
construction with @code{do} might get an error on entry since @i{x}
might not be bound yet.
@end defspec

@defspec do-named
@code{do-named} is like @code{do} but defines a @code{block} with a name
explicitly specified by the programmer in addition to the @code{block}
named @code{nil} which every @code{do} defines.  This makes it possible to
use @code{return-from} to return from this @code{do-named} even from within
an inner @code{do}.  An ordinary @code{return} there would return from the
inner @code{do} instead.  @code{do-named} is obsolete now that @code{block},
which is more general and more coherent, exists.  See
(block-and-return-section) for more information on @code{block} and
@code{return-from}.

The syntax of @code{do-named} is like @code{do} except that the symbol @code{do-named} is
immediately followed by the @code{block} name, which should be a symbol.
@lisp
@exdent Example:
(do-named george ((a 1 (1+ a))
		  (d 'foo))
		 ((> a 4) 7)
  (do ((c b (cdr c)))
      ((null c))
    ...
    (return-from george (cons b d))
    ...))
@exdent is equivalent to
(block george
  (do ((a 1 (1+ a))
       (d 'foo))
      ((> a 4) 7)
    (do ((c b (cdr c)))
	((null c))
      ...
      (return-from george (cons b d))
      ...)))
@end lisp

@code{t} as the name of a @code{do-named} behaves somewhat peculiarly, and
therefore should be avoided.
@end defspec

@defspec do*-named
This special form offers a combination of the features of @code{do*} and
those of @code{do-named}.  It is obsolete, as is @code{do-named},
since it is cleaner to use @code{block}.
@end defspec

@defmac dotimes (index count [value-expression]) body...
@code{dotimes} is a convenient abbreviation for the most common integer
iteration.  @code{dotimes} performs @i{body} the number of times given by
the value of @i{count}, with @i{index} bound to @code{0}, @code{1}, etc. on
successive iterations.  When the @i{count} is exhausted, the value of
@i{value-expression} is returned; or @code{nil}, if @i{value-expression}
is missing.
@lisp
@exdent Example:
(dotimes (i (truncate m n))
  (frob i))
@end lisp
is equivalent to:
@lisp
(do ((i 0 (1+ i))
     (count (truncate m n)))
    (( i count))
  (frob i))
@end lisp
except that the name @code{count} is not used.  Note that @code{i} takes on
values starting at zero rather than one, and that it stops before taking
the value @code{(truncate m n)} rather than after.  You can use @code{return} and
@code{go} and @code{tagbody}-tags inside the body, as with @code{do}.
@code{dotimes} forms return the value of @i{value-expression}, or @code{nil},
unless returned from explicitly with @code{return}.  For example:
@lisp
(dotimes (i 5)
  (if (eq (aref a i) 'foo)
      (return i)))
@end lisp
This form searches the array that is the value of @code{a}, looking for
the symbol @code{foo}.  It returns the fixnum index of the first element
of @code{a} that is @code{foo}, or else @code{nil} if none of the elements
are @code{foo}.
@end defmac

@defmac dolist (item list [value-expression]) body...
@code{dolist} is a convenient abbreviation for the most common list
iteration.  @code{dolist} performs @i{body} once for each element in the
list which is the value of @i{list}, with @i{item} bound to the
successive elements.  If the list is exhausted, the value of
@i{value-expression} is returned; or @code{nil}, if
@i{value-expression} is missing.
@lisp
@exdent Example:
(dolist (item (frobs foo))
  (mung item))
@end lisp
is equivalent to:
@lisp
(do ((lst (frobs foo) (cdr lst))
     (item))
    ((null lst))
  (setq item (car lst))
  (mung item))
@end lisp
except that the name @code{lst} is not used.
You can use @code{return} and @code{go} and @code{tagbody}-tags inside the body, as with @code{do}.
@end defmac

@defmac do-forever body...
Executes the forms in the body over and over, or until a non-local exit
(such as @code{return}).
@end defmac

@section  Static Non-Local Exits
@cindex static non-local exit
@cindex non-local exit

The static non-local exit allows code deep within a construct to jump
to the end of that construct instantly, not executing anything except
@code{unwind-protect}'s on the way.  The construct which defines a static level
that can be exited non-locally is called @code{block} and the construct which
exits it is called @code{return-from}.  The @code{block} being exited must be lexically
visible from the @code{return-from} which says to exit it; this is what `static' means.  By contrast, @code{catch} and @code{throw} provide for dynamic non-local
exits; refer to the following section.
Here is an example of using a static non-local exit:

@lisp
(block top
  (let ((v1 (do-1)))
    (when (all-done v1) (return-from top v1))
    (do-2))
  (do-3)
  ...
  (do-last))
@end lisp

@noindent
If @code{(all-done v1)} returns non-@code{nil}, the entire @code{block}
immediately returns the value of @code{v1}.  Otherwise, the rest of the
body of the block is executed sequentially, and ultimately the value or
values of @code{(do-last)} are returned.

Note that the @code{return-from} form is very unusual: it does not ever
return a value itself, in the conventional sense.  It isn't useful to
write @code{(setq a (return-from foo 3))}, because when the
@code{return-from} form is evaluated, the containing @code{block} is
immediately exited, and the @code{setq} never happens.

The fact that @code{block}'s and @code{return-from}'s are matched up lexically
means you cannot do this:

@lisp
(defun foo (a)
  (block foo1
    (bar a)))

(defun bar (x)
  (return-from foo1 x))
@end lisp

@noindent
The @code{(return-from foo1 x)} gets an error because there is no lexically
visible @code{block} named @code{foo1}.  The suitable @code{block} in the caller, @code{foo},
is not even noticed.

Static handling allows the compiler to produce good code for @code{return-from}.
It is also useful with functional arguments:

@lisp
(defun first-symbol (list)
  (block done
    (mapc #'(lambda (elt)
	      (if (symbolp elt) (return-from done elt)))
	  list)))
@end lisp

@noindent
The @code{return-from done} sees the @code{block done} lexically.
Even if @code{mapc} had a @code{block} in it named @code{done} it would
have no effect on the execution of @code{first-symbol}.

When a function is defined with @code{defun} with a name which is a symbol,
a @code{block} whose name is the function name is automatically placed around
the body of the function definition.  For example,
@lisp
(defun foo (a)
  (if (evenp a) 
      (return-from foo (list a)))
  (1+ a))

(foo 4) => (4)
(foo 5) => 6
@end lisp

A function written explicitly with @code{lambda} does not have a @code{block}
unless you write one yourself.

A named @code{prog}, or a @code{do-named}, implicitly defines a @code{block} with
the specified name.  So you can exit those constructs with @code{return-from}.
In fact, the ability to name @code{prog}'s was the original way to define
a place for @code{return-from} to exit, before @code{block} was invented.

Every @code{prog}, @code{do} or @code{loop}, whether named or not, implicitly
defines a @code{block} named @code{nil}.  Thus, named @code{prog}'s define @i{two}
@code{block}'s, one named @code{nil} and one named whatever name you specify.
As a result, you can use @code{return} (an abbreviation for @code{return-from nil})
to return from the innermost lexically containing @code{prog}, @code{do} or
@code{loop} (or from a @code{block nil} if you happen to write one).
This function is like @code{assq}, but it returns an additional value
which is the index in the table of the entry it found.  For example,
@lisp
(defun assqn (x table)
  (do ((l table (cdr l))
       (n 0 (1+ n)))
      ((null l) nil)
    (if (eq (caar l) x)
	(return (values (car l) n)))))
@end lisp

There is one exception to this: a @code{prog}, @code{do} or @code{loop} with
name @code{t} defines only the block named @code{t}, no block named @code{nil}.
The compiler used to make use of this feature in expanding certain built-in
constructs into others.

@defspec block name body...
Executes @i{body}, returning the values of the last form in @i{body},
but permitting non-local exit using @code{return-from} forms present
lexically within @i{body}.  @i{name} is not evaluated, and is used
to match up @code{return-from} forms with their @code{block}'ss.
@lisp
(block foo
  (return-from foo 24) t) => 24
(block foo t) => t
@end lisp
@end defspec

@defspec return-from name values
Performs a non-local exit from the innermost lexically containing
@code{block} whose name is @i{name}.  @i{name} is not evaluated.
When the compiler is used, @code{return-from}'s are matched up with
@code{block}'s at compile time.

@i{values} is evaluated and its values
become the values of the exited @code{block} form.

A @code{return-from} form may appear as or inside an argument to a regular
function, but if the @code{return-from} is executed then the function will never
actually be called.  For example,
@lisp
(block done
  (foo (if a (return-from done t) nil)))
@end lisp
@code{foo} is actually called only if @code{a}'s value is @code{nil}.
This style of coding is not recommended when @code{foo} is actually a function.

@code{return-from} can also be used with zero value forms, or with several
value forms.  Then @i{one} value is returned from each value form.
Originally @code{return-from} always returned only one value from each
value form, even when there was only one value form.  Passing
back all the values when there is a single @i{values} form is a later
change, which is also the Common Lisp standard.  In fact, the single
value form case is much more powerful and subsumes all the others.
For example,
@lisp
(return-from foo 1 2)
@exdent is equivalent to
(return-from foo (values 1 2))
@exdent and
(return-from foo)
@exdent is equivalent to
(return-from foo (values))
@end lisp
It is unfortunate that the case of one value form is treated differently
from all other cases, but the power of being able to propagate any
number of values from a single form is worth it.

To return precisely one value, use @code{(return-from foo (values @i{form}))}.
It is legal to write simply @code{(return-from foo)}, which returns no
values from the @code{block}.
See (multiple-value) for more information.
@end defspec

@defspec return values
Is equivalent to @code{(return-from nil @i{values})}.
It returns from a @code{block} whose name is @code{nil}.

In addition, @code{break} (see (break-fun)) recognizes the typed-in form
@code{(return @i{value})} specially.  @code{break} evaluates @i{value}
and returns it. 
@end defspec

@defspec return-list list
This function is like @code{return} except that each element of @i{list}
is returned as a separate value from the @code{block} that is exited.

@code{return-list} is obsolete, since @code{(return (values-list @i{list}))}
does the same thing.
@end defspec

@section  Tags and Gotos
@cindex prog tag
@cindex tag
@cindex go to

Jumping to a label or @i{tag} is another kind of static non-local exit.  Compared with
@code{return-from}, it allows more flexibility in choosing where to send
control to, but does not allow values to be sent along.  This is because
the tag does not have any way of saying what to @i{do} with any
values.

@cindex statement
To define a tag, the @code{tagbody} special form is used.
In the body of a @code{tagbody}, all lists are treated as forms to be
evaluated (called @i{statements} when they occur in this context).
If no goto happens, all the forms are evaluated in sequence
and then the @code{tagbody} form returns @code{nil}.  Thus, the statements
are evaluated only for effect.

An element of the @code{tagbody}'s body which is a symbol is not a statement
but a tag instead.  It identifies a place in the sequence of statements
which you can go to.  Going to a tag is accomplished by the form
@code{(go @i{tag})}, executed at any point lexically within the @code{tagbody}.

@code{go} transfers control immediately to the first statement following
@i{tag} in its @code{tagbody}, pausing only to deal with any
@code{unwind-protect}s that are being exited as a result.  If there are
no more statements after @i{tag} in its @code{tagbody}, then that @code{tagbody}
returns @code{nil} immediately.

All lexically containing @code{tagbody}'s are eligible to contain the
specified tag, with the innermost @code{tagbody} taking priority.  If no
suitable tag is found, an error is signaled.  The compiler matches
@code{go}'s with tags at compile time and issues a compiler warning if no
tag is found.  Example:
@lisp
(block nil
  (tagbody
    (setq x @i{some frob})
  loop
    @i{do something}
    (if @i{some predicate} (go endtag))
    @i{do something more}
    (if (minusp x) (go loop))
  endtag
    (return z)))
@end lisp
is a kind of iteration made out of go-to's.  This
@code{tagbody} can never exit normally because the @code{return} in the last
statement takes control away from it.  This use of a @code{return} and @code{block}
is how one encapsulates a @code{tagbody} to produce a non-@code{nil} value.

It works to @code{go} from an internal @code{lambda} function to a tag
in a lexically containing function, as in

@lisp
(defun foo (a)
  (tagbody
   t1
    (bar #'(lambda () (go t1)))))
@end lisp

@noindent
If @code{bar} ever invokes its argument, control goes to @code{t1} and
@code{bar} is invoked anew.  Not very useful, but it illustrates the technique.

@defspec tagbody statements-and-tags...
Executes all the elements of @i{statements-and-tags} which are lists (the statements),
and then returns @code{nil}.  But meanwhile, all elements of @i{statements-and-tags}
which are symbols (the tags) are available for use with @code{go} in any of the
statements.  Atoms other than symbols are meaningless in a @code{tagbody}.

The reason that @code{tagbody} returns @code{nil} rather than the value of the last
statement is that the designers of Common Lisp decided that one could not
reliably return a value from the @code{tagbody} by writing it as the last statement
since some of the time the expression for the desired value would be a symbol
rather than a list, and then it would be taken as a tag rather than the last statement
and it would not work.
@end defspec

@defspec go tag
The @code{go} special form is used to ``go-to'' a tag defined
in a lexically containing @code{tagbody} form (or other form which
implicitly expands into a @code{tagbody}, such as @code{prog}, @code{do} or @code{loop}).
@i{tag} must be a symbol.  It is not evaluated.
@end defspec

@defspec prog
@code{prog} is an archaic special form which provides temporary variables,
static non-local exits, and tags for @code{go}.  These aspects of @code{prog}
were individually abstracted out to inspire @code{let}, @code{block} and
@code{tagbody}.  Now @code{prog} is obsolete, as it is much cleaner to use
@code{let}, @code{block}, @code{tagbody} or all three of them, or @code{do} or
@code{loop}.  But @code{prog} appears in so many programs that it cannot be
eliminated.

A typical @code{prog} looks like @code{(prog (@i{variables}...) @i{body}...)},
which is equivalent to
@lisp
(block nil
  (let (@i{variables}...)
    (tagbody @i{body}...)))
@end lisp

If the first subform of a @code{prog} is a non-@code{nil} symbol (rather than
a list of variables), it is the name of the @code{prog}, and @code{return-from}
(see (return-from-fun)) can be used to return from it.  A @i{named prog}
looks like
@lisp
(prog @i{name} (@i{variables}...) @i{body}...)
@exdent and is equivalent to
(block @i{name}
  (block nil
    (let (@i{variables}...)
      (tagbody @i{body}...))))
@end lisp
@end defspec

@defspec prog*
The @code{prog*} special form is almost the same as @code{prog}.  The only
difference is that the binding and initialization of the temporary
variables is done @i{sequentially}, so each one can depend on the
previous ones.  Thus, the equivalent code would use @code{let*} rather
than @code{let}.
@end defspec

@section  Dynamic Non-Local Exits
@cindex dynamic non-local exit
@cindex "non-local exit"
@cindex catch
@cindex throw
@cindex tag

@defspec catch tag body...
@code{catch} is a special form used with the @code{throw} function to do
non-local exits.  First @i{tag} is evaluated; the result is called the @i{tag}
of the @code{catch}.  Then the @i{body} forms are evaluated sequentially,
and the values of the last form are returned.  However, if,
during the evaluation of the body, the
function @code{throw} is called with the same tag as the tag of the
@code{catch}, then the evaluation of the body is aborted, and the
@code{catch} form immediately returns the values of the second
argument to @code{throw} without further evaluating the current @i{body} form or
the rest of the body.

The @i{tag}'s are used to match up @code{throw}'s with @code{catch}'s. 
@code{(catch 'foo @i{form})} catches a @code{(throw 'foo @i{form})} but
not a @code{(throw 'bar @i{form})}.  It is an error if @code{throw} is done
when there is no suitable @code{catch} (or @code{catch-all}; see below).

Any Lisp object may be used as a @code{catch} tag.
The values @code{t} and @code{nil} for @i{tag} are special: a @code{catch} whose
tag is one of these values catches throws regardless of tag.  These are only
for internal use by @code{unwind-protect} and @code{catch-all} respectively.
The only difference between @code{t} and @code{nil} is in the error checking;
@code{t} implies that after a ``cleanup handler'' is executed control will be
thrown again to the same tag, therefore it is an error if a specific
catch for this tag does not exist higher up in the stack.  With @code{nil},
the error check isn't done.  Example:
@lisp
(catch 'negative
   (values
     (mapcar #'(lambda (x) 
		 (cond ((minusp x)
			(throw 'negative 
			  (values x :negative)))
		       (t (f x)) )))
	     y)
     :positive))
@end lisp
returns a list of @code{f} of each element of @code{y}, and @code{:positive}, if they are all
positive, otherwise the first negative member of @code{y}, and @code{:negative}.
@end defspec

@defspec catch-continuation tag throw-cont non-throw-cont body...
@defspecx catch-continuation-if cond-form tag throw-cont non-throw-cont body...
The @code{catch-continuation} special form makes it convenient to
discriminate whether exit is normal or due to a throw.

The @i{body} is executed inside a @code{catch} on @i{tag} (which is
evaluated).  If @i{body} returns normally, the function
@i{non-throw-cont} is called, passing all the values returned by the
last form in @i{body} as arguments.  This function's values are returned
from the @code{catch-continuation}.

If on the other hand a throw to @i{tag} occurs, the values thrown
are passed to the function @i{throw-cont}, and its values are
returned.

If a continuation is explicitly written as @code{nil}, it is
not called at all.  The arguments that would have been passed to it are
returned instead.  This is equivalent to using @code{values} as the
function; but explicit @code{nil} is optimized, so use that.

@code{catch-continuation-if} differs only in that the catch is not done if
the value of the @i{cond-form} is @code{nil}.  In this case, the non-throw
continuation if any is always called.

In the general case, consing is necessary to record the multiple values,
but if a continuation is an explicit @code{#'(lambda ...)} with a
fixed number of arguments, or if a continuation is @code{nil}, it is open
coded and the consing is avoided.
@end defspec

@defspec throw tag values-form
@code{throw} is the primitive for exiting from a surrounding @code{catch}.
@i{tag} is evaluated, and the result is matched (with @code{eq}) against
the tags of all active @code{catch}'es; the innermost matching one is exited.
If no matching @code{catch} is dynamically active, an error is signaled.

All the values of @i{values-form} are returned from the exited @code{catch}.

@code{catch}'es with tag @code{nil} always match any @code{throw}.  They are
really @code{catch-all}'s.  So do @code{catch}'es with tag @code{t}, which are
@code{unwind-protect}'s, but if the only matching @code{catch}'es are these
then an error is signaled anyway.  This is because an @code{unwind-protect}
always throws again after its cleanup forms are finished; if there
is nothing to catch after the last @code{unwind-protect}, an error will
happen then, and it is better to detect the error sooner.

The values @code{t}, @code{nil}, and @code{0} for @i{tag} are reserved and used
for internal purposes.  @code{nil} may not be used, because it would cause
confusion in handling of @code{unwind-protect}'s.  @code{t} may only be
used with @code{*unwind-stack}.  @code{0} and @code{nil} are used internally when
returning out of an @code{unwind-protect}.
@end defspec

@defmac *catch form tag
@defmacx *throw form tag
Old, obsolete names for @code{catch} and @code{throw}.
@end defmac

.defcondition sys:throw-tag-not-seen (@code{error})
This is signaled when @code{throw} (or @code{*unwind-stack}) is used and
there is no @code{catch} for the specified tag.  The condition instance
supports these extra operations:
@table @code
@item :tag
The tag being thrown to.
@item :value
The value being thrown (the second argument to @code{throw}).
@item :count
@itemx :action
The additional two arguments given to @code{*unwind-stack}, if that was used.
@end table

The error occurs in the environment of the @code{throw}; no unwinding has yet taken place.

The proceed type @code{:new-tag} expects one argument, a tag to throw to instead.
.end_defcondition

@cindex unwinding a stack
@defun *unwind-stack tag value active-frame-count action
This is a generalization of @code{throw} provided for program-manipulating
programs such as the debugger.

@i{tag} and @i{value} are the same as the corresponding arguments to
@code{throw}.

A @i{tag} of @code{t} invokes a special feature whereby the entire stack is
unwound, and then the function @i{action} is called (see below).  During
this process @code{unwind-protect}'s receive control, but @code{catch-all}'s do
not.  This feature is provided for the benefit of system programs which
want to unwind a stack completely.

@i{active-frame-count}, if non-@code{nil}, is the number of frames
to be unwound.  The definition of a frame is implementation-dependent.
If this counts down to zero before a suitable @code{catch}
is found, the @code{*unwind-stack} terminates and
@i{that frame} returns @i{value} to whoever called it.
This is similar to Maclisp's @code{freturn} function.
@findex "freturn"

If @i{action} is non-@code{nil}, whenever the @code{*unwind-stack} would be
ready to terminate (either due to @i{active-frame-count} or due to
@i{tag} being caught as in @code{throw}), instead @i{action} is called
with one argument, @i{value}.  If @i{tag} is @code{t}, meaning throw out
the whole way, then the function @i{action} is not allowed to return.
Otherwise the function @i{action} may return and its value will be
returned instead of @i{value} from the @code{catch}--or from an arbitrary
function if @i{active-frame-count} is in use.  In this case the
@code{catch} does not return multiple values as it normally does when
thrown to.  Note that it is often useful for @i{action} to be a
stack-group.

Note that if both @i{active-frame-count} and @i{action} are @code{nil},
@code{*unwind-stack} is identical to @code{throw}.
@end defun

@cindex unwind protection
@cindex cleanup handler
@defspec unwind-protect protected-form cleanup-form...
Sometimes it is necessary to evaluate a form and make sure that
certain side-effects take place after the form is evaluated;
a typical example is:
@lisp
(progn
   (turn-on-water-faucet)
   (hairy-function 3 nil 'foo)
   (turn-off-water-faucet))
@end lisp

The non-local exit facilities of Lisp create situations in which the
above code won't work, however: if @code{hairy-function} should use
@code{throw}, @code{return} or @code{go} to transfer control outside of the
@code{progn} form, then @code{(turn-off-water-faucet)} will never be evaluated
(and the faucet will presumably be left running).  This is particularly
likely if @code{hairy-function} gets an error and the user tells the
debugger to give up and flush the computation.

In order to allow the above program to work, it can
be rewritten using @code{unwind-protect} as follows:
@lisp
(unwind-protect
    (progn (turn-on-water-faucet)
	   (hairy-function 3 nil 'foo))
  (turn-off-water-faucet))
@end lisp
If @code{hairy-function} transfers control out of the
evaluation of the @code{unwind-protect}, the
@code{(turn-off-water-faucet)} form is evaluated during the
transfer of control, before control arrives at the
@code{catch}, @code{block} or @code{go} tag to which it is being transferred.

If the @code{progn} returns normally, then the @code{(turn-off-water-faucet)}
is evaluated, and the @code{unwind-protect} returns the result of the @code{progn}.


The general form of @code{unwind-protect} looks like
@lisp
(unwind-protect
    @i{protected-form}
  @i{cleanup-form1}
  @i{cleanup-form2}
  ...)
@end lisp
@i{protected-form} is evaluated, and when it returns or when it attempts
to transfer control out of the @code{unwind-protect}, the @i{cleanup-forms}
are evaluated.  The value of the @code{unwind-protect} is the value of
@i{protected-form}.  Multiple values returned by the @i{protected-form}
are propagated back through the @code{unwind-protect}.

The cleanup forms are run in the variable-binding environment that you
would expect: that is, variables bound outside the scope of the
@code{unwind-protect} special form can be accessed, but variables bound
inside the @i{protected-form} can't be.  In other words, the stack is
unwound to the point just outside the @i{protected-form}, then the
cleanup handler is run, and then the stack is unwound some more.
@end defspec

@defmac catch-all body...
@code{(catch-all @i{form})} is like @code{(catch @i{some-tag form})}
except that it catches a
@code{throw} to any tag at all.  Since the tag thrown to
is one of the returned values, the caller of @code{catch-all} may continue 
throwing to that tag if he wants.  The one thing that @code{catch-all}
does not catch is a @code{*unwind-stack} with a tag of @code{t}.
@code{catch-all} is a macro which expands into @code{catch} with a @i{tag} of @code{nil}.

@code{catch-all} returns all the values thrown to it, or returned by the
body, plus three additional values: the tag thrown to, the
active-frame-count, and the action.  The tag value is @code{nil} if the
body returned normally.  The last two values are the third and fourth
arguments to @code{*unwind-stack} (see (*unwind-stack-fun)) if that was
used, or @code{nil} if an ordinary @code{throw} was done or if the body
returned normally.

If you think you want this, most likely you are mistaken and you really
want @code{unwind-protect}.
@end defmac

@section  "Mapping"
@cindex "mapping"

@defun map fcn &rest lists
@defunx mapl fcn &rest lists
@defunx mapc fcn &rest lists
@defunx maplist fcn &rest lists
@defunx mapcar fcn &rest lists
@defunx mapcon fcn &rest lists
@defunx mapcan fcn &rest lists

Mapping is a type of iteration in which a function is successively
applied to pieces of a list.  There are several options for the way in
which the pieces of the list are chosen and for what is done with the
results returned by the applications of the function.

For example, @code{mapcar} operates on successive @i{elements} of the list. 
As it goes down the list, it calls the function giving it an element
of the list as its one argument:  first the car, then the
cadr, then the caddr, etc., continuing until the end of the
list is reached.  The value returned by @code{mapcar} is a list of the
results of the successive calls to the function.  An example of the
use of @code{mapcar} would be @code{mapcar}'ing the function @code{abs} over
the list @code{(1 -2 -4.5 6.0e15 -4.2)}, which would be written as
@code{(mapcar (function abs) '(1 -2 -4.5 6.0e15 -4.2))}.
The result is @code{(1 2 4.5 6.0e15
4.2)}.  

In general, the mapping functions take any number of arguments.  For example,
@lisp
(mapcar @i{f} @i{x1} @i{x2} ... @i{xn})
@end lisp
In this case @i{f} must be a function of @i{n} arguments.
@code{mapcar} proceeds
down the lists @i{x1, x2, ..., xn} in parallel.
The first argument to @i{f}
comes from @i{x1}, the second from @i{x2}, etc.
The iteration stops as soon as any of the lists is exhausted.
(If there are no lists at all, then there are no lists to be exhausted,
so @i{f} is called repeatedly without end.  This is an
obscure way to write an infinite loop.  It is supported for
consistency.)  If you want to call a function of many arguments
where one of the arguments successively takes on the values of the elements
of a list and the other arguments are constant, you can use a circular
list for the other arguments to @code{mapcar}.  The function @code{circular-list}
is useful for creating such lists; see (circular-list-fun).

There are five other mapping functions besides @code{mapcar}.  @code{maplist}
is like @code{mapcar} except that the function is applied to the list and
successive cdrs of that list rather than to successive elements of the
list.  @code{map} (or @code{mapl}) and @code{mapc} are like @code{maplist} and @code{mapcar}
respectively, except that they don't return any useful value.  These
functions are used when the function is being called merely for its
side-effects, rather than its returned values.  @code{mapcan} and
@code{mapcon} are like @code{mapcar} and @code{maplist} respectively, except
that they combine the results of the function using @code{nconc} instead
of @code{list}.  That is, @code{mapcon} could have been defined by
@lisp
(defun mapcon (f x y)
    (apply 'nconc (maplist f x y)))
@end lisp
Of course, this definition is less general than the real one.

Sometimes a @code{do} or a straightforward recursion is preferable to a
map;  however, the mapping functions should be used wherever they
naturally apply because this increases the clarity of the code. 

Often @i{f} is a lambda-expression, rather than a symbol;
for example,
@lisp
(mapcar (function (lambda (x) (cons x something)))
	some-list)
@end lisp

The functional argument to a mapping function must be a function, acceptable
to @code{apply}--it cannot be a macro or the name of a special form.

.group
Here is a table showing the relations between
the six map functions.
.nofill
7
                              applies function to

                         |  successive  |   successive  |
                         |   sublists   |    elements   |
          ---------------+--------------+---------------+
              its own    |              |               | 
              second     |     map(l)   |     mapc      |
             argument    |              |               |
          ---------------+--------------+---------------+
            list of the  |              |               |
returns      function    |    maplist   |    mapcar     |
              results    |              |               |
          ---------------+--------------+---------------+
            nconc of the |              |               |
              function   |    mapcon    |    mapcan     |
              results    |              |               |
          ---------------+--------------+---------------+*
.fill

Note that @code{map} and @code{mapl} are synonymous.  @code{map} is the
traditional name of this function.  @code{mapl} is the Common Lisp name.
In Common Lisp, the function @code{map} does something different and
incompatible; see @code{cli:map}, (cli:map-fun).  @code{mapl} works the same
in traditional Zetalisp and Common Lisp.

	There are also functions (@code{mapatoms} and @code{mapatoms-all})
for mapping over all symbols in certain
packages.  See the explanation of packages ((package)).

You can also do what the mapping functions do in a different way by using
@code{loop}.  See (loop-fun).
@end defun

@chapter Manipulating List Structure
@cindex cons
@cindex car
@cindex cdr
@cindex "list"
@cindex "tree"
@cindex "circular list"
@cindex "elements (of a list)"
@cindex "dotted list"

This chapter discusses functions that manipulate conses, and
higher-level structures made up of conses such as lists and trees.
It also discusses hash tables and resources, which are related
facilities.

A @i{cons} is a primitive Lisp data object that is extremely simple: it
knows about two other objects, called its @i{car} and its @i{cdr}.

A list is recursively defined to be the symbol @code{nil}, or a cons whose
cdr is a list.  A typical list is a chain of conses: the cdr of each is
the next cons in the chain, and the cdr of the last one is the symbol
@code{nil}.  The cars of each of these conses are called the @i{elements}
of the list.  A list has one element for each cons; the empty list,
@code{nil}, has no elements at all.  Here are the printed representations
of some typical lists:
@lisp
(foo bar)		  ;This list has two elements.
(a (b c d) e)		  ;This list has three elements.
@end lisp
Note that the second list has three elements: @code{a}, @code{(b c d)}, and @code{e}.
The symbols @code{b}, @code{c}, and @code{d} are @i{not} elements of the list itself.
(They are elements of the list which is the second element of the original
list.)

A @i{dotted list} is like a list except that the cdr of the last cons does
not have to be @code{nil}.  This name comes from the printed
representation, which includes a ``dot'' character (period).  Here is an example:
@lisp
(a b . c)
@end lisp
This dotted list is made of two conses.  The car of the first cons is the
symbol @code{a}, and the cdr of the first cons is the second cons.  The car of
the second cons is the symbol @code{b}, and the cdr of the second cons is
the symbol @code{c}.

A tree is any data structure made up of conses whose cars and cdrs are
other conses.  The following are all printed representations of trees:
@lisp
(foo . bar)
((a . b) (c . d))
((a . b) (c d e f (g . 5) s) (7 . 4))
@end lisp

These definitions are not mutually exclusive.  Consider a cons whose
car is @code{a} and whose cdr is @code{(b (c d) e)}.  Its printed
representation is
@lisp
(a b (c d) e)
@end lisp
It can be thought of and treated as a cons, or as a list of four
elements, or as a tree containing six conses.  You can even think of it
as a dotted list whose last cons just happens to have @code{nil} as a
cdr.  Thus, lists and dotted lists and trees are not fundamental data
types; they are just ways of thinking about structures of conses.

A circular list is like a list except that the cdr of the last cons,
instead of being @code{nil}, is the first cons of the list.  This means that
the conses are all hooked together in a ring, with the cdr of each cons
being the next cons in the ring.  These are legitimate Lisp objects,
but dealing with them requires special techniques; straightforward
tree-walking recursive functions often loop infinitely when given a
circular list.  The printer is is an example of both aspects of the
handling of circular lists: if @code{*print-circle*} is non-@code{nil} the
printer uses special techniques to detect circular structure and print
it with a special encoding, but if @code{*print-circle*} is @code{nil} the
printer does not check for circularity and loops infinitely unless
@code{*print-level*} or @code{*print-length*} imposes a ``time limit''.
See (*print-circle*-var) for more information on @code{*print-circle*}
and related matters.

The Lisp Machine internally uses a storage scheme called @i{cdr-coding} to
represent conses.  This scheme is intended to reduce the amount of storage
used in lists.  The use of cdr-coding is invisible to programs except in
terms of storage efficiency; programs work the same way whether or not
lists are cdr-coded or not.  Several of the functions below mention how
they deal with cdr-coding.  You can completely ignore all this if you want.
However, if you are writing a program that allocates a lot of conses and
you are concerned with storage efficiency, you may want to learn about the
cdr-coded representation and how to control it.  The cdr-coding scheme is
discussed in (cdr-code).

@section  Conses

@defun car x
Returns the car of @i{x}.
@lisp
@exdent Example:
(car '(a b c)) => a
@end lisp
@end defun

@defun cdr x
Returns the cdr of @i{x}.
@lisp
@exdent Example:
(cdr '(a b c)) => (b c)
@end lisp
@end defun

	Officially @code{car} and @code{cdr} are only applicable to conses and locatives.
However, as a matter of convenience, @code{car} and @code{cdr} of @code{nil} return @code{nil}.
@code{car} or @code{cdr} of anything else is an error.

@defun c...r x
@findex caaaar
@findex caaadr
@findex caaar
@findex caadar
@findex caaddr
@findex caadr
@findex caar
@findex cadaar
@findex cadadr
@findex cadar
@findex caddar
@findex cadddr
@findex caddr
@findex cadr
@findex cdaaar
@findex cdaadr
@findex cdaar
@findex cdadar
@findex cdaddr
@findex cdadr
@findex cdar
@findex cddaar
@findex cddadr
@findex cddar
@findex cdddar
@findex cddddr
@findex cdddr
@findex cddr
All of the compositions of up to four @code{car}'s and @code{cdr}'s are
defined as functions in their own right.  The names of these functions
begin with @code{c} and end with @code{r}, and in between is a sequence of
@code{a}'s and @code{d}'s corresponding to the composition performed by the
function.
@lisp
@exdent Example:
(cddadr x) 1is the same as* (cdr (cdr (car (cdr x))))
@end lisp
The error checking for these functions is exactly the same as for @code{car} and @code{cdr}
above.
@end defun

@defun cons x y
@code{cons} is the primitive function to create a new cons, whose
car is @i{x} and whose cdr is @i{y}.
@lisp
@exdent Examples:
(cons 'a 'b) => (a . b)
(cons 'a (cons 'b (cons 'c nil))) => (a b c)
(cons 'a '(b c d)) => (a b c d)
@end lisp
@end defun

@defun ncons x
@code{(ncons @i{x})} is the same as @code{(cons @i{x} nil)}.
The name of the function is from ``nil-cons''.
@end defun

@defun xcons x y
@code{xcons} (``exchanged cons'') is like @code{cons} except that the order of
the arguments is reversed.
@lisp
@exdent Example:
(xcons 'a 'b) => (b . a)
@end lisp
@end defun

@defun cons-in-area x y area-number
@cindex "area"
Creates a cons in a specific @i{area}.  (Areas are
an advanced feature of storage management, explained in chapter
(area-chapter); if you aren't interested in them, you can safely skip
all this stuff).  The first two arguments are the same as the two
arguments to @code{cons},  and the third is the number of the area in which
to create the cons.
@lisp
@exdent Example:
(cons-in-area 'a 'b my-area) => (a . b)
@end lisp
@end defun

@defun ncons-in-area x area-number
@code{(ncons-in-area @i{x area-number})} = @code{(cons-in-area @i{x} nil @i{area-number})}
@end defun

@defun xcons-in-area x y area-number
@code{(xcons-in-area @i{x y area-number}) = (cons-in-area @i{y x area-number})}
@end defun

@defmac push item place
Adds an element @i{item} to the front of a list that is stored in
@i{place}.  A new cons is allocated whose car is @i{item} and
whose cdr is the old contents of @i{place}.  This cons is stored
into @i{place}.

The form
@lisp
(push (hairy-function x y z) variable)
@end lisp
replaces the commonly-used construct
@lisp
(setq variable (cons (hairy-function x y z) variable))
@end lisp
and is intended to be more explicit and esthetic.

@i{place} can be any form that @code{setf} can store into.
For example,
@lisp
(push x (get y z))
 ==> (putprop y (cons x (get y z)) z)
@end lisp

The returned value of @code{push} is not defined.
@end defmac

@defmac pop place
Removes an element from the front of the list that is stored in
@i{place}.  It finds the cons in @i{place}, stores the cdr of the cons
back into @i{place}, and returns the car of that cons.  @i{place}
can be any form that @code{setf} can store into.
@lisp
@exdent Example:
(setq x '(a b c))
(pop x) => a
x => (b c)
@end lisp
@end defmac

	The backquote reader macro facility is also generally useful
for creating list structure, especially mostly-constant list structure,
or forms constructed by plugging variables into a template.
It is documented in the chapter on macros; see (macro).

@defun car-location cons
@code{car-location} returns a locative pointer to the cell containing
the car of @i{cons}.
@end defun

Note: there is no @code{cdr-location} function; it is difficult because of
the cdr-coding scheme (see (cdr-code)).  Instead, the cons itself
serves as a kind of locative to its cdr (see (contents-fun)).

The functions @code{rplaca} and @code{rplacd} are used to make alterations
in already-existing list structure; that is, to change the cars and
cdrs of existing conses.  The structure is altered rather than copied.
Exercise caution when using these functions, as strange side-effects
can occur if they are used to modify portions of list structure which
have become shared unbeknownst to the programmer.  The @code{nconc},
@code{nreverse}, @code{nreconc}, @code{nbutlast} and @code{delq} functions and
others, described below, have the same property, because they call
@code{rplaca} or @code{rplacd}.

@defun rplaca x y
Changes the car of @i{x} to @i{y} and returns
(the modified) @i{x}.  @i{x} must be a cons or a locative.  @i{y} may be any Lisp object.
@lisp
@exdent Example:
(setq g '(a b c))
(rplaca (cdr g) 'd) => (d c)
1Now* g => (a d c)
@end lisp
@end defun

@defun rplacd x y
Changes the cdr of @i{x} to @i{y} and returns
(the modified) @i{x}.  @i{x} must be a cons or a locative.  @i{y} may be any Lisp object.
@lisp
@exdent Example:
(setq x '(a b c))
(rplacd x 'd) => (a . d)
1Now* x => (a . d)
@end lisp
@end defun

@code{(setf (car @i{x}) @i{y})}
and @code{(setf (car @i{x}) @i{y})} are much like @code{rplaca} and @code{rplacd},
but they return @i{y} rather than @i{x}.

@section  Lists

@defun list &rest args
Constructs and returns a list of its arguments.
@lisp
@exdent Example:
(list 3 4 'a (car '(b . c)) (+ 6 -2)) => (3 4 a b 4)
@end lisp

@lisp
@exdent @code{list} could have been defined by:
(defun list (&rest args)
    (let ((list (make-list (length args))))
      (do ((l list (cdr l))
	   (a args (cdr a)))
	  ((null a) list)
	(rplaca l (car a)))))
@end lisp
@end defun

@defun list* &rest args
@code{list*} is like @code{list} except that the last cons
of the constructed list is dotted.  It must be given at least
one argument.
@lisp
@exdent Example:
(list* 'a 'b 'c 'd) => (a b c . d)
@end lisp
This is like
@lisp
(cons 'a (cons 'b (cons 'c 'd)))
@end lisp

@lisp
@exdent More examples:
(list* 'a 'b) => (a . b)
(list* 'a) => a
@end lisp
@end defun

@defun length list-or-array
Returns the length of @i{list-or-array}.  The length of a
list is the number of elements in it; the number of times you can cdr it
before you get a non-cons.
@lisp
@exdent Examples:
(length nil) => 0
(length '(a b c d)) => 4
(length '(a (b c) d)) => 3
(length "foobar") => 6
@end lisp
@code{length} could have been defined by:
@lisp
(defun length (x)
  (if (arrayp x) (array-active-length x)
    (do ((n 0 (1+ n))
         (y x (cdr y)))
        ((null y) n))))
@end lisp
@end defun

@defun list-length list
Returns the length of @i{list}, or @code{nil} if @i{list} is circular.
(The function @code{length} would loop forever if given a circular list.)
@end defun

@defun first list
@defunx second list
@defunx third list
@defunx fourth list
@defunx fifth list
@defunx sixth list
@defunx seventh list
These functions take a list as an argument, and return the first,
second, etc. element of the list.  @code{first} is identical to @code{car},
@code{second} is identical to @code{cadr}, and so on.  The reason these names
are provided is that they make more sense when you are thinking of the
argument as a list rather than just as a cons.
@end defun

@defun rest list
@defunx rest1 list
@defunx rest2 list
@defunx rest3 list
@defunx rest4 list
@code{rest@i{n}} returns the rest of the elements of a list, starting with
element @i{n} (counting the first element as the zeroth).  Thus
@code{rest} or @code{rest1} is identical to @code{cdr}, @code{rest2} is identical to @code{cddr},
and so on.  The reason these names are provided is that they make more
sense when you are thinking of the argument as a list rather than just
as a cons.
@end defun

@defun endp list
Returns @code{t} if @i{list} is @code{nil}, @code{nil} if @i{list} is a cons
cell.  Signals an error if @i{list} is not a list.  This is the way
Common Lisp recommends for terminating a loop which @code{cdr}'s down a list.
However, Lisp Machine system functions generally prefer to test for the
end of the list with @code{atom}; it is regarded as a feature that these
functions do something useful for dotted lists.
@end defun

@defun nth n list
@code{(nth @i{n} @i{list})} returns the @i{n}'th element of @i{list}, where
the zeroth element is the car of the list.
If @i{n} is greater than the length of the list, @code{nil} is returned.
@lisp
@exdent Examples:
(nth 1 '(foo bar gack)) => bar
(nth 3 '(foo bar gack)) => nil
@end lisp

Note: this is not the same as the InterLisp function called @code{nth},
which is similar to but not exactly the same as the Lisp Machine function
@code{nthcdr}.
Also, some people have used macros and functions called @code{nth} of their own in
their Maclisp programs, which may not work the same way; be careful.

@lisp
@exdent @code{nth} could have been defined by:
(defun nth (n list)
  (do ((i n (1- i))
       (l list (cdr l)))
      ((zerop i) (car l))))
@end lisp
@end defun

@defun nthcdr n list
@code{(nthcdr @i{n} @i{list})} cdrs @i{list} @i{n} times,
and returns the result.
@lisp
@exdent Examples:
(nthcdr 0 '(a b c)) => (a b c)
(nthcdr 2 '(a b c)) => (c)
@end lisp
In other words, it returns the @i{n}'th cdr of the list.
If @i{n} is greater than the length of the list, @code{nil} is returned.

This is similar to InterLisp's function @code{nth}, except that the
InterLisp function is one-based instead of zero-based; see the
InterLisp manual for details.
@code{nthcdr} could have been defined by:
@lisp
(defun nthcdr (n list)
    (do ((i 0 (1+ i))
	 (list list (cdr list)))
	((= i n) list)))
@end lisp
@end defun

@defun last list
@code{last} returns the last cons of @i{list}.  If @i{list} is @code{nil}, it
returns @code{nil}.  Note that @code{last} is unfortunately @i{not} analogous
to @code{first} (@code{first} returns the first element of a list, but
@code{last} doesn't return the last element of a list); this is a
historical artifact.
@lisp
@exdent Examples:
(setq x '(a b c d))
(last x) => (d)
(rplacd (last x) '(e f))
x => '(a b c d e f)
@end lisp
@code{last} could have been defined by:
@lisp
(defun last (x)
    (cond ((atom x) x)
          ((atom (cdr x)) x)
          ((last (cdr x)))))
@end lisp
@end defun

@defmac list-match-p object pattern
@i{object} is evaluated and matched against @i{pattern};
the value is @code{t} if it matches, @code{nil} otherwise.
@i{pattern} is made with backquotes ((backquote)); whereas
normally a backquote expression says how to construct list structure out
of constant and variable parts, in this context it says how to match
list structure against constants and variables.  Constant parts of the
backquote expression must match exactly; variables preceded by commas
can match anything but set the variable to what was matched.  (Some of
the variables may be set even if there is no match.)  If a variable
appears more than once, it must match the same thing (@code{equal} list
structures) each time.  @code{,ignore} can be used to match anything and
ignore it.

For example, @code{`(x (,y) . ,z)} is a pattern that matches a list of
length at least two whose first element is @code{x} and whose second
element is a list of length one; if a list matches, the @code{caadr} of the
list is stored into the value of @i{y} and the @code{cddr} of the list is
stored into @i{z}.

Variables set during the matching remain set after the @code{list-match-p}
returns; in effect, @code{list-match-p} expands into code which can
@code{setq} the variables.  If the match fails, some or all of the
variables may already have been set.

Example:
@lisp
(list-match-p foo
	      `((a ,x) ,ignore . ,c))
@end lisp
is @code{t} if @code{foo}'s value is a list of two or more elements,
the first of which is a list of two elements;
and in that case it sets @code{x} to @code{(cadar foo)} and
@code{c} to @code{(cddr foo)}.  An equivalent expression would be
@lisp
(let ((tem foo))
  (and (consp tem)
       (consp (car tem))
       (eq (caar tem) 'a)
       (consp (cdar tem))
       (progn (setq x (cadar tem)) t)
       (null (cddar tem))
       (consp (cdr tem))
       (setq c (cddr tem))))
@exdent but @code{list-match-p} is faster.
@end lisp

@code{list-match-p} generates highly optimized code using special
instructions.
@end defmac

@defun list-in-area area-number &rest args
@code{list-in-area} is exactly the same as @code{list} except that it takes
an extra argument, an area number, and creates the list in that area.
@end defun

@defun list*-in-area area-number &rest args
@code{list*-in-area} is exactly the same as @code{list*} except that it takes
an extra argument, an area number, and creates the list in that area.
@end defun

@defun make-list length &key area initial-element
Creates and returns a list containing @i{length} elements.
@i{length} should be a fixnum.  @i{area}, if specified, is the area in
which to create the list (see (area)).  If it is @code{nil}, the area used
is the value of @code{working-storage-area}.

@i{initial-element} is stored in each element of the new list.

@code{make-list} always creates a cdr-coded list (see (cdr-code)).
@lisp
@exdent Examples:
(make-list 3) => (nil nil nil)
(make-list 4 :initial-element 7) => (7 7 7 7)
@end lisp

The keyword @code{:initial-value} may be used in place of
@code{:initial-element}.

When @code{make-list} was originally implemented, it took exactly two
arguments: the area and the length.  This obsolete form is still
supported so that old programs can continue to work, but the new
keyword-argument form is preferred.
@end defun

@defun circular-list &rest args
Constructs a circular list whose elements are @code{args}, repeated
infinitely.  @code{circular-list} is the same as @code{list} except that the list itself
is used as the last cdr, instead of @code{nil}.
@code{circular-list} is especially useful with @code{mapcar}, as in the expression
@lisp
(mapcar (function +) foo (circular-list 5))
@end lisp
which adds each element of @code{foo} to 5.

@lisp
@exdent @code{circular-list} could have been defined by:
(defun circular-list (&rest elements)
  (setq elements (copylist* elements))
  (rplacd (last elements) elements)
  elements)
@end lisp
@end defun

@defun copylist list &optional area
@defunx copy-list list &optional area
Returns a list which is @code{equal} to @i{list}, but not @code{eq}.
@code{copylist} does not copy any elements of the list, only the conses of the list itself.
The returned list is fully cdr-coded (see (cdr-code)) to minimize storage.
If @i{list} is dotted, that is, if @code{(cdr (last @i{list}))}
is a non-@code{nil} atom, then the copy also has this property.
You may optionally specify the area in which to create the new copy.
@end defun

@defun copylist* list &optional area
This is the same as @code{copylist} except that the last cons of the
resulting list is never cdr-coded (see (cdr-code)).  This makes for
increased efficiency if you @code{nconc} something onto the list later.
@end defun

@defun copyalist list &optional area
@defunx copy-alist list &optional area
@code{copyalist} is for copying association lists (see
(assoc-lists-section)).  The @i{list} is copied, as in @code{copylist}.
In addition, each element of @i{list} which is a cons is replaced in the
copy by a new cons with the same car and cdr.  You may optionally
specify the area in which to create the new copy.
@end defun

@defun append &rest lists
The arguments to @code{append} are lists.  The result is a list which is the
concatenation of the arguments.
The arguments are not changed (cf. @code{nconc}).
@lisp
@exdent Example:
(append '(a b c) '(d e f) nil '(g)) => (a b c d e f g)
@end lisp
@code{append} makes copies of the conses of all the lists it is given,
except for the last one.  So the new list shares the conses
of the last argument to append, but all of the other conses are newly
created.  Only the lists are copied, not the elements of the lists.

A version of @code{append} which only accepts two arguments could have been defined by:
@lisp
(defun append2 (x y)
    (cond ((null x) y)
          ((cons (car x) (append2 (cdr x) y)) )))
@end lisp

The generalization to any number of arguments could then be made (relying on
car of @code{nil} being @code{nil}):
@lisp
(defun append (&rest args)
  (if (< (length args) 2) (car args)
      (append2 (car args)
	       (apply (function append) (cdr args)))))
@end lisp

These definitions do not express the full functionality of @code{append};
the real definition minimizes storage utilization by turning all the
arguments that are copied into one cdr-coded list.

To copy a list, use @code{copylist} (see (copylist-fun)); the old practice
of using @code{append} to copy lists is unclear and obsolete.
@end defun

@defun nconc &rest lists
@code{nconc} takes lists as arguments.  It returns a list which is the arguments
concatenated together.  The arguments are changed, rather than copied
(cf. @code{append}, (append-fun)).
@lisp
@exdent Example:
(setq x '(a b c))
(setq y '(d e f))
(nconc x y) => (a b c d e f)
x => (a b c d e f)
@end lisp
Note that the value of @code{x} is now different, since its last cons has
been @code{rplacd}'d to the value of @code{y}.  If the @code{nconc} form were
evaluated again, it would yield a piece of circular list structure,
whose printed representation would be @code{(a b c d e f d e f d e f ...)}, repeating forever.

@code{nconc} could have been defined by:
@lisp
(defun nconc (x y)		 ;1for simplicity, this definition*
    (cond ((null x) y)		 ;1only works for 2 arguments.*
          (t (rplacd (last x) y) ;1hook @code{y} onto *x
	     x)))		 ;1and return the modified @code{x}.*
@end lisp
@end defun

@defun revappend x y
@code{(revappend @i{x y})} is exactly the same as 
@code{(nconc (reverse @i{x}) @i{y})} except that it is more 
efficient.  Both @i{x} and @i{y} should be lists.

@code{revappend} could have been defined by:
@lisp
(defun revappend (x y)
    (cond ((null x) y)
	  (t (revappend (cdr x) (cons (car x) y)))))
@end lisp
@end defun

@defun nreconc x y
@code{(nreconc @i{x y})} is exactly the same as 
@code{(nconc (nreverse @i{x}) @i{y})} except that it is more 
efficient.  Both @i{x} and @i{y} should be lists.

@code{nreconc} could have been defined by:
@lisp
(defun nreconc (x y)
    (cond ((null x) y)
          ((nreverse1 x y)) ))
@end lisp
using the same @code{nreverse1} as above.
@end defun

@defun butlast list &optional (n @code{1})
This creates and returns a list with the same elements as @i{list},
excepting the last @i{n} elements.
@lisp
@exdent Examples:
(butlast '(a b c d)) => (a b c)
(butlast '(a b c d) 3) => (a)
(butlast '(a b c d) 4) => nil
(butlast nil) => nil
@end lisp
The name is from the phrase ``all elements but the last''.
@end defun

@defun nbutlast list &optional (n @code{1})
This is the destructive version of @code{butlast}; it changes the cdr of
the last cons but @i{n} of the list to @code{nil}.  The value is @i{list},
as modified.  If @i{list} does not have more than @i{n} elements then it
is not really changed and the value is @code{nil}. 
@lisp
@exdent Examples:
(setq foo '(a b c d))
(nbutlast foo) => (a b c)
foo => (a b c)
(nbutlast foo 2) => (a)
foo => (a)
(nbutlast foo) => nil
foo => (a)
@end lisp
@end defun

@defun firstn n list
Returns a list of length @i{n}, whose elements are the
first @i{n} elements of @code{list}.  If @i{list} is fewer than
@i{n} elements long, the remaining elements of the returned list
are @code{nil}.
@lisp
@exdent Examples:
(firstn 2 '(a b c d)) => (a b)
(firstn 0 '(a b c d)) => nil
(firstn 6 '(a b c d)) => (a b c d nil nil)
@end lisp
@end defun

@defun nleft n list &optional tail
Returns a ``tail'' of @i{list}, i.e. one of the conses that makes up @i{list}, or @code{nil}.
@code{(nleft @i{n} @i{list})} returns the last @i{n} elements of @i{list}.
If @i{n} is too large, @code{nleft} returns @i{list}.

@code{(nleft @i{n} @i{list} @i{tail})} takes cdr of @i{list} enough times
that taking @i{n} more cdrs would yield @i{tail}, and returns that.
You can see that when @i{tail} is @code{nil} this is the same as the two-argument case.
If @i{tail} is not @code{eq} to any tail of @i{list}, @code{nleft} returns @code{nil}.
@lisp
@exdent Examples:
(setq x '(a b c d e f))
(nleft 2 x) => (e f)
(nleft 2 x (cddddr x)) => (c d e f)
@end lisp
@end defun

@defun ldiff list tail
@i{list} should be a list, and @i{tail} should be one of the conses
that make up @i{list}.  @code{ldiff} (meaning `list difference') returns
a new list, whose elements are those elements of @i{list} that appear
before @i{tail}.
@lisp
@exdent Examples:
(setq x '(a b c d e))
(setq y (cdddr x)) => (d e)
(ldiff x y) => (a b c)
(ldiff x nil) => (a b c d e)
(ldiff x x) => nil
@exdent but
(ldiff '(a b c d) '(c d)) => (a b c d)
@exdent since the @i{tail} was not @code{eq} to any part of the @i{list}.
@end lisp
@end defun

@defun car-safe object
@defunx cdr-safe object
@defunx caar-safe object
@defunx cadr-safe object
@defunx cdar-safe object
@defunx cddr-safe object
@defunx caddr-safe object
@defunx cdddr-safe object
@defunx cadddr-safe object
@defunx cddddr-safe object
@defunx nth-safe n object
@defunx nthcdr-safe n object
Return the same things as the corresponding non-@code{safe} functions,
except @code{nil} if the non-@code{safe} function would get an error.
These functions are about as fast as the non-@code{safe} functions.
The same effect could be had by handling the @code{sys:wrong-type-argument}
error, but that would be slower.
Examples:
@lisp
(car-safe '(a . b)) => a
(car-safe nil) => nil
(car-safe 'a) => nil
(car-safe "foo") => nil
(cadr-safe '(a . b)) => nil
(cadr-safe 3) => nil
@end lisp
@end defun

@section  Cons Cells as Trees

@defun copytree tree &optional area
@defunx copy-tree tree &optional area
@code{copytree} copies all the conses of a tree and makes a new maximally
cdr-coded tree with the same fringe.  If @i{area} is specified, the new
tree is constructed in that area.
@end defun

@defun tree-equal x y &key test test-not
Compares two trees recursively to all levels.  Atoms must match under the
function @i{test} (which defaults to @code{eql}).  Conses must match recursively in
both the car and the cdr.

If @i{test-not} is specified instead of @i{test}, two atoms match if
@i{test-not} returns @code{nil}.
@end defun

@cindex substitution
@defun subst new old tree
@code{(subst @i{new old tree})} substitutes @i{new} for all occurrences of @i{old}
in @i{tree}, and returns the modified copy of @i{tree}.  The original @i{tree}
is unchanged, as @code{subst} recursively copies all of @i{tree} replacing
elements @code{equal} to @i{old} as it goes.
@lisp
@exdent Example:
(subst 'Tempest 'Hurricane
       '(Shakespeare wrote (The Hurricane)))
    => (Shakespeare wrote (The Tempest))
@end lisp

@code{subst} could have been defined by:
@lisp
(defun subst (new old tree)
    (cond ((equal tree old) new) ;1if item equal to old, replace.*
          ((atom tree) tree)     ;1if no substructure, return arg.*
          ((cons (subst new old (car tree))  ;1otherwise recurse.*
                 (subst new old (cdr tree))))))
@end lisp

Note that this function is not destructive; that is, it does not change
the car or cdr of any already-existing list structure.

To copy a tree, use @code{copytree} (see (copytree-fun)); the old practice
of using @code{subst} to copy trees is unclear and obsolete.
@end defun

@defun cli:subst new old tree &key test test-not key
The Common Lisp version of @code{subst} replaces with @i{new} every atom or
subtree in @i{tree} which matches @i{old}, returning a new tree.  List
structure is copied as necessary to avoid clobbering parts of tree.
This differs from the traditional @code{subst} function, which always
copies the entire tree.

@i{test} or @i{test-not} is used to do the matching.  If @i{test} is
specified, a match happens when @i{test} returns non-@code{nil}; otherwise,
if @i{test-not} is specified, a match happens when it returns @code{nil}.
If neither is specified, then @code{eql} is used for @i{test}.

The first argument to the @i{test} or @i{test-not} function is always
@i{old}.  The second argument is normally a leaf or subtree of
@i{tree}.  However, if @i{key} is non-@code{nil}, then it is called with
the subtree as argument, and the result of this becomes the second
argument to the @i{test} or @i{test-not} function.

Because @code{(subst nil nil @i{tree})} is a widely used idiom for copying
a tree, even though it is obsolete, there is no practical possibility of
installing this function as the standard @code{subst} for a long time.
@end defun

@defun nsubst new old tree &key test test-not key
@code{nsubst} is a destructive version of @code{subst}.  The list structure of
@i{tree} is altered by replacing each occurrence of @i{old} with
@i{new}.  No new list structure is created.  The keyword arguments are
as in @code{cli:subst}.

A simplified version of @code{nsubst}, handling only the three required
arguments, could be defined as
@lisp
(defun nsubst (new old tree)
    (cond ((eql tree old) new)	  ;1If item matches old, replace.*
          ((atom tree) tree)      ;1If no substructure, return arg.*
	  (t                      ;1Otherwise, recurse.*
	     (rplaca tree (nsubst new old (car tree)))
	     (rplacd tree (nsubst new old (cdr tree)))
	     tree)))
@end lisp
@end defun

@defun subst-if new predicate tree &key key
Replaces with @i{new} every atom or subtree in @i{tree} which satisfies
@i{predicate}.  List structure is copied as necessary so that the
original tree is not modified.  @i{key}, if non-@code{nil}, is a function
applied to each tree node to get the object to match against.  If @i{key}
is @code{nil} or omitted, the tree node itself is used.
@end defun

@defun subst-if-not new predicate tree &key key
Similar, but replaces tree nodes which @i{do not} satisfy @i{predicate}.
@end defun

@defun nsubst-if new predicate tree &key key
@defunx nsubst-if-not new predicate tree &key key
Like @code{subst-if} and @code{subst-if-not} except that they destructively
modify @i{tree} itself and return it, creating no new list structure.
@end defun

@defun sublis alist tree &key test test-not key
Performs multiple parallel replacements on @i{tree}, returning a new
tree.  @i{tree} itself is not modified because list structure is copied
as necessary.  If no substitutions are made, the result is @i{tree}.
@i{alist} is an association list (see (assoc-lists-section)).  Each
element of @i{alist} specifies one replacement; the car is what to look
for, and the cdr is what to replace it with.

@i{test}, @i{test-not} and @i{key} control how matching is done between
nodes of the tree (cons cells or atoms) and objects to be replaced.  See
@code{cli:subst}, above, for the details of how they work.  The first
argument to @i{test} or @i{test-not} is the car of an element of
@i{alist}.
@lisp
@exdent Example:
(sublis '((x . 100) (z . zprime))
        '(plus x (minus g z x p) 4))
   => (plus 100 (minus g zprime 100 p) 4)
@end lisp

@lisp
@exdent A simplified @code{sublis} could be defined by:
(defun sublis (alist tree)
  (let ((tem (assq tree alist)))
    (cond (tem (cdr tem))
	  ((atom tree) tree)
	  (t
	   (let ((car (sublis alist (car tree)))
		 (cdr (sublis alist (cdr tree))))
	     (if (and (eq (car tree) car) (eq (cdr tree) cdr))
		 tree
	       (cons car cdr)))))))
@end lisp
@end defun

@defun nsublis alist tree &key test test-not key
@code{nsublis} is like @code{sublis} but changes the original tree
instead of allocating new structure.

@lisp
@exdent A simplified @code{nsublis} could be defined by:
(defun nsublis (alist tree)
  (let ((tem (assq tree alist)))
    (cond (tem (cdr tem))
	  ((atom tree) tree)
	  (t (rplaca tree (nsublis alist (car tree)))
	     (rplacd tree (nsublis alist (cdr tree)))
	     tree))))
@end lisp
@end defun

@section  Cdr-Coding

This section explains the internal data format used to store conses
inside the Lisp Machine.  Casual users don't have to worry about this;
you can skip this section if you want.  It is only important to read
this section if you require extra storage efficiency in your program.

The usual and obvious internal representation of conses in any
implementation of Lisp is as a pair of pointers, contiguous in memory.
If we call the amount of storage that it takes to store a Lisp pointer a
`word', then conses normally occupy two words.  One word (say it's the
first) holds the car, and the other word (say it's the second) holds the
cdr.  To get the car or cdr of a list, you just reference this memory
location, and to change the car or cdr, you just store into this memory
location.

Very often, conses are used to store lists.  If the above representation
is used, a list of @i{n} elements requires two times @i{n} words of
memory: @i{n} to hold the pointers to the elements of the list, and
@i{n} to point to the next cons or to @code{nil}.  To optimize this
particular case of using conses, the Lisp Machine uses a storage
representation called @i{cdr-coding} to store lists.  The basic goal is to
allow a list of @i{n} elements to be stored in only @i{n} locations,
while allowing conses that are not parts of lists to be stored in the
usual way.

The way it works is that there is an extra two-bit field in every word
of memory, called the @i{cdr-code} field.  There are three meaningful
values that this field can have, which are called @code{cdr-normal}, @code{cdr-next},
and @code{cdr-nil}.  The regular, non-compact way to store a cons is by two
contiguous words, the first of which holds the car and the second of
which holds the cdr.  In this case, the cdr-code of the first word is
@code{cdr-normal}.  (The cdr-code of the second word doesn't matter; as we will
see, it is never looked at.)  The cons is represented by a pointer to
the first of the two words.  When a list of @i{n} elements is stored in
the most compact way, pointers to the @i{n} elements occupy @i{n}
contiguous memory locations.  The cdr-codes of all these locations are
@code{cdr-next}, except the last location whose cdr-code is @code{cdr-nil}.  The
list is represented as a pointer to the first of the @i{n} words.

Now, how are the basic operations on conses defined to work based on
this data structure?  Finding the car is easy: you just read the
contents of the location addressed by the pointer.  Finding the cdr is
more complex.  First you must read the contents of the location
addressed by the pointer, and inspect the cdr-code you find there.  If
the code is @code{cdr-normal}, then you add one to the pointer, read the
location it addresses, and return the contents of that location; that
is, you read the second of the two words.  If the code is @code{cdr-next}, you
add one to the pointer, and simply return that pointer without doing any
more reading; that is, you return a pointer to the next word in the
@i{n}-word block.  If the code is @code{cdr-nil}, you simply return @code{nil}.

If you examine these rules, you will find that they work fine even if
you mix the two kinds of storage representation within the same list.

How about changing the structure?  Like @code{car}, @code{rplaca} is very easy; you
just store into the location addressed by the pointer.  To do @code{rplacd}
you must read the location addressed by the pointer and examine the cdr-code.  If the code is @code{cdr-normal}, you just store into the location one
greater than that addressed by the pointer; that is, you store into the
second word of the two words.  But if the cdr-code is @code{cdr-next} or
@code{cdr-nil}, there is a problem: there is no memory cell that is storing the
cdr of the cons.  That is the cell that has been optimized out; it just
doesn't exist.

This problem is dealt with by the use of @i{invisible pointers}.  An
invisible pointer is a special kind of pointer, recognized by its data
type (Lisp Machine pointers include a data type field as well as an
address field).  The way they work is that when the Lisp Machine reads a
word from memory, if that word is an invisible pointer then it proceeds
to read the word pointed to by the invisible pointer and use that word
instead of the invisible pointer itself.  Similarly, when it writes to a
location, it first reads the location, and if it contains an invisible
pointer then it writes to the location addressed by the invisible
pointer instead.  (This is a somewhat simplified explanation; actually
there are several kinds of invisible pointer that are interpreted in
different ways at different times, used for things other than the cdr-coding
scheme.)

Here's how to do @code{rplacd} when the cdr-code is @code{cdr-next} or @code{cdr-nil}.  Call
the location addressed by the first argument to @code{rplacd} @i{l}.  First,
you allocate two contiguous words in the same area that @i{l} points to.
Then you store the old contents of @i{l} (the car of the cons) and
the second argument to @code{rplacd} (the new cdr of the cons) into these two
words.  You set the cdr-code of the first of the two words to @code{cdr-normal}.
Then you write an invisible pointer, pointing at the first of the two
words, into location @i{l}.  (It doesn't matter what the cdr-code of
this word is, since the invisible pointer data type is checked first,
as we will see.)

Now, whenever any operation is done to the cons (@code{car}, @code{cdr}, @code{rplaca}, or
@code{rplacd}), the initial reading of the word pointed to by the Lisp pointer
that represents the cons finds an invisible pointer in the addressed
cell.  When the invisible pointer is seen, the address it contains is
used in place of the original address.  So the newly-allocated two-word
cons is used for any operation done on the original object.

Why is any of this important to users?  In fact, it is all invisible to
you; everything works the same way whether or not compact representation
is used, from the point of view of the semantics of the language.  That
is, the only difference that any of this makes is a difference in
efficiency.  The compact representation is more efficient in most cases.
However, if the conses are going to get @code{rplacd}'ed, then invisible
pointers will be created, extra memory will be allocated, and the
compact representation will degrade storage efficiency rather
than improve it.  Also, accesses that go through invisible pointers are
somewhat slower, since more memory references are needed.  So if you
care a lot about storage efficiency, you should be careful about which
lists get stored in which representations.

You should try to use the normal representation for those data
structures that will be subject to @code{rplacd} operations, including
@code{nconc} and @code{nreverse}, and the compact representation for other
structures.  The functions @code{cons}, @code{xcons}, @code{ncons}, and their
area variants make conses in the normal representation.  The functions
@code{list}, @code{list*}, @code{list-in-area}, @code{make-list}, and @code{append} use
the compact representation.  The other list-creating functions,
including @code{read}, currently make normal lists, although this might get
changed.  Some functions, such as @code{sort}, take special care to operate
efficiently on compact lists (@code{sort} effectively treats them as
arrays).  @code{nreverse} is rather slow on compact lists, currently, since
it simple-mindedly uses @code{rplacd}, but this may be changed.

@code{(copylist @i{x})} is a suitable way to copy a
list, converting it into compact form (see (copylist-fun)).

@section  Tables

Zetalisp includes functions which simplify the maintenance
of tabular data structures of several varieties.  The simplest is
a plain list of items
There are functions to add (@code{cons}), remove (@code{delete}, @code{delq},
@code{del}, @code{del-if}, @code{del-if-not}, @code{remove}, @code{remq}, @code{rem},
@code{rem-if}, @code{rem-if-not}),
and search for (@code{member}, @code{memq}, @code{mem}) items in a list.

@cindex association list
@cindex alist
@i{Association lists} are very commonly used.  An association list
is a list of conses.  The car of each cons is a ``key'' and the cdr
is a ``datum'', or a list of associated data.  The functions
@code{assoc}, @code{assq}, @code{ass}, @code{memass}, and @code{rassoc}
may be used to retrieve the data, given the key.  For example,
@lisp
((tweety . bird) (sylvester . cat))
@end lisp
is an association list with two elements.  Given a symbol representing
the name of an animal, it can retrieve what kind of animal this is.

@i{Structured records} can be stored as association lists or as
stereotyped cons-structures where each element of the structure has a certain
car-cdr path associated with it.  However, these are better implemented
using structure macros (see (defstruct)) or as flavors ((flavor)).

Simple list-structure is very convenient, but may not be efficient enough
for large data bases because it takes a long time to search a long list.
Zetalisp includes hash table facilities for more efficient
but more complex tables (see (hash-table)), and
a hashing function (@code{sxhash}) to aid users in constructing their own facilities.

@section  Lists as Tables

@defun memq item list
Returns @code{nil} if @i{item} is not one of the
elements of @i{list}.  Otherwise, it returns the sublist of @i{list}
beginning with the first occurrence of @i{item}; that is, it returns the
first cons of the list whose car is @i{item}.  The comparison is made by
@code{eq}.  Because @code{memq} returns @code{nil} if it doesn't find anything,
and something non-@code{nil} if it finds something, it is often used as a
predicate.
@lisp
@exdent Examples:
(memq 'a '(1 2 3 4)) => nil
(memq 'a '(g (x a y) c a d e a f)) => (a d e a f)
@end lisp
Note that the value returned by @code{memq} is @code{eq} to the portion of the list
beginning with @code{a}.
Thus @code{rplaca} on the result of @code{memq} may be used,
if you first check to make sure @code{memq} did not return @code{nil}.
@lisp
@exdent Example:
(let ((sublist (memq x z)))	;1Search for @code{x} in the list @code{z}.*
  (if (not (null sublist))      ;1If it is found,*
      (rplaca sublist y)))	;1Replace it with @code{y}.*
@end lisp

@lisp
@exdent @code{memq} could have been defined by:
(defun memq (item list)
    (cond ((null list) nil)
          ((eq item (car list)) list)
          (t (memq item (cdr list)))))
@end lisp

@code{memq} is hand-coded in microcode and therefore especially fast.
It is equivalent to @code{cli:member} with @code{eq} specified as
the @i{test} argument.
@end defun

@defun member item list
@code{member} is like @code{memq}, except @code{equal} is used for the comparison,
instead of @code{eq}.  Note that the @code{member} function of Common Lisp,
which is @code{cli:member}, is similar but thoroughly incompatible (see below).

@code{member} could have been defined by:
@lisp
(defun member (item list)
    (cond ((null list) nil)
          ((equal item (car list)) list)
          (t (member item (cdr list)))))
@end lisp
@end defun

@defun cli:member item list &key test test-not key
The Common Lisp @code{member} function.  It is
like @code{memq} or @code{member} except that there is more generality
in how elements of @i{list} are matched against @i{item}--and
the default is incompatible.

@i{test}, @i{test-not} and @i{key} are used in matching the elements,
just as described under @code{cli:subst} (see (cli:subst-fun)).  If
neither @i{test} nor @i{test-not} is specified, the default is to
compare with @code{eql}, whereas @code{member} compares with @code{equal}.

Usually @i{test} is a commutative predicate such as
@code{eq}, @code{equal}, @code{=}, @code{char-equal} or @code{string-equal}.
It can also be a non-commutative predicate.  The predicate
is called with @i{item} as its first argument and the element of @i{list}
as its second argument.  Example:
@lisp
(cli:member 4 '(1.5 2.5 2 3.5 4.5 8) :test '<) => (4.5 8)
@end lisp
@end defun

@defun member-if predicate list &key key
Searches the elements of @i{list} for one which satisfies @i{predicate}.
If one is found, the value is the tail of @i{list} whose car is that element.
Otherwise the value is @code{nil}.

If @i{key} is non-@code{nil}, then @i{predicate} is applied to @code{(funcall
@i{key} @i{element})} rather than to the element itself.
@end defun

@defun member-if-not predicate list &key key
Searches for an element which does not satisfy @i{predicate}.
Otherwise like @code{member-if}.
@end defun

@defun mem predicate item list
Is equivalent to
@lisp
(cli:member @i{item} @i{list} :test @i{predicate})
@end lisp

The function @code{mem} antedates @code{cli:member}.
@end defun

@defun find-position-in-list item list
Searches @i{list} for an element which
is @code{eq} to @i{item}, like @code{memq.}  However, it returns the numeric index
in the list at which it found the first occurence of @i{item}, or
@code{nil} if it did not find it at all.  This function is sort of
the complement of @code{nth} (see (nth-fun)); like @code{nth}, it is zero-based.
@lisp
@exdent Examples:
(find-position-in-list 'a '(a b c)) => 0
(find-position-in-list 'c '(a b c)) => 2
(find-position-in-list 'e '(a b c)) => nil
@end lisp

See also the generic sequence function @code{position} ((position-fun)).
@end defun

@defun find-position-in-list-equal item list
Is like @code{find-position-in-list}, except that the comparison is done
with @code{equal} instead of @code{eq}.
@end defun

@defun tailp sublist list
Returns @code{t} if @i{sublist} is a sublist of @i{list} (i.e.
one of the conses that makes up @i{list}).  Otherwise returns @code{nil}.
Another way to look at this is that @code{tailp} returns @code{t} if
@code{(nthcdr @i{n} @i{list})} is @i{sublist}, for some value of @i{n}.
@code{tailp} could have been defined by:
@lisp
(defun tailp (sublist list)
    (do list list (cdr list) (null list)
      (if (eq sublist list)
	  (return t))))
@end lisp
@end defun

@defun delq item list &optional n
@code{(delq @i{item list})} returns the @i{list} with all
occurrences of @i{item} removed.  @code{eq} is used for the comparison. 
The argument @i{list} is actually modified (@code{rplacd}'ed) when instances
of @i{item} are spliced out.  @code{delq} should be used for value, not
for effect.  That is, use
@lisp
(setq a (delq 'b a))
@end lisp
rather than
@lisp
(delq 'b a)
@end lisp
These two are @i{not} equivalent when the first element
of the value of @code{a} is @code{b}.

@code{(delq @i{item list n})} is like @code{(delq @i{item list})} except only the first
@i{n} instances of @i{item} are deleted.  @i{n} is allowed to be zero. 
If @i{n} is greater than or equal to the number of occurrences of @i{item} in the
list, all occurrences of @i{item} in the list are deleted. 
@lisp
@exdent Example:
(delq 'a '(b a c (a b) d a e)) => (b c (a b) d e)
@end lisp

@code{delq} could have been defined by:
@lisp
(defun delq (item list &optional (n -1))
    (cond ((or (atom list) (zerop n)) list)
          ((eq item (car list))
	   (delq item (cdr list) (1- n)))
          (t (rplacd list (delq item (cdr list) n)))))
@end lisp
If the third argument (@i{n}) is not supplied, it defaults to @code{-1} which
is effectively infinity since it can be decremented any number of times without
reaching zero.
@end defun

@defun delete item list &optional n
@code{delete} is the same as @code{delq} except that @code{equal} is used for the comparison
instead of @code{eq}.

Common Lisp programs have a different, incompatible function called
@code{delete}; see (cli:delete-fun).  This function may be useful in
non-Common-Lisp programs as well, where it can be referred to as
@code{cli:delete}.
@end defun

@defun del predicate item list &optional n
@code{del} is the same as @code{delq} except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of @code{eq}.  @code{(del 'eq a b)} is the same as
@code{(delq a b)}.  See also @code{mem}, (mem-fun).

Use of @code{del} is equivalent to
@lisp
(cli:delete @i{item} @i{list} :test @i{predicate})
@end lisp
@end defun

@defun remq item list &optional n
@code{remq} is similar to @code{delq}, except that the list is not altered;
rather, a new list is returned.
@lisp
@exdent Examples:
(setq x '(a b c d e f))
(remq 'b x) => (a c d e f)
x => (a b c d e f)
(remq 'b '(a b c b a b) 2) => (a c a b)
@end lisp
@end defun

@defun remove item list &optional n
@code{remove} is the same as @code{remq} except that @code{equal} is used for the
comparison instead of @code{eq}.  Common Lisp programs have a different,
incompatible function called @code{remove}; see (cli:remove-fun).  This function
may be useful in non-Common-Lisp programs as well, where it can be
referred to as @code{cli:remove}.
@end defun

@defun rem predicate item list &optional n
@code{rem} is the same as @code{remq} except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of @code{eq}.  @code{(rem 'eq a b)} is the same as
@code{(remq a b)}.  See also @code{mem}, (mem-fun).

The function @code{rem} in Common Lisp programs is actually @code{cli:rem},
a remainder function.  See (cli:rem-fun).
@end defun

@defun subset predicate list
@defunx rem-if-not predicate list
@i{predicate} should be a function of one argument.
A new list is made by applying @i{predicate} to
all of the elements of @i{list} and removing the ones for which the predicate 
returns @code{nil}.  One of this function's names (@code{rem-if-not})
means ``remove if this condition is not true''; i.e. it keeps the elements
for which @i{predicate} is true.  The other name (@code{subset}) refers to
the function's action if @i{list} is considered to represent a mathematical set.
@lisp
@exdent Example:
(subset #'minusp '(1 2 -4 2 -3)) => (-4 -3)
@end lisp
@end defun

@defun subset-not predicate list
@defunx rem-if predicate list
@i{predicate} should be a function of one argument.
A new list is made by applying @i{predicate} to
all of the elements of @i{list} and removing the ones for which the predicate 
returns non-@code{nil}.  One of this function's names (@code{rem-if})
means ``remove if this condition is true''.  The other name (@code{subset-not})
refers to the function's action if @i{list} is considered to represent
a mathematical set.
@end defun

@defun del-if predicate list
@code{del-if} is just like @code{rem-if} except that it modifies @i{list}
rather than creating a new list.
@end defun

@defun del-if-not predicate list
@code{del-if-not} is just like @code{rem-if-not} except that it modifies @i{list}
rather than creating a new list.
@end defun

See also the generic sequence functions @code{delete-if}, @code{delete-if-not},
@code{remove-if} and @code{remove-if-not} ((remove-if-fun)).

@defun every list predicate &optional step-function
Returns @code{t} if @i{predicate} returns
non-@code{nil} when applied to every element of @i{list},
or @code{nil} if @i{predicate} returns @code{nil} for some element.
If @i{step-function} is present, it replaces @code{cdr}
as the function used to get to the next element of the list;
@code{cddr} is a typical function to use here.

In Common Lisp programs, the name @code{every} refers to a different,
incompatible function which serves a similar purpose.  It is documented
in the manual under the name @code{cli:every}.  See (cli:every-fun).
@end defun

@defun some list predicate &optional step-function
Returns a tail of @i{list} such that the car
of the tail is the first element that the @i{predicate} returns
non-@code{nil} when applied to,
or @code{nil} if @i{predicate} returns @code{nil} for every element.
If @i{step-function} is present, it replaces @code{cdr}
as the function used to get to the next element of the list;
@code{cddr} is a typical function to use here.

In Common Lisp programs, the name @code{some} refers to a different,
incompatible function which serves a similar purpose.  It is documented
in the manual under the name @code{cli:some}.  See (cli:some-fun).
@end defun

@section  Lists as Sets
@cindex sets

A list can be used to represent an unordered set of objects, simply by
using it in a way that ignores the order of the elements.  Membership in
the set can be tested with @code{memq} or @code{member}, and some other
functions in the previous section also make sense on lists representing
sets.  This section describes several functions specifically intended
for lists that represent sets.

It is often desirable to avoid adding duplicate elements in the list.
The set functions attempt to introduce no duplications, but do not
attempt to eliminate duplications present in their arguments.  If you
need to make absolutely certain that a list contains no duplicates, use
@code{remove-duplicates} or @code{delete-duplicates} (see
(remove-duplicates-fun)).

@defun subsetp list1 list2 &key test test-not key
@code{t} if every element of @i{list1} matches some element of @i{list2}.

The keyword arguments control how matching is done.
Either @i{test} or @i{test-not} should be a function of two arguments.
Normally it is called with an element of @i{list1} as the first argument
and an element of @i{list2} as the second argument.
If @i{test} is
specified, a match happens when @i{test} returns non-@code{nil}; otherwise,
if @i{test-not} is specified, a match happens when it returns @code{nil}.
If neither is specified, then @code{eql} is used for @i{test}.

If @i{key} is non-@code{nil}, it should be a function of one argument.
@i{key} is applied to each list element to get a key to be passed
to @i{test} or @i{test-not} instead of the element.
@end defun

@defun adjoin item list &key test test-not key
Returns a list like @i{list} but with @i{item} as an additional element
if no existing element matches item.  It is done like this:
@lisp
(if (cli:member (if @i{key} (funcall @i{key} @i{item}) @i{item})
		@i{list} @i{other-args}...)
    @i{list}
  (cons @i{item} @i{list}))
@end lisp
The keyword arguments work as in @code{subsetp}.
@end defun

@defmac pushnew item list-place &key test test-not key
Pushes @i{item} onto @i{list-place} unless @i{item} matches an
existing element of the value stored in that place.  Equivalent to
@lisp
(setf @i{list-place}
      (adjoin @i{item} @i{list-place} @i{keyword-args}...))
@end lisp
except for order of evaluation.  Compare with @code{push}, (push-fun).
@end defmac

@defun union list &rest more-lists
Returns a list representing the set which is the union of the
sets represented by the arguments.  Anything which is an element of at
least one of the arguments is also an element of the result.

Each element of each list is compared, using @code{eq}, with all elements
of the other lists, to make sure that no duplications are introduced
into the result.  As long as no individual argument list contains
duplications, the result does not either.

It is best to use @code{union} with only two arguments so that
your code will not be sensitive to the difference between the
traditional version of @code{union} and the Common Lisp version
@code{cli:union}, below.
@end defun

@defun intersection list &rest more-lists
If lists are regarded as sets of their elements, @code{intersection}
returns a list which is the intersection of the lists which are
supplied as arguments.  If @i{list} contains no duplicate elements,
neither does the value returned by @code{intersection}.  Elements are
compared using @code{eq}.

It is best to use @code{intersection} with only two arguments so that
your code will not be sensitive to the difference between the
traditional version of @code{intersection} and the Common Lisp version
@code{cli:intersection}, below.
@end defun

@defun nunion list &rest more-lists
If lists are regarded as sets of their elements, @code{nunion} modifies
@i{list} to become the union of the lists which are supplied as
arguments.  This is done by adding on, at the end, any elements of the
other lists that were not already in @i{list}.  If none of the arguments
contains any duplicate elements, neither does the value returned by
@code{nunion}.  Elements are compared using @code{eq}.

It is not safe to assume that @i{list} has been modified properly in place,
as this will not be so if @i{list} is @code{nil}.  Rather, you
must store the value returned by @code{nunion} in place of @i{list}.

It is best to use @code{nunion} with only two arguments so that
your code will not be sensitive to the difference between the
traditional version of @code{nunion} and the Common Lisp version
@code{cli:nunion}, below.
@end defun

@defun nintersection list &rest more-lists
Like @code{intersection} but produces the value by deleting elements from @i{list}
until the desired result is reached, and then returning @i{list} as modified.

It is not safe to assume that @i{list} has been modified properly in place,
as this will not be so if the first element was deleted.  Rather, you
must store the value returned by @code{nintersection} in place of @i{list}.

It is best to use @code{nintersection} with only two arguments so that
your code will not be sensitive to the difference between the
traditional version of @code{nintersection} and the Common Lisp version
@code{cli:nintersection}, below.
@end defun

@defun cli:union list1 list2 &key test test-not key
@defunx cli:intersection list1 list2 &key test test-not key
@defunx cli:nunion list1 list2 &key test test-not key
@defunx cli:nintersection list1 list2 &key test test-not key
The Common Lisp versions of the above functions, which accept only two sets to
operate on, but permit additional arguments to control how elements are
matched.  These keyword arguments work the same as in @code{subsetp}.
@end defun

@defun set-difference list1 list2 &key test test-not key
Returns a list which has all the elements of @i{list1} which do not match any
element of @i{list2}.  The keyword arguments control comparison of elements
just as in @code{subsetp}.

The result contains no duplicate elements as long as @i{list1} contains
none.
@end defun

@defun set-exclusive-or list1 list2 &key test test-not key
Returns a list which has all the elements of @i{list1} which do not match any
element of @i{list2}, and also all the elements of @i{list2} which do not match
any element of @i{list1}.  The keyword arguments control comparison of elements
just as in @code{subsetp}.

The result contains no duplicate elements as long as neither @i{list1} nor @i{list2}
contains any.
@end defun

@defun nset-difference list1 list2 &key test test-not key
Like @code{set-difference} but destructively modifies @i{list1} to produce the value.
See the caveat in @code{nintersection}, above.
@end defun

@defun nset-exclusive-or list1 list2 &key test test-not key
Like @code{set-exclusive-or} but may destructively modify both @i{list1} and @i{list2}
to produce the value.  See the caveat in @code{nintersection}, above.
@end defun

@section  Association Lists

In all the alist-searching functions, alist elements which are @code{nil}
are ignored; they do not count as equivalent to @code{(nil . nil)}.  Elements
which are not lists cause errors.

@defun pairlis cars cdrs &optional tail
@code{pairlis} takes two lists and makes an association list which associates
elements of the first list with corresponding elements of the second
list.
@lisp
@exdent Example:
(pairlis '(beef clams kitty) '(roast fried yu-shiang))
   => ((beef . roast) (clams . fried) (kitty . yu-shiang))
@end lisp
@cindex kitty, yu-shiang

If @i{tail} is non-@code{nil}, it should be another alist.  The new
alist continues with @i{tail} following the newly constructed mappings.

@code{pairlis} is defined as:
@lisp
(defun pairlis (cars cdrs &optional tail)
  (nconc (mapcar 'cons cars cdrs) tail))
@end lisp
@end defun

@defun acons acar acdr tail
Returns @code{(cons (cons @i{acar} @i{acdr}) @i{tail})}.
This adds one additional mapping from @i{acar} to @i{acdr} onto
the alist @i{tail}.
@end defun

@defun assq item alist
@cindex association list
@code{(assq @i{item alist})} looks up @i{item} in the association list
(list of conses) @i{alist}.  The value is the first cons whose car
is @code{eq} to @i{x}, or @code{nil} if there is none such. 
@lisp
@exdent Examples:
(assq 'r '((a . b) (c . d) (r . x) (s . y) (r . z)))
	=>  (r . x)

(assq 'fooo '((foo . bar) (zoo . goo))) => nil

(assq 'b '((a b c) (b c d) (x y z))) => (b c d)
@end lisp

It is okay to @code{rplacd} the result of @code{assq} as long as it is not @code{nil},
if your intention is to ``update'' the ``table'' that was @code{assq}'s second argument.
@lisp
@exdent Example:
(setq values '((x . 100) (y . 200) (z . 50)))
(assq 'y values) => (y . 200)
(rplacd (assq 'y values) 201)
(assq 'y values) => (y . 201)
@end lisp

A common trick is to say
@code{(cdr (assq x y))}.
Since the cdr of @code{nil} is guaranteed to be @code{nil},
this yields @code{nil} if no pair is found (or if a pair is
found whose cdr is @code{nil}.)

@lisp
@exdent @code{assq} could have been defined by:
(defun assq (item list)
    (cond ((null list) nil)
          ((eq item (caar list)) (car list))
          ((assq item (cdr list))) ))
@end lisp
@end defun

@defun assoc item alist
@code{assoc} is like @code{assq} except that the comparison uses @code{equal} instead of @code{eq}.
@lisp
@exdent Example:
(assoc '(a b) '((x . y) ((a b) . 7) ((c . d) .e)))
	=> ((a b) . 7)
@end lisp
@code{assoc} could have been defined by:
@lisp
(defun assoc (item list)
    (cond ((null list) nil)
          ((equal item (caar list)) (car list))
          ((assoc item (cdr list))) ))
@end lisp
@end defun

@defun cli:assoc item alist &key test test-not
The Common Lisp version of @code{assoc}, this function returns the first
element of @i{alist} which is a cons whose car matches @i{item}, or
@code{nil} if there is no such element.

@i{test} and @i{test-not} are used in comparing elements, as in
@code{cli:subst} ((cli:subst-fun)), but note that there is no
@i{key} argument in @code{cli:assoc}.

@code{cli:assoc} is incompatible with the traditional function @code{assoc}
in that, like most Common Lisp functions, it uses @code{eql} by default
rather than @code{equal} for the comparison.
@end defun

@defun ass predicate item alist
@code{ass} is the same as @code{assq} except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of @code{eq}.  @code{(ass 'eq a b)} is the same as
@code{(assq a b)}.  See also @code{mem}, (mem-fun).

This function is part of The @code{mem}, @code{rem}, @code{del} series, whose
names were chosed partly because they created a situation in which
this function simply had to be called @code{ass}.  It's too bad that
@code{cli:assoc} is so general and subsumes @code{ass}, which is equivalent
to
@lisp
(cli:assoc @i{item} @i{alist} :test @i{predicate})
@end lisp
@end defun

@defun assoc-if predicate alist
Returns the first element of @i{alist} which is a cons whose car
satisfies @i{predicate}, or @code{nil} if there is no such element.
@end defun

@defun assoc-if-not predicate alist
Returns the first element of @i{alist} which is a cons whose car does
not satisfy @i{predicate}, or @code{nil} if there is no such element.
@end defun

@defun memass predicate item alist
@code{memass} searches @i{alist} just like @code{ass}, but returns the
portion of the list beginning with the pair containing @i{item},
rather than the pair itself.  @code{(car (memass @i{x y z})) = (ass @i{x y
z})}.  See also @code{mem}, (mem-fun).
@end defun

@defun rassq item alist
@defunx rassoc item alist
@defunx rass predicate item alist
@defunx cli:rassoc item alist &key test test-not
@defunx rassoc-if predicate alist
@defunx rassoc-if-not predicate alist
The reverse-association functions are like @code{assq}, @code{assoc}, etc.
but match or test the cdrs of the alist elements instead of the cars.
For example, @code{rassq} could have been defined by:
@lisp
(defun rassq (item in-list) 
    (do l in-list (cdr l) (null l) 
      (and (eq item (cdar l)) 
	   (return (car l)))))
@end lisp
@end defun

@defun sassq item alist fcn
@code{(sassq @i{item alist fcn})} is like @code{(assq @i{item alist})} except
that if @i{item} is not found in @i{alist}, instead of returning @code{nil},
@code{sassq} calls the function @i{fcn} with no arguments.  @code{sassq} could
have been defined by: 
@lisp
(defun sassq (item alist fcn)
    (or (assq item alist)
        (apply fcn nil)))
@end lisp

@code{sassq} and @code{sassoc} (see below) are of limited use.
These are primarily leftovers from Lisp 1.5.
@end defun

@defun sassoc item alist fcn
@code{(sassoc @i{item alist fcn})} is like @code{(assoc @i{item alist})} except that if
@i{item} is not found in @i{alist}, instead of returning @code{nil}, @code{sassoc} calls
the function @i{fcn} with no arguments.  @code{sassoc} could have been
defined by: 
@lisp
(defun sassoc (item alist fcn)
    (or (assoc item alist)
        (apply fcn nil)))
@end lisp
@end defun

@section  Stack Lists
@cindex stack lists

When you are creating a list that will not be needed any more once the function
that creates it is finished, it is possible to create the list on the
stack instead of by consing it.  This avoids any permanent storage
allocation, as the space is reclaimed as part of exiting the function.
By the same token, it is a little risky; if any pointers to the list
remain after the function exits, they will become meaningless.

These lists are called @i{temporary lists} or @i{stack lists}.
You can create them explicitly using the special forms
@code{with-stack-list} and @code{with-stack-list*}.  @code{&rest} arguments also
sometimes create stack lists.

If a stack list, or a list which might be a stack list, is to be
returned or made part of permanent list-structure, it must first be
copied (see @code{copylist}, (copylist-fun)).  The system cannot
detect the error of omitting to copy a stack list; you will simply find
that you have a value that seems to change behind your back.

@defspec with-stack-list (variable element...) body...
@defspecx with-stack-list* (variable element... tail) body...
These special forms create stack lists that live
inside the stack frame of the function that they are used in.
You should assume that the stack lists are only valid until the special
form is exited.

@lisp
(with-stack-list (foo x y)
  (mumblify foo))
@exdent is equivalent to
(let ((foo (list x y)))
  (mumblify foo))
@end lisp
except for the fact that @code{foo}'s value in the first example is a stack
list.

The list created by @code{with-stack-list*} looks like the one created by
@code{list*}.  @i{tail}'s value becomes the ultimate cdr rather than an
element of the list.

Here is a practical example.  @code{condition-resume} (see
(condition-resume-fun)) might have been defined as follows:
@lisp
(defmacro condition-resume (handler &body body)
  `(with-stack-list* (eh:condition-resume-handlers
		       ,handler eh:condition-resume-handlers)
     . ,body))
@end lisp
@end defspec

It is an error to do @code{rplacd} on a stack list (except for the
tail of one made using @code{with-stack-list*}).  @code{rplaca} works
normally.

.defcondition sys:rplacd-wrong-representation-type (@code{error})
This is signaled if you @code{rplacd} a stack list (or a list overlayed
with an array or other structure).
.end_defcondition

@section  Property Lists
@cindex "property list"
@cindex "plist"
@cindex "indicator"
@cindex "attribute"

From time immemorial, Lisp has had a kind of tabular data structure
called a @i{property list} (plist for short).  A property list contains
zero or more entries; each entry associates from a keyword symbol
(called the @i{property name}, or sometimes the @i{indicator}) to a Lisp
object (called the @i{value} or, sometimes, the @i{property}).  There
are no duplications among the property names; a property-list can have only
one property at a time with a given name.

This is very similar to an association list.  The important difference is that a
property list is an object with a unique identity; the operations for
adding and removing property-list entries are side-effecting operations
which alter the property-list rather than making a new one.  An
association list with no entries would be the empty list @code{()}, i.e.
the symbol @code{nil}.  There is only one empty list, so all empty
association lists are the same object.  Each empty property-list is a
separate and distinct object.

The implementation of a property list is a memory cell containing a list
with an even number (possibly zero) of elements.  Each pair of elements
constitutes a @i{property}; the first of the pair is the name and the
second is the value.  (It would have been possible to use an alist to
hold the pairs; this format was chosen when Lisp was young.)  The memory cell
is there to give the property list a unique identity and to provide for
side-effecting operations.

The term `property list' is sometimes incorrectly used to refer to the
list of entries inside the property list, rather than the property list
itself.  This is regrettable and confusing.

How do we deal with ``memory cells'' in Lisp?  That is, what kind of Lisp object
is a property list?  Rather than being a distinct primitive data type,
a property list can exist in one of three forms:

1. Any cons can be used as a property list.  The cdr of the cons holds
the list of entries (property names and values).  Using the cons as a
property list does not use the car of the cons; you can use that for
anything else.

2. The system associates a property list with every symbol (see (symbol-plist-section)).
A symbol can be used where a property list is expected; the property-list
primitives automatically find the symbol's property list and use it.

3. A flavor instance may have a property list.  The property list
functions operate on instances by sending messages to them, so the
flavor can store the property list any way it likes.
See (si:property-list-mixin-flavor).

4. A named structure may have a property list.  The property list
functions automatically call @code{named-structure-invoke} when
a named structure is supplied as the property list.  See (named-structure).

5. A property list can be a memory cell in the middle of some data structure,
such as a list, an array, an instance, or a defstruct.  An arbitrary memory
cell of this kind is named by a locative (see (locative)).  Such locatives
are typically created with the @code{locf} special form (see (locf-fun)).

@cindex "disembodied property list"
Property lists of the first kind
are called @i{disembodied} property lists because they are not associated with
a symbol or other data structure.
The way to create a disembodied property list is @code{(ncons nil)},
or @code{(ncons @i{data})} to store @i{data} in the car of the property list.

Suppose that, inside a program which deals with blocks, the property
list of the symbol @code{b1} contains this list (which would be the
value of @code{(symbol-plist 'b1)}):
@cindex "blocks"
@lisp
	(color blue on b6 associated-with (b2 b3 b4))
@end lisp
The list has six elements, so there are three properties.
The first property's name is the symbol @code{color}, and its value
is the symbol @code{blue}.  One says that ``the value of @code{b1}'s @code{color}
property is @code{blue}'', or, informally, that ``@code{b1}'s @code{color} property
is @code{blue}.''  The program is probably representing the information that
the block represented by @code{b1} is painted blue.  Similarly, it is probably
representing in the rest of the property list that block @code{b1} is on
top of block @code{b6}, and that @code{b1} is associated with blocks
@code{b2}, @code{b3}, and @code{b4}.

@defun get plist property-name &optional default-value
@code{get} looks up @i{plist}'s @i{property-name} property.  If it finds such a property,
it returns the value; otherwise, it returns @i{default-value}.  If @i{plist} is a symbol,
the symbol's associated property list is used.  For example, if the property
list of @code{foo} is @code{(baz 3)}, then
@lisp
(get 'foo 'baz) => 3
(get 'foo 'zoo) => nil
(get 'foo 'baz t) => 3
(get 'foo 'zoo t) => t
@end lisp
@end defun

@defun getl plist property-name-list
@code{getl} is like @code{get}, except that the second argument is a list
of property names.  @code{getl} searches down @i{plist} for any
of the names in @i{property-name-list}, until it finds a property whose
name is one of them.
If @i{plist} is a symbol, the symbol's associated property list is used.

	@code{getl} returns the portion of the list inside @i{plist} beginning
with the first such property that it found.  So the car of the returned
list is a property name, and the @code{cadr} is the property value.  If none
of the property names on @i{property-name-list} are on the property list, @code{getl}
returns @code{nil}.  For example, if the property list of @code{foo} were
@lisp
(bar (1 2 3) baz (3 2 1) color blue height six-two)
@end lisp
then
@lisp
(getl 'foo '(baz height))
  => (baz (3 2 1) color blue height six-two)
@end lisp

When more than one of the names in @i{property-name-list} is present in
@i{plist}, which one @code{getl} returns depends on the order of the properties.
This is the only thing that depends on that order.  The order maintained
by @code{putprop} and @code{defprop} is not defined (their behavior with respect
to order is not guaranteed and may be changed without notice).
@end defun

@defun putprop plist x property-name
This gives @i{plist} an @i{property-name}-property of @i{x}.
After this is done, @code{(get @i{plist property-name})} returns @i{x}.
If @i{plist} is a symbol, the symbol's associated property list is used.
@lisp
@exdent Example:
(putprop 'nixon t 'crook)
@end lisp

It is more modern to write
@lisp
(setf (get @i{plist} @i{property-name}) @i{x})
@end lisp
which avoids the counterintuitive order in which @code{putprop} takes its arguments.
@end defun

@defspec defprop symbol x property-name
@code{defprop} is a form of @code{putprop} with unevaluated arguments,
which is sometimes more convenient for typing.  Normally only a symbol
makes sense as the first argument.
@lisp
@exdent Example:
(defprop foo bar next-to)
@end lisp
is the same as
@lisp
(putprop 'foo 'bar 'next-to)
@end lisp
@end defspec

@defun remprop plist property-name
This removes @i{plist}'s @i{property-name} property, by splicing it out of the property
list.  It returns that portion of the list inside @i{plist} of which the
former @i{property-name}-property was the car.  @code{car} of what @code{remprop}
returns is what @code{get} would have returned with the same arguments.
If @i{plist} is a symbol, the symbol's associated property list is used.
For example, if the property list of @code{foo} was
@lisp
(color blue height six-three near-to bar)
@end lisp
then
@lisp
(remprop 'foo 'height) => (six-three near-to bar)
@end lisp
and @code{foo}'s property list would be
@lisp
(color blue near-to bar)
@end lisp
If @i{plist} has no @i{property-name}-property, then @code{remprop} has no side-effect
and returns @code{nil}.
@end defun

@defmac getf place property &optional default
Equivalent to @code{(get (locf @i{place}) @i{property} @i{default})}, except that @code{getf} is
defined in Common Lisp, which does not have @code{locf} or locatives of any kind.

@code{(setf (getf @i{place} @i{property}) @i{value})} can be used to store
properties into the property list at @i{place}.
@end defmac

@defmac remf place property
Equivalent to @code{(remprop (locf @i{place}) @i{property})}, except that @code{remf} is
defined in Common Lisp.
@end defmac

@defmac get-properties place list-of-properties
Like
@code{(getl (locf @i{place}) @i{list-of-properties})} but returns
slightly different values.  Specifically, it searches the property list for a property
name which is @code{memq} in @i{list-of-properties}, then returns three values:
@table @i
@item propname
the property name found
@item value
the value of that property
@item cell
the property list cell found, whose car is @i{propname}
and whose cadr is @i{value}.
@end table
If nothing is found, all three values are @code{nil}.

It is possible to continue searching down the property list by using
@code{cddr} of the third value as the argument to another call to
@code{get-properties}.
@end defmac

@section  Hash Tables
@cindex hash table

A hash table is a Lisp object that works something like a property
list.  Each hash table has a set of @i{entries}, each of which
associates a particular @i{key} with a particular @i{value} (or
sequence of values).  The basic functions that deal with hash tables
can create entries, delete entries, and find the value that is
associated with a given key.  Finding the value is very fast even if
there are many entries, because hashing is used; this is an important
advantage of hash tables over property lists.  Hashing is explained in
(hash-section).

A given hash table stores a fixed number of values for each key;
by default, there is only one value.  Each time you specify a new
value or sequence of values, the old one(s) are lost.

There are three standard kinds of hash tables, which differ in how
they compare keys: with @code{eq}, with @code{eql} or with @code{equal}.  In
other words, there are hash tables which hash on Lisp @i{objects}
(using @code{eq} or @code{eql}) and there are hash tables which hash on
trees (using @code{equal}).

You can also create a nonstandard hash table with any comparison
function you like, as long as you also provide a suitable hash
function.  Any two objects which would be regarded as the same by the
comparison function should produce the same hash code under the hash
function.  See the @code{:compare-function} and @code{:hash-function}
keywords under @code{make-hash-table}, below.

The following discussion refers to the @code{eq} kind of hash table; the
other kinds are described later, and work analogously.

@code{eq} hash tables are created with the function @code{make-hash-table}, which
takes various options.  New entries are added to hash tables with the
@code{puthash} function.  To look up a key and find the associated value(s),
the @code{gethash} function is used.  To remove an entry, use @code{remhash}.
Here is a simple example.

@lisp
(setq a (make-hash-table))

(puthash 'color 'brown a)
(puthash 'name 'fred a)

(gethash 'color a) => brown
(gethash 'name a) => fred
@end lisp

In this example, the symbols @code{color} and @code{name} are being used as
keys, and the symbols @code{brown} and @code{fred} are being used as the
associated values.  The hash table remembers one value for each key,
since we did not specify otherwise, and has two items in it, one of
which associates from @code{color} to @code{brown}, and the other of which
associates from @code{name} to @code{fred}.

Keys do not have to be symbols; they can be any Lisp object.  Likewise
values can be any Lisp object.  Since @code{eq} does not work reliably on
numbers (except for fixnums), they should not be used as keys in an
@code{eq} hash table.  Use an @code{eql} hash table if you want to hash on
numeric values.

When a hash table is first created, it has a @i{size}, which is the
number of entries it has room for.  But hash tables which are nearly
full become slow to search, so if more than a certain fraction of the
entries become in use, the hash table is automatically made larger,
and the entries are @i{rehashed} (new hash values are recomputed, and
everything is rearranged so that the fast hash lookup still works).
This is transparent to the caller; it all happens automatically.

The @code{describe} function (see (describe-fun)) prints a variety of
useful information when applied to a hash table.

This hash table facility is similar to the hasharray facility of Interlisp,
and some of the function names are the same.  However, it is @i{not} compatible.
The exact details and the order of arguments are designed to be consistent
with the rest of Zetalisp rather than with Interlisp.  For instance,
the order of arguments to @code{maphash} is different, we do not have the Interlisp
``system hash table'', and we do not have the
Interlisp restriction that keys and values may not be @code{nil}.  
Note, however, that the order of arguments to @code{gethash}, @code{puthash}, and @code{remhash}
is not consistent with the Zetalisp's @code{get}, @code{putprop}, and @code{remprop},
either.  This is an unfortunate result of the haphazard historical development of Lisp.

Hash tables are implemented as instances of the flavor @code{hash-table}.
The internals of a hash table are subject to change without notice.
Hash tables should be manipulated only with the functions and operations described below.

@subsection Hash Table Functions

@defun make-hash-table &rest options
@defunx make-equal-hash-table &rest options
These functions create new hash tables.  @code{make-equal-hash-table}
creates an @code{equal} hash table.  @code{make-hash-table} normally creates
an @code{eq} hash table, but this can be overridden by keywords as
described below.  Valid option keywords are:
@table @code
@item :size
Sets the initial size of the hash table, in entries, as a fixnum.  The
default is 64.  The actual size is rounded up from the size you
specify to the next size that is good for the hashing algorithm.  The
number of entries you can actually store in the hash table before it is
rehashed is at least the actual size times the rehash threshold (see below).

@item :test
This keyword is the Common Lisp way to specify the kind of hashing
desired.  The value must be @code{eq}, @code{eql} or @code{equal}.  The one
specified is used as the compare function and an appropriate hash
function is chosen automatically to go with it.

@item :compare-function
Specifies a function of two arguments which compares two keys to see if
they count as the same for retrieval from this table.  For reasonable
results, this function should be an equivalence relation.  The default is
@code{eq}.  For @code{make-equal-hash-table} the default is @code{equal}; that is
the only difference between that function and @code{make-hash-table}.

@item :hash-function
Specifies a function of one argument which, given a key, computes its hash code.
The hash code may be any Lisp object.  The purpose of the hash function
is to map equivalent keys into identical objects: if two keys would
cause the compare function to return non-@code{nil}, the hash function must
produce identical (@code{eq}) hash codes for them.

For an @code{eq} hash table, the key itself is a suitable hash code, so
no hash function is needed.  Then this option's value should be
@code{nil} (@code{identity} would also work, but slower).  @code{nil} is the
default in @code{make-hash-table}.  @code{make-equal-hash-table}
specifies an appropriate function which uses @code{sxhash}.

@item :number-of-values
A positive integer which specifies how many values to associate with
each key.  The default is one.

@item :area
Specifies the area in which the hash table should be created.  This is
just like the @code{:area} option to @code{make-array} (see (make-array-fun)).
Defaults to @code{nil} (i.e. @code{default-cons-area}).

@item :rehash-function
Specifies the function to be used for rehashing when the table becomes
full.  Defaults to the internal rehashing function that does the usual
thing.  If you want to write your own rehashing function, you must
know all the internals of how hash tables work.  These
internals are not documented here, as the best way to learn them is
to read the source code.

@item :rehash-size
Specifies how much to increase the size of the hash table when it becomes
full.  This can be a fixnum which is the number of entries to add, or
it can be a float which is the ratio of the new size to the old size.
The default is @code{1.3}, which causes the table to be made 30% bigger
each time it has to grow.

@item :rehash-threshold
Sets a maximum fraction of the entries which can be in use before the
hash table is made larger and rehashed.  The default is @code{0.7s0}.
Alternately, an integer may be specified.  It is the exact number of
filled entries at which a rehash should be done.  When the rehash
happens, if the threshold is an integer it is increased in the same
proportion as the table has grown.

@item :rehash-before-cold
If non-@code{nil}, this hash table should be rehashed (if that is necessary
due to garbage collection) by @code{disk-save}.  This avoids a delay
for rehashing the hash table the first time it is referenced after
booting the saved band.

@item :actual-size
Specifies exactly the size for the hash table.  Hash tables used by
the microcode for flavor method lookup must be a power of two in size.
This differs from @code{:size} in that @code{:size} is rounded up to a
nearly prime number, but @code{:actual-size} is used exactly as
specified.  @code{:actual-size} overrides @code{:size.}
@end table
@end defun

@defun hash-table-p object
@code{t} if @i{object} is a hash table.
@lisp
(hash-table-p @i{object})
@exdent is equivalent to
(typep @i{object} 'hash-table)
@end lisp
@end defun

@noindent
The following functions are equivalent to sending appropriate
messages to the hash table.

@defun gethash key hash-table &optional default-value
Finds the entry in @i{hash-table} whose key is @i{key}, and return the
associated value.  If there is no such entry, returns @i{default-value}.
Returns also a second value, which is @code{t} if an entry was found or
@code{nil} if there is no entry for @i{key} in this table.

Returns also a third value, a list which overlays the hash table
entry.  Its car is the key; the remaining elements are the values in
the entry.  This is how you can access values other than the first, if
the hash table contains more than one value per entry.
@end defun

@defun puthash key value hash-table &rest extra-values
Creates an entry associating @i{key} to @i{value}; if there is already an
entry for @i{key}, then replace the value of that entry with @i{value}.
Returns @i{value}.  The hash table automatically grows if necessary.

If the hash table associates more than one value with each key, the
remaining values in the entry are taken from @i{extra-values}.
@end defun

@defun remhash key hash-table
Removes any entry for @i{key} in @i{hash-table}.  Returns @code{t} if there was an
entry or @code{nil} if there was not.
@end defun

@defun swaphash key value hash-table &rest extra-values
This specifies new value(s) for @i{key} like @code{puthash}, but returns
values describing the previous state of the entry, just like
@code{gethash}.  It returns the previous (replaced)
associated value as the first value, and returns @code{t} as the second value
if the entry existed previously.
@end defun

@defun maphash function hash-table &rest extra-args
For each occupied entry in @i{hash-table}, call @i{function}.  The
arguments passed to @i{function} are the key of the entry, the value(s)
of the entry (however many there are), and the @i{extra-args} (however
many there are).

If the hash table has more than one value per key, all the values, in
order, are supplied as successive arguments.
@end defun

@defun maphash-return function hash-table
Like @code{maphash}, but accumulates and returns a list of all the
values returned by @i{function} when it is applied to the items in
the hash table.
@end defun

@defun clrhash hash-table
Removes all the entries from @i{hash-table}.  Returns the hash table itself.
@end defun

@defun hash-table-count hash-table
Returns the number of filled entries in hash-table.
@end defun

@subsection Hash Table Operations

Hash tables are instances, and support the following operations:

@defmethod hash-table :size
Returns the number of entries in the hash table.
Note that the hash table is rehashed when only a fraction of this many
(the rehash threshold) are full.
@end defmethod

@defmethod hash-table :filled-entries
Returns the number of entries that are currently occupied.
@end defmethod

@defmethod hash-table :get-hash key
@defmethodx hash-table :put-hash key &rest values
@defmethodx hash-table :swap-hash key &rest values
@defmethodx hash-table :rem-hash key
@defmethodx hash-table :map-hash function &rest extra-args
@defmethodx hash-table :map-hash-return function
@defmethodx hash-table :clear-hash
@defmethodx hash-table :filled-entries
Are equivalent to the functions @code{gethash}, @code{puthash}, @code{swaphash},
@code{remhash}, @code{maphash}, @code{maphash-return}, @code{clrhash} and
@code{hash-table-count} except that the hash table need not be specified as
an argument because it is the object that receives the message.  Those
functions (documented in the previous section) actually work by invoking
these operations.
@end defmethod

@defmethod hash-table :modify-hash key function &rest additional-args
Passes the value associated with @i{key} in the table to @i{function};
whatever @i{function} returns is stored in the table as the new value for @i{key}.
Thus, the hash association for
@i{key} is both examined and updated according to @i{function}.

The arguments passed to @i{function} are @i{key}, the value associated with @i{key},
a flag (@code{t} if @i{key} is actually found in the hash table), and the
@i{additional-args} that you specify.

If the hash table stores more than one value per key, only the first
value is examined and updated.
@end defmethod

@subsection Hash Tables and the Garbage Collector

The @code{eq} type hash tables actually hash on the address of the
representation of the object.  @code{equal} hash tables do so too, if given
keys containing unusual objects (other than symbols, numbers, strings
and lists of the above).  When the copying garbage collector changes the
addresses of objects, it lets the hash facility know so that the next @code{gethash}
will rehash the table based on the new object addresses.

There may eventually be an option to @code{make-hash-table} which tells it
to make a ``non-GC-protecting'' hash table.  This is a special kind of hash table
with the property that if one of its keys becomes garbage, i.e. is an object
not known about by anything other than the hash table, then the entry for that
key will be removed silently from the table.  When this option exists it will be
documented in this section.

@subsection Hash Primitive

@i{Hashing} is a technique used in algorithms to provide fast retrieval
of data in large tables.  A function, known as the @i{hash function},
takes an object that might be used as a key, and produces
a number associated with that key.  This number, or some function of it,
can be used to specify where in a table to look for the datum associated
with the key.  It is always possible for two different objects to hash
to the same value; that is, for the hash function to return the same
number for two distinct objects.  Good hash functions are designed to minimize
this by evenly distributing their results over the range of possible numbers.
However, hash table algorithms must still deal with
this problem by providing a secondary search, sometimes known as a
@i{rehash}.  For more information, consult a
textbook on computer algorithms.

@defun sxhash tree &optional ok-to-use-address
@cindex "hash table"
@code{sxhash} computes a hash code of a tree, and returns it as a fixnum.
A property of @code{sxhash} is that @code{(equal @i{x y})} always implies
@code{(= (sxhash @i{x}) (sxhash @i{y}))}.  The number returned by @code{sxhash} is
always a non-negative fixnu.  @code{sxhash} tries to
compute its hash code in such a way that common permutations of an object,
such as interchanging two elements of a list or changing one character in
a string, always change the hash code.

Here is an example of how to use @code{sxhash} in maintaining
hash tables of trees:
@lisp
(defun knownp (x &aux i bkt)    ;1look up @code{x} in the table*
    (setq i (abs (remainder (sxhash x) 176)))
      ;The remainder should be reasonably randomized.
    (setq bkt (aref table i))
      ;bkt is thus a list of all those expressions that
      ;hash into the same number as does x.
    (memq x bkt))
@end lisp

For an ``intern'' for trees, one could write:
@lisp
(defun sintern (x &aux bkt i tem)
    (setq i (abs (remainder (sxhash x) 2n-1)))
	;2n-1 stands for a power of 2 minus one.
	;This is a good choice to randomize the
	;result of the remainder operation.
    (setq bkt (aref table i))
    (cond ((setq tem (memq x bkt))
	   (car tem))
	  (t (aset (cons x bkt) table i)
	     x)))
@end lisp
@end defun

If @code{sxhash} is given a named structure or a flavor instance, or if
such an object
is part of a tree that is @code{sxhash}'ed, it asks the object to supply
its own hash code by performing the @code{:sxhash} operation if the object
supports it.  This should return a suitable nonnegative hash code.  The
easiest way to compute one is usually by applying @code{sxhash} to one or
more of the components of the structure or the instance variables of the
instance.

For named structures and flavor instances that do not handle the
@code{:sxhash} operation, and other unusual kinds of objects,
@code{sxhash} can optionally use the object's address as its hash code,
if you specify a non-@code{nil} second argument.  If you use this
option, you must be prepared to deal with hash codes changing due to
garbage collection.

@code{sxhash} provides what is called ``hashing on @code{equal}''; that is, two
objects that are @code{equal} are considered to be ``the same'' by
@code{sxhash}.  If two strings differ only in alphabetic case,
@code{sxhash} returns the same thing for both of them, making it
suitable for @code{equalp} hashing as well in some cases.

Therefore, @code{sxhash} is useful for retrieving data when
two keys that are not the same object but are @code{equal} are considered
the same.  If you consider two such keys to be different, then you need
``hashing on @code{eq}'', where two different objects are always considered
different.  In some Lisp implementations, there is an easy way to create
a hash function that hashes on @code{eq}, namely, by returning the virtual
address of the storage associated with the object.  But in other
implementations, of which Zetalisp is one, this doesn't work,
because the address associated with an object can be changed by the
relocating garbage collector.  The hash tables created by @code{make-hash-table}
deal with this problem by using the appropriate subprimitives so that they
interface correctly with the garbage collector.  If you need a hash table
that hashes on @code{eq}, it is already provided; if you need an
@code{eq} hash function for some other reason, you must build it yourself,
either using the provided @code{eq} hash table facility or carefully using
subprimitives.

@section  Resources
@cindex resource
@cindex allocation of storage
@cindex storage allocation

Storage allocation is handled differently by different computer
systems.  In many languages, the programmer must spend a lot of time
thinking about when variables and storage units are allocated and
deallocated.  In Lisp, freeing of allocated storage is normally done
automatically by the Lisp system; when an object is no longer
accessible to the Lisp environment, the garbage collector reuses its
storage for some other object.  This relieves the programmer of a
great burden, and makes writing programs much easier.

However, automatic freeing of storage incurs an expense: more computer
resources must be devoted to the garbage collector.  If a program is
designed to allocate temporary storage, which is then left as garbage,
more of the computer must be devoted to the collection of garbage; this
expense can be high.  In some cases, the programmer may decide that it
is worth putting up with the inconvenience of having to free storage
under program control, rather than letting the system do it
automatically, in order to prevent a great deal of overhead from the
garbage collector.

It usually is not worth worrying about freeing of storage when the units
of storage are very small things such as conses or small arrays.
Numbers are not a problem, either; fixnums and short floats do not occupy
storage, and the system has a special way of garbage-collecting the
other kinds of numbers with low overhead.  But when a program allocates and
then gives up very large objects at a high rate (or large objects at a
very high rate), it can be worthwhile to keep track of that one
kind of object manually.  Within the Lisp Machine system, there
are several programs that are in this position.  The Chaosnet software
allocates and frees ``packets'', which are moderately large, at a very
high rate.  The window system allocates and frees certain kinds of
windows, which are very large, moderately often.  Both of these programs
manage their objects manually, keeping track of when they are no longer
used.

When we say that a program ``manually frees'' storage, it does not really
mean that the storage is freed in the same sense that the garbage
collector frees storage.  Instead, a list of unused objects is kept.
When a new object is desired, the program first looks on the list to see
if there is one around already, and if there is it uses it.  Only if the
list is empty does it actually allocate a new one.  When the program is
finished with the object, it returns it to this list.

The functions and special forms in this section perform the above
function.  The set of objects forming each such list is called a
@i{resource}; for example, there might be a Chaosnet packet resource.
@code{defresource} defines a new resource; @code{allocate-resource} allocates
one of the objects; @code{deallocate-resource} frees one of the objects
(putting it back on the list); and @code{using-resource} temporarily
allocates an object and then frees it.

@subsection Defining Resources

@defmac defresource
The @code{defresource} special form is used to define a new resource.  The
form looks like this:
@lisp
(defresource @i{name} @i{parameters}
   @i{doc-string}
   @i{keyword} @i{value}
   @i{keyword} @i{value}
   ...)
@end lisp

@i{name} should be a symbol; it is the name of the resource and gets a
@code{defresource} property of the internal data structure representing the resource.

@i{parameters} is a lambda-list giving names and default values (if @code{&optional}
is used) of parameters to an object of this type.  For example, if one had a resource
of two-dimensional arrays to be used as temporary storage in a calculation, the
resource would typically have two parameters, the number of rows and the number of
columns.  In the simplest case @i{parameters} is @code{()}.

The documentation string is recorded for @code{(documentation @i{name} 'resource)} to access.  It may be omitted.

The keyword options control how the objects of the resource are made and kept
track of.  The following keywords are allowed:
@table @code
@item :constructor
The @i{value} is either a form or the name of a function.  It is
responsible for making an object, and will be used when someone tries to
allocate an object from the resource and no suitable free objects exist.
If the @i{value} is a form, it may access the parameters as variables.
If it is a function, it is given the internal data structure for the resource
and any supplied parameters as its arguments; it will need to default any
unsupplied optional parameters.  This keyword is required.

@item :free-list-size
The @i{value} is the number of objects which the resource data
structure should have room, initially, to remember.  This is not a
hard limit, since the data structure will be made bigger if necessary.

@item :initial-copies
The @i{value} is a number (or @code{nil} which means 0).  This many objects will
be made as part of the evaluation of the @code{defresource}; thus is useful to
set up a pool of free objects during loading of a program.  The default is
to make no initial copies.

If initial copies are made and there are @i{parameters}, all the parameters must
be @code{&optional} and the initial copies will have the default values of the
parameters.

@item :initializer
The @i{value} is a form or a function as with @code{:constructor}.  In
addition to the parameters, a form here may access the variable
@code{object} (in the current package).  A function gets the object as
its second argument, after the data structure and before the
parameters.  The purpose of the initializer function or form is to
clean up the contents of the object before each use.  It is called or
evaluated each time an object is allocated, whether just constructed
or being reused.

@item :finder
The @i{value} is a form or a function as with @code{:constructor} and sees the
same arguments.  If this option is specified, the resource system does not keep
track of the objects.  Instead, the finder must do so.  It will be called
inside a @code{without-interrupts} and must find a usable object somehow and return it.

@item :matcher
The @i{value} is a form or a function as with @code{:constructor}.  In addition to
the parameters, a form here may access the variable @code{object} (in the current package).
A function gets the object as its second argument, after the data structure and
before the parameters.  The job of the matcher is to make sure that the object
matches the specified parameters.  If no matcher is supplied, the system will remember
the values of the parameters (including optional ones that defaulted) that were used
to construct the object, and will assume that it matches those particular values for
all time.  The comparison is done with @code{equal} (not @code{eq}).  The matcher is
called inside a @code{without-interrupts}.

@item :checker
The job of the checker is to determine whether the object is safe to allocate.
The @i{value} is a form or a function, as above.  In addition to the
parameters, a form here may access the variables @code{object} and @code{in-use-p}
(in the current package).  A function receives these as its second and third
arguments, after the data structure and before the parameters.  If no checker
is supplied, the default checker looks only at @code{in-use-p}; if the object has
been allocated and not freed it is not safe to allocate, otherwise it is.  The
checker is called inside a @code{without-interrupts}.

@end table
If these options are used with forms (rather than functions), the forms
get compiled into functions as part of the expansion of @code{defresource}.
The functions, whether user-provided or generated from forms, are given
names like @code{(:property @i{resource-name} si:resource-constructor)};
these names are not guaranteed not to change in the future.

Most of the options are not used in typical cases.  Here is an example:
@lisp
(defresource two-dimensional-array (rows columns)
	:constructor (make-array (list rows columns)))
@end lisp

Suppose the array was usually going to be 100 by 100, and you wanted to preallocate
one during loading of the program so that the first time you needed an array you
wouldn't have to spend the time to create one.  You might simply put
@lisp
(using-resource (foo two-dimensional-array 100 100)
	)
@end lisp
after your @code{defresource}, which would allocate a 100 by 100 array and then
immediately free it.  Alternatively you could write:
@lisp
(defresource two-dimensional-array
			(&optional (rows 100) (columns 100))
	:constructor (make-array (list rows columns))
	:initial-copies 1)
@end lisp

Here is an example of how you might use the @code{:matcher} option.  Suppose you wanted
to have a resource of two-dimensional arrays, as above, except that when you allocate
one you don't care about the exact size, as long as it is big enough.  Furthermore
you realize that you are going to have a lot of different sizes and if you always
allocated one of exactly the right size, you would allocate a lot of different arrays
and would not reuse a pre-existing array very often.  So you might write:
@lisp
(defresource sloppy-two-dimensional-array (rows columns)
    :constructor (make-array (list rows columns))
    :matcher (and ( (array-dimension-n 1 object) rows)
		  ( (array-dimension-n 2 object) columns)))
@end lisp
@end defmac

@subsection Allocating Resource Objects

@defun allocate-resource resource-name &rest parameters
Allocates an object from the resource specified by @i{resource-name}.  The various forms
and/or functions given as options to @code{defresource}, together with any
@i{parameters} given to @code{allocate-resource}, control how a suitable object
is found and whether a new one has to be constructed or an old one can be reused.

Note that the @code{using-resource} special form is usually what you want to
use, rather than @code{allocate-resource} itself; see below.
@end defun

@defun deallocate-resource resource-name resource-object
Frees the object @i{resource-object}, returning it to the free-object
list of the resource specified by @i{resource-name}.
@end defun

@defmac using-resource (variable resource parameters...) body...
The @i{body} forms are evaluated sequentially with @i{variable} bound to an
object allocated from the resource named @i{resource}, using the given @i{parameters}.
The @i{parameters} (if any) are evaluated, but @i{resource} is not.

@code{using-resource} is often more convenient than calling
@code{allocate-resource} and @code{deallocate-resource}.
Furthermore it is careful to free the object when the body is exited,
whether it returns normally or via @code{throw}.  This is done by using
@code{unwind-protect}; see (unwind-protect-fun).
@end defmac

@lisp
@exdent Here is an example of the use of resources:
(defresource huge-16b-array (&optional (size 1000))
  :constructor (make-array size :type 'art-16b))

(defun do-complex-computation (x y)
  (using-resource (temp-array huge-16b-array)
    ...                               ;1Within the body, the array can be used.*
    (aset 5 temp-array i)
    ...))                             ;1The array is deallocated at the end.*
@end lisp

@defun deallocate-whole-resource resource-name
Frees all objects in @i{resource-name}.  This is like doing
@code{deallocate-resource} on each one individually.  This function is
often useful in warm-boot initializations.
@end defun

@defun map-resource function resource-name &rest extra-args
Calls function on each object created in @i{resource-name}.  Each time
function is called, it receives three fixed arguments, plus whatever
@i{extra-args} were specified.  The three fixed arguments are an object
of the resource; @code{t} if the object is currently allocated (``in use'');
and the resource data structure itself.
@end defun

@defun clear-resource resource-name
Forgets all of the objects being remembered by the resource specified by @i{resource-name}.
Future calls to @code{allocate-resource} will create new objects.  This function is
useful if something about the resource has been changed incompatibly, such that the
old objects are no longer usable.  If an object of the resource is in use when
@code{clear-resource} is called, an error will be signaled when that object is
deallocated.
@end defun

@subsection Accessing the Resource Data Structure

The constructor, initializer, matcher and checker functions receive
the internal resource data structure as an argument.  This is a named
structure array whose elements record the objects both free and
allocated, and whose array leader contains sundry other information.
This structure should be accessed using the following primitives:

@defun si:resource-object resource-structure index
Returns the @i{index}'th object remembered by the resource.
Both free and allocated objects are remembered.
@end defun

@defun si:resource-in-use-p resource-structure index
Returns @code{t} if the @i{index}'th object remembered by the
resource has been allocated and not deallocated.
Simply defined resources will not reallocate an object in this state.
@end defun

@defun si:resource-parameters resource-structure index
Returns the list of parameters from which the @i{index}'th object
was originally created.
@end defun

@defun si:resource-n-objects resource-structure
Returns the number of objects currently remembered by the resource.
This will include all objects ever constructed, unless
@code{clear-resource} has been used.
@end defun

@defun si:resource-parametizer resource-structure
Returns a function, created by @code{defresource}, which accepts the
supplied parameters as arguments, and returns a complete list of
parameter values, including defaults for the optional ones.
@end defun

@subsection Fast Pseudo-Resources

When small temporary data structures are allocated so often that they
amount to a considerable drain of storage space, an ordinary resource
may be unacceptably slow.  Here is a simple technique that
provides in such cases nearly all the benefit of a resource while
costing nearly nothing.  The function @code{read} uses it to allocate a
buffer for reading tokens of input.

@lisp
(defvar buffer-for-reuse nil)

(defsubst get-buffer ()
  (or (do (old)
	  ((%store-conditional (locf buffer-for-reuse)
			       (setq old buffer-for-reuse)
			       nil)
	   old))
      (construct-new-buffer))))

(defsubst free-buffer (buffer)
  (setq buffer-for-reuse buffer))
@end lisp

To allocate a buffer for use, do @code{(get-buffer)}.
To free it when you are done with it, call @code{free-buffer}.
It is assumed that @code{construct-new-buffer} is the function
which can create a new buffer when there is none available for
reuse.

This technique keeps track of at most one buffer which has been freed
and may be reused.  It is not effective in this simple form when more
than one buffer is needed at any given time by one application.
In the case of @code{read}, only one token is being read in at any time.

It is safe for more than one process to call @code{read} because
@code{get-buffer} is designed to guarantee that a request cannot get a
buffer already handed out and not freed.  Likewise, nothing terrible
happens if there is an error inside @code{read} and @code{read} is called
recursively within the debugger.  The only problem is that multiple
buffers will be allocated, which means that some of them will be lost.
But the cost of this is minor in the cases where this technique
is applicable.  For example, if two processes are reading files,
process switching will probably happen a few times a second, each time
costing one buffer not reused.  This is insignificant compared to the
storage used up for other purposes by reading large amounts of data.

@chapter Symbols
@cindex symbol

This chapter discusses the symbol as a Lisp data type.  The Lisp system uses
symbols as variables and function names, but these applications of symbols
are discussed in chapter (evaluator-chapter).

@section  The Value Cell
@cindex value cell
	Each symbol has associated with it a @i{value cell}, which refers to
one Lisp object.  This object is called the symbol's @i{value}, since it is
what you get when you evaluate the symbol as a dynamic variable in a program.
Variables and how they work are described in (variable-section).  We also say
the the symbol @i{is bound to} the object which is its value.  The symbols
@code{nil} and @code{t} are always bound to themselves; they may not be assigned,
bound, or otherwise used as variables.  The same is true of symbols in the
keyword package.

	The value cell can also be @i{void}, referring to @i{no} Lisp object,
in which case the symbol is said to be void or @i{unbound}.  This is the
initial state of a symbol when it is created.  An attempt to evaluate a
void symbol causes an error.

Lexical variable bindings are not stored in symbol value cells.
The functions in this section have no interaction with lexical bindings.

@defun symeval symbol
@defunx symbol-value symbol
@code{symeval} is the basic primitive for retrieving a symbol's value.
@code{(symeval @i{symbol})} returns @i{symbol}'s current binding.
This is the function called by @code{eval} when it is given a symbol to
evaluate.  If the symbol is unbound, then @code{symeval} signals an
error.  @code{symbol-value} is the Common Lisp name for this function.
@end defun

@defun set symbol value
@code{set} is the primitive for assignment of symbols.  The @i{symbol}'s value
is changed to @i{value}; @i{value} may be any Lisp object.  @code{set} returns
@i{value}.
@lisp
@exdent Example:
(set (cond ((eq a b) 'c)
           (t 'd))
     'foo)
@end lisp
either sets @code{c} to @code{foo} or sets @code{d} to @code{foo}.

@code{(setf (symeval @i{symbol}) @i{value})} is a more modern
way to do this.
@end defun

@defun boundp symbol
@code{t} if @i{symbol}'s value cell is not void.
@end defun

@defun makunbound symbol
Makes @i{symbol}'s value cell void.
@lisp
@exdent Example:
(setq a 1)
a => 1
(makunbound 'a)
a => 1causes an error.*
@end lisp
@code{makunbound} returns its argument.
@end defun

@defun value-cell-location symbol
Returns a locative pointer to @i{symbol}'s value cell.
See the section on locatives ((locative)).  It is preferable to write
@lisp
(locf (symeval @i{symbol}))
@end lisp
which is equivalent, instead of calling this function explicitly.

This is actually the internal value cell; there can also be an external
value cell.  For details, see the section on closures ((closure)).

For historical compatibility, @code{value-cell-location} of a quoted symbol is
recognized specially by the compiler and treated like @code{variable-location}
((variable-location-fun)).  However, such usage results in a compiler warning,
and eventually this compatibility feature will be removed.
@end defun

@section  The Function Cell
@cindex function cell
	Every symbol also has associated with it a @i{function cell}.  The @i{function}
cell is similar to the @i{value} cell; it refers to a Lisp object.
When a function is referred to by name, that is, when a symbol is passed to @code{apply}
or appears as the car of a form to be evaluated, that symbol's function cell
is used to find its @i{definition}, the functional object which is to be applied.
For example, when evaluating @code{(+ 5 6)}, 
the evaluator looks in @code{+}'s function cell to find the definition of @code{+},
in this case a compiled function object, to apply to 5 and 6.

	Maclisp does not have function cells; instead, it looks for special
properties on the property list.  This is one of the major incompatibilities
between the two dialects.

	Like the value cell, a function cell can be void, and it can be bound
or assigned.  (However, to bind a function cell you must use the
@code{%bind} subprimitive; see (%bind-fun).)
The following functions are analogous to the value-cell-related
functions in the previous section.

@defun fsymeval symbol
@defunx symbol-function symbol
Returns @i{symbol}'s definition, the contents of its
function cell.  If the function cell is void, @code{fsymeval}
signals an error.  @code{symbol-function} is the Common Lisp name for this function.
@end defun

@defun fset symbol definition
Stores @i{definition}, which may be any Lisp object, into @i{symbol}'s
function cell.  It returns @i{definition}.

@code{(setf (fsymeval @i{symbol}) @i{definition})} is a more modern
way to do this.
@end defun

@defun fboundp symbol
@code{nil} if @i{symbol}'s function cell is void,
i.e. if @i{symbol} is undefined.
Otherwise it returns @code{t}.
@end defun

@defun fmakunbound symbol
Causes @i{symbol} to be undefined, i.e. its
function cell to be void.
It returns @i{symbol}.
@end defun

@defun function-cell-location symbol
Returns a locative pointer to @i{symbol}'s
function cell.  See the section on locatives ((locative)).  It is
preferable to write
@lisp
(locf (fsymeval @i{symbol}))
@end lisp
rather than calling this function explicitly.
@end defun

Since functions are the basic building block of Lisp programs,
the system provides a variety of facilities for dealing with functions.
Refer to chapter (function-chapter) for details.

@section  The Property List

Every symbol has an associated property list.  See (plist) for
documentation of property lists.  When a symbol is created, its property
list is initially empty.

The Lisp language itself does not use a symbol's property list for
anything.  (This was not true in older Lisp implementations, where the
print-name, value-cell, and function-cell of a symbol were kept on its
property list.)  However, various system programs use the property list to
associate information with the symbol.  For instance, the editor uses
the property list of a symbol which is the name of a function to
remember where it has the source code for that function, and the
compiler uses the property list of a symbol which is the name of a
special form to remember how to compile that special form.

Because of the existence of print-name, value, function, and package cells,
none of the Maclisp system property names (@code{expr}, @code{fexpr}, @code{macro}, @code{array},
@code{subr}, @code{lsubr}, @code{fsubr}, and in former times @code{value} and
@code{pname}) exist in Zetalisp.

@defun plist symbol
@defunx symbol-plist
Returns the list which represents the property list of @i{symbol}.
Note that this is not actually a property list; you cannot do @code{get}
on it.  This value is like what would be the cdr of a property list.

@code{symbol-plist} is the Common Lisp name.
@end defun

@defun setplist symbol list
Sets the list which represents the property list of @i{symbol} to @i{list}.
@code{setplist} is to be used with caution (or not at all),
since property lists sometimes contain internal system properties, which
are used by many useful system functions.  Also it is inadvisable to have the property
lists of two different symbols be @code{eq}, since the shared list structure will
cause unexpected effects on one symbol if @code{putprop} or @code{remprop} is done to the other.

@code{setplist} is equivalent to
@lisp
(setf (plist @i{symbol}) @i{list})
@end lisp
@end defun

@defun property-cell-location symbol
Returns a locative pointer to the location of @i{symbol}'s
property-list cell.  This locative pointer may be passed to @code{get} or
@code{putprop} with the same results as if as @i{symbol} itself had been
passed.  It is preferable to write
@lisp
(locf (plist @i{symbol}))
@end lisp
rather than using this function.
@end defun

@section  The Print Name
@cindex print name
Every symbol has an associated string called the @i{print-name}, or @i{pname}
for short.  This string is used as the external representation of the symbol:
if the string is typed in to @code{read}, it is read as a reference to that symbol
(if it is interned), and if the symbol is printed, @code{print} types out the
print-name.

If a symbol is uninterned, 7#:* is normally printed as a prefix
before the symbol's print-name.  If the symbol is interned, a package
prefix may be printed, depending on the current package and how it relates
to the symbol's home package.

For more information, see the sections on the @i{reader}
(see (reader)), @i{printer} (see (printer)), and packages
(see (package)).

@defun symbol-name symbol
@defunx get-pname symbol
Returns the print-name of the symbol @i{symbol}.
@lisp
@exdent Example:
(symbol-name 'xyz) => "XYZ"
@end lisp
@code{get-pname} is an older name for this function.
@end defun

@section  The Package Cell

Every symbol has a @i{package cell} which, for interned
symbols, is used to point to the package which the symbol belongs to.  For an
uninterned symbol, the package cell contains @code{nil}.  For
information about packages in general, see the chapter on packages, (package).
For information about package cells, see (symbol-package-cell-discussion).

@section  Creating Symbols

The functions in this section are primitives for creating symbols.
However, before discussing them, it is important to point out that most
symbols are created by a higher-level mechanism, namely the reader and
the @code{intern} function.  Nearly all symbols in Lisp are created
by virtue of the reader's having seen a sequence of input characters that
looked like the printed representation (p.r.) of a symbol.  When the
reader sees such a p.r., it calls @code{intern} (see (intern-fun)),
which looks up the sequence of characters in a big table and sees whether any symbol
with this print-name already exists.  If it does, @code{read} uses the
already-existing symbol.  If it does not, then @code{intern} creates a new
symbol and puts it into the table; @code{read} uses that new symbol.

A symbol that has been put into such a table is called an @i{interned}
symbol.  Interned symbols are normally created automatically; the first
time that someone (such as the reader) asks for a symbol with a given
print-name, that symbol is automatically created.

These tables are called @i{packages}.  For more information, turn
to the chapter on packages ((package)).

@cindex uninterned symbol
An @i{uninterned} symbol is a symbol that has not been recorded
or looked up in a package.  It is used simply as a data object,
with no special cataloging.  An uninterned symbol prints with a
prefix 7#:* when escaping is in use, unless @code{*print-gensym*} is @code{nil}.
This allows uninterned symbols to be distinguishable and to read back in as
uninterned symbols.  See (*print-gensym*-var).

The following functions can be used to create uninterned symbols
explicitly.

@defun make-symbol pname &optional permanent-p
Creates a new uninterned symbol, whose print-name is the string
@i{pname}.  The value and function cells are void and the
property list is empty.  If @i{permanent-p} is specified, it is
assumed that the symbol is going to be interned and probably kept around
forever; in this case it and its pname are put in the proper areas.
If @i{permanent-p} is @code{nil} (the default), the symbol goes in the
default area and the pname is not copied.  @i{permanent-p} is mostly
for the use of @code{intern} itself.
@lisp
@exdent Examples:
(setq a (make-symbol "foo")) => foo
(symeval a) => ERROR!
@end lisp
Note that the symbol is @i{not} interned; it is simply created and returned.
@end defun

@defun copysymbol symbol copy-props
@defunx copy-symbol symbol copy-props
Returns a new uninterned symbol with the same print-name
as @i{symbol}.  If @i{copy-props} is non-@code{nil}, then the
value and function-definition of the new symbol are
the same as those of @i{symbol}, and the property list of
the new symbol is a copy of @i{symbol}'s.  If @i{copy-props}
is @code{nil}, then the new symbol's function and value are void, and
its property list is empty.
@end defun

@defun gensym &optional x
Invents a print-name and creates a new symbol with that print-name.
It returns the new, uninterned symbol.

	The invented print-name is a prefix (the value of @code{si:*gensym-prefix})
followed by the decimal representation of a number (the value of @code{si:*gensym-counter}),
e.g. @code{g0001}.  The number is increased by one every time @code{gensym} is called.

	If the argument @i{x} is present and is a fixnum, then @code{si:*gensym-counter} is
set to @i{x}.  If @i{x} is a string or a symbol, then @code{si:*gensym-prefix} is set to it,
so it becomes the prefix for this and successive calls to @code{gensym}.
After handling the argument, @code{gensym} creates a symbol as it would with no argument.
@lisp
@exdent Examples:
1if*	(gensym) => #:g0007
1then*	(gensym 'foo) => #:foo0008
	(gensym 32.) => #:foo0032
	(gensym) => #:foo0033
@end lisp
	Note that the number is in decimal and always has four digits.
7#:* is the prefix normally printed before uninterned symbols.

	@code{gensym} is usually used to create a symbol which should not normally
be seen by the user, and whose print-name is unimportant, except to
allow easy distinction by eye between two such symbols.
The optional argument is rarely supplied.
The name comes from `generate symbol', and the symbols produced by it
are often called ``gensyms''.
@end defun

@defun gentemp &optional (prefix @code{"t"}) (a-package @code{package})
Creates and returns a new symbol whose name starts with @i{prefix},
interned in @i{a-package}, and distinct from any symbol already present
there.  This is done by trying names one by one until a name not already
in use is found, which may be very slow.
@end defun

@c Missing explanation of the random number algorithm. 

@chapter Numbers
@cindex number
Zetalisp includes several types of numbers, with different
characteristics.  Most numeric functions accept any type of numbers as
arguments and do the right thing.  That is to say, they are @i{generic}.
In Maclisp, there are generic numeric functions (like @code{plus}) and there
are specific numeric functions (like @code{+}) which only operate on a certain
type of number, but are much more efficient.
In Zetalisp, this distinction does not exist; both function
names exist for compatibility but they are identical.  The microprogrammed
structure of the machine makes it possible to have only the generic
functions without loss of efficiency. 

@cindex fixnum
@cindex bignum
@cindex ratio
@cindex float
@cindex short float
@cindex complexnum

The types of numbers in Zetalisp are:
@table @strong
@item fixnum
Fixnums are 25-bit twos-complement binary integers.  These are the preferred,
most efficient type of number.
@item bignum
Bignums are arbitrary-precision binary integers.
@item ratio
Ratios represent rational numbers exactly as the quotient of two
integers, each of which can be a fixnum or a bignum.  Ratios with
a denominator of one are not normally created, as an integer is returned instead.
@item single-float or full-size float
Full size floats are floating-point numbers.  They have a mantissa of 31 bits and an exponent
of 11 bits, providing a precision of about 9 digits and a range of about 10^300.
Stable rounding is employed.
@item short-float
Short floats are another form of floating-point number, with a mantissa of
17 bits and an exponent of 8 bits, providing a precision of about 5 digits
and a range of about 10^38.  Stable rounding is employed.
Short floats are useful because, like fixnums,
and unlike full-size floats, they don't require any storage.  Computing with short floats is
more efficient than with full-size floats because the operations are faster
and consing overhead is eliminated.
@item complexnum
Complexnums represent complex numbers with a real part and an imaginary
part, which can be any type of number except complexnums.  (They must be
both rational or both floats of the same type).  It is impossible to
make a complexnum whose real part is rational and whose imaginary part
is the intreger zero; it is always changed into a real number. However, it @i{is}
possible to create complexnums with an imaginary part of 0.0, and such numbers may result from
calculations involving complexnums. In fact, 5.0 and 5.0+0.0i are @i{always} distinct;
they are not @code{eql}, and arithmetic operations will never canonicalize a complexnum
with floating-point zero imaginary part into a real number.
@end table

Generally, Lisp objects have a unique identity; each exists, independent
of any other, and you can use the @code{eq} predicate to determine whether
two references are to the same object or not.  Numbers are the exception
to this rule; they don't work this way.  The following function may return
either @code{t} or @code{nil}.  Its behavior is considered undefined;
as this manual is written, it returns @code{t} when interpreted but @code{nil} when compiled.
@lisp
(defun foo ()
   (let ((x (float 5)))
     (eq x (car (cons x nil)))))
@end lisp
This is very strange from the point of view of Lisp's usual object
semantics, but the implementation works this way, in order to gain
efficiency, and on the grounds that identity testing of numbers is not
really an interesting thing to do.  So the rule is that the result
of applying @code{eq} to numbers is undefined, and may return either
@code{t} or @code{nil} on what appear to be two pointers to the same
numeric object.  The only reasonable ways to compare numbers are
@code{=} (see (=-fun)) and @code{eql} ((eql-fun)), and other
things (@code{equal} or @code{equalp}) based on them.

Conversely, fixnums and short floats have the unusual property that
they are always @code{eq} if they are equal in value.  This is because
they do not point to storage; the ``pointer'' field of a fixnum is actually
its numeric value, and likewise for short floats.  Stylisticly it is
better to avoid depending on this, by using @code{eql} rather than
@code{eq}.  Also, comparing floats of any sort for exact equality, even
with @code{=} which is guaranteed to consider only the numeric values, is
usually unwise since round-off error can make the answer unpredictable
and meaningless.

The distinction between fixnums and bignums is largely transparent to
the user.  The user simply computes with integers, and the system
represents some as fixnums and the rest (less efficiently) as bignums.
The system automatically converts back and forth between fixnums and
bignums based solely on the size of the integer.  There are a few low
level functions which only work on fixnums; this fact is noted in
their documentation.  Also, when using @code{eq} on numbers the user
needs to be aware of the fixnum/bignum distinction.

Integer computations cannot overflow, except for division by zero,
since bignums can be of arbitrary size.  Floating-point computations
can get exponent overflow or underflow, if the result is too large or small
to be represented.  Exponent overflow always signals an error.
Exponent underflow normally signals an error, and assumes @code{0.0} as the answer
if the user says to proceed from the error.  However, if the value of the
variable @code{zunderflow} is non-@code{nil}, the error is skipped
and computation proceeds with @code{0.0} in place of the result that was too small.

When an arithmetic function of more than one argument is given arguments
of different numeric types, uniform @i{coercion rules} are followed to
convert the arguments to a common type, which is also the type of the
result (for functions which return a number).  When an integer meets a
ratio, the result is a ratio.  When an integer or ratio meets a float,
the result is a float of the same sort.  When a short-float meets a
full-size float, the result is a full-size float.

If any argument of the arithmetic function is complex, the other
arguments are converted to complex.
The components of a complex result must be both full-size floats,
both small-floats, or both rational; if they differ, the one
whose type comes last in that list is converted to match the other.
Finally, if the components of the result are rational and the imaginary part is
zero, the result is simply the real part.  If, however, the components
are floats, the value is always complex even if the imaginary part is zero.

Thus if the constants in a numerical algorithm are written as
short floats (assuming this provides adequate precision), and if the input
is a short float, the computation is done with short floats and
the result is a short float, while if the input is a full-size float
the computation is done in full precision and the result is
a full-size float.

Zetalisp never automatically converts between full-size floats and short
floats in the same way as it automatically converts between fixnums and
bignums since this would lead either to inefficiency or to unexpected
numerical inaccuracies.  (When a short float meets a full-size float, the result
is a full-size float, but if you use only one type, all the results are of
the same type too.)  This means that a short float computation can get
an exponent overflow error even when the result could have been
represented as a full-size float.

Floating-point numbers retain only a certain number of bits of precision;
therefore, the results of computations are only approximate.  Full-size floats
have 31 bits and short floats have 17 bits, not counting the sign.
The method of approximation is ``stable rounding''.  The result of an
arithmetic operation is the float which is closest to the exact
value.  If the exact result falls precisely halfway between two representable floats,
the result is rounded down if the least-significant bit is 0,
or up if the least-significant bit is 1.  This choice is arbitrary
but insures that no systematic bias is introduced.

Unlike Maclisp, Zetalisp does not have number declarations in
the compiler.  Note that because fixnums and short floats require no
associated storage they are as efficient as declared numbers in Maclisp.
Bignums and full-size floats are less efficient; however, bignum and
float intermediate results are garbage-collected in a special way that
avoids the overhead of the full garbage collector.

The different types of numbers can be distinguished by their printed
representations.  If a number has an exponent separated by `@code{s}', it
is a short float.  If a number has an exponent separated by `@code{f}', it
is a full-size float.  A leading or embedded (but @i{not} trailing)
decimal point, and/or an exponent separated by `@code{e}', indicates a
float; which kind is controlled by the variable
@code{*read-default-float-format*}, which is usually set to specify
full-size floats.  Short floats require a special indicator so that
naive users will not accidentally compute with the lesser precision.
Fixnums and bignums have similar printed representations since there is
no numerical value that has a choice of whether to be a fixnum or a
bignum; an integer is a bignum if and only if its magnitude is too big
for a fixnum.  See the examples on (flonum-examples), in the
description of what the reader understands.

@defvar zunderflow
When this is @code{nil}, floating point exponent underflow is an error.
When this is @code{t}, exponent underflow proceeds, returning zero as the value.
The same thing could be accomplished with a condition handler.
However, @code{zunderflow} is useful for Maclisp compatibility, and is also faster.
@end defvar

.defcondition sys:floating-exponent-overflow (@code{sys:arithmetic-error} @code{error})
.defcondition1 sys:floating-exponent-underflow (@code{sys:arithmetic-error} @code{error})
@code{sys:floating-exponent-overflow} is signaled when the result of an
arithmetic operation should be a floating point number, but the exponent
is too large to be represented in the format to be used for the value.
@code{sys:floating-exponent-underflow} is signaled when the exponent is too
small.

The condition instance provides two additional operations:
@code{:function}, which returns the arithmetic function that was called,
and @code{:small-float-p}, which is @code{t} if the result was supposed to be
a short float.

@code{sys:floating-exponent-overflow} provides the @code{:new-value} proceed
type.  It expects one argument, a new value.

@code{sys:floating-exponent-underflow} provides the @code{:use-zero} proceed
type, which expects no argument.

Unfortunately, it is not possible to make the arguments to the operation
available.  Perhaps someday they will be.
.end_defcondition

@section  Numeric Predicates
@defun zerop x
Returns @code{t} if @i{x} is zero.  Otherwise it returns @code{nil}.
If @i{x} is not a number, @code{zerop} causes an error.  For floats,
this only returns @code{t} for exactly @code{0.0} or @code{0.0s0}.
For complex numbers, it returns @code{t} if both real and imaginary
parts are zero.
@end defun

@defun plusp x
Returns @code{t} if its argument is a positive number, strictly greater
than zero.  Otherwise it returns @code{nil}.
If @i{x} is not a number, @code{plusp} causes an error.
@end defun

@defun minusp x
Returns @code{t} if its argument is a negative number, strictly
less than zero.  Otherwise it returns @code{nil}.
If @i{x} is not a number, @code{minusp} causes an error.
@end defun

@defun oddp number
Returns @code{t} if @i{number} is odd, otherwise @code{nil}.
If @i{number} is not a fixnum or a bignum, @code{oddp} causes an error.
@end defun

@defun evenp number
Returns @code{t} if @i{number} is even, otherwise @code{nil}.
If @i{number} is not a fixnum or a bignum, @code{evenp} causes an error.
@end defun

@defspec signp test x
Tests the sign of a number.  @code{signp} is present only for
Maclisp compatibility and is not recommended for use in new programs.
@code{signp} returns @code{t} if @i{x} is a number which
satisfies the @i{test}, @code{nil} if it is not a number or does not meet
the test.  @i{test} is not evaluated, but @i{x} is.  @i{test} can be
one of the following:
@table @code
@item l
x < 0
@item le
x @code{} 0
@item e
x = 0
@item n
x @code{} 0
@item ge
x @code{} 0
@item g
x > 0
@end table
@lisp
@exdent Examples:
(signp ge 12) => t
(signp le 12) => nil
(signp n 0) => nil
(signp g 'foo) => nil
@end lisp
@end defspec

@noindent
See also the data-type predicates @code{integerp}, @code{rationalp},
@code{realp}, @code{complexp},
@code{floatp}, @code{bigp}, @code{small-floatp}, and @code{numberp} ((fixp-fun)).

@section  Numeric Comparisons

All of these functions require that their arguments be numbers; they signal
an error if given a non-number.  Equality tests work on all types of numbers,
automatically performing any required coercions (as opposed to
Maclisp in which generally only the spelled-out names work for
all kinds of numbers).  Ordering comparisons allow only real numbers,
since they are meaningless on complex numbers.

@defun = &rest numbers
Returns @code{t} if all the arguments are numerically equal.  They need not
be of the same type; 1 and 1.0 are considered equal.  Character objects
are also allowed, and in effect coerced to integers for comparison.
@end defun

See also @code{eql}, (eql-fun), which insists that both the type and the value
match when its arguments are numbers.

@defun > &rest numbers
@defunx greaterp &rest numbers
@code{>} compares each pair of successive arguments.  If any argument
is not greater than the next, @code{>} returns @code{nil}.  But if the
arguments are monotonically strictly decreasing, the result is @code{t}.
Zero arguments are always monotonically decreasing, and so is
a single argument.
@lisp
@exdent Examples:
(>) => t
(> 3) => t
(> 4 3) => t
(> 4 3 2 1 0) => t
(> 4 3 1 2 0) => nil
@end lisp

@code{greaterp} is the Maclisp name for this function.
@end defun

@defun >= &rest numbers
@defunx  &rest numbers
@code{} compares each pair of successive arguments.  If any argument
is less than the next, @code{} returns @code{nil}.  But if the
arguments are monotonically decreasing or equal, the result is @code{t}.

@code{>=} is the Common Lisp name for this function.
@end defun

@defun < &rest numbers
@defunx lessp &rest numbers
@code{<} compares each pair of successive arguments.  If any argument
is not less than the next, @code{<} returns @code{nil}.  But if the
arguments are monotonically strictly increasing, the result is @code{t}.
@lisp
@exdent Examples:
(<) => t
(< 3) => t
(< 3 4) => t
(< 1 1) => nil
(< 0 1 2 3 4) => t
(< 0 1 3 2 4) => nil
@end lisp

@code{lessp} is the Maclisp name for this function.
@end defun

@defun <= &rest numbers
@defunx  &rest numbers
@code{} compares its arguments from left to right.  If any argument
is greater than the next, @code{} returns @code{nil}.  But if the
arguments are monotonically increasing or equal, the result is @code{t}.

@code{<=} is the Common Lisp name for this function.
@end defun

@defun  &rest numbers
@defunx //= &rest numbers
@code{t} if no two arguments are numerically equal.
This is the same as @code{(not (= ...))} when there are two arguments,
but not when there are more than two.

With zero or one argument, the value is always @code{t}, since
there is no pair of arguments that fail to be equal.

@code{//=} is the Common Lisp name for this function.
In Common Lisp syntax, it would be written @code{/=}.
@end defun

@defun max &rest one-or-more-args
Returns the largest of its arguments, which must not be complex.
@lisp
@exdent Example:
(max 1 3 2) => 3
@end lisp
@code{max} requires at least one argument.
@end defun

@defun min &rest one-or-more-args
Returns the smallest of its arguments, which must not be complex.
@lisp
@exdent Example:
(min 1 3 2) => 1
@end lisp
@code{min} requires at least one argument.
@end defun

@section  Arithmetic

All of these functions require that their arguments be numbers, and signal
an error if given a non-number.  They work on all types of numbers,
automatically performing any required coercions (as opposed to Maclisp,
in which generally only the spelled-out versions work for all kinds
of numbers, and the `@code{$}' versions are needed for floats).

@defun + &rest args
@defunx plus &rest args
@defunx +$ &rest args
Returns the sum of its arguments.  If there are no arguments, it returns
@code{0}, which is the identity for this operation.

@code{plus} and @code{$+} are Maclisp names, supported for
compatibility.
@end defun

@defun - arg &rest args
@defunx -$ arg &rest args
With only one argument, @code{-} returns the negative of its argument.
With more than one argument, @code{-} returns its first argument minus
all of the rest of its arguments.

@lisp
@exdent Examples:
(- 1) => -1
(- -3.0) => 3.0
(- 3 1) => 2
(- 9 2 1) => 6
@end lisp

@code{-$} is a Maclisp name, supported for compatibility.
@end defun

@defun minus x
Returns the negative of @i{x}, just like @code{-} with one argument.
@end defun

@defun difference arg &rest args
Returns its first argument minus all of the rest of its arguments.
If there are at least two arguments, @code{difference} is equivalent to
@code{-}.
@end defun

@defun abs x
Returns @code{|@i{x}|}, the absolute value of the number @i{x}.
@code{abs} for real numbers could have been defined as
@lisp
(defun abs (x)
    (cond ((minusp x) (minus x))
	  (t x)))
@end lisp

@code{abs} of a complex number could be computed, though imprecisely, as
@lisp
(sqrt (^ (realpart x) 2) (^ (imagpart x) 2))
@end lisp
@end defun

@defun * &rest args
@defunx times &rest args
@defunx *$ &rest args
Returns the product of its arguments.  If there are no arguments, it
returns @code{1}, which is the identity for this operation.

@code{times} and @code{*$} are Maclisp names, supported for compatibility.
@end defun

@defun // arg &rest args
@defunx //$ arg &rest args
With more than one argument, @code{//}
it returns the first argument divided by all of the rest of its arguments.
With only one argument, @code{(// @i{x})} is the same as @code{(// 1 @i{x})}.

The name of this function is written @code{//} rather than @code{/} because
@code{/} is the escape character in traditional Lisp syntax and must be
escaped in order to suppress that significance.  @code{//$} is a Maclisp
name, supported for compatibility.

@code{//} of two integers returns an integer even if the mathematically
correct value is not an integer.  More precisely, the value is the
same as the first value returned by @code{truncate} (see below).  This
will eventually be changed, and then the value will be a ratio if
necessary so that the it is mathematically correct.  All code that
relies on @code{//} to return an integer value rather than a ratio should
be converted to use @code{truncate} (or @code{floor} or @code{ceiling}, which
may simplify the code further).  In the mean time, use the function
@code{cli://} if you want a rational result.

@lisp
@exdent Examples:
(// 3 2) => 1       1;Fixnum division truncates.*
(// 3 -2) => -1
(// -3 2) => -1
(// -3 -2) => 1
(// 3 2.0) => 1.5
(// 3 2.0s0) => 1.5s0
(// 4 2) => 2
(// 12. 2. 3.) => 2
(// 4.0) => .25
@end lisp
@end defun

@defun quotient arg &rest args
Returns the first argument divided by all of the rest of its arguments.
When there are two or more arguments, @code{quotient} is equivalent to
@code{//}.
@end defun

@defun cli:// number &rest numbers
This is the Common Lisp division function.  It is like @code{//} except
that it uses exact rational division when the arguments are integers.

@code{//} will someday be changed to divide integers exactly.  Then there
will no longer be a distinct function @code{cli://}; that name will become
equivalent to @code{//}.

Note that in Common Lisp syntax you would write just @code{/} rather than
@code{cli://}.
@end defun

There are four functions for ``integer division'', the sort which
produces a quotient and a remainder.  They differ in how they round the
quotient to an integer, and therefore also in the sign of the remainder.
The arguments must be real, since ordering is needed to compute the
value.  The quotient is always an integer, but the arguments and remainder
need not be.

@defun floor x &optional (y @code{1})
@code{floor}'s first value is the largest integer less than or equal to the
quotient of @i{x} divided by @i{y}.

The second value is the remainder, @i{x} minus @i{y} times the first
value.  This has the same sign as @i{y} (or may be zero), regardless of
the sign of @i{x}.

With one argument, @code{floor}'s first value is the largest integer less than
or equal to the argument.
@end defun

@defun ceiling x &optional (y @code{1})
@code{ceiling}'s first value is the smallest integer greater than or equal
to the quotient of @i{x} divided by @i{y}.

The second value is the remainder, @i{x} minus @i{y} times the first
value.  This has the opposite sign from @i{y} (or may be zero),
regardless of the sign of @i{x}.

With one argument, @code{ceiling}'s first value is the smallest integer greater than
or equal to the argument.
@end defun

@defun truncate x &optional (y @code{1})
@code{truncate} is the same as @code{floor} if the arguments have the same
sign, @code{ceiling} if they have opposite signs.  @code{truncate} is the
function that the divide instruction on most computers implements.

@code{truncate}'s first value is the nearest integer, in the direction of
zero, to the quotient of @i{x} divided by @i{y}.

The second value is the remainder, @i{x} minus @i{y} times the first
value.  This has the same sign as @i{x} (or may be zero).
@end defun

@defun round x &optional (y @code{1})
@code{round}'s first value is the nearest integer 
to the quotient of @i{x} divided by @i{y}.  If the quotient is midway
between two integers, the even integer of the two is used.

The second value is the remainder, @i{x} minus @i{y} times the first
value.  The sign of this remainder cannot be predicted from the signs of
the arguments alone.

With one argument, @code{round}'s first value is the integer nearest to the
argument.
@end defun

@noindent
Here is a table which clarifies the meaning of @code{floor}, @code{ceiling},
@code{truncate} and @code{round} with one argument:

@lisp
           floor   ceiling   truncate    round

  2.6        2         3         2         3
  2.5        2         3         2         2
  2.4        2         3         2         2
  0.7        0         1         0         1
  0.3        0         1         0         0
 -0.3       -1         0         0         0
 -0.7       -1         0         0        -1
 -2.4       -3        -2        -2        -2
 -2.5       -3        -2        -2        -2
 -2.5       -3        -2        -2        -2
 -2.6       -3        -2        -2        -3
@end lisp

There are two kinds of remainder function, which differ in the treatment
of negative numbers.  The remainder can also be obtained as the second
value of one of the integer division functions above, but if only the
remaineder is desired it is simpler to use these functions.

@defun \ x y
@defunx remainder x y
@defunx cli:rem x y
Returns the remainder of @i{x} divided by @i{y}.
@i{x} and @i{y} must be integers (fixnums or bignums).
This is the same as the second value of @code{(truncate @i{x} @i{y})}.
Only the absolute value of the divisor is relevant.
@lisp
(\ 3 2) => 1
(\ -3 2) => -1
(\ 3 -2) => 1
(\ -3 -2) => -1
@end lisp

Common Lisp gives this function the name @code{rem}, but since @code{rem} in
traditional Zetalisp is a function to remove elements from lists (see
(rem-fun)), the name @code{rem} is defined to mean remainder only in Common
Lisp programs.  Note that the name @code{\} would have to be written as
@code{\\} in Common Lisp syntax; but the function @code{\} is not standard
Common Lisp.
@end defun

@defun mod number divisor
Returns the root of @i{number} modulo @i{divisor}.  This is a number
between 0 and @i{divisor}, or possibly 0, whose difference from
@i{number} is a multiple of @i{divisor}.  It is the same as the second
value of @code{(floor @i{number} @i{divisor})}.  Examples:
@lisp
(mod 2 5)  =>  2
(mod -2 5)  =>  3
(mod -2 -5)  =>  -2
(mod 2 -5)  =>  -3
@end lisp
@end defun

There are four ``floating point integer division'' functions.
These produce a result which is a floating point number whose value
is exactly integral.

@defun ffloor x &optional (y @code{1})
@defunx fceiling x &optional (y @code{1})
@defunx ftruncate x &optional (y @code{1})
@defunx fround x &optional (y @code{1})
Like @code{floor}, @code{ceiling}, @code{truncate} and @code{round} except
that the first value is converted from an integer to a float.
If @i{x} is a float, then the result is the same type of float as @i{x}.
@end defun

.defcondition sys:divide-by-zero (@code{sys:arithmetic-error} @code{error})
Dividing by zero, using any of the above division functions, signals this
condition.  The @code{:function} operation on the condition instance
returns the name of the division function.  The @code{:dividend} operation
may be available to return the number that was divided.
.end_defcondition

@defun 1+ x
@defunx add1 x
@defunx 1+$ x
@code{(1+ x)} is the same as @code{(+ x 1)}.  The other two names
are for Maclisp compatibility.
@end defun

@defun 1- x
@defunx sub1 x
@defunx 1-$ x
@code{(1- x)} is the same as @code{(- x 1)}.  Note that the
short name may be confusing: @code{(1- @i{x})} does @i{not} mean 1-@i{x};
rather, it means @i{x}-1.  The names @code{sub1} and @code{1-$} are
for Maclisp compatibility.
@end defun

@defun gcd &rest integers
@defunx \\ &rest integers
Returns the greatest common divisor of all its arguments,
which must be integers.
With one argument, the value is that argument.  With no arguments,
the value is zero.

In Common Lisp syntax @code{\\} would be written as @code{\\\\},
but only the name @code{gcd} is valid in strict Common Lisp.
@end defun

@defun lcm integer &rest more-integers
Returns the least common multiple of the specified integers.
@end defun

@defun expt x y
@defunx ^ x y
@defunx ^$ x y
Returns @i{x} raised to the @i{y}'th power.  The result is rational (and
possibly an integer) if @i{x} is rational and @i{y} an integer.  If the exponent is
an integer a repeated-squaring algorithm is used; otherwise the result
is @code{(exp (* @i{y} (log @i{x})))}.

If @i{y} is zero, the result is @code{(+ 1 (* @i{x} @i{y}))};
this is equal to one, but its type depends on those of @i{x} and @i{y}.
@end defun

.defcondition sys:zero-to-negative-power (@code{sys:arithmetic-error} @code{error})
This condition is signaled when @code{expt}'s first argument is zero
and the second argument is negative.
.end_defcondition

@defun sqrt x
Returns the square root of @i{x}.  A mathematically unavoidable
discontinuity occurs for negative real arguments, for which the value
returned is a positive real times @code{i}.
@lisp
(sqrt 4) => 2
(sqrt -4) => 0+2i
(sqrt -4+.0001i) => .00005+2i 1(approximately)*
(sqrt -4-.0001i) => .00005-2i 1(approximately)*
@end lisp
@end defun

@defun isqrt x
Integer square-root.  @i{x} must be an integer; the result is the greatest
integer less than or equal to the exact square root of @i{x}.
@end defun

@defun *dif x y
@defunx *plus x y
@defunx *quo x y
@defunx *times x y
These are the internal microcoded arithmetic functions.  There is no
reason why anyone should need to write code with these explicitly, since the
compiler knows how to generate the appropriate code for @code{plus},
@code{+}, etc.  These names are only here for Maclisp compatibility.
@end defun

@defun %div dividend divisor
The internal division function used by @code{cli://},
it was available before @code{cli://} was and may therefore
be used in some programs.  It takes exactly two arguments.
Uses of @code{%div} should be changed to use @code{cli://}.
@end defun

@section  Complex Number Functions

See also the predicates @code{realp} and @code{complexp} ((complexp-fun)).

@defun complex x &optional y
Returns the complex number whose real part is @i{x} and whose imaginary
part is @i{y}.

If @i{x} is rational and @i{y} is zero or omitted, the value is @i{x},
and not a complex number at all.
If @i{x} is a float and @i{y} is zero or omitted, of if @i{y} is
a floating zero, the result is a complexnum whose imaginary part is zero.
@end defun

@defun realpart z
Returns the real part of the number @i{z}.  If @i{z} is real,
this is the same as @i{z}.
@end defun

@defun imagpart z
Returns the imaginary part of the number @i{z}.  If @i{z} is real, this
is zero.
@end defun

@defun conjugate z
Returns the complex conjugate of the number @i{z}.  If @i{z} is real,
this is the same as @i{z}.
@end defun

@defun phase z
Returns the phase angle of the complex number @i{z} in its polar form.
This is the angle from the positive @i{x} axis to the ray from the
origin through @i{z}.  The value is always in the interval @code{(-, ]}.
@lisp
(phase -4) => 
(phase -4-.0001i) 1is just over @code{-}.*
(phase 0) => 0 1(an arbitrary choice)*
@end lisp
@end defun

@defun cis angle
Returns the complex number of unit magnitude whose phase is @i{angle}.
This is equal to @code{(complex (cos @i{angle}) (sin @i{angle}))}.
@i{angle} must be real.
@end defun

@defun signum z
Returns a number with unit magnitude and the same type and phase as @i{z}.  If
@i{z} is zero, the value is zero.

If @i{z} is real, the value is @code{=} to @code{1} or @code{-1};
it may be a float, however.
@end defun

@section  Transcendental Functions

These functions are only for floating-point arguments; if given an integer
they convert it to a float.  If given a short float, they return a
short float.

.defconst pi
The value of @code{}, as a full-size float.
.end_defconst

@defun exp x
Returns @i{e} raised to the @i{x}'th power, where @i{e} is the base of natural logarithms.
@end defun

@defun log x &optional base
Returns the logarithm of @i{x} to base @i{base}.  @i{base}
defaults to @i{e}.  When @i{base} is @i{e}, the imaginary
part of the value is in the interval @code{(-, ]}; for
negative real @i{x}, the value has imaginary part @code{}.

If @i{base} is specified, the result is
@lisp
(// (log @i{x}) (log @i{base}))
@end lisp
@end defun

.defcondition sys:zero-log (@code{sys:arithmetic-error} @code{error})
This is signaled when the argument to @code{log} is zero.
.end_defcondition

@defun sin x
@defunx cos x
@defunx tan x
Return, respectively, the sine, cosine and tangent of @i{x}, where
@i{x} is expressed in radians.  @i{x} may be complex.
@end defun

@defun sind x
@defunx cosd x
@defunx tand x
Return, respectively, the sine, cosine and tangent of @i{x}, where
@i{x} is expressed in degrees.
@end defun

@defun asin x
@defunx acos x
Returns the angle (in radians) whose sine (respectively, cosine)
is @i{x}.  The real part of the result of @code{asin} is
between @code{-/2} and @code{/2}; @code{acos} and @code{asin}
of any given argument always add up to @code{/2}.
@end defun

@defun atan y &optional x
If only @i{y} is given, the value is the angle, in radians, whose
tangent is @i{y}.  The real part of the result is between zero and @code{-}.

If @i{x} is also given, both arguments must be real, and the value is
an angle, in radians, whose tangent is @i{y/x}.  However, the signs
of the two arguments are used to choose between two angles which
differ by @code{} and have the same tangent.  The one chosen is the
angle from the @i{x}-axis counterclockwise to the line from the origin
to the point (@i{x}, @i{y}).

@code{atan} always returns a non-negative number between zero and
@code{2}.
@end defun

@defun atan2 y &optional x
@defunx cli:atan y &optional x
Like @code{atan} but always returns a value whose real part is between
@code{-/2} and @code{/2}.  The value is either the same as
the value of @code{atan} or differs from it by @code{}.

@code{atan2} is the traditional name of this function.
In Common Lisp it is called @code{atan}; it is documented as
@code{cli:atan} since the name @code{atan} has a different meaning
in traditional syntax.
@end defun

@defun sinh x
@defunx cosh x
@defunx tanh x
@defunx asinh x
@defunx acosh x
@defunx atanh x
The hyperbolic and inverse hyperbolic functions.
@end defun

@section  Numeric Type Conversions

These functions are provided to allow specific conversions of data
types to be forced, when desired.

@defun float number &optional float
Converts @i{number} to a floating point number and returns it.

If @i{float} is specified, the result is of the same
floating point format as @i{float}.  If @i{number} is
a float of a different format then it is converted.

If @i{float} is omitted, then @i{number} is converted to
a single-float unless it is already a floating point number.

A complex number is converted to one whose real and imaginary
parts are full-size floats unless they are already both floats.
@end defun

@defun small-float x
@defunx short-float x
Converts any kind of real number to a short-float.
A complex number is converted to one whose real and imaginary
parts are short floats.  The two names are synonymous.
@end defun

@defun numerator x
Returns the numerator of the rational number @i{x}.  If @i{x} is an
integer, the value equals @i{x}.  If @i{x} is not an integer or
ratio, an error is signaled.
@end defun

@defun denominator x
Returns the denominator of the rational number @i{x}.  If @i{x} is an
integer, the value is @code{1}.  If @i{x} is not an integer or
ratio, an error is signaled.
@end defun

@defun rational x
Converts @i{x} to a rational number.  If @i{x} is an integer or a
ratio, it is returned unchanged.  If it is a floating point
number, it is regarded as an exact fraction whose numerator is
the mantissa and whose denominator is a power of two.
For any other argument, an error is signaled.
@end defun

@defun rationalize x &optional precision
Returns a rational approximation to @i{x}.

If there is only one argument, and it is an integer or a ratio, it
is returned unchanged.  If the argument is a floating point number,
a rational number is returned which, if converted to a floating point
number, would produce the original argument.  Of all such rational
numbers, the one chosen has the smallest numerator and denominator.

If there are two arguments, the second one specifies how much precision
of the first argument should be considered significant.  @i{precision}
can be a positive integer (the number of bits to use), a negative integer
(the number of bits to drop at the end), or a floating point number
(minus its exponent is the number of bits to use).

If there are two arguments and the first is rational, the value is a
``simpler'' rational which approximates it.
@end defun

@defun fix x
Converts @i{x} from a float or ratio to an integer,
truncating towards negative infinity.
The result is a fixnum or a bignum as appropriate.  If @i{x} is already
a fixnum or a bignum, it is returned unchanged.

@code{fix} is the same as @code{floor} except that @code{floor} returns an
additional value.  @code{fix} is semi-obsolete, since the functions @code{floor},
@code{ceiling}, @code{truncate} and @code{round} provide four different ways of
converting numbers to integers with different kinds of rounding.
@end defun

@defun fixr x
@code{fixr} is the same as @code{round} except that @code{round} returns an
additional value.  @code{fixr} is considered obsolete.
@end defun

@section  Floating Point Numbers

@defun decode-float float
Returns three values which describe the value of @i{float}.

The first value is a positive float of the same format having the same
mantissa, but with an exponent chosen to make it between 1/2 and 1, less
than 1.

The second value is the exponent of @i{float}: the power of 2 by which
the first value needs to be scaled in order to get @i{float} back.

The third value expresses the sign of @i{float}.  It is a float of the
same format as @i{float}, whose value is either 1 or -1.  Example:
@lisp
(decode-float 38.2)
  =>  0.596875   6   1.0
@end lisp
@end defun

@defun integer-decode-float float
Like @code{decode-float} except that the first value is scaled so as to
make it an integer, and the second value is modified by addition of a
constant to compensate.
@lisp
(integer-decode-float 38.2)
  =>  #o11431463146   -25.   1.0
@end lisp
@end defun

@defun scale-float float integer
Multiplies @i{float} by 2 raised to the @i{integer} power.  @i{float} can actually be
an integer also; it is converted to a float and then scaled.
@lisp
(scale-float 0.596875 6)  =>  38.2
(scale-float #o11431463146 -25.)  =>  38.2
@end lisp
@end defun

@defun float-sign float1 &optional float2
Returns a float whose sign matches that of @i{float1} and whose
magnitude and format are those of @i{float2}.  If @i{float2} is omitted,
1.0 is used as the magnitude and @i{float1}'s format is used.
@lisp
(float-sign -1.0s0 35.3)  =>  -35.3
(float-sign -1.0s0 35.3s0)  =>  -35.3s0
@end lisp
@end defun

@defun float-radix float
Defined by Common Lisp to return the radix used for the exponent in the
format used for @i{float}.  On the Lisp Machine, floating point
exponents are always powers of 2, so @code{float-radix} ignores its
argument and always returns 2.
@end defun

@defun float-digits float
Returns the number of bits of mantissa in the floating point format
which float is an example of.  It is 17 for short floats and 31 for
full size ones.
@end defun

@defun float-precision float
Returns the number of significant figures present in in the mantissa of @i{float}.
This is always the same as @code{(float-digits @i{float})} for normalized numbers,
and on the Lisp Machine all floats are normalized, so the two functions are the same.
@end defun

@section  Logical Operations on Numbers

Except for @code{lsh} and @code{rot}, these functions operate on both
fixnums and bignums.  @code{lsh} and @code{rot} have an inherent word-length
limitation and hence only operate on 25-bit fixnums.  Negative numbers
are operated on in their 2's-complement representation.

@defun logior &rest integers
Returns the bit-wise logical @i{inclusive or} of its arguments.
With no arguments, the value is zero, which is the identity for this
operation.
@lisp
@exdent Example (in octal):
(logior #o4002 #o67) => #o4067
@end lisp
@end defun

@defun logand &rest integers
Returns the bit-wise logical @i{and} of its arguments.
With no arguments, the value is -1, which is the identity for this operation.
@lisp
@exdent Examples (in octal):
(logand #o3456 #o707) => #o406
(logand #o3456 #o-100) => #o3400
@end lisp
@end defun

@defun logxor &rest integers
Returns the bit-wise logical @i{exclusive or} of its arguments.
With no arguments, the value is zero, which is the identity for this operation.
@lisp
@exdent Example (in octal):
(logxor #o2531 #o7777) => #o5246
@end lisp
@end defun

@defun logeqv &rest integers
Combines the @i{integers} together bitwise using the equivalence
operation, which, for two arguments, is defined to result in 1 if the
two argument bits are equal.  This operation is asociative.  With no
args, the value is -1, which is an identity for the equivalence
operation.
@lisp
@exdent Example (in octal):
(logeqv #o2531 #o7707) => #o-5237 = ...77772541
@end lisp
@end defun

Non-associative bitwise operations take only two arguments:

@defun lognand integer1 integer2
Returns the bitwise-nand of the two arguments.  A bit of the result is 1
if at least one of the corresponding argument bits is 0.
@end defun

@defun lognor integer1 integer2
Returns the bitwise-nor of the two arguments.  A bit of the result is 1
if both of the corresponding argument bits are 0.
@end defun

@defun logorc1 integer1 integer2
Returns the bitwise-or of @i{integer2} with the complement of @i{integer1}.
@end defun

@defun logorc2 integer1 integer2
Returns the bitwise-or of @i{integer1} with the complement of @i{integer2}.
@end defun

@defun logandc1 integer1 integer2
Returns the bitwise-and of @i{integer2} with the complement of @i{integer1}.
@end defun

@defun logandc2 integer1 integer2
Returns the bitwise-and of @i{integer1} with the complement of @i{integer2}.
@end defun

@defun lognot number
Returns the logical complement of @i{number}.  This is the same as
@code{logxor}'ing @i{number} with -1.
@lisp
@exdent Example:
(lognot #o3456) => #o-3457
@end lisp
@end defun

@defun boole fn &rest one-or-more-args
@code{boole} is the generalization of @code{logand}, @code{logior}, and @code{logxor}.
@i{fn} should be a fixnum between 0 and 17 octal inclusive;
it controls the function which is computed.  If the binary representation
of @i{fn} is @i{abcd} (@i{a} is the most significant bit, @i{d} the least)
then the truth table for the Boolean operation is as follows:
.sp
@lisp
       y
   | 0  1
---------
  0| a  c
x  |
  1| b  d
@end lisp

If @code{boole} has more than three arguments, it is associated left
to right; thus,
@lisp
(boole fn x y z) = (boole fn (boole fn x y) z)
@end lisp
With two arguments, the result of @code{boole} is simply its second argument.
At least two arguments are required.

@lisp
@exdent Examples:
(boole 1 x y) = (logand x y)
(boole 6 x y) = (logxor x y)
(boole 2 x y) = (logand (lognot x) y)
@end lisp

@code{logand}, @code{logior}, and so on are usually preferred over the equivalent
forms of @code{boole}.  @code{boole} is useful when the operation to be performed
is not constant.
@end defun

.defconst boole-ior
.defconst1 boole-and
.defconst1 boole-xor
.defconst1 boole-eqv
.defconst1 boole-nand
.defconst1 boole-nor
.defconst1 boole-orc1
.defconst1 boole-orc2
.defconst1 boole-andc1
.defconst1 boole-andc2
The @code{boole} opcodes that correspond to the functions @code{logior}, @code{logand}, etc.
.end_defconst

.defconst boole-clr
.defconst1 boole-set
.defconst1 boole-1
.defconst1 boole-2
The @code{boole} opcodes for the four trivial operations.  Respectively, they
are those which always return zero, always return one, always return the
first argument, and always return the second argument.
.end_defconst

@defun bit-test x y
@defunx logtest x y
@code{bit-test} is a predicate which returns @code{t} if any of
the bits designated by the 1's in @i{x} are 1's in @i{y}.
@code{bit-test} is implemented as a macro which expands as follows:
@lisp
(bit-test @i{x} @i{y}) ==> (not (zerop (logand @i{x} @i{y})))
@end lisp
@code{logtest} is the Common Lisp name for this function.
@end defun

@defun lsh x y
Returns @i{x} shifted left @i{y} bits if @i{y} is positive or zero,
or @i{x} shifted right @code{|@i{y}|} bits if @i{y} is negative.
Zero bits are shifted in (at either end) to fill unused positions.
@i{x} and @i{y} must be fixnums.  (In some applications you may
find @code{ash} useful for shifting bignums; see below.)
@lisp
@exdent Examples:
(lsh 4 1) => #o10
(lsh #o14 -2) => 3
(lsh -1 1) => -2
@end lisp
@end defun

@defun ash x y
Shifts @i{x} arithmetically left @i{y} bits if @i{y} is positive,
or right @i{-y} bits if @i{y} is negative.
Unused positions are filled by zeroes from the right, and
by copies of the sign bit from the left.  Thus, unlike @code{lsh},
the sign of the result is always the same as the sign of @i{x}.
If @i{x} is a fixnum or a bignum, this is a shifting operation.
If @i{x} is a float, this does scaling (multiplication by a power of two),
rather than actually shifting any bits.
@end defun

@defun rot x y
Returns @i{x} rotated left @i{y} bits if @i{y} is positive or zero,
or @i{x} rotated right @code{|@i{y}|} bits if @i{y} is negative.
The rotation considers @i{x} as a 25-bit number (unlike Maclisp,
which considers @i{x} to be a 36-bit number in both the pdp-10
and Multics implementations).
@i{x} and @i{y} must be fixnums.  (There is no function for
rotating bignums.)
@lisp
@exdent Examples:
(rot 1 2) => 4
(rot 1 -2) => #o20000000
(rot -1 7) => -1
(rot #o15 25.) => #o15
@end lisp
@end defun

@defun logcount integer
Returns the number of 1 bits in @i{integer}, if it is positive.
Returns the number of 0 bits in @i{integer}, if it is negative.
(There are infinitely many 1 bits in a negative integer.)
@lisp
(logcount #o15)  =>  3
(logcount #o-15)  =>  2
@end lisp
@end defun

@defun integer-length integer
The minimum number of bits (aside from sign) needed to represent
@i{integer} in two's complement.  This is the same as @code{haulong}
for positive numbers.
@lisp
(integer-length 0) => 0
(integer-length 7) => 3
(integer-length 8) => 4
(integer-length -7) => 3
(integer-length -8) => 3
(integer-length -9) => 4
@end lisp
@end defun

@defun haulong integer
The same as @code{integer-length} of the absolute value of @code{integer}.
This name exists for Maclisp compatibility only.
@end defun

@defun haipart x n
Returns the high @i{n} bits of the binary representation of @code{|@i{x}|},
or the low @code{-@i{n}} bits if @i{n} is negative.
@i{x} may be a fixnum or a bignum; its sign is ignored.
@code{haipart} could have been defined by:
@lisp
(defun haipart (x n)
  (setq x (abs x))
  (if (minusp n)
      (logand x (1- (ash 1 (- n))))
      (ash x (min (- n (haulong x))
		  0))))
@end lisp
@end defun

@section  Byte Manipulation Functions
@cindex byte
Several functions are provided for dealing with an arbitrary-width field of
contiguous bits appearing anywhere in an integer (a fixnum or a bignum).
Such a contiguous set of bits is called a @i{byte}.  Note that
we are not using the term @i{byte} to mean eight bits, but rather
any number of bits within a number.
These functions use numbers called @i{byte specifiers} to
@cindex byte specifiers
designate a specific byte position within any word.  A byte specifier
contains two pieces of information: the size of the byte, and the
position of the byte.  The position is expressed as the number of least
significant bits which are not included in the byte.  A position of zero
means that the byte is at the right (least significant) end of the
number.

The maximum value of the size is 24, since a byte must fit in a fixnum
although bytes can be loaded from and deposited into bignums.  (Bytes
are always positive numbers.)

Byte specifiers are represented as fixnums whose two lowest octal digits
represent the @i{size} of the byte, and whose higher (usually two, but
sometimes more) octal digits represent the @i{position} of the byte
within a number.  For example, the byte-specifier #o0010 (i.e. 10
octal) refers to the lowest eight bits of a word, and the byte-specifier
#o1010 refers to the next eight bits.  The format of byte-specifiers is
taken from the pdp-10 byte instructions.

Much old code contains byte specifiers written explicitly as octal numbers.
It is cleaner to construct byte specifiers using @code{byte} instead.
Decomposition of byte specifiers should always be done with
@code{byte-position} and @code{byte-size}, as at some time in the future
other kinds of byte specifiers may be created to refer to fields
whose size is greater than #o77.

@defun byte size position
Returns a byte specifier for the byte of @i{size} bits, positioned to
exclude the @i{position} least significant bits.  This byte specifier
can be passed as the first argument to @code{ldb}, @code{dpb}, @code{%logldb},
@code{%logdpb}, @code{mask-field}, @code{%p-ldb}, @code{%p-ldb-offset}, and so on.
@end defun

@defun byte-position byte-spec
@defunx byte-size byte-spec
Return, respectively, the size and the position of @i{byte-spec}.
It is always true that
@lisp
(byte (byte-size @i{byte-spec}) (byte-position @i{byte-spec}))
@end lisp
equals @i{byte-spec}.
@end defun

@defun ldb byte-spec integer 
Extracts a byte from @i{integer} according to @i{byte-soec}.  The
contents of this byte are returned right-justified in a fixnum.  The
name of the function, @code{ldb}, means `load byte'.  @i{integer} may be a
fixnum or a bignum.  The returned value is always a fixnum.
@lisp
@exdent Example:
(ldb (byte 6 3) #o4567) => #o56
@end lisp
@end defun

@defun load-byte integer position size
This is like @code{ldb} except that instead of using a byte specifier,
the @i{position} and @i{size} are passed as separate arguments.
The argument order is not analogous to that of @code{ldb} so that
@code{load-byte} can be compatible with Maclisp.
@end defun

@defun ldb-test byte-spec integer
@code{ldb-test} is a predicate which returns @code{t} if any of
the bits designated by the byte specifier @i{byte-spec} are 1's in @i{integer}.
That is, it returns @code{t} if the designated field is non-zero.
@code{ldb-test} is implemented as a macro which expands as follows:
@lisp
(ldb-test @i{byte-spec} @i{integer}) ==> (not (zerop (ldb @i{byte-spec} @i{integer})))
@end lisp
@end defun

@defun logbitp index integer
@code{t} if the bit @i{index} up from the least significant in @i{integer} is a 1.
This is equivalent to @code{(ldb-test (byte @i{index} 1) @i{integer})}.
@end defun

@defun mask-field byte-spec fixnum
This is similar to @code{ldb}; however, the specified byte of @i{fixnum} is
positioned in the same byte of the returned value.  The returned value
is zero outside of that byte.  @i{fixnum} must be a fixnum.
@lisp
@exdent Example:
(mask-field (byte 6 3) #o4567) => #o560
@end lisp
@end defun

@defun dpb byte byte-spec integer
Returns a number which is the same as @i{integer} except in the bits
specified by @i{byte-spec}.  The low bits of @i{byte}, appropriately
many, are placed in those bits.  @i{byte} is interpreted as being
right-justified, as if it were the result of @code{ldb}.  @i{integer} may
be a fixnum or a bignum.  The name means `deposit byte'.
@lisp
@exdent Example:
(dpb #o23 (byte 6 3) #o4567) => #o4237
@end lisp
@end defun

@defun deposit-byte integer position size byte
This is like @code{dpb} except that instead of using a byte specifier,
the @i{position} and @i{size} are passed as separate arguments.
The argument order is not analogous to that of @code{dpb} so that
@code{deposit-byte} can be compatible with Maclisp.
@end defun

@defun deposit-field byte byte-spec fixnum
This is like @code{dpb}, except that @i{byte} is not taken to
be left-justified; the @i{byte-spec} bits of @i{byte} are used
for the @i{byte-spec} bits of the result, with the rest of the
bits taken from @i{fixnum}.  @i{fixnum} must be a fixnum.
@lisp
@exdent Example:
(deposit-field #o230 (byte 6 3) #o4567) => #o4237
@end lisp
@end defun

The behavior of the following two functions depends on the size of
fixnums, and so functions using them may not work the same way
on future implementations of Zetalisp.  Their names start
with @code{%} because they are more like machine-level subprimitives
than the previous functions.

@defun %logldb byte-spec fixnum
@code{%logldb} is like @code{ldb} except that it only loads out of fixnums and
allows a byte size of 25, i.e. all 25 bits of the fixnum
including the sign bit.
@end defun

@defun %logdpb byte byte-spec fixnum
@code{%logdpb} is like @code{dpb} except that it only deposits into fixnums.
Using this to change the sign-bit leaves the result as a fixnum,
while @code{dpb} would produce a bignum result for arithmetic correctness.
@code{%logdpb} is good for manipulating fixnum bit-masks such as are used
in some internal system tables and data-structures.
@end defun

@section  Random Numbers

The functions in this section provide a pseudo-random number generator
facility.  The basic function you use is @code{random}, which returns a new
pseudo-random number each time it is called.

@defun random &optional number random-state
Returns a randomly generated number.  If @i{number} is specified, the
random number is of the same type as @i{number} (floating if @i{number}
is floating, etc.), nonnegative, and less than @i{number}.

If @i{number} is omitted, the result is a randomly chosen fixnum,
with all fixnums being equally likely.

If @i{random-state} is present, it is used and updated in generating
the random number.  Otherwise, the default random-state (the value of
@code{*random-state*}) is used (and is created if it doesn't already
exist).  The algorithm is executed inside a @code{without-interrupts}
(see (without-interrupts-fun)) so two processes can use the same
random-state without colliding.
@end defun

@defun si:random-in-range low high
Returns a random float in the interval [@i{low}, @i{high}).
The default random-state is used.
@end defun

A @i{random-state} is a named structure of type @code{random-state} whose
contents control the future actions of the random number generator.
Each time you call the function @code{random}, it uses (and updates) one
random-state.  One random-state exists standardly and is used by
default.  To have several different controllable, resettable sources of
random numbers, you can create your own random-states.  Random-states
print as
@lisp
#s(random-state ...@i{more data}...)
@end lisp
so that they can be read back in.

@defun random-state-p object
@code{t} if @i{object} is a random-state.
@end defun

@defvar *random-state*
This random-state is used by default when @code{random} is called
and the random-state is not explicitly specified.
@end defvar

@defun make-random-state &optional random-state
Creates and returns a new random-state object.
If @i{random-state} is @code{nil}, the new random-state is a copy of @code{*random-state*}.
If @i{random-state} is a random-state, the new one is a copy of that one.
If @i{random-state} is @code{t}, the new random-state is initialized truly randomly
(based on the value of @code{(time)}).
@end defun

A random-state actually consists of an array of numbers and two pointers
into the array.  The pointers circulate around the array; each time a
random number is requested, both pointers are advanced by one, wrapping
around at the end of the array.  Thus, the distance forward from the
first pointer to the second pointer stays the same, allowing for
wraparound.  Let the length of the array be @i{length} and the distance
between the pointers be @i{offset}.  To generate a new random number,
each pointer is set to its old value plus one, modulo @i{length}.  Then
the two elements of the array addressed by the pointers are added
together; the sum is stored back into the array at the location where
the second pointer points, and is returned as the random number after
being normalized into the right range.

This algorithm produces well-distributed random numbers if @i{length}
and @i{offset} are chosen carefully, so that the polynomial
@i{x} @code{^} @i{length} + @i{x} @code{^} @i{offset} + 1 is irreducible over the mod-2 integers.  The
system uses 71. and 35.

The contents of the array of numbers should be initialized to anything
moderately random, to make the algorithm work.  The contents get
initialized by a simple random number generator, based on a
number called the @i{seed}.  The initial value of the seed is set when
the random-state is created, and it can be changed.

@defun si:random-create-array length offset seed &optional (area @code{nil})
Creates and returns a new random-state according to precise
specifications.  @i{length} is the length of the array.  @i{offset} is
the distance between the pointers and should be an integer less than
@i{length}.  @i{seed} is the initial value of the seed, and should be a
fixnum.  This calls @code{si:random-initialize} on the random state before
returning it.
@end defun

@defun si:random-initialize random-state &optional new-seed
@i{random-state} must be a random-state, such as is created by
@code{si:random-create-array}.  If @i{new-seed} is provided, it should be a
fixnum, and the seed is set to it.  @code{si:random-initialize} reinitializes the
contents of the array from the seed (calling @code{random} changes the
contents of the array and the pointers, but not the seed).
@end defun

@section  Information on Numeric Precision

Common Lisp defines some constants whose values give information
in a standard way about the ranges of numbers representable in the
individual Lisp implementation.

.defconst most-negative-fixnum
Any integer smaller than this must be a bignum.
.end_defconst

.defconst most-positive-fixnum
Any integer larger than this must be a bignum.
.end_defconst

.defconst most-positive-short-float
No short float can be greater than this number.
.end_defconst

.defconst least-positive-short-float
No positive short float can be closer to zero than this number.
.end_defconst

.defconst least-negative-short-float
No negative short float can be closer to zero than this number.
.end_defconst

.defconst most-negative-short-float
No short float can be less than this (negative) number.
.end_defconst

.defconst most-positive-single-float
.defconst1 least-positive-single-float
.defconst1 least-negative-single-float
.defconst1 most-negative-single-float
Similar to the above, but for full-size floats rather than
for short floats.
.end_defconst

.defconst most-positive-double-float
.defconst1 least-positive-double-float
.defconst1 least-negative-double-float
.defconst1 most-negative-double-float
.defconst1 most-positive-long-float
.defconst1 least-positive-long-float
.defconst1 least-negative-long-float
.defconst1 most-negative-long-float
These are defined by Common Lisp to be similar to the above,
but for double-floats and long-floats.  On the Lisp Machine,
there are no distinct double and long floating formats; they are
synonyms for single-floats.  So these constants exist but their values
are the same as those of @code{most-positive-single-float} and so on.
.end_defconst

.defconst short-float-epsilon
Smallest positive short float which can be added to 1.0s0 and make a difference.
That is, for any short float @i{x} less than this, @code{(+ 1.0s0 @i{x})}
equals 1.0s0.
.end_defconst

.defconst single-float-epsilon
.defconst1 double-float-epsilon
.defconst1 long-float-epsilon
Smallest positive float which can be added to 1.0 and make a difference.
The three names are synonyms on the Lisp Machine,
for reasons explained above.
.end_defconst

.defconst short-float-negative-epsilon
Smallest positive short float which can be subtracted from 1.0s0
and make a difference.
.end_defconst

.defconst single-float-negative-epsilon
.defconst1 double-float-negative-epsilon
.defconst1 long-float-negative-epsilon
Smallest positive float which can be subtracted from 1.0 and make a difference.
.end_defconst

@section  Arithmetic Ignoring Overflow

Sometimes it is desirable to have a form of arithmetic which has no
overflow checking (that would produce bignums),
and truncates results to the word size of the machine.

@defun %pointer-plus pointer-1 pointer-2
Returns a fixnum which is @i{pointer-1} plus @i{pointer-2}, modulo
what could be stored in the size of the pointer field (currently 25
bits).  Arguments other than fixnums are rarely useful, but no type
checks are made.
@end defun

@defun %pointer-difference pointer-1 pointer-2
Returns a fixnum which is @i{pointer-1} minus @i{pointer-2}.
If the arguments are fixnums, rather than true pointers,
this provides subtraction modulo what can be stored in the
pointer field.
@end defun

@defun %pointer-times pointer-1 pointer-2
Returns a fixnum which is @i{pointer-1} times @i{pointer-2}.  Arguments
other than fixnums are rarely useful, but no type checks are made.  The
two pointer fields are regarded as signed numbers.
@end defun

@section  24-Bit Arithmetic

Sometimes it is useful to have a form of truncating arithmetic
with a strictly specified field width which is independent of
the range of fixnums permissible on a particular machine.
In Zetalisp, this is provided by the following set of functions.
Their answers are correct only modulo 2^24.

These functions should @i{not} be used for efficiency; they are
probably less efficient than the functions which @i{do} check for
overflow.  They are intended for algorithms which require this sort of
arithmetic, such as hash functions and pseudo-random number generation.

@defun %24-bit-plus x y
Returns the sum of @i{x} and @i{y} modulo 2^24.  Both arguments must
be fixnums.
@end defun

@defun %24-bit-difference x y
Returns the difference of @i{x} and @i{y} modulo 2^24.  Both arguments must
be fixnums.
@end defun

@defun %24-bit-times x y
Returns the product of @i{x} and @i{y} modulo 2^24.  Both arguments must
be fixnums.
@end defun

@section  Double-Precision Arithmetic

These peculiar functions are useful in programs that don't want to use
bignums for one reason or another.  They should usually be avoided,
as they are difficult to use and understand, and they depend on special
numbers of bits and on the use of twos-complement notation.

A double-precision number has 50 bits, of which one is the sign bit.  It
is represented as two fixnums.  The less signficant fixnum conveys 25
signficant bits and is regarded as unsigned (that is, what is normally
the sign bit is treated as an ordinary data bit); the more significant
fixnum has the same sign as the double-precision number.  Only
@code{%float-double} handles negative double-precision numbers; for the
other functions, the more signficant fixnum is always positive and
contains only 24 bits of actual data.

@defun %multiply-fractions num1 num2
Returns bits 25 through 48 (the most significant half) of the product of
@i{num1} and @i{num2}, regarded as unsigned integers.  If you call this
and @code{%pointer-times} on the same arguments @i{num1} and @i{num2}, you
can combine the results into a double-precision product.  If @i{num1}
and @i{num2} are regarded as two's-complement fractions, -1 @code{
@i{num}} < 1, @code{%multiply-fractions} returns 1/2 of their correct
product as a fraction.

[The name of this function isn't too great.]
@end defun

@defun %divide-double dividend[25:48] dividend[0:24] divisor
Divides the double-precision number given by the first two
arguments by the third argument, and returns the single-precision
quotient.  Causes an error if @i{divisor} is zero or if the quotient won't
fit in single precision.

There are only 24 bits in each half of the number, as neither sign
bit is used to convey information.
@end defun

@defun %remainder-double dividend[25:48] dividend[0:24] divisor
Divides the double-precision number given by the first two
arguments by the third argument, and returns the
remainder.  Causes an error if @i{divisor} is zero.
@end defun

@defun %float-double high25 low25
@i{high25} and @i{low25}, which must be fixnums, are concatenated
to produce a 50-bit unsigned positive integer.  A full-size float containing the
same value is constructed and returned.  Note that only the 31 most significant
bits are retained (after removal of leading zeroes.)  This function is
mainly for the benefit of @code{read}.
@end defun

@chapter Arrays
@cindex array
@cindex rank of an array
@cindex vector

	An @i{array} is a Lisp object that consists of a group of cells,
each of which may contain an object.  The individual cells are
selected by numerical @i{subscripts}.  The type predicate @code{arrayp}
((arrayp-fun)) can be used to test whether an object is an array.
@cindex subscript

	The @i{rank} of an array (the number of dimensions which the
array has) is the number of subscripts used to refer to one of the
elements of the array.  The rank may be any integer from zero to seven,
inclusively.  An array of rank zero has a single element which is
addressed using no subscripts.  An array of rank one is called a
@i{vector}; the predicate @code{vectorp} (see (vectorp-fun)) tests whether an
object is a vector.  A series of functions called the generic sequence
functions accept either a vector or a list as argument indiscriminantly
(see (generic-sequence-functions)).

.defconst array-rank-limit
A constant giving the upper limit on the rank of an array.  It is 8,
indicating that 7 is the highest possible rank.
.end_defconst

	The lowest value for any subscript is zero; the highest value
is a property of the array.  Each dimension has a size, which is
the lowest number which is too great to be used as a subscript.
For example, in a one-dimensional array of five elements, the size
of the one and only dimension is five, and the acceptable
values of the subscript are zero, one, two, three, and four.

.defconst array-dimension-limit
Any one dimension of an array must be smaller than this constant.
.end_defconst

@cindex total size of an array

The @i{total size} of an array is the number of elements in it.
It is the product of the sizes of the dimensions of the array.

.defconst array-total-size-limit
The total number of elements of any array must be smaller than this constant.
.end_defconst

@cindex fill pointer
@cindex simple array

A vector can have a @i{fill pointer} which is a number saying how
many elements of the vector are @i{active}.  For many purposes,
only that many elements (starting with element zero) are used.

	The most basic primitive functions for handling arrays are:
@code{make-array}, which is used for the creation of arrays, @code{aref},
which is used for examining the
contents of arrays, and @code{aset}, which
is used for storing into arrays.

	An array is a regular Lisp object, and it is common for an
array to be the binding of a symbol, or the car or cdr of a cons,
or, in fact, an element of an array.  There are many functions,
described in this chapter, which take arrays as arguments and
perform useful operations on them.

Another way of handling arrays, inherited from Maclisp, is to treat them
as functions.  In this case each array has a name, which is a symbol
whose function definition is the array.  Zetalisp supports this
style by allowing an array to be @i{applied} to arguments, as if it were
a function.  The arguments are treated as subscripts and the array is
referenced appropriately.  The @code{store} special form (see (store-fun))
is also supported.  This kind of array referencing is considered to be
obsolete and is slower than the usual kind.  It should not be used in
new programs.

@section  Array Types
@cindex general array
@cindex specialized array
@cindex numeric array
@cindex bit array
@cindex string
@cindex types of arrays

	There are several types of arrays, which differ primarily in
which kinds of elements they are allowed to hold.  Some types of arrays
can hold Lisp objects of any type; such arrays are called @i{general}
arrays.  The other types of array restrict the possible elements to a
certain type, usually a numeric type.  Arrays of these types are called
@i{specialized} arrays, or @i{numeric} arrays if the elements must be
numbers.  For example, one array type permits only complex numbers with
floating components to be stored in the array.  Another permits only the
numbers zero and one; Common Lisp calls these @i{bit arrays}.  The
contents of a black-and-white screen are stored in a bit array.  Several
predicates exist for finding out which of these classifications an array
belongs to: @code{simple-vector-p} ((simple-vector-p-fun)),
@code{bit-vector-p}, @code{simple-bit-vector-p}, @code{stringp} ((stringp-fun)),
and @code{simple-string-p}.

The array types are known by a set of symbols whose names
begin with @code{art-} (for `ARray Type').

@vindex art-q
	The most commonly used type is called @code{art-q}.  An @code{art-q}
array simply holds Lisp objects of any type.

@vindex art-q-list
	Similar to the @code{art-q} type is the @code{art-q-list}.  Like the
@code{art-q}, its elements may be any Lisp object.  The difference is that
the @code{art-q-list} array doubles as a list; the function @code{g-l-p}
takes an @code{art-q-list} array and returns a list whose elements are
those of the array, and whose actual substance is that of the array.  If
you @code{rplaca} elements of the list, the corresponding element of the
array is changed, and if you store into the array, the corresponding
element of the list changes the same way.  An attempt to @code{rplacd}
the list causes a @code{sys:rplacd-wrong-representation-type} error,
since arrays cannot implement that operation.

@vindex art-string
The most important type of specialized array is the @i{string}, which is
a vector of character objects.	Character strings are implemented by the
@code{art-string} array type.  Many important system functions, including
@code{read}, @code{print}, and @code{eval}, treat @code{art-string} arrays very
differently from the other kinds of arrays.  There are also many
functions specifically for operating on strings, described in chapter
(string-chapter).

As viewed by Common Lisp programs, the elements of a string are character
objects.  As viewed by traditional programs, the elements are integers in
the range 0 to 255.  While most code still accesses strings in the
traditional manner and gets integers out, the Common Lisp viewpoint is
considered the correct one.  See (string-element-type) for a discussion
of this conflict of conventions and its effect on programs.

@vindex art-fat-string
	An @code{art-fat-string} array is a character string with wider
characters, containing 16 bits rather than 8 bits.  The extra bits are
ignored by many string operations, such as comparison, on these strings;
typically they are used to hold font information.

@vindex art-1b
@vindex art-2b
@vindex art-4b
@vindex art-8b
@vindex art-16b
	There is a set of types called @code{art-1b, art-2b, art-4b, art-8b}, 
and @code{art-16b};
these names are short for `1 bit', `2 bits', and so on.  Each element
of an @code{art-@i{n}b} array is a non-negative fixnum, and only the
least significant @i{n} bits are remembered in the array; all of the others are discarded.  Thus @code{art-1b} arrays store only 0 and 1, and
if you store a 5 into an @code{art-2b} array and look at it
later, you will find a 1 rather than a 5.

	These arrays are used when it is known beforehand that the
fixnums which will be stored are non-negative and limited in size to a
certain number of bits.  Their advantage over the @code{art-q} array is
that they occupy less storage, because more than one element of the
array is kept in a single machine word.  (For example, 32 elements
of an @code{art-1b} array or 2 elements of an @code{art-16b} array
fit into one word).

@vindex art-32b
	There are also @code{art-32b} arrays which have 32 bits per element.
Since fixnums only have 24 bits anyway, these are the same as @code{art-q}
arrays except that they only hold fixnums.  They are not compatible
with the other ``bit'' array types and generally should not be used.

@vindex art-half-fix
	An @code{art-half-fix} array contains half-size fixnums.  Each element
of the array is a signed 16-bit integer; the range is from -32768 to 32767
inclusive.

@vindex art-float
	The @code{art-float} array type is a special-purpose type whose
elements are floats.  When storing into such an array the value (any
kind of number) is converted to a float, using the @code{float}
function (see (float-fun)).  The advantage of
storing floats in an @code{art-float} array rather than an @code{art-q}
array is that the numbers in an @code{art-float} array are not true Lisp
objects.  Instead the array remembers the numerical value, and when it
is @code{aref}'ed creates a Lisp object (a float) to hold the value.
Because the system does special storage management for bignums and
floats that are intermediate results, the use of @code{art-float} arrays
can save a lot of work for the garbage collector and hence greatly
increase performance.  An intermediate result is a Lisp object passed
as an argument, stored in a local variable, or returned as the value of
a function, but not stored into a special variable, a non-@code{art-float}
array, or list structure.  @code{art-float} arrays also provide a locality
of reference advantage over @code{art-q} arrays containing floats, since
the floats are contained in the array rather than being separate objects
probably on different pages of memory.

@vindex art-fps-float
	The @code{art-fps-float} array type is another special-purpose type
whose elements are floats.  The internal format of this array is compatible
with the PDP-11/VAX single-precision floating-point format.  The primary purpose
of this array type is to interface with the FPS array processor, which can
transfer data directly in and out of such an array.

	Any type of number may be stored into an @code{art-fps-float}
array, but it is, in effect, converted to a float, and then rounded
off to the 24-bit precision of the PDP-11.  If the magnitude of the
number is too large, the largest valid floating-point number is
stored.  If the magnitude is too small, zero is stored.

	When an element of an @code{art-fps-float} array is read, a new
float is created containing the value, just as with an @code{art-float}
array.

@vindex art-complex
	The @code{art-complex} array type is a special purpose type whose
elements are arbitrary numbers, which may be complex numbers.  (Most of
the numeric array types can only hold real numbers.)  As compared with
an ordinary @code{art-q} array, @code{art-complex} provides an advantage in
garbage collection similar to what @code{art-float} provides for floating
point numbers.

@vindex art-complex-float
	The @code{art-complex-float} array type is a special purpose type whose
elements are numbers (real or complex) whose real and imaginary parts
are both floating point numbers.  (If you store a non-floating-point
number into the array, its real and imaginary parts are converted to
floating point.)  This provides maximum advantage in garbage collection
if all the elements you wish to store in the array are numbers with
floating point real and imaginary parts.

@vindex art-complex-fps-float
	The @code{art-complex-fps-float} array type is similar to
@code{art-complex-float} but each real or imaginary part is stored in the
form used by the FPS array processor.  Each element occupies two words,
the first being the real part and the second being the imaginary part.

@vindex art-stack-group-head
@vindex art-reg-pdl
@vindex art-special-pdl
	There are three types of arrays which exist only for the
implementation of @i{stack groups}; these types are called
@code{art-stack-group-head, art-special-pdl}, and @code{art-reg-pdl}.  Their elements
may be any Lisp object; their use is explained in the section on
stack groups (see (stack-group)).
@cindex "stack group"

.defconst array-types
The value of @code{array-types} is a list of all of the array type symbols
such as @code{art-q}, @code{art-4b}, @code{art-string} and so on.  The values
of these symbols are internal array type code numbers for the corresponding
type.
.end_defconst

@defun array-types array-type-code
Given an internal numeric array-type code, returns the symbolic name
of that type.
@end defun

.defconst array-elements-per-q
@code{array-elements-per-q} is an association list (see (alist)) which
associates each array type symbol with the number of array elements
stored in one word, for an array of that type.  If the value is negative,
it is instead the number of words per array element, for arrays whose
elements are more than one word long.
.end_defconst

@defun array-elements-per-q array-type-code
Given the internal array-type code number, returns the number of array
elements stored in one word, for an array of that type.  If the value
is negative, it is instead the number of words per array element, for
arrays whose elements are more than one word long.
@end defun

.defconst array-bits-per-element
The value of @code{array-bits-per-element} is an association list (see (alist))
which associates each array type symbol with the number of
bits of unsigned number it can hold, or @code{nil} if it can
hold Lisp objects.  This can be used to tell whether an array
can hold Lisp objects or not.
.end_defconst

@defun array-bits-per-element array-type-code
Given the internal array-type code numbers, returns the number of bits
per cell for unsigned numeric arrays, or @code{nil} for a type of array
that can contain Lisp objects.
@end defun

@defun array-element-size array
Given an array, returns the number of bits that fit in an element of
that array.  For arrays that can hold general Lisp objects, the result is
25., based on the assumption that you will be storing fixnums in the array.
@end defun

@section  Extra Features of Arrays
@cindex array leader
	Any array may have an @i{array leader}.  An array leader is
like a one-dimensional @code{art-q} array which is attached to the main
array.  So an array which has a leader acts like two arrays joined
together.  The leader can be stored into and examined by a special set
of functions, different from those used for the main array:
@code{array-leader} and @code{store-array-leader}.  The leader is always
one-dimensional, and always can hold any kind of Lisp object,
regardless of the type or rank of the main part of the array.

Very often the main part of an array is used as a homogeneous set of objects,
while the leader is used to remember a few associated non-homogeneous pieces of data.
In this case the leader is not used like an array; each slot is used
differently from the others.  Explicit numeric subscripts should not be
used for the leader elements of such an array; instead the leader should be described
by a @code{defstruct} (see (defstruct-fun)).

	By convention, element 0 of the array leader of an array is used
to hold the number of elements in the array that are ``active''.  When the
zeroth element is used this way, it is called a @i{fill pointer}.
@cindex "fill pointer"
Many array-processing functions recognize the fill pointer.
For instance, if a string (an array of type @code{art-string}) has
seven elements, but its fill pointer contains the value five, then only elements
zero through four of the string are considered to be active; the string's
printed representation is five characters long, string-searching
functions stop after the fifth element, etc.  Fill pointers are
a Common Lisp standard, but the array leader which is the Lisp Machine's
way of implementing them is not standard.

@defun fill-pointer array
Returns the fill pointer of @i{array}, or @code{nil} if it does
not have one.  This function can be used with @code{setf} to set the
array's fill pointer.
@end defun

	The system does not provide a way to turn off the fill-pointer
convention; any array that has a leader must reserve element 0 for the
fill pointer or avoid using many of the array functions.

	Leader element 1 is used in conjunction with the ``named
structure'' feature to associate a user-defined data type with the array; see
(named-structure).  Element 1 is treated specially only if the array is
flagged as a named structure.

@subsection Displaced Arrays
@cindex displaced array
	The following explanation of @i{displaced arrays}
is probably not of interest to a beginner; the section may
be passed over without losing the continuity of the manual.

	Normally, an array is represented as a small amount of header
information, followed by the contents of the array.  However, sometimes
it is desirable to have the header information removed from the actual
contents.  One such occasion is when the contents of the array must be
located in a special part of the Lisp Machine's address space, such as
the area used for the control of input/output devices, or the bitmap
memory which generates the TV image.  Displaced arrays are also used to
reference certain special system tables, which are at fixed addresses
so the microcode can access them easily.

	If you give @code{make-array} a fixnum or a locative
as the value of the @code{:displaced-to} option,
it creates a displaced array referring to that location of virtual memory
and its successors.
References to elements of the displaced array will access that part
of storage, and return the contents; the regular @code{aref} and
@code{aset} functions are used.  If the array is one whose elements
are Lisp objects, caution should be used: if the region of address
space does not contain typed Lisp objects, the integrity of the storage
system and the garbage collector could be damaged.  If the array is one
whose elements are bytes (such as an @code{art-4b} type), then there
is no problem.  It is important to know, in this case, that the elements
of such arrays are allocated from the right to the left within the 32-bit
words.

@cindex indirect array
	It is also possible to have an array whose contents, instead
of being located at a fixed place in virtual memory, are defined
to be those of another array.  Such an array is called an @i{indirect array},
and is created by giving @code{make-array} an array as
the value of the @code{:displaced-to} option.
The effects of this are simple if both arrays have the same type; the two
arrays share all elements.  An object stored in a certain element
of one can be retrieved from the corresponding element of the other.
This, by itself, is not very useful.  However, if the arrays have
different rank, the manner of accessing the elements differs.
Thus, creating a one-dimensional array of nine elements,
indirected to a second, two-dimensional array of three elements by three,
allows access to the elements in either a one-dimensional or
a two-dimensional manner.  Weird effects can be produced if
the new array is of a different type than the old array; this is not
generally recommended.  Indirecting an @code{art-@i{m}b} array to
an @code{art-@i{n}b} array does the obvious thing.  For instance,
if @i{m} is 4 and @i{n} is 1, each element of the first array
contains four bits from the second array, in right-to-left order.

@cindex index offset
	It is also possible to create an indirect array in such a way
that when an attempt is made to reference it or store into it, a
constant number is added to the subscript given.  This number is called
the @i{index-offset}.  It is specified at the time the indirect array
is created, by giving a fixnum to @code{make-array}
as the value of the @code{:displaced-index-offset} option.
The length of the indirect array need not be the full length of
the array it indirects to; it can be smaller.  Thus the indirect array can
cover just a subrange of the original array.
The @code{nsubstring} function (see (nsubstring-fun)) creates such
arrays.  When using index offsets with multi-dimensional arrays, there
is only one index offset; it is added in to the linearized subscript
which is the result of multiplying each subscript by an appropriate
coefficient and adding them together.

@section  Constructing Arrays

@defun vector &rest elements
Constructs and returns a vector (one-dimensional array)
whose elements are the arguments given.
@end defun

@defun make-array dimensions &rest options.
This is the primitive function for making arrays.  @i{dimensions}
should be a list of fixnums which are the dimensions of the array; the
length of the list is the rank of the array.  For
convenience you can specify a single fixnum rather than a list
of one fixnum, when making a one-dimensional array.

@i{options} are alternating keywords and values.  The keywords may be
any of the following:
@table @code
@item :area
The value specifies in which area (see (area)) the array should be created.
It should be either an area number (a fixnum), or @code{nil} to mean the
default area.

@item :type
The value should be a symbolic name of an array type; the most
common of these is @code{art-q}, which is the default.  The elements of the array are
initialized according to the type:  if the array is of a type whose
elements may only be fixnums or floats, then every element of the array is
initially 0 or 0.0; otherwise, every element is initially
@code{nil}.  See the description of array types on (array-type).
The value of the option may also be the value of a symbol which is an array type name
(that is, an internal numeric array type code).
@cindex array initialization

@item :element-type
@i{element-type} is the Common Lisp way to control the type of array made.
Its value is a Common Lisp type specifier (see (type-specifiers)).
The array type used is the most specialized which can allow as an element
anything which fits the type specifier.  For example,
if @i{element-type} is @code{(mod 4)}, you get an @code{art-2b} array.
If @i{element-type} is @code{(mod 3)}, you still get an @code{art-2b} array,
that being the most restrictive which can store the numbers 0, 1 and 2.
If @code{element-type} is @code{string-char}, you get a string.

@item :initial-value
@itemx :initial-element make-array
Specifies the value to be stored in each element of the new
array.  If it is not specified, it is @code{nil} for arrays that can
hold arbitrary objects, or 0 or 0.0 for numeric arrays.
@code{:initial-value} is obsolete.

@item :initial-contents
Specifies the entire contents for the new array, as a sequence of
sequences of sequences...  Array element 1 3 4 of a three-dimensional
array would be @code{(elt (elt (elt @i{initial-contents} 1) 3) 4)}.  Recall
that a sequence is either a list or a vector, and vectors include
strings.

@item :displaced-to
If this is not @code{nil}, a @i{displaced} array is constructed.
If the value is a fixnum or a locative, @code{make-array} creates a
regular displaced array which refers to the specified section of virtual
address space.
If the value is an array, @code{make-array} creates
an indirect array (see (indirect-array)).
@cindex displaced array
@cindex indirect array

@item :leader-length
The value should be a fixnum.  The array is made with a leader
containing that many elements.  The elements of the leader are
initialized to @code{nil} unless the @code{:leader-list} option is given (see
below).

@item :leader-list
The value should be a list.  Call the number of elements in the list @i{n}.
The first @i{n} elements of the leader are initialized from successive
elements of this list.  If the @code{:leader-length} option is not specified,
then the length of the leader is @i{n}.  If the @code{:leader-length}
option is given, and its value is greater than @i{n}, then the @i{n}th
and following leader elements are initialized to @code{nil}.  If its value
is less than @i{n}, an error is signaled.  The leader elements are
filled in forward order; that is, the car of the list is stored
in leader element 0, the cadr in element 1, and so on.

@item :fill-pointer
The value should be a fixnum.  The array is made with a leader
containing at least one element, and this fixnum is used to initialize
that first element.

Using the @code{:fill-pointer} option is equivalent to using
@code{:leader-list} with a list one element long.  It avoids consing the list,
and is also compatible with Common Lisp.

@item :displaced-index-offset
If this is present, the value of the @code{:displaced-to} option should be an
array, and the value should be a non-negative fixnum; it is made to be the
index-offset of the created indirect array. (See (index-offset).)
@cindex index offset

@item :named-structure-symbol
If this is not @code{nil}, it is a symbol to
be stored in the named-structure cell of the array.  The array
made is tagged as a named structure (see (named-structure).)  If
the array has a leader, then this symbol is stored in leader element
1 regardless of the value of the @code{:leader-list} option.  If the array
does not have a leader, then this symbol is stored in array element zero.
Array leader slot 1, or array element 0, cannot be used for anything
else in a named structure.

@item :adjustable-p
In strict Common Lisp, a non-@code{nil} value for this keyword makes the
array @i{adjustable}, which means that it is permissible to change the
array's size with @code{adjust-array} ((adjust-array-fun)).  This is
because other Lisp systems have multiple representations for arrays, one
which is simple and fast to access, and another which can be adjusted.
The Lisp Machine does not require two representations: any array's size
may be changed, and this keyword is ignored.
@end table

@lisp
@exdent Examples:
1;; Create a one-dimensional array of five elements.*
(make-array 5)
1;; Create a two-dimensional array,*
1;; three by four, with four-bit elements.*
(make-array '(3 4) :type 'art-4b)
1;; Create an array with a three-element leader.*
(make-array 5 :leader-length 3)
1;; Create an array containing 5 @code{t}'s,*
1;; and a fill pointer saying the array is full.*
(make-array 5 :initial-value t :fill-pointer 5)
1;; Create a named-structure with five leader*
1;; elements, initializing some of them.*
(setq b (make-array 20 :leader-length 5 
		       :leader-list '(0 nil foo)
		       :named-structure-symbol 'bar))
(array-leader b 0) => 0
(array-leader b 1) => bar
(array-leader b 2) => foo
(array-leader b 3) => nil
(array-leader b 4) => nil
@cindex array leader
@end lisp

	@code{make-array} returns the newly-created array, and also
returns, as a second value, the number of words allocated in the process
of creating the array, i.e. the @code{%structure-total-size} of the array.

When @code{make-array} was originally implemented, it took its arguments
in the following fixed pattern:
@lisp
   (make-array @i{area} @i{type} @i{dimensions}
               &optional @i{displaced-to} @i{leader}
			 @i{displaced-index-offset}
			 @i{named-structure-symbol})
@end lisp
@i{leader} was a combination of the @code{:leader-length} and @code{:leader-list}
options, and the list was in reverse order.
This obsolete form is still supported so that old programs will continue
to work, but the new keyword-argument form is preferred.
@end defun

@section  Accessing Array Elements

@defun aref array &rest subscripts
Returns the element of @i{array} selected by the @i{subscripts}.
The @i{subscripts} must be fixnums and their number must match the
rank of @i{array}.
@end defun

@defun cli:aref array &rest subscripts
The Common Lisp version of @code{aref} differs from the traditional one in
that it returns a character object rather than an integer when @i{array}
is a string.  See chapter (string-chapter) for a discussion of the data
type of string elements.
@end defun

@defun aset x array &rest subscripts
Stores @i{x} into the element of @i{array} selected by the @i{subscripts}.
The @i{subscripts} must be fixnums and their number must match the
rank of @i{array}.  The returned value is @i{x}.

@code{aset} is equivalent to
@lisp
(setf (aref @i{array} @i{subscripts}...) @i{x})
@end lisp
@end defun

@defun aloc array &rest subscripts
Returns a locative pointer to the element-cell of @i{array} selected by
the @i{subscripts}.  The @i{subscripts} must be fixnums and their
number must match the rank of @i{array}.  The array must not be
a numeric array, since locatives to the middle of a numeric array
are not allowed.
See the explanation of locatives in (locative).

It is equivalent, and preferable, to write
@lisp
(locf (aref @i{array} @i{subscripts}...))
@end lisp
@end defun

@defun ar-1-force array i
@defunx as-1-force value array i
@defunx ap-1-force array i
These functions access an array with a single subscript regardless of
how many dimensions the array has.  They may be useful for manipulating
arrays of varying rank, as an alternative to maintaining and updating
lists of subscripts or to creating one-dimensional indirect arrays.
@code{ar-1-force} refers to an element,
@code{as-1-force} sets an element, and @code{ap-1-force} returns a locative
to the element's cell.

In using these functions, you must pay attention to the order in which
the array elements are actually stored.  See
(array-element-order-section).
@end defun

@defun array-row-major-index array &rest indices
Calculates the cumulative index in @i{array} of the element at indices @i{indices}.
@lisp
(ar-1-force @i{array}
   (array-row-major-index @i{array} @i{indices}...))
@end lisp
is equivalent to @code{(aref @i{array} @i{indices}...)}.
@end defun

@defun array-leader array i
@i{array} should be an array with a leader, and @i{i} should be a
fixnum.  This returns the @i{i}th element of @i{array}'s leader.
This is analogous to @code{aref}.
@end defun

@defun store-array-leader x array i
@i{array} should be an array with a leader, and @i{i} should be a
fixnum.  @i{x} may be any object.  @i{x} is stored in the @i{i}th element
of @i{array}'s leader.  @code{store-array-leader} returns @i{x}.
This is analogous to @code{aset}.

It is equivalent, and preferable, to write
@lisp
(setf (array-leader @i{array} @i{i}) @i{x})
@end lisp
@end defun

@defun ap-leader array i
Is equivalent to
@lisp
(locf (array-leader @i{array} @i{i}))
@end lisp
@end defun

@noindent
The following array accessing functions generally need not be used
by users.

@defun ar-1 array i
@defunx ar-2 array i j
@defunx ar-3 array i j k
@defunx as-1 x array i
@defunx as-2 x array i j
@defunx as-3 x array i j k
@defunx ap-1 array i
@defunx ap-2 array i j
@defunx ap-3 array i j k
These are obsolete versions of @code{aref}, @code{aset} and @code{aloc} that
only work for one-, two-, or three-dimensional arrays, respectively.
@end defun

The compiler turns @code{aref} into @code{ar-1}, @code{ar-2}, etc. according to
the number of subscripts specified, turns @code{aset} into @code{as-1},
@code{as-2}, etc., and turns @code{aloc} into @code{ap-1}, @code{ap-2}, etc.  For
arrays with more than three dimensions the compiler uses the slightly
less efficient form since the special routines only exist for one, two
and three dimensions.  There is no reason for any program to call
@code{ar-1}, @code{as-1}, @code{ar-2}, etc.  explicitly; they are documented
because there used to be such a reason, and many old programs use these
functions.  New programs should use @code{aref}, @code{aset}, and @code{aloc}.

A related function, provided only for Maclisp compatibility, is
@code{arraycall} ((arraycall-fun)).

@defun svref vector index
A special accessing function defined by Common Lisp to work only on
simple general vectors: vectors with no fill pointer, not displaced, and
not adjustable (see (adjustable-array)).  Some other Lisp systems open
code @code{svref} so that it is faster than @code{aref}, but on the Lisp
Machine @code{svref} is a synonym for @code{cli:aref}.
@end defun

@defun bit bit-vector index
@defunx sbit bit-vector index
@defunx char bit-vector index
@defunx schar bit-vector index
Special accessing functions defined to work only on bit vectors, only on
simple bit vectors, only on strings, and only on simple strings, respectively.
On the Lisp Machine they are all synonyms for @code{cli:aref}.
@end defun

@noindent
Here are the conditions signaled for various errors in accessing arrays.

.defcondition sys:array-has-no-leader (@code{sys:bad-array-mixin} @code{error})
This is signaled on a reference to the leader of an array that doesn't
have one.  The condition instance supports the @code{:array} operation,
which returns the array that was used.

The @code{:new-array} proceed-type is provided.
.end_defcondition

.defflavor-condition sys:bad-array-mixin
This mixin is used in the conditions signaled by several kinds of
problems pertaining to arrays.  It defines prompting for the
@code{:new-array} proceed type.
.end_defflavor-condition

.defcondition sys:array-wrong-number-of-dimensions (@code{sys:bad-array-mixin} @code{error})
This is signaled when an array is referenced (either reading or writing)
with the wrong number of subscripts; for example, @code{(aref "foo" 1 2)}.

The @code{:array} operation on the condition instance returns the array
that was used.  The @code{:subscripts-used} operation returns the
list of subscripts used.

The @code{:new-array} proceed type is provided.  It expects one argument,
an array to use instead of the original one.
.end_defcondition

.defcondition sys:subscript-out-of-bounds (@code{error})
This is signaled when there are the right number of subscripts but their
values specify an element that falls outside the bounds of the array.
The same condition is used by @code{sys:%instance-ref}, etc., when the
index is out of bounds in the instance.

The condition instance supports the operations @code{:object} and
@code{:subscripts-used}, which return the array or instance and the list of
subscripts.

The @code{:new-subscript} proceed type is provided.  It takes an
appropriate number of subscripts as arguments.  You should provide as
many subscripts as there originally were.
.end_defcondition

.defcondition sys:number-array-not-allowed (@code{sys:bad-array-mixin} @code{error})
This is signaled by an attempt to use @code{aloc} on a numeric array
such as an @code{art-1b} array or a string.
The @code{:array} operation and the @code{:new-array} proceed type are available.
.end_defcondition

@section  Getting Information About an Array

@defun array-type array
Returns the symbolic type of @i{array}.
@lisp
@exdent Example:
(setq a (make-array '(3 5)))
(array-type a) => art-q
@end lisp
@end defun

@defun array-element-type array
Returns a type specifier which describes what elements could be stored in
@i{array} (see (type-specifiers) for more about type specifiers).  Thus, if
@i{array} is a string, the value is @code{string-char}.  If @i{array} is an
@code{art-1b} array, the value is @code{bit}.  If @i{array} is an @code{art-2b}
array, the value is @code{(mod 4)}.  If array is an @code{art-q} array,
the value is @code{t} (the type which all objects belong to).
@end defun

@defun array-length array
@defunx array-total-size array
@i{array} may be any array.  This returns the total number
of elements in @i{array}.  For a one-dimensional array,
this is one greater than the maximum allowable subscript.
(But if fill pointers are being used, you may want to use
@code{array-active-length}.)
@lisp
@exdent Example:
(array-length (make-array 3)) => 3
(array-length (make-array '(3 5))) => 15
@end lisp
@code{array-total-size} is the Common Lisp name of this function.
@end defun

@defun array-active-length array
If @i{array} does not have a fill pointer, then this returns whatever
@code{(array-length @i{array})} would have.  If @i{array} does have a
fill pointer, @code{array-active-length} returns it.  See the general
explanation of the use of fill pointers on (fill-pointer).
@end defun

@defun array-rank array
Returns the number of dimensions of @i{array}.
@lisp
@exdent Example:
(array-rank (make-array '(3 5))) => 2
@end lisp
@end defun

@defun array-dimension array n
Returns the length of dimension @i{n} of @i{array}.  Examples:
@lisp
(setq a (make-array '(2 3)))
(array-dimension a 0) => 2
(array-dimension a 1) => 3
@end lisp
@end defun

@defun array-dimension-n n array
@i{array} may be any kind of array, and @i{n} should be a fixnum.
If @i{n} is between 1 and the rank of @i{array},
this returns the @i{n}th dimension of @i{array}.  If @i{n} is 0,
this returns the length of the leader of @i{array}; if @i{array} has no
leader it returns @code{nil}.  If @i{n} is any other value, this
returns @code{nil}.

This function is obsolete; use @code{array-dimension-n},
whose calling sequence is cleaner.
@lisp
@exdent Examples:
(setq a (make-array '(3 5) :leader-length 7))
(array-dimension-n 1 a) => 3
(array-dimension-n 2 a) => 5
(array-dimension-n 3 a) => nil
(array-dimension-n 0 a) => 7
@end lisp
@end defun

@defun array-dimensions array
Returns a list whose elements are the dimensions
of @i{array}.
@lisp
@exdent Example:
(setq a (make-array '(3 5)))
(array-dimensions a) => (3 5)
@end lisp
Note: the list returned by @code{(array-dimensions @i{x})} is
equal to the cdr of the list returned by @code{(arraydims @i{x})}.
@end defun

@defun arraydims array
Returns a list whose first element is the symbolic name of
the type of @i{array}, and whose remaining elements are its dimensions.
@i{array} may be any array; it also may be a symbol whose
function cell contains an array, for Maclisp compatibility (see (maclisp-array)).
@lisp
@exdent Example:
(setq a (make-array '(3 5)))
(arraydims a) => (art-q 3 5)
@end lisp

@code{arraydims} is for Maclisp compatibility only.
@end defun

@defun array-in-bounds-p array &rest subscripts
@code{t} if @i{subscripts} is a legal
set of subscripts for @i{array}, otherwise @code{nil}.
@end defun

@defun array-displaced-p array
@code{t} if @i{array} is any kind of displaced array
(including an indirect array), otherwise @code{nil}.
@i{array} may be any kind of array.
@end defun

@defun array-indirect-p array
@code{t} if @i{array} is an indirect array, otherwise @code{nil}.
@i{array} may be any kind of array.
@end defun

@defun array-indexed-p array
@code{t} if @i{array} is an indirect array with an index-offset,
otherwise @code{nil}.
@i{array} may be any kind of array.
@end defun

@defun array-index-offset array
Returns the index offset of @i{array} if it is an indirect
array which has an index offset.  Otherwise it returns @code{nil}.
@i{array} may be any kind of array.
@end defun

@defun array-has-fill-pointer-p array
@code{t} if array has a fill pointer.  It must have a leader and leader
element 0 must be an integer.  While array leaders are not standard
Common Lisp, fill pointers are, and so is this function.
@end defun

@defun array-has-leader-p array
@code{t} if @i{array} has a leader, otherwise @code{nil}.
@end defun

@defun array-leader-length array
Returns the length of @i{array}'s leader if it has one, or @code{nil} if it
does not.
@end defun

@defun adjustable-array-p array
According to Common Lisp, returns @code{t} if @i{array}'s size may be
adjusted with @code{adjust-array} (see below).  On the Lisp Machine,
this function always returns @code{t}.
@end defun

@section  Changing the Size of an Array

@defun adjust-array array new-dimensions &key element-type initial-element initial-contents fill-pointer displaced-to displaced-index-offset
Modifies various aspects of an array.  @i{array} is modified in place if that is possible;
otherwise, a new array is created and @i{array} is forwarded to it.  In either case,
@i{array} is returned.  The arguments have the same names as arguments
to @code{make-array}, and signify approximately the same thing.  However:

@i{element-type} is just an error check.  @code{adjust-array} cannot change
the array type.  If the array type of @i{array} is not what
@i{element-type} would imply, you get an error.

If @i{displaced-to} is specified, the new array is displaced as specified by
@i{displaced-to} and @i{displaced-index-offset}.  If @i{array} itself was
already displaced, it is modified in place provided that either @i{array}
used to have an index offset and is supposed to continue to have one,
or @i{array} had no index offset and is not supposed to have one.

Otherwise, if @i{initial-contents} was specified, it is used to set all
the contents of the array.  The old contents of @i{array} are irrelevant.

Otherwise, each element of @i{array} is copied forward into the new array
to the slot with the same indices, if there is one.  Any new slots whose
indices were out of range in @i{array} are initialized to
@i{initial-element}, or to @code{nil} or 0 if @i{initial-element} was not
specified.

@i{fill-pointer}, if specified, is used to set the fill pointer of the
array.  Aside from this, the result has a leader with the same contents
as the original @i{array}.

@code{adjust-array} is the only function in this section which is standard
Common Lisp.  According to Common Lisp, an array's dimensions can be
adjusted only if the @code{:adjustable} option was specified to
@code{make-array} with a non-@code{nil} value when the array was created
(see (adjustable-array)).  The Lisp Machine does not distinguish
adjustable and nonadjustable arrays; any array may be adjusted.
@end defun

@defun adjust-array-size array new-size
If @i{array} is a one-dimensional array, its size is
changed to be @i{new-size}.  If @i{array} has more than one
dimension, its size (@code{array-length}) is changed to @i{new-size}
by changing only the last dimension.

If @i{array} is made smaller, the extra elements are lost; if @i{array}
is made bigger, the new elements are initialized in the same fashion as
@code{make-array} (see (make-array-fun)) would initialize them: either to @code{nil} or 0,
depending on the type of array.
@lisp
@exdent Example:
(setq a (make-array 5))
(aset 'foo a 4)
(aref a 4) => foo
(adjust-array-size a 2)
(aref a 4) => 1an error occurs*
@end lisp
	If the size of the array is being increased,
@code{adjust-array-size} may have to allocate a new array somewhere.  In
that case, it alters @i{array} so that references to it will be made to
the new array instead, by means of invisible pointers (see
@code{structure-forward}, (structure-forward-fun)).
@code{adjust-array-size} returns the new array if it creates one, and
otherwise it returns @i{array}.  Be careful to be consistent about
using the returned result of @code{adjust-array-size}, because you may end
up holding two arrays which are not the same (i.e. not @code{eq}), but
which share the same contents.
@end defun

@defun array-grow array &rest dimensions
Equivalent to @code{(adjust-array @i{array} @i{dimensions})}.
This name is obsolete.
@end defun

@defun si:change-indirect-array array type dimlist displaced-p index-offset
Changes an indirect array @i{array}'s type, size, or target pointed at.
@i{type} specifies the new array type, @i{dimlist} its new dimensions,
@i{displaced-p} the target it should point to (an array, locative or fixnum),
and @i{index-offset} the new offset in the new target.

@i{array} is returned.
@end defun

@section  Arrays Overlaid With Lists

These functions manipulate @code{art-q-list} arrays, which were
introduced on (art-q-list-var).

@defun g-l-p array
@c This will probably be renamed, if anyone can think of a better name
@i{array} should be an @code{art-q-list} array.  This returns
a list which shares the storage of @i{array}.
@lisp
@exdent Example:
(setq a (make-array 4 :type 'art-q-list))
(aref a 0) => nil
(setq b (g-l-p a)) => (nil nil nil nil)
(rplaca b t)
b => (t nil nil nil)
(aref a 0) => t
(aset 30 a 2)
b => (t nil 30 nil)
@end lisp

@code{g-l-p} stands for `get list pointer'.
@end defun

@noindent
The following two functions work strangely, in the same way that @code{store}
does, and should not be used in new programs.

@defun get-list-pointer-into-array array-ref
@c This will probably be renamed, if anyone can think of a better name
The argument @i{array-ref} is ignored, but should be a reference
to an @code{art-q-list} array by applying the array to subscripts (rather
than by @code{aref}).  This returns a list object which
is a portion of the ``list'' of the array, beginning with the last
element of the last array which has been called as a function.
@end defun

@defun get-locative-pointer-into-array array-ref
@c This will probably be flushed?
@code{get-locative-pointer-into-array} is
similar to @code{get-list-pointer-into-array}, except that it returns a
locative, and doesn't require the array to be @code{art-q-list}.
Use @code{locf} of @code{aref} in new programs.
@end defun

@section  Adding to the End of an Array

@defun vector-push x array
@defunx array-push array x
@i{array} must be a one-dimensional array which has a fill pointer and @i{x} may
be any object.  @code{vector-push} attempts to store @i{x} in the element
of the array designated by the fill pointer, and increase the fill pointer
by one.  If the fill pointer does not designate an element of the array (specifically,
when it gets too big), it is unaffected and @code{vector-push} returns @code{nil};
otherwise, the two actions (storing and incrementing) happen uninterruptibly,
and @code{vector-push} returns the @i{former} value of the fill pointer,
i.e. the array index in which it stored @i{x}.  If the array is of type
@code{art-q-list}, an operation similar to @code{nconc} has taken place,
in that the element has been added to the list by changing the cdr of
the formerly last element.  The cdr-coding is updated to ensure this.

@code{array-push} is an old name for this function.  @code{vector-push} is
preferable because it takes arguments in an order like @code{push}.
@end defun

@defun vector-push-extend x array &optional extension
@defunx array-push-extend array x &optional extension
@code{vector-push-extend} is just like @code{vector-push} except
that if the fill pointer gets too large, the array grows
to fit the new element; it never ``fails'' the way @code{vector-push} does,
and so never returns @code{nil}.  @i{extension} is the number of
elements to be added to the array if it needs to grow.  It defaults
to something reasonable, based on the size of the array.

@code{array-push-extend} differs only in the order of arguments,
@end defun

@defun vector-pop array
@defunx array-pop array
@i{array} must be a one-dimensional array which has a fill pointer.
The fill pointer is decreased by one and the array element
designated by the new value of the fill pointer is returned.
If the new value does not designate any element of the array
(specifically, if it had already reached zero), an error is caused.
The two operations (decrementing and array referencing) happen
uninterruptibly.  If the array is of type @code{art-q-list}, an operation
similar to @code{nbutlast} has taken place.  The cdr-coding is
updated to ensure this.

The two names are synonymous.
@end defun

.defcondition sys:fill-pointer-not-fixnum (@code{sys:bad-array-mixin} @code{error})
This is signaled when one of the functions in this section is used with
an array whose leader element zero is not a fixnum.  Most other array
accessing operations simply assume that the array has no fill
pointer in such a case, but these cannot be performed without a fill
pointer.

The @code{:array} operation on the condition instance returns the array
that was used.  The @code{:new-array} proceed type is supported, with one
argument, an array.
.end_defcondition

@section  Copying an Array

The new functions @code{replace} ((replace-fun))
and @code{fill} ((fill-fun)) are useful ways to
copy parts of arrays.

@defun array-initialize array value &optional start end
Stores @i{value} into all or part of @i{array}.
@i{start} and @i{end} are optional indices which delimit the
part of @i{array} to be initialized.  They default to the beginning
and end of the array.

This function is by far the fastest way to do the job.
@end defun

@defun fillarray array x
	@i{array} may be any type of array, or, for Maclisp
compatibility, a symbol whose function cell contains an array.  It can
also be @code{nil}, in which case an array of type @code{art-q} is created.
There are two forms of this function, depending on the type of @i{x}.

	If @i{x} is a list, then @code{fillarray} fills up @i{array} with
the elements of @i{list}.  If @i{x} is too short to fill up all of
@i{array}, then the last element of @i{x} is used to fill the
remaining elements of @i{array}.  If @i{x} is too long, the extra
elements are ignored.  If @i{x} is @code{nil} (the empty list), @i{array}
is filled with the default initial value for its array type (@code{nil} or 0).

	If @i{x} is an array (or, for Maclisp compatibility, a symbol
whose function cell contains an array), then the elements of @i{array} are
filled up from the elements of @i{x}.  If @i{x} is too small, then
the extra elements of @i{array} are not affected.

	If @i{array} is multi-dimensional, the elements are accessed
in row-major order: the last subscript varies the most quickly.
The same is true of @i{x} if it is an array.

	@code{fillarray} returns @i{array}; or, if @i{array} was
@code{nil}, the newly created array.
@end defun

@defun listarray array &optional limit
	@i{array} may be any type of array, or, for Maclisp
compatibility, a symbol whose function cell contains an array.  
@code{listarray} creates and returns a list whose elements are those of
@i{array}.  If @i{limit} is present, it should be a fixnum, and only
the first @i{limit} (if there are more than that many) elements of
@i{array} are used, and so the maximum length of the returned list is
@i{limit}. 
	If @i{array} is multi-dimensional, the elements are accessed
in row-major order: the last subscript varies the most quickly.
@end defun

@defun list-array-leader array &optional limit
@i{array} may be any type of array, or, for Maclisp
compatibility, a symbol whose function cell contains an array.  
@code{list-array-leader} creates and returns a list whose elements are those of
@i{array}'s leader.  If @i{limit} is present, it should be a fixnum, and only
the first @i{limit} (if there are more than that many) elements of
@i{array}'s leader are used, and so the maximum length of the returned list is
@i{limit}. If @i{array} has no leader, @code{nil} is returned.
@end defun

@defun copy-array-contents from to
@i{from} and @i{to} must be arrays.  The contents of @i{from}
is copied into the contents of @i{to}, element by element.
If @i{to} is shorter than @i{from},
the rest of @i{from} is ignored.  If @i{from} is shorter than
@i{to}, the rest of @i{to} is filled with @code{nil}, 0 or 0.0
according to the type of array.
This function always returns @code{t}.

The entire length of @i{from} or @i{to} is used, ignoring the fill
pointers if any.  The leader itself is not copied.

@code{copy-array-contents} works on multi-dimensional arrays.  @i{from} and
@i{to} are linearized subscripts, and elements are taken in row-major
order.
@end defun

@defun copy-array-contents-and-leader from to
Like @code{copy-array-contents}, but also copies the leader of @i{from}
(if any) into @i{to}.
@end defun

@defun copy-array-portion from-array from-start from-end to-array to-start to-end
The portion of the array @i{from-array} with indices greater than or
equal to @i{from-start} and less than @i{from-end} is copied into
the portion of the array @i{to-array} with indices greater than or
equal to @i{to-start} and less than @i{to-end}, element by element.
If there are more elements in the selected portion of @i{to-array}
than in the selected portion of @i{from-array}, the extra elements
are filled with the default value as by @code{copy-array-contents}.
If there are more elements in the selected portion of @i{from-array},
the extra ones are ignored.  Multi-dimensional arrays are treated
the same way as @code{copy-array-contents} treats them.
This function always returns @code{t}.
@end defun

@noindent
@code{%blt} and @code{%blt-typed} ((%blt-fun)) are often useful for copying
parts of arrays.  They can be used to shift a part of an array either up
or down.

@section  Bit Array Functions

These functions perform bitwise boolean operations on the elements
of arrays.

@defun bit-and bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-ior bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-xor bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-eqv bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-nand bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-nor bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-andc1 bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-andc2 bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-orc1 bit-array-1 bit-array-2 &optional result-bit-array
@defunx bit-orc2 bit-array-1 bit-array-2 &optional result-bit-array
Perform boolean operations element by element on bit arrays.  The
arguments must match in their size and shape, and all of their elements
must be integers.  Corresponding elements of @i{bit-array-1} and
@i{bit-array-2} are taken and passed to one of @code{logand}, @code{logior},
etc. to get an element of the result array.

If the third argument is non-@code{nil}, the result bits are stored into it,
modifying it destructively.  If it is @code{t}, the results are stored in
@i{bit-array-1}.  Otherwise a new array of the same type as
@i{bit-array-1} is created and used for the result.  In any case, the
value returned is the array where the results are stored.

These functions were introduced for the sake of Common Lisp, which
defines them only when all arguments are specialized arrays that hold
only zero or one.  In the Lisp machine, they accept not only such arrays
(@code{art-1b} arrays) but any arrays whose elements are integers.
@end defun

@defun bit-not bit-array &optional result-bit-array
Performs @code{lognot} on each element of @i{bit-array} to get an element of
the result.  If @i{result-bit-array} is non-@code{nil}, the result elements
are stored in that; it must match @i{bit-array} in size and shape.
Otherwise, a new array of the same type as @i{bit-array} is created and
used to hold the result.  The value of @code{bit-not} is the array where the
results are stored.
@end defun

@defun bitblt alu width height from-array from-x from-y to-array to-x to-y
@i{from-array} and @i{to-array} must be two-dimensional arrays
of bits or bytes (@code{art-1b}, @code{art-2b}, @code{art-4b}, @code{art-8b},
@code{art-16b}, or @code{art-32b}).  @code{bitblt} copies a rectangular portion of @i{from-array}
into a rectangular portion of @i{to-array}.  The value stored
can be a Boolean function of the new value and the value already there,
under the control of @i{alu} (see below).  This function is most commonly used
in connection with raster images for TV displays.

The top-left corner of the source rectangle is @code{(ar-2-reverse
@i{from-array} @i{from-x} @i{from-y})}.  The top-left corner of the
destination rectangle is @code{(ar-2-reverse @i{to-array} @i{to-x}
@i{to-y})}.  @i{width} and @i{height} are the dimensions of both
rectangles.  If @i{width} or @i{height} is zero, @code{bitblt} does
nothing.  The @i{x} coordinates and @i{width} are used as the second
dimension of the array, since the horizontal index is the one which
varies fastest in the screen buffer memory and the array's last index
varies fastest in row-major order.

@i{from-array} and @i{to-array} are allowed to be the same array.
@code{bitblt} normally traverses the arrays in increasing order of @i{x}
and @i{y} subscripts.  If @i{width} is negative, then @code{(abs @i{width})}
is used as the width, but the processing of the @i{x} direction is done
backwards, starting with the highest value of @i{x} and working down.
If @i{height} is negative it is treated analogously.  When
@code{bitblt}'ing an array to itself, when the two rectangles overlap, it
may be necessary to work backwards to achieve effects such
as shifting the entire array downwards by a certain number of rows.  Note
that negativity of @i{width} or @i{height} does not affect the
(@i{x}, @i{y}) coordinates specified by the arguments, which are still the
top-left corner even if @code{bitblt} starts at some other corner.

If the two arrays are of different types, @code{bitblt} works bit-wise
and not element-wise.  That is, if you @code{bitblt} from an @code{art-2b}
array into an @code{art-4b} array, then two elements of the @i{from-array}
correspond to one element of the @i{to-array}.

If @code{bitblt} goes outside the bounds of the source array, it wraps
around.  This allows such operations as the replication of a small
stipple pattern through a large array.  If @code{bitblt} goes outside
the bounds of the destination array, it signals an error.

If @i{src} is an element of the source rectangle, and @i{dst}
is the corresponding element of the destination rectangle, then
@code{bitblt} changes the value of @i{dst} to
@code{(boole @i{alu} @i{src} @i{dst})}.  See the @code{boole}
function ((boole-fun)).  There are symbolic names for some of the
most useful @i{alu} functions; they are @code{tv:alu-seta} (plain
copy), @code{tv:alu-ior} (inclusive or), @code{tv:alu-xor} (exclusive
or), and @code{tv:alu-andca} (and with complement of source).

@code{bitblt} is written in highly-optimized microcode and goes very much
faster than the same thing written with ordinary @code{aref} and @code{aset}
operations would.  Unfortunately this causes @code{bitblt} to have a couple
of strange restrictions.  Wrap-around does not work correctly if
@i{from-array} is an indirect array with an index-offset.  @code{bitblt}
signals an error if the second dimensions of @i{from-array}
and @i{to-array} are not both integral multiples of the machine word
length.  For @code{art-1b} arrays, the second dimension must be a multiple
of 32., for @code{art-2b} arrays it must be a multiple of 16., etc.
@end defun

@section  Order of Array Elements
Currently, multi-dimensional arrays are stored in row-major order, as
in Maclisp., and as specified by Common Lisp.  This means that
successive memory locations differ in the last subscript.  In older
versions of the system, arrays were stored in column-major order.

Most user code has no need to know about which order array elements are
stored in.  There are three known reasons to care: use of
multidimensional indirect arrays; paging efficiency
(if you want to reference every element in a
multi-dimensional array and move linearly through memory to improve
locality of reference, you must vary the last subscript fastest
in row-major order);
and access to the TV screen or to arrays of pixels copied to or from the
screen with @code{bitblt}.  The latter is the most important one.

The bits on the screen are actually stored in rows, which means that the
dimension that varies fastest has to be the horizontal position.  As a
result, if arrays are stored in row-major order, the horizontal position
must be the second subscript, but if arrays are stored in column-major
order, the horizontal position must be the first subscript.  To ease the
conversion of code that uses arrays of pixels, several bridging
functions are provided:

@defun make-pixel-array width height &rest options
This is like @code{make-array} except that the dimensions of the array are
@i{width} and @i{height}, in whichever order is correct.  @i{width} is
used as the dimension in the subscript that varies fastest in memory,
and @i{height} as the other dimension.  @i{options} are passed along to
@code{make-array} to specify everything but the size of the array.
@end defun

@defun pixel-array-width array
Returns the extent of @i{array}, a two-dimensional array, in the
dimension that varies faster through memory.  For a screen array, this
is always the width.
@end defun

@defun pixel-array-height array
Returns the extent of @i{array}, a two-dimensional array, in the
dimension that varies slower through memory.  For a screen array, this
is always the height.
@end defun

@defun ar-2-reverse array horizontal-index vertical-index
Returns the element of @i{array} at @i{horizontal-index} and
@i{vertical-index}.  @i{horizontal-index} is used as the subscript in
whichever dimension varies faster through memory.
@end defun

@defun as-2-reverse newvalue array horizontal-index vertical-index
Stores @i{newvalue} into the element of @i{array} at
@i{horizontal-index} and @i{vertical-index}.  @i{horizontal-index} is
used as the subscript in whichever dimension varies faster through
memory.
@end defun

Code that was written before the change in order of array indices can be
converted by replacing calls to @code{make-array}, @code{array-dimension},
@code{aref} and @code{aset} with these functions.  It can then work either in
old systems or in new ones.  In more complicated circumstances, you can
facilitate conversion by writing code which tests this variable.

.defconst sys:array-index-order
This is @code{t} in more recent system versions which store arrays in
row-major order (last subscript varies fastest).  It is @code{nil} in older
system versions which store arrays in column-major order.
.end_defconst

@section  Matrices and Systems of Linear Equations

The functions in this section perform some useful matrix operations.
The matrices are represented as two-dimensional Lisp arrays.  These
functions are part of the mathematics package rather than the kernel
array system, hence the `@code{math:}' in the names.

@defun math:multiply-matrices matrix-1 matrix-2 &optional matrix-3
Multiplies @i{matrix-1} by @i{matrix-2}.  If @i{matrix-3} is supplied,
@code{multiply-matrices} stores the results into @i{matrix-3} and returns
@i{matrix-3}, which should be of exactly the right dimensions for
containing the result of the multiplication; otherwise it creates an
array to contain the answer and returns that.  All matrices must be
either one- or two-dimensional arrays, and the first dimension of
@i{matrix-2} must equal the second dimension of @i{matrix-1}.
@end defun

@defun math:invert-matrix matrix &optional into-matrix
Computes the inverse of @i{matrix}.  If @i{into-matrix} is supplied,
stores the result into it and returns it; otherwise it creates an array
to hold the result and returns that.  @i{matrix} must be two-dimensional
and square.  The Gauss-Jordan algorithm with partial pivoting is used.
Note: if you want to solve a set of simultaneous equations, you should
not use this function; use @code{math:decompose} and @code{math:solve} (see
below).
@end defun

@defun math:transpose-matrix matrix &optional into-matrix
Transposes @i{matrix}.  If @i{into-matrix} is supplied, stores the
result into it and returns it; otherwise it creates an array to hold the
result and returns that.  @i{matrix} must be a two-dimensional array.
@i{into-matrix}, if provided, must be two-dimensional and have
exactly the right dimensions to hold the transpose of @i{matrix}.
@end defun

@defun math:determinant matrix
Returns the determinant of @i{matrix}.  @i{matrix} must be a two-dimensional
square matrix.
@end defun

The next two functions are used to solve sets of simultaneous linear
equations.  @code{math:decompose} takes a matrix holding the coefficients of the
equations and produces the LU decomposition; this decomposition can then
be passed to @code{math:solve} along with a vector of right-hand sides
to get the values of the variables.  If you want to solve the same
equations for many different sets of right-hand side values, you only need to call
@code{math:decompose} once.  In terms of the argument names used below, these
two functions exist to solve the vector equation @i{A} @i{x} = @i{b}
for @i{x}.  @i{A} is a matrix.  @i{b} and @i{x} are vectors.

@defun math:decompose a &optional lu ps
Computes the LU decomposition of matrix @i{a}.  If @i{lu} is non-@code{nil},
stores the result into it and returns it; otherwise it creates an array
to hold the result, and returns that.  The lower triangle of @i{lu}, with
ones added along the diagonal, is L, and the upper triangle of @i{lu} is
U, such that the product of L and U is @i{a}.  Gaussian elimination with
partial pivoting is used.  The @i{lu} array is permuted by rows according
to the permutation array @i{ps}, which is also produced by this function;
if the argument @i{ps} is supplied, the permutation array is stored into it;
otherwise, an array is created to hold it.  This function returns two values,
the LU decomposition and the permutation array.
@end defun

@defun math:solve lu ps b &optional x
This function takes the LU decomposition and associated permutation
array produced by @code{math:decompose} and solves the set of simultaneous
equations defined by the original matrix @i{a} given to @code{math:decompose}
and the right-hand sides in the vector @i{b}.  If @i{x} is supplied, the solutions
are stored into it and it is returned; otherwise an array is
created to hold the solutions and that is returned.  @i{b} must
be a one-dimensional array.
@end defun

@defun math:list-2d-array array
Returns a list of lists containing the values in @i{array}, which must
be a two-dimensional array.  There is one element for each row; each
element is a list of the values in that row.
@end defun

@defun math:fill-2d-array array list
This is the opposite of @code{math:list-2d-array}.  @i{list} should be a
list of lists, with each element being a list corresponding to a row.
@i{array}'s elements are stored from the list.  Unlike @code{fillarray}
(see (fillarray-fun)), if @i{list} is not long enough,
@code{math:fill-2d-array} ``wraps around'', starting over at the beginning.
The lists which are elements of @i{list} also work this way.
@end defun

.defcondition math:singular-matrix (@code{sys:arithmetic-error} @code{error})
This is signaled when any of the matrix manipulation functions in this
section has trouble because of a singular matrix.  (In some functions,
such as @code{math:determinant}, a singular matrix is not a problem.)

The @code{:matrix} operation on the condition instance returns the matrix
which is singular.
.end_defcondition

@section  Planes
@cindex plane

A @i{plane} is effectively an array whose bounds, in each dimension, are
plus-infinity and minus-infinity; all integers are legal as indices.
Planes may be of any rank.  When you create a plane, you do not need to
specify any size, just the rank.  You also specify a default value.  At
that moment, every component of the plane has that value.  As you can't
ever change more than a finite number of components, only a finite
region of the plane need actually be stored.  When you refer to an
element for which space has not actually been allocated, you just get
the default value.

The regular array accessing functions don't work on planes.
You can use @code{make-plane} to create a plane,
@code{plane-aref} or @code{plane-ref} to get the value of a component, and
@code{plane-aset} or @code{plane-store} to store into a component.
@code{array-rank} works on planes.

A plane is actually stored as an array with a leader.
The array corresponds to a rectangular, aligned region of the plane,
containing all the components in which a @code{plane-store} has been done
(and, usually, others which have never been altered).
The lowest-coordinate corner of that rectangular region is
given by the @code{plane-origin} in the array leader.
The highest-coordinate corner can be found by adding the @code{plane-origin}
to the @code{array-dimensions} of the array.
The @code{plane-default} is the contents of all the
elements of the plane that are not actually stored in the array.
The @code{plane-extension} is the amount to extend a plane by in any direction
when the plane needs to be extended.  The default is 32.

If you never use any negative indices, then the @code{plane-origin} remains
all zeroes and you can use regular array functions, such as @code{aref} and @code{aset},
to access the portion of the plane that is actually stored.  This can be
useful to speed up certain algorithms.  In this case you can even use the
@code{bitblt} function on a two-dimensional plane of bits or bytes,
provided you don't change the @code{plane-extension} to a number that is not
a multiple of 32.

@defun make-plane rank &key type default-value extension initial-dimensions initial-origins
Creates and returns a plane.  @i{rank} is the number of dimensions.  The keyword arguments are
@table @i
@item type
The array type symbol (e.g. @code{art-1b}) specifying the type of the array
out of which the plane is made.
@item default-value
The default component value as explained above.
@item extension
The amount by which to extend the plane, as explained above.
@item initial-dimensions
@code{nil} or a list of integers whose length is @i{rank}.  If not @code{nil},
each element corresponds to one dimension, specifying the width to
allocate the array initially in that dimension.
@item initial-origins
@code{nil} or a list of integers whose length is @i{rank}.  If not @code{nil},
each element corresponds to one dimension, specifying the smallest index
in that dimension for which storage should initially be allocated.
@end table
Example:
@lisp
(make-plane 2 :type 'art-4b :default-value 3)
@end lisp
creates a two-dimensional plane of type @code{art-4b}, with default value @code{3}.
@end defun

@defun plane-origin plane
A list of numbers, giving the lowest coordinate values actually stored.
@end defun

@defun plane-default plane
This is the contents of the infinite number of plane elements that are
not actually stored.
@end defun

@defun plane-extension plane
The amount to extend the plane by, in any direction, when @code{plane-store} is done
outside of the currently-stored portion.
@end defun

@defun plane-aref plane &rest subscripts
@defunx plane-ref plane subscripts
These two functions return the contents of a specified element of a plane.
They differ only in the way they take their arguments; @code{plane-aref} wants
the subscripts as arguments, while @code{plane-ref} wants a list of subscripts.
@end defun

@defun plane-aset datum plane &rest subscripts
@defunx plane-store datum plane subscripts
These two functions store @i{datum} into the specified element of a plane,
extending it if necessary, and return @i{datum}.
They differ only in the way they take their arguments; @code{plane-aset} wants
the subscripts as arguments, while @code{plane-store} wants a list of subscripts.
@end defun


@section  Maclisp Array Compatibility

The functions in this section are provided only for Maclisp compatibility
and should not be used in new programs.

	Fixnum arrays do not exist (however, see Zetalisp's
small-positive-integer arrays).  Float arrays exist but you do not use
them in the same way; no declarations are required or allowed.
Un-garbage-collected arrays do not exist.
@c yet??? --weak links
Readtables and obarrays are represented as arrays, but Zetalisp does not
use special array types for them.  See the descriptions of @code{read}
((read-fun)) and @code{intern} ((intern-fun)) for information about
readtables and obarrays (packages).  There are no `dead'' arrays, nor are
Multics ``external'' arrays provided.

The @code{arraycall} function exists for compatibility
but should not be used (see @code{aref}, (aref-fun).)

Subscripts are always checked for validity, regardless of the value
of @code{*rset} and whether the code is compiled or not. 
However, in a multi-dimensional array, an error is caused only
if the subscripts would have resulted in a reference to storage
outside of the array. For example, if you have a 2 by 7 array and refer
to an element with subscripts 3 and 1, no error occurs
despite the fact that the reference is invalid;
but if you refer to element 1 by 100, an error occurs.
In other words, subscript errors are caught if and only if
they refer to storage outside the array; some errors are undetected,
but they can only clobber (alter randomly) some other element of the same array,
not something completely unpredictable.

@code{loadarrays} and @code{dumparrays} are not provided.  However,
arrays can be put into QFASL files; see (fasdump).

	The @code{*rearray} function is not provided, since not all
of its functionality is available in Zetalisp.
Its most common uses are implemented by @code{adjust-array-size}.

	In Maclisp, arrays are usually kept on the @code{array} property
of symbols, and the symbols are used instead of the arrays.  In order
to provide some degree of compatibility for this manner of using
arrays, the @code{array}, @code{*array}, and @code{store} functions are
provided, and when arrays are applied to arguments, the arguments are
treated as subscripts and @code{apply} returns the corresponding element
of the array.

@defun array &quote symbol type &eval &rest dims
Creates an @code{art-q} type array in @code{default-array-area}
with the given dimensions.  (That is, @i{dims} is given
to @code{make-array} as its first argument.)  @i{type} is ignored.
If @i{symbol} is @code{nil}, the array is returned; otherwise,
the array is put in the function cell of @i{symbol}, and @i{symbol}
is returned.
@end defun

@defun *array symbol type &rest dims
Is like @code{array}, except that all of the arguments
are evaluated.
@end defun

@defspec store array-ref x
Stores @i{x} into the
specified array element.  @i{array-ref} should be a form which
references an array by calling it as a function (@code{aref} forms are not
acceptable).  First @i{x} is evaluated, then @i{array-ref} is
evaluated, and then the value of @i{x} is stored into the array cell
last referenced by a function call, presumably the one in @i{array-ref}.
@end defspec

@defun xstore x array-ref
	This is just like @code{store}, but it is not
a special form; this is because the arguments are in the other
order.  This function only exists for the compiler to compile the
@code{store} special form into, and should never be used by programs.
@end defun

@defun arraycall ignored array &rest subscripts
@code{(arraycall t @i{array} @i{sub1} @i{sub2}...)} is the same
as @code{(aref @i{array} @i{sub1} @i{sub2}...)}.  It exists for
Maclisp compatibility.
@end defun

@chapter Generic Sequence Functions
@cindex generic sequence functions

The type specifier @code{sequence} is defined to include lists and vectors
(arrays of rank one).
Lists and vectors are similar in that both can
be regarded as sequences of elements: there is a first element, a second
element, and so on.  Element @i{n} of a list is @code{(nth @i{n}
@i{list})}, and element @i{n} of a vector is @code{(aref @i{vector}
@i{n})}.  Many useful operations which apply in principle to a sequence
of objects can work equally well on lists and vectors.  These are the
generic sequence functions.

All the generic sequence functions accept @code{nil} as a sequence of length zero.

@section  Primitive Sequence Operations

@defun make-sequence type size &key initial-element
Creates a sequence of type @i{type}, @i{size} elements long.
@i{size} must be an integer and @i{type} must be either @code{list}
or some kind of array type.  @i{type} could be just @code{array} or @code{vector} to make
a general vector, it could be @code{(vector (byte 8))} to make an @code{art-8b}
vector, and so on.

If @i{initial-element} is specified, each element of the new sequence
contains @i{initial-element}.  Otherwise, the new sequence is initialized
to contain @code{nil} if that is possible, zero otherwise (for numeric array types).
@lisp
(make-sequence 'list 3)
  =>  (nil nil nil)

(make-sequence 'array 5 :initial-element t)
  =>  #(t t t t t)

(make-sequence '(vector bit) 5)
  =>  #*00000
@end lisp
@end defun

@defun elt sequence index
Returns the element at index @i{index} in @i{sequence}.
If @i{sequence} is a list, this is @code{(nth @i{index} @i{sequence})}.
If @i{sequence} is a vector, this is @code{(aref @i{index} @i{sequence})}.
Being microcoded, @code{elt} is as fast as either @code{nth} or @code{aref}.

@code{(setf (elt @i{sequence} @i{index}) @i{value})} is the way to set
an element of a sequence.
@end defun

@defun length sequence
Returns the length of @i{sequence}, as an integer.  For a vector with a fill
pointer, this is the fill pointer value.  For a list, it is the traditional
Lisp function; note that lists ending with atoms other than @code{nil} are
accepted, so that the length of @code{(a b . c)} is 2.
@end defun

@section  Simple Sequence Operations

@defun copy-seq sequence
Returns a new sequence of the same type, length and contents as @i{sequence}.
@end defun

@defun concatenate result-type &rest sequences
Returns a new sequence, of type @i{result-type}, whose contents
are made from the contents of all the @i{sequences}.
@i{result-type} can be @code{list} or any array type,
just as in @code{make-sequence} above.  Examples:
@lisp
(concatenate 'list '(1 2) '#(A 3))  =>  (1 2 A 3)
(concatenate 'vector '(1 2) '#(A 3)  =>  #(1 2 A 3)
@end lisp
@end defun

@defun subseq sequence start &optional end
Returns a new sequence whose elements are a subsequence of @i{sequence}.
The new sequence is of the same type as @i{sequence}.

@i{start} is the index of the first element of @i{sequence} to take.
@i{end} is the index of where to stop--the first element @i{not} to take.
@i{end} can also be @code{nil}, meaning take everything from @i{start} up
to the end of @i{sequence}.

Examples:
@lisp
(subseq "Foobar" 3 5)  =>  "ba"
(subseq '(a b c) 1)  =>  (b c)
@end lisp

It is also possible to @code{setf} a call to @code{subseq}.  This means
to store into part of the sequence passed to @code{subseq}.  Thus,
@lisp
(setf (subseq "Foobar" 3 5) "le")
@end lisp
modifies the string @code{"Foobar"} so that it contains @code{"Fooler"} instead.
@end defun

@defun replace into-sequence-1 from-sequence-2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
Copies part of @i{from-sequence-2} into part of @i{to-sequence-1}.
@i{start2} and @i{end2} are the indices of the part of @i{from-sequence-2}
to copy from, and @i{start1} and @i{end1} are the indices of the part of
@i{to-sequence-1} to copy into.

If the number of elements to copy out of @i{from-sequence-2} is less
than the number of elements of @i{to-sequence-1} to be copied into,
the extra elements of @i{to-sequence-1} are not changed.  If the
number of elements to copy out is more than there is room for, the
last extra elements are ignored.

If the two sequence arguments are the same sequence, then the elements to be copied
are copied first into a temporary sequence (if necessary) to make sure that
no element is overwritten before it is copied.  Example:
@lisp
(setq str "Elbow")
(replace str str :start1 2 :end1 5 :start2 1 :end2 4)
@end lisp
modifies @code{str} to contain @code{"Ellbo"}.

@i{into-sequence-1} is returned as the value of @code{replace}.
@end defun

@defun fill sequence item &key (start @code{0}) end
Modifies the contents of @i{sequence} by setting all the
elements to @i{item}.  @i{start} and @i{end} may be specified
to limit the operation to some contiguous portion of @i{sequence};
then the elements before @i{start} or after @i{end} are unchanged.
If @i{end} is @code{nil}, the filling goes to the end of @i{sequence}.

The value returned by @code{fill} is @i{sequence}.  Example:
@lisp
(setq l '(a b c d e))
(fill l 'lose :start 2)

l => (a b lose lose lose)
@end lisp
@end defun

@defun reverse sequence
Returns a new sequence containing the same elements as @i{sequence} but
in reverse order.  The new sequence is of the same type and length as
@i{sequence}.
@code{reverse} does not modify its argument, unlike @code{nreverse} which is faster
but does modify its argument.  The list created by @code{reverse} is not cdr-coded.
@lisp
(reverse "foo")  =>  "oof"
(reverse '(a b (c d) e)) => (e (c d) b a)
@end lisp
@end defun

@defun nreverse sequence
Modifies @i{sequence} destructively to have its elements in reverse
order, and returns @i{sequence} as modified.  For a vector, this is done
by copying the elements to different positions.  For a list, this is
done by modifying cdr pointers.  This has two important consequences: it
is most efficient when the list is not cdr-coded, and the rearranged
list starts with the cell that used to be at the end.  Although the
altered list as a whole contains the same cells as the original, the
actual value of the altered list is not @code{eq} to the original list.
For this reason, one must always store the value of @code{nreverse} into
the place where the list will be used.  Do not just use @code{nreverse} for effect
on a list.

@lisp
(setq a '#(1 2 3 4 5))
(nreverse a)
(concatenate 'list a) => (5 4 3 2 1)

(setq b '(1 2 3 4 5)
      c b
      d (last b))
(setq b (nreverse b))

b => (5 4 3 2 1)
c => (1)
(eq b d)  =>  t
@end lisp

@code{nreverse} is most frequently used after a loop which computes
elements for a new list one by one.  These elements can be put on the
new list with @code{push}, but this produces a list which has the elements
in reverse order (first one generated at the end of the list).
@lisp
(let (accumulate)
  (dolist (x input)
    (push (car x) accumulate)
    (push (cdr x) accumulate))
  (nreverse accumulate))
@end lisp

Currently, @code{nreverse} is inefficient with cdr-coded lists (see
(cdr-code)), because it just uses @code{rplacd} in the
straightforward way.  This may be fixed someday.  In the meantime
@code{reverse} might be preferable in some cases.
@end defun

@section  Mapping On Sequences

@defun cli:map result-type function &rest sequences
The Common Lisp @code{map} function
maps @i{function} over successive elements of each @i{sequence},
constructing and returning a sequence of the results that @i{function} returns.
The constructed sequence is of type @i{result-type} (see @code{make-sequence},
(make-sequence-fun)).

@i{function} is called first on the first elements of all the sequences,
then on the second elements of all, and so on until some argument
sequence is exhausted.

@lisp
(map 'list 'list '(1 2 3) '#(A B C D))
  =>  ((1 A) (2 B) (3 C))

(setq vect (map '(vector (mod 16.)) '+
		'(3 4 5 6 7) (circular-list 1)))
(concatenate 'list vect)  =>  (2 3 4 5 6)
(array-element-type vect)  =>  (mod 16.)
@end lisp

@i{result-type} can also be @code{nil}.  Then the values returned by @i{function}
are thrown away, no sequence is constructed, and @code{map} returns @code{nil}.

This function is available under the name @code{map} in Common Lisp programs.
In traditional Zetalisp programs, @code{map} is another function which
does something related but different; see (map-fun).
Traditional programs can call this function as @code{cli:map}.
@end defun

@defun cli:some predicate &rest sequences
Applies @i{predicate} to successive elements of each sequence.
If @i{predicate} ever returns a non-@code{nil} value, @code{cli:some} immediately
returns the same value.  If one of the argument sequences is exhausted,
@code{cli:some} returns @code{nil}.

Each time @i{predicate} is called, it receives one argument from each sequence.
The first time, it gets the first element of each sequence, then the second element
of each, and so on until a sequence is exhausted.  Examples:
@lisp
(cli:some 'plusp '(-4 0 5 6))  =>  5
(cli:some '> '(-4 0 5 6) '(0 12 12 12))  =>  nil
(cli:some '> '(-4 0 5 6) '(3 3 3 3))  =>  5
(cli:some '> '(-4 0 5 6) '(3 3))  =>  nil
@end lisp

This function is available under the name @code{some} in Common Lisp programs.
In traditional Zetalisp programs, @code{some} is another function which
does something related but different; see (some-fun).
Traditional programs can call this function as @code{cli:some}.
@end defun

@defun cli:every predicate &rest sequences
Applies @i{predicate} to successive elements of each sequence.
If @i{predicate} ever returns @code{nil}, @code{cli:every} immediately
returns @code{nil}.  If one of the argument sequences is exhausted,
@code{cli:every} returns @code{t}.

Each time @i{predicate} is called, it receives one argument from each sequence.
The first time, it gets the first element of each sequence, then the second element
of each, and so on until a sequence is exhausted.  Examples:
@lisp
(cli:every 'plusp '(-4 0 5 6))  =>  nil
(cli:every 'plusp '(5 6))  =>  t
@end lisp

This function is available under the name @code{every} in Common Lisp programs.
In traditional Zetalisp programs, @code{every} is another function which
does something related but different; see (every-fun).
Traditional programs can call this function as @code{cli:every}.
@end defun

@defun notany predicate &rest sequences
@defunx notevery predicate &rest sequences
These are the opposites of @code{cli:some} and @code{cli:every}.

@code{(notany ...)} is equivalent to @code{(not (cli:some ...))}.
.br
@code{(notevery ...)} is equivalent to @code{(not (cli:every ...))}.
@end defun

@defun reduce function sequence &key from-end (start @code{0}) end initial-value
Combines the elements of @i{sequence} using @i{function}, a function of two
args.  @i{function} is applied to the first two elements; then to that
result and the third element; then to that result and the fourth
element; and so on.

@i{start} and @i{end} are indices that restrict the action to a part of @i{sequence},
as if the rest of @i{sequence} were not there.  They default to 0 and @code{nil}
(@code{nil} for @i{end} means go all the way to the end of @i{sequence}).

If @i{from-end} is non-@code{nil}, processing starts with the last of the
elements.  @i{function} is first applied to the last two elements; then
to the previous element and that result; then to the previous element
and that result; and so on until element number @i{start} has been used.

If @i{initial-value} is specified, it acts like an extra element of
@i{sequence}, used in addition to the actual elements of the specified part
of @i{sequence}.  It comes, in effect, at the beginning if @i{from-end} is
@code{nil}, but at the end if @i{from-end} is non-@code{nil}, so that in any
case it is the first element to be processed.

If there is only one element to be processed,
that element is returned and @i{function} is not called.

If there are no elements (@i{sequence} is of length zero and no
@i{initial-value}), @i{function} is called with no arguments and its
value is returned.

@lisp
@exdent Examples:
(reduce '+ '(1 2 3))  =>  6
(reduce '- '(1 2 3))  =>  -4
(reduce '- '(1 2 3) :from-end t)  =>  2  1;; 1 @code{-} (2 @code{-} 3)*
(reduce 'cons '(1 2 3) :from-end t)  =>  (1 2 . 3)
(reduce 'cons '(1 2 3))  =>  ((1 . 2) . 3)
@end lisp
@end defun

@section  Operating on Selected Elements

The generic sequence functions for searching, substituting and removing
elements from sequences take similar arguments whose meanings are
standard.  This is because they all look at each element of the sequence
to decide whether it should be processed.

Functions which conceptually modify the sequence come in pairs.  One
function in the pair copies the sequence if necessary and never modifies
the argument.  The copy is a list if the original sequence is a list;
otherwise, the copy is an @code{art-q} array.  If the sequence is a list,
it may be copied only partially, sharing any unchanged tail with the
original argument.  If no elements match, the result sequence may be
@code{eq} to the argument sequence.

The other function in the pair may alter the original sequence and
return it, or may make a copy and return that.

There are two ways the function can decide which elements to operate on.
The functions whose names end in @code{-if} or @code{-if-not} have an
argument named @i{predicate} which should be a function of one argument.
This function is applied to each element and the value determines
whether the element is processed.

The other functions have an argument named @i{item} or something similar
which is an object to compare each element with.  The elements that
match @i{item} are processed.  By default, the comparison is done with
@code{eql}.  You can specify any function of two arguments to be used
instead, as the @i{test} keyword argument.  @i{item} is always the first
argument, and an element of the sequence is the second argument.  The
element matches @i{item} if @i{test} returns non-@code{nil}.
Alternatively, you can specify the @i{test-not} keyword argument; then
the element matches if @i{test-not} returns @code{nil}.

The elements may be tested in any order, and may be tested more than once.
For predictable results, your @i{predicate}, @i{test} and @i{test-not} functions
should be side-effect free.

The five keyword arguments @i{start}, @i{end}, @i{key}, @i{count} and
@i{from-end} have the same meanings for all of the functions, except
that @i{count} is not relevant for some kinds of operations.  Here is
what they do:

@table @i
@item start, end
@i{start} and @i{end} are indices in the sequence; they restrict the
processing to the portion between those indices.  Only elements in this
portion are tested, replaced or removed.  For the search functions,
only this portion is searched.  For element removal functions, elements
outside the portion are unchanged.

@i{start} is the index of the first element to be processed, and @i{end}
is the index of the element after the last element to be processed.
@i{end} can also be @code{nil}, meaning that processing should continue to
the end of the sequence.

@i{start} always defaults to 0, and @i{end} always defaults to @code{nil}.

@item @i{key}
@i{key}, if not @code{nil}, is a function of one argument which is applied
to each element of the sequence to get a value which is passed to the
@i{test}, @i{test-not} or @i{predicate} function in place of the
element.  For example, if @i{key} is @code{car}, the car of each element is
compared or tested.  The default for @i{key} is @code{nil}, which means to
compare or test the element itself.

@item @i{from-end}
If @i{from-end} is non-@code{nil}, elements are (conceptually) processed in
the reverse of the sequence order, from the later elements to the
earlier ones.  In some functions this argument makes no difference,
or matters only when @i{count} is non-@code{nil}.

Note: the actual testing of elements may happen in any order.

@item @i{count}
@i{count}, if not @code{nil}, should be an integer specifying the number of
matching elements to be processed.  For example, if @i{count} is 2,
only the first two elements that match are removed, replaced, etc.
If @i{from-end} is non-@code{nil}, the last two matching elements
are the ones removed or replaced.

The default for @i{count} is @code{nil}, which means all elements are tested
and all matching ones are processed.
@end table

@subsection Removing Elements from Sequences

These functions remove certain elements of a sequence.  The @code{remove}
series functions copy the argument; the @code{delete} series functions
can modify it destructively (currently they always copy anyway if the
argument is a vector).

@defun remove-if predicate sequence &key (start @code{0}) end count key from-end
@defunx delete-if predicate sequence &key (start @code{0}) end count key from-end
Returns a sequence like @i{sequence} but missing any elements that
satisfy @i{predicate}.  @i{predicate} is a function of one argument
which is applied to one element at a time; if @i{predicate} returns
non-@code{nil}, that element is removed.  @code{remove-if} copies structure as
necessary to avoid modifying @i{sequence}, while @code{delete-if} can
either modify the original sequence and return it or make a copy and
return that.  (Currently, a list is always modified, and a vector is
always copied, but don't depend on this.)

The @i{start}, @i{end}, @i{key} @i{count} and @i{from-end} arguments are handled in the
standard way.

@lisp
(remove-if 'plusp '(1 -1 2 -2 3 -3))  =>  (-1 -2 -3)
(remove-if 'plusp '(1 -1 2 -2 3 -3) :count 2)
  =>  (-1 -2 3 -3)
(remove-if 'plusp '(1 -1 2 -2 3 -3) :count 2 :from-end t)
  =>  (1 -1 -2 -3)
(remove-if 'plusp '(1 -1 2 -2 3 -3) :start 4)
  =>  (1 -1 2 -2 -3)
(remove-if 'zerop '(1 -1 2 -2 3 -3) :key '1-)
  =>  (-1 2 -2 3 -3)
@end lisp
@end defun

@defun remove-if-not predicate sequence &key (start @code{0}) end count key from-end
@defunx delete-if-not predicate sequence &key (start @code{0}) end count key from-end
Like @code{remove-if} and @code{delete-if} except that the elements removed
are those for which @i{predicate} returns @code{nil}.
@end defun

@defun cli:remove item sequence &key (test @code{'eql}) test-not (start @code{0}) end count key from-end
@defunx cli:delete item sequence &key (test @code{'eql}) test-not (start @code{0}) end count key from-end
The Common Lisp functions for eliminating elements from a sequence
test the elements of @i{sequence} one by one by comparison with @i{item},
using the @i{test} or @i{test-not} function, and eliminate the elements
that match.  @code{cli:remove} copies structure as necessary to avoid modifying
@i{sequence}, while @code{cli:delete} can either modify the original sequence
and return it or make a copy and return that.  (Currently, a list is always
modified, and a vector is always copied.)

The @i{start}, @i{end}, @i{key} @i{count} and @i{from-end} arguments are handled in the
standard way.

@lisp
(cli:remove 'x '(x (a) (x) (a x)))
  =>  ((a) (x) (a x))

(cli:remove 'x '((a) (x) (a x)) :test 'memq)
  =>  ((a))

(cli:remove 'x '((a) (x) (a x)) :test-not 'memq)
  =>  ((x) (a x))

(cli:remove 'x '((a) (x) (a x)) 
	    :test 'memq :count 1)
  =>  ((a) (a x))

(cli:remove 'x '((a) (x) (a x)) :key 'car)
  =>  ((a) (a x))
@end lisp

These functions are available under the names @code{remove} and @code{delete}
in Common Lisp programs.  Traditional Zetalisp provides functions
@code{remove} and @code{delete} which serve similar functions, on lists only,
and with different calling sequences; see (remove-fun) and
(delete-fun).  Traditional programs can call these functions as
@code{cli:remove} and @code{cli:delete}.
@end defun

@defun remove-duplicates sequence &key (test @code{'eql}) test-not (start @code{0}) end key from-end
@defunx delete-duplicates sequence &key (test @code{'eql}) test-not (start @code{0}) end key from-end
@code{remove-duplicates} returns a new sequence like @i{sequence} except
that all but one of any set of matching elements have been removed.
@code{delete-duplicates} is the same except that it may destructively modify
and then return @i{sequence} itself.

Elements are compared using @i{test}, a function of two arguments.
Two elements match if @i{test} returns non-@code{nil}.  Each element 
is compared with all the following elements and slated for removal if
it matches any of them.

If @i{test-not} is specified, it is used instead of @i{test}, but then
elements match if @i{test-not} returns @code{nil}.  If neither @i{test} nor @i{test-not}
is specified, @code{eql} is used for @i{test}.

If @i{key} is non-@code{nil}, it should be a function of one argument.  @i{key} is
applied to each element, and the value @i{key} returns is passed to @i{test}
or @i{test-not}.

If @i{from-end} is non-@code{nil}, then elements are processed
(conceptually) from the end of @i{sequence} forward.  Each element is
compared with all the preceding ones and slated for removal if it
matches any of them.  For a well-behaved comparison function, the only
difference @i{from-end} makes is which elements of a matching set
are removed.  Normally the last one is kept; with @i{from-end}, it is
the first one that is kept.

If @i{start} or @i{end} is used to restrict processing to a portion
of @i{sequence}, both removal and comparison are restricted.  An element
is removed only if it is itself within the specified portion, and matches
another element within the specified portion.
@end defun

@subsection Substitution Functions

The functions in this section substitute a new value for certain of the
elements in a sequence--those that match a specified object or satisfy a
predicate.  For example, you could replace every @code{t} in the sequence with
@code{nil}, leaving all elements other than @code{t} unchanged.  The @code{substitute}
series functions make a copy and return it, leaving the original
sequence unmodified.  The @code{nsubstitute} series functions always alter
the original sequence destructively and return it.  They do not use up
any storage.

Note the difference between these functions and the function
@code{cli:subst}.  @code{subst} operates only on lists, and it searches all
levels of list structure in both car and cdr positions.
@code{substitute}, when given a list, considers for replacement only the
elements of the list.

@defun substitute-if newitem predicate sequence &key start end count key from-end
@defunx nsubstitute-if newitem predicate sequence &key start end count key from-end
@code{substitute-if} returns a new sequence like @i{sequence} but with
@i{newitem} substituted for each element of @i{sequence} that satisfies
@i{predicate}.  @i{sequence} itself is unchanged.  If it is a list, only
enough of it is copied to avoid changing @i{sequence}.

@code{nsubstitute-if} replaces elements in @i{sequence} itself, modifying it
destructively, and returns @i{sequence}.

@i{start}, @i{end}, @i{key}, @i{count} and @i{from-end} are handled
in the standard fashion as described above.
@lisp
(substitute-if 0 'plusp '(1 -1 2 -2 3) :from-end t :count 2)
  =>  (1 -1 0 -2 0)
@end lisp
@end defun

@defun substitute-if-not newitem predicate sequence &key start end count key from-end
@defunx nsubstitute-if-not newitem predicate sequence &key start end count key from-end
Like @code{substitute-if} and @code{nsubstitute-if} except that the elements
replaced are those for which @i{predicate} returns @code{nil}.
@end defun

@defun substitute newitem olditem sequence &key (test @code{'eql}) test-not start end count key from-end
@defunx nsubstitute newitem olditem sequence &key (test @code{'eql}) test-not start end count key from-end
Like @code{substitute-if} and @code{nsubstitute-if} except that elements are
tested by comparison with @i{olditem}, using @i{test} or @i{test-not} as
a comparison function.

@i{start}, @i{end}, @i{key}, @i{count} and @i{from-end} are handled
in the standard fashion as described above.
@lisp
(substitute 'a 'b '(a b (a b)))
  =>  (a a (a b))
@end lisp
@end defun

@subsection Searching for Elements

The functions in this section find an element or elements of a sequence
which satisfy a predicate or match a specified object.  The @code{position}
series functions find one element and return the index of the element
found in the specified sequence.  The @code{find} series functions return
the element itself.  The @code{count} series functions find all the
elements that match and returns the number of them that were found.

All of the functions accept the keyword arguments @i{start}, @i{end},
@i{count} and @i{from-end}, and handle them in the standard way described in
(generic-sequence-arguments).

@defun position-if predicate sequence &key (start @code{0}) end key from-end
@defunx find-if predicate sequence &key (start @code{0}) end key from-end
Find the first element of @i{sequence} (last element, if @i{from-end} is
non-@code{nil}) which satisfies @i{predicate}.  @code{position-if} returns the
index in sequence of the element found; @code{find-if} returns the element
itself.  If no element is found, the value is @code{nil} for either
function.

See (generic-sequence-arguments) for a description of the
standard arguments @i{start}, @i{end} and @i{key}.  If @i{start} or
@i{end} is used to restrict operation to a portion of @i{sequence},
elements outside the portion are not tested, but the index returned is
still the index in the entire sequence.

@lisp
(position-if 'plusp '(-3 -2 -1 0 1 2 3))
  =>  4
(find-if 'plusp '(-3 -2 -1 0 1 2 3))
  =>  1
(position-if 'plusp '(-3 -2 -1 0 1 2 3) :start 5)
  =>  5
(position-if 'plusp '(-3 -2 -1 0 1 2 3) :from-end t)
  =>  6
(find-if 'plusp '(-3 -2 -1 0 1 2 3) :from-end t)
  =>  3
@end lisp
@end defun

@defun position-if-not predicate sequence &key (start @code{0}) end key from-end
@defunx find-if-not predicate sequence &key (start @code{0}) end key from-end
Like @code{position-if} and @code{find-if} but search for an element for which @i{predicate}
returns @code{nil}.
@end defun

@defun position item sequence sequence &key test test-not (start @code{0}) end key from-end
@defunx find item sequence sequence &key test test-not (start @code{0}) end key from-end
Like @code{position-if} and @code{find-if} but search for an element which matches @i{item},
using @i{test} or @i{test-not} for comparison.
@lisp
(position #\A "BabA" :test 'char-equal)  =>  1
(position #/A "BabA" :test 'equalp)  =>  1
(position #\A "BabA" :test 'char=)  =>  3
(position #/A "BabA" :test 'eq)  =>  3
@end lisp
@code{find-position-in-list} is equivalent to @code{position} with
@code{eq} as the value of @i{test}.
@end defun

@defun count-if predicate sequence &key start end key
Tests each element of @i{sequence} with @i{predicate} and counts how many
times @i{predicate} returns non-@code{nil}.  This number is returned.

@i{start}, @i{end} and @i{key} are used in the standard way, as described in
(generic-sequence-arguments).  The @i{from-end} keyword argument is
accepted without error, but it has no effect.
@lisp
(count-if 'symbolp #(a b "foo" 3))  =>  2
@end lisp
@end defun

@defun count-if-not predicate sequence &key start end key
Like @code{count-if} but returns the number of elements for which
@i{predicate} returns @code{nil}.
@end defun

@defun count item sequence &key test test-not start end key
Like @code{count} but returns the number of elements which match @i{item}.
@i{test} or @i{test-not} is the function used for the comparison.
@lisp
(count 4 '(1 2 3 4 5) :test '>)  =>  3
@end lisp
@end defun

@section  Comparison Functions

@defun mismatch sequence1 sequence2 &key (test @code{'eql}) test-not (start1 @code{0}) end1 (start2 @code{0}) end2 key from-end
Compares successive elements of @i{sequence1} with successive elements
of @i{sequence2}, returning @code{nil} if they all match, or else the index
in @i{sequence1} of the first mismatch.  If the sequences differ in length
but match as far as they go, the value is the index in @i{sequence1} of
the place where one sequence ran out.  If @i{sequence1} is the one which
ran out, this value equals the length of @i{sequence1}, so it isn't the
index of an actual element, but it still describes the place where
comparison stopped.

Elements are compared using the function @i{test}, which should accept two arguments.
If it returns non-@code{nil}, the elements are considered to match.
If you specify @i{test-not} instead of @i{test}, it is used similarly as a function, but the elements match if @i{test-not} returns @code{nil}.

If @i{key} is non-@code{nil}, it should be a function of one argument.  It is applied
to each element to get an object to pass to @i{test} or @i{test-not} in place of
the element.  Thus, if @code{car} is supplied as @i{key}, the cars of the elements
are compared using @i{test} or @i{test-not}.

@i{start1} and @i{end1} can be used to specify a portion of
@i{sequence1} to use in the comparison, and @i{start2} and @i{end2} can
be used to specify a portion of @i{sequence2}.  The comparison uses
the first element of each sequence portion, then the second element of
each sequence portion, and so on.  If the two specified portions differ
in length, comparison stops where the first one runs out.  In any case,
the index returned by @code{mismatch} is still relative to the
whole of @i{sequence1}.

If @i{from-end} is non-@code{nil}, the comparison proceeds conceptually
from the end of each sequence or portion.  The first comparison uses
the last element of each sequence portion, the second comparison
uses the next-to-the-last element of each sequence portion, and so on.
When a mismatch is encountered, the value returned is @i{one greater
than} the index of the first mismatch encountered in order of
processing (closest to the ends of the sequences). 
@lisp
(mismatch "Foo" "Fox")  =>  2
(mismatch "Foo" "FOO" :test 'char-equal)  =>  nil
(mismatch "Foo" "FOO" :key 'char-upcase)  =>  nil
(mismatch '(a b) #(a b c))  =>  2
(mismatch "Win" "The Winner" :start2 4 :end2 7)  =>  nil
(mismatch "Foo" "Boo" :from-end t)  =>  1
@end lisp
@end defun

@defun search for-sequence-1 in-sequence-2 &key from-end test test-not key (start1 @code{0}) end1 (start2 @code{0}) end2
Searches @i{in-sequence-2} (or portion of it) for a subsequence that
matches @i{for-sequence-1} (or portion of it) element by element, and
returns the index in @i{in-sequence-2} of the beginning of the matching subsequence.
If no matching subsequence is found, the value is @code{nil},
The comparison of each subsequence of @i{in-sequence-2} is done with
@code{mismatch}, and the @i{test}, @i{test-not} and @i{key} arguments
are used only to pass along to @code{mismatch}.

Normally, subsequences are considered starting with the beginning of
the specified portion of @i{in-sequence-2} and proceeding toward the end.
The value is therefore the index of the earliest subsequence that matches.
If @i{from-end} is non-@code{nil}, the subsequences are tried in the reverse
order, and the value identifies the latest subsequence that matches.
In either case, the value identifies the beginning of the subsequence found.
@lisp
(search '(#\A #\B) "cabbage" :test 'char-equal)  =>  1
@end lisp
@end defun

@section  Sorting and Merging
@cindex sorting

Several functions are provided for sorting vectors and lists.  These
functions use algorithms which always terminate no matter what sorting
predicate is used, provided only that the predicate always terminates. 
The main sorting functions are not @i{stable}; that is, equal items may
not stay in their original order.  If you want a stable sort, use the
stable versions.  But if you don't care about stability, don't use them
since stable algorithms are significantly slower.

After sorting, the argument (be it list or vector) has been rearranged
internally so as to be completely ordered.  In the case of a vector
argument, this is accomplished by permuting the elements of the vector,
while in the list case, the list is reordered by @code{rplacd}'s in the
same manner as @code{nreverse}.  Thus if the argument should not be
clobbered, the user must sort a copy of the argument, obtainable by
@code{fillarray} or @code{copylist}, as appropriate.  Furthermore, @code{sort}
of a list is like @code{delq} in that it should not be used for effect;
the result is conceptually the same as the argument but in fact is a
different Lisp object.

Should the comparison predicate cause an error, such as a wrong type
argument error, the state of the list or vector being sorted is
undefined.  However, if the error is corrected the sort proceeds
correctly. 

The sorting package is smart about compact lists; it sorts compact
sublists as if they were vectors.  See (cdr-code) for an explanation
of compact lists, and MIT A. I. Lab Memo 587 by Guy L. Steele Jr.
for an explanation of the sorting algorithm.

@defun sort sequence predicate
The first argument to @code{sort} is a vector or a list whose elements are
to be sorted.  The second is a predicate, which must be applicable to
all the objects in the sequence.  The predicate should take two
arguments, and return non-@code{nil} if and only if the first argument is
strictly less than the second (in some appropriate sense). 

The @code{sort} function proceeds to reorder the elements of the sequence
according to the predicate, and returns a modified sequence.  Note that
since sorting requires many comparisons, and thus many calls to the
predicate, sorting is much faster if the predicate is a compiled
function rather than interpreted. 
.br
@noindent
Example: Sort a list alphabetically by the first symbol found at any level
in each element.

@lisp
(defun mostcar (x)
    (cond ((symbolp x) x)
          ((mostcar (car x)))))

(sort 'fooarray
      #'(lambda (x y)
	  (string-lessp (mostcar x) (mostcar y))))
@end lisp

If @code{fooarray} contained these items before the sort:
@cindex scream

@lisp
(Tokens (The alien lurks tonight))
(Carpenters (Close to you))
((Rolling Stones) (Brown sugar))
((Beach Boys) (I get around))
(Beatles (I want to hold you up))
@end lisp

@noindent
then after the sort @code{fooarray} would contain:

@lisp
((Beach Boys) (I get around))
(Beatles (I want to hold you up))
(Carpenters (Close to you))
((Rolling Stones) (Brown sugar))
(Tokens (The alien lurks tonight))
@end lisp

When @code{sort} is given a list, it may change the order of the conses of
the list (using @code{rplacd}), and so it cannot be used merely for
side-effect; only the @i{returned value} of @code{sort} is the sorted
list.  The original list may have some of its elements missing when
@code{sort} returns.  If you need both the original list and the sorted
list, you must copy the original and sort the copy (see @code{copylist},
(copylist-fun)).

Sorting a vector just moves the elements of the vector into different
places, and so sorting a vector for side-effect only is all right.

If the argument to @code{sort} is a vector with a fill pointer, note that,
like most functions, @code{sort} considers the active length of the vector
to be the length, and so only the active part of the vector is
sorted (see @code{array-active-length}, (array-active-length-fun)).
@end defun

@defun sortcar sequence predicate
@code{sortcar} is the same as @code{sort} except that the predicate is applied
to the cars of the elements of @i{sequence}, instead of directly to the
elements of @i{sequence}.  Example:
@lisp
(sortcar '((3 . dog) (1 . cat) (2 . bird)) #'<)
                   =>   ((1 . cat) (2 . bird) (3 . dog))
@end lisp

Remember that @code{sortcar}, when given a list, may change the order of the
conses of the list (using @code{rplacd}), and so it cannot be used merely
for side-effect; only the @i{returned value} of @code{sortcar} is the
sorted list.  The original list is destroyed by sorting.
@end defun

@defun stable-sort sequence predicate
@code{stable-sort} is like @code{sort}, but if two elements of @i{sequence} are equal,
i.e. @i{predicate} returns @code{nil} when applied to them in either order,
then they remain in their original order.
@end defun

@defun stable-sortcar sequence predicate
@code{stable-sortcar} is like @code{sortcar}, but if two elements of @i{sequence} are equal,
i.e. @i{predicate} returns @code{nil} when applied to their cars in either order,
then they remain in their original order.
@end defun

@defun sort-grouped-array array group-size predicate
@code{sort-grouped-array} considers its array argument to
be composed of records of @i{group-size} elements each.
These records are considered as units, and are sorted with respect
to one another.  The @i{predicate} is applied to the first element
of each record; so the first elements act as the keys on which
the records are sorted.
@end defun

@defun sort-grouped-array-group-key array group-size predicate
This is like @code{sort-grouped-array} except that the
@i{predicate} is applied to four arguments:  an array,
an index into that array, a second array, and an index into
the second array.  @i{predicate} should consider each index
as the subscript of the first element of a record in the corresponding
array, and compare the two records.  This is more general
than @code{sort-grouped-array} since the function can get at
all of the elements of the relevant records, instead of only the first element.
@end defun

@defun merge result-type sequence1 sequence2 predicate &key key
Returns a single sequence containing the elements of @i{sequence1} and
@i{sequence2} interleaved in order according to @i{predicate}.  The
length of the result sequence is the sum of the lengths of @i{sequence1}
and @i{sequence2}.  @i{result-type} specifies the type of sequence to
create, as in @code{make-sequence}.

The interleaving is done by taking the next element of @i{sequence1} unless
the next element of @i{sequence2} is ``less'' than it according to @i{predicate}.
Therefore, if each of the argument sequences is sorted, the result of
@code{merge} is also sorted.

@i{key}, if non-@code{nil}, is applied to each element to get the object to
pass to @i{predicate}, rather than the element itself.  Thus, if @i{key} is
@code{car}, the cars of the elements are compared rather than the entire elements.

@lisp
(merge 'list '(1 2 5 6) '(3 5.0 5.1) '<)
  =>  (1 2 3 5 5.0 5.1 6)
@end lisp
@end defun

@chapter Characters and Strings
@cindex string

	A string is a one-dimensional array representing a sequence of
characters.  The printed representation of a string is its characters
enclosed in quotation marks, for example @code{"foo bar"}.  Strings are
constants, that is, evaluating a string returns that string.  Strings
are the right data type to use for text-processing.

@cindex character object
Individual characters can be represented by @i{character objects} or by
fixnums.  A character object is actually the same as a fixnum except
that it has a recognizably different data type and prints differently.
Without escaping, a character object is printed by outputting the
character it represents.  With escaping, a character object prints as
@code{#\@i{char}} in Common Lisp syntax or as @code{#/@i{char}} in
traditional syntax; see (character-set) and (sharp-slash).  By
contrast, a fixnum would in all cases print as a sequence of digits.
Character objects are accepted by most numeric functions in place of
fixnums, and may be used as array indices.  When evaluated, they are
constants.

The character object data type was introduced recently for Common Lisp
support.  Traditionally characters were always represented as fixnums,
and nearly all system and user code still does so.  Character objects
are interchangeable with fixnums in most contexts, but not in @code{eq},
which is often used to compare the result of the stream input operations
such as @code{:tyi}, since that might be @code{nil}.  Therefore, the
stream input operations still return fixnums that represent characters.
Aside from this, Common Lisp functions that return a character return a
character object, while traditional functions return a fixnum.  The
fixnum which is the character code representing @i{char} can be written
as @code{#/@i{char}} in traditional syntax.  This is equivalent to writing
the fixnum using digits, but does not require you to know the character
code.

Most strings are arrays of type @code{art-string}, where each element is
stored in eight bits.  Only characters with character code less than 256
can be stored in an ordinary string; these characters form the type
@code{string-char}.  A string can also be an array of type
@code{art-fat-string}, where each element holds a sixteen-bit unsigned
fixnum.  The extra bits allow for multiple fonts or an expanded character
set.

	Since strings are arrays, the usual array-referencing function
@code{aref} is used to extract characters from strings.  For example,
@code{(aref "frob" 1)} returns the representation of lower case @code{r}.
The first character is at index zero.

Conceptually, the elements of a string are character objects.
This is what Common Lisp programs expect to see when they do
@code{aref} (or @code{char}, which on the Lisp
Machine is synonymous with @code{aref}) on a string.  But nearly all
Lisp Machine programs are traditional, and expect elements of strings
to be fixnums.  Therefore, @code{aref} of a string actually returns
a fixnum.  A distinct version of @code{aref} exists for Common Lisp
programs.  It is @code{cli:aref} and it does return character objects
if given a string.  For all other kinds of arrays, @code{aref} and @code{cli:aref}
are equivalent.
@lisp
(aref "Foo" 1)  =>  #o157
(cli:aref "Foo" 1)  =>  #/o
@end lisp

It is also legal to store into strings, for example using @code{setf} of
@code{aref}.  As with @code{rplaca} on lists, this changes the actual object;
you must be careful to understand where side-effects will propagate.  It
makes no difference whether a character object or a fixnum is stored.
When you are making strings that you intend to change later, you
probably want to create an array with a fill-pointer (see
(fill-pointer)) so that you can change the length of the string as well
as the contents.  The length of a string is always computed using
@code{array-active-length}, so that if a string has a fill-pointer, its
value is used as the length.

The functions described in this section provide a variety of useful
operations on strings.  In place of a string, most of these functions
accept a symbol or a fixnum as an argument, coercing it into a
string.  Given a symbol, its print name, which is a string, is used.
Given a fixnum, a one-character string containing the character designated
by that fixnum is used.  Several of the functions actually work on any
type of one-dimensional array and may be useful for other than string
processing; these are the functions such as @code{substring} and @code{string-length}
which do not depend on the elements of the string being characters.

The generic sequence functions in chapter (sequence-chapter) may
also be used on strings.

@section  Characters
@cindex characters

The Lisp Machine data type for character objects is a recent addition
to the system.  Most programs still use fixnums to represent characters.

Common Lisp programs typically work with actual character objects but
programs traditionally use fixnums to represent characters.  The new
Common Lisp functions for operating with characters have been implemented
to accept fixnums as well, so that they can be used equally well from
traditional programs.

@defun characterp object
@code{t} if @i{object} is a character object; @code{nil} otherwise.
In particular, it is @code{nil} if @i{object} is a fixnum such as
traditional programs use to represent characters.
@end defun

@defun character object
Coerces @code{object} to a single character,
represented as a fixnum.  If @code{object} is a number, it is returned.  If
@code{object} is a string or an array, its first element is returned.  If
@code{object} is a symbol, the first character of its pname is returned.
Otherwise an error occurs.  The way characters are represented as fixnums
is explained in (character-set).
@end defun

@defun cli:character object
Coerces @i{object} into a character and returns the character as a character object
for Common Lisp programs.
@end defun

@defun int-char fixnum
Converts @i{fixnum}, regarded as representing a character, to a
character object.  This is a special case of @code{cli:character}.
@code{(int-char #o101)} is the character object for @code{A}.  If a character
object is given as an argument, it is returned unchanged.
@end defun

@defun char-int char
Converts @i{char}, a character object, to the fixnum which represents
the same character.  This is the inverse of @code{int-char}.  It may also
be given a fixnum as argument, in which case the value is the same
fixnum.
@end defun

@subsection Components of a Character
@cindex character code
@cindex font (of a character)
@cindex bits (of a character)
@cindex modifier bits (of a character)
@cindex character set

A character object, or a fixnum which is interpreted as a character,
contains three separate pieces of information: the @i{character code},
the @i{font number}, and the @i{modifier bits}.  Each of these things
is an integer from a fixed range.  The character code ranges from 0 to
377 (octal), the font number from 0 to 377 (octal), and the modifier
bits from 0 to 17 (octal).  These numeric constants should not appear
in programs; instead, use the constant symbols @code{char-code-limit},
and so on, described below.

Ordinary strings can hold only characters whose font number and modifier
bits are zero.  Fat strings can hold characters with any font number,
but the modifier bits must still be zero.

Character codes less than 200 octal are printing graphics;
when output to a device they are assumed to print a character and move
the cursor one character position to the right.  (All software provides
for variable-width fonts, so the term ``character position'' shouldn't
be taken too literally.)

Character codes 200 through 236 octal are used for special characters.
Character 200 is a ``null character'', which does not correspond to any
key on the keyboard.  The null character is not used for anything much;
@code{fasload} uses it internally.  Characters 201 through 236 correspond
to the special function keys on the keyboard such as @code{Return} and
@code{Call}.  The remaining character codes 237 through 377 octal are reserved
for future expansion.

	Most of the special characters do not normally appear in files
(although it is not forbidden for files to contain them).  These
characters exist mainly to be used as ``commands'' from the keyboard.  A
few special characters, however, are ``format effectors'' which are just
as legitimate as printing characters in text files.  The names and
meanings of these characters are:

@table @code
@item Return
The ``newline'' character, which separates lines of text.  We do not use
the PDP-10 convention which separates lines by a pair of characters, a
``carriage return'' and a ``linefeed''.

@item Page
The ``page separator'' character, which separates pages of text.

@item Tab
The ``tabulation'' character, which spaces to the right until the next ``tab stop''.
Tab stops are normally every 8 character positions.
@end table

The space character is considered to be a printing character whose printed image
happens to be blank, rather than a format effector.

	When a letter is typed with any of the modifier bit keys
(@code{Control}, @code{Meta}, @code{Super}, or @code{Hyper}), the letter is normally
upper-case.  If the @code{Shift} key is pressed as well, then the letter
becomes lower-case.  This is exactly the reverse of what the @code{Shift}
key does to letters without control bits.  (The @code{Shift-lock} key has
no effect on letters with control bits.)

@defun char-code char
@defunx char-font char
@defunx char-bits char
Return the character code of @i{char}, the font number of @i{char},
and the modifier bits value of @i{char}.  @i{char} may
be a fixnum or a character object; the value is always a fixnum.

These used to be written as
@lisp
(ldb %%ch-char @i{char})
(ldb %%ch-font @i{char})
(ldb %%ch-control-meta @i{char})
@end lisp
Such use of @code{ldb} is frequent but obsolete.
@end defun

.defconst char-code-limit
A constant whose value is a bound on the maximum code of any character.
In the Lisp Machine, currently, it is 400 (octal).
.end_defconst

.defconst char-font-limit
A constant whose value is a bound on the maximum font number value of
any character.  In the Lisp Machine, currently, it is 400 (octal).
.end_defconst

.defconst char-bits-limit
A constant whose value is a bound on the maximum modifier bits value of
any character.  In the Lisp Machine, currently, it is 20 (octal).  Thus,
there are four modifier bits.  These are just the familiar Control, Meta,
Super and Hyper bits.
.end_defconst

.defconst char-control-bit
.defconst1 char-meta-bit
.defconst1 char-super-bit
.defconst1 char-hyper-bit
Constants with values 1, 2, 4 and 8.
These give the meanings of the bits within the bits-field of a character object.
Thus, @code{(bit-test char-meta-bit (char-bits @i{char}))} would be non-@code{nil}
if @i{char} is a meta-character.  (This can also be tested with @code{char-bit}.)
.end_defconst

@defun char-bit char name
@code{t} if @i{char} has the modifier bit named by @i{name}.  @i{name} is
one of the following four symbols: @code{:control}, @code{:meta},
@code{:super}, and @code{:hyper}.
@lisp
(char-bit #\meta-x :meta) => t.
@end lisp
@end defun

@defun set-char-bit char name newvalue
Returns a character like @i{char} except that the bit specified by @i{name}
is present if @i{newvalue} is non-@code{nil}, absent otherwise.  Thus,
@lisp
(set-char-bit #\x :meta t) => #\meta-x.
@end lisp
The value is a fixnum if @i{char} is one; a character object if @i{char} is one.
@end defun

@c  	Since the control bits are not part of the fundamental 8-bit
@c character codes, there is no way to express keyboard input in terms of
@c simple character codes.  However, there is a convention accepted by the
@c relevant programs for encoding keyboard input into a string of
@c characters: if a character has its @code{Control} bit on, prefix it with an
@c alpha.  If a character has its @code{Meta} bit on, prefix it with a
@c beta.  If a character has both its @code{Control} and @code{Meta} bits on,
@c prefix it with an epsilon.  If a character has its @code{Super} bit on,
@c prefix it with a pi.  If a character has its @code{Hyper} bit on,
@c prefix it with a lambda.  To get an alpha, beta,
@c epsilon, pi, lambda, or equivalence into the string,
@c quote it by prefixing it with an equivalence.

@cindex keyboard character
Until recently the only way to access
the character code, font and modifier bits was with @code{ldb},
using the byte field names listed below.
Most code still uses that method, but it is obsolete; @code{char-bit}
should be used instead.
@cindex %%kbd fields

@table @code
@item %%kbd-char
@itemx %%ch-char
'vindex %%kbd-char
'vindex %%ch-char
Specifies the byte containing the character code.

@item %%ch-font
'vindex %%ch-font
Specifies the byte containing the font number.

@item %%kbd-control
'vindex %%kbd-control
Specifies the byte containing the Control bit.

@item %%kbd-meta
'vindex %%kbd-meta
Specifies the byte containing the Meta bit.

@item %%kbd-super
'vindex %%kbd-super
Specifies the byte containing the Super bit.

@item %%kbd-hyper
'vindex %%kbd-hyper
Specifies the byte containing the Hyper bit.

@item %%kbd-control-meta
'vindex %%kbd-control-meta
Specifies the byte containing all the modifier bits.
@end table

Characters are sometimes used to represent mouse clicks.  The character
says which button was pressed and how many times.  Refer to the Window
System manual for an explanation of how these characters are generated.

@defun tv:kbd-mouse-p char
@code{t} if @i{char} is a character used to represent a mouse click.
Such characters are always distinguishable from characters that represent
keyboard input.
@end defun

.defconst %%kbd-mouse-button
The value of @code{%%kbd-mouse-button} is a byte specifier for the field in
a mouse signal that says which button was clicked.  The byte contains
@code{0}, @code{1}, or @code{2} for the left, middle, or right button,
respectively.
.end_defconst

.defconst %%kbd-mouse-n-clicks
The value of @code{%%kbd-mouse-n-clicks} 
is a byte specifier for the field in a mouse signal
that says how many times the button was clicked.
The byte contains one less than the number of times the button was clicked.
.end_defconst

@subsection Constructing Character Objects

@defun code-char code &optional (bits @code{0}) (font @code{0})
@defunx make-char code &optional (bits @code{0}) (font @code{0})
Returns a character object made from @i{code}, @i{bits} and @i{font}.
Common Lisp says that not all combinations may be valid, and that @code{nil}
is returned for an invalid combination.  On the Lisp Machine, any combination
is valid if the arguments are valid individually.

According to Common Lisp, @code{code-char} requires a number as a first
argument, whereas @code{make-char} requires a character object, whose character
code is used.  On the Lisp Machine, either function may be used in either way.
@end defun

@defun digit-char weight &optional (radix @code{10.}) (font @code{0})
Returns a character object which is the digit with the specified weight,
and with font as specified.  However, if there is no suitable character
which has weight @i{weight} in the specified radix, the value is @code{nil}.
If the ``digit'' is a letter (which happens if @i{weight} is greater than
9), it is returned in upper case.
@end defun

@defun tv:make-mouse-char button n-clicks
Returns the fixnum character code that represents a mouse click in the
standard way.  @code{tv:mouse-char-p} of this value is @code{t}.
@i{button} is 0 for the leftbutton, 1 for the middle button,
or 2 for the right button.  @i{n-clicks} is one less than the
number of clicks (1 for a double click, 0 normally).
@end defun

@subsection The Character Set
@cindex character code values

Here are the numerical values of the characters in the Zetalisp
character set.  It should never be necessary for a user or a source
program to know these values.  Indeed, they are likely to be
changed in the future.  There are symbolic names for all characters; see
the section on character names, below.

It is worth pointing out that the Zetalisp character
set is different from the ASCII character set.   File servers
operating on hosts that use ASCII for storing text files
automatically perform character set conversion when text files
are read or written.  The details of the mapping are explained in
(character-set-differences).
7
.group
.nofill
@c 000 center-dot ( )             040 space       100 @@           140 `
@c 001 down arrow ()             041 !           101 A           141 a
@c 002 alpha ()                  042 "           102 B           142 b
@c 003 beta ()                   043 #           103 C           143 c
@c 004 and-sign ()               044 $           104 D           144 d
@c 005 not-sign ()               045 %           105 E           145 e
@c 006 epsilon ()                046 &           106 F           146 f
@c 007 pi ()                     047 '           107 G           147 g
@c 010 lambda ((ctl-h))                 050 (           110 H           150 h
@c 011 gamma (	)                  051 )           111 I           151 i
@c 012 delta ()                  052 *           112 J           152 j
@c 013 uparrow ()                053 +           113 K           153 k
@c 014 plus-minus ()             054 ,           114 L           154 l
@c 015 circle-plus ((ctl-m))            055 -           115 M           155 m
@c 016 infinity ()               056 .           116 N           156 n
@c 017 partial delta ()          057 /           117 O           157 o
@c 020 left horseshoe ()         060 0           120 P           160 p
@c 021 right horseshoe ()        061 1           121 Q           161 q
@c 022 up horseshoe ()           062 2           122 R           162 r
@c 023 down horseshoe ()         063 3           123 S           163 s
@c 024 universal quantifier ()   064 4           124 T           164 t
@c 025 existential quantifier () 065 5           125 U           165 u
@c 026 circle-X ()               066 6           126 V           166 v
@c 027 double-arrow ()           067 7           127 W           167 w
@c 030 left arrow ()             070 8           130 X           170 x
@c 031 right arrow ()            071 9           131 Y           171 y
@c 032 not-equals ()             072 :           132 Z           172 z
@c 033 diamond (altmode) ()      073 ;           133 [           173 @{
@c 034 less-or-equal ()          074 <           134 \           174 |
@c 035 greater-or-equal ()       075 =           135 ]           175 @}
@c 036 equivalence ()            076 >           136 ^           176 ~
@c 037 or ()                     077 ?           137 _           177 (ctl-qm)
@c 200 Null character     210 Overstrike    220 Stop-output   230 Roman-iv
@c 201 Break              211 Tab           221 Abort         231 Hand-up
@c 202 Clear              212 Line          222 Resume        232 Hand-down
@c 203 Call               213 Delete        223 Status        233 Hand-left
@c 204 Terminal escape    214 Page          224 End           234 Hand-right
@c 205 Macro/backnext     215 Return        225 Roman-i       235 System
@c 206 Help               216 Quote         226 Roman-ii      236 Network
@c 207 Rubout             217 Hold-output   227 Roman-iii
@c 237-377 reserved for the future


                    The Lisp Machine Character Set
			(all numbers in octal)
.fill
.apart
*

@subsection Classifying Characters

@defun string-char-p char
@code{t} if @i{char} is a character that can be stored in a string.  On the
Lisp Machine, this is true if the font and modifier bits of @i{char} are zero.
@end defun

@defun standard-char-p char
@code{t} if @i{char} is a standard Common Lisp character: any of the 95
ASCII printing characters (including @code{Space}), and the @code{Return} character.
Thus @code{(standard-char-p #\end)} is @code{nil}.
@end defun

@defun graphic-char-p char
@code{t} if @i{char} is a graphic character; one which has a printed shape.
@code{A}, @code{-}, @code{Space} and 7* are all graphic characters; @code{Return},
@code{End} and @code{Abort} are not.  A character whose modifier bits are
nonzero is never graphic.

Ordinary output to windows prints graphic characters using the current font.
Nongraphic characters are printed using lozenges unless they have special
formatting meanings (as @code{Return} does).
@end defun

@defun alpha-char-p char
@code{t} if @i{char} is a letter with zero modifier bits.
@end defun

@defun digit-char-p char &optional (radix @code{10.})
If @i{char} is a digit available in the specified radix, returns the
@i{weight} of that digit.  Otherwise, it returns @code{nil}.  If the modifier
bits of @i{char} are nonzero, the value is always @code{nil}.  (It would be
more useful to ignore the modifier bits, but this decision provides
Common Lisp with a foolish consistency.)  Examples:
@lisp
(digit-char-p #\8 8) => nil
(digit-char-p #\8 9) => 8
(digit-char-p #\F 16.) => 15.
(digit-char-p #\c-8 @i{anything}) => nil
@end lisp
@end defun

@defun alphanumericp char
@code{t} if @i{char} is a letter or a digit 0 through 9, with zero modifier bits.
@end defun

@subsection Comparing Characters

@defun char-equal &rest chars
This is the primitive for comparing characters for equality; many of the
string functions call it.  The arguments may be fixnums or character
objects indiscriminately.  The result is @code{t} if the characters are
equal ignoring case, font and modifier bits, otherwise @code{nil}.
@end defun

@defun char-not-equal &rest chars
@code{t} if the arguments are all different as characters, ignoring
case, font and modifier bits.
@end defun

@defun char-lessp &rest chars
@defunx char-greaterp &rest chars
@defunx char-not-lessp &rest chars
@defunx char-not-greaterp &rest chars
Ordered comparison of characters, ignoring case, font and modifier bits.
These are the primitives for comparing characters for order; many of the
string functions call it.  The arguments may be fixnums or character
objects.  The result is @code{t} if the arguments are in strictly increasing
(strictly decreasing, nonincreasing, nondecreasing) order.  Details of the
ordering of characters are in (character-set).
@end defun

@defun char= char1 &rest chars
@defunx char//= char1 &rest chars
@defunx char> char1 &rest chars
@defunx char< char1 &rest chars
@defunx char>= char1 &rest chars
@defunx char<= char1 &rest chars
These are the Common Lisp functions for comparing characters and 
including the case, font and bits in the comparison.  On the Lisp Machine
they are synonyms for the numeric comparison functions @code{=}, @code{>}, etc.
Note that in Common Lisp syntax you would write @code{char/=}, not @code{char//=}.
@end defun

@subsection Character Names
@cindex special character

Characters can sometimes be referred to by long names; as, for
example, in the @code{#\} construct in Lisp programs.  Every basic
character (zero modifier bits) which is not a graphic character has
one or more standard names.  Some graphic characters have standard
names too.  When a non-graphic character is output to a window, it
appears as a lozenge containing the character's standard name.

@defun char-name char
Returns the standard name (or one of the standard names) of @i{char}, or
@code{nil} if there is none.  The name is returned as a string.
@code{(char-name #\space)} is the string @code{"SPACE"}.

If @i{char} has nonzero modifier bits, the value
is @code{nil}.  Compound names such as @code{Control-X} are not constructed by
this function.
@end defun

@defun name-char name
Returns (as a character object) the character for which @i{name} is a name,
or returns @code{nil} if @i{name} is not a recognized character name.
@i{name} may be a symbol or a string.
Compound names such as @code{Control-X} are not recognized.

@code{read} uses this function to process the @code{#\} construct when
a character name is encountered.
@end defun

The following are the recognized special character names, in alphabetical order except
with synonyms together.  Character names are encoded and decoded by the functions
@code{char-name} and @code{name-char} ((char-name-fun)).

First a list of the special function keys.
@lisp
@code{abort		break		call		clear-input,  clear
delete		end		hand-down	hand-left
hand-right	hand-up		help		hold-output
line,  lf		macro,  back-next	network
overstrike,  backspace,  bs		page,  form,  clear-screen
quote		resume		return, cr		
roman-i		roman-ii		roman-iii		roman-iv
rubout		space,  sp		status		stop-output
system		tab		terminal,  esc}
@end lisp

These are printing characters that also have special names because they may be hard
to type on the hosts that are used as file servers.
@c This table has to be formatted "wrong" when you look at it here
@c to come out right when you print it.
@lisp
@code{altmode		circle-plus	delta		gamma
integral		lambda		plus-minus	uparrow
center-dot	down-arrow	alpha		beta
and-sign		not-sign		epsilon		pi
lambda		gamma		delta		up-arrow
plus-minus	circle-plus	infinity		partial-delta
left-horseshoe	right-horseshoe	up-horseshoe	down-horseshoe
universal-quantifier			existential-quantifier
circle-x		double-arrow	left-arrow		right-arrow
not-equal		altmode		less-or-equal	greater-or-equal
equivalence	or-sign}
@end lisp

The following names are for special characters sometimes used to
represent single and double mouse clicks.  The buttons can be called
either @code{l}, @code{m}, @code{r} or @code{1}, @code{2}, @code{3} depending on stylistic
preference.
@lisp
@code{mouse-l-1 1or} mouse-1-1		mouse-l-2 1or* mouse-1-2
mouse-m-1 1or* mouse-2-1		mouse-m-2 1or* mouse-2-2
mouse-r-1 1or* mouse-3-1		mouse-r-2 1or* mouse-3-2*
@end lisp

@section  Conversion to Upper or Lower Case
@cindex case conversion
@cindex alphabetic case
@cindex upper case letter
@cindex lower case letter

@defun upper-case-p char
@code{t} if @i{char} is an upper case letter with zero modifier bits.
@end defun

@defun lower-case-p char
@code{t} if @i{char} is an lower case letter with zero modifier bits.
@end defun

@defun both-case-p char
This Common Lisp function is defined to return
@code{t} if @i{char} is a character which has distinct upper and lower case forms.
On the Lisp Machine it returns @code{t} if @i{char} is a letter with zero
modifier bits.
@end defun

@defun char-upcase char
	If @i{char}, is a lower-case alphabetic
character its upper-case form is returned; otherwise, @i{char} itself is
returned.  If font information or modifier bits are present, they are preserved.
If @i{char} is a fixnum, the value is a fixnum.  If @i{char} is a character
object, the value is a character object.
@end defun

@defun char-downcase char
Similar, but converts to lower case.
@end defun

@defun string-upcase string &key (start @code{0}) end
Returns a string like @i{string}, with all lower-case alphabetic
characters replaced by the corresponding upper-case characters.
If @i{start} or @i{end} is specified, only the specified portion
of the string is converted, but in any case the entire string is
returned.

The result is a copy of @i{string} unless no change is necessary.
@i{string} itself is never modified.
@end defun

@defun string-downcase string &key (start @code{0}) end
Similar, but converts to lower case.
@end defun

@defun string-capitalize string &key (start @code{0}) end
Returns a string like @i{string} in which all, or the specified portion, has been
processed by capitalizing each word.  For this function, a word is any maximal
sequence of letters or digits.  It is capitalized by putting the first character
(if it is a letter) in upper case and any letters in the rest of the word in lower case.

The result is a copy of @i{string} unless no change is necessary.
@i{string} itself is never modified.
@end defun

@defun nstring-upcase string &key (start @code{0}) end
@defunx nstring-downcase string &key (start @code{0}) end
@defunx nstring-capitalize string &key (start @code{0}) end
Like the previous functions except that they modify @i{string} itself and return it.
@end defun

@defun string-capitalize-words string &optional (copy-p @code{t}) (spaces @code{t})
Puts each word in @i{string} into lower-case with an upper case initial,
and if @i{spaces} is non-@code{nil} replaces each hyphen character with a space.

If @i{copy-p} is @code{t}, the value is a copy of @i{string}, and
@i{string} itself is unchanged.  Otherwise, @i{string} itself is
returned, with its contents changed.

This function is somewhat obsolete.  One can use @code{string-capitalize}
followed optionally by @code{string-subst-char}.
@end defun

See also the @code{format} operation @code{~(}...@code{~)} on (format-case-convert).

@section  Basic String Operations

@defun make-string size &key (initial-element @code{0})
Creates and returns a string of length @i{size}, with each element
initialized to @i{initial-element}, which may be a fixnum
or a character.
@end defun

@defun string x
Coerces @i{x} into a string.  Most of the string functions apply this to
their string arguments.  If @i{x} is a string (or any array), it is
returned.  If @i{x} is a symbol, its pname is returned.  If @i{x} is a
non-negative fixnum less than 400 octal, a one-character-long string
containing it is created and returned.  If @i{x} is an instance that
supports the @code{:string-for-printing} operation (such as, a pathname)
then the result of that operation is returned.  Otherwise, an error is
signaled.

If you want to get the printed representation of an object into the
form of a string, this function is @i{not} what you should use.
You can use @code{format}, passing a first argument of @code{nil} (see (format-fun)).
You might also want to use @code{with-output-to-string} (see
(with-output-to-string-fun)).
@end defun

@defun string-length string
Returns the number of characters in @i{string}.  This is 1
if @i{string} is a number or character object, the @code{array-active-length}
(see (array-active-length-fun))
if @i{string}
is an array, or the @code{array-active-length} of the pname if @i{string} is a symbol.
@end defun

@defun string-equal string1 string2 &key (start1 @code{0}) (start2 @code{0}) end1 end2
Compares two strings, returning @code{t} if
they are equal and @code{nil} if they are not.  The comparison ignores
the font and case of the characters.  @code{equal} calls @code{string-equal} if
applied to two strings.

	The keyword arguments @i{start1} and @i{start2} are the starting
indices into the strings.  @i{end1} and @i{end2}
are the final indices; the comparison stops just @i{before} the final index.
@code{nil} for @i{end1} or @i{end2} means stop at the end of the string.
@lisp
@exdent Examples:
(string-equal "Foo" "foo") => t
(string-equal "foo" "bar") => nil
(string-equal "element" "select" 0 1 3 4) => t
@end lisp

An older calling sequence in which the @i{start} and @i{end} arguments are
positional rather than keyword is still supported.  The arguments
come in the order @i{start1} @i{start2} @i{end1} @i{end2}.  This calling
sequence is obsolete and should be changed whenever found.
@end defun

@defun string-not-equal string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@code{(not (string-equal ...))}
@end defun

@defun string= string1 string2 &key (start1 @code{0}) (start2 @code{0}) end1 end2
is like @code{string-equal} except that case is significant.
@lisp
(string= "A" "a") => nil
@end lisp
@end defun

@defun string string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string//= string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@code{(not (string= ...))}.  Note that in Common Lisp syntax you would
write @code{string/=}, not @code{string//=}.
@end defun

@defun string-lessp string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string-greaterp string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string-not-greaterp string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string-not-lessp string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
Compare all or the specified portions of @i{string1} and @i{string2}
using dictionary order.  Characters are compared using @code{char-lessp}
and @code{char-equal} so that font and alphabetic case are ignored.

You can use these functions as predicates, but they do more.
If the strings fit the condition (e.g. @i{string1} is strictly less in
@code{string-lessp}) then the value is a number, the index in @i{string1}
of the first point of difference between the strings.  This equals
the length of @i{string1} if the strings match.  If the condition is
not met, the value is @code{nil}.
@lisp
(string-lessp "aa" "Ab") => 1
(string-lessp "aa" "Ab" :end1 1 :end2 1) => nil
(string-not-greaterp "Aa" "Ab" :end1 1 :end2 1) => 1
@end lisp
@end defun

@defun string< string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string> string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string>= string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string<= string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
@defunx string string1 string2 &key (start1 @code{0}) end1 (start2 @code{0}) end2
Like @code{string-lessp}, etc., but treat case and font as significant
when comparing characters.
@lisp
(string< "AA" "aa") => 0
(string-lessp "AA" "aa") => nil
@end lisp
@end defun

@defun string-compare string1 string2 &optional (start1 @code{0}) (start2 @code{0}) end1 end2
Compares two strings using dictionary order (as defined
by @code{char-lessp}).  The arguments are interpreted as in @code{string-equal}.
The result is @code{0} if the strings are equal, a negative number if @i{string1}
is less than @i{string2}, or a positive number if @i{string1} is greater than
@i{string2}.  If the strings are not equal, the absolute value of the
number returned is one greater than the index (in @i{string1}) where the first
difference occurred.
@end defun

@defun substring string start &optional end area
Extracts a substring of @i{string}, starting at the
character specified by @i{start} and going up to but not including
the character specified by @i{end}.  @i{start} and @i{end} are
0-origin indices.  The length of the returned string is @i{end} minus
@i{start}.  If @i{end} is not specified it defaults to the length
of @i{string}.  The area in which the result is to be consed may be
optionally specified.
@cindex paper tape punch
@lisp
@exdent Example:
(substring "Nebuchadnezzar" 4 8) => "chad"
@end lisp
@end defun

@defun nsubstring string start &optional end area
Is like @code{substring} except that the substring
is not copied; instead an indirect array (see (indirect-array)) is created which shares part
of the argument @i{string}.  Modifying one string will modify the other.

Note that @code{nsubstring} does not necessarily use less storage than
@code{substring}; an @code{nsubstring} of any length uses at least as much
storage as a @code{substring} 12 characters long.  So you shouldn't use
this for efficiency; it is intended for uses in which it is important
to have a substring which, if modified, will cause the original string
to be modified too.
@end defun

@defun string-append &rest strings
Copies and concatenates any number of strings into a single string.
With a single argument, @code{string-append} simply copies it.  If there
are no arguments, the value is an empty string.  In fact, vectors of any
type may be used as arguments, and the value is a vector capable of
holding all the elements of all the arguments.  Thus @code{string-append}
can be used to copy and concatenate any type of vector.  If the first
argument is not an array (for example, if it is a character), the value
is a string.
@lisp
@exdent Example:
(string-append #\! "foo" #\!) => "!foo!"
@end lisp
@end defun

@defun string-nconc modified-string &rest strings
Is like @code{string-append} except that instead
of making a new string containing the concatenation of its arguments,
@code{string-nconc} modifies its first argument.  @i{modified-string}
must have a fill-pointer so that additional characters can be tacked
onto it.  Compare this with @code{array-push-extend}
((array-push-extend-fun)).  The value of @code{string-nconc} is
@i{modified-string} or a new, longer copy of it; in the latter case
the original copy is forwarded to the new copy (see @code{adjust-array-size},
(adjust-array-size-fun)).  Unlike @code{nconc}, @code{string-nconc}
with more than two arguments modifies only its first argument, not
every argument but the last.
@end defun

@defun string-trim char-set string
Returns a @code{substring} of @i{string}, with all characters
in @i{char-set} stripped off the beginning and end.
@i{char-set} is a set of characters, which can be represented as a list
of characters, a string of characters or a single character.
@lisp
@exdent Example:
(string-trim '(#\sp) "  Dr. No  ") => "Dr. No"
(string-trim "ab" "abbafooabb") => "foo"
@end lisp
@end defun

@defun string-left-trim char-set string
Returns a @code{substring} of @i{string}, with all characters
in @i{char-set} stripped off the beginning.
@i{char-set} is a set of characters, which can be represented as a list
of characters, a string of characters or a single character.
@end defun

@defun string-right-trim char-set string
Returns a @code{substring} of @i{string}, with all characters
in @i{char-set} stripped off the end.
@i{char-set} is a set of characters, which can be represented as a list
of characters, a string of characters or a single character.
@end defun

@defun string-remove-fonts string
	Returns a copy of @i{string} with each character truncated to 8
bits; that is, changed to font zero.

If @i{string} is an ordinary string of array type @code{art-string}, this
does not change anything, but it makes a difference if @i{string} is an
@code{art-fat-string}.
@end defun

@defun string-reverse string
@defunx string-nreverse string
Like @code{reverse} and @code{nreverse}, but on strings only (see (reverse-fun)).
There is no longer any reason to use these functions except
that they coerce numbers
and symbols into strings like the other string functions.
@end defun

@defun string-pluralize string
Returns a string containing the plural of the
word in the argument @i{string}.  Any added characters go in the same
case as the last character of @i{string}.
@lisp
@exdent Example:
(string-pluralize "event") => "events"
(string-pluralize "trufan") => "trufen"
(string-pluralize "Can") => "Cans"
(string-pluralize "key") => "keys"
(string-pluralize "TRY") => "TRIES"
@end lisp
For words with multiple plural forms depending on the
meaning, @code{string-pluralize} cannot always do the right thing.
@end defun

@defun string-select-a-or-an word
Returns @code{"a"} or @code{"an"} according to the string @i{word};
whichever one appears to be correct to use before @i{word} in English.
@end defun

@defun string-append-a-or-an word
Returns the result of appending @code{"a "} or @code{"an "}, whichever is
appropriate, to the front of @i{word}.
@end defun

@defun %string-equal string1 start1 string2 start2 count
@code{%string-equal} is the microcode primitive used by @code{string-equal}.
It returns @code{t} if the @i{count} characters of @i{string1} starting
at @i{start1} are @code{char-equal} to the @i{count} characters of @i{string2}
starting at @i{start2}, or @code{nil} if the characters are not equal or
if @i{count} runs off the length of either array.

Instead of a fixnum, @i{count} may also be @code{nil}.  In this case,
@code{%string-equal} compares
the substring from @i{start1} to @code{(string-length @i{string1})}
against the substring from @i{start2} to @code{(string-length @i{string2})}.
If the lengths of these substrings differ, then they are not equal and
@code{nil} is returned.

Note that @i{string1} and @i{string2} must really be strings; the
usual coercion of symbols and fixnums to strings is not performed.
This function is documented because certain programs which require
high efficiency and are willing to pay the price of less generality
may want to use @code{%string-equal} in place of @code{string-equal}.

@lisp
@exdent Examples:
1To compare the two strings @i{foo} and @i{bar}:*
(%string-equal @i{foo} 0 @i{bar} 0 nil)
1To see if the string @i{foo} starts with the characters @code{"bar"}:*
(%string-equal @i{foo} 0 "bar" 0 3)
@end lisp
@end defun

@defvar alphabetic-case-affects-string-comparison
If this variable is @code{t}, the functions @code{%string-equal} and @code{%string-search}
consider case (and font) significant in comparing characters.
Normally this variable is @code{nil} and those primitives ignore differences of case.

This variable may be bound by user programs around calls to
@code{%string-equal} and @code{%string-search-char}, but do not set it globally,
for that may cause system malfunctions.
@end defvar

@section  String Searching

@defun string-search-char char string &optional (from @code{0}) to consider-case
Searches through @i{string} starting at the index @i{from},
which defaults to the beginning, and returns the index of the first
character that is @code{char-equal} to @i{char}, or @code{nil} if none is found.
If @i{to} is non-@code{nil}, it is used in place of @code{(string-length @i{string})}
to limit the extent of the search.
@lisp
@exdent Example:
(string-search-char #\a "banana") => 1
@end lisp
Case (and font) is significant in comparison of characters if @i{consider-case}
is non-@code{nil}.  In other words, characters are compared using @code{char=} rather
than @code{char-equal}.
@lisp
(string-search-char #\a "BAnana" 0 nil t) => 3
@end lisp
@end defun

@defun %string-search-char char string from to
@code{%string-search-char} is the microcode primitive called by @code{string-search-char}
and other functions.  @i{string} must be an array and @i{char}, @i{from},
and @i{to} must be fixnums.  The arguments are all required.
Case-sensitivity is controlled by the value of the variable
@code{alphabetic-case-affects-string-comparison} rather than by an argument.
Except for these these differences, @code{%string-search-char} is the same as
@code{string-search-char}.  This function is documented for the benefit of
those who require the maximum possible efficiency in string searching.
@end defun

@defun string-search-not-char char string &optional (from @code{0}) to consider-case
Like @code{string-search-char} but searches @i{string} for a character different
from @i{char}.
@lisp
@exdent Example:
(string-search-not-char #\B "banana") => 1
(string-search-not-char #\B "banana" 0 nil t) => 0
@end lisp
@end defun

@defun string-search key string &optional (from @code{0}) to (key-from @code{0}) key-to consider-case
Searches for the string @i{key} in the string
@i{string}.
The search begins at @i{from}, which defaults to the beginning of
@i{string}.  The value returned is the index of the first character of
the first instance of @i{key}, or @code{nil} if none is found.  If
@i{to} is non-@code{nil}, it is used in place of @code{(string-length
@i{string})} to limit the extent of the search.

The arguments @i{key-from} and @i{key-to} can be used to specify the
portion of @i{key} to be searched for, rather than all of @i{key}.

Case and font are significant in character
comparison if @i{consider-case} is non-@code{nil}.
@lisp
@exdent Example:
(string-search "an" "banana") => 1
(string-search "an" "banana" 2) => 3
(string-search "tank" "banana" 2 nil 1 3) => 3
(string-search "an" "BAnaNA" 0 nil 0 nil t) => nil
@end lisp
@end defun

@defun string-search-set char-set string &optional (from @code{0}) to consider-case
Searches through @i{string} looking for a character that is in
@i{char-set}.  @i{char-set} is a set of characters, which can be
represented as a sequence of characters or a single character.

The search begins at the index @i{from}, which defaults to the
beginning.  It returns the index of the first character that is
@code{char-equal} to some element of @i{char-set}, or @code{nil} if none is
found.  If @i{to} is non-@code{nil}, it is used in place of
@code{(string-length @i{string})} to limit the extent of the search.

Case and font are significant in character
comparison if @i{consider-case} is non-@code{nil}.
@lisp
@exdent Example:
(string-search-set '(#\n #\o) "banana") => 2
(string-search-set "no" "banana") => 2
@end lisp
@end defun

@defun string-search-not-set char-set string &optional (from @code{0}) to consider-case
Like @code{string-search-set} but searches for a character that is @i{not}
in @i{char-set}.
@lisp
@exdent Example:
(string-search-not-set '(#\a #\b) "banana") => 2
@end lisp
@end defun

@defun string-reverse-search-char char string &optional from (to @code{0}) consider-case
Searches through @i{string} in reverse
order, starting from the index one less than @i{from} (@code{nil} for
@i{from} starts at the end of @i{string}), and returns the index of the
first character which is @code{char-equal} to @i{char}, or @code{nil} if none
is found.  Note that the index returned is from the beginning of the
string, although the search starts from the end.
The last (leftmost) character of @i{string} examined is the one at index @i{to}.

Case and font are significant in character
comparison if @i{consider-case} is non-@code{nil}.  In this case,
@code{char=} is used for the comparison rather than @code{char-equal}.
@lisp
@exdent Example:
(string-reverse-search-char #\n "banana") => 4
@end lisp
@end defun

@defun string-reverse-search-not-char char string &optional from (to @code{0}) consider-case
Like @code{string-reverse-search-char} but searches for a character in @i{string}
that is different from @i{char}.
@lisp
@exdent Example:
(string-reverse-search-not-char #\a "banana") => 4
;14 is the index of the second "n"*
@end lisp
@end defun

@defun string-reverse-search key string &optional from (to @code{0}) (key-from @code{0}) key-to consider-case
Searches for the string @i{key} in the string @i{string}.
The search proceeds in reverse order, starting
from the index one less than @i{from},
and returns the index of the first (leftmost) character of the first instance found,
or @code{nil} if none is found.  Note that the index returned
is from the beginning of the string, although the search starts from the end.
The @i{from} condition, restated, is that the instance of @i{key} found
is the rightmost one whose rightmost character is before the @i{from}'th character
of @i{string}.  @code{nil} for @i{from} means the search starts at the end of @i{string}.
The last (leftmost) character of @i{string} examined is the one at index @i{to}.

@lisp
@exdent Example:
(string-reverse-search "na" "banana") => 4
@end lisp

The arguments @i{key-from} and @i{key-to} can be used to specify the
portion of @i{key} to be searched for, rather than all of @i{key}.
Case and font are significant in character
comparison if @i{consider-case} is non-@code{nil}.
@end defun

@defun string-reverse-search-set char-set string &optional from (to @code{0}) consider-case
Searches through @i{string} in reverse order for a character
which is @code{char-equal} to some element of @i{char-set}.
@i{char-set} is a set of characters, which can be represented as a list
of characters, a string of characters or a single character.

The search starts from an index one less than @i{from}, and returns the
index of the first suitable character found, or @code{nil} if none is
found.  @code{nil} for @i{from} means the search starts at the end of
@i{string}.  Note that the index returned is from the beginning of the
string, although the search starts from the end.  The last (leftmost)
character of @i{string} examined is the one at index @i{to}.

Case and font are significant in character
comparison if @i{consider-case} is non-@code{nil}.  In this case,
@code{char=} is used for the comparison rather than @code{char-equal}.

@lisp
(string-reverse-search-set "ab" "banana") => 5
@end lisp
@end defun

@defun string-reverse-search-not-set char-set string &optional from (to @code{0}) consider-case
Like @code{string-reverse-search-set} but searches for a character which
is @i{not} in @i{char-set}.
@lisp
(string-reverse-search-not-set '(#\a #\n) "banana") => 0
@end lisp
@end defun

@defun string-subst-char new-char old-char string (copy-p @code{t}) (retain-font-p @code{t})
Returns a copy of @i{string} in which all occurrences of @i{old-char}
have been replaced by @i{new-char}.

Case and font are ignored in comparing @i{old-char} against characters of @i{string}.
Normally the font information of the character replaced is preserved, so that an @i{old-char}
in font 3 is replaced by a @i{new-char} in font 3.  If @i{retain-font-p} is @code{nil},
the font specified in @i{new-char} is stored whenever a character is replaced.

If @i{copy-p} is @code{nil}, @i{string} is modified destructively and returned.
No copy is made.
@end defun

@defun substring-after-char char string &optional start end area
Returns a copy of the portion of @i{string} that follows the next
occurrence of @i{char} after index @i{start}.  The portion copied ends
at index @i{end}.  If @i{char} is not found before @i{end}, a null
string is returned.

The value is consed in area @i{area}, or in @code{default-cons-area},
unless it is a null string.
@i{start} defaults to zero, and @i{end} to the length of @i{string}.
@end defun

See also @code{make-symbol} ((make-symbol-fun)), which given a string makes
a new uninterned symbol with that print name, and @code{intern}
((intern-fun)), which given a string returns the one and only symbol
(in the current package) with that print name.

@section  Maclisp-Compatible Functions

The following functions are provided primarily for Maclisp compatibility.

@defun alphalessp string1 string2
@code{(alphalessp @i{string1 string2})} is equivalent to
@code{(string-lessp @i{string1 string2})}.
@end defun

@defun samepnamep sym1 sym2
This predicate is equivalent to @code{string=}.
@end defun

@defun getchar string index
	Returns the @i{index}'th character of @i{string}
as a symbol.  Note that 1-origin indexing is used.  This function
is mainly for Maclisp compatibility; @code{aref} should be used
to index into strings (but @code{aref} does not coerce symbols
or numbers into strings).
@end defun

@defun getcharn string index
	Returns the @i{index}'th character of @i{string}
as a fixnum.  Note that 1-origin indexing is used.  This function
is mainly for Maclisp compatibility; @code{aref} should be used
to index into strings (but @code{aref} does not coerce symbols
or numbers into strings).
@end defun

@defun ascii x
Like @code{character}, but returns a symbol
whose printname is the character instead of returning a fixnum.
@lisp
@exdent Examples:
(ascii #o101) => A
(ascii #o56) => /.
@end lisp
The symbol returned is interned in the current package (see (package)).
@end defun

@defun maknam char-list
Returns
an uninterned symbol whose print-name is a string made up of the characters in @i{char-list}.
@lisp
@exdent Example:
(maknam '(a b #\0 d)) => ab0d
@end lisp
@end defun

@defun implode char-list
	@code{implode} is like @code{maknam} except that the returned symbol
is interned in the current package.
@end defun

@chapter Functions
@cindex function
@cindex definition

Functions are the basic building blocks of Lisp programs.  This chapter
describes the functions in Zetalisp that are used to manipulate
functions.  It also explains how to manipulate special forms and macros.

This chapter contains internal details intended for those writing programs
to manipulate programs as well as material suitable for the beginner.
Feel free to skip sections that look complicated or uninteresting
when reading this for the first time.

@section  What Is a Function?

There are many different kinds of functions in Zetalisp.  Here
are the printed representations of examples of some of them:
@lisp
foo
(lambda (x) (car (last x)))
(named-lambda foo (x) (car (last (x))))
(subst (x) (car (last x)))
#<dtp-fef-pointer append 1424771>
#<dtp-u-entry last 270>
#<dtp-closure 1477464>
@end lisp
We will examine these and other types of functions in detail later in this chapter.
There is one thing they all have in common:  a function is a Lisp object
that can be applied to arguments.  All of the above objects may be
applied to some arguments and will return a value.  Functions are Lisp
objects and so can be manipulated in all the usual ways; you can pass
them as arguments, return them as values, and make other Lisp objects
refer to them.

@section  Function Specs
@cindex function spec

The name of a function does not have to be a symbol.  Various kinds of
lists describe other places where a function can be found.  A Lisp
object that describes a place to find a function is called a @i{function spec}.
(`Spec' is short for `specification'.)
Here are the printed representations of some typical function specs:
@lisp
foo
(:property foo bar)
(:method tv:graphics-mixin :draw-line)
(:internal foo 1)
(:within foo bar)
(:location #<dtp-locative 7435216>)
@end lisp

Function specs have two purposes: they specify a place to @i{remember} a
function, and they serve to @i{name} functions.  The most common kind of
function spec is a symbol, which specifies that the function cell
of the symbol is the place to remember the function.  We will see all the
different types of function spec, and what they mean, shortly.  Function specs are
not the same thing as functions.  You cannot, in general, apply a
function spec to arguments.  The time to use a function spec is when
you want to @i{do} something to the function, such as define it,
look at its definition, or compile it.

Some kinds of functions remember their own names, and some don't.  The
``name'' remembered by a function can be any kind of function spec,
although it is usually a symbol.  In the examples of functions in the
previous section, the one starting with the symbol @code{named-lambda}, the
one whose printed representation included @code{dtp-fef-pointer}, and the
@code{dtp-u-entry} remembered names (the function specs @code{foo},
@code{append}, and @code{last} respectively).  The others didn't remember
their names.

To @i{define a function spec} means to make that function spec remember
a given function.  Programs do this by calling @code{fdefine}; you give
@code{fdefine} a function spec and a function, and @code{fdefine} remembers
the function in the place specified by the function spec.  The function
associated with a function spec is called the @i{definition} of the
function spec.  A single function can be
the definition of more than one function spec at the same time, or of no
function specs.

The definition of a function spec can be obtained with @code{fdefinition}.
@code{(function @i{function-spec})} does so too, but here @i{function-spec}
is not evaluated.  For example, @code{(function foo)} evaluates to the
function definition of @code{foo}.  @code{fdefinition} is used by programs
whose purpose is to examine function definitions, whereas @code{function}
is used in this way by programs of all sorts to obtain a specific
definition and use it.  See (function-fun).

To @i{define a function} means to create a new function and define a
given function spec as that new function.  This is what the @code{defun}
special form does.  Several other special forms, such as @code{defmethod}
((defmethod-fun)) and @code{defselect} ((defselect-fun)), do this too.

These special forms that define functions usually take a function spec,
create a function whose name is that function spec, and then define that
function spec to be the newly-created function.  Most function
definitions are done this way, and so usually if you go to a function
spec and see what function is there, the function's name is the
same as the function spec.  However, if you define a function named
@code{foo} with @code{defun}, and then define the symbol @code{bar} to be this
same function, the name of the function is unaffected; both @code{foo} and
@code{bar} are defined to be the same function, and the name of that
function is @code{foo}, not @code{bar}.

@cindex basic definition
@cindex encapsulation
A function spec's definition in general consists of a @i{basic
definition} surrounded by @i{encapsulations}.  Both the basic
definition and the encapsulations are functions, but of recognizably
different kinds.  What @code{defun} creates is a basic definition, and
usually that is all there is.  Encapsulations are made by
function-altering functions such as @code{trace}, @code{breakon} and @code{advise}.  When the
function is called, the entire definition, which includes the tracing
and advice, is used.  If the function is redefined with @code{defun},
only the basic definition is changed; the encapsulations are left in
place.  See the section on encapsulations, (encapsulate).

A function spec is a Lisp object of one of the following types:
@table @code
@item @i{a symbol}
The function is remembered in the function cell of the symbol. See
(fsymeval-fun) for an explanation of function cells and the primitive
functions to manipulate them. 

@item (:property @i{symbol} @i{property})
The function is remembered on the property list of the symbol; doing
@code{(get @i{symbol} @i{property})} returns the function.  Storing
functions on property lists is a frequently-used technique for
dispatching (that is, deciding at run-time which function to call, on
the basis of input data).

@item (:method @i{flavor-name} @i{operation})
@itemx (:method @i{flavor-name} @i{method-type} @i{operation})
@itemx (:method @i{flavor-name} @i{method-type} @i{operation} @i{suboperation})
The function is remembered inside internal data structures of the
flavor system and is called automatically as part of handling the
operation @i{operation} on instances of @i{flavor-name}.  See the
chapter on flavors ((flavor)) for details.

@item (:handler @i{flavor-name} @i{operation})
This is a name for the function actually called when an @i{operation} message
is sent to an instance of the flavor @i{flavor-name}.  The difference
between @code{:handler} and @code{:method} is that the handler may be a method
inherited from some other flavor or a @i{combined method} automatically
written by the flavor system.  Methods are what you define in source files;
handlers are not.  Note that redefining or encapsulating a handler affects
only the named flavor, not any other flavors built out of it.  Thus
@code{:handler} function specs are often used with @code{trace}
(see (trace-fun)), @code{breakon} ((breakon-fun)), and @code{advise} ((advise-fun)).

@item (:select-method @i{function-spec} @i{operation})
This function spec assumes that the definition of @i{function-spec} is
a select-method object (see (select-method)) containing an alist
of operation names and functions to handle them, and refers to one
particular element of that alist: the one for operation @i{operation}.

The function is remembered in that alist element and is called when
@i{function-spec}'s definition is called with first argument
@i{operation}.

@code{:select-method} function specs are most often used implicitly
through @code{defselect}.  One of the things done by
@lisp
(defselect foo
  (:win (x) (cons 'win x))
  ...)
@end lisp
is to define the function spec @code{(:select-method foo :win)}.

@code{:select-method} function specs are explicitly given
function definitions when you use @code{defselect-incremental}
instead of @code{defselect}, as in
@lisp
(defselect-incremental foo)
(defun (:select-method foo :win) (ignore x)
  (cons 'win x))
@end lisp

@item (:lambda-macro @i{name})
This is a name for the function that expands the lambda macro @i{name}.

@item (:location @i{pointer})
The function is stored in the cdr of @i{pointer}, which may be a locative
or a list.  This is for pointing at an arbitrary place
that there is no other way to describe.  This form of function spec
isn't useful in @code{defun} (and related special forms) because the
reader has no printed representation for locative pointers and always
creates new lists; these function specs are intended for programs
that manipulate functions (see (programs-that-manipulate-functions)).

@item (:within @i{within-function} @i{function-to-affect})
This refers to the meaning of the symbol @i{function-to-affect}, but
only where it occurs in the text of the definition of
@i{within-function}.  If you define this function spec as anything
but the symbol @i{function-to-affect} itself, then that symbol is
replaced throughout the definition of @i{within-function} by a new
symbol, which is then defined as you specify.  See the section on
@code{si:rename-within} encapsulations ((rename-within-section)) for more
information.

It is rarely useful to define a @code{:within} function spec by hand, but
often useful to trace or advise one.  For example,
@lisp
(breakon '(:within myfunction eval))
@end lisp
allows you to break when @code{eval} is called from @code{myfunction}.
Simply doing @code{(breakon 'eval)} will probably blow away your machine.

@item (:internal @i{function-spec} @i{number})
Some Lisp functions contain internal functions, created by
@code{(function (lambda ...))} forms.  These internal functions need names when
compiled, but they do not have symbols as names; instead they are named
by @code{:internal} function-specs.  @i{function-spec} is the name of the
containing function.  @i{number} is a sequence number; the first
internal function the compiler comes across in a given function is
numbered 0, the next 1, etc.  Internal functions are remembered inside
the compiled function object of their containing function.

@item (:internal @i{function-spec} @i{symbol})
If a Lisp function uses @code{flet} to name an internal function,
you can use the local name defined with @code{flet} in the
@code{:internal} function spec instead of a number.  Here is an
example of such a function:
@lisp
(defun foo (a)
  (flet ((square (x) (* x x)))
    (+ a (square a))))
@end lisp
After compiling @code{foo}, you could use the function spec @code{(:internal foo square)}
to refer to the internal function locally named @code{square}.
You could also use @code{(:internal foo 0)}.  If there are multiple @code{flet}'s
defining local functions with the same name, only the first can be
referred to by name this way.
@end table

Here is an example defining a function whose name is not a symbol:
@lisp
(defun (:property foo bar-maker) (thing &optional kind)
  (set-the 'bar thing (make-bar 'foo thing kind)))
@end lisp
This puts a function on @code{foo}'s @code{bar-maker} property.  Now you can
say
@lisp
(funcall (get 'foo 'bar-maker) 'baz)
@exdent or
(funcall #'(:property foo bar-maker) 'bax)
@end lisp

Unlike the other kinds of function spec, a symbol @i{can} be used as a
function.  If you apply a symbol to arguments, the symbol's function
definition is used instead.  If the definition of the first symbol is
another symbol, the definition of the second symbol is used, and so on,
any number of times.  But this is an exception; in general, you can't
apply function specs to arguments.

A keyword symbol that identifies function specs (i.e., that may appear
in the car of a list which is a function spec) is identified by a
@code{sys:function-spec-handler} property whose value is a function that
implements the various manipulations on function specs of that type.
The interface to this function is internal and not documented in this
manual.

For compatibility with Maclisp, the function-defining special forms
@code{defun}, @code{macro}, and @code{defselect} (and other defining
forms built out of them, such as @code{defmacro})
also accept a list
@lisp
(@i{symbol} @i{property})
@end lisp
as a function name.  This is translated into
@lisp
(:property @i{symbol} @i{property})
@end lisp

@i{symbol} must not be one of the keyword symbols that
identify a function spec, since that would be ambiguous.

@section  Simple Function Definitions

@defspec defun
The usual way of defining a function that is part of a
program.  A @code{defun} form looks like:
@lisp
(defun @i{name} @i{lambda-list}
  @i{body}...)
@end lisp

@i{name} is the function spec you wish to define as a function.
The @i{lambda-list} is a list of the names to give to the arguments of
the function.  Actually, it is a little more general than that; it can
contain @i{lambda-list keywords} such as @code{&optional} and @code{&rest}.
(These keywords are explained in (lambda-list) and other
keywords are explained in (lambda-list-keywords).)
See (additional-defun-explanation) for some additional syntactic features of @code{defun}.

@code{defun} creates a list that looks like
@lisp
(named-lambda @i{name} @i{lambda-list body}...)
@end lisp
and puts it in the function cell of @i{name}.
@i{name} is now defined as a function and can be called by other forms.

@lisp
@exdent Examples:
(defun addone (x)
  (1+ x))

(defun foo (a &optional (b 5) c &rest e &aux j)
  (setq j (+ (addone a) b))
  (cond ((not (null c))
	 (cons j e))
	(t j))) 
@end lisp

@code{addone} is a function which expects a number as an argument, and
returns a number one larger.  @code{foo} is a complicated function that
takes one required argument, two optional arguments, and any number of
additional arguments that are given to the function as a list named 
@code{e}.

A declaration (a list starting with @code{declare}) can appear as the first
element of the body.  It applies to the entire function definition;
if it is a @code{special} declaration, it applies to bindings made in
the lambda list and to free references anywhere in the function.  For
example,
@lisp
(defun foo (x)
  (declare (special x))
  (bar))             ;bar1 uses @code{x} free.*
@end lisp
causes the binding of @code{x} to be a dynamic binding, and
@lisp
(defun foo (&rest args)
  (declare (arglist a b c))
  (apply 'bar args))
@end lisp
causes @code{(arglist 'foo)} to return @code{(a b c)} rather than
@code{(&rest args)}, presumably because the former is more informative
in the particular application.

A documentation string can also appear at the beginning of the body;
it may precede or follow a declaration.  This documentation string becomes part of the
function's debugging info and can be obtained with the function
@code{documentation} (see (documentation-fun)).  The first line of the
string should be a complete sentence that makes sense read by itself,
since there are two editor commands to get at the documentation, one of
which is ``brief'' and prints only the first line.  Example:
@lisp
(defun my-append (&rest lists)
   "Like append but copies all the lists.
This is like the Lisp function append, except that
append copies all lists except the last, whereas
this function copies all of its arguments
including the last one."
   ...)
@end lisp
@end defspec

A documentation string may not be the last element of the body;
a string in that position is interpreted as a form to evaluate
and return and is not considered to be a documentation string.

For more information on defining functions, and other ways of doing so,
see (function-defining).

@section  User Operations on Functions

Here is a list of the various things a user (as opposed to a program) is
likely to want to do to a function.  In all cases, you specify a
function spec to say where to find the function.

To print out the definition of the function spec with indentation to
make it legible, use @code{grindef} (see (grindef-fun)).  This works only
for interpreted functions.  If the definition is a compiled function, it
can't be printed out as Lisp code, but its compiled code can be printed
by the @code{disassemble} function (see (disassemble-fun)).

To find out about how to call the function, you can ask to see its
documentation or its argument names.  (The argument names are usually
chosen to have mnemonic significance for the caller).  Use @code{arglist}
((arglist-fun)) to see the argument names and @code{documentation}
((documentation-fun)) to see the documentation string.  There are also
editor commands for doing these things: the @code{Control-Shift-D} and
@code{Meta-Shift-D} commands are for looking at a function's documentation,
and @code{Control-Shift-A} is for looking at an argument list.

@code{Control-Shift-A} and @code{Control-Shift-D} do not ask for the function
name; they act on the function that is called by the innermost
expression which the cursor is inside.  Usually this is the function
that will be called by the form you are in the process of writing.
They are available in the rubout handler as well.

You can see the function's debugging info alist by means of the function
@code{debugging-info} (see (debugging-info-fun)).

When you are debugging, you can use @code{trace} (see (trace-fun)) to
obtain a printout or a break loop whenever the function is called.  You
can use @code{breakon} (see (breakon-fun)) to cause the error handler to
be entered whenever the function is called; from there, you can step
through further function calls and returns.  You can customize the
definition of the function, either temporarily or permanently, using
@code{advise} (see (advise-fun)).

@section  Kinds of Functions

There are many kinds of functions in Zetalisp.  This section
briefly describes each kind of function.  Note that a function is also a
piece of data and can be passed as an argument, returned, put in a list,
and so forth.

There are four kinds of functions, classified by how they work.

First, there are @i{interpreted} functions: you define them with
@code{defun}, they are represented as list structure, and they are
interpreted by the Lisp evaluator.

Secondly, there are @i{compiled} functions: they are defined
by @code{compile} or by loading a QFASL file, they are represented by a
special Lisp data type, and they are executed directly by the microcode.
Similar to compiled functions are microcode functions, which are written
in microcode (either by hand or by the micro-compiler) and executed directly
by the hardware.

Thirdly, there are various types of Lisp object that can be applied to
arguments, but when they are applied they dig up another function
somewhere and apply it instead.  These include select-methods,
closures, instances, and entities.

Finally, there are various types of Lisp object that, when called as
functions, do something special related to the specific data type.
These include arrays and stack-groups.

@subsection Interpreted Functions

An interpreted function is a piece of list structure that represents a
program according to the rules of the Lisp interpreter.  Unlike other
kinds of functions, interpreted functions can be printed out and read
back in (they have a printed representation that the reader understands),
can be pretty-printed (see (grindef-fun)), and can be
examined with the usual functions for list-structure manipulation.

There are four kinds of interpreted functions: @code{lambda}s,
@code{named-lambda}s, @code{subst}s, and @code{named-subst}s.  A @code{lambda} function is the
simplest kind.  It is a list that looks like this:
@lisp
(lambda @i{lambda-list} @i{form1} @i{form2}...)
@end lisp
The symbol @code{lambda} identifies this list as a @code{lambda}
function.  @i{lambda-list} is a description of what arguments the
function takes; see (lambda-list) for details.  The @i{forms}
make up the body of the function.  When the function is called,
the argument variables are bound to the values of the arguments
as described by @i{lambda-list}, and then the forms in the body are
evaluated, one by one.  The values of the function are the values of its
last form.

A @code{named-lambda} is like a @code{lambda} but contains an extra element in
which the system remembers the function's name, documentation, and other
information.  Having the function's name there allows the error handler
and other tools to give the user more information.  You would not
normally write a @code{named-lambda} yourself; @code{named-lambda} exists so
that @code{defun} can use it.  A @code{named-lambda} function looks like this:
@lisp
(named-lambda @i{name} @i{lambda-list} @i{body forms}...)
@end lisp
If the @i{name} slot contains a symbol, it is the function's name.
Otherwise it is a list whose car is the name and whose cdr is the
function's debugging information alist.  (See @code{debugging-info},
(debugging-info-fun).)  Note that the name need not be a symbol;
it can be any function spec.  For example,
@lisp
(defun (foo bar) (x)
  (car (reverse x)))
@end lisp
gives @code{foo} a @code{bar} property whose value is
@lisp
(named-lambda ((:property foo bar)) (x) (car (reverse x)))
@end lisp

@cindex subst
A @code{subst} is a function which is open-coded by the compiler.
A @code{subst} is just like a @code{lambda} as far as the interpreter is concerned.
It is a list that looks like this:
@lisp
(subst @i{lambda-list} @i{form1} @i{form2}...)
@end lisp
The difference between a @code{subst} and a @code{lambda} is the way they are
handled by the compiler.  A call to a normal function is compiled as a
@i{closed subroutine}; the compiler generates code to compute the values
of the arguments and then apply the function to those values.  A call to
a @code{subst} is compiled as an @i{open subroutine}; the compiler
incorporates the body forms of the @code{subst} into the function being
compiled, substituting the argument forms for references to the
variables in the @code{subst}'s @i{lambda-list}.  @code{subst}'s are described
more fully on (defsubst-fun), with the explanation of @code{defsubst}.

@cindex named-subst
A @code{named-subst} is the same as a @code{subst} except that it has a name
just as a @code{named-lambda} does.  It looks like
@lisp
(named-subst @i{name} @i{lambda-list} @i{form1} @i{form2} ...)
@end lisp
where @i{name} is interpreted the same way as in a @code{named-lambda}.

@subsection Lambda Macros

Lambda macros may appear in functions where @code{lambda} would have
previously appeared.  When the compiler or interpreter detects a
function whose car is a lambda macro, they expand the macro in much
the same way that ordinary Lisp macros are expanded--the lambda
macro is called with the function as its argument and is expected to
return another function as its value.  The definition of a lambda macro
(that is, the function which expands it) may be accessed with the
(@code{:lambda-macro} @i{name}) function spec.

The value returned by the lambda macro expander function may be any
valid function.  Usually it is a list starting with @code{lambda},
@code{subst}, @code{named-lambda} or @code{named-subst}, but it could
also be another use of a lambda macro, or even a compiled function.

@defmac lambda-macro name lambda-list &body body
By analogy with @code{macro}, defines a lambda macro to be called
@i{name}. @i{lambda-list} should consist of one variable, which
is bound to the function that caused the lambda macro to be called.  The
lambda macro must return a function.  For example:
@lisp
(lambda-macro ilisp (x)
  `(lambda (&optional ,@@(second x) &rest ignore) . ,(cddr x)))
@end lisp
defines a lambda macro called @code{ilisp} which can be used to define functions
that accept arguments like a standard Interlisp function: all
arguments are optional and extra arguments are ignored.  A typical use
would be:

@lisp
(fun-with-functional-arg #'(ilisp (x y z) (list x y z)))
@end lisp

This passes to @code{fun-with-functional-arg} a function which will ignore
extra arguments beyond the third, and will default @code{x}, @code{y} and
@code{z} to @code{nil}.
@end defmac

@defmac deflambda-macro
@code{deflambda-macro} is like @code{defmacro}, but defines a lambda macro
instead of a normal macro.  Here is how @code{ilisp} could be defined
using @code{deflambda-macro}:
@lisp
(deflambda-macro ilisp (argument-list &body body)
  `(lambda (&optional ,@@argument-list &rest ignore) . ,body))
@end lisp
@end defmac

@defmac deffunction function-spec lambda-macro-name lambda-list &body body 
Defines a function with a definition that uses an
arbitrary lambda macro instead of @code{lambda}.  It takes arguments like
@code{defun}, expect that the argument immediatly following the function
specifier is the name of the lambda macro to be used.  @code{deffunction}
expands the lambda macro immediatly, so the lambda macro must have
been previously defined.

Example:
@lisp
(deffunction some-interlisp-like-function ilisp (x y z)
  (list x y z))
@end lisp
would define a function called @code{some-interlisp-like-function}
with the definition @code{(ilisp (x y z) (list x y z))}.

@code{(defun foo ...)} could be considered an abbreviation for
@code{(deffunction foo lambda ...)}
@end defmac

@subsection Compiled Functions
@cindex function entry frame
@cindex FEF

There are two kinds of compiled functions: @i{macrocoded} functions
and @i{microcoded} functions.  The Lisp compiler converts @code{lambda}
and @code{named-lambda} functions into macrocoded functions.  A
macrocoded function's printed representation looks like:
@lisp
#<dtp-fef-pointer append 1424771>
@end lisp
This type of Lisp object is also called a `Function Entry Frame', or
`FEF' for short.  Like `car' and `cdr', the name is historical in origin
and doesn't really mean anything.  The object contains Lisp Machine
machine code that does the computation expressed by the function; it
also contains a description of the arguments accepted, any constants
required, the name, documentation, and other things.  Unlike Maclisp
``subr-objects'', macrocoded functions are full-fledged objects and
can be passed as arguments, stored in data structure, and applied to arguments.

The printed representation of a microcoded function looks like:
@lisp
#<dtp-u-entry last 270>
@end lisp
Most microcompiled functions are basic Lisp primitives or subprimitives
written in Lisp Machine microcode.  You can also convert your own
macrocode functions into microcode functions in some circumstances,
using the micro-compiler.

@subsection Other Kinds of Functions

A closure is a kind of function that contains another function and a
set of special variable bindings.  When the closure is applied, it
puts the bindings into effect and then applies the other function.  When
that returns, the closure bindings are removed.  Closures are made with
the function @code{closure}.  See (closure) for more information.
Entities are slightly different from closures; see (entity).

A select-method (internal type code @code{dtp-select-method}) contains an alist of symbols and
functions.  When one is called, the first argument is looked up in the
alist to find the particular function to be called.  This function is
applied to the rest of the arguments.  The alist may have a list of
symbols in place of a symbol, in which case the associated function is
called if the first argument is any of the symbols on the list.  If
@code{cdr} of @code{last} of the alist is non-@code{nil}, it is a @i{default
handler} function, which gets called if the message key is not found
in the alist.  Select-methods can be created with the @code{defselect}
special form (see (defselect-fun)).  If the select-method is the
definition of a function-spec, the individual functions in the alist
can be referred to or defined using @code{:select-method} function specs (see
(select-method-function-spec)).

An instance is a message-receiving object that has both a state and a table
of message-handling functions (called @i{methods}).  Refer to the chapter
on flavors ((flavor)) for further information.

An array can be used as a function.  The arguments to the array are
the indices and the value is the contents of the element of the
array.  This is for Maclisp compatibility and is not recommended usage.
Use @code{aref} ((aref-fun)) instead.

A stack group can be called as a function.  This is one way to pass control
to another stack group.  See (stack-group).

@subsection Special Forms and Functions
@cindex special forms

The special forms of Zetalisp, such as @code{quote}, @code{let} and
@code{cond}, are actually implemented with an unusual sort of function.

First, let's restate the outline of how the evaluator works.  When the
evaluator is given a list whose first element is a symbol, the form may
be a function form, a special form, or a macro form (see
(description-of-evaluation)).  If the definition of the symbol is a
function, then the function is just applied to the result of evaluating
the rest of the subforms.  If the definition is a cons whose car is
@code{macro}, then it is a macro form; these are explained in (macro).
What about special forms?

A special form is implemented by a function that is flagged to tell
the evaluator to refrain from evaluating some or all of the arguments
to the function.  Such functions make use of the lambda-list
keyword @code{&quote}.

The evaluator, on seeing the @code{&quote} in the lambda list of an
interpreted function (or something equivalent in a compiled function)
skips the evaluation of the arguments to which the @code{&quote}
applies.  Aside from that, it calls the function normally.

For example, @code{quote} could be defined as
@lisp
(defun quote (&quote arg) arg)
@end lisp
Evaluation of @code{(quote x)} would see the @code{&quote} in the
definition, implying that the argument @i{arg} should not be
evaluated.  Therefore, the argument passed to the definition
of @code{quote} would be the symbol @code{x} rather than the value of @code{x}.
From then on, the definition of @code{quote} would execute in the normal
fashion, so @code{x} would be the value of @code{arg} and @code{x} would
be returned.

@code{&quote} applies to all the following arguments, but it can be
cancelled with @code{&eval}.  A simple @code{setq} that accepted only one
variable and one value could be defined as follows:
@lisp
(defun setq (&quote variable &eval value)
  (set variable value))
@end lisp
The actual definition of @code{setq} is more complicated and uses
a lambda list @code{(&quote &rest variables-and-values)}.  Then it must
go through the rest-argument, evaluating every other element.

The definitions of special forms are designed with the assumption that
they will be called by @code{eval}.  It does not usually make much sense to
call one with @code{funcall} or @code{apply}.  @code{funcall} and @code{apply} do
not evaluate any arguments; they receive @i{values} of arguments, rather
than expressions for them, and pass these values directly to the
function to be called.  There is no evaluation for @code{funcall} or
@code{apply} to refrain from performing.  Most special forms explicitly
call @code{eval} on some of their arguments, or parts of them, and if
called with @code{apply} or @code{funcall} they will @i{still} do so.  This
behavior is rarely useful, so calling special forms with @code{apply} or
@code{funcall} should be avoided.  Encapsulations can do this successfully,
because they can arrange that quoted arguments are quoted also on entry
to the encapsulation.


It is possible to define your own special form using @code{&quote}.  Macros
can also be used to accomplish the same thing.  It is preferable to
implement language extensions as macros rather than special forms,
because macros directly define a Lisp-to-Lisp translation and therefore
can be understood by both the interpreter and the compiler.  Special
forms, on the other hand, only extend the interpreter.  The compiler has
to be modified in an @i{ad hoc} way to understand each new special form
so that code using it can be compiled.  For example, it would not work
for a compiled function to call the interpreted definition of @code{setq};
the @code{set} in that definition would not be able to act on local
variables of the compiled function.

Since all real programs are eventually compiled,
writing your own special functions is strongly discouraged.
The purpose of @code{&quote} is to be used in the system's own
standard special forms.

New Lisp constructs in the system are also implemented as macros
most of the time; macros are less work for us, too.

@section  Function-Defining Special Forms

@code{defun} is a special form that is put in a program to define a
function; @code{defsubst} and @code{macro} are others.
This section explains how these special forms work, how
they relate to the different kinds of functions, and how they interface to the
rest of the function-manipulation system.

Function-defining special forms typically take as arguments a function
spec and a description of the function to be made, usually in the form
of a list of argument names and some forms that constitute the body of
the function.  They construct a function, give it the function spec as
its name, and define the function spec to be the new function.
Different special forms make different kinds of functions.  @code{defun}
makes a @code{named-lambda} function, and @code{defsubst} makes a @code{named-subst}
function.  @code{macro} makes a macro; though the macro definition is not
really a function, it is like a function as far as definition handling
is concerned.

These special forms are used in writing programs because the function
names and bodies are constants.  Programs that define functions usually
want to compute the functions and their names, so they use @code{fdefine}.
See (fdefine-fun).

All of these function-defining special forms alter only the basic
definition of the function spec.  Encapsulations are preserved.
See (encapsulate).

The special forms only create interpreted functions.  There is no
special way of defining a compiled function.  Compiled functions are
made by compiling interpreted ones.  The same special form that defines
the interpreted function, when processed by the compiler, yields the
compiled function.  See (compiler) for details.

Note that the editor understands these and other ``defining'' special forms
(e.g. @code{defmethod}, @code{defvar}, @code{defmacro}, @code{defstruct}, etc.)
to some extent, so that when you ask for the definition of something, the editor
can find it in its source file and show it to you.  The general convention
is that anything that is used at top level (not inside a function)
and starts with @code{def} should be a special form for defining things
and should be understood by the editor.  @code{defprop} is an exception.

@c [Explain how a user can create his own, or point to an explanation]

The @code{defun} special form (and the @code{defunp} macro which expands into a
@code{defun}) are used for creating ordinary interpreted functions (see (defun-fun)).

For Maclisp compatibility, a @i{type} symbol may be inserted between
@i{name} and @i{lambda-list} in the @code{defun} form.  The following types
are understood:
@table @code
@item expr
The same as no type.
@item fexpr
@code{&quote} and @code{&rest} are prefixed to the lambda list.
@item macro
A macro is defined instead of a normal function.
@end table

If @i{lambda-list} is a non-@code{nil} symbol instead of a list,
the function is recognized as a Maclisp @i{lexpr} and it is converted
in such a way that the @code{arg}, @code{setarg}, and @code{listify} functions
can be used to access its arguments (see (arg-fun)).

The @code{defsubst} special form is used to create substitutible functions.  It
is used just like @code{defun} but produces a list starting with @code{named-subst}
instead of one starting with @code{named-lambda}.  The @code{named-subst} function
acts just like the corresponding @code{named-lambda} function when applied,
but it can also be open-coded (incorporated into its callers) by the compiler.
See (defsubst-fun) for full information.

The @code{macro} special form is the primitive means of creating a macro.
It gives a function spec a definition that is a macro definition rather
than a actual function.  A macro is not a function because it cannot be
applied, but it @i{can} appear as the car of a form to be evaluated.
Most macros are created with the more powerful @code{defmacro} special form.
See (macro).

The @code{defselect} special form defines a select-method function.  See (defselect-fun).

@noindent
Unlike the above special forms, the next two (@code{deff} and @code{def})
do not create new functions.  They simply serve as hints to the editor
that a function is being stored into a function spec here, and therefore
if someone asks for the source code of the definition of that function spec,
this is the place to look for it.

@defspec def
If a function is created in some strange way, wrapping a @code{def} special
form around the code that creates it informs the editor of the connection.
The form
@lisp
(def @i{function-spec}
  @i{form1} @i{form2}...)
@end lisp
simply evaluates the forms @i{form1}, @i{form2}, etc.  It is assumed
that these forms will create or obtain a function somehow, and make
it the definition of @i{function-spec}.

Alternatively, you could put @code{(def @i{function-spec})} in
front of or anywhere near the forms which define the function.  The
editor only uses it to tell which line to put the cursor on.
@end defspec

@defspec deff function-spec definition-creator
@code{deff} is a simplified version of @code{def}.  It
evaluates the form @i{definition-creator}, which should produce a function,
and makes that function the definition of @i{function-spec}, which is not
evaluated.  @code{deff}
is used for giving a function spec a definition which is not obtainable
with the specific defining forms such as @code{defun}.
For example,
@lisp
(deff foo 'bar)
@end lisp
makes @code{foo} equivalent to @code{bar}, with an indirection so that if
@code{bar} changes @code{foo} will likewise change; conversely,
@lisp
(deff foo (function bar))
@end lisp
copies the definition of @code{bar} into @code{foo} with no indirection, so that
further changes to @code{bar} will have no effect on @code{foo}.
@end defspec

@defspec deff-macro function-spec definition-creator
Is like @code{deff} (see (deff-fun)) but for defining macros.
@i{definition-creator} is evaluated to produce a suitable
definition-as-a-macro and then @i{function-spec} is defined that way.
The definition-as-a-macro should be a cons whose car is @code{macro}
and whose cdr is an expander function.  Alternatively, a definition
as a subst function can be used; either a list starting with
@code{subst} or @code{named-subst} or a FEF which records it was compiled
from such a list.

The difference between @code{deff} and @code{deff-macro} is that @code{compile-file}
assumes that @code{deff-macro} is defining something which should be expanded
during compilation.  For the rest of the file, the macro defined here
is available for expansion.  When the file is ultimately loaded,
or if compilation is done in-core, @code{deff} and @code{deff-macro} are
equivalent.
@end defspec

@defmac @@define
This macro turns into @code{nil}, doing nothing.  It exists for the sake of the
@@ listing generation program, which uses it to declare names of special forms
that define objects (such as functions) that @@ should cross-reference.
@end defmac

@defun si:defun-compatibility x
This function is used by @code{defun} and the compiler to convert
Maclisp-style lexpr, fexpr, and macro @code{defun}s to Zetalisp
definitions.  @i{x} should be the cdr of a @code{(defun ...)} form.
@code{defun-compatibility} returns a corresponding @code{(defun ...)} or
@code{(macro ...)} form, in the usual Zetalisp format.  You shouldn't
ever need to call this yourself.
@end defun

@defspec defselect
@code{defselect} defines a function which is a select-method.  This
function contains a table of subfunctions; when it is called, the first
argument, a symbol on the keyword package called the @i{operation},
is looked up in the table to determine which subfunction to call.  Each
subfunction can take a different number of arguments and have a
different pattern of arguments.
@code{defselect} is useful for a variety of ``dispatching'' jobs.  By analogy
with the more general message-passing facilities described in (flavor),
the subfunctions are called @i{methods} and the list of arguments
is sometimes called a @i{message}.

The special form looks like
@lisp
(defselect (@i{function-spec} @i{default-handler} @i{no-which-operations})
  (@i{operation} (@i{args...})
        @i{body...})
  (@i{operation} (@i{args...})
        @i{body...})
  ...)
@end lisp
@i{function-spec} is the name of the function to be defined.
@i{default-handler} is optional; it must be a symbol and is a function
which gets called if the select-method is called with an unknown
operation.  If @i{default-handler} is unsupplied or @code{nil}, then an
unknown operation causes an error with condition name
@code{sys:unclaimed-message} (see (sys:unclaimed-message-condition)).

Normally, methods for the operations @code{:which-operations},
@code{:operation-handled-p} and @code{:send-if-handles} are generated
automatically based on the set of existing methods.  These operations
have the same meaning as they do on flavor instances; see (vanilla-flavor)
for their definitions.  If @i{no-which-operations} is
non-@code{nil}, these methods are not created automatically; however, you
can supply them yourself.

If @i{function-spec} is a symbol, and @i{default-handler} and @i{no-which-operations}
are not supplied, then the first subform of the @code{defselect} may be just @i{function-spec}
by itself, not enclosed in a list.

The remaining subforms in a @code{defselect} are the clauses, each
defining one method.  @i{operation} is the operation to be handled by
this clause or a list of several operations to be handled by the same
clause.  @i{args} is a lambda-list; it should not include the first
argument, which is the operation.  @i{body} is the body of the
function.

A clause can instead look like:
@lisp
  (@i{operation} . @i{symbol})
@end lisp
In this case, @i{symbol} is the name of a function that is to be
called when the @i{operation} operation is performed.  It will be
called with the same arguments as the select-method, including the
operation symbol itself.

The individual methods of the @code{defselect} can be examined,
redefined, traced, etc. using @code{:select-method} function specs
(see (select-method-function-spec)).
@end defspec

@defspec defselect-incremental function-spec default-handler
@code{defselect} defines a select-method function all at once.  By
contrast, @code{defselect-incremental} defines an empty select-method
to which methods can be added with @code{defun}.

Specifically, @code{defselect-incremental} @i{function-spec}, with just a
default handler and the standard methods @code{:which-operations},
@code{:operation-handled-p} and @code{:send-if-handles}.

Individual methods are defined by using @code{defun} on a function spec
of the form @code{(:select-method @i{function-spec} @i{operation})}.
@i{function-spec} specifies where to find the select-method, and
@i{operation} is the operation for which a method should be defined.
The argument list of the @code{defun} must include a first argument
which receives the operation name.

@lisp
@exdent Example:
(defselect-incremental foo ignore)
   ;1The function @code{ignore} is the default handler*
(defun (:select-method foo :lose) (ignore a)
  (1+ a))
@exdent defines the same function @code{foo} as
(defselect (foo ignore)
  (:lose (a) (1+ a)))
@end lisp
These two examples are not completely equivalent, however.  Reevaluating
the @code{defselect} gets rid of any methods that used to exist but have
been deleted from the @code{defselect} itself.  Reevaluating the
@code{defselect-incremental} has no such effect, and reevaluating an
individual @code{defun} redefines only that method.  Methods can be removed
only with @code{fundefine}.
@end defspec

@subsection Maclisp Lexprs
@cindex lexpr

Lexprs are the way Maclisp functions can accept variable numbers of arguments.
They are supported for compatibility only; @code{&optional} and @code{&rest}
are much preferable.  A lexpr definition looks like
@lisp
(defun foo nargs @i{body}...)
@end lisp
where a symbol (@code{nargs}, here) appears in place of a lambda-list.
When the function is called, @code{nargs} is bound to the number of arguments
it was given.  The arguments themselves are accessed using the functions
@code{arg}, @code{setarg}, and @code{listify}.

@defun arg x
@code{(arg nil)}, when evaluated during the application of
a lexpr, gives the number of arguments supplied to that
lexpr.
This is primarily a debugging aid, since lexprs also receive their number of arguments
as the value of their @code{lambda}-variable.

@code{(arg @i{i})}, when evaluated during the application of a lexpr, gives the value of the
@i{i}'th argument to the lexpr.  @i{i} must be a fixnum in this case. It is an error if @i{i} is less than 1 or greater than the number
of arguments supplied to the lexpr.  Example:
@lisp
(defun foo nargs            ;1define a lexpr *foo.
    (print (arg 2))         ;1print the second argument.*
    (+ (arg 1)              ;1return the sum of the first*
       (arg (- nargs 1))))  ;1and next to last arguments.*
@end lisp
@end defun

@defun setarg i x
@code{setarg} is used only during the application of a lexpr.
@code{(setarg @i{i x})} sets the
lexpr's @i{i}'th argument to @i{x}.
@i{i} must be greater than zero
and not greater than the number of arguments passed to the lexpr.
After @code{(setarg @i{i x})} has been done, @code{(arg @i{i})} returns @i{x}.
@end defun

@defun listify n
@code{(listify @i{n})} manufactures a list of @i{n} of the
arguments of a lexpr.  With a positive argument @i{n}, it returns a
list of the first @i{n} arguments of the lexpr.  With a negative
argument @i{n}, it returns a list of the last @code{(abs @i{n})}
arguments of the lexpr.  Basically, it works as if defined as follows: 
@lisp
(defun listify (n)
     (cond ((minusp n)
	    (listify1 (arg nil) (+ (arg nil) n 1)))
	   (t
	    (listify1 n 1))))

(defun listify1 (n m)      ;1 auxiliary function.*
     (do ((i n (1- i))
	  (result nil (cons (arg i) result)))
	 ((< i m) result)))
@end lisp
@end defun

@section  How Programs Manipulate Function Specs


@defun fdefine function-spec definition &optional (carefully @code{nil}) (no-query @code{nil})
This is the primitive used by @code{defun} and everything else in the system
to change the definition of a function spec.  If @i{carefully} is
non-@code{nil}, which it usually should be, then only the basic definition
is changed; the previous basic definition is saved if possible (see
@code{undefun}, (undefun-fun)), and any encapsulations of the function such
as tracing and advice are carried over from the old definition to the
new definition.  @i{carefully} also causes the user to be queried if the
function spec is being redefined by a file different from the one that
defined it originally.  However, this warning is suppressed if either the
argument @i{no-query} is non-@code{nil}, or if the global variable
@code{inhibit-fdefine-warnings} is @code{t}.

If @code{fdefine} is called while a file is being loaded, it records what
file the function definition came from so that the editor can find the
source code.

If @i{function-spec} was already defined as a function, and
@i{carefully} is non-@code{nil}, the function-spec's
@code{:previous-definition} property is used to save the previous
definition.  This property is used by the @code{undefun} function
((undefun-fun)), which restores the previous definition.  The
properties for different kinds of function specs are stored in different
places; when a function spec is a symbol its properties are stored on
the symbol's property list.

@code{defun} and the other function-defining special forms all supply @code{t}
for @i{carefully} and @code{nil} or nothing for @i{no-query}.  Operations
that construct encapsulations, such as @code{trace}, are the only ones
which use @code{nil} for @i{carefully}.
@end defun

@defun si:record-source-file-name name &optional (type @code{defun}) no-query
Records a definition of @i{name}, of type @i{type}.  @i{type} should be
@code{defun} to record a function definition; then @i{name} is a function
spec.  @i{type} can also be @code{defvar}, @code{defflavor}, @code{defresource},
@code{defsignal} or anything else you want to use.

The value of @code{sys:fdefine-file-pathname} is assumed to be the generic
pathname of the file the definition is coming from, or @code{nil} if the
definition is not from a file.  If a definition of the same @i{name} and
@i{type} has already been seen but not in the same file, and
@i{no-query} is @code{nil}, a condition is signaled and then the user is
queried.

If @code{si:record-source-file-name} returns @code{nil}, it means that the
user or a condition handler said the redefinition should not be
performed.
@end defun

@defvar sys:fdefine-file-pathname
While the system is loading a file, this is the generic pathname for the file.
The rest of the time it is @code{nil}.  @code{fdefine} uses this to
remember what file defines each function.
@end defvar

@defun si:get-source-file-name function-spec &optional type
Returns the generic pathname for the file in which @i{function-spec}
received a definition of type @i{type}.  If @i{type} is @code{nil}, the most
recent definition is used, regardless of its type.

@i{function-spec} really is a function spec only if @i{type} is @code{defun};
for example, if @i{type} is @code{defvar}, @i{function-spec} is a variable
name.  Other types that are used by the system are @code{defflavor} and
@code{defstruct}.

This function returns the generic pathname of the source file.
To obtain the actual source file pathname, use the
@code{:source-pathname} operation (see (pathname-source-pathname-method)).

A second value is returned, which is the type of the definition that was
reported.
@end defun

@defun si:get-all-source-file-names function-spec
Returns a list describing the generic pathnames of all the definitions this
function-spec has received, of all types.  The list is an alist whose
elements look like
@lisp
(@i{type} @i{pathname}...)
@end lisp
@end defun

.defflavor-condition sys:redefinition (@code{sys:warning})
This condition, which is not an error, is signaled by
@code{si:record-source-file-name} when something is redefined by a different
file.  The handler for this condition can control what is done about the redefinition.

The condition instance provides the operations @code{:name},
@code{:definition-type}, @code{:old-pathname} and @code{:new-pathname}.
@code{:name} and @code{:definition-type} return the @i{name} and @i{type}
arguments to @code{si:record-source-file-name}.  @code{:old-pathname} and
@code{:new-pathname} return two generic pathnames saying where the old
definition was and where this one is.  The new pathname may be @code{nil},
meaning that the redefinition is being done by the user, not in any
file.

Two proceed types are available, @code{:proceed} and
@code{:inhibit-definition}.  The first tells @code{si:record-source-file-name}
to return @code{t}, the second tells it to return @code{nil}.  If the
condition is not handled at all, the user is queried or warned according
to the value of @code{inhibit-fdefine-warnings}.
.end_defflavor-condition

@defvar inhibit-fdefine-warnings
This variable is normally @code{nil}.  Setting it to @code{t} prevents
@code{si:record-source-file-name} from warning you and asking about
questionable redefinitions such as a function being redefined by a
different file than defined it originally, or a symbol that belongs to
one package being defined by a file that belongs to a different package.
Setting it to @code{:just-warn} allows the warnings to be printed out, but
prevents the queries from happening; it assumes that your answer is
`yes', i.e. that it is all right to redefine the function.
@end defvar

@defun fset-carefully symbol definition &optional force-flag
This function is obsolete.  It is equivalent to
@lisp
(fdefine @i{symbol} @i{definition} t @i{force-flag})
@end lisp
@end defun

@defun fdefinedp function-spec
This returns @code{t} if @i{function-spec} has a definition, @code{nil} if
it does not.
@end defun

@defun fdefinition function-spec
This returns @i{function-spec}'s definition.  If it has none, an error
occurs.
@end defun

@defun fdefinition-location function-spec
Equivalent to @code{(locf (fdefinition @i{function-spec}))}.  For some
kinds of function specs, though not for symbols, this (whichever way you
write it) can cause data structure to be created to hold a definition.
For example, if @i{function-spec} is of the @code{:property} kind, then an
entry may have to be added to the property list if it isn't already
there.
@end defun

@defun fundefine function-spec
Makes @i{function-spec} undefined; the cell where its definition is
stored becomes void.  For symbols this is equivalent to @code{fmakunbound}.
If the function is encapsulated, @code{fundefine} removes both the basic
definition and the encapsulations.  Some types of function specs
(@code{:location} for example) do not implement @code{fundefine}.
@code{fundefine} on a @code{:within} function spec removes the replacement of
@i{function-to-affect}, putting the definition of @i{within-function}
back to its normal state.  @code{fundefine} on a @code{:method} function spec
removes the method completely, so that future messages will be handled
by some other method (see the flavor chapter).
@end defun

@defun undefun function-spec
If @i{function-spec} has a saved previous basic definition, this
interchanges the current and previous basic definitions, leaving the
encapsulations alone.  If @i{function-spec} has no saved previous
definition, @code{undefun} asks the user whether to make it undefined.

This undoes the effect of redefining a function.
See also @code{uncompile} ((uncompile-fun)).
@end defun

@defun si:function-spec-get function-spec indicator
Returns the value of the @i{indicator} property of @i{function-spec},
or @code{nil} if it doesn't have such a property.
@end defun

@defun si:function-spec-putprop function-spec value indicator
Gives @i{function-spec} an @i{indicator} property whose value is @i{value}.
@end defun

@defun si:function-spec-lessp function-spec1 function-spec2
Compares the two function specs with an ordering that is useful in sorting
lists of function specs for presentation to the user.
@end defun

@defun si:function-parent function-spec
If @i{function-spec} does not have its own definition, textually speaking,
but is defined as part of the definition of something else, this function
returns the function spec for that something else.  For example, if
@i{function-spec} is an accessor function for a @code{defstruct}, the value
returned is the name of the @code{defstruct}.

The intent is that if the caller has not been able to find the definition
of @i{function-spec} in a more direct fashion, it can try looking for the
definition of the @i{function-parent} of @i{function-spec}.
This is used by the editor's @code{Meta-.} command.
@end defun

.defcondition sys:invalid-function-spec (@code{error})
This condition name belongs to the error signaled when you refer
to a function spec that is syntactically invalid; such as,
if it is a list whose car is not a recognized type of function spec.

The condition object supports the operation @code{:function-spec},
which returns the function spec which was invalid.

Note that in a few cases the condition @code{:wrong-type-argument} is
signaled instead.  These are the cases in which the error is
correctable.
.end_defcondition

@section  How Programs Examine Functions

These functions take a function as argument and return information about
that function.  Some also accept a function spec and operate on its
definition.  The others do not accept function specs in general but do
accept a symbol as standing for its definition.  (Note that a symbol is
a function as well as a function spec).

The function @code{documentation} can be used to examine a function's
documentation string.  See (documentation-fun).

@defun debugging-info function
This returns the debugging info alist of @i{function}, or @code{nil} if it has none.
@end defun

@defun arglist function &optional real-flag
@code{arglist} is given a function or a function spec, and returns its best
guess at the nature of the function's lambda-list.  It can also
return a second value which is a list of descriptive names for the
values returned by the function.

	If @i{function} is a symbol, @code{arglist}
of its function definition is used.

	If the @i{function} is an actual @code{lambda}-expression,
its cadr, the lambda-list, is returned.  But if @i{function}
is compiled, @code{arglist} attempts to reconstruct the lambda-list of the original
definition, using whatever debugging information was saved by the compiler.

	Some functions' real argument lists are not what would be most
descriptive to a user.  A function may take a rest argument for
technical reasons even though there are standard meanings for the first
elements of that argument.  For such cases, the definition of the
function can specify, with a local declaration, a value to be returned
when the user asks about the argument list.  Example:
@lisp
(defun foo (&rest rest-arg)
  (declare (arglist x y &rest z))
  .....)
@end lisp

@i{real-flag} has one of three values:
@table @code
@item nil
Return the arglist declared by the user in preference to the actual one.
@item t
Return the actual arglist as computed from the function definition's
handling of arguments, ignoring any @code{arglist} declaration.
For a compiled function, this omits all keyword arguments (replacing
them with a rest argument) and may replace initial values of optional
arguments with @code{si:*hairy*} if the actual expressions are too complicated.
@item compile
Like @code{nil}, but in the case of a compiled function it returns
the actual arglist of the lambda-expression that was originally compiled.
The compiler uses this as a basis for checking for incorrect calls
to the function.
@end table

Programs interested in how many and what kind (evaluated or quoted) of
arguments to pass should use @code{args-info} instead.

	When a function returns multiple values, it is useful to give
the values names so that the caller can be reminded which value is
which.  By means of a @code{return-list} declaration in the function's
definition, entirely analogous to the @code{arglist} declaration above,
you can specify a list of mnemonic names for the returned values.  This
list is then returned by @code{arglist} as the second value.
@lisp
(arglist 'arglist)
  => (function &optional real-flag) 1and* (arglist return-list)
@end lisp
@end defun

@defun function-name function &optional try-flavor-name
Returns the name of the function @i{function}, if that can be determined.
If @i{function} does not describe what its name is, @i{function} itself is returned.

If @i{try-flavor-name} is non-@code{nil}, then if @i{function} is a flavor
instance (which can, after all, be used as a function), then the flavor
name is returned.  If the optional argument is @code{nil}, flavor instances
are treated as anonymous.
@end defun

@defun eh:arg-name function arg-number
Returns the name of argument number @i{arg-number} in function @i{function}.
Returns @code{nil} if the function doesn't have such an argument,
or if the name is not recorded.
@code{&rest} arguments are not obtained with @code{arg-number};
use @code{rest-arg-name} to obtain the name of @i{function}'s
@code{&rest} argument, if any.
@end defun

@defun eh:rest-arg-name function
Returns the name of the rest argument of function @i{function}, or
@code{nil} if @i{function} does not have one.
@end defun

@defun eh:local-name function local-number
Returns the name of local variable number @i{local-number} in function @i{function}.
If @i{local-number} is zero, this gets the name of the rest arg
in any function that accepts a rest arg.
Returns @code{nil} if the function doesn't have such a local.
@end defun

@defun args-info function
Returns a fixnum called the ``numeric argument descriptor''
of the @i{function}, which describes the way the function takes arguments.
This descriptor is used internally by the microcode, the evaluator, and
the compiler.  @i{function} can be a function or a function spec.

The information is stored in various bits and byte fields in the
fixnum, which are referenced by the symbolic names shown below.
By the usual Lisp Machine convention, those starting with a single `@code{%}'
are bit-masks (meant to be @code{logand}'ed or @code{bit-test}'ed with the number), and those
starting with `@code{%%}' are byte specifiers, meant to be used with @code{ldb}
or @code{ldb-test}.

	Here are the fields:
@table @code
@item %%arg-desc-min-args
'vindex %%arg-desc-min-args
This is the minimum number of arguments that may be passed
to this function, i.e. the number of required parameters.

@item %%arg-desc-max-args
'vindex %%arg-desc-max-args
This is the maximum number of arguments that may be passed
to this function, i.e. the sum of the number of required
parameters and the number of optional parameters.
If there is a rest argument, this is not really the maximum
number of arguments that may be passed; an arbitrarily-large
number of arguments is permitted, subject to limitations on
the maximum size of a stack frame (about 200 words).

@item %arg-desc-evaled-rest
'vindex %arg-desc-evaled-rest
If this bit is set, the function has a rest argument, and it is not quoted.

@item %arg-desc-quoted-rest
'vindex %arg-desc-quoted-rest
If this bit is set, the function has a rest argument, and it is quoted.
Most special forms have this bit.

@item %arg-desc-fef-quote-hair
'vindex %arg-desc-fef-quote-hair
If this bit is set, there are some quoted arguments other
than the rest argument (if any), and the pattern of quoting is too complicated
to describe here.  The ADL (Argument Description List) in the FEF should be consulted.
This is only for special forms.

@item %arg-desc-interpreted
'vindex %arg-desc-interpreted
This function is not a compiled-code object, and a numeric argument descriptor
cannot be computed.
Usually @code{args-info} does not return this bit, although @code{%args-info} does.

@item %arg-desc-fef-bind-hair
'vindex %arg-desc-fef-bind-hair
There is argument initialization, or something else too
complicated to describe here.
The ADL (Argument Description List) in the FEF should be consulted.
@end table

Note that @code{%arg-desc-quoted-rest} and @code{%arg-desc-evaled-rest} cannot both be set.
@end defun

@defun %args-info function
This is an internal function; it is like @code{args-info}
but does not work for interpreted functions.  Also, @i{function}
must be a function, not a function spec.  It exists because it has
to be in the microcode anyway, for @code{apply} and the basic
function-calling mechanism.
@end defun

@section  Encapsulations
@cindex encapsulation
@cindex basic definition

The definition of a function spec actually has two parts: the @i{basic
definition}, and @i{encapsulations}.  The basic definition is what
is created by functions like @code{defun}, and encapsulations are additions made by
@code{trace} or @code{advise} to the basic definition.  The purpose of making
the encapsulation a separate object is to keep track of what was made by
@code{defun} and what was made by @code{trace}.  If @code{defun} is done a second
time, it replaces the old basic definition with a new one while leaving
the encapsulations alone.

Only advanced users should ever need to use encapsulations directly via
the primitives explained in this section.  The most common things to do
with encapsulations are provided as higher-level, easier-to-use
features: @code{trace} (see (trace-fun)), @code{breakon} (see (breakon-fun))
and @code{advise} (see (advise-fun)).

The actual definition of the function spec is the outermost
encapsulation; this contains the next encapsulation, and so on.  The
innermost encapsulation contains the basic definition.  The way
this containing is done is as follows.
An encapsulation is actually a function whose debugging info alist
contains an element of the form
@lisp
(si:encapsulated-definition @i{uninterned-symbol} @i{encapsulation-type})
@end lisp
The presence of such an element in the debugging info alist
is how you recognize a function to be an encapsulation.  An encapsulation
is usually an interpreted function (a list starting with @code{named-lambda}) but
it can be a compiled function also, if the application which created it
wants to compile it.

@i{uninterned-symbol}'s function definition is the thing that the
encapsulation contains, usually the basic definition of the function spec.  Or it
can be another encapsulation, which has in it another debugging info
item containing another uninterned symbol.  Eventually you get to a
function which is not an encapsulation; it does not have the sort of
debugging info item which encapsulations all have.  That function is the basic
definition of the function spec.

Literally speaking, the definition of the function spec is the
outermost encapsulation, period.  The basic definition is not the
definition.  If you are asking for the definition of the function spec
because you want to apply it, the outermost encapsulation is exactly
what you want.  But the basic definition can be found mechanically
from the definition, by following the debugging info alists.  So it
makes sense to think of it as a part of the definition.  In regard to
the function-defining special forms such as @code{defun}, it is
convenient to think of the encapsulations as connecting between the
function spec and its basic definition.

An encapsulation is created with the macro @code{si:encapsulate}.

@defmac si:encapsulate
A call to @code{si:encapsulate} looks like
@lisp
(si:encapsulate @i{function-spec} @i{outer-function} @i{type}
	     @i{body-form}
	     @i{extra-debugging-info})
@end lisp
All the subforms of this macro are evaluated.  In fact, the macro could
almost be replaced with an ordinary function, except for the way
@i{body-form} is handled.

@i{function-spec} evaluates to the function spec whose definition the
new encapsulation should become.  @i{outer-function} is another function
spec, which should often be the same one.  Its only purpose is to be
used in any error messages from @code{si:encapsulate}.

@i{type} evaluates to a symbol which identifies the purpose of the
encapsulation and says what the application is.  For example, that could
be @code{advise} or @code{trace}.  The list of possible types is defined by
the system because encapsulations are supposed to be kept in an order
according to their type (see @code{si:encapsulation-standard-order},
(si:encapsulation-standard-order-var)).  @i{type} should have an
@code{si:encapsulation-grind-function} property which tells @code{grindef} what to
do with an encapsulation of this type.

@i{body-form} evaluates to the body of the
encapsulation-definition, the code to be executed when it is called.
Backquote is typically used for this expression; see (backquote).
@code{si:encapsulate} is a macro because, while @i{body} is
being evaluated, the variable @code{si:encapsulated-function} is bound to a
list of the form @code{(function @i{uninterned-symbol})}, referring to the
uninterned symbol used to hold the prior definition of
@i{function-spec}.  If @code{si:encapsulate} were a function, @i{body-form}
would just get evaluated normally by the evaluator before @code{si:encapsulate}
ever got invoked, and so there would be no opportunity to bind @code{si:encapsulated-function}.
The form @i{body-form} should contain @code{`(apply ,si:encapsulated-function arglist)}
somewhere if the encapsulation is
to live up to its name and truly serve to encapsulate the original
definition.  (The variable @code{arglist} is bound by some of the code
which the @code{si:encapsulate} macro produces automatically.  When the
body of the encapsulation is run @code{arglist}'s value will be the list of
the arguments which the encapsulation received.)

@i{extra-debugging-info} evaluates to a list of extra items to put into
the debugging info alist of the encapsulation function (besides the one
starting with @code{si:encapsulated-definition}, which every encapsulation
must have).  Some applications find this useful for recording
information about the encapsulation for their own later use.

If @code{compile-encapsulations-flag} is non-@code{nil}, the encapsulation is
compiled before it is installed.  The encapsulations on a particular
function spec can be compiled by calling @code{compile-encapsulations}.
See (compile-encapsulations-fun).
Compiled encapsulations can still be unencapsulated since the
information needed to do so is stored in the debugging info alist, which
is preserved by compilation.  However, applications which wish to modify
the code of the encapsulations they previously created must check for
encapsulations that have been compiled and uncompile them.  This can be
done by finding the @code{sys:interpreted-definition} entry in the debugging
info alist, which is present in all compiled functions except those made by
file-to-file compilation.

When a special function is encapsulated, the encapsulation is itself a
special function with the same argument quoting pattern.  Therefore,
when the outermost encapsulation is started, each argument has been
evaluated or not as appropriate.  Because each encapsulation calls the
prior definition with @code{apply}, no further evaluation takes place, and the
basic definition of the special form also finds the arguments evaluated
or not as appropriate.  The basic definition may call @code{eval} on some
of these arguments or parts of them; the encapsulations should not.

Macros cannot be encapsulated, but their expander functions can be; if
the definition of @i{function-spec} is a macro, then @code{si:encapsulate}
automatically encapsulates the expander function instead.  In this case,
the definition of the uninterned symbol is the original macro
definition, not just the original expander function.
It would not work for the encapsulation to apply the macro definition.
So during the evaluation of @i{body-form}, @code{si:encapsulated-function} is bound
to the form @code{(cdr (function @i{uninterned-symbol}))}, which extracts the
expander function from the prior definition of the macro.

Because only the expander function is actually encapsulated, the
encapsulation does not see the evaluation or execution of the
expansion itself.  The value returned by the encapsulation is the
expansion of the macro call, not the value computed by the expansion.
@end defmac

A program which creates encapsulations often needs to examine an encapsulation
it created and find the body.  For example, adding a second piece of advice
to one function requires doing this.  The proper way to do it is to use
@code{si:encapsulation-body}.

@defun si:encapsulation-body encapsulation
Returns a list whose car is the body-form of @i{encapsulation}.
It is the form that was the fourth argument of 
@code{si:encapsulate} when @i{encapsulation} was created.
To illustrate this relationship,
@lisp
(si:encapsulate 'foo 'foo 'trace 'body))

(si:encapsulation-body (fdefinition 'foo))
  => (body)
@end lisp
@end defun

It is possible for one function to have multiple encapsulations,
created by different subsystems.  In this case, the order of
encapsulations is independent of the order in which they were made.
It depends instead on their types.  All possible encapsulation types
have a total order and a new encapsulation is put in the right place
among the existing encapsulations according to its type and their types.

@defvar si:encapsulation-standard-order
The value of this variable is a list of the allowed encapsulation types,
in the order in which the encapsulations are supposed to be kept
(innermost encapsulations first).  If you want to add new kinds
of encapsulations, you should add another symbol to this list.
Initially its value is
@lisp
(advise breakon trace si:rename-within)
@end lisp
@code{advise} encapsulations are used to hold advice (see (advise-fun)).
@code{breakon} encapsulations are used for implementing @code{breakon} (see (breakon-fun)).
@code{trace}
encapsulations are used for implementing tracing (see (trace-fun)).
@code{si:rename-within} encapsulations are used to record the fact that
function specs of the form @code{(:within @i{within-function}
@i{altered-function})} have been defined.  The encapsulation goes on
@i{within-function} (see (rename-within-section) for more information).
@end defvar

Every symbol used as an encapsulation type must be on the list
@code{si:encapsulation-standard-order}.  In addition, it should have an
@code{si:encapsulation-grind-function} property whose value is a function that
@code{grindef} will call to process encapsulations of that type.  This
function need not take care of printing the encapsulated function
because @code{grindef} will do that itself.  But it should print any
information about the encapsulation itself which the user ought to see.
Refer to the code for the grind function for @code{advise} to see how to
write one.

To find the right place in the ordering to insert a new encapsulation,
it is necessary to parse existing ones.  This is done with the function
@code{si:unencapsulate-function-spec}.

@defun si:unencapsulate-function-spec function-spec &optional encapsulation-types
This takes one function spec and returns another.  If the original
function spec is undefined, or has only a basic definition (that is,
its definition is not an encapsulation), then the original function
spec is returned unchanged.

If the definition of @i{function-spec} is an encapsulation, then
its debugging info is examined to find the uninterned symbol that
holds the encapsulated definition and the encapsulation type.
If the encapsulation is of a type that is to be skipped over, the
uninterned symbol replaces the original function spec and the process
repeats.

The value returned is the uninterned symbol from inside the last
encapsulation skipped.  This uninterned symbol is the first one that
does not have a definition that is an encapsulation that should be
skipped.  Or the value can be @i{function-spec} if @i{function-spec}'s
definition is not an encapsulation that should be skipped.

The types of encapsulations to be skipped over are specified by
@i{encapsulation-types}.  This can be a list of the types to be
skipped, or @code{nil} meaning skip all encapsulations (this is the default).  Skipping all
encapsulations means returning the uninterned symbol that holds the basic
definition of @i{function-spec}.  That is, the @i{definition} of
the function spec returned is the @i{basic definition} of the function spec
supplied.  Thus,
@lisp
(fdefinition (si:unencapsulate-function-spec 'foo))
@end lisp
returns the basic definition of @code{foo}, and
@lisp
(fdefine (si:unencapsulate-function-spec 'foo) 'bar)
@end lisp
sets the basic definition (just like using @code{fdefine} with
@i{carefully} supplied as @code{t}).

@i{encapsulation-types} can also be a symbol, which should be an
encapsulation type; then we skip all types that are supposed to come
outside of the specified type.  For example, if
@i{encapsulation-types} is @code{trace}, then we skip all types of
encapsulations that come outside of @code{trace} encapsulations, but we
do not skip @code{trace} encapsulations themselves.  The result is a
function spec that is where the @code{trace} encapsulation ought to
be, if there is one.  Either the definition of this function spec is a
@code{trace} encapsulation, or there is no @code{trace} encapsulation
anywhere in the definition of @i{function-spec}, and this function
spec is where it would belong if there were one.  For example,
@lisp
(let ((tem (si:unencapsulate-function-spec spec 'trace)))
  (and (eq tem (si:unencapsulate-function-spec tem '(trace)))
       (si:encapsulate tem spec 'trace `(...@i{body}...))))
@end lisp
finds the place where a @code{trace} encapsulation ought to go and
makes one unless there is already one there.

@lisp
(let ((tem (si:unencapsulate-function-spec spec 'trace)))
  (fdefine tem (fdefinition (si:unencapsulate-function-spec
				tem '(trace)))))
@end lisp
eliminates any @code{trace} encapsulation by replacing it by whatever it
encapsulates.  (If there is no @code{trace} encapsulation, this code
changes nothing.)

These examples show how a subsystem can insert its own type of
encapsulation in the proper sequence without knowing the names of any
other types of encapsulations.  Only the variable
@code{si:encapsulation-standard-order}, which is used by
@code{si:unencapsulate-function-spec}, knows the order.
@end defun

@subsection Rename-Within Encapsulations
@cindex rename-within
@cindex function renaming

One special kind of encapsulation is the type @code{si:rename-within}.  This
encapsulation goes around a definition in which renamings of functions
have been done.

How is this used?

If you define, advise, or trace @code{(:within foo bar)}, then @code{bar}
gets renamed to @code{#:altered-bar-within-foo} wherever it is called from
@code{foo}, and @code{foo} gets a @code{si:rename-within} encapsulation to
record the fact.  The purpose of the encapsulation is to enable
various parts of the system to do what seems natural to the user.
For example, @code{grindef} (see (grindef-fun)) notices the
encapsulation, and so knows to print @code{bar} instead of
@code{#:altered-bar-within-foo} when grinding the definition of @code{foo}.

Also, if you redefine @code{foo}, or trace or advise it, the new
definition gets the same renaming done (@code{bar} replaced by
@code{#:altered-bar-within-foo}).  To make this work, everyone who alters
part of a function definition should pass the new part of the
definition through the function @code{si:rename-within-new-definition-maybe}.

@defun si:rename-within-new-definition-maybe function-spec new-structure
Given @i{new-structure}, which is going to become a part of the
definition of @i{function-spec}, perform on it the replacements
described by the @code{si:rename-within} encapsulation in the
definition of @i{function-spec}, if there is one.  The altered
(copied) list structure is returned.

It is not necessary to call this function yourself when you replace
the basic definition because @code{fdefine} with @i{carefully}
supplied as @code{t} does it for you.  @code{si:encapsulate} does this
to the body of the new encapsulation.  So you only need to call 
@code{si:rename-within-new-definition-maybe} yourself if you are rplac'ing
part of the definition.

For proper results, @i{function-spec} must be the outer-level function
spec.  That is, the value returned by @code{si:unencapsulate-function-spec}
is @i{not} the right thing to use.  It will have had one or more
encapsulations stripped off, including the @code{si:rename-within}
encapsulation if any, and so no renamings will be done.
@end defun

@chapter Closures
@cindex closure
@cindex coroutine

	A @i{closure} is a type of Lisp functional object useful
for implementing certain advanced access and control structures.
Closures give you more explicit control over the
environment by allowing you to save the dynamic bindings of specified
variables and then to refer to those bindings later, even after
the construct (@code{let}, etc.) which made the bindings has been exited.

@section  What a Closure Is

	There is a view of dynamic variable binding that we use in this
section because it makes it easier to explain what closures do.  In this
view, when a variable is bound dynamically, a new binding is created for
it.  The old binding is saved away somewhere and is inaccessible.  Any
references to the variable then get the contents of the new
binding, and any @code{setq}'s change the contents of the new value
cell.  Evantually the new binding goes away, and the old binding, along
with its contents, becomes current again.

	For example, consider the following sequence of Lisp forms:

@lisp
(defvar a 3)		;1 @code{a} becomes 3.*

(let ((a 10))		;1 @code{a} rebound to 10.*
  (print (+ a 6)))      ;1 16 is printed.*

(print a)		;1 3 is printed.*
@end lisp

Initially there is a binding for @code{a}, and the @code{setq} form makes the
contents of that binding be @code{3}.  Then the @code{lambda}-combination is
evaluated.  @code{a} is bound to @code{10}: the old binding, which still
contains @code{3}, is saved away, and a new binding is created with
@code{10} as its contents.  The reference to @code{a} inside the @code{lambda}
expression evaluates to the current binding of @code{a}, which is the
contents of its current binding, namely @code{10}.  So @code{16} is printed.
Then the newer binding is discarded and the old binding, which still
contains a @code{3}, is restored.  The final @code{print} prints @code{3}.

	The form @code{(closure @i{var-list} @i{function})}, where
@i{var-list} is a list of variables and @i{function} is any function,
creates and returns a closure.  When this closure is applied to some
arguments, all of the bindings of the variables on @i{var-list} are
saved away, and the bindings that those variables had @i{at the time
@code{closure} was called} (that is, at the time the closure was created)
are made to be the bindings of the symbols.  Then @i{function} is
applied to the arguments.  (This paragraph is somewhat complex, but it
completely describes the operation of closures; if you don't understand
it, come back and read it again after reading the next two paragraphs.)

	Here is another, lower-level explanation.  The closure object
stores several things inside it.  First, it saves the @i{function}.
Secondly, for each variable in @i{var-list}, it remembers what that
variable's binding was when the closure was created.
Then when the closure is called as a function, it first temporarily restores
the bindings it has remembered inside the closure, and then applies @i{function} to the
same arguments to which the closure itself was applied.  When the function
returns, the bindings are restored to be as they were before the closure
was called.

	Now, if we evaluate the form
@lisp
(setq a 
      (let ((x 3))
	(declare (special x))
	(closure '(x) 'frob)))
@end lisp
what happens is that a new binding is created for @code{x}, containing
a fixnum @code{3}.  Then a closure is created, which remembers
the function @code{frob}, the symbol @code{x}, and that binding.
Finally the old binding of @code{x} is restored, and the closure is
returned.  Notice that the new binding is still around, because
it is still known about by the closure.  When the closure is applied,
say by doing @code{(funcall a 7)},
this binding is temporarily restored and the value of @code{x} is @code{3}
again.  If @code{frob} uses @code{x} as a free variable, it sees @code{3}
as the value.

	A closure can be made around any function, using any form that
evaluates to a function.  The form could evaluate to a compiled
function, as would @code{(function (lambda () x))}.  In the example above,
the form is @code{'frob} and it evaluates to the symbol @code{frob}.  A symbol
is also a good function.  It is usually better to close around a symbol
that is the name of the desired function, so that the closure points to
the symbol.  Then, if the symbol is redefined, the closure will use the
new definition.  If you actually prefer that the closure continue to use
the old definition that was current when the closure was made,
use @code{function}, as in:
@lisp
(closure '(x) (function frob))
@end lisp

	Explicit closures made with @code{closure} record only the dynamic
bindings of the specified variables.  Another closure mechanism is
activated automatically to record lexical bindings whenever @code{function}
is used around an explicit lambda expression, but @code{closure} itself has
no interaction with lexical bindings.

It is the user's responsibility to make sure that the bindings that the
closure is intended to record are dynamic bindings, either by means of
special declarations (see (declare-fun)) as shown above or by making the variables
globally special with @code{defvar} or equivalent.  If the function closed over is an
explicit lambda expression, it is occasionally necessary to use declarations
within it to make sure that the variables are considered special there.
But this is not needed if the variables are globally special or if
a special declaration is lexically visible where @code{closure} is called.

Usually the compiler can tell when a special declaration is missing, but
when making a closure the compiler detects this only after acting on the
assumption that the variable is lexical, by which time it is too late to
fix things.  The compiler warns you if this happens.

	In Zetalisp's implementation of closures, lambda-binding never
really allocates any storage to create new bindings.  Bindings receive
separate storage only when the @code{closure} function itself finds they
need it.  Thus, there is no cost associated with closures when they
are not in use.

	Zetalisp closures differ from the closures of Lisp 1.5 (which were
made with @code{function})
in that they save specific variables rather than the entire
variable-binding environment.  For their intended applications, this is
an advantage.  The explicit declaration of the variables in @code{closure}
permits higher efficiency and more flexibility.  In addition the program
is clearer because the intended effect of the closure is made manifest
by listing the variables to be affected.  Lisp 1.5 closures are more similar
to Zetalisp's automatic handling of lexical variables.

@cindex internal value cell
@cindex external value cell
Closure implementation (which it not usually necessary for you to
understand) involves two kinds of value cells.  Every symbol has an
@i{internal value cell}, part of the symbol itself, which is where its
dynamic value is normally stored.  When a variable is closed over, it
gets an @i{external value cell} to hold its value.  The external value
cells behave according to the lambda-binding model used earlier in this
section.  The value in the external value cell is found through the
usual access mechanisms (such as evaluating the symbol, calling
@code{symeval}, etc.), because the internal value cell is made to contain a
forwarding pointer to the external value cell that is current.  Such a
forwarding pointer is present in a symbol's value cell whenever its
current binding is being remembered by some closure; at other times,
there won't be an invisible pointer, and the value resides directly in
the symbol's internal value cell.

@section  Examples of the Use of Closures

One thing we can do with closures is to implement a @i{generator}, which
is a kind of function which is called successively to obtain successive elements
of a sequence.
We implement a function @code{make-list-generator}, which takes a list
and returns a generator that returns successive
elements of the list.  When it gets to the end it should return @code{nil}.

	The problem is that in between calls to the generator, the generator
must somehow remember where it is up to in the list.  Since all of its
bindings are undone when it is exited, it cannot save this information in
a bound variable.  It could save it in a global variable, but the problem
is that if we want to have more than one list generator at a time, they
will all try to use the same global variable and get in each other's way.

	Here is how to solve this problem using closures:
@lisp
(defun make-list-generator (l)
    (declare (special l))
    (closure '(l)
	     #'(lambda ()
		 (prog1 (car l)
		        (setq l (cdr l))))))
@end lisp
@code{(make-list-generator '(1 2 3))} returns a generator which, on successive
calls, returns 1, 2, 3, and @code{nil}.

Now we can make as many list generators as we like; they won't get
in each other's way because each has its own binding for @code{l}.
Each of these bindings was created when the @code{make-list-generator}
function was entered, and the bindings are remembered by the closures.

The following example uses closures which share bindings:
@lisp
(defvar a)
(defvar b)

(defun foo () (setq a 5))

(defun bar () (cons a b))

(let ((a 1) (b 1))
   (setq x (closure '(a b) 'foo))
   (setq y (closure '(a b) 'bar)))
@end lisp

When the @code{let} is entered, new bindings are created for the symbols
@code{a} and @code{b}, and two closures are created that both point to those
bindings.  If we do @code{(funcall x)}, the function @code{foo} is
be run, and it changes the contents of the remembered binding
of @code{a} to @code{5}.  If we then do @code{(funcall y)}, the function @code{bar}
returns @code{(5 . 1)}.  This shows that the binding of @code{a} seen
by the closure @code{y} is the same binding seen by the closure @code{x}.  The
top-level binding of @code{a} is unaffected.

Here is how we can create a function that prints always using base 16:
@lisp
(deff print-in-base-16
      (let ((*print-base* 16.))
        (closure '(*print-base*) 'print)))
@end lisp

@section  Closure-Manipulating Functions

@defun closure var-list function
Creates and returns a closure of @i{function} over the variables
in @i{var-list}.  Note that all variables on @i{var-list}
must be declared special if the function is to compile correctly.
@end defun

To test whether an object is a closure, use the @code{closurep} predicate
(see (closurep-fun)) or @code{(typep @i{object} 'closure)}.

@defun symeval-in-closure closure symbol
Returns the binding of @i{symbol} in the environment of @i{closure};
that is, it returns what you would get if you restored the bindings
known about by @i{closure} and then evaluated @i{symbol}.
This allows you to ``look around inside'' a closure.
If @i{symbol} is not closed over by @i{closure}, this is just like @code{symeval}.

@i{symbol} may be a locative pointing to a value cell instead of a
symbol (this goes for all the whatever-in-closure functions).
@end defun

@defun set-in-closure closure symbol x
Sets the binding of @i{symbol} in the environment of @i{closure}
to @i{x}; that is, it does what would happen if you restored the bindings
known about by @i{closure} and then set @i{symbol} to @i{x}.
This allows you to change the contents of the bindings known about
by a closure.
If @i{symbol} is not closed over by @i{closure}, this is just like @code{set}.
@end defun

@defun locate-in-closure closure symbol
Returns the location of the place in @i{closure} where the saved
value of @i{symbol} is stored.  An equivalent form is
@code{(locf (symeval-in-closure @i{closure} @i{symbol}))}.
@end defun

@defun boundp-in-closure closure symbol
Returns @code{t} if @i{symbol}'s binding in @i{closure} is not void.
This is what @code{(boundp @i{symbol})} would return if executed in
@i{closure}'s saved environment.
@end defun

@defun makunbound-in-closure closure symbol
Makes @i{symbol}'s binding in @i{closure} be void.
This is what @code{(makunbound @i{symbol})} would do if executed in
@i{closure}'s saved environment.
@end defun

@defun closure-alist closure
Returns an alist of @code{(@i{symbol} . @i{value})} pairs describing the
bindings that the closure performs when it is called.  This list is not
the same one that is actually stored in the closure; that one contains
pointers to value cells rather than symbols, and @code{closure-alist}
translates them back to symbols so you can understand them.  As a result,
clobbering part of this list does not change the closure.

The list that is returned may contain void cells if some of the
closed-over variables were void in the closure's environment.
In this case, printing the value will get an error (accessing a cell
that contains a void marker is always an error unless done in a
special, careful way) but the value can still be passed around.
@end defun

@defun closure-variables closure
Returns a list of variables closed over in @i{closure}.  This is
@code{equal} to the first argument specified to the function @code{closure}
when this closure was created.
@end defun

@defun closure-function closure
Returns the closed function from @i{closure}.  This is the function
that was the second argument to @code{closure} when the closure was
created.
@end defun

@defun closure-bindings closure
Returns the actual list of bindings to be performed when @i{closure} is entered.
This list can be passed to @code{sys:%using-binding-instances}
to enter the closure's environment without calling the closure.
See (sys:%using-binding-instances-fun).
@end defun

@defun copy-closure closure
Returns a new closure that has the same function and variable values as
@i{closure}.  The bindings are not shared between the old closure and
the new one, so that if the old closure changes some closed variable's
values, the values in the new closure do not change.
@end defun

@defmac let-closed ((variable value)...) function
When using closures, it is very common to bind a set of variables with
initial values only in order to make a closure over those variables.
Furthermore, the variables must be declared special.  @code{let-closed} is
a special form which does all of this.  It is best described by example:
@lisp
(let-closed ((a 5) b (c 'x))
   (function (lambda () ...)))
1macro-expands into*
(let ((a 5) b (c 'x))
  (declare (special a b c))
  (closure '(a b c)
    (function (lambda () ...))))
@end lisp

Note that the following code, which would often be useful, does not work
as intended if @code{x} is not special outside the @code{let-closed}:
@lisp
(let-closed ((x x))
  (function ...))
@end lisp
This is because the reference to @code{x} as an initialization for the new
binding of @code{x} is affected by the special declaration that the
@code{let-closed} produces.  It therefore does not see any lexical binding
of @code{x}.  This behavior is unfortunate, but it is required by the
Common Lisp specifications.  To avoid the problem, write
@lisp
(let ((y x))
  (let-closed ((x y))
    (function ...)))
@end lisp
or simply change the name of the variable outside the @code{let-closed}
to something other than @code{x}.
@end defmac

@section  Entities
@cindex entity
An entity is almost the same thing as a closure; an entity behaves just
like a closure when applied, but it has a recognizably different data
type which allows certain parts of the system such as the printer and
@code{describe} to treat it differently.  A closure is simply a kind of
function, but an entity is assumed to be a message-receiving object.
Thus, when the Lisp printer (see (printer)) is given a closure, it
prints a simple textual representation, but when it is handed an entity,
it sends the entity a @code{:print-self} message, which the entity is
expected to handle.  The @code{describe} function (see (describe-fun))
also sends entities messages when it is handed them.  So when you want
to make a message-receiving object out of a closure, as described on
(entity-usage), you should use an entity instead.

To a large degree, entities are made obsolete by flavors (see (flavor)).
Flavors have had considerably more attention paid to their efficiency and
to good tools for using them.  If what you are doing is flavor-like, it
is better to use flavors.

@defun entity variable-list function
Returns a newly constructed entity.  This function is just like the
function @code{closure} except that it returns an entity instead of a
closure.

The @i{function} argument should be a symbol which has a function
definition and a value.  When @code{typep} is applied to this entity, it
returns the value of that symbol.
@end defun

To test whether an object is an entity, use the @code{entityp} predicate
(see (entityp-fun)).  The functions @code{symeval-in-closure},
@code{closure-alist}, @code{closure-function}, etc. also operate on entities.

@c Need examples!

@chapter Stack Groups
@cindex stack group
@cindex coroutine

	A @i{stack group} (usually abbreviated `SG') is a type of Lisp
object useful for implementation of certain advanced control structures
such as coroutines and generators.  Processes, which are a kind of
coroutine, are built on top of stack groups (see (process)).  A stack
group represents a computation and its internal state, including the
Lisp stack.

	At any time, the computation being performed by the Lisp
Machine is associated with one stack group, called the @i{current} or
@i{running} stack group.  The operation of making some stack group be
the current stack group is called a @i{resumption} or a @i{stack group
switch}; the previously running stack group is said to have @i{resumed} the new
stack group.  The @i{resume} operation has two parts: first, the state
of the running computation is saved away inside the current stack group,
and secondly the state saved in the new stack group is restored, and the
new stack group is made current.  Then the computation of the new stack
group resumes its course.

@cindex regular pdl
@cindex special pdl
	The stack group itself holds a great deal of state information.
It contains the control stack, or @i{regular PDL}.  The control stack is
what you are shown by the backtracing commands of the error handler
(@code{Control-B}, @code{Meta-B}, and @code{Control-Meta-B}); it remembers the
function which is running, its caller, its caller's caller, etc., and
the point of execution of each function (the @i{return address} of each
function).  A stack group also contains the dynamic environment stack,
or @i{special PDL}.  The name `stack group' derives from the existence
of these two stacks.  Finally, the stack group contains various internal
state information (contents of machine registers and so on).

When the stack group is running, the special PDL contains all the
dynamic bindings that are shadowed by other bindings in this stack
group; bindings that are current reside in the symbols' value cells.
When the stack group is not running, all of the dynamic bindings it has
made reside in its special PDL.  Switching to a stack group moves the
current bindings from the special PDL to the symbol value cells,
exchanging them with the global or other shadowed bindings.  Switching
out of a stack group does the reverse process.  Note that
@code{unwind-protect} handlers are @i{not} run by a stack-group switch (see
@code{let-globally}, (let-globally-fun)).

	Each stack group is a separate environment for purposes of function
calling, throwing, dynamic variable binding, and condition signalling.  All
stack groups run in the same address space; thus they share the same Lisp
data and the same global (not lambda-bound) variables.

@cindex presetting stack groups
@cindex initial function
When a new stack group is created, it is empty: it doesn't contain the state
of any computation, so it can't be resumed.  In order to get things going,
the stack group must be set to an initial state.  This is done by @i{presetting}
the stack group.  To preset a stack group, you supply a function and a set
of arguments.  The stack group is placed in such a state that when it is
first resumed it will apply this function to those arguments.  The function is
called the @i{initial function} of the stack group.

@section  Resuming of Stack Groups

The interesting thing that happens to stack groups is that they resume
each other.  When one stack group resumes a second stack group, the
current state of Lisp execution is saved away in the first stack group
and is restored from the second stack group.  Resuming is also called
@i{switching stack groups}.

At any time, there is one
stack group associated with the current computation; it is called the
current stack group.  The computations associated with other stack
groups have their states saved away in memory and are not
computing.  So the only stack group that can do anything at all, in
particular resuming other stack groups, is the current one.

You can look at things from the point of view of one computation.
Suppose it is running along, and it resumes some stack group.  The state
of the computation state is saved away into its own stack group, and the
computation associated with the called stack group starts up.  The
original computation lies dormant in the original stack group, while
other computations go around resuming each other, until finally the
original stack group is resumed by someone.  Then the computation is
restored from the stack group and gets to run again.

There are several ways that the current stack group can resume other
stack groups.  This section describes all of them.

@cindex resumer
Each stack group records a @i{resumer} which is @code{nil}
or another stack group.  Some forms of resuming examine and alter the
resumer of some stack groups.

Resuming has another ability: it can transmit a Lisp object from the
old stack group to the new stack group.  Each stack group specifies
a value to transmit whenever it resumes another stack group; whenever
a stack group is resumed, it receives a value.

In the descriptions below, let @i{c} stand for the current stack group,
@i{s} stand for some other stack group, and @i{x} stand for any
arbitrary Lisp object.

Stack groups can be used as functions.  They accept one argument.  If
@i{c} calls @i{s} as a function with one argument @i{x}, then @i{s} is
resumed, and the object transmitted is @i{x}.  When @i{c} is resumed
(usually--but not necessarily--by @i{s}), the object transmitted by that
resumption is returned as the value of the call to @i{s}.  This is
one of the simple ways to resume a stack group: call it as a function.
The value you transmit is the argument to the function, and the value
you receive is the value returned from the function.  Furthermore, this
form of resuming sets @i{s}'s resumer to be @i{c}.

Another way to resume a stack group is to use @code{stack-group-return}.
Rather than allowing you to specify which stack group to resume, this
function always resumes the resumer of the current stack group.  Thus,
this is a good way to go back to the stack group which called the
current one, assuming that this was done through a function call.
@code{stack-group-return} takes one argument which is the object to
transmit.  It returns when something resumes the current stack group, and
returns one value, the object that was transmitted by that resumption.
@code{stack-group-return} does not change the resumer of any stack group.

The most fundamental way to do resuming is with @code{stack-group-resume},
which takes two arguments: the stack group, and a value to transmit.
It returns when someone resumes the current stack group, returning
the value that was transmitted by that resumption,
and does not affect any stack group's resumer.

If the initial function of @i{c} attempts to return a value @i{x}, the
regular kind of Lisp function return cannot take place, since the
function did not have any caller (it got there when the stack group was
initialized).  So instead of normal function returning, a ``stack group
return'' happens.  @i{c}'s resumer is resumed, and the value transmitted
is @i{x}.  @i{c} is left in a state (``exhausted'') from which it cannot
be resumed again; any attempt to resume it signals an error.  Presetting
it will make it work again.

Those are the ``voluntary'' forms of stack group switch; a resumption
happens because the computation said it should.  There are also two
``involuntary'' forms, in which another stack group is resumed without the
explicit request of the running program.

If an error occurs, the current stack group resumes the error handler stack
group.  The value transmitted is partially descriptive of the error, and
the error handler looks inside the saved state of the erring stack group
to get the rest of the information.  The error handler recovers from the
error by changing the saved state of the erring stack group and then
resuming it.

When certain events occur, typically a 1-second clock tick, a @i{sequence
break} occurs.  This forces the current stack group to resume a special
stack group called the @i{scheduler} (see (scheduler)).  The scheduler
implements processes by resuming, one after another, the stack group of each
process that is ready to run.

@defvar current-stack-group-resumer
Is the resumer of the current stack group.
@end defvar

@defvar current-stack-group
Is the stack group which is currently running.  A program can use this
variable to get its hands on its own stack group.
@end defvar

@section  Stack Group States

A stack group has a @i{state}, which controls what it will do when it
is resumed.  The code number for the state is returned by the function
@code{sys:sg-current-state}.  This number is the value of one of
the following symbols.  Only the states actually used by the current
system are documented here; some other codes are defined but not used.

@table @code
@item sys:sg-state-active
The stack group is the current one.

@item sys:sg-state-resumable
The stack group is waiting to be resumed, at which time it will pick up
its saved machine state and continue doing what it was doing before.

@item sys:sg-state-awaiting-return
The stack group called some other stack group as a function.  When it is
resumed, it will return from that function call.

@item sys:sg-state-awaiting-initial-call
The stack group has been preset (see below) but has never been called.
When it is resumed, it will call its initial function with the preset
arguments.

@item sys:sg-state-exhausted
The stack group's initial function has returned.  It cannot be resumed.

@item sys:sg-state-awaiting-error-recovery
When a stack group gets an error it goes into this state, which prevents
anything from happening to it until the error handler has looked at it.
In the meantime it cannot be resumed.

@item sys:sg-state-invoke-call-on-return
When the stack group is resumed, it will call a function.  The function
and arguments are already set up on the stack.  The debugger uses this
to force the stack group being debugged to do things.
@end table

@section  Stack Group Functions

@defun make-stack-group name &rest options
Creates and returns a new stack group.  @i{name} may be any symbol
or string; it is used in the stack group's printed representation.
@i{options} is a list of alternating keywords and values.  The options
are not too useful; most calls to @code{make-stack-group} don't need any
options at all.  The options are:
@table @code
@item :sg-area
The area in which to create the stack group structure itself.
Defaults to the default area (the value of @code{default-cons-area}).

@item :regular-pdl-area
The area in which to create the regular PDL.  Only certain areas
specially designated when they were created may be used for regular
PDLs, because regular PDLs are cached in a hardware device called the
@i{pdl buffer}.  The default is @code{sys:pdl-area}.

@item :special-pdl-area
The area in which to create the special PDL.
Defaults to the default area (the value of @code{default-cons-area}).

@item :regular-pdl-size
Length of the regular PDL to be created.  Defaults to 3000 octal.

@item :special-pdl-size
Length of the special PDL to be created.  Defaults to 2000 octal.

@item :swap-sv-on-call-out
@itemx :swap-sv-of-sg-that-calls-me
'kindex :swap-sv-of-sg-that-calls-me make-stack-group
These flags default to 1.  If these are 0, the system does not maintain
separate binding environments for each stack group.  You do not want
to use this feature.

@item :trap-enable
This determines what to do if a microcode error occurs.  If it is 1
the system tries to handle the error; if it is 0 the machine halts.
Defaults to 1.  It is 0 only in the error handler stack group, a
trap in which would not work anyway.

@item :safe
If this flag is 1 (the default), a strict call-return discipline among
stack-groups is enforced.  If 0, no restriction on stack-group
switching is imposed.
@c I could explain this a lot better if I understood it.
@end table
@end defun

.defcondition sys:pdl-overflow (@code{error})
This condition is signaled when there is overflow on either the regular
pdl or the special pdl.  The @code{:pdl-name} operation on the condition
instance returns either @code{:special} or @code{:regular}, to tell handlers
which one.

The @code{:grow-pdl} proceed type is provided.  It takes no arguments.
Proceeding from the error automatically makes the affected pdl bigger.
.end_defcondition

@defvar eh:pdl-grow-ratio
This is the factor by which to increase the size of a pdl after an overflow.
It is initially @code{1.5}.
@end defvar

@defun eh:require-pdl-room regpdl-space specpdl-space
Makes the current stack group larger if necessary, to make sure that
there are at least @i{regpdl-space} free words in the regular pdl, and at
least @i{specpdl-space} free words in the special pdl, not counting the words
currently in use.
@end defun

@defun stack-group-preset stack-group function &rest arguments
This sets up @i{stack-group} so that when it is resumed,
@i{function} will be applied to @i{arguments} within the stack group.
Both stacks are made empty; all saved state in the stack group is destroyed.
@code{stack-group-preset} is typically used to initialize a stack group just after it is made,
but it may be done to any stack group at any time.  Doing this to a stack
group which is not exhausted destroys its present state without
properly cleaning up by running @code{unwind-protect}s.
@end defun

@defun stack-group-resume s x
Resumes @i{s}, transmitting the value @i{x}.
No stack group's resumer is affected.
@end defun

@defun si:sg-resumable-p s
@code{t} if @i{s}'s state permits it to be resumed.
@end defun

.defcondition sys:wrong-stack-group-state (@code{error})
This is signaled if, for example, you try to resume a stack group which
is in the exhausted state.
.end_defcondition

@defun stack-group-return x
Resumes the current stack group's resumer, transmitting the value @i{x}.
No stack group's resumer is affected.
@end defun

@defun symeval-in-stack-group symbol sg &optional frame as-if-current
Evaluates the variable @i{symbol} as a special variable in the binding
environment of @i{sg}.  If @i{frame} is not @code{nil}, it evaluates
@i{symbol} in the binding environment of execution in that frame.  (A
frame is an index in the stack group's regular pdl).

Two values are returned: the symbol's value, and a locative to where
the value is stored.  If @i{as-if-current} is not @code{nil}, the
locative points to where the value @i{would} be stored if @i{sg} were
running.  This may be different from where the value is stored now;
for example, the current binding in stack group @i{sg} is stored in
@i{symbol}'s value cell when @i{sg} is running, but is probably
stored in @i{sg}'s special pdl when @i{sg} is not running.
@i{as-if-current} makes no difference if @i{sg} actually @i{is}
the current stack group.

If @i{symbol}'s current dynamic binding in the specified stack group and
frame is void, this signals a @code{sys:unbound-variable} error.
@end defun

@section  Analyzing Stack Frames

A stack frame is represented by an index in the regular pdl array of the
stack group.  The word at this index is the function executing, or to be
called, in the frame.  The following words in the pdl contain the
arguments.

@defun sg-regular-pdl sg
Returns the regular pdl of @i{sg}.  This is an array of type
@code{art-reg-pdl}.  Stack frames are represented as indices into this array.
@end defun

@defun sg-regular-pdl-pointer sg
Returns the index in @i{sg}'s regular pdl of the last word pushed.
@end defun

@defun sg-special-pdl sg
Returns the special pdl of @i{sg}.  This is an array of type
@code{art-special-pdl}, used to hold special bindings made by functions
executing in that stack group.
@end defun

@defun sg-special-pdl-pointer sg
Returns the index in @i{sg}'s special pdl of the last word pushed.
@end defun

@noindent
The following functions are used to move from one stack frame to
another.

@defun eh:sg-innermost-active sg
Returns (the regular pdl index of) the innermost frame in @i{sg}, the
one that would be executing if @i{sg} were current.  If @i{sg} is
current, the value is the frame of the caller of this function.
@end defun

@defun eh:sg-next-active sg frame
Returns the next active frame out from
@i{frame} in @i{sg}.  This is the one that called @i{frame}.  If
@i{frame} is the outermost frame, the value is @i{nil}.
@end defun

@defun eh:sg-previous-active sg frame
Returns the previous active frame in from @i{frame} in @i{sg}.
This is the one called by @i{frame}.  If @i{frame} is the currently
executing frame, the value is @code{nil}.  If @i{frame} is @code{nil},
the value is the outermost or initial frame.
@end defun

@defun eh:sg-innermost-open sg
Returns the innermost open frame in @i{sg}, which may be the same as the
innermost active one or it may be within that.  In other respects, this is
like @code{eh:sg-innermost-active}.
@end defun

@defun eh:sg-next-open sg frame
Like @code{eh:sg-next-active} but includes frames which are @i{open}, that is,
still accumulating arguments prior to calling the function.
@end defun

@defun eh:sg-previous-open sg frame
Like @code{eh:sg-previous-active} but includes frames which are @i{open}, that is,
still accumulating arguments prior to calling the function.
@end defun

@defun eh:sg-frame-active-p sg frame
Returns @code{t} if @i{frame} is active; that is, if the function has been
entered.
@end defun

Running interpreted code involves calls to @code{eval}, @code{cond}, etc.
which would not be there in compiled code.  The following three
functions can be used to skip over the stack frames of such functions,
showing only the frames for the functions the user would know about.

@defun eh:sg-next-interesting-active sg frame
Like @code{eh:sg-next-active} but skips over uninteresting frames.
@end defun

@defun eh:sg-previous-interesting-active sg frame
Like @code{eh:sg-previous-active} but skips over uninteresting frames.
@end defun

@defun eh:sg-out-to-interesting-active sg frame
If @i{frame} is interesting, returns @i{frame}.  Otherwise, it returns
the next interesting active frame.
@end defun

@noindent
Functions to analyze the data in a particular stack frame:

@defun sys:rp-function-word regpdl frame
Returns the function executing in @i{frame}.  @i{regpdl} should be
the @code{sg-regular-pdl} of the stack group.
@end defun

@defun eh:sg-frame-number-of-spread-args sg frame
Returns the number of arguments received by @i{frame}, which should be
an active frame.  The rest argument (if any) and arguments
received by it, do not count.
@end defun

@defun eh:sg-frame-arg-value sg frame n
Returns the value of argument number @i{n} of stack frame @i{frame} in
@i{sg}.  An error is signaled if @i{n} is out of range, if the frame is
active.  (For an open frame, the number of arguments is not yet
known, so there is no error check.)

The second value is the location in which the argument is stored when
@i{sg} is running.  The location may not actually be in the stack, if
the argument is special.  The location may then contain other contents
when the stack group is not running.
@end defun

@defun eh:sg-frame-rest-arg-value sg frame
Returns the value of the rest argument in @i{frame}, or @code{nil} if there
is none.

The second value is @code{t} if the function called in @i{frame} expects an
explicitly passed rest argument.

The third value is @code{t} if the rest argument was passed explicitly.
If this is @code{nil}, the rest arg is a stack list that overlaps the
arguments of stack frame @i{frame}.  If it was passed explicitly, it may still
be a stack list, but not in this frame.  See (stack-list) for
more information on stack lists.
@end defun

@defun eh:sg-frame-number-of-locals sg frame
Returns the number of local variables in stack frame @i{frame}.
@end defun

@defun eh:sg-frame-local-value sg frame n
Returns the value of local variable number @i{n} of stack frame @i{frame} in
@i{sg}.  An error is signaled if @i{n} is out of range.

The second value is the location in which the local is stored when
@i{sg} is running.  The location may not actually be in the stack; if
not, it may have other contents when the stack group is not running.
@end defun

@defun eh:sg-frame-value-value sg frame n &optional create-slot
Returns the value and location of the @i{n}'th multiple value @i{frame}
has returned.  If @i{frame} has not begun to return values, the first
value returned is @code{nil} but the location still validly shows where
value number @i{n} will be stored.

If @i{frame} was called with @code{multiple-value-list}, it can return any
number of values, but they do not have cells to receive them until
@i{frame} returns them.  In this case, a non-@code{nil} @i{create-slot}
means that this function should allocate cells as necessary so that a
valid location can be returned.  Otherwise, the location as well as the
value is @code{nil}.
@end defun

@defun eh:sg-frame-value-list sg frame &optional new-number-of-values
Returns three values that describe whether @i{frame}'s caller wants
multiple values, and any values @i{frame} has returned already.

The first value is a list in which live the values being, or to be,
returned by @i{frame}.

The second value is @code{nil} if this frame has not been invoked to return multiple values,
a number which is the number of values it has been asked for,
or a locative, meaning the frame was called with @code{multiple-value-list}.
In the last case, the first value includes only the values @i{frame}
has returned already, and the locative points to a cell that points
to the cons whose cdr should receive the next link of the list.

The third value is how many values @i{frame} has returned so far.

If @i{new-number-of-values} is non-@code{nil}, it is used to alter the
``number of values already returned'' as recorded in the stack group.
This may alter the length of the list that is the first value.
The value you get is the altered one, in that case.
@end defun

@defun eh:sg-frame-special-pdl-range sg frame
Returns two values delimiting the range of @i{sg}'s special pdl that
belongs to the specified stack frame.  The first value is the index of
the first special pdl word that belongs to the frame, and the second
value is the index of the next word that does not belong to it.

If the specified frame has no special bindings, both values are @code{nil}.
Otherwise, the indicated special pdl words describe bindings made on
entry to or during execution in this frame.  The words come in pairs.

The first word of each pair contains the saved value; the second points
to the location that was bound.  When the stack group is not current,
the saved value is the value for the binding made in this frame.  When
the stack group is current, the saved value is the shadowed value, and
the value for this binding is either in the cell that was bound, or is
the saved value of another binding, at a higher index, of the same cell.

The bit @code{sys:%%specpdl-closure-binding} is nonzero in the first word
of the pair if the binding was made before entry to the function itself.
This includes bindings made by closures, and by instances (including
@code{self}).  Otherwise, the binding was made by the function itself.
This includes arguments that are declared special.
@end defun

@noindent
@code{symeval-in-stack-group} can be used to find the value of a special
variable at a certain stack frame ((symeval-in-stack-group-fun)).

@section  Input/Output in Stack Groups

	Because each stack group has its own set of dynamic bindings, a
stack group does not inherit its creator's value of @code{*terminal-io*}
(see (terminal-io-var)), nor its caller's, unless you make special
provision for this.  The @code{*terminal-io*} a stack group gets by default
is a ``background'' stream that does not normally expect to be used.  If
it is used, it turns into a ``background window'' that will request
the user's attention.  Often this happens when an error invokes the
debugger.

	If you write a program that uses multiple stack groups, and you want
them all to do input and output to the terminal, you should pass the
value of @code{*terminal-io*} to the top-level function of each stack group
as part of the @code{stack-group-preset}, and that function should bind
the variable @code{*terminal-io*}.

	Another technique is to use a closure as the top-level function
of a stack group.  This closure can bind @code{*terminal-io*} and any other
variables that should be shared between the stack group and its
creator.


@section  An Example of Stack Groups

The canonical coroutine example is the so-called samefringe problem:
Given two trees, determine whether they contain the same
atoms in the same order, ignoring parenthesis structure.  A better
way of saying this is, given two binary trees built out of conses,
determine whether the sequence of atoms on the fringes of the trees
is the same, ignoring differences in the arrangement of the
internal skeletons of the two trees.  Following the usual rule
for trees, @code{nil} in the cdr of a cons is to be ignored.

One way of solving this problem is to use @i{generator} coroutines.
We make a generator for each tree.  Each time the generator is called
it returns the next element of the fringe of its tree.  After the
generator has examined the entire tree, it returns a special ``exhausted''
flag.  The generator is most naturally written as a recursive function.
The use of coroutines, i.e. stack groups, allows the two generators to
recurse separately on two different control stacks without having to
coordinate with each other.

The program is very simple.  Constructing it in the usual bottom-up style,
we first write a recursive function that takes a tree and @code{stack-group-return}s
each element of its fringe.  The @code{stack-group-return} is how the generator
coroutine delivers its output.  We could easily test this function by changing
@code{stack-group-return} to @code{print} and trying it on some examples.

@lisp
(defun fringe (tree)
  (cond ((atom tree) (stack-group-return tree))
	(t (fringe (car tree))
	   (if (not (null (cdr tree)))
	       (fringe (cdr tree))))))
@end lisp

Now we package this function inside another, which takes care of
returning the special ``exhausted'' flag.

@lisp
(defun fringe1 (tree exhausted)
  (fringe tree)
  exhausted)
@end lisp

The @code{samefringe} function takes the two trees as arguments and returns
@code{t} or @code{nil}.  It creates two stack groups to act as the two
generator coroutines, presets them to run the @code{fringe1} function, then
goes into a loop comparing the two fringes.  The value is @code{nil} if a difference
is discovered, or @code{t} if they are still the same when the end is reached.

@lisp
(defun samefringe (tree1 tree2)
  (let ((sg1 (make-stack-group "samefringe1"))
	(sg2 (make-stack-group "samefringe2"))
	(exhausted (ncons nil)))
    (stack-group-preset sg1 #'fringe1 tree1 exhausted)
    (stack-group-preset sg2 #'fringe1 tree2 exhausted)
    (do ((v1) (v2)) (nil)
      (setq v1 (funcall sg1 nil)
	    v2 (funcall sg2 nil))
      (cond ((neq v1 v2) (return nil))
	    ((eq v1 exhausted) (return t))))))
@end lisp

Now we test it on a couple of examples:

@lisp
(samefringe '(a b c) '(a (b c))) => t
(samefringe '(a b c) '(a b c d)) => nil
@end lisp

As stack groups are large, and slow to create, it is desirable to avoid
the overhead of creating one each time two fringes are compared.  It can
easily be eliminated with a modest amount of explicit storage
allocation, using the resource facility (see (defresource-fun)).  While
we're at it, we can avoid making the exhausted flag fresh each time; its
only important property is that it not be an atom.

@lisp
(defresource samefringe-coroutine ()
   :constructor (make-stack-group "for-samefringe"))

(defvar exhausted-flag (ncons nil))

(defun samefringe (tree1 tree2)
  (using-resource (sg1 samefringe-coroutine)
    (using-resource (sg2 samefringe-coroutine)
      (stack-group-preset sg1 #'fringe1 tree1 exhausted-flag)
      (stack-group-preset sg2 #'fringe1 tree2 exhausted-flag)
      (do ((v1) (v2)) (nil)
	(setq v1 (funcall sg1 nil)
	      v2 (funcall sg2 nil))
	(cond ((neq v1 v2) (return nil))
	      ((eq v1 exhausted-flag) (return t)))))))
@end lisp

Now we can compare the fringes of two trees with no allocation of memory whatsoever.

@chapter Locatives
@cindex locative

	A @i{locative} is a type of Lisp object used as a @i{pointer}
to a @i{cell}.  Locatives are inherently a more low level construct
than most Lisp objects; they require some knowledge of the nature of
the Lisp implementation.

@section  Cells and Locatives
@cindex cell

	A @i{cell} is a machine word that can hold a (pointer to a)
Lisp object.  For example, a symbol has five cells: the print name cell,
the value cell, the function cell, the property list cell, and the
package cell.  The value cell holds (a pointer to) the binding of the
symbol, and so on.  Also, an array leader of length @i{n} has @i{n}
cells, and an @code{art-q} array of @i{n} elements has @i{n} cells.
(Numeric arrays do not have cells in this sense.)  A locative is
an object that points to a cell; it lets you refer to a cell so that
you can examine or alter its contents.

@defun contents locative
Returns the contents of the cell which the locative points to.
This is actually the same as @code{cdr}, for reasons explained below,
but it is clearer to use @code{contents} when the argument is normally
a locative.

To modify the contents of the cell, use @code{setf} on @code{contents}:
@lisp
(setf (contents loc) newvalue)
@end lisp
@end defun

  The macro @code{locf} (see (locf-fun)) can be used to convert a form
that accesses a cell to one that creates a locative pointer to that
cell: for example,
@lisp
(locf (fsymeval x))
@end lisp
evaluates to a locative that points to the function cell of the value of
@code{x}; that is to say, it points to the place where @code{(fsymeval x)} is
stored.

@code{locf} is very convenient because it saves the writer and reader of
a program from having to remember the names of many functions that would
create locatives to cells found in different fashions.

One thing you should know is that it is not possible to make a locative
to an element of a numeric array.  For example,
@lisp
(setq foo (make-array 10 :type art-1b))
(locf (aref foo 0))
@end lisp
signals an error.  Locatives may only point at entire words of memory,
which contain standard Lisp data.

Because of cdr-coding (see (cdr-code)), a cons does not always
contain an explicit cell which points to its cdr.  Therefore, it is
impossible to obtain a locative which points to such a cell.  However,
this is such a useful thing to do that @i{the cons itself} is usually
treated as if it were a locative pointing to a cell which holds the
cons's cdr.  @code{(locf (cdr x))} returns the value of @code{x}, and
@code{(contents x)} returns the cdr when @i{x} is a cons, so
@code{(contents (locf (cdr x)))} is the same as @code{(cdr x)}, as it should
be.  Most functions that are normally given locatives also accept a cons
and treat it as if it were a magic locative to the (nonexistent)
cell containing the cdr of the cons.

A cons always does contain a cell which points to the car, and
@code{(locf (car x))} returns a locative whose pointer field is the
same as that of @code{x}'s value.

@section  Functions That Operate on Locatives

@defun location-boundp locative
Returns @code{t} if the cell to which @i{locative} points contains
anything except a void marker.

The void marker is a special data type, @code{dtp-null}, which is stored
in cells to say that their value is missing.  For example, an unbound
variable actually has a void marker in its value cell, and
@code{(location-boundp (locf x))} is equivalent to @code{(variable-boundp x)}.
@end defun

@defun location-makunbound locative &optional pointer
Stores a void marker into the cell to which @i{locative} points.
This consists of data type field @code{dtp-null} and a pointer copied
from @i{pointer}.

The pointer field of the void marker is
used to tell the error handler what variable was unbound.
In the case of a symbol's value cell or function cell, it should
point to the symbol header.  In the case of a flavor method, it should
point to the beginning of the block of data that holds the definition,
which is a word containing the method's function spec.

If the second arg is not specified, then where the void marker
points is not defined.
@end defun

Other functions with which locatives are expected or useful include
@code{get} (the locative points to the cell in which the plist is stored),
@code{store-conditional} (the locative points to the cell to be tested and
modified), and @code{%bind} (the locative points to the cell to be bound).

@section  Mixing Locatives with Lists

	Either of the functions @code{car} and @code{cdr} (see (car-fun)) may
be given a locative, and will return the contents of the cell at which
the locative points.  They are both equivalent to @code{contents} when the
argument is a locative.

	Similarly, either of the functions @code{rplaca} and @code{rplacd} may
be used to store an object into the cell at which a locative
points.
@lisp
@exdent For example,
(rplaca locative y)
@exdent or
(rplaca locative y)
@exdent is the same as
(setf (contents locative) y)
@end lisp

	If you are just using locatives, you should use @code{contents}
rather than @code{car} or @code{cdr}.  But you can also mix locatives and
conses.  For example, the same variable may usefully sometimes have a
locative as its value and sometimes a cons.  Then it is useful that
@code{car} and @code{cdr} work on locatives, and it also matters which one you
use.  Pick the one that is right for the case of a cons.

  For example, the following function conses up a list in the forward
order by adding onto the end.  It needs to know where to put the pointer
to the next cell.  Usually it goes in the previous cell's cdr, but
the first cell gets put in the cell where the list is supposed to end
up.  A locative is used as the pointer to this cell.  The first time
through the loop, the @code{rplacd} is equivalent to @code{(setq res ...)}; on
later times through the loop the @code{rplacd} tacks an additional cons
onto the end of the list.
@lisp
(defun simplified-version-of-mapcar (fcn lst)
  (do ((lst lst (cdr lst))
       (res nil)
       (loc (locf res)))
      ((null lst) res)
    (setf (cdr loc)
	  (setq loc (ncons (funcall fcn (car lst)))))))
@end lisp

@code{cdr} is used here rather than @code{contents} because the normal
case is that the argument is a list.

@chapter Subprimitives
@cindex subprimitive
	@i{Subprimitives} are functions which are not intended to be used by
the average program, only by system programs.  They allow one to
manipulate the environment at a level lower than normal Lisp.
They are described in this chapter.
Subprimitives usually have names starting with a @code{%} character.
The primitives described in other sections of the manual typically
use subprimitives to accomplish their work.  To some extent the subprimitives take
the place of what in other systems would be individual machine instructions.
Subprimitives are normally hand-coded in microcode.

	There is plenty of stuff in this chapter that is not fully
explained; there are terms that are undefined, there are forward references,
and so on.  Furthermore, most of what is in here is considered subject
to change without notice.  In fact, this chapter does not exactly belong
in this manual, but in some other more low-level manual.  Since the latter
manual does not exist, it is here for the interim.

	Subprimitives by their very nature cannot do full checking.
Improper use of subprimitives can destroy the environment.
Subprimitives come in varying degrees of dangerousness.
Generally, those without
a @code{%} sign in their name are not directly dangerous, whereas those
whose names begin with @code{%} can ruin the Lisp world just as readily
as they can do something useful.  The subprimitives are documented here
since they need to be documented somewhere, but this manual does not
document all the things you need to know in order to use them.  Still other
subprimitives are not documented here because they are very specialized.
Most of these are never used explicitly by a programmer; the compiler
inserts them into the program to perform operations which are expressed
differently in the source code.

	The most common problem you can cause using subprimitives, though
by no means the only one, is to create illegal pointers: pointers
that are, for one reason or another, according to storage conventions,
not allowed to exist.  The storage conventions are not documented;
as we said, you have to be an expert to use a lot of the functions
in this chapter correctly.  If you create such an illegal pointer, it probably will
not be detected immediately, but later on parts of the system may see it,
notice that it is illegal, and (probably) halt the Lisp Machine.

	In a certain sense @code{car}, @code{cdr}, @code{rplaca}, and @code{rplacd} are
subprimitives.  If these are given a locative instead of a list, they
access or modify the cell addressed by the locative without regard to what
object the cell is inside.  Subprimitives can be used to create locatives
to strange places.

@section  Data Types

@defun data-type arg
@code{data-type} returns a symbol that is the name for the internal
data-type of @i{arg}.  The @code{type-of} function ((type-of-fun)) is a
higher-level primitive that is more useful in most cases; normal
programs should always use @code{type-of} (or, when appropriate, @code{typep})
rather than @code{data-type}.

Note that some types as seen by the user are not
distinguished from each other at this level, and some user types may be
represented by more than one internal type.  For example,
@code{dtp-extended-number} is the symbol that @code{data-type} would return
for either a single-float or a bignum, even though those two types are
quite different.

Some of these type codes occur in memory words but cannot be the type of
an actual Lisp object.  These include header types such as
@code{dtp-symbol-header}, which identify the first word of a structure, and
forwarding or ``invisible'' pointer types such as @code{dtp-one-q-forward}.

@table @code
@item dtp-symbol
'vindex dtp-symbol
The object is a symbol.
@item dtp-fix
'vindex dtp-fix
The object is a fixnum; the numeric value is contained in the address
field of the pointer.
@item dtp-small-flonum
'vindex dtp-small-flonum
The object is a short float; the numeric value is contained in the
address field of the pointer.
@item dtp-extended-number
'vindex dtp-extended-number
The object is a single-float, ratio, bignum or complexnum.  This value will also be used for
future numeric types.
@item dtp-character
'vindex dtp-character
The object is a character object; the value is contained in the address
field of the pointer.
@item dtp-list
'vindex dtp-list
The object is a cons.
@item dtp-locative
'vindex dtp-locative
The object is a locative pointer.
@item dtp-array-pointer
'vindex dtp-array-pointer
The object is an array.
@item dtp-fef-pointer
'vindex dtp-fef-pointer
The object is a compiled function.
@item dtp-u-entry
'vindex dtp-u-entry
The object is a microcode entry.
@item dtp-closure
'vindex dtp-closure
The object is a closure; see (closure).
@item dtp-stack-closure
'vindex dtp-stack-closure
The object is a closure which lives inside a stack, and which must be
copied if it is stored anywhere but farther down in the same stack.
Lexical scoping is implemented using these.
@item dtp-instance
'vindex dtp-instance
The object is an instance of a flavor; see (flavor).
@item dtp-entity
'vindex dtp-entity
The object is an entity; see (entity).
@item dtp-select-method
'vindex dtp-select-method
The object is a select-method; see (select-method).
@item dtp-stack-group
'vindex dtp-stack-group
The object is a stack-group; see (stack-group).
@item 1The remaining types are internal only.*
@item dtp-header
'vindex dtp-header
An internal type used to mark the first word of several kinds of multi-word structure,
including single-floats, ratios, bignums and FEFs.
@item dtp-array-header
'vindex dtp-array-header
An internal type used to mark the first word of an array.
@item dtp-symbol-header
'vindex dtp-symbol-header
An internal type used to mark the first word of a symbol.
The pointer field points to the symbol's print-name, which is a string.
@item dtp-instance-header
'vindex dtp-instance-header
An internal type used to mark the first word of an instance.
The pointer field points to the structure that describes the
instance's flavor.
@item dtp-null
'vindex dtp-null
Nothing to do with @code{nil}.  This type code identifies a void marker.
An attempt to refer to the contents of a cell that contains a
@code{dtp-null} signals an error.  This is how ``unbound variable'' and
``undefined function'' errors are detected.
@item dtp-trap
'vindex dtp-trap
The zero data-type, which is not used.  This hopes to detect microcode bugs.
@item dtp-free
'vindex dtp-free
This type is used to fill free storage, to catch wild references.
@item dtp-external-value-cell-pointer
'vindex dtp-external-value-cell-pointer
An ``invisible pointer'' used for external value cells,
which are part of the closure mechanism (see (closure)),
and used by compiled code to address value and function cells.
@item dtp-self-ref-pointer
'vindex dtp-self-ref-pointer
An ``invisible pointer'' used to refer to an instance variable of @code{self}.
This data type appears in FEFs of flavor methods.
@item dtp-header-forward
'vindex dtp-header-forward
An ``invisible pointer'' used to indicate that the structure containing
it has been moved elsewhere.  The ``header word'' of the structure is
replaced by one of these invisible pointers.  See the function @code{structure-forward}
((structure-forward-fun)).
@item dtp-body-forward
'vindex dtp-body-forward
An ``invisible pointer'' used to indicate that the structure containing
it has been moved elsewhere.  This points to the word containing
the header-forward, which points to the new copy of the structure.
@item dtp-one-q-forward
'vindex dtp-one-q-forward
An ``invisible pointer'' used to indicate that the single cell containing
it has been moved elsewhere.
@item dtp-gc-forward
'vindex dtp-gc-forward
This is used by the copying garbage collector to flag the obsolete copy
of an object; it points to the new copy.
@end table
@end defun

.defconst q-data-types
The value of @code{q-data-types} is a list of all of the symbolic
names for data types described above under @code{data-type}.
These are the symbols whose print names begin
with `@code{dtp-}'.  The values of these symbols are the internal numeric data-type codes
for the various types.
.end_defconst

@defun q-data-types type-code
Given the internal numeric data-type code, returns the corresponding symbolic name.
This ``function'' is actually an array.
@end defun

@section  Forwarding
@cindex invisible pointers
@cindex forwarding pointer

An @i{invisible pointer} or @i{forwarding pointer} is a kind of pointer
that does not represent a Lisp object, but just resides in memory.
There are several kinds of invisible pointer, and there are various
rules about where they may or may not appear.  The basic property of an
invisible pointer is that if the Lisp Machine reads a word of memory and
finds an invisible pointer there, instead of seeing the invisible
pointer as the result of the read, it does a second read, at the
location addressed by the invisible pointer, and returns that as the
result instead.  Writing behaves in a similar fashion.  When the Lisp
Machine writes a word of memory it first checks to see if that word
contains an invisible pointer; if so it goes to the location pointed to
by the invisible pointer and tries to write there instead.  Many
subprimitives that read and write memory do not do this checking.

The simplest kind of invisible pointer has the data type code
@code{dtp-one-q-forward}.  It is used to forward a single word of memory to
someplace else.  The invisible pointers with data types
@code{dtp-header-forward} and @code{dtp-body-forward} are used for moving
whole Lisp objects (such as cons cells or arrays) somewhere else.  The
@code{dtp-external-value-cell-pointer} is very similar to the
@code{dtp-one-q-forward}; the difference is that it is not ``invisible'' to
the operation of binding.  If the (internal) value cell of a symbol
contains a @code{dtp-external-value-cell-pointer} that points to some other
word (the external value cell), then @code{symeval} or @code{set} operations on
the symbol consider the pointer to be invisible and use the
external value cell, but binding the symbol saves away the
@code{dtp-external-value-cell-pointer} itself, and stores the new value into
the internal value cell of the symbol.  This is how closures are implemented.

@code{dtp-gc-forward} is not an invisible pointer at all; it only appears in
``old spaced'' and can never be seen by any program other than the garbage
collector.  When an object is found not to be garbage, and the garbage collector 
moves it from ``old space'' to ``new space'', a @code{dtp-gc-forward} is left behind
to point to the new copy of the object.  This ensures that other references
to the same object get the same new copy.

@defun structure-forward old-object new-object
This causes references to @i{old-object} actually to reference
@i{new-object}, by storing invisible pointers in @i{old-object}.
It returns @i{old-object}.

An example of the use of @code{structure-forward} is @code{adjust-array}.
If the array is being made bigger and cannot be expanded in place, a new
array is allocated, the contents are copied, and the old array is
structure-forwarded to the new one.  This forwarding ensures that pointers
to the old array, or to cells within it, continue to work.  When the garbage
collector goes to copy the old array, it notices the forwarding and uses
the new array as the copy; thus the overhead of forwarding disappears
eventually if garbage collection is in use.
@end defun

@defun follow-structure-forwarding object
Normally returns @i{object}, but if @i{object} has been @code{structure-forward}'ed,
returns the object at the end of the chain of forwardings.  If @i{object}
is not exactly an object, but a locative to a cell in the middle of an object,
a locative to the corresponding cell in the latest copy of the object is
returned.
@end defun

@defun forward-value-cell from-symbol to-symbol
This alters @i{from-symbol} so that it always has the same value
as @i{to-symbol}, by sharing its value cell.  A @code{dtp-one-q-forward}
invisible pointer is stored into @i{from-symbol}'s value cell.
Do not do this while @i{from-symbol}'s current dynamic binding
is not global, as
the microcode does not bother to check for that case and something
bad will happen when @i{from-symbol}'s binding is unbound.  The microcode check
is omitted to speed up binding and unbinding.

This is how synonymous variables (such as @code{*terminal-io*} and @code{terminal-io})
are created.

To forward one arbitrary cell to another (rather than specifically
one value cell to another), given two locatives, do
@lisp
(%p-store-tag-and-pointer @i{locative1} dtp-one-q-forward @i{locative2})
@end lisp
@end defun

@defun follow-cell-forwarding loc evcp-p
@i{loc} is a locative to a cell.  Normally @i{loc} is returned, but if the
cell has been forwarded, this follows the chain of forwardings and returns
a locative to the final cell.  If the cell is part of a structure which has
been forwarded, the chain of structure forwardings is followed, too.
If @i{evcp-p} is @code{t}, external value cell pointers are followed; if
it is @code{nil} they are not.
@end defun

@section  Pointer Manipulation

It should again be emphasized that improper use of these functions
can damage or destroy the Lisp environment.  It is possible to create
pointers with illegal data-type, pointers to non-existent objects, and
pointers to untyped storage, which will completely confuse the garbage
collector.

@c Narrative description of Q format, and data types, or pointer thereto.

@defun %data-type x
Returns the data-type field of @i{x}, as a fixnum.
@end defun

@defun %pointer x
Returns the pointer field of @i{x}, as a fixnum.  For most
types, this is dangerous since the garbage collector can copy the object
and change its address.
@end defun

@defun %make-pointer data-type pointer
Makes up a pointer, with @i{data-type} in the data-type
field and @i{pointer} in the pointer field, and returns it.  @i{data-type}
should be an internal numeric data-type code; these are the values of
the symbols that start with @code{dtp-}.  @i{pointer} may be any object;
its pointer field is used.  This is
most commonly used for changing the type of a pointer.  Do not use this
to make pointers which are not allowed to be in the machine, such as
@code{dtp-null}, invisible pointers, etc.
@end defun

@defun %make-pointer-offset data-type pointer offset
Returns a pointer with @i{data-type} in the data-type
field, and @i{pointer} plus @i{offset} in the pointer field.  The
@i{data-type} and @i{pointer} arguments are like those of @code{%make-pointer};
@i{offset} may be any object but is usually a fixnum.  The
types of the arguments are not checked; their pointer fields are simply
added together.  This is useful for constructing locative pointers
into the middle of an object.  However, note that it is illegal to
have a pointer to untyped data, such as the inside of a FEF or
a numeric array.
@end defun

@defun %pointer-difference pointer-1 pointer-2
Returns a fixnum which is @i{pointer-1} minus @i{pointer-2}.
No type checks are made.  For the result to be meaningful, the two pointers
must point into the same object, so that their difference cannot change
as a result of garbage collection.
@end defun

@defun %pointerp object
@code{t} if @i{object} points to storage.  For example,
@code{(%pointerp "foo")} is @code{t}, but @code{(%pointerp 5)} is @code{nil}.
@end defun

@defun %pointer-type-p data-type
@code{t} if the specified data type is one which points to storage.
For example, @code{(%pointer-type-p dtp-fix)} returns @code{nil}.
@end defun

@section  Special Memory Referencing

@defun %p-pointerp location
@code{t} if the contents of the word at @i{location} points to storage.
This is similar to @code{(%pointerp (contects @i{location}))}, but the latter may get
an error if @i{location} contains a forwarding pointer, a header type, or a
void marker.  In such cases, @code{%p-pointerp} correctly tells you whether
the header or forward points to storage.
@end defun

@defun %p-pointerp-offset location offset
Similar to @code{%p-pointerp} but operates on the word @i{offset} words beyond @i{location}.
@end defun

@defun %p-contents-offset base-pointer offset
Returns the contents of the word @i{offset} words beyond @i{base-pointer}.
This first checks the cell pointed to by @i{base-pointer} for
a forwarding pointer.  Having followed forwarding pointers to the
real structure pointed to, it adds @i{offset} to the resulting
forwarded @i{base-pointer} and returns the contents of that location.
@end defun

@noindent
There is no @code{%p-contents}, since @code{car} performs that operation.

@defun %p-contents-safe-p location
@code{t} if the contents of word @i{location} are a valid Lisp object, at least
as far as data type is concerned.  It is @code{nil} if the word contains a header type,
a forwarding pointer, or a void marker.  If the value of this function is
@code{t}, you will not get an error from @code{(contents @i{location})}.
@end defun

@defun %p-contents-safe-p-offset location offset
Similar to @code{%p-contents-safe-p} but operates on the word @i{offset} words beyond @i{location}.
@end defun

@defun %p-contents-as-locative pointer
Given a pointer to a memory location containing a pointer that isn't
allowed to be ``in the machine'' (typically an invisible pointer)
this function returns the contents of the location as a @code{dtp-locative}.
It changes the disallowed data type to @code{dtp-locative} so that you can safely
look at it and see what it points to.
@end defun

@defun %p-contents-as-locative-offset base-pointer offset
Extracts the contents of a word like @code{%p-contents-offset},
but changes it into a locative like @code{%p-contents-as-locative}.
This can be used, for example, to analyze the
@code{dtp-external-value-cell-pointer} pointers in a FEF, which are
used by the compiled code to reference value cells and function cells
of symbols.
@end defun

@defun %p-safe-contents-offset location offset
Returns the contents of the word @i{offset} words beyond @i{location} as accurately as
possible without getting an error.

If the contents are a valid Lisp object, it is returned exactly.

If the contents are not a valid Lisp object but do point to storage,
the value returned is a locative which points to the same place in storage.

If the contents are not a valid Lisp object and do not point to storage,
the value returned is a fixnum with the same pointer field.

Forwarding pointers are checked as in @code{%p-contents-offset}.
@end defun

@defun %p-store-contents pointer value
Stores @i{value} into the data-type and pointer fields of the location
addressed by @i{pointer}, and returns @i{value}.  The cdr-code field of
the location remains unchanged.
@end defun

@defun %p-store-contents-offset value base-pointer offset
Stores @i{value} in the location @i{offset} beyond words beyond
@i{base-pointer}, then returns @i{value}.  The cdr-code field remains
unchanged.  Forwarding pointers in the location at @i{base-pointer} are
handled as they are in @code{%p-contents-offset}.
@end defun

@defun %p-store-tag-and-pointer pointer miscfields pointerfield
Stores @i{miscfields} and @i{pointerfield} into the location addressed
by @i{pointer}.  25 bits are taken from @i{pointerfield} to fill the
pointer field of the location, and the low 7 bits of @i{miscfields} are
used to fill both the data-type and cdr-code fields of the location.
The low 5 bits of @i{miscfields} become the data-type, and the top two
bits become the cdr-code.  This is a good way to store a forwarding
pointer from one structure to another (for example).

@code{%p-store-tag-and-pointer} should be used only for storing into `boxed' words,
for the same reason as @code{%blt-typed}: the microcode could halt if the data stored
is not valid boxed data.  See (%blt-typed-fun).
@end defun

@defun %p-ldb byte-spec pointer
Extracts a byte according to @i{byte-spec} from the contents of the
location addressed by @i{pointer}, in effect regarding the contents as a
32-bit number and using @code{ldb}.  The result is always a fixnum.
For example, @code{(%p-ldb %%q-cdr-code @i{loc})} returns the cdr-code of
the location addressed by @i{loc}.
@end defun

@defun %p-ldb-offset byte-spec base-pointer offset
Extracts a byte according to @i{byte-spec} from the contents of the
location @i{offset} words beyond @i{base-pointer}, after handling
forwarding pointers like @code{%p-contents-offset}.

This is the way to reference byte fields within a structure
without violating system storage conventions.
@end defun

@defun %p-mask-field byte-spec pointer
Like @code{%p-ldb}, except that the selected byte is returned in its
original position within the word instead of right-aligned.
@end defun

@defun %p-mask-field-offset byte-spec base-pointer offset
Like @code{%p-ldb-offset}, except that the selected byte is returned in its
original position within the word instead of right-aligned.
@end defun

Note: @code{%p-dbp}, @code{%p-dpb-offset}, @code{%p-deposit-field} and
@code{%p-deposit-field-offset} should never be used to modify
the pointer field of a boxed word if the data type is one which actually
points to storage, unless you are sure that the new pointer is such as
to cause no trouble (such as, if it points to a static area).  Likewise,
it should never be used to change a data type which does not point to
storage into one which does.  Either action could confuse the garbage
collector.

@defun %p-dpb value byte-spec pointer
Stores @i{value}, a fixnum, into the byte selected
by @i{byte-spec} in the word addressed by @i{pointer}.  @code{nil} is returned.
You can use this to alter data types, cdr-codes, etc.,
but see the note above for restrictions.
@end defun

@defun %p-dpb-offset value byte-spec base-pointer offset
Stores @i{value} into the specified byte of the location @i{offset}
words beyond that addressed by @i{base-pointer}, after first
handling forwarding pointers in the location addressed by @i{base-pointer}
as in @code{%p-contents-offset}.  @code{nil} is returned.

This is the way to alter unboxed data within a structure
without violating system storage conventions.
You can use this to alter boxed words too,
but see the note above for restrictions.
@end defun

@defun %p-deposit-field value byte-spec pointer
Like @code{%p-dpb}, except that the selected
byte is stored from the corresponding bits of @i{value} rather than
the right-aligned bits.  
See the note above @code{%p-dpb} for restrictions.
@end defun

@defun %p-deposit-field-offset value byte-spec base-pointer offset
Like @code{%p-dpb-offset}, except that the selected
byte is stored from the corresponding bits of @i{value} rather than
the right-aligned bits.
See the note above @code{%p-dpb} for restrictions.
@end defun

@defun %p-pointer pointer
Extracts the pointer field of the contents of the
location addressed by @i{pointer} and returns
it as a fixnum.
@end defun

@defun %p-data-type pointer
Extracts the data-type field of the contents of the
location addressed by @i{pointer} and returns
it as a fixnum.
@end defun

@defun %p-cdr-code pointer
Extracts the cdr-code field of the contents of the
location addressed by @i{pointer} and returns
it as a fixnum.
@end defun

@defun %p-store-pointer pointer value
Stores @i{value} in the pointer field of the location
addressed by @i{pointer}, and returns @i{value}.
@end defun

@defun %p-store-data-type pointer value
Stores @i{value} in the data-type field of the location
addressed by @i{pointer}, and returns @i{value}.
@end defun

@defun %p-store-cdr-code pointer value
Stores @i{value} in the cdr-code field of the location
addressed by @i{pointer}, and returns @i{value}.
@end defun

@defun %stack-frame-pointer
Returns a locative pointer to its caller's stack frame.  This
function is not defined in the interpreted Lisp environment; it only works
in compiled code.  Since it turns into a ``misc'' instruction,
the ``caller's stack frame'' really means ``the frame for the FEF
that executed the @code{%stack-frame-pointer} instruction''.
@end defun

@section  Storage Layout Definitions

The following special variables have values which define the most important attributes
of the way Lisp data structures are laid out in storage.  In addition to the variables
documented here, there are many others that are more specialized.  They are not
documented in this manual since they are in the @code{system} package rather than
the @code{global} package.  The variables whose names start with @code{%%} are
byte specifiers, intended to be used with subprimitives such as @code{%p-ldb}.
If you change the value of any of these variables, you will probably bring the
machine to a crashing halt.

.defconst %%q-cdr-code
The field of a memory word that contains the cdr-code.  See (cdr-code).
.end_defconst

.defconst %%q-data-type
The field of a memory word that contains the data-type code.  See (data-type-fun).
.end_defconst

.defconst %%q-pointer
The field of a memory word that contains the pointer address, or immediate data.
.end_defconst

.defconst %%q-pointer-within-page
The field of a memory word that contains the part of the address that lies
within a single page.
.end_defconst

.defconst %%q-typed-pointer
The concatenation of the @code{%%q-data-type} and @code{%%q-pointer} fields.
.end_defconst

.defconst %%q-all-but-typed-pointer
This is now synonymous with @code{%%q-cdr-code}, and therefore obsolete.
.end_defconst

.defconst %%q-all-but-pointer
The concatenation of all fields of a memory word except for @code{%%q-pointer}.
.end_defconst

.defconst %%q-all-but-cdr-code
The concatenation of all fields of a memory word except for @code{%%q-cdr-code}.
.end_defconst

.defconst %%q-high-half
.defconst1 %%q-low-half
The two halves of a memory word.  These fields are only used in storing compiled code.
.end_defconst

.defconst cdr-normal
.defconst1 cdr-next
.defconst1 cdr-nil
.defconst1 cdr-error
The values of these four variables are the numeric values that go in the cdr-code
field of a memory word.  See (cdr-code) for the details of cdr-coding.
.end_defconst

@section  Analyzing Structures

@defun %find-structure-header pointer
This subprimitive finds the structure into which 
@i{pointer} points, by searching backward for a header.
It is a basic low-level function used by such things as the
garbage collector.
@i{pointer} is normally a locative, but its data-type is ignored.
Note that it is illegal to point into an ``unboxed'' portion of
a structure, for instance the middle of a numeric array.

In structure space, the ``containing structure'' of a pointer
is well-defined by system storage conventions.  In list space,
it is considered to be the contiguous, cdr-coded segment of
list surrounding the location pointed to.  If a cons of the list
has been copied out by @code{rplacd}, the contiguous list includes
that pair and ends at that point.
@end defun

@defun %find-structure-leader pointer
This is identical to @code{%find-structure-header}, except that if the
structure is an array with a leader, this returns a locative pointer
to the leader-header, rather than returning the array-pointer itself.
Thus the result of @code{%find-structure-leader} is always the lowest
address in the structure.  This is the one used internally by the garbage collector.
@end defun

@defun %structure-boxed-size object
Returns the number of ``boxed Q's'' in @i{object}.  This is the number
of words at the front of the structure which contain normal Lisp objects.
Some structures, for example FEFs and numeric arrays, contain additional
``unboxed Q's'' following their boxed Q's.
Note that the boxed size of a PDL (either regular or special) does not
include Q's above the current top of the PDL.  Those locations are boxed,
but their contents are considered garbage and are not protected by the
garbage collector.
@end defun

@defun %structure-total-size object
Returns the total number of words occupied by the representation
of @i{object}, including boxed Q's, unboxed Q's, and garbage Q's off
the ends of PDLs.
@end defun

@section  Creating Objects

@defun %allocate-and-initialize data-type header-type header second-word area size
	This is the subprimitive for creating most structured-type objects.
@i{area} is the area in which it is to be created, as a fixnum or a symbol.
@i{size} is the number of words to be allocated.  The value returned
points to the first word allocated and has data-type @i{data-type}.
Uninterruptibly, the words allocated are initialized so that storage
conventions are preserved at all times.  The first word, the header,
is initialized to have @i{header-type} in its data-type field 
and @i{header} in its pointer field.  The second word is initialized
to @i{second-word}.  The remaining words are initialized to @code{nil}.
The cdr-codes of all words
except the last are set to @code{cdr-next}; the cdr-code of the last word
is set to @code{cdr-nil}.  It is probably a bad idea to rely on this.
@end defun

@defun %allocate-and-initialize-array header data-length leader-length area size
	This is the subprimitive for creating arrays, called only by @code{make-array}.
It is different from @code{%allocate-and-initialize} because arrays have
a more complicated header structure.
@end defun

The basic functions for creating list-type objects are @code{cons} and
@code{make-list}; no special subprimitive is needed.  Closures, entities,
and select-methods are based on lists, but there is no primitive
for creating them.  To create one, create a list and then use @code{%make-pointer}
to change the data type from @code{dtp-list} to the desired type.

@section  Copying Data

@code{%blt} and @code{%blt-typed} are subprimitives for copying blocks of
data, word aligned, from one place in memory to another with little
or no type checking.

@defun %blt from to count increment
@defunx %blt-typed from to count increment
Copies @i{count} words, separated by @i{increment}.  The word at
address @i{from} is moved to address @i{to}, the word at address
@i{from}@code{+}@i{increment} is moved to address @i{to}@code{+}@i{increment},
and so on until @i{count} words have been moved.

Only the pointer fields of @i{from} and @i{to} are significant;
they may be locatives or even fixnums.  If one of them must point
to the unboxed data in the middle of a structure, you must make it a fixnum,
and you must do so with interrupts disabled, or else garbage collection
could move the structure after you have already created the fixnum.

@code{%blt-typed} assumes that each copied word contains a data type field
and checks that field, interfacing suitably with the garbage collector
if necessary.  @code{%blt} does not check the data type fields of the copied words.
@end defun

@code{%blt} may be used on any data except boxed data containing pointers
to storage, while @code{%blt-typed} may be used on any boxed data.
Both @code{%blt} and @code{%blt-typed} can be used validly on data which is formatted with
data types (boxed) but whose contents never point to storage.  This includes
words whose contents are always fixnums or short floats, and also words which
contain array headers, array leader headers, or FEF headers.  Whether or not the
machine is told to examine the data types of such data makes no difference
since, on examining them, it would decide that nothing needed to be done.

For unboxed data (data which is formatted not containing valid data type fields),
such as the inside of a numeric array or the instruction words of a FEF, only
@code{%blt} may be used.  If @code{%blt-typed} were used, it would examine the data type
fields of the data words, and probably halt due to an invalid data type code.

For boxed data which may contain pointers, only @code{%blt-typed} may be used.  If
@code{%blt} were used, it would appear to work, but problems could appear mysteriously
later because nothing would notice the presence of the pointer there.  For
example, the pointer might point to a bignum in the number consing area, and
moving it in this way would fail to copy it into a nontemporary area.  Then the
pointer would become invalidated the next time the number consing area was
emptied out.  There could also be problems with lexical closures and with
garbage collection.

@section  Returning Storage

@defun return-storage object
This peculiar function attempts to return @i{object} to free storage.
If it is a displaced array, this returns the displaced array itself,
not the data that the array points to.  Currently @code{return-storage}
does nothing if the object is not at the end of its region, i.e. if
it was not either the most recently allocated non-list object in its
area, or the most recently allocated list in its area.

If you still have any references to @i{object} anywhere in the Lisp world
after this function returns, the garbage collector can get a fatal error
if it sees them.  Since the form that calls this function must get the
object from somewhere, it may not be clear how to legally call @code{return-storage}.
One of the only ways to do it is as follows:
@lisp
(defun func ()
   (let ((object (make-array 100)))
      ...
      (return-storage (prog1 object (setq object nil)))))
@end lisp
so that the variable @code{object} does not refer to the object when
@code{return-storage} is called.  Alternatively, you can free the
object and get rid of all pointers to it while interrupts are turned
off with @code{without-interrupts}.

You should only call this function if you know what you are doing;
otherwise the garbage collector can get fatal errors.  Be careful.
@end defun

@section  Locking Subprimitive

@defun %store-conditional pointer old new
This is the basic locking primitive.  @i{pointer} is a locative to
a cell which is uninterruptibly read and written.  If the contents of
the cell is @code{eq} to @i{old}, then it is replaced by @i{new} and
@code{t} is returned.  Otherwise, @code{nil} is returned and the contents
of the cell are not changed.

See also @code{store-conditional}, a higher-level function which provides
type checking ((store-conditional-fun)).
@end defun

@section  CADR I/O Device Subprimitives

The CADR processor has a 32-bit memory bus called the Xbus.
In addition to main memory and TV screen memory,
most I/O device registers are on this bus.  There is also
a Unibus compatible with the PDP-11.  A map of Xbus and Unibus
addresses can be found in @code{SYS: DOC; UNADDR TEXT}.

@defun %unibus-read address
Returns as a fixnum the contents of the register at the specified Unibus
address.  You must specify a full 18-bit address.  This
is guaranteed to read the location only once.  Since the Lisp
Machine Unibus does not support byte operations, this always references
a 16-bit word, and so @i{address} should normally be an even number.
@end defun

@defun %unibus-write address data
Writes the 16-bit number @i{data} at the specified Unibus
address, exactly once.
@end defun

@defun %xbus-read io-offset
Returns the contents
of the register at the specified Xbus address.  @i{io-offset} is
an offset into the I/O portion of Xbus physical address space.
This is guaranteed to read the location exactly once.
The returned value can be either a fixnum or a bignum.
@end defun

@defun %xbus-write io-offset data
Writes @i{data}, which can be a fixnum or a bignum, into the register at
the specified Xbus address.  @i{io-offset} is an offset into the I/O
portion of Xbus physical address space.  This is guaranteed to write the
location exactly once.
@end defun

@defun sys:%xbus-write-sync w-loc w-data delay sync-loc sync-mask sync-value
Does @code{(%xbus-write @i{w-loc} @i{w-data})}, but first synchronizes to
within about one microsecond of a certain condition.  The synchronization
is achieved by looping until
@lisp
(= (logand (%xbus-read @i{sync-loc}) @i{sync-mask}) @i{sync-value})
@end lisp
is false, then looping until it is true, then looping @i{delay} times.
Thus the write happens a specified delay after the leading edge of the
synchronization condition.
The number of microseconds of delay is roughly one third of @i{delay}.

This primitive is used to alter the color TV screen's color map
during vertical retrace.
@end defun

@section  Lambda I/O-Device Subprimitives

@defun sys:%nubus-read slot byte-address
Returns the contents of a word read from the Nu bus.
Addresses on the Nu bus are divided into an 8-bit slot number
which identifies which physical board is being referenced
and a 24-bit address within slot.  The address is measured in
bytes and therefore should be a multiple of 4.  Which addresses are valid
depends on the type of board plugged into the specified slot.
If, for example, the board is a 512k main memory board,
then the valid address range from 0 to 4 * (512k - 1).
(Of course, main memory boards are normally accessed through
the virtual memory mechanism.)
@end defun

@defun sys:%nubus-write slot byte-address word
Writes @i{word} into a word of the Nu bus, whose address is specified
by @i{slot} and @i{byte-address} as described above.
@end defun

@defun sys:%nubus-physical-address apparent-physical-page
The valid portions of the Nu bus address space are not contiguous.
Each board is allocated 16m bytes of address space, but no memory
board actually provides 16m bytes of memory.  

The Lisp Machine virtual memory system maps virtual addresses into a
contiguous physical address space.  On the Lambda, this contiguous
address space is mapped a second time into the discontiguous Nu bus
address space.  Unlike the mapping of virtual addresses to physical
ones, the second mapping is determined from the hardware configuration
when the machine is booted and does not change during operation.

This function performs exactly that mapping.  The argument is
a physical page number (a physical address divided by @code{sys:page-size}).
The argument is a "Nu bus page number"; multiplied by @code{sys:page-size}
and then by four, it yields the Nu bus byte address of the beginning
of that physical page.

See also @code{sys:%physical-address}, (sys:%physical-address-fun).
@end defun

@section  Function-Calling Subprimitives

These subprimitives can be used (carefully!) to call a function with the
number of arguments variable at run time.  They only work in compiled code
and are not defined in the interpreted Lisp environment.
The preferred higher-level primitive is @code{apply} ((apply-fun)).  

@defun %open-call-block function n-adi-pairs destination
Starts a call to @i{function}.  @i{n-adi-pairs} is the number of
pairs of additional information words already @code{%push}'ed; normally
this should be @code{0}.  @i{destination} is where to put the result;
the useful values are 0 for the value to be ignored, 1
for the value to go onto the stack, 3 for the value to be
the last argument to the previous open call block, and 2
for the value to be returned from this frame.
@end defun

@defun %push value
Pushes @i{value} onto the stack.  Use this to push the arguments.
@end defun

@defun %activate-open-call-block
Causes the call to happen.
@end defun

@defun %pop
Pops the top value off of the stack and returns it as its value.
Use this to recover the result from a call made by @code{%open-call-block}
with a destination of 1.
@end defun

@defun %assure-pdl-room n-words
Call this before doing a sequence of @code{%push}'s or @code{%open-call-block}'s
that will add @i{n-words} to the current frame.  This subprimitive checks
that the frame will not exceed the maximum legal frame size, which is 255 words
including all overhead.  This limit is dictated by the way stack frames are linked together.
If the frame is going to exceed the legal limit, @code{%assure-pdl-room} signals
an error.
@end defun

@c sys:%make-stack-list could be documented here I suppose

@section  Special-Binding Subprimitive

@defun %bind locative value
@defunx bind locative value
Binds the cell pointed to by @i{locative} to @i{x}, in the caller's
environment. This function is not defined in the interpreted Lisp
environment; it only works from compiled code.  Since it turns into an
instruction, the ``caller's environment'' really means ``the binding block
for the compiled function that executed the @code{%bind} instruction''.  The preferred
higher-level primitives that turn into this are @code{let} ((let-fun)),
@code{let-if} ((let-if-fun)), and @code{progv} ((progv-fun)).

The binding is in effect for the scope of the innermost binding
construct, such as @code{prog} or @code{let}--even one that binds no
variables itself.

@code{%bind} is the preferred name; @code{bind} is an older name which will
eventually be eliminated.
@end defun

@section  The Paging System

@c Insert narrative description of the page hash table, etc.

[Someday this may discuss how it works.]

@defvar sys:%disk-switches
This variable contains bits that control various disk usage features.

Bit 0 (the least significant bit) enables read-compares after disk read
operations.  This causes a considerable slowdown, so it is rarely used.

Bit 1 enables read-compares after disk write operations.

Bit 2 enables the
multiple page swap-out feature.  When this is enabled, as it is by
default, each time a page is swapped out, up to 16. contiguous pages
are also written out to the disk if they have been modified.  This
greatly improves swapping performance.

Bit 3 controls the multiple page swap-in feature, which is also on by
default.  This feature causes pages to be swapped in in groups; each
time a page is needed, several contiguous pages are swapped in in the
same disk operation.  The number of pages swapped in can be specified
for each area using @code{si:set-swap-recommendations-of-area}.
@end defvar

@defun si:set-swap-recommendations-of-area area-number recommendation
Specifies that pages of area @i{area-number} should be swapped in in
groups of @i{recommendation} at a time.  This recommendation is used
only if the multiple page swap-in feature is enabled.

Generally, the more memory a machine has, the higher the swap
recommendations should be to get optimum performance.  The
recommendations are set automatically according to the memory size when
the machine is booted.
@end defun

@defun si:set-all-swap-recommendations recommendation
Specifies the swap-in recommendation of all areas at once.
@end defun


@defun si:wire-page address &optional (wire-p @code{t})
If @i{wire-p} is @code{t}, the page containing @i{address} is @i{wired-down}; that is,
it cannot be paged-out.  If @i{wire-p} is @code{nil}, the page ceases to be wired-down.
@end defun

@defun si:unwire-page address
@code{(si:unwire-page @i{address})} is the same as
@code{(si:wire-page @i{address} @code{nil})}.
@end defun

@defun sys:page-in-structure object
Makes sure that the storage that represents @i{object} is in main
memory.  Any pages that have been swapped out to disk are read in,
using as few disk operations as possible.  Consecutive disk pages are
transferred together, taking advantage of the full speed of the disk.
If @i{object} is large, this is much faster than bringing the pages
in one at a time on demand.  The storage occupied by @i{object} is defined
by the @code{%find-structure-leader} and @code{%structure-total-size} subprimitives.
@end defun

@defun sys:page-in-array array &optional from to
This is a version of @code{sys:page-in-structure} that can bring in a portion
of an array.  @i{from} and @i{to} are lists of subscripts; if they are shorter
than the dimensionality of @i{array}, the remaining subscripts are assumed to
be zero.
@end defun

@defun sys:page-in-pixel-array array &optional from to
Like @code{sys:page-in-array} except that the lists @i{from} and @i{to}, if
present, are assumed to have their subscripts in the order horizontal,
vertical, regardless of which of those two is actually the first axis of
the array.  See @code{make-pixel-array}, (make-pixel-array-fun).
@end defun

@defun sys:page-in-words address n-words
Any pages that have been swapped out to disk in the range of address
space starting at @i{address} and continuing for @i{n-words} are read in
with as few disk operations as possible.
@end defun

@defun sys:page-in-area area-number
@defunx sys:page-in-region region-number
All swapped-out pages of the specified region or area are brought into main memory.
@end defun

@defun sys:page-out-structure object
@defunx sys:page-out-array array &optional from to
@defunx sys:page-out-pixel-array array &optional from to
@defunx sys:page-out-words address n-words
@defunx sys:page-out-area area-number
@defunx sys:page-out-region region-number
These are similar to the above, except that they take pages out of main
memory rather than bringing them in.  Actually, they only mark the pages
as having priority for replacement by others.  Use these operations when
you are done with a large object, to make the virtual memory system
prefer reclaiming that object's memory over swapping something else out.
@end defun

@defun sys:%page-status virtual-address
If the page containing @i{virtual-address} is swapped out, or if it is
part of one of the low-numbered fixed areas, this returns @code{nil}.
Otherwise it
returns the entire first word
of the page hash table entry for the page.

The @code{%%pht1-} symbols in @code{SYS: SYS; QCOM LISP} are byte specifiers you
can use with @code{%logldb} for decoding the value.
@end defun

@defun sys:%change-page-status virtual-address swap-status access-status-and-meta-bits
The page hash table entry for the page containing @i{virtual-address}
is found and altered as specified.  @code{t} is returned if it was found,
@code{nil} if it was not (presumably the page is swapped out).  @i{swap-status}
and @i{access-status-and-meta-bits} can be @code{nil} if those fields are not
to be changed.  This doesn't make any error checks; you can really
screw things up if you call it with the wrong arguments.
@end defun

@defun sys:%compute-page-hash virtual-address
Makes the hashing function for the page hash table
available to the user.
@end defun

@defun sys:%physical-address virtual-address
Returns the physical address which @i{virtual-address}
currently maps into.  The value is unpredictable if the
virtual page is not swapped in; therefore, this function should
be used on wired pages, or you should do
@lisp
(without-interrupts
  (%p-pointer virtual-address)     ;1swap it in*
  (sys:%physical-address virtual-address))
@end lisp
@end defun

@defun sys:%create-physical-page physical-address
This is used when adjusting the size of real memory available
to the machine.  It adds an entry for the page frame at @i{physical-address}
to the page hash table, with virtual address -1, swap status flushable,
and map status 120 (read only).  This doesn't make error checks; you
can really screw things up if you call it with the wrong arguments.
@end defun

@defun sys:%delete-physical-page physical-address
If there is a page in the page frame at @i{physical-address},
it is swapped out and its entry is deleted from the page hash table,
making that page frame unavailable for swapping in of pages in the
future.  This doesn't make error checks; you
can really screw things up if you call it with the wrong arguments.
@end defun

@defun sys:%disk-restore high-16-bits low-16-bits
Loads virtual memory from the partition named by the concatenation of
the two 16-bit arguments, and starts executing it.  The name @code{0}
refers to the default load (the one the machine loads when it is
started up).  This is the primitive used by @code{disk-restore} (see (disk-restore-fun)).
@end defun

@defun sys:%disk-save physical-mem-size high-16-bits low-16-bits
Copies virtual memory into the partition named by the concatenation
of the two 16-bit arguments (@code{0} means the default), then restarts
the world, as if it had just been restored.  The @i{physical-mem-size}
argument should come from @code{%sys-com-memory-size} in @code{system-communication-area}.
If @i{physical-mem-size} is negative, it is minus the memory size,
and an incremental save is done.
This is the primitive used by @code{disk-save} (see (disk-save-fun)).
@end defun

@defun si:set-memory-size nwords
Specifies the size of physical memory in words.  The Lisp machine
determines the actual amount of physical memory when it is booted, but with
this function you can tell it to use less memory than is actually present.
This may be useful for comparing performance based on the amount of memory.
@end defun

@section  Closure Subprimitives

These functions deal with things like what closures deal with: the distinction
between internal and external value cells and control over how they work.

@defun sys:%binding-instances list-of-symbols
This is the primitive that could be used by @code{closure}.
First, if any of the symbols in @i{list-of-symbols} has no external
value cell, a new external value cell is created for it, with
the contents of the internal value cell.  Then a list of locatives,
twice as long as @i{list-of-symbols}, is created and returned.
The elements are grouped in pairs: pointers to the internal
and external value cells, respectively, of each of the symbols.
@code{closure} could have been defined by:
@lisp
(defun closure (variables function)
  (%make-pointer dtp-closure
     (cons function (sys:%binding-instances variables))))
@end lisp
@end defun

@defun sys:%using-binding-instances instance-list
This function is the primitive operation that invocation of closures
could use.  It takes a list such as @code{sys:%binding-instances} returns,
and for each pair of elements in the list, it ``adds'' a binding to the
current stack frame, in the same manner that the @code{%bind} function
does.  These bindings remain in effect until the frame returns or is
unwound.

@code{sys:%using-binding-instances} checks for redundant bindings and ignores them.
(A binding is redundant if the symbol is already bound to the desired external
value cell.)  This check avoids excessive growth of the special pdl in some cases
and is also made by the microcode which invokes closures, entities, and instances.

Given a closure, @code{closure-bindings} extracts its list of binding instances,
which you can then pass to @code{sys:%using-binding-instances}.
@end defun

@defun sys:%internal-value-cell symbol
Returns the contents of the internal value cell of @i{symbol}.
@code{dtp-one-q-forward} pointers are considered invisible, as usual, but
@code{dtp-external-value-cell-pointer}s are @i{not}; this function can
return a @code{dtp-external-value-cell-pointer}.  Such pointers will be
considered invisible as soon as they leave the ``inside of the machine'',
meaning internal registers and the stack.
@end defun

@section  Distiguishing Processor Types

The MIT Lisp Machine system runs on two types of processors: the CADR
and the Lambda.  These are similar enough that there is no difference in
compiled code for them, and no provision for compile-time
conditionalization.  However, obscure or internal I/O code sometimes
needs to behave differently at run-time depending on the type of
processor.  This is possible through the use of these macros.

@defvar sys:processor-type-code
This variable is 1 on a CADR processor or equivalent, 2 on a Lambda.
@end defvar

@defmac if-in-cadr body...
Executes @i{body} only when executing on a CADR.
@end defmac

@defmac if-in-lambda body
Executes @i{body} only when executing on a Lambda.
@end defmac

@defmac if-in-cadr-else-lambda if-cadr-form else-body...
Executes @i{if-cadr-form} when executing on a CADR,
executes @i{else-body} when executing on a Lambda.
@lisp
(format t "~&Processor is a ~A.~%"
        (if-in-cadr-else-lambda "CADR" "Lambda"))
@end lisp
@end defmac

@defmac if-in-lambda-else-cadr if-lambda-form else-body...
Executes @i{if-cadr-form} when executing on a Lambda
executes @i{else-body} when executing on a CADR.
@end defmac

@defmac select-processor clauses
Each clause consists of @code{:cadr} or @code{:lambda} followed by forms
to execute when running on that kind of processor.  Example:
@lisp
(format t "~&Processor is a ~A.~%"
        (select-processor
          (:cadr "CADR")
	  (:lambda "Lambda")))
@end lisp
@end defmac

@section  Microcode Variables

The following variables' values actually reside in the scratchpad memory
of the processor.  They are put there by @code{dtp-one-q-forward} invisible
pointers.  The values of these variables are used by the microcode.
Many of these variables are highly internal and you shouldn't expect to
understand them.

@defvar %microcode-version-number
This is the version number of the currently-loaded microcode, obtained
from the version number of the microcode source file.
@end defvar

@defvar sys:%number-of-micro-entries
Size of @code{micro-code-entry-area} and related areas.
@end defvar

@noindent
@code{default-cons-area} is documented on (default-cons-area-var).

@defvar sys:number-cons-area
The area number of the area where bignums, ratios, full-size floats and
complexnums are consed.  Normally this variable contains the value of
@code{sys:extra-pdl-area}, which enables the ``temporary storage'' feature
for numbers, saving garbage collection overhead.
@end defvar

@noindent
@code{current-stack-group} and @code{current-stack-group-resumer}
are documented on (current-stack-group-var).

@defvar sys:%current-stack-group-state
The @code{sg-state} of the currently-running stack group.
@end defvar

@defvar sys:%current-stack-group-calling-args-pointer
The argument list of the currently-running stack group.
@end defvar

@defvar sys:%current-stack-group-calling-args-number
The number of arguments to the currently-running stack group.
@end defvar

@defvar sys:%trap-micro-pc
The microcode address of the most recent error trap.
@end defvar

@defvar sys:%initial-fef
The function that is called when the machine starts up.
Normally this is the definition of @code{si:lisp-top-level}.
@end defvar

@defvar sys:%initial-stack-group
The stack group in which the machine starts up.
Normally this is the initial Lisp Listener window's process's stack group.
@end defvar

.defconst sys:%error-handler-stack-group
The stack group that receives control when a microcode-detected error
occurs.  This stack group cleans up, signals the appropriate condition,
or assigns a stack group to run the debugger on the erring stack group.
.end_defconst

.defconst sys:%scheduler-stack-group
The stack group that receives control when a sequence break occurs.
.end_defconst

.defconst sys:%chaos-csr-address
A fixnum, the virtual address that maps to the Unibus location of the
Chaosnet interface.
.end_defconst

@defvar %mar-low
A fixnum, the inclusive lower bound of the region of virtual
memory subject to the MAR feature (see (mar)).
@end defvar

@defvar %mar-high
A fixnum, the inclusive upper bound of the region of virtual
memory subject to the MAR feature (see (mar)).
@end defvar

@defvar sys:%inhibit-read-only
If non-@code{nil}, you can write into read-only areas.  This is used by @code{fasload}.
@end defvar

@noindent
@code{self} is documented on (self-var).

@noindent
@code{inhibit-scheduling-flag} is documented on (inhibit-scheduling-flag-var).

@defvar inhibit-scavenging-flag
If non-@code{nil}, the scavenger is turned off.  The scavenger is
the quasi-asynchronous portion of the garbage collector,
which normally runs during consing operations.
@end defvar

@defvar sys:scavenger-ws-enable
If this is @code{nil}, scavenging can compete for all of the physical
memory of the machine.  Otherwise, it should be a fixnum, which
specifies how much physical memory the scavenger can use: page numbers
as high as this number or higher are not available to it.
@end defvar

@defvar sys:%region-cons-alarm
Increments whenever a new region is allocated.
@end defvar

@defvar sys:%page-cons-alarm
Increments whenever a new page is allocated.
@end defvar

@defvar sys:%gc-flip-ready
@code{t} while the scavenger is running, @code{nil} when there are no pointers
to oldspace.
@end defvar

@defvar sys:%gc-generation-number
A fixnum which is incremented whenever the garbage collector flips, converting
one or more regions from newspace to oldspace.
If this number has changed, the @code{%pointer} of an object may have changed.
@end defvar

.defconst sys:%disk-run-light
A fixnum, the virtual address of the TV buffer location of the run-light
which lights up when the disk is active.  This plus 2 is the address of the run-light
for the processor.  This minus 2 is the address of the run-light for the garbage collector.
.end_defconst

@defvar sys:%loaded-band
A fixnum, the high 24 bits of the name of the disk partition
from which virtual memory was booted.  Used to create the greeting message.
@end defvar

@defvar sys:%disk-blocks-per-track
@defvarx sys:%disk-blocks-per-cylinder
Configuration of the disk being used for paging.  Don't change these!
@end defvar

@noindent
@code{sys:%disk-switches} is documented on (sys:%disk-switches-var).

@defvar sys:%qlaryh
This is the last array to be called as a function, remembered for the
sake of the function @code{store}.
@end defvar

@defvar sys:%qlaryl
This is the index used the last time an array was called as a
function, remembered for the sake of the function @code{store}.
@end defvar

@defvar sys:%mc-code-exit-vector
This is a vector of pointers that microcompiled code uses to refer to
quoted constants.
@end defvar

@defvar sys:currently-prepared-sheet
Used for communication between the window system and the microcoded graphics primitives.
@end defvar

@noindent
@code{alphabetic-case-affects-string-comparison} is documented on
(alphabetic-case-affects-string-comparison-var).

@noindent
@code{sys:tail-recursion-flag} is documented on
(tail-recursion-flag-var).

@noindent
@code{zunderflow} is documented on (zunderflow-var).

@noindent
The next four have to do with implementing the metering system described
in (meter-section).

@defvar sys:%meter-global-enable
@code{t} if the metering system is turned on for all stack-groups.
@end defvar

@defvar sys:%meter-buffer-pointer
A temporary buffer used by the metering system.
@end defvar

@defvar sys:%meter-disk-address
Where the metering system writes its next block of results on the disk.
@end defvar

@defvar sys:%meter-disk-count
The number of disk blocks remaining for recording of metering information.
@end defvar

@defvar sys:lexical-environment
This is the static chain used in the implementation of lexical
scoping of variable bindings in compiled code.
@end defvar

@defvar sys:amem-evcp-vector
No longer used.
@end defvar

@noindent
@code{background-cons-area} is documented on
(background-cons-area-var).

@noindent
@code{sys:self-mapping-table} is documented on
(sys:self-mapping-table-var).

@noindent
@code{sys:processor-type-code} is documented on
(sys:processor-type-code-var).

.defconst sys:a-memory-location-names
A list of all of the above symbols (and any others added after this documentation
was written).
.end_defconst

@section  Microcode Meters

Microcode meters are locations in the scratchpad memory which contain
numbers.  Most of them are used to count events of various sorts.  They
are accessible only through the functions @code{read-meter} and
@code{write-meter}.  They have nothing to do with the Lisp metering tools.

@defun read-meter name
Returns the contents of the microcode meter named @i{name}, which can be a fixnum
or a bignum.  @i{name} must be one of the symbols listed below.
@end defun

@defun write-meter name value
Writes @i{value}, a fixnum or a bignum, into the microcode meter named @i{name}.
@i{name} must be one of the symbols listed below.
@end defun

@noindent
The microcode meters are as follows:

.defmeter sys:%count-chaos-transmit-aborts
The number of times transmission on the Chaosnet was aborted, either by a collision
or because the receiver was busy.
.end_defmeter

.defmeter sys:%count-cons-work
.defmeter1 sys:%count-scavenger-work
Internal state of the garbage collection algorithm.
.end_defmeter

.defmeter sys:%tv-clock-rate
The number of TV frames per clock sequence break.
The default value is 67., which causes clock sequence breaks to happen
about once per second.
.end_defmeter

.defmeter sys:%count-first-level-map-reloads
The number of times the first-level virtual-memory map was invalid
and had to be reloaded from the page hash table.
.end_defmeter

.defmeter sys:%count-second-level-map-reloads
The number of times the second-level virtual-memory map was invalid
and had to be reloaded from the page hash table.
.end_defmeter

.defmeter sys:%count-meta-bits-map-reloads
The number of times the virtual address map was reloaded to contain only
``meta bits'', not an actual physical address.
.end_defmeter

.defmeter sys:%count-pdl-buffer-read-faults
The number of read references to the pdl buffer that were
virtual memory references that trapped.
.end_defmeter

.defmeter sys:%count-pdl-buffer-write-faults
The number of write references to the pdl buffer that were
virtual memory references that trapped.
.end_defmeter

.defmeter sys:%count-pdl-buffer-memory-faults
The number of virtual memory references that trapped in case
they should have gone to the pdl buffer, but turned out to be
real memory references after all (and therefore were needlessly
slowed down).
.end_defmeter

.defmeter sys:%count-disk-page-reads
The number of pages read from the disk.
.end_defmeter

.defmeter sys:%count-disk-page-writes
The number of pages written to the disk.
.end_defmeter

.defmeter sys:%count-fresh-pages
The number of fresh (newly-consed) pages created in core,
which would have otherwise been read from the disk.
.end_defmeter

.defmeter sys:%count-disk-page-read-operations
The number of paging read operations; this can be smaller than the number of
disk pages read when more than one page at a time is read.
.end_defmeter

.defmeter sys:%count-disk-page-write-operations
The number of paging write operations; this can be smaller than the number of
disk pages written when more than one page at a time is written.
.end_defmeter

.defmeter sys:%count-disk-prepages-used
The number of times a page was used after being read in before it was needed.
.end_defmeter

.defmeter sys:%count-disk-prepages-not-used
The number of times a page was read in before it was needed, but got evicted
before it was ever used.
.end_defmeter

.defmeter sys:%count-disk-page-write-waits
The number of times the machine waited for a page to finish being written out
in order to evict the page.
.end_defmeter

.defmeter sys:%count-disk-page-write-busys
The number of times the machine waited for a page to finish being written out
in order to do something else with the disk.
.end_defmeter

.defmeter sys:%disk-wait-time
The time spent waiting for the disk, in microseconds.  This can be used to
distinguish paging time from running time when measuring and optimizing the`
performance of programs.
.end_defmeter

.defmeter sys:%count-disk-errors
The number of recoverable disk errors.
.end_defmeter

.defmeter sys:%count-disk-recalibrates
The number of times the disk seek mechanism was recalibrated,
usually as part of error recovery.
.end_defmeter

.defmeter sys:%count-disk-ecc-corrected-errors
The number of disk errors that were corrected through the error correcting code.
.end_defmeter

.defmeter sys:%count-disk-read-compare-differences
The number of times a read compare was done, no disk error occurred, but the
data on disk did not match the data in memory.
.end_defmeter

.defmeter sys:%count-disk-read-compare-rereads
The number of times a disk read was done over because after the read a read
compare was done and did not succeed (either it got an error or the data on disk
did not match the data in memory).
.end_defmeter

.defmeter sys:%count-disk-read-compare-rewrites
The number of times a disk write was done over because after the write a read
compare was done and did not succeed (either it got an error or the data on disk
did not match the data in memory).
.end_defmeter

.defmeter sys:%disk-error-log-pointer
Address of the next entry to be written in the disk error log.  The function
@code{si:print-disk-error-log} (see (si:print-disk-error-log-fun)) prints this log.
.end_defmeter

.defmeter sys:%count-aged-pages
The number of times the page ager set an age trap on a page, to determine
whether it was being referenced.
.end_defmeter

.defmeter sys:%count-age-flushed-pages
The number of times the page ager saw that a page still had an age trap
and hence made it ``flushable'', a candidate for eviction from main memory.
.end_defmeter

.defmeter sys:%aging-depth
A number from 0 to 3 that controls how long a page must remain unreferenced
before it becomes a candidate for eviction from main memory.
.end_defmeter

.defmeter sys:%count-findcore-steps
The number of pages inspected by the page replacement algorithm.
.end_defmeter

.defmeter sys:%count-findcore-emergencies
The number of times no evictable page was found and extra aging had to be done.
.end_defmeter

.defconst sys:a-memory-counter-block-names
A list of all of the above symbols (and any others added after this documentation
was written).
.end_defconst

@section  Miscellaneous Subprimitives

@defun sys:%halt
Stops the machine.
@end defun

@chapter "Areas"
@cindex area

Storage in the Lisp Machine is divided into @i{areas}.  Each area
contains related objects, of any type.  Areas are intended to give the
user control over the paging behavior of the program, among other
things.  Putting frequently used data and rarely used data in different
areas can cause the frequently used data to occupy fewer pages.  For
example, the system puts the debugging info alists of compiled functions
in a special area so that the other list structure the functions point
to will be more compact.

Whenever a new object is created the area to be used can
optionally be specified.  For example, instead of using @code{cons} you can
use @code{cons-in-area} (see (cons-in-area-fun)).  Object-creating functions
which take keyword arguments generally accept a @code{:area} argument.
You can also control which area is used by binding @code{default-cons-area}
(see (default-cons-area-var)); most functions that allocate storage
use the value of this variable, by default, to specify the area to use.

There is a default `working storage' area that collects those objects
that the user has not chosen to control explicitly. 

	Areas also give the user a handle to control the garbage
collector.  Some areas can be declared to be @i{static}, which means that
they change slowly and the garbage collector should not attempt to
reclaim any space in them.  This can eliminate a lot of useless
copying.  A static area can be explicitly
garbage-collected at infrequent intervals when it is believed that that
might be worthwhile. 

	Each area can potentially have a different storage discipline,
a different paging algorithm, and even a different data representation. 
The microcode dispatches on attributes of the area at the
appropriate times.  The structure of the machine makes the performance
cost of these features negligible; information about areas is stored
in extra bits in the memory mapping hardware where it can be quickly
dispatched on by the microcode; these dispatches usually have to be
done anyway to make the garbage collector work and to implement
invisible pointers.  This feature is not currently used by the system,
except for the list/structure distinction described below.

	Each area has a name and a number.  The name is a symbol whose
value is the number.  The number is an index into various internal
tables.  Normally the name is treated as a special variable, so the
number is what is given as an argument to a function that takes an area
as an argument.  Thus, areas are not Lisp objects; you cannot
pass an area itself as an argument to a function; you just pass its
number.  There is a maximum number of areas (set at cold-load generation
time); you can only have that many areas before the various internal
tables overflow.  Currently (as this manual is written) the limit is
256 areas, of which 64 already exist when you start.

	The storage of an area consists of one or more @i{regions}.  Each region
is a contiguous section of address space with certain homogeneous properties.
The most important of these is the @i{data representation type}.  A given region
can only store one type.  The two types that exist now are @i{list} and @i{structure}.
A list is anything made out of conses (a closure for instance).  A structure is
anything made out of a block of memory with a header at the front; symbols, strings,
arrays, instances, compiled functions, etc.  Since lists and structures cannot be stored
in the same region, they cannot be on the same page.  It is necessary to know about
this when using areas to increase locality of reference.

When you create an area, one region is created initially.  When you try
to allocate memory to hold an object in some area, the system tries to
find a region that has the right data representation type to hold this
object, and that has enough room for it to fit.  If there isn't any such
region, it makes a new one (or signals an error; see the @code{:size} option
to @code{make-area}, below).  The size of the new region is an attribute of
the area (controllable by the @code{:region-size} option to @code{make-area}).
If regions are too large, memory may get taken up by a region and never used.
If regions are too small, the system may run out of regions because regions,
like areas, are defined by internal tables that have a fixed size (set at
cold-load generation time).  Currently (as this manual is written) the limit
is 256 regions, of which about 105 already exist when you start.
(If you're wondering why the limit on regions isn't higher than the limit
on areas, as it clearly ought to be, it's just because both limits have
to be multiples of 256 for internal reasons, and 256 regions seem
to be enough.)

@section  Area Functions and Variables

@defvar default-cons-area
The value of this variable is the number of the area in which objects are created
by default.  It is initially the number of @code{working-storage-area}.
Giving @code{nil} where an area is required uses the value of @code{default-cons-area}.
Note that to put objects into an area other than @code{working-storage-area}
you can either bind this variable or use functions such as
@code{cons-in-area} (see (cons-in-area-fun)) which take the area as an explicit argument.
@end defvar

@defvar background-cons-area
The value of this variable is the number of a non-temporary area in
which objects created as incidental side effects by system functions
should be created.  This area is used whenever an object is created that
should never be in a temporary area, even if @i{default-cons-area} is a
temporary area.

By default, this area is @code{working-storage-area}.
@end defvar

@defun make-area &key name size region-size representation gc read-only pdl room
Creates a new area, whose name and attributes are specified by the keywords.
You must specify a symbol as a name; the symbol is @code{setq}'ed to
the area-number of the new area, and that number is also returned,
so that you can use @code{make-area} as the initialization of a @code{defvar}.

Here are the meanings of the keywords:
@table @i
@item name
'kindex :name make-area
A symbol that will be the name of the area.  This item is required.

@item size
'kindex :size make-area
The maximum allowed size of the area, in words.  Defaults to infinite.
(Actually, the default is the largest positive fixnum; but the area is
not limited to that size!)
If the number of words allocated to the area reaches this size, attempting
to cons an object in the area will signal an error.

@item region-size
'kindex :region-size make-area
The approximate size, in words, for regions within this area.  The
default is the area size if a @code{:size} argument was given, otherwise it is a
suitable medium size.  Note that if you specify @code{:size} and not
@code{:region-size}, the area will have exactly one region.  When making an
area that will grow very big, it is desirable to make the region size
larger than the default region size to avoid creating very many regions
and possibly overflowing the system's fixed-size region tables.

@item representation
'kindex :representation make-area
The type of object to be contained in the area's initial region.
The argument to this keyword can be @code{:list}, @code{:structure}, or a numeric code.
@code{:structure} is the default.  If you are only going to cons lists in your
area, you should specify @code{:list} so you don't get a useless structure region.

@item gc
'kindex :gc make-area
The type of garbage-collection to be employed.  The choices are
@code{:dynamic} (which is the default), @code{:static}, and @code{:temporary}.
@code{:static} means that the area will not be copied by the garbage
collector, and nothing in the area or pointed to by the area will ever
be reclaimed, unless a garbage collection of this area is manually
requested.  @code{:temporary} is like @code{:static}, but in addition you are
allowed to use @code{si:reset-temporary-area} on this area.

@item read-only
'kindex :read-only make-area
With an argument of @code{t}, causes the area to be made read-only.  Defaults
to @code{nil}.  If an area is read-only, then any attempt to change anything
in it (altering a data object in the area or creating a new object in the
area) will signal an error unless @code{sys:%inhibit-read-only}
(see (sys:%inhibit-read-only-var)) is bound to a non-@code{nil} value.

@item pdl
'kindex :pdl make-area
With an argument of @code{t}, makes the area suitable for storing
regular-pdls of stack-groups.  This is a special attribute due to the
pdl-buffer hardware.  Defaults to @code{nil}.  Areas for which this is @code{nil}
may @i{not} be used to store regular-pdls.  Areas for which this is @code{t}
are relatively slow to access; all references to pages in the area will
take page faults to check whether the referenced location is really in
the pdl-buffer.

@item room
'kindex :room make-area
With an argument of @code{t}, adds this area to the list of areas that are
displayed by default by the @code{room} function (see (room-fun)).
@end table

@lisp
@exdent Example:
(make-area :name 'foo-area
	   :gc :dynamic
	   :representation :list)
@end lisp
@end defun

@defun describe-area area
@i{area} may be the name or the number of an area.  Various
attributes of the area are printed.
@end defun

@defvar area-list
The value of @code{area-list} is a list of the names of all existing areas.
This list shares storage with the internal area name table, so you should
not change it.
@end defvar

@defun %area-number pointer
Returns the number of the area to which @i{pointer} points, or @code{nil} if
it does not point within any known area.  The data-type of @i{pointer}
is ignored.
@end defun

@defun %region-number pointer
Returns the number of the region to which @i{pointer} points, or @code{nil} if
it does not point within any known region.  The data-type of @i{pointer}
is ignored.  (This information is generally not very interesting to users;
it is important only inside the system.)
@end defun

@defun area-name number
Given an area number, returns the name.  This ``function'' is actually an array.
@end defun

@defun si:reset-temporary-area area-number
This very dangerous operation marks all the storage in area
@i{area-number} as free and available for re-use.  Any data in the area
is lost and pointers to it become meaningless.  In principle,
this operation should only be used if you are sure there are no pointers
into the area.

If the area was not defined as temporary, this function gets an
error.
@end defun

@noindent
See also @code{cons-in-area} ((cons-in-area-fun)), @code{list-in-area} ((list-in-area-fun)),
and @code{room} ((room-fun)).


@section  Interesting Areas

This section lists the names of some of the areas and tells what they are for.
Only the ones of the most interest to a user are listed; there are many others.

.defconst working-storage-area
This is the normal value of @code{default-cons-area}.
Most working data are consed in this area.
.end_defconst

.defconst permanent-storage-area
This area is to be used for permanent data, which will (almost) never become
garbage.  Unlike @code{working-storage-area}, the contents of this area
are not continually copied by the garbage collector; it is a static area.
.end_defconst

.defconst sys:extra-pdl-area
The `number consing area' in which floating point numbers, ratios and bignums
are normally created.  If a pointer to a number in this area is stored anywhere
outside the machine registers and current stack, a copy of the number is
made in @code{working-storage-area} and a pointer to the copy is stored instead.
When @code{sys:extra-pdl-area} gets full, the all numbers pointed to by the
registers and current stack are copied, and then nothing in the area can be
in use any more, so it is marked as empty.
.end_defconst

.defconst sys:p-n-string
Print-names of symbols are stored in this area.
.end_defconst

.defconst sys:nr-sym
Contains most of the symbols in the Lisp world, except @code{t} and @code{nil}.
.end_defconst

.defconst sys:resident-symbol-area
Contains the symbols @code{t} and @code{nil}.  @code{nil} is known to be at address zero.
.end_defconst

.defconst sys:pkg-area
This area contains packages, principally the hash tables with which @code{intern}
keeps track of symbols.
.end_defconst

.defconst macro-compiled-program
Compiled functions (FEFs) are put here by the compiler and by @code{fasload}.
So are the constants that they refer to.
.end_defconst

.defconst sys:property-list-area
This area holds the property lists of symbols.
.end_defconst

@section  Errors Pertaining to Areas

.defcondition sys:area-overflow (@code{error})
This is signaled on an attempt to make an area bigger than its declared maximum size.

The condition instance supports the operations @code{:area-name} and
@code{:area-maximum-size}.
.end_defcondition

.defcondition sys:region-table-overflow (@code{error})
This is signaled if you run out of regions.
.end_defcondition

.defcondition sys:virtual-memory-overflow (@code{error})
This is signaled if all of virtual memory is part of some region and an
attempt is made to allocate a new region.  There may be free space left
in some regions in other areas, but there is no way to apply it to the
area in which storage is to be allocated. 
.end_defcondition

.defcondition sys:cons-in-fixed-area (@code{error})
This is signaled if an attempt is made add a second region to a fixed
area.  The fixed areas are certain areas, created at system
initialization, that are only allowed a single region, because their
contents must be contiguous in virtual memory.
.end_defcondition

@chapter The Compiler
@cindex compiler

@section  The Basic Operations of the Compiler

	The purpose of the Lisp compiler is to convert Lisp functions
into programs in the Lisp Machine's instruction set, so that they
run more quickly and take up less storage.  Compiled functions
are represented in Lisp by FEFs (Function
Entry Frames), which contain machine code as well as various other information.
The printed representation of a FEF is
@lisp
#<DTP-FEF-POINTER @i{address} @i{name}>
@end lisp

	If you want to understand the output of the compiler, refer
to (understanding-compiled-code).

@cindex QFASL files

	There are three ways to invoke the compiler from the Lisp
Machine.  First, you may have an interpreted function in the Lisp
environment that you would like to compile.  The function @code{compile} is
used to do this.  Second, you may have code in an editor buffer that you
would like to compile.  The Zmacs editor has commands to read code into
Lisp and compile it.  Third, you may have a program (a group of function
definitions and other forms) written in a file on the file system.  The
function @code{compile-file} can translate this file into a @i{QFASL} file
that describes the compiled functions and associated data.  The QFASL
file format is capable of representing an arbitrary collection of Lisp
objects, including shared structure.  The name derives from `Q', a
prefix once used to mean ``for the Lisp Machine, not for Maclisp'', and
`FASL', an abbreviation for ``fast loading''.

@c Explain why the compiler expands macros.
@c Explain specialness versus localness, etc.

@section  How to Invoke the Compiler

@defun compile function-spec &optional definition
Compiles an individual interpreted function definition.  If
@i{definition} is supplied, it is the definition to be compiled.
Otherwise, the current definition of @i{function-spec} is used.  If
@i{function-spec} is non-@code{nil}, the compiled function is stored as the
definition of @i{function-spec}, and @i{function-spec} is returned.
Otherwise, the compiled function object itself is returned.
(However, it is preferable to use @code{compile-lambda} if your wish
is to create a compiled function object without storing it anywhere.)

The compiled function object created by @code{compile} records the
interpreted definition it was made from on its debugging info alist (see
(debugging-info-fun)).  This is useful in two ways: the function
@code{uncompile} can be used to reinstall the interpreted definition, and
@code{compile} invoked again on the same @i{function-spec} can find the
interpreted definition used before and compile it again.  The latter is
useful if you have changed some macros or subst functions which the
definition refers to.
@end defun

@defun uncompile function-spec
If @i{function-spec} is defined as a compiled function that records the
original definition that was compiled, then @i{function-spec} is redefined
with that original definition.  This undoes the effect of calling
@code{compile} on @i{function-spec}.
@end defun

@defun compile-lambda lambda-exp function-spec
Returns a compiled function object produced by compiling @i{lambda-exp}.
The function name recorded by the compiled function object is
@i{function-spec}, but that function spec is not defined
by @code{compile-lambda}.  This function is preferable to
@code{compile} with first argument @code{nil} in that it allows you to
specify the name for the function to record internally.
@end defun

@defun compile-encapsulations function-spec
Compiles all encapsulations that @code{function-spec} currently has.
Encapsulations (see (encapsulate)) include tracing, breakons and
advice.  Compiling tracing or breakons makes it possible (or at least
more possible) to trace or breakon certain functions that are used in
the evaluator.  Compiling advice makes it less costly to advise
functions that are used frequently.

Any encapsulation that is changed will cease to be compiled; thus, if
you add or remove advice, you must do @code{compile-encapsulations} again
if you wish the advice to be compiled again.
@end defun

@defvar compile-encapsulations-flag
If this is non-@code{nil}, all encapsulations that are created are compiled
automatically.
@end defvar

@defun compile-file input-file &key output-file set-default-pathname package
Compiles the file specified by @i{input-file}, a pathname or namestring.
The format for files input to the compiler is described on
(compiler-input-section).

If @i{output-file} is specified, it is a pathname used for the compiled file.
Otherwise, the ouptut file name is computed from the input file name
by specifying @code{:qfasl} as the type component.

@i{package}, if non-@code{nil} specifies the package in which compilation
should be performed.  Normally the system knows, or asks interactively,
and you need not supply this argument.

@i{set-default-pathname}, if non-@code{nil}, means that the defaults
should be set to the input file's name.  @i{set-default-pathname} defaults to @code{t}.
@end defun

@defun qc-file filename &optional output-file load-flag in-core-flag package file-local-declarations dont-set-default-p read-then-process-flag
An older, obsolete way of invoking the compiler on a file.

@i{file-local-declarations} is for compiling multiple files as if they
were one.  @i{dont-set-default-p} suppresses the changing of the default
file name to @i{filename} that normally occurs.  The @i{load-flag} and
@i{in-core-flag} arguments were not fully implemented and should not be
used.  @i{read-then-process-flag} causes the entire file to be read and
then the entire file to be compiled; this is no longer advantageous now
that there is enough memory to avoid thrashing when forms are read and
compiled one by one, and it prevents compile-time reader-macros
defined in the file from working properly.
@end defun

@defun qc-file-load filename &optional output-file load-flag in-core-flag package functions-defined file-local-declarations dont-set-default-p read-then-process-flag
Compiles a file and then loads in the resulting QFASL file.
@end defun

@defvar compiler:compiler-verbose
If this variable is non-@code{nil}, the compiler prints the name of each
function that it is about to compile.
@end defvar

@defvar compiler:peep-enable
The peephole optimizer is used if this variable is non-@code{nil}.
The only reason to set it to @code{nil} is if there is a suspicion of a bug in the optimizer.
@end defvar

See also the @code{disassemble} function ((disassemble-fun)), which lists the instructions
of a compiled function in symbolic form.


@section  Input to the Compiler
@cindex input to the compiler

	The purpose of @code{compile-file} is to take a file and produce
a translated version which does the same thing as the original except
that the functions are compiled.  @code{compile-file} reads through the input
file, processing the forms in it one by one.  For each form, suitable
binary output is sent to the QFASL file so that when the QFASL file is
loaded the effect of that source form will be reproduced.  The differences
between source files and QFASL files are that QFASL files are in a compressed
binary form, which reads much faster but cannot be edited, and that
function definitions in QFASL files have been translated from Lisp forms
to FEFs.

	So, if the source contains a @code{(defun ...)} form at top level,
then when the QFASL file is loaded the function will be defined as a
compiled function.  If the source file contains a form that is not of a
type known specially to the compiler, then that form (encoded in QFASL
format) is output ``directly'' into the QFASL file, so that when the
QFASL file is loaded that form will be evaluated.  Thus, if the source
file contains @code{(princ "Hello")} at top level, then the compiler puts
in the QFASL file instructions to create the list @code{(princ "Hello")}
and then evaluate it.

	The Lisp Machine editor Zmacs assumes that source files are
formatted so that an open parenthesis at the left margin (that is, in
column zero) indicates the beginning of a function definition or other top
level list (with a few standard exceptions).  The compiler assumes that you
follow this indentation convention, enabling it to tell when a
close-parenthesis is missing from one function as soon as the beginning of
the next function is reached.

	If the compiler finds an open parenthesis in column zero in the middle
of a list, it invents enough close parentheses to close off the list
that is in progress.  A compiler warning is produced instead of an
error.  After that list has been processed, the open parenthesis is read
again.  The compilation of the list that was forcefully closed off is
probably useless, but the compilation of the rest of the file is
usually correct.  You can read the source file into the editor to fix and
recompile the function that was unbalanced.

	A similar thing happens on end of file in the middle of a list, so
that you get to see any warnings for the function that was unbalanced.

	Certain special forms including @code{eval-when}, @code{progn},
@code{local-declare}, @code{declare-flavor-instance-variables}, and @code{comment}
are customarily used around lists that start in column zero.  These symbols
have a non-@code{nil} @code{si:may-surround-defun} property that makes the
compiler permit this.  You can add such properties to other symbols if you
want.

@defvar compiler:qc-file-check-indentation
If @code{nil}, inhibits the compiler from checking for open-parentheses in
column zero.
@end defvar

Whan a macro definition (@code{macro} and @code{defmacro} forms) is
encountered at top level in the file being compiled, the macro
definition is recorded for the rest of the compilation so that the macro
thus defined can be used in the same file following its definition.
This is in addition to writing the compiled macro definition into the
QFASL file.

Flavor definitions (@code{defflavor} forms, see (defflavor-fun)) and
global @code{special} declarations (made with @code{proclaim},
(proclaim-fun), or with @code{defvar}, (defvar-fun)) are likewise
recorded for the rest of the compilation, as well as written into the
QFASL file so that they will be recorded permanently when the file is
loaded.

@defvar sys:file-local-declarations
During file-to-file compilation,
the value of this variable is a list of all declarations that are in
effect for the rest of the file.  Macro definitions, @code{defdecl}'s,
@code{proclaim}'s
and special declarations that come from @code{defvar}s are all recorded on
this list.
@end defvar

Package-defining and altering functions such as @code{defpackage},
@code{in-package}, @code{export} and @code{use-package} are executed by the
compiler in the ordinary, permanent fashion.  They are also written in
the QFASL file so that the form is executed just the same when the file
is loaded.  If you load the file later in the same session, the package
altering form is executed twice.  This is normally harmless.
@code{require} receives the same treatment.

You can control explicitly whether a form is evaluated by the compiler,
and whether it is written into the QFASL file to be executed when the
file is loaded, using the @code{eval-when} construct.  You might want a
form to be:
@cindex eval-when
@table @strong
@item Put into the QFASL file (compiled, of course), or not.
@item Evaluated within the compiler, or not.
@item Evaluated if the source file loaded, or not.
@end table

An @code{eval-when} form looks like
@lisp
(eval-when @i{times-list}
  @i{form1} @i{form2} ...)
@end lisp
The @i{times-list} may contain one or more of the symbols @code{load}, @code{compile},
or @code{eval}.
If @code{load} is present, the @i{forms} are written into the QFASL file
to be evaluated when the QFASL file is loaded (except that @code{defun} forms
put the compiled definition into the QFASL file instead).
If @code{compile} is present, the @i{forms} are evaluated in the compiler.
If @code{eval} is present, the @i{forms} are evaluated when read into Lisp;
this is because @code{eval-when} is defined as a special form in Lisp.  (The
compiler ignores @code{eval} in the @i{times-list}.)
For example,
@lisp
(eval-when (compile eval) (macro foo (x) (cadr x)))
@end lisp
would define @code{foo} as a macro in the compiler and when the file
is read in interpreted, but not when the QFASL file is fasloaded.

@defspec eval-when (time...) body...
When seen by the interpreter, if one of the @i{times} is the symbol @code{eval}
then the @i{body} forms are evaluated; otherwise @code{eval-when} does nothing.

But when seen by the compiler, this special form does the special things described above.
@end defspec

Nested use of @code{eval-when} is permitted but its meaning is tricky.
If an inner @code{eval-when} form appears in an ordinary context
where a general form would be written into the QFASL file but not
executed at compile time, then it behaves in the usual fashion:
the @i{body} forms are written into the QFASL file if
@code{load} is one of the @i{times}, and they are evaluated at
compile time if @code{compile} is one of the @i{times}.

If the inner @code{eval-when} form appears in a context which says
to evaluate at compile time only, then the @i{body} forms are
evaluated if @code{eval} is one of the @i{times}.

If the inner @code{eval-when} appears in a context which says to
write into the QFASL file and evaluate at compile time,
the the @i{body} forms are written into the QFASL file if
@code{load} is one of the @i{times}, and they are evaluated at
compile time if either @code{compile} or @code{eval} is one of the @i{times}.

	For the rest of this section, we will use lists such as are
given to @code{eval-when}, e.g. @code{(load eval)}, @code{(load compile)}, etc.,
to describe when forms are evaluated.

	If a form is not enclosed in an @code{eval-when},
then the times at which it is evaluated depend on the form.
The following table summarizes at what times evaluation takes
place for any given form seen at top level by the compiler.
@table @code
@item (eval-when @i{times-list} @i{form} ...)
@i{times-list} specifies when the @i{form}... should be performed.

@item (declare (special ...)) 1or* (declare (unspecial ...))
The @code{special} or @code{unspecial} is performed at
@code{(load compile)} time.

@item (declare @i{anything-else})
@i{anything-else} is performed only at
@code{(compile)} time.

@item (proclaim ...)
is performed at @code{(load compile eval)} time.

@cindex special variable
@item (special ...) 1or* (unspecial ...)
@code{(load compile eval)}

@item (macro ...) 1or* (defmacro ...) 1or* (defsubst ...)
@itemx 1or* (defflavor ...) 1or* (defstruct ...)
@code{(load eval)}.  However, during file to file compilation, the
definition is recorded temporarily and used for expanding calls
to the macro, or macros defined by the @code{defstruct} for the
rest of the file.

@item (comment ...)
Ignored at all times.

@item (compiler-let ((@i{var val}) ...) @i{body}...)
Processes the @i{body} in its normal fashion, but with the indicated
variable bindings in effect.  These variables will typically
affect the operation of the compiler or of macros.  See (compiler-let-discussion).

@item (local-declare (@i{decl decl ...}) @i{body}...)
Processes the @i{body} in its normal fashion, with the indicated
declarations added to the front of the list which is the value
of @code{local-declarations}.

@item (defun ...) 1or* (defmethod ...) 1or* (defselect ...)
@code{(load eval)}, but at load time what is processed is not this form
itself, but the result of compiling it.

@item (require ...) 1or* (in-package ...)
@itemx 1or various other package functions*
@code{(load compile eval)}

@item @i{anything-else}
@code{(load eval)}
@end table

	Sometimes a macro wants to return more than one form
for the compiler top level to see (and to be evaluated).  The following
facility is provided for such macros.  If a form
@lisp
(progn @i{form1} @i{form2} ...)
@end lisp
is seen at the compiler top level, all of the @i{forms} are processed as if they had been at
compiler top level.  (Of course, in the interpreter they
are all evaluated.)

To prevent an expression from being optimized by the compiler,
surround it with a call to @code{dont-optimize}.

@defspec dont-optimize form
In execution, this is equivalent to simply @i{form}.  However, any
source-level optimizations that the compiler would normally perform on
the top level of @i{form} are not done.
@lisp
@exdent Examples:
(dont-optimize (apply 'foo (list 'a 'b)))
@exdent actually makes a list and calls @code{apply}, rather than doing
(foo 'a 'b)

(dont-optimize (si:flavor-method-table flav))
@end lisp
actually calls @code{si:flavor-method-table} as a function, rather than
substituting the definition of that @code{defsubst}.

@code{dont-optimize} can even be used around a @code{defsubst} inside of
@code{setf} or @code{locf}, to prevent open-coding of the @code{defsubst}.
In this case, a function will be created at load time to do the
setting or return the location.
@lisp
(setf (dont-optimize (zwei:buffer-package buffer)) 
      (pkg-find-package "foo"))
@end lisp

Subforms of @i{form}, such as arguments, are still optimized or open
coded, unless additional @code{dont-optimize}'s appear around them.
@end defspec

@section  Compile-Time Properties of Symbols

When symbol properties are referred to during macro expansion, it is
desirable for properties defined in a file to be ``in effect'' for the
the rest of the file if the file is compiled.  This does not happen if
@code{get} and @code{defprop} are used, because the @code{defprop} will not be
executed until the QFASL file is loaded.  Instead, you can use
@code{getdecl} and @code{defdecl}.  These are normally the same as @code{get} and
@code{defprop}, but during file-to-file compilation they also refer to and
create declarations.

@defun getdecl symbol property
This is a version of @code{get} that allows the properties of
the @i{symbol} to be overridden by declarations.

If a declaration of the form @code{(@i{property} @i{symbol} @i{value})} is
in effect, @code{getdecl} returns @i{value}.  Otherwise, @code{getdecl}
returns the result of @code{(get @i{symbol} @i{property})}.

If you intend to create such declarations with @code{proclaim}
or local use of @code{declare}, you must make sure that
a @code{declaration} declaration is in effect for @i{property}.
You can do this with @code{(proclaim '(declaration @i{property}))}.

@code{getdecl} is typically used in macro definitions.
For example, the @code{setf} macro uses @code{getdecl} to get the
properties which say how to store in the specified place.
See (getdecl-example) for an example of a macro
that uses @code{getdecl}.
@end defun

@defun putdecl symbol property value
Causes @code{(getdecl @i{symbol} @i{property})} to return
@i{value}.

@code{putdecl} usually simply does a @code{putprop}.  But if executed at
compile time during file-to-file compilation, it instead makes an entry
on @code{file-local-declarations} of the form @code{(@i{property} @i{symbol}
@i{value})}.

In either case, this stores @i{value} where @code{getdecl} can find it;
but if @code{putdecl} is done during compilation, it affects only the
rest of that compilation.
@end defun

@defspec defdecl symbol property value
When executed, this is like @code{putdecl} except that the arguments
are not evaluated.  It is usually the same as @code{defprop}
except for the order of the arguments.

Unlike @code{defprop}, when @code{defdecl} is encountered during file-to-file
compilation, a declaration is recorded which remains in
effect for the rest of the compilation.  (The @code{defdecl} form also goes
into the QFASL file to be executed when the file is loaded).
@code{defprop} would have no effect whatever at compile time.

@code{defdecl} is often useful as a part of the expansion of a macro.
It is also useful as a top-level expression in a source file.

@lisp
@exdent Example:
(defdecl foo locf foo-location)
@end lisp
in a source file would allow @code{(locf (foo @i{args}...))}
to be used in the rest of that source file; and, once the file was
loaded, by anyone.

Simple use @code{defsetf} expands into a @code{defdecl}.
@end defspec


@section  Using Compiler Warnings
@cindex warnings from the compiler
@cindex compiler warnings

When the compiler prints warnings, it also records them in a data base,
organized by file and by function within file.  Old warnings for
previous compilations of the same function are thrown away, so the data
base contains only warnings that are still applicable.  This data base
can be
used to visit, in the editor, the functions that got warnings.  You can
also save the data base and restore it later.

There are three editor commands that you can use to begin visiting the
sites of the recorded warnings.  They differ only in how they decide
which files to look through:

@table @code
@item Meta-X Edit Warnings
For each file that has any warnings, asks whether to edit the warnings
for that file.

@item Meta-X Edit File Warnings
Reads the name of a file and then edits the warnings for that file.

@item Meta-X Edit System Warnings
Reads the name of a system and then 
edits the warnings for all files in that system (see @code{defsystem},
(defsystem-fun)).
@end table

While the warnings are being edited, the warnings themselves appear in a
small window at the top of the editor frame, and the code appears in a
large window which occupies the rest of the editor frame.

As soon as you have finished specifying the file(s) or system to
process, the editor proceeds to visit the code for the first
warning.  From then on, to move to the next warning, use the command
@code{Control-Shift-W}.  To move to the previous warning, use
@code{Meta-Shift-W}.  You can also switch to the warnings window with
@code{Control-X O} or with the mouse, and move around in that buffer.
When you use @code{Control-Shift-W} and there are no more warnings after
the cursor, you return to single-window mode.

You can also insert the text of the warnings into any editor buffer:
@table @code
@item Meta-X Insert File Warnings
Reads the name of a file and inserts into the buffer after point the
text for that file's warnings.  The mark is left after the warnings, but
the region is not turned on.

@item Meta-X Insert Warnings
Inserts into the buffer after point the text for the warnings of all
files that have warnings.  The mark is left after the warnings, but the
region is not turned on.
@end table

You can also dump the warnings data base into a file and
reload it
later.  Then you can do @code{Meta-X Edit Warnings} again in the later
session.  You dump the warnings with @code{si:dump-warnings} and load the
file again with @code{load}.  In addition, @code{make-system} with the
@code{:batch} option writes all the warnings into a file in this way.

@defun si:dump-warnings output-file-pathname &rest warnings-file-pathnames
Writes the warnings for the files named in @i{warnings-file-pathnames}
(a list of pathnames or strings) into a file named
@i{output-file-pathname}.
@end defun

@defvar compiler:warn-on-errors
If this variable is non-@code{nil}, errors in reading code to be compiled,
and errors in macro expansion within the compiler, produce only
warnings; they do not enter the debugger.  The variable is normally
@code{t}.

The default setting is useful when you do not anticipate errors during
compilation, because it allows the compilation to proceed past such
errors.  If you have walked away from the machine, you do not come back
to find that your compilation stopped in the first file and did not
finish.

If you find an inexplicable error in reading or macroexpansion, and wish
to use the debugger to localize it, set @code{compiler:warn-on-errors}
to @code{nil} and recompile.
@end defvar

@subsection Controlling Compiler Warnings

By controlling the compile-time values of the variables @code{run-in-maclisp-switch},
@code{obsolete-function-warning-switch}, and @code{inhibit-style-warning-switch} (explained
above), you can enable or disable some of the warning messages of the compiler.
The following special form is also useful:

@defmac inhibit-style-warnings form
Prevents the compiler from performing style-checking on the top level
of @i{form}.  Style-checking is still done on the arguments of @i{form}.
Both obsolete function warnings and won't-run-in-Maclisp warnings are
done by means of the style-checking mechanism, so, for example,
@lisp
(setq bar (inhibit-style-warnings (value-cell-location foo)))
@end lisp
does not warn that @code{value-cell-location} will not work in Maclisp,
but
@lisp
(inhibit-style-warnings (setq bar (value-cell-location foo)))
@end lisp
does warn, since @code{inhibit-style-warnings} applies only to the top
level of the form inside it (in this case, to the @code{setq}).
@end defmac

Sometimes functions take arguments that they deliberately do not use.
Normally the compiler warns you if your program binds a variable that it
never references.  In order to disable this warning for variables that
you know you are not going to use, there are three things you can do.

@vindex ignore
@cindex ignored arguments
The first thing is to name the variables @code{ignore} or @code{ignored}.  The
compiler does not complain if a variable by one of these names is not
used.  Furthermore, by special dispensation, it is all right to have
more than one variable in a lambda-list that has one of these names.

Another thing you can do is write an @code{ignore} declaration.  Example:
@lisp
(defun the-function (list fraz-name fraz-size)
  (declare (ignore fraz-size)))
@end lisp
This has the advantage that @code{arglist} (see (arglist-fun)) will return
a more meaningful argument list for the function, rather than returning
something with @code{ignore}'s in it.

Finally, you can simply use the variable for effect
(ignoring its value) at the front of the function.  Example:
@lisp
(defun the-function (list fraz-name fraz-size)
  fraz-size       ; This argument is not used.
  ...)
@end lisp

The following function is useful for requesting compiler warnings in
certain esoteric cases.  Normally, the compiler notices whenever any
function @i{x} uses (calls) any other function @i{y}; it makes notes of
all these uses, and then warns you at the end of the compilation if the
function @i{y} got called but no definition of it has been seen.  This
usually does what you want, but sometimes there is no way the compiler
can tell that a certain function is being used.  Suppose that instead of
@i{x}'s containing any forms that call @i{y}, @i{x} simply stores @i{y}
away in a data structure somewhere, and someplace else in the program
that data structure is accessed and @code{funcall} is done on it.  There is
no way that the compiler can see that this is going to happen, and so it
can't notice the function usage, and so it can't create a warning
message.  In order to make such warnings happen, you can explicitly call
the following function at compile-time.

@defun compiler:function-referenced what by
@i{what} is a symbol that is being used as a function.  @i{by} may be any function spec.  
@code{compiler:function-referenced} must be
called at compile-time while a compilation is in progress.  It tells the
compiler that the function @i{what} is referenced by @i{by}.  When the compilation
is finished, if the function @i{what} has not been defined, the compiler
issues a warning to the effect that @i{by} referred to the function @i{what},
which was never defined.
@end defun

You can also tell the compiler about any function it should consider
``defined'':

@defun compiler:compilation-define function-spec
@i{function-spec} is marked as ``defined'' for the sake of the compiler;
future calls to this function will not produce warnings.
@end defun

@defmac compiler:make-obsolete function reason
This special form declares a function to be obsolete; code that calls it
will get a compiler warning, under the control of @code{obsolete-function-warning-switch}.
This is used by the compiler to mark as obsolete some Maclisp functions which exist in
Zetalisp but should not be used in new programs.  It can also
be useful when maintaining a large system, as a reminder that a function has
become obsolete and usage of it should be phased out.  An example of an
obsolete-function declaration is:
@lisp
(compiler:make-obsolete create-mumblefrotz
	"use MUMBLIFY with the :FROTZ option instead")
@end lisp
@end defmac

@subsection Recording Warnings

The warnings data base is not just for compilation.  It can record
operations for any number of different operations on files or parts of
files.  Compilation is merely the only operation in the system that uses it.

Each operation about which warnings can be recorded should have a name,
preferably in the keyword package.  This symbol should have four
properties that tell the system how to print out the operation name
as various parts of speech.  For compilation, the operation name is
@code{:compile} and the properties are defined as follows:

@lisp
(defprop :compile "compilation" si:name-as-action)
(defprop :compile "compiling" si:name-as-present-participle)
(defprop :compile "compiled" si:name-as-past-participle)
(defprop :compile "compiler" si:name-as-agent)
@end lisp

The warnings system considers that these operations are normally
performed on files that are composed of named objects.  Each warning is
associated with a filename and then with an object within the file.
It is also possible to record warnings about objects that are not within
any file.

To tell the warnings system that you are starting to process all or part
of a file, use the macro @code{si:file-operation-with-warnings}.

@defmac sys:file-operation-with-warnings (generic-pathname operation-name whole-file-p) body...
@i{body} is executed within a context set up so that warnings can be
recorded for operation @i{operation-name} about the file specified by
@i{generic-pathname} (see (pathname-generic-pathname-method)).

In the case of compilation, this is done at the level of @code{compile-file}
(actually, it is done in @code{compiler:compile-stream}).

@i{whole-file-p} should be non-@code{nil} if the entire contents of the
file are to be processed inside the @i{body} if it finishes; this implies
that any warnings left over from previous iterations of this operation
on this file should be thrown away on exit.  This is only relevant to
objects that are not found in the file this time; the assumption is that
the objects must have been deleted from the file and their warnings are
no longer appropriate.

All three of the special arguments are specified as expressions that
are evaluated.
@end defmac

Within the processing of a file, you must also announce when you are
beginning to process an object:

@defmac sys:object-operation-with-warnings (object-name location-function) body...
Executes @i{body} in a context set up so that warnings are recorded
for the object named @i{object-name}, which can be a symbol or a list.
Object names are compared with @code{equal}.

In the case of compilation, this macro goes around the processing of a
single function.

@i{location-function} is either @code{nil} or a function that the editor
uses to find the text of the object.  Refer to the file @code{SYS: ZWEI; POSS
LISP} for more details on this.

@i{object-name} and @i{location-function} are specified with expressions
that are evaluated.

You can enter this macro recursively.  If the inner invocation is for
the same object as the outer one, it has no effect.  Otherwise, warnings
recorded in the inner invocation apply to the object specified therein.
@end defmac

Finally, when you detect exceptions, you must make the actual warnings:

@defun sys:record-warning type severity location-info format-string &rest args
Records one warning for the object and file currently being processed.
The text of the warning is specified by @i{format-string}and @i{args},
which are suitable arguments for @code{format}, but the warning is @i{not}
printed when you call this function.  Those arguments will be used to
reprint the warning later.
@end defun

@defun sys:record-and-print-warning type severity location-info format-string &rest args
Records a warning and also prints it.

@i{type} is a symbol that identifies the specific cause of the warning.
Types have meaning only as defined by a particular operation, and at
present nothing makes much use of them.  The system defines one type:
@code{si:premature-warnings-marker}.

@i{severity} measures how important a warning this is, and the general
causal classification.  It should be a symbol in the keyword package.
Several severities are defined, and should be used when appropriate,
but nothing looks at them:
@table @code
@item :implausible
This warning is about something that is not intrinsically wrong but is
probably due to a mistake of some sort.

@item :impossible
This warning is about something that cannot have a meaning
even if circumstances outside the text being processed are
changed.

@item :probable-error
This is used to indicate something that is certainly an error
but can be made correct by a change somewhere else; for example, calling
a function with the wrong number of arguments.

@item :missing-declaration
This is used for warnings about free variables not declared special,
and such.  It means that the text was not actually incorrect, but
something else that is supposed to accompany it was missing.

@item :obsolete
This warning is about something that you shouldn't use any more,
but which still does work.

@item :very-obsolete
This is about something that doesn't even work any more.

@item :maclisp
This is for something that doesn't work in Maclisp.

@item :fatal
This indicates a problem so severe that no sense can be made of the
object at all.  It indicates that the presence or absence of other
warnings is not significant.

@item :error
There was a Lisp error in processing the object.
@end table

@i{location-info} is intended to be used to inform the editor of the
precise location in the text of the cause of this warning.  It is not
defined as yet, and you should use @code{nil}.
@end defun

If a warning is encountered while processing data that doesn't really
have a name (such as forms in a source file that are not function
definitions), you can record a warning even though you are not inside
an invocation of @code{sys:object-operation-with-warnings}.  This
warning is known as a @i{premature warning} and it will be recorded with
the next object that is processed; a message will be added so that the
user can tell which warnings were premature.

Refer to the file @code{SYS: SYS; QNEW LISP} for more information on the
warnings data base.

@section  Compiler Source-Level Optimizers
@cindex optimizer, compiler

The compiler stores optimizers for source code on property lists so as
to make it easy for the user to add them.  An optimizer can be used to
transform code into an equivalent but more efficient form (for
example, @code{(eq @i{obj} nil)} is transformed into @code{(null @i{obj})},
which can be compiled better).  An optimizer can also be used to
tell the compiler how to compile a special form.  For example,
in the interpreter @code{do} is a special form, implemented by a function
which takes quoted arguments and calls @code{eval}.  In the compiler,
@code{do} is expanded in a macro-like way by an optimizer into
equivalent Lisp code using @code{prog}, @code{cond}, and @code{go}, which
the compiler understands.

The compiler finds the optimizers to apply to a form by looking for
the @code{compiler:optimizers} property of the symbol that is the
car of the form.  The value of this property should be a list of
optimizers, each of which must be a function of one argument.  The
compiler tries each optimizer in turn, passing the form to be
optimized as the argument.  An optimizer that returns the original
form unchanged (@code{eq} to the argument) has ``done nothing'', and
the next optimizer is tried.  If the optimizer returns anything else,
it has ``done something'', and the whole process starts over again.

Optimizers should not be used to define new language features, because
they only take effect in the compiler; the interpreter (that is, the
evaluator) doesn't know about optimizers.  So an optimizer should not
change the effect of a form; it should produce another form that does
the same thing, possibly faster or with less memory or something.  That
is why they are called optimizers.  In principle, the code ought to
compile just as correctly if the optimizer is eliminated.

@defmac compiler:add-optimizer function optimizer optimized-into...
Puts @i{optimizer} on @i{function}'s optimizers list if it isn't there already.
@i{optimizer} is the name of an optimization function, and @i{function}
is the name of the function calls which are to be processed.  Neither
is evaluated.

@code{(compiler:add-optimizer @i{function} @i{optimizer} @i{optimize-into-1}
@i{optimize-into-2...})} also remembers @i{optimize-into-1}, etc., as
names of functions which may be called in place of @i{function} as a
result of the optimization.  Then @code{who-calls} of @i{function} will
also mention callers of @i{optimize-into-1}, etc.
@end defmac

@defmac compiler:defoptimizer function optimizer-name (optimizes-into...) lambda-list body...
Defines an optimizer and installs it.  Equivalent to
@lisp
(progn
  (defun @i{optimizer-name} @i{lambda-list}
    @i{body}...)
  (compiler:add-optimizer @i{function} @i{optimizer-name}
			  @i{optimizes-into}...))
@end lisp
@end defmac

@defmac compiler:defcompiler-synonym function for-function
Makes @i{function} a synonym for @i{for-function} in code being compiled.
Example:
@lisp
(compiler:defcompiler-synonym plus +)
@end lisp
is how the compiler is told how to compile @code{plus}.
@end defmac

@section  Maclisp Compatibility

Certain programs are intended to be run both in Maclisp and in
Zetalisp.  Their source files need some special conventions.  For
example, all @code{special} declarations must be enclosed in @code{declare}'s,
so that the Maclisp compiler will see them.  The main issue is that many
functions and special forms of Zetalisp do not exist in
Maclisp.  It is suggested that you turn on @code{run-in-maclisp-switch} in
such files, which will warn you about a lot of problems that your program
may have if you try to run it in Maclisp.

The macro-character combination @code{#+lispm} causes the object that
follows it to be visible only when compiling for Zetalisp.  The
combination @code{#+maclisp} causes the following object to be visible only
when compiling for Maclisp.  These work both on subexpressions of the
objects in the file and at top level in the file.  To conditionalize
top-level objects, however, it is better to put the macros
@code{if-for-lispm} and @code{if-for-maclisp} around them.  The
@code{if-for-lispm} macro turns off @code{run-in-maclisp-switch} within its
object, preventing spurious warnings from the compiler.  The @code{#+lispm}
reader construct does not dare do this, since it can be used to conditionalize
any object, not just a expression that will be evaluated.

To allow a file to detect what environment it is being compiled in,
the following macros are provided:

@defmac if-for-lispm form
If @code{(if-for-lispm @i{form})} is seen at the top level of
the compiler, @i{form} is passed to the compiler top level if
the output of the compiler is a QFASL file intended for Zetalisp.
If the Zetalisp interpreter sees this it evaluates @i{form}
(the macro expands into @i{form}).
@end defmac

@defmac if-for-maclisp form
If @code{(if-for-maclisp @i{form})} is seen at the top level of
the compiler, @i{form} is passed to the compiler top level if
the output of the compiler is a FASL file intended for Maclisp
(e.g. if the compiler is COMPLR).
If the Zetalisp interpreter ignores this form entirely
(the macro expands into @code{nil}).
@end defmac

@defmac if-for-maclisp-else-lispm maclisp-form lispm-form
If @code{(if-for-maclisp-else-lispm @i{form1} @i{form2})} is seen at the top level of
the compiler, @i{form1} is passed to the compiler top level if
the output of the compiler is a FASL file intended for Maclisp;
otherwise @i{form2} is passed to the compiler top level.
@end defmac

@defmac if-in-lispm form
In Zetalisp, @code{(if-in-lispm @i{form})} causes @i{form}
to be evaluated; in Maclisp, @i{form} is ignored.
@end defmac

@defmac if-in-maclisp form
In Maclisp, @code{(if-in-maclisp @i{form})} causes @i{form}
to be evaluated; in Zetalisp, @i{form} is ignored.
@end defmac

	In order to make sure that those macros are
defined when reading the file into the Maclisp compiler, you must
make the file start with a prelude, which should look like:
@lisp
(eval-when (compile)
  (cond ((not (status feature lispm))
               (load '|PS:<L.SYS2>CONDIT.LISP|))))
		;; Or other suitable filename
@end lisp
This does nothing when you compile the program on the Lisp Machine.
If you compile it with the Maclisp compiler, it loads in definitions
of the above macros, so that they will be available to your
program.  The form @code{(status feature lispm)} is generally useful in
other ways; it evaluates to @code{t} when evaluated on the Lisp Machine and
to @code{nil} when evaluated in Maclisp.

There are some advertised variables whose compile-time values affect the
operation of the compiler.  Mostly these are for Maclisp compatibility
features.  You can set these variables by including in his file
forms such as
@lisp
(eval-when (compile) (setq open-code-map-switch t))
@end lisp
However, these variables seem not to be needed very often.

@defvar run-in-maclisp-switch
If this variable is non-@code{nil}, the compiler tries to warn the
user about any constructs that will not work in Maclisp.  By no means
all Lisp Machine system functions not built in to Maclisp
cause warnings;  only those that could not be written by the user
in Maclisp (for example, @code{make-array}, @code{value-cell-location}, etc.).
Also, lambda-list keywords such as
@code{&optional} and initialized @code{prog} variables are be
mentioned.  This switch also inhibits the warnings for obsolete Maclisp functions.
The default value of this variable is @code{nil}.
@end defvar

@defvar obsolete-function-warning-switch
If this variable is non-@code{nil}, the compiler tries to warn
the user whenever an obsolete Maclisp-compatibility function such as
@code{maknam} or @code{samepnamep} is used.  The default value is @code{t}.
@end defvar

@defvar allow-variables-in-function-position-switch
If this variable is non-@code{nil}, the compiler allows the use of
the name of a variable in function position to mean that the
variable's value should be @code{funcall}'ed.  This is for compatibility
with old Maclisp programs.  The default value of this variable is
@code{nil}.
@end defvar

@defvar open-code-map-switch
If this variable is non-@code{nil}, the compiler attempts
to produce inline code for the mapping functions (@code{mapc}, @code{mapcar}, etc.,
but not @code{mapatoms}) if the function being mapped is an anonymous
lambda-expression.
The generated code is faster but larger.  The default value is @code{t}.

If you want to turn off open coding of these functions,
It is preferable to use @code{(declare (notinline mapc mapcar ...))}.
@end defvar

@defvar inhibit-style-warnings-switch
If this variable is non-@code{nil}, all compiler style-checking is
turned off.  Style checking is used to issue obsolete function
warnings, won't-run-in-Maclisp warnings, and other sorts of
warnings.  The default value is @code{nil}.  See also the
@code{inhibit-style-warnings} macro, which acts on one level only of an
expression.
@end defvar

@defmac compiler-let ((variable value)...) body...
Allows local rebinding
of global switches that affect either compilation or the behavior
of user-written macros.  Its syntax is like that of @code{let}, and
in the interpreter it is identical to @code{let}.
When encountered in compiled code, the variables are bound
around the compilation of @i{body} rather than around
the execution at a later time of the compiled code for @i{body}.
For example,
@lisp
@exdent Example:
(compiler-let ((open-code-map-switch nil))
  (mapc (function (lambda (x) ...)) foo))
@end lisp
prevents the compiler from open-coding the @code{mapc}.

The same results can be obtained more cleanly using @code{declare}.
User-written macros can examine the declarations using @code{getdecl}.
@end defmac

@noindent
The next three functions are primarily for Maclisp compatibility.  In
Maclisp, they are declarations, used within a @code{declare} at top level
in the file.

@defspec *expr symbol...
Declares each @i{symbol}
to be the name of a function.  In addition it prevents these functions from appearing
in the list of functions referenced but not defined, printed at the end of the compilation.
@end defspec

@defspec *lexpr symbol...
Declares each @i{symbol}
to be the name of a function.  In addition it prevents these functions from appearing
in the list of functions referenced but not defined, printed at the end of the compilation.
@end defspec

@defspec *fexpr symbol...
Declares each @i{symbol}
to be the name of a special form.  In addition it prevents these names from appearing
in the list of functions referenced but not defined, printed at the end of the compilation.
@end defspec

@section  Putting Data in QFASL Files
@cindex fasdump

It is possible to make a QFASL file containing data, rather than a
compiled program.  This can be useful to speed up loading of a data
structure into the machine, as compared with reading in printed
representations.  Also, certain data structures such as arrays do not
have a convenient printed representation as text, but can be saved in
QFASL files.  For example, the system stores fonts this way.  Each
font is in a QFASL file (on the @code{SYS: FONTS;} directory) that
contains the data structures for that font.  When the file is loaded,
the symbol that is the name of the font gets set to the array that
represents the font.  Putting data into a QFASL file is often
referred to as ``@i{fasdumping} the data''.

In compiled programs, the constants are saved in the QFASL file in this way.
The compiler optimizes by making constants that are @code{equal} become @code{eq}
when the file is loaded.  This does not happen when you make a data file yourself;
identity of objects is preserved.  Note that when a QFASL file is loaded,
objects that were @code{eq} when the file was written are still @code{eq}; this does not
normally happen with text files.

The following types of objects can be represented in QFASL files:
Symbols (uninterned or uninterned), numbers of all kinds, lists,
strings, arrays of all kinds, named structures, instances, and FEFs.

.defmetamethod instances :fasd-form
When an instance is fasdumped (put into a QFASL file), it is sent a @code{:fasd-form}
message, which must return a Lisp form that, when evaluated, will recreate the
equivalent of that instance.  This is because instances are often part of a large
data structure, and simply fasdumping all of the instance variables and making
a new instance with those same values is unlikely to work.  Instances remain
@code{eq}; the @code{:fasd-form} message is only sent the first time a particular instance
is encountered during writing of a QFASL file.  If the instance does
not accept the @code{:fasd-form} message, it cannot be fasdumped.
.end_defmetamethod

Loading a QFASL file in which a named structure has been fasdumped
creates a new named structure with components identical to those of the
one that was dumped.  Then the @code{:fasd-fixup} operation is invoked,
which gives the new structure the opportunity to correct its contents if
they are not supposed to be just the same as what was dumped.

The meaning of a QFASL file is greatly affected by the package used
for loading it.  Therefore, the file itself says which package to use.

In @code{dump-forms-to-file}, you can specify the package to use by
including a @code{:package} attribute in the @i{attribute-list} argument.
For example, if that argument is the list @code{(:package "SI")} then the
file is dumped and loaded in the @code{si} package.  If the package is not
specified in this way, @code{user} is used.  The other fasdumping functions
always use @code{user}.

@defun dump-forms-to-file filename forms-list &optional attribute-list
Writes a QFASL file named @i{filename} which contains, in effect, the
forms in @i{forms-list}.  That is to say, when the file is loaded, its
effect will be the same as evaluating those forms.
@lisp
@exdent Example:
(dump-forms-to-file "foo" '((setq x 1) (setq y 2)))
(load "foo")
x => 1
y => 2
@end lisp

@i{attribute-list} is the file attribute list to store in the QFASL
file.  It is a list of
alternating keywords and values, and corresponds to the @code{-*-} line of a source file.
The most useful keyword in this context is @code{:package}, whose value in the
attribute list specifies the package to be used both in dumping the forms and in
loading the file.  If no @code{:package} keyword is present, the file will be loaded in
whatever package is current at the time.
@end defun

@defun compiler:fasd-symbol-value filename symbol
Writes a QFASL file named @i{filename} which contains the value of @i{symbol}.
When the file is loaded, @i{symbol} will be @code{setq}'ed to the same value.
@i{filename} is parsed and defaulted with the default pathname defaults.
The file type defaults to @code{:qfasl}.
@end defun

@defun compiler:fasd-font name
Writes the font named @i{name} into a QFASL file with the appropriate name
(on the @code{SYS: FONTS;} directory).
@end defun

@defun compiler:fasd-file-symbols-properties filename symbols properties dump-values-p dump-functions-p new-symbol-function
This is a way to dump a complex data structure into a QFASL file.  The values,
the function definitions, and some of the properties of certain symbols are put into
the QFASL file in such a way that when the file is loaded the symbols will
be @code{setq}ed, @code{fdefine}d, and @code{putprop}ped appropriately.  The user can
control what happens to symbols discovered in the data structures being fasdumped.

@i{filename} is the name of the file to be written.  It is defaulted
with the default pathname defaults.  The file type
defaults to @code{"QFASL"}.

@i{symbols} is a list of symbols to be processed.  @i{properties} is a list
of properties which are to be fasdumped if they are found on the symbols.
@i{dump-values-p} and @i{dump-functions-p} control whether the values and
function definitions are also dumped.

@i{new-symbol-function} is called whenever a new symbol is found in the
structure being dumped.  It can do nothing, or it can add the symbol to the
list to be processed by calling @code{compiler:fasd-symbol-push}.  The value
returned by @i{new-symbol-function} is ignored.
@end defun

@section  Analyzing QFASL Files

QFASL files are composed of 16-bit nibbles.  The first two nibbles in
the file contain fixed values, which are there so the system can tell a
proper QFASL file.  The next nibble is the beginning of the first
@i{group}.  A group starts with a nibble that specifies an operation.
It may be followed by other nibbles that are arguments.

Most of the groups in a QFASL file are there to construct objects when
the file is loaded.  These objects are recorded in the @i{fasl-table}.
Each time an object is constructed, it is assigned the next sequential
index in the fasl-table.  The indices are used by other groups later in
the file, to refer back to objects already constructed.

To prevent the fasl-table from becoming too large, the QFASL file
can be divided into @i{whacks}.  The fasl-table is cleared out at the
beginning of each whack.

The other groups in the QFASL file perform operations such as
evaluating a list previously constructed or storing an object into a
symbol's function cell or value cell.

If you are having trouble with a QFASL file and want to find out exactly
what it does when it is loaded, you can use UNFASL to find out.

@defun si:unfasl-print input-file-name
Prints on @code{*standard-output*} a description of the contents of the QFASL
file @i{input-file-name}.
@end defun

@defun si:unfasl-file input-file-name &optional output-file-name
Writes a description of the contents of the QFASL file
@i{input-file-name} into the output file.  The output file type defaults
to @code{:unfasl} and the rest of the pathname defaults from
@i{input-file-name}.
@end defun

@c Note: there are still some sections to be written; see end of the file.

@chapter Macros
@cindex macros
@c Macros!!!!!!!

@section  Introduction to Macros

If @code{eval} is handed a list whose car is a symbol, then @code{eval}
inspects the definition of the symbol to find out what to do.  If the
definition is a cons, and the car of the cons is the symbol
@code{macro}, then the definition (i.e. that cons) is called a @i{macro}.
The cdr of the cons should be a function of two arguments.
@code{eval} applies the function to the form it was originally given,
takes whatever is returned, and evaluates that in lieu of the
original form.

	Here is a simple example.  Suppose the definition of the symbol @code{first} is
@lisp
(macro lambda (x ignore) 
         (list 'car (cadr x)))
@end lisp
This thing is a macro: it is a cons whose car is the symbol
@code{macro}.  What happens if we try to evaluate a form @code{(first '(a b
c))}?  Well, @code{eval} sees that it has a list whose car is a symbol
(namely, @code{first}), so it looks at the definition of the symbol and
sees that it is a cons whose car is @code{macro}; the definition is
a macro.

@code{eval} takes the cdr of the cons, which is supposed to be the macro's
@i{expander function}, and calls it providing as arguments the original
form that @code{eval} was handed, and an environment data structure that
this macro does not use.  So it calls @code{(lambda (x ignore) (list 'car
(cadr x)))} and the first argument is @code{(first '(a b c))}.  Whatever
this returns is the @i{expansion} of the macro call.  It will be
evaluated in place of the original form.

In this case, @code{x} is bound to @code{(first '(a b c))}, @code{(cadr x)}
evaluates to @code{'(a b c)}, and @code{(list 'car (cadr x))} evaluates to
@code{(car '(a b c))}, which is the expansion.  @code{eval} now evaluates the
expansion.  @code{(car '(a b c))} returns @code{a}, and so the result is that
@code{(first '(a b c))} returns @code{a}.

	What have we done?  We have defined a macro called @code{first}.  What
the macro does is to @i{translate} the form to some other form.  Our
translation is very simple--it just translates forms that look like
@code{(first @i{x})} into @code{(car @i{x})}, for any form @i{x}.
We can do much more
interesting things with macros, but first we show how
to define a macro.

@defspec macro
The primitive special form for defining macros is @code{macro}.
A macro definition looks like this:
@lisp
(macro @i{name} (@i{form-arg} @i{env-arg})
    @i{body})
@end lisp
@i{name} can be any function spec.  @i{form-arg} and @i{env-arg} must be
variables.  @i{body} is a sequence of Lisp forms that expand the macro;
the last form should return the expansion.
@end defspec

To define our @code{first} macro, we would say
@lisp
(macro first (x ignore)
    (list 'car (cadr x)))
@end lisp
Only sophisticated macros need to use value passed for the @i{env-arg};
this one does not need it, so the argument variable @code{ignore} is used for it.
See (&environment) for information on it.

Here are some more simple examples of macros.  Suppose we want
any form that looks like @code{(addone @i{x})} to be translated into
@code{(plus 1 @i{x})}.  To define a macro to do this we would say
@lisp
(macro addone (x ignore)
   (list 'plus '1 (cadr x)))
@end lisp

	Now say we wanted a macro which would translate @code{(increment @i{x})}
into @code{(setq @i{x} (1+ @i{x})}.  This would be:
@lisp
(macro increment (x ignore)
    (list 'setq (cadr x) (list '1+ (cadr x))))
@end lisp
Of course, this macro is of limited usefulness.  The reason is that the
form in the cadr of the @code{increment} form had better be a symbol.
If you tried @code{(increment (car x))}, it would be translated into
@code{(setq (car x) (1+ (car x)))}, and @code{setq} would complain.
(If you're interested in how to fix this problem, see @code{setf} ((setf-fun));
but this is irrelevant to how macros work.)

	You can see from this discussion that macros are very different
from functions.  A function would not be able to tell what kind of
subforms are present in a call to it; they get evaluated before the
function ever sees them.  However, a macro gets to look at the whole
form and see just what is going on there.  Macros are @i{not} functions;
if @code{first} is defined as a macro, it is not meaningful to apply
@code{first} to arguments.  A macro does not take arguments at all; its
expander function takes a @i{Lisp form} and turns it into another @i{Lisp
form}.

	The purpose of functions is to @i{compute}; the purpose of
macros is to @i{translate}.  Macros are used for a variety of purposes, the
most common being extensions to the Lisp language.  For example, Lisp
is powerful enough to express many different control structures, but it
does not provide every control structure anyone might ever possibly
want.  Instead, if a user wants some kind of control structure with a
syntax that is not provided, he can  translate it into some form that
Lisp @i{does} know about.

	For example, someone might want a limited iteration construct
which increments a variable by one until it exceeds a limit (like the
FOR statement of the BASIC language).  He might want it to look like
@lisp
(for a 1 100 (print a) (print (* a a)))
@end lisp
To get this, he could write a macro to translate it into
@lisp
(do ((a 1 (1+ a))) ((> a 100)) (print a) (print (* a a)))
@end lisp
A macro to do this could be defined with
@lisp
(macro for (x ignore)
  (list* 'do
	 (list (list (second x) (third x)
		     (list '1+ (second x))))
	 (list (list '> (second x) (fourth x)))
	 (cddddr x)))
@end lisp
@code{for} can now be used as if it were a built-in Lisp control construct.

@section  Aids for Defining Macros

	The main problem with the definition for the @code{for} macro is
that it is verbose and clumsy.  If it is that hard to write a macro
to do a simple specialized iteration construct, one would wonder how
anyone could write macros of any real sophistication.

	There are two things that make the definition so inelegant.
One is that the programmer must write things like @code{(second x)}
and @code{(cddddr x)} to refer to the parts of the form he wants
to do things with.  The other problem is that the long chains of calls
to the @code{list} and @code{cons} functions are very hard to read.

	Two features are provided to solve these two problems.
The @code{defmacro} macro solves the former, and the ``backquote'' (@code{`})
reader macro solves the latter.

@subsection Defmacro
@cindex macro-defining macros
@cindex defmacro

	Instead of referring to the parts of our form by @code{(second x)}
and such, we would like to give names to the various pieces of the form,
and somehow have the @code{(second x)} automatically generated.  This is done
by a macro called @code{defmacro}.  It is easiest to explain what @code{defmacro} does
by showing an example.  Here is how you would write the @code{for} macro
using @code{defmacro}:

@lisp
(defmacro for (var lower upper . body)
  (list* 'do
	 (list (list var lower (list '1+ var)))
	 (list (list '> var upper))
	 body))
@end lisp

	The @code{(var lower upper . body)} is a @i{pattern} to match against
the body of the form (to be more precise, to match against the cdr
of the argument to the macro's expander function).  If @code{defmacro} tries to match the two
lists
@lisp
(var lower upper . body)
@exdent 1and*
(a 1 100 (print a) (print (* a a)))
@end lisp
@code{var} is bound to the symbol @code{a}, @code{lower} to the fixnum @code{1},
@code{upper} to the fixnum @code{100}, and @code{body} to the list
@code{((print a) (print (* a a)))}.
@code{var, lower, upper,} and @code{body} are then used by the body
of the macro definition.

@defmac defmacro
@code{defmacro} is a general purpose macro-defining macro.  A @code{defmacro}
form looks like 
@lisp
(defmacro @i{name} @i{pattern} . @i{body})
@end lisp
@i{name} is the name of the macro
to be defined; it can be any function spec (see (function-spec)).
Normally it is not useful to define anything but a symbol,
since that is the only place that the evaluator looks for macro
definitions.  However, sometimes it is useful to define a @code{:property}
function spec as a macro, when some part of the system (such as @code{locf})
will look for an expander function on a property.

The @i{pattern} may be anything made up out of symbols and conses.
When the macro is called, @i{pattern}
is matched against the body of the macro form; both @i{pattern}
and the form are car'ed and cdr'ed identically, and whenever
a non-@code{nil} symbol is hit in @i{pattern}, the symbol is bound to the corresponding
part of the form.  All of the symbols in @i{pattern} can be used
as variables within @i{body}.
@i{body} is evaluated with these bindings in effect,
and its result is returned to the evaluator as the expansion of the macro.
@end defmac

	Note that the pattern need not be a list the way a lambda-list must.
In the above example, the pattern was a dotted list, since the symbol
@code{body} was supposed to match the cddddr of the macro form.
If we wanted a new iteration form, like @code{for} except that
our example would look like
@lisp
(for a (1 100) (print a) (print (* a a)))
@end lisp
(just because we thought that was a nicer syntax), then we could
do it merely by modifying the pattern of the @code{defmacro} above;
the new pattern would be @code{(var (lower upper) . body)}.

	Here is how we would write our other examples using @code{defmacro}:

@lisp
(defmacro first (the-list)
    (list 'car the-list))

(defmacro addone (form)
   (list 'plus '1 form))

(defmacro increment (symbol)
   (list 'setq symbol (list '1+ symbol)))
@end lisp

All of these were very simple macros and have very simple patterns,
but these examples show that we can replace the @code{(cadr x)} with a
readable mnemonic name such as @code{the-list} or @code{symbol}, which
makes the program clearer, and enables documentation facilities such
as the @code{arglist} function to describe the syntax of the special form
defined by the macro.

The pattern in a @code{defmacro} is more like the lambda list
of a normal function than revealed above.  It is allowed to
contain certain @code{&}-keywords.  Subpatterns of the lambda list pattern
can also use @code{&}-keywords, a usage not allowed in functions.

@code{&optional} is followed by @i{variable}, @code{(@i{variable})},
@code{(@i{variable} @i{default})}, or @code{(@i{variable} @i{default}
@i{present-p})}, exactly the same as in a function.  Note that
@i{default} is still a form to be evaluated, even though @i{variable}
is not being bound to the value of a form.  @i{variable} does not have
to be a symbol; it can be a pattern.  In this case the first form is
disallowed because it is syntactically ambigous.  The pattern must at least be
enclosed in a singleton list.  If @i{variable} is a pattern, @i{default}
can be evaluated more than once.  Example:
@lisp
(defmacro foo (&optional ((x &optional y) '(a)))
  ...)
@end lisp
Here the first argument of @code{foo} is optional, and should
be a list of one or two elements which become @code{x} and @code{y}.
If @code{foo} is given no arguments, the list @code{(a)} is decomposed
to get @code{x} and @code{y}, so that @code{x}'s value is @code{a} and
@code{y}'s value is @code{nil}.

Using @code{&rest} is the same as using a dotted list as the pattern,
except that it may be easier to read and leaves a place to put @code{&aux}.

When @code{&key} is used in a defmacro pattern, the keywords are decoded
at macro expansion time.  Therefore, they must be constants.  Example:

@lisp
(defmacro l1 (&key a b c) 
  (list 'list a b c))

(l1 :b 5 :c (car d))
  ==> (list nil 5 (car d))
@end lisp

@code{&aux} is the same in a macro as in a function, and has nothing to do
with pattern matching.

@code{defmacro} implements a few additional keywords not allowed in functions.

@code{&body} is identical to @code{&rest} except that it informs the editor and the grinder
that the remaining subforms constitute a ``body'' rather than ordinary arguments
and should be indented accordingly.  Example:
@lisp
(defmacro with-open-file 
	  ((streamvar filename &rest options)
	   &body body)
  ...)
@end lisp

@code{&whole} causes the variable that follows it to be bound to the entire
macro call, just as the @i{form-arg} variable in @code{macro} would be.
@code{&whole} exists to make @code{defmacro} able to do anything that @code{macro}
can be used for, for the sake of Common Lisp, in which @code{defmacro}
is the primitive and @code{macro} does not exist.  @code{&whole} is
also useful in @code{macrolet}.

@code{&environment} causes the variable that follows it to be bound to
the @i{local macros environment} of the macro call being expanded.
This is useful if the code for expanding this macro needs to
invoke @code{macroexpand} on subforms of the macro call.  Then, to
achieve correct interaction with @code{macrolet}, this local macros
environment should be passed to @code{macroexpand} as its second argument.

@code{&list-of} @i{pattern} requires that the corresponding position of the
form being translated must contain a list (or @code{nil}).  It
matches @i{pattern} against each element of that list.  Each variable
in @i{pattern} is bound to a list of the corresponding values in each element
of the list matched by the @code{&list-of}.  This may be clarified by an
example.  Suppose we want to be able to say things like:

@lisp
(send-commands (aref turtle-table i)
  (forward 100)
  (beep)
  (left 90)
  (pen 'down 'red)
  (forward 50)
  (pen 'up))
@end lisp

We could define a @code{send-commands} macro as follows:

@lisp
(defmacro send-commands (object
		&body &list-of (command . arguments))
  `(let ((o ,object))
     . ,(mapcar #'(lambda (com args) `(send o ',com . ,args))
		command arguments)))
@end lisp

@noindent
Note that this example uses @code{&body} together with @code{&list-of}, so you
don't see the list itself; the list is just the rest of the macro-form.

You can combine @code{&optional} and @code{&list-of}.  Consider the following example:

@lisp
(defmacro print-let (x &optional &list-of
		     ((vars vals)
		      '((*print-base* 10.)
			(*print-radix* nil))))
  `((lambda (,@@vars) (print ,x))
    ,@@vals))

(print-let foo)  ==>
((lambda (*print-base* *print-radix*)
   (print foo))
 10 nil)

(print-let foo ((bar 3)))  ==>
((lambda (bar)
   (print foo))
 3)
@end lisp

@noindent
In this example we aren't using @code{&body} or anything like it, so you do see
the list itself; that is why you see parentheses around the @code{(bar 3)}.

@subsection Backquote
@cindex backquote

	Now we deal with the other problem: the long strings of calls to
@code{cons} and @code{list}.  This problem is relieved by introducing some new
characters that are special to the Lisp reader.  Just as the
single-quote character makes it easier to type things of the form
@code{(quote @i{x})}, so backquote and comma make it easier to type forms
that create new list structure.  They allow you to create a list from a
template including constant and variable parts.

	The backquote facility is used by giving a backquote character
(@code{`}), followed by a list or vector.  If the comma character does not
appear within the text for the list or vector, the backquote acts just
like a single quote: it creates a form which, when evaluated, produces
the list or vector specified.  For example,
@lisp
 '(a b c) => (a b c)
 `(a b c) => (a b c)
 `#(a b) => #(a b)
@end lisp
So in the simple cases, backquote is just like the regular single-quote
macro.  The way to get it to do interesting things is to include a
comma somewhere inside of the form following the backquote.
The comma is followed by a form, and that form gets evaluated even
though it is inside the backquote.  For example,
@lisp
(setq b 1)
`(a b c)  => (a b c)
`(a ,b c) => (a 1 c)
`(abc ,(+ b 4) ,(- b 1) (def ,b)) => (abc 5 0 (def 1))
`#(a ,b) => #(a 1)
@end lisp
In other words, backquote quotes everything @i{except} expressions preceded by
a comma; those get evaluated.

	The list or vector following a backquote can be thought of as a template for
some new data structure.  The parts of it that are preceded by
commas are forms that fill in slots in the template; everything else is
just constant structure that appears as written in the result.  This is usually
what you want in the body of a macro.  Some of the form generated by the macro
is constant, the same thing on every invocation of the macro.  Other parts
are different every time the macro is called, often being functions of
the form that the macro appeared in (the @i{arguments} of the macro).  The
latter parts are the ones for which you would use the comma.  Several examples
of this sort of use follow.

	When the reader sees the @code{`(a ,b c)} it is actually generating
a form such as @code{(list 'a b 'c)}.  The actual form generated may use
@code{list}, @code{cons}, @code{append}, or whatever might be a good idea; you
should never have to concern yourself with what it actually turns into.
All you need to care about is what it evaluates to.  Actually, it
doesn't use the regular functions @code{cons}, @code{list}, and so forth, but
uses special ones instead so that the grinder can recognize a form which
was created with the backquote syntax, and print it using backquote so
that it looks like what you typed in.  You should never write any
program that depends on this, anyway, because backquote makes no
guarantees about how it does what it does.  In particular, in some
circumstances it may decide to create constant forms, which will cause
sharing of list structure at run time, or it may decide to create forms
that will create new list structure at run time.
For example, if the reader sees @code{`(r . ,nil)},
it may produce the same thing as @code{(cons 'r nil)}, or @code{'(r . nil)}.
Be careful that your program does not depend on which of these it does.

	This is generally found to be pretty confusing by most people; the best way
to explain further seems to be with examples.  Here is how we would write our
three simple macros using both the @code{defmacro} and backquote facilities.

@lisp
(defmacro first (the-list)
    `(car ,the-list))

(defmacro addone (form)
   `(plus 1 ,form))

(defmacro increment (symbol)
   `(setq ,symbol (1+ ,symbol)))
@end lisp

To demonstrate finally how easy it is to define macros with these two facilities,
here is the final form of the @code{for} macro.
@lisp
(defmacro for (var lower upper . body)
  `(do ((,var ,lower (1+ ,var))) ((> ,var ,upper)) . ,body))
@end lisp
Look at how much simpler that is than the original definition.  Also,
look how closely it resembles the code it is producing.  The functionality
of the @code{for} really stands right out when written this way.

	If a comma inside a backquote form is followed by an at-sign
character (`@code{@@}'), it has a special meaning.  The `@code{,@@}' should
be followed by a form whose value is a list; then each of the elements
of the list is put into the list being created by the backquote.  In other
words, instead of generating a call to the @code{cons} function, backquote
generates a call to @code{append}.  For example, if @code{a} is bound to
@code{(x y z)}, then @code{`(1 ,a 2)} would evaluate to @code{(1 (x y z) 2)},
but @code{`(1 ,@@a 2)} would evaluate to @code{(1 x y z 2)}.

	Here is an example of a macro definition that uses the `@code{,@@}'
construction.  One way to define @code{do-forever} would be for it to expand
@lisp
(do-forever @i{form1} @i{form2} @i{form3})
@end lisp
into
@lisp
(tagbody
    a @i{form1}
      @i{form2}
      @i{form3}
      (go a))
@end lisp
	You could define the macro by
@lisp
(defmacro do-forever (&body body)
  `(tagbody
       a ,@@body
	 (go a)))
@end lisp
(This definition has the disadvantage of interfering with use of the
@code{go} tag @code{a} to go from the body of the @code{do-forever} to a tag
defined outside of it.  A more robust implementation would construct a
new tag each time, using @code{gensym}.)

A similar construct is `@code{,.}' (comma, dot).  This means the same thing
as `@code{,@@}' except that the list which is the value of the following form
may be modified destructively; backquote uses @code{nconc} rather than @code{append}.
This should, of course, be used with caution.

Backquote does not make any guarantees about what parts of the structure it
shares and what parts it copies.  You should not do destructive operations
such as @code{nconc} on the results of backquote forms such as
@lisp
`(,a b c d)
@end lisp
since backquote might choose to implement this as
@lisp
(cons a '(b c d))
@end lisp
and @code{nconc} would smash the constant.  On the other hand, it would be
safe to @code{nconc} the result of
@lisp
`(a b ,c ,d)
@end lisp
since any possible expansion of this would make a new list.
One possible expansion is
@lisp
(list 'a 'b c d)
@end lisp

Backquote of course guarantees not to do any destructive operations
(@code{rplaca}, @code{rplacd}, @code{nconc}) on the components of the
structure it builds, unless the `@code{,.}' syntax is used.

	Advanced macro writers sometimes write macro-defining macros:
forms which expand into forms which, when evaluated, define macros.  In
such macros it is often useful to use nested backquote constructs.  For
example, here is a very simple version of @code{defstruct} (see
(defstruct-fun)) which does not allow any options and only the simplest
slot descriptors.  Its invocation looks like:
@lisp
(defstruct (@i{name})
     @i{item1} @i{item2} ...)
@end lisp
We would like this form to expand into
@lisp
(progn
 (defmacro @i{item1} (x) `(aref ,x 0))
 (defmacro @i{item2} (x) `(aref ,x 1))
 (defmacro @i{item3} (x) `(aref ,x 2))
 (defmacro @i{item4} (x) `(aref ,x 3))
 ...)
@end lisp

Here is the macro to perform the expansion:
@lisp
(defmacro defstruct ((name) . items)
     (do ((item-list items (cdr item-list))
	  (ans nil)
	  (i 0 (1+ i)))
	 ((null item-list)
          `(progn . ,(nreverse ans)))
       (push `(defmacro ,(car item-list) (x)
			`(aref ,x ,',i))
	     ans)))
@end lisp
	The interesting part of this definition is the body of
the (inner) @code{defmacro} form:
@lisp
`(aref ,x ,',i)
@end lisp
Instead of using this backquote construction, we could have written
@lisp
(list 'aref x ,i)
@end lisp
That is, the @code{,',}
acts like a comma that matches the outer backquote, while
the comma preceding the @code{x} matches with the inner
backquote.  Thus, the symbol @code{i} is evaluated when the
@code{defstruct} form is expanded, whereas the symbol @code{x} is
evaluated when the accessor macros are expanded.

	Backquote can be useful in situations other than the writing
of macros.  Whenever there is a piece of list structure to be consed
up, most of which is constant, the use of backquote can make the
program considerably clearer.

@section  Local Macro Definitions

@code{defmacro} or @code{macro} defines a macro whose name has global scope;
it can be used in any function anywhere (subject to separation of
name spaces by packages).  You can also make local macro definitions
which are in effect only in one piece of code.  This is done with
@code{macrolet}.  Like lexical variable bindings made by @code{let} or the
local function definitions made by @code{flet}, @code{macrolet} macro
definitions are in effect only for code contained lexically within
the body of the @code{macrolet} construct.

@defspec macrolet (local-macros...) body...
Executes @i{body} and returns the values of the last form in it,
with local macro definitions in effect according to @i{local-macros}.

Each element of @i{local-macros} looks like the cdr of a @code{defmacro} form:
@lisp
(@i{name} @i{lambda-list} @i{macro-body}...)
@end lisp
and it is interpreted just the same way.  However, @i{name} is only
thus defined for expressions appearing within @i{body}.

@lisp
(macrolet ((ifnot (x y . z) `(if (not ,x) ,y . ,z)))
  (ifnot foo (print bar) (print t)))

 ==> (if (not foo) (print bar) (print t))
@end lisp

It is permissible for @i{name} to have a global definition also, as a macro
or as a function.  The global definition is shadowed within @i{body}.
@lisp
(macrolet ((car (x) `(cdr (assq ,x '((a . ferrari)
				     (b . ford))))))
  ...(print (car symbol))...)
@end lisp
makes @code{car} have an unusual meaning for its explicit use,
but due to lexical scoping it has no effect on what happens if @code{print}
calls @code{car}.

@code{macrolet} can also hide other local definitions made by @code{macrolet},
@code{flet} or @code{labels} ((labels-fun)).
@end defspec

@section  Substitutable Functions
@cindex subst
@cindex substitutable function

A substitutable function is a function that is open coded by the
compiler.  It is like any other function when applied, but it can be
expanded instead, and in that regard resembles a macro.

@defspec defsubst
@code{defsubst} is used for defining substitutable functions.  It is used just
like @code{defun}.
@lisp
(defsubst @i{name} @i{lambda-list} . @i{body})
@end lisp
and does almost the same thing.  It defines a function that executes
identically to the one that a similar call to @code{defun} would define.  The
difference comes when a function that @i{calls} this one is compiled.  Then,
the call is open-coded by substituting the substitutable function's
definition into the code being compiled.  The function itself
looks like @code{(named-subst @i{name} @i{lambda-list} . @i{body})}.  Such a function
is called a subst.  For example, if
we define
@lisp
(defsubst square (x) (* x x))
(defun foo (a b) (square (+ a b)))
@end lisp
then if @code{foo} is used interpreted, @code{square} works just as if it had
been defined by @code{defun}.  If @code{foo} is compiled, however, the squaring
is substituted into it and it produces the same code as
@lisp
(defun foo (a b) (let ((tem (+ a b))) (* tem tem)))
@end lisp
@code{square}'s definition would be
@lisp
(named-subst square (x) (* x x))
@end lisp
(The internal formats of substs are explained in (subst).)

A similar @code{square} could be defined as a macro, but the simple way
@lisp
(defmacro square (x) `(* ,x ,x))
@end lisp
has a bug: it causes the argument to be computed twice.
The simplest correct definition as a macro is
@lisp
(defmacro square (x)
  (once-only (x)
    `(* ,x ,x)))
@end lisp
See (once-only-fun) for information on @code{once-only}.

In general, anything that is implemented as a subst can be
re-implemented as a macro, just by changing the @code{defsubst} to a
@code{defmacro} and putting in the appropriate backquote and commas, using
@code{once-only} or creating temporary variables to make sure the arguments
are computed once and in the proper order.  The disadvantage of macros
is that they are not functions, and so cannot be applied to arguments.
Also, the effort required to guarantee the order of evaluation is a
disadvantage.  Their advantage is that they can do much more powerful
things than substs can.  This is also a disadvantage since macros
provide more ways to get into trouble.  If something can be implemented
either as a macro or as a subst, it is generally better to make it a
subst.

The @i{lambda-list} of a subst may contain @code{&optional} and
@code{&rest}, but no other lambda-list keywords.  If there is a
rest argument, it is replaced in the body with an explicit call to
@code{list}:
@lisp
(defsubst append-to-foo (&rest args) 
  (setq foo (append args foo)))

(append-to-foo x y z)
@end lisp
expands to
@lisp
(setq foo (append (list x y z) foo))
@end lisp

Rest arguments in substs are most useful with
@code{apply}.  Because of an optimization, if
@lisp
(defsubst xhack (&rest indices) 
  (apply 'xfun xarg1 indices))
@end lisp
has been done then
@lisp
(xhack a (car b))
@end lisp
is equivalent to
@lisp
(xfun xarg1 a (car b))
@end lisp
If @code{xfun} is itself a subst, it is expanded in turn.

When a @code{defsubst} is compiled, its list structure definition is kept
around so that calls can still be open-coded by the compiler.  But
non-open-coded calls to the function run at the speed of compiled code.
The interpreted definition is kept in the compiled definition's
debugging info alist (see (debugging-info-fun)).  Undeclared free
variables used in a @code{defsubst} being compiled do not get any warning,
because this is a common practice that works properly with nonspecial
variables when calls are open coded.

If you are using a @code{defsubst} from outside the program to which it belongs,
you might sometimes be better off if it is not open-coded.
The decrease in speed might not be significant, and you would
have the advantage that you would not need to recompile your program
if the definition is changed.  You can prevent open-coding by putting
@code{dont-optimize} around the call to the @code{defsubst}.
@lisp
(dont-optimize (xhack a (car b)))
@end lisp
See (dont-optimize-fun).

Straightforward substitution of the arguments could cause arguments to
be computed more than once, or in the wrong order.  For instance, the
functions
@lisp
(defsubst reverse-cons (x y) (cons y x))
(defsubst in-order (a b c) (and (< a b) (< b c)))
@end lisp
would present problems.  When compiled, because of the substitution
a call to @code{reverse-cons} would evaluate its arguments in the
wrong order, and a call to @code{in-order} could evaluate its second
argument twice.  In fact, a more complicated form of substitution
(implemented by @code{si:sublis-eval-once}, (si:sublis-eval-once-fun))
is used so that local variables are introduced as necessary to prevent
such problems.

Note that all occurrences of the argument names in the body are replaced
with the argument forms, wherever they appear.  Thus an argument name
should not be used in the body for anything else, such as a function
name or a symbol in a constant.

As with @code{defun}, @i{name} can be any function spec.
@end defspec


@section  Hints to Macro Writers

There are many useful techniques for writing macros.  Over the years,
Lisp programmers have discovered techniques that most programmers find
useful, and have identified pitfalls that must be avoided.  This
section discusses some of these techniques and illustrates them with
examples.

The most important thing to keep in mind as you learn to write macros
is that the first thing you should do is figure out what the macro form
is supposed to expand into, and only then should you start to actually
write the code of the macro.  If you have a firm grasp of what the
generated Lisp program is supposed to look like, you
will find the macro much easier to write.

In general any macro that can be written as a substitutable
function (see (defsubst-fun)) should be written as one, not as a macro,
for several reasons: substitutable functions are easier to write and to
read; they can be passed as functional arguments (for example, you can
pass them to @code{mapcar}); and there are some subtleties that can occur
in macro definitions that need not be worried about in substitutable
functions.  A macro can be a substitutable function only if it has
exactly the semantics of a function, rather than of a special form.  The
macros we will see in this section are not semantically like functions;
they must be written as macros.

@subsection Name Conflicts

One of the most common errors in writing macros is best illustrated by
example.  Suppose we wanted to write @code{dolist} (see (dolist-fun)) as
a macro that expanded into a @code{do} (see (do-fun)).  The first step,
as always, is to figure out what the expansion should look like.  Let's
pick a representative example form, and figure out what its expansion
should be.  Here is a typical @code{dolist} form.

@lisp
(dolist (element (append a b))
  (push element *big-list*)
  (foo element 3))
@end lisp

We want to create a @code{do} form that does the thing that the above
@code{dolist} form says to do.  That is the basic goal of the macro: it
must expand into code that does the same thing that the original code
says to do, but it should be in terms of existing Lisp constructs.
The @code{do} form might look like this:

@lisp
(do ((list (append a b) (cdr list))
     (element))
    ((null list))
  (setq element (car list))
  (push element *big-list*)
  (foo element 3))
@end lisp

Now we could start writing the macro that would generate this code, and
in general convert any @code{dolist} into a @code{do}, in an analogous way.
However, there is a problem with the above scheme for expanding the
@code{dolist}.  The above example's expansion works fine.  But what if the input
form had been the following:

@lisp
(dolist (list (append a b))
  (push list *big-list*)
  (foo list 3))
@end lisp

This is just like the form we saw above, except that the programmer happened
to decide to name the looping variable @code{list} rather than
@code{element}.  The corresponding expansion would be:

@lisp
(do ((list (append a b) (cdr list))
     (list))
    ((null list))
  (setq list (car list))
  (push list *big-list*)
  (foo list 3))
@end lisp

This doesn't work at all!  In fact, this is not even a valid program,
since it contains a @code{do} that uses the same variable in two different
iteration clauses.

Here's another example that causes trouble:

@lisp
(let ((list nil))
  (dolist (element (append a b))
    (push element list)
    (foo list 3)))
@end lisp

If you work out the expansion of this form, you will see that there are
two variables named @code{list}, and that the programmer meant to refer to the
outer one but the generated code for the @code{push} actually uses
the inner one.

The problem here is an accidental name conflict.  This can happen in
any macro that has to create a new variable.  If that variable ever
appears in a context in which user code might access it, then you have
to worry that it might conflict with some other name that the user is
using for his own program.

One way to avoid this problem is to choose a name that is very unlikely
to be picked by the user, simply by choosing an unusual name, in a
package which only you will write code in.  This will probably work, but
it is inelegant since there is no guarantee that the user won't just
happen to choose the same name.  The way to avoid the name
conflict reliably is to use an uninterned symbol as the variable in the generated
code.  The function @code{gensym} (see (gensym-fun)) is useful for
creating such symbols.

Here is the expansion of the original form, using an uninterned
symbol created by @code{gensym}.

@lisp
(do ((#:g0005 (append a b) (cdr #:g0005))
     (element))
    ((null #:g0005))
  (setq element (car #:g0005))
  (push element *big-list*)
  (foo element 3))
@end lisp

This is the right kind of thing to expand into.  (This is how the
expression would print; this text would not read in properly because a
new uninterned symbol would be created by each use of 7#:*.)  Now that
we understand how the expansion works, we are ready to actually write
the macro.  Here it is:

@lisp
(defmacro dolist ((var form) . body)
  (let ((dummy (gensym)))
    `(do ((,dummy ,form (cdr ,dummy))
	  (,var))
	 ((null ,dummy))
       (setq ,var (car ,dummy))
       . ,body)))
@end lisp

@cindex dot, in symbols
@cindex period, in symbols
Many system macros do not use @code{gensym} for the internal variables in their
expansions.  Instead they use symbols whose print names begin and end with a dot.
This provides meaningful names for these variables when looking at the generated
code and when looking at the state of a computation in the error-handler.
These symbols are in the @code{si} package; as a result, a name conflict is possible
only in code which uses variables in the @code{si} package.  This would not normally
happen in user code, which resides in other packages.

@subsection Block-Name Conflicts

A related problem occurs when you write a macro that expands into a
@code{prog} or @code{do} (or anything equivalent) behind the user's back
(unlike @code{dolist}, which is documented to be like @code{do}).  Consider
the @code{error-restart} special form (see (error-restart-fun)).  Suppose
we wanted to implement it as a macro that expands into a @code{do-forever},
which becomes a @code{prog}.  Then the following (contrived) Lisp program
would not behave correctly:

@lisp
(dolist (a list)
  (error-restart ((sys:abort error) "Return from FOO.")
    (cond ((> a 10)
	   (return 5))
	  ((> a 4)
	   (ferror 'lose "You lose.")))))
@end lisp

@noindent
The problem is that the @code{return} would return from the
@code{error-restart} instead of the @code{prog}.

There are two possible ways to avoid this.  The best is to make the expanded
code use only explicit @code{block}'s with obscure or gensymmed block names,
and never a @code{prog} or @code{do}.

The other is to give any @code{prog} or @code{do} the name @code{t}.  @code{t} as a
@code{prog} name is special; it causes the @code{prog} to generate only a
@code{block} named @code{t}, omitting the usual @code{block} named @code{nil} which
is normally generated as well.  Because only @code{block}s named @code{nil}
affect @code{return}, the problem is avoided.

When @code{error-restart}'s expansion is supposed to return from the
@code{prog} named @code{t}, it uses @code{return-from} @code{t}.

Macros like @code{dolist} specifically should expand into an ordinary @code{do},
because the user expects to be able to exit them with @code{return}.

@subsection Macros Expanding into Many Forms

Sometimes a macro wants to do several different things when its expansion
is evaluated.  Another way to say this is that sometimes a macro wants to
expand into several things, all of which should happen sequentially at run
time (not macro-expand time).  For example, suppose you wanted to implement
@code{defconst} (see (defconst-fun)) as a macro.  @code{defconst} must do two
things, declare the variable to be special and set the variable to its
initial value.  (Here we implement a simplified @code{defconst} that does only
these two things, and doesn't have any options.)  What should a
@code{defconst} form expand into?  Well, what we would like is for an
appearance of
@lisp
(defconst a (+ 4 b))
@end lisp
in a file to be the same thing as the appearance of the following two forms:
@lisp
(proclaim '(special a))
(setq a (+ 4 b))
@end lisp
However, because of the way that macros work, they only expand into one
form, not two.  So we need to have a @code{defconst} form expand into
one form that is just like having two forms in the file.

There is such a form.  It looks like this:
@lisp
(progn (proclaim '(special a))
       (setq a (+ 4 b)))
@end lisp
In interpreted Lisp, it is easy to see what happens here.  This is a
@code{progn} special form, and so all its subforms are evaluated, in turn.
The @code{proclaim} form and the @code{setq} form are evaluated.
The compiler recognizes @code{progn} specially and treats each argument
of the @code{progn} form as if it had been encountered at top level.
Here is the macro definition:

@lisp
(defmacro defconst (variable init-form)
  `(progn (proclaim '(special ,variable))
	  (setq ,variable ,init-form)))
@end lisp

Here is another example of a form that wants to expand into several
things.  We implement a special form called @code{define-command},
which is intended to be used in order to define commands in some
interactive user subsystem.  For each command, there are two things
provided by the @code{define-command} form: a function that executes the
command, and a character that should invoke the function in this subsystem.
Suppose that in
this subsystem, commands are always functions of no arguments,
and characters are used to index a vector called @code{dispatch-table}
to find the function to use.
A typical call to @code{define-command} would look like:

@lisp
(define-command move-to-top #\meta-<
  (do () ((at-the-top-p))
    (move-up-one)))

@exdent Expanding into:

(progn (setf (aref dispatch-table #\meta-<)
	     'move-to-top)
       (push 'move-to-top *command-name-list*)
       (defun move-to-top ()
	 (do ()
	     ((at-the-top-p))
	   (move-up-one)))
       )
@end lisp

The @code{define-command} expands into three forms.  The first one sets up
the specified character to invoke this command.  The second one puts the
command name onto the list of all command names.  The third one is the
@code{defun} that actually defines the function itself.  Note that the
@code{setf} and @code{push} happen at load-time (when the file is loaded);
the function, of course, also gets defined at load time.  (See the
description of @code{eval-when} ((eval-when-fun)) for more discussion of
the differences between compile time, load time, and eval time.)

This technique makes Lisp a powerful language in which to implement
your own language.  When you write a large system in Lisp, frequently
you can make things much more convenient and clear by using macros to
extend Lisp into a customized language for your application.  In the
above example, we have created a little language extension: a new
special form that defines commands for our system.  It lets the writer
of the system attach the code for a command character to the
character itself.  Macro expansion allows the function definitions
and the command dispatch table to be made from the same source code.

@subsection Macros that Surround Code

There is a particular kind of macro that is very useful for many
applications.  This is a macro that you place ``around'' some Lisp code,
in order to make the evaluation of that code happen in a modified context.
For a very simple example, we could define a macro called
@code{with-output-in-base}, that executes the forms within its body
with any output of numbers that is done defaulting to a specified base.
@lisp
(defmacro with-output-in-base ((base-form) &body body)
   `(let ((*print-base* ,base-form))
      . ,body))
@end lisp
A typical use of this macro might look like:
@lisp
(with-output-in-base (*default-base*)
   (print x) (print y))
@end lisp
which would expand into
@lisp
(let ((*print-base* *default-base*))
  (print x) (print y))
@end lisp

This example is too trivial to be very useful; it is intended to
demonstrate some stylistic issues.  There are standard Zetalisp
constructs that are similar to this macro; see
@code{with-open-file} ((with-open-file-fun)) and @code{with-input-from-string}
((with-input-from-string-fun)), for example.
The really interesting thing, of course, is that you can define your
own such constructs for your applications.  One very
powerful application of this technique was used in a system that
manipulates and solves the Rubik's cube puzzle.  The system heavily
uses a construct called @code{with-front-and-top}, whose meaning is
``evaluate this code in a context in which this specified face of the
cube is considered the front face, and this other specified face is
considered the top face''.

The first thing to keep in mind when you write this sort of macro is
that you can make your macro much clearer to people who might read your
program if you conform to a set of loose standards of syntactic style.
By convention, the names of such constructs start with ``@code{with-}''.
This seems to be a clear way of expressing the concept that we are
setting up a context; the meaning of the construct is ``do this stuff
@i{with} the following things true''.  Another convention is that any
``parameters'' to the construct should appear in a list that is the
first subform of the construct, and that the rest of the elements
should make up a body of forms that are evaluated sequentially with the
last one returned.  All of the examples cited above work this way.  In
our @code{with-output-in-base} example, there was one parameter (the
base), which appears as the first (and only) element of a list that is
the first subform of the construct.  The extra level of parentheses
in the printed representation serves to separate the ``parameter'' forms
from the ``body'' forms so that it is textually apparent which is which;
it also provides a convenient way to provide default parameters (a good
example is the @code{with-input-from-string} construct
((with-input-from-string-fun)), which takes two required and two
optional parameters).  Another convention/technique is to use the
@code{&body} keyword in the @code{defmacro} to tell the editor how to
indent the elements of the body (see (&body)).

The other thing to keep in mind is that control can leave the construct
either by the last form's returning, or by a non-local exit
(@code{go}, @code{return} or @code{throw}).  You should write the definition
in such a way that everything is cleaned up appropriately no
matter how control exits.  In our @code{with-output-in-base}
example, there is no problem, because non-local exits undo
lambda-bindings.  However, in even slightly more complicated cases, an
@code{unwind-protect} form (see (unwind-protect-fun)) is needed: the
macro must expand into an @code{unwind-protect} that surrounds the body,
with ``cleanup'' forms that undo the context-setting-up that the macro
did.  For example, @code{using-resource} (see (using-resource-fun))
expands
@lisp
(using-resource (window menu-resource) @i{body}...)
@exdent into
(let ((window nil))
  (unwind-protect
      (progn (setq window
		   (allocate-resource 'menu-resource))
	     @i{body}...)
    (and window
	 (deallocate-resource 'menu-resource window))))
@end lisp
This way the allocated resource item is deallocated whenever control
leaves the @code{using-resource} special form.

@subsection Multiple and Out-of-Order Evaluation

In any macro, you should always pay attention to the problem of
multiple or out-of-order evaluation of user subforms.  Here is an
example of a macro with such a problem.  This macro defines a special
form with two subforms.  The first is a reference, and the second is a
form.  The special form is defined to create a cons whose car and cdr
are both the value of the second subform, and then to set the reference
to be that cons.  Here is a possible definition:
@lisp
(defmacro test (reference form)
   `(setf ,reference (cons ,form ,form)))
@end lisp
Simple cases work all right:
@lisp
(test foo 3) ==>
  (setf foo (cons 3 3))
@end lisp
But a more complex example, in which the subform has side effects,
can produce surprising results:
@lisp
(test foo (setq x (1+ x))) ==>
  (setf foo (cons (setq x (1+ x))
                  (setq x (1+ x))))
@end lisp
The resulting code evaluates the @code{setq} form twice, and so @code{x}
is increased by two instead of by one.  A better definition of @code{test}
that avoids this problem is:
@lisp
(defmacro test (reference form)
   (let ((value (gensym)))
     `(let ((,value ,form))
         (setf ,reference (cons ,value ,value)))))
@end lisp
With this definition, the expansion works as follows:
@lisp
(test foo (setq x (1+ x))) ==>
  (let ((#:g0005 (setq x (1+ x))))
     (setf foo (cons #:g0005 #:g0005)))
@end lisp
Once again, the expansion would print this way, but this text
would not read in as a valid expression due to the inevitable
problems of 7#:*.

In general, when you define a new construct which contains
one or more argument forms, you must be careful that the expansion
evaluates the argument forms the proper number of times and in the
proper order.  There's nothing
fundamentally wrong with multiple or out-of-order evalation if that is
really what you want and if it is what you document your special form
to do.  But if this happens unexpectedly, it can make invocations
fail to work as they appear they should.

@code{once-only} is a macro that can be used to avoid multiple evaluation.
It is most easily explained by example.  You would write @code{test} using
@code{once-only} as follows:
@lisp
(defmacro test (reference form)
  (once-only (form)
    `(setf ,reference (cons ,form ,form))))
@end lisp
This defines @code{test} in such a way that the @code{form} is only evaluated
once, and references to @code{form} inside the macro body refer to that
value.  @code{once-only} automatically introduces a lambda-binding of a
generated symbol to hold the value of the form.  Actually, it is more
clever than that; it avoids introducing the lambda-binding for forms
whose evaluation is trivial and may be repeated without harm or cost,
such as numbers, symbols, and quoted structure.  This is just an
optimization that helps produce more efficient code.

The @code{once-only} macro makes it easier to follow the principle, but it
does not completely or automatically solve the problems of multiple and
out-of-order evaluation.  It is just a tool that can solve some of the
problems some of the time; it is not a panacea.

The following description attempts to explain what @code{once-only} does,
but it is a lot easier to use @code{once-only} by imitating the example
above than by trying to understand @code{once-only}'s rather tricky
definition.

@defmac once-only var-list body...
@i{var-list} is a list of variables.  The @i{body} is a Lisp program
that presumably uses the values of those variables.  When the form
resulting from the expansion of the @code{once-only} is evaluated, the first
thing it does is to inspect the values of each of the variables in
@i{var-list}; these values are assumed to be Lisp forms.  For each of the
variables, it binds that variable either to its current value, if the
current value is a trivial form, or to a generated symbol.  Next,
@code{once-only} evaluates the @i{body} in this new binding environment and,
when they have been evaluated, it undoes the bindings.  The result of the
evaluation of the last form in @i{body} is presumed to be a Lisp form, typically
the expansion of a macro.  If all of the variables have been bound to
trivial forms, then @i{once-only} just returns that result.  Otherwise,
@code{once-only} returns the result wrapped in a lambda-combination that binds
the generated symbols to the result of evaluating the respective
non-trivial forms.

The effect is that the program produced by evaluating the @code{once-only}
form is coded in such a way that, each of the forms which was the value
of one of the variables in @i{var-list} is evaluated only once,
unless the form is such as to have no side effects.  At the same time,
no unnecessary temporary variables appear in the generated code, but the
body of the @code{once-only} is not cluttered up with extraneous code to
decide whether temporary variables are needed.
@end defmac

@subsection Nesting Macros

A useful technique for building language extensions is to define
programming constructs that employ two special forms, one of which is
used inside the body of the other.  Here is a simple example.  There
are two special forms.  The outer one is called @code{with-collection},
and the inner one is called @code{collect}.  @code{collect} takes one
subform, which it evaluates; @code{with-collection} just has a body, whose
forms it evaluates sequentially.  @code{with-collection} returns a list of
all of the values that were given to @code{collect} during the evaluation
of the @code{with-collection}'s body.  For example,
@lisp
(with-collection (dotimes (i 5) (collect i)))
  => (1 2 3 4 5)
@end lisp
Remembering the first piece of advice we gave about macros, the
next thing to do is to figure out what the expansion looks like.
Here is how the above example could expand:

@lisp
(let ((#:g0005 nil))
  (dotimes (i 5)
     (push i #:g0005))
  (nreverse #:g0005))
@end lisp

Now, how do we write the definition of the macros?  Well,
@code{with-collection} is pretty easy:

@lisp
(defmacro with-collection (&body body)
  (let ((var (gensym)))
     `(let ((,var nil))
        ,@@body
        (nreverse ,var))))
@end lisp

The hard part is writing @code{collect}.  Let's try it:
@lisp
(defmacro collect (argument) `(push ,argument ,var))
@end lisp

Note that something unusual is going on here: @code{collect} is using the
variable @code{var} freely.  It is depending on the binding that takes
place in the body of @code{with-collection} in order to get access to the
value of @code{var}.  Unfortunately, that binding took place when
@code{with-collection} got expanded; @code{with-collection}'s expander
function bound @code{var}, and the binding of @code{var} was unmade when the expander function
was done.  By the time the @code{collect} form gets expanded, the binding
is long gone.  The macro definitions above do not work.
Somehow the expander function of @code{with-collection} has to communicate
with the expander function of @code{collect} to pass over the generated
symbol.

The only way for @code{with-collection} to convey information to the
expander function of @code{collect} is for it to expand into something
that passes that information.

One way to write these macros is using @code{macrolet}:

@lisp
(defmacro with-collection (&body body)
   (let ((var (gensym)))
     `(macrolet ((collect (argument)
		   `(push ,argument ,',var)))
	(let ((,var nil))
          ,@@body
	  (nreverse ,var)))))
@end lisp

Here @code{with-collection} expands into code which defines @code{collect}
specially to know about which variable to collect into.  @code{,',} causes
@code{var}'s value to be substituted when the outer backquote, the one
around the @code{macrolet}, is executed.  @code{argument}, however, is
substituted in when the inner backquote is executed, which happens
when @code{collect} is expanded.

This technique has the interesting consequence that @code{collect} is
defined only within the body of a @code{with-collection}.  It would simply
not be recognized elsewhere; or it could have another definition, for
some other purpose, globally.  This has both advantages and
disadvantages.

Another technique is to communicate through local declarations.
The code generated by @code{with-collection} can contain a
@code{local-declare}.  The expansion of @code{collect} can examine the declararion
with @code{getdecl} to decide what to do.  Here is the code:

@lisp
(defmacro with-collection (&body body)
   (let ((var (gensym)))
     `(let ((,var nil))
	(local-declare ((collection-var nil ,var))
	  ,@@body
	  (nreverse ,var)))))

(defmacro collect (argument)
  (let ((var ,(getdecl nil 'collection-var)))
    (unless var 
      (ferror nil "COLLECT not within a WITH-COLLECTION"))
    `(push ,argument var)))
@end lisp

Another way, used before @code{getdecl} existed, was with @code{compiler-let}
(see (compiler-let-fun)).  @code{compiler-let} is identical to @code{let} as
far as the interpreter is concerned, so the macro continues to work in
the interpreter with this change.  When the compiler encounters a
@code{compiler-let}, however, it actually performs the bindings that the
@code{compiler-let} specifies and proceeds to compile the body of the
@code{compiler-let} with all of those bindings in effect.  In other words,
it acts as the interpreter would.

Here's the right way to write these macros in this fashion:

@lisp
(defvar *collect-variable*)

(defmacro with-collection (&body body)
  (let ((var (gensym)))
     `(let ((,var nil))
        (compiler-let ((*collect-variable* ',var))
           . ,body)
        (nreverse ,var))))

(defmacro collect (argument)
  `(push ,argument ,*collect-variable*))
@end lisp

@subsection Functions Used During Expansion

The technique of defining functions to be used during macro expansion
deserves explicit mention here.  It may not occur to you, but a macro
expander function is a Lisp program like any other Lisp program, and it
can benefit in all the usual ways by being broken down into a
collection of functions that do various parts of its work.  Usually
macro expander functions are pretty simple Lisp programs that take
things apart and put them together slightly differently, but
some macros are quite complex and do a lot of work.  Several features
of Zetalisp, including flavors, @code{loop}, and @code{defstruct},
are implemented using very complex macros, which, like any complex
well-written Lisp program, are broken down into modular functions.  You should
keep this in mind if you ever invent an advanced language extension
or ever find yourself writing a five-page expander function.

A particular thing to note is that any functions used by macro-expander
functions must be available at compile-time.  You can make a function
available at compile time by surrounding its defining form with an
@code{(eval-when (compile load eval) ...)}; see (eval-when-fun) for more
details.  Doing this means that at compile time the definition of the
function is interpreted, not compiled, and hence runs more
slowly.

Another approach is to separate macro definitions and the functions they
call during expansion into a separate file, often called a ``defs''
(definitions) file.  This file defines all the macros, and also all
functions that the macros call.  It can be separately compiled and
loaded up before compiling the main part of the program, which uses the
macros.  The @i{system} facility (see (system-system)) helps keep these
various files straight, compiling and loading things in the right order.


@section  Aids for Debugging Macros

@defun mexp &optional form
@code{mexp} goes into a loop in which it reads forms and sequentially
expands them, printing out the result of each expansion (using the
grinder (see (grind)) to improve readability).  When the form itself
has been expanded until it is no longer a macro call,
@code{macroexpand-all} is used to expand all its subforms, and the result
is printed if it is different from what preceded.  This allows you to
see what your macros are expanding into, without actually evaluating
the result of the expansion.

If the form you type is an atom, @code{mexp} returns.  Usually one simply
uses @code{Abort} to exit it.

If the form you type is a list that not a macro call, nothing is printed.
You are prompted immediately for another form.

If the argument @i{form} is given, it is expanded and printed as usual,
and then @code{mexp} returns immediately.

@lisp
@exdent If you type
(mexp)
@exdent followed by
(rest (first x))
@exdent then @code{mexp} will print
(cdr (first x))
@exdent and then
(cdr (car x))
@end lisp
You would then type @code{Abort} to exit @code{mexp}.
@end defun

@section  Displacing Macro Calls
@cindex displacing macros
	Every time the the evaluator sees a macro form, it must call the
macro to expand the form.  This is time consuming.  To speed things up,
the expansion of the macro is recorded automatically by modifying the
form using @code{rplaca} and @code{rplacd} so that it no longer appears to
need expansion.  If the same form is evaluated again, it can be processed
straight away.  This is done using the function @code{displace}.

A consequence of the evaluator's policy of displacing macro calls is
that if you change the definition of a macro, the new definition does
not take effect in any form that has already been displaced.  An
existing form which calls the macro will use the new definition only if the
form has never been evaluated.

@defun displace form expansion
@i{form} must be a list.
@code{displace} replaces the car and cdr of @i{form} so
that it looks like:
@lisp
(si:displaced @i{form} @i{expansion})
@end lisp
When a form whose car is @code{si:displaced} is evaluated, the evaluator
simply extracts the expansion and evaluates it.  @i{old-form-copy} is a
newly consed pair whose car and cdr are the same as the original car and
cdr of the form; thus, it records the macro call which was expanded.
@code{grindef} uses this information to print the code as it was, rather
than as it has been expanded.

@code{displace} returns @i{expansion}.

The precise format of a displaced macro call may be changed in the
future to facilitate the implementation of automatic reexpansion if the
called macro changes.
@end defun

@section  Functions to Expand Macros

	The following two functions are provided to allow the user to
control expansion of macros; they are often useful for the writer of
advanced macro systems, and in tools that want to examine and understand
code that may contain macros.

@defun macroexpand-1 form &optional local-macros-environment
If @i{form} is a macro form, this expands it (once)
and returns the expanded form.  Otherwise it just
returns @i{form}.  The second value is @code{t} if
@i{form} has been expanded.

@i{local-macros-environment} is a data structure which specifies the
local macro definitions (made by @code{macrolet}) to be used for this
expansion in addition to the global macro definitions (made by
@code{defmacro} and recorded in function cells of symbols).  When
@code{macroexpand-1} is called by the evaluator, this argument comes from
the evaluator's own data structures set up by any @code{macrolet} forms
which @i{form} was found within.  When @code{macroexpand-1} is called by
the compiler, this argument comes from data structures kept by the
compiler in its handling of @code{macrolet}.

Sometimes macro definitions
call @code{macroexpand-1}; in that case, if @i{form} was a subform of the
macro call, a @code{&environment} argument in the macro definition can be
used to obtain a value to pass as @i{local-macros-environment}.  See
(&environment).  @code{setf} is one example of a macro that needs to use
@code{&environment} since it expands some of its subforms in deciding
what code to expand into.  See @code{setf}, (setf-fun).

If @i{local-macros-environment} is omitted or @code{nil}, only global
macro definitions are used.

@code{macroexpand-1} expands @code{defsubst}
function forms as well as macro forms.
@end defun

@defun macroexpand form &optional local-macros-environment
If @i{form} is a macro form, this expands it repeatedly
until it is not a macro form and returns the final expansion.
Otherwise, it just returns @i{form}.  The second value is @code{t}
if one or more expansions have take place.
Everything said about @i{local-macros-environment} under
@code{macroexpand-1} applies here too.

@code{macroexpand} expands @code{defsubst}
function forms as well as macro forms.
@end defun

@defun macroexpand-all form &optional local-macros-environment
Expands all macro calls in @i{form}, including those which are
its subforms, and returns the result.  By contrast, @code{macroexpand}
would not expand the subforms.  This function knows the syntax
of all Lisp special forms, so the result is completely accurate.
Note, however, that quoted list structure within @i{form} is not
altered; there is no way to know whether you intend such list
structure to be code or to be used in constructing code.
@end defun

@defvar *macroexpand-hook*
The value is a function which is used by @code{macroexpand-1} to invoke the
expander function of a macro.  It receives arguments just like @code{funcall}:
the expander function, and the arguments for it.

In fact, the default value of this variable @i{is} @code{funcall}.  The
variable exists so that the user can set it to some other function,
which performs the @code{funcall} and possibly other associated
record-keeping.

@code{*macroexpand-hook*} is not used when a macro is expanded by the
interpreter.
@end defvar

@section  Definitions of Macros

The definition of a macro is a list whose car is the symbol @code{macro}.
The cdr of the list is the macro's @i{expander function}.  This expander
function contains the code written in the @code{defmacro} or other construct
which was used to define the macro.  It may be a @code{lambda} expression,
or it may be a compiled function object (FEF).  Expanding the macro is done
by invoking the expander function.

When an expander function is called, it receives two arguments: the
macro call to be expanded, and the local macros environment.  If the
expansion is being done by @code{macroexpand-1} then the local macros
environment passed is the one that was given to @code{macroexpand-1}.  In a
macro defined with @code{defmacro}, the local macros environment can be
accessed by writing an @code{&environment} parameter (see (&environment)).

Expander functions used to be given only one argument.  For compatibility,
it is useful to define expander functions so that the second argument
is optional; @code{defmacro} does so.  In addition, old macro definitions
still work, because @code{macroexpand-1} actually checks the number of
arguments which the expander function is ready to receive, and passes
only one argument if the expander function expects only one.  This is
done using @code{call} (see (call-fun)).

@defun macro-function function-spec
If @i{function-spec} is defined as a macro, then this returns its expander-function:
the function which should be called, with a macro call as its sole argument,
to produce the macro expansion.  For certain special forms, @code{macro-function}
returns the ``alternate macro definition'' (see below).
Otherwise, @code{macro-function} returns @code{nil}.

Since a definition as a macro is really a list of the form @code{(macro
. @i{expander-function})}, you can get the expander function using
@code{(cdr (fdefinition @i{function-spec}))}.  But it is cleaner to use
@code{macro-function}.

@lisp
(setf (macro-function @i{function-spec}) @i{expander})
@exdent is permitted, and is equivalent to
(fdefine @code{function-spec} (cons 'macro @code{expander}))
@end lisp

Certain constructs which Common Lisp specifies as macros are actually
implemented as special forms (@code{cond}, for example).  These special
forms have ``alternate macro definitions'' which are the definitions
they might have if they were implemented as macros.  This is so that the
caller of @code{macro-function}, if it is a portable Common Lisp program,
need not know about any special forms except the standard Common Lisp
ones in order to make deductions about all valid Common Lisp programs.
It can instead regard as a macro any symbol on which @code{macro-function}
returns a non-@code{nil} value, and treat that value as the macro expander
function.

The alternate macro definition of a symbol such as @code{cond} is not actually
its function definition.  It exists only for @code{macro-function} to return.
The existence of alternate macro definitions means that @code{macro-function}
is not useful for testing whether a symbol really is defined as a macro.
@end defun

@section  Extending setf and locf

This section would logically belong within (setf), but it is too
advanced to go there.  It is placed in this chapter because it
deals with concepts related to macro-expansion.

There are three ways to tell the system how to @code{setf} a function:
simple @code{defsetf} when it is trivial, general @code{defsetf} which
handles most other cases, and @code{define-setf-method} which provides
the utmost generality.

@defmac defsetf
The simple way to use @code{defsetf} is useful when there is a setting
function which does all the work of storing a value into the appropriate place
and has the proper calling conventions.
@lisp
(defsetf @i{function} @i{setting-function})
@end lisp
says that the way to store into @code{(@i{function} @i{args}...)} is to do
@code{(@i{setting-function} @i{args}... @i{new-value})}.  For example,
@lisp
(defsetf car sys:setcar)
@end lisp
is the way @code{setf} of @code{car} is defined.  Its meaning is that @code{(setf
(car @i{x}) @i{y})} should expand into @code{(sys:setcar @i{x} @i{y})}.
(@code{setcar} is like @code{rplaca} except that @code{setcar} returns its second
argument).

The more general form of @code{defsetf} is used when there is no
setting function with exactly the right calling sequence.  Thus,
@lisp
(defsetf @i{function} (@i{function-args}...) (@i{value-arg}) @i{body}...)
@end lisp
tells @code{setf} how to store into @code{(@i{function} @i{args}...)} by
providing something like a macro defininition to expand into code to do
the storing.  @i{body} computes the code; the last form in @i{body}
returns a suitable expression.  @i{function-args} should be a lambda
list, which can have optional and rest args.  @i{body} can substitute
the values of the variables in this lambda list, to refer to the
arguments in the form being @code{setf}'ed.  Likewise, it can substitute in
@i{value-arg} to refer to the value to be stored.

In fact, the @i{function-args} and @i{value-arg} are not actually
the subforms of the form being @code{setf}d and the value to be stored;
they are gensyms.  After the @i{body} returns, the corresponding
expressions may be substituted for the gensyms, or the gensyms may
remain as local variables with a suitable @code{let} provided to bind them.
This is how @code{setf} ensures a correct order of evaluation.
@lisp
@exdent Example:
(defsetf car (list) (value) `(sys:setcar ,list ,value))
@end lisp
is how one could define the @code{setf}'ing of @code{car} using the general
form of @code{defsetf}.  The simple form of @code{defsetf} can be regarded
as an abbreviation for something like this.

Since @code{setf} automatically expands macros, if you define a macro whose
expansion is usable in @code{setf} then the macro is usable there also.
Sometimes this is not desirable.  For example, the accessor subst for a slot
in a @code{defstruct} structure probably expands into @code{aref}, but if the
slot is declared @code{:read-only} this should not be allowed.
It is prevented by means of a @code{defsetf} like this:
@lisp
(defsetf @i{accessor-function})
@end lisp
This means that @code{setf} is explicitly prohibited on that function.
@end defmac

@defmac define-setf-method function (function-args...) (value-arg) body...
Defines how to do @code{setf} on @i{place}'s starting with @i{function}, with
more power and generality than @code{defsetf} provides, but more
complexity of use.

The @code{define-setf-method} form receives its arguments almost like an
analogous @code{defsetf}.  However, the values it receives are the actual
subforms, and the actual form for the value, rather than gensyms which
stand for them.
The @i{function-args} are the actual subforms of the place to be @code{setf}'ed,
and the full power of @code{defmacro} arglists can be used to match against it.
@i{value-arg} is the actual form used as the second argument to @code{setf}.

@i{body} is once again evaluated, but it does not return an expression
to do the storing.  Instead, it returns five values which contain
sufficient information to enable anyone to examine and modify the
contents of the place.  This information tells the caller which subforms
of the place need to be evaluated, and how to use them to examine or set
the value of the place.  (Generally the function-args arglist is
arranged to make each arg get one subform.)  A temporary variable must
be found or made (usually with @code{gensym}) for each of them.  Another
temporary variable should be made to correspond to the value to be
stored.

Then the five values to be returned are:
@table @strong
@item 0
A list of the temporary variables for the subforms of the place.
@item 1
A list of the subforms that they correspond to.
@item 2
A list of the temporary variables for the values to be stored.
Currently there can only be one value to be stored, so there is
only one variable in this list, always.
@item 3
A form to do the storing.  This form refers to some or all of the temporary
variables listed in value 1.
@item 4
A form to get the value of the place.  @code{setf} does not need to do
this, but @code{push} and @code{incf} do.  This too should refer only to the
temporary variables.  No expression of contained it it should be a
subexpression of the place being stored in.
@end table

This information is everything that the macro (@code{setf} or something
more complicated) needs to know to decide what to do.
@lisp
@exdent Example:
(define-setf-method car (function-spec)
  (let ((tempvars (list (gensym)))
	(tempargs (list (list-form)))
	(storevar (gensym)))
    (values tempvars tempargs (list storevar)
	    `(sys:setcar ,(first tempvars) ,storevar)
	    `(car ,(first tempvars)))))
@end lisp
is how one could define the @code{setf}'ing of @code{car} using @code{define-setf-method}.
This definition is equivalent to the other two definitions using the
simpler techniques.
@end defmac

@defun get-setf-method form
Invokes the @code{setf} method for form (which must be a list) and returns the
five values produced by the body of the @code{define-setf-method} for the symbol
which is the car of form.  The meanings of these five values are given
immediately above.  If the way to @code{setf} that symbol was defined with @code{defsetf}
you still get five values, which you can interpret in the same ways; thus,
@code{defsetf} is effectively an abbreviation for a suitable @code{define-setf-method}.

There are two ways to use @code{get-setf-method}.  One is in a macro which,
like @code{setf} or @code{incf} or @code{push}, wants to store into a place.  The
other is in a @code{define-setf-method} for something like @code{ldb}, which
is @code{setf} by setting one of its arguments.  You would append your new
tempvars and tempargs to the ones you got from @code{get-setf-method} to
get the combined lists which you return.  The forms returned by the
@code{get-setf-method} you would stick into the forms you return.

An example of a macro which uses @code{get-setf-method} is @code{pushnew}.
(The real @code{pushnew} is a little hairier than this, to handle the
@i{test}, @i{test-not} and @i{key} arguments).

@lisp
(defmacro pushnew (value place)
  (multiple-value-bind
      (tempvars tempargs storevars storeform refform)
      (get-setf-method place)
    (si:sublis-eval-once
      (cons `(-val- . ,value) (pairlis tempvars tempargs))
      `(if (memq -val- ,refform)
	   ,refform
	 ,(sublis (list (cons (car storevars)
			      `(cons -val- ,refform)))
		  storeform))
      t t)))
@end lisp

@lisp
@exdent An example of a @code{define-setf-method} that uses @code{get-setf-method} is that for @code{ldb}:

(define-setf-method ldb (bytespec int)
  (multiple-value-bind 
	  (temps vals stores store-form access-form)
      (get-setf-method int)
    (let ((btemp (gensym))
	  (store (gensym))
	  (itemp (first stores)))
      (values (cons btemp temps)
	      (cons bytespec vals)
	      (list store)
	      `(progn 
		 ,(sublis
		    (list (cons itemp
				`(dpb ,store ,btemp
				      ,access-form)))
		    store-form)
		,store)
	      `(ldb ,btemp ,access-form)))))
@end lisp

@noindent
What this says is that the way to @code{setf} @code{(ldb @i{byte} (foo))}
is computed based on the way to @code{setf} @code{(foo)}.
@end defun

@defun si:sublis-eval-once alist form &optional reuse-tempvars sequential-flag
Replaces temporary variables in @i{form} with corresponding values
according to @i{alist}, but generates local variables when necessary to
make sure that the corresponding values are evaluated exactly once and
in same order that they appear in @i{alist}.  (This complication is
skipped when the values are constant).  @i{alist} should be a list of
elements @code{(@i{tempvar} . @i{value})}.  The result is a form equivalent
to
@lisp
`(let ,(mapcar #'(lambda (elt) (list (car elt) (cdr elt)))
	       alist)
  ,form)
@end lisp
but it usually contains fewer temporary variables and executes faster.

If @i{reuse-tempvars} is non-@code{nil}, the temporary variables which
appear as the cars of the elements of @i{alist} are allowed to appear in
the resulting form.  Otherwise, none of them appears in the resulting
form, and if any local variables turn out to be needed, they are made
afresh with @code{gensym}.  @i{reuse-tempvars} should be used only when it
is guaranteed that none of the temporary variables in @i{alist} is
referred to by any of the values to be substituted; as, when the
temporary variables have been freshly made with @code{gensym}.

If @i{sequential-flag} is non-@code{nil}, then the value substituted for a
temporary variable is allowed to refer to the temporary variables
preceding it in alist.  @code{setf} and similar macros should all use this
option.
@end defun

@defmac define-modify-macro macro-name (lambda-list...) combiner-function [doc-string]
Is a quick way to define @code{setf}'ing macros which resemble @code{incf}.
For example, here is how @code{incf} is defined:
@lisp
(define-modify-macro incf (&optional (delta 1)) +
   "Increment PLACE's value by DELTA.")
@end lisp

@i{lambda-list} describes any arguments the macro accepts, but not first
argument, which is always the place to be examined and modified.  The
old value of this place, and any additional arguments such as @code{delta}
in the case of @code{incf}, are combined using the @i{combiner-function}
(in this case, @code{+}) to get the new value which is stored back in the
place.
@end defmac

@defmac deflocf
Defines how to perform @code{locf} on a generalized variable.
There are two forms of usage, analogous to those of @code{defsetf}.

@lisp
(deflocf @i{function} @i{locating-function})
@end lisp
says that the way to get the location of @code{(@i{function} @i{args}...)} is to do
@code{(@i{locating-function} @i{args}...)}.  For example,
@lisp
(deflocf car sys:car-location)
@end lisp
could be used to define @code{locf} on @code{car} forms.
is the way @code{setf} of @code{car} is defined.  Its meaning is that @code{(locf
(car @i{x}))} should expand into @code{(sys:car-location @i{x})}.

The more general form of @code{deflocf} is used when there is no
locating function with exactly the right calling sequence.  Thus,
@lisp
(deflocf @i{function} (@i{function-args}...) @i{body}...)
@end lisp
tells @code{locf} how to locate @code{(@i{function} @i{args}...)} by
providing something like a macro defininition to expand into code to do
the locating.  @i{body} computes the code; the last form in @i{body}
returns a suitable expression.  @i{function-args} should be a lambda
list, which can have optional and rest args.  @i{body} can substitute
the values of the variables in this lambda list, to refer to the
arguments in the form being @code{locf}'ed.
@lisp
@exdent Example:
(deflocf car (list) `(sys:car-location ,list))
@end lisp
is how one could define the @code{locf}'ing of @code{car} using the general
form of @code{deflocf}.  The simple form of @code{deflocf} can be regarded
as an abbreviation for something like this.

@lisp
(deflocf @i{function})
@end lisp
says that @code{locf} should not be allowed on forms starting with @i{function}.
This is useful only when @i{function} is defined as a macro or subst, for then
@code{locf}'s normal action is to expand the macro call and try again.  In
other cases there is no way to @code{locf} a function unless you define
one, so you can simply refrain from defining any way.
@end defmac

@chapter The LOOP Iteration Macro

@section  Introduction
.mindex loop
@cindex loop
@cindex iteration

	@code{loop} is a Lisp macro that provides a programmable
iteration facility.  The same @code{loop} module operates compatibly in
Zetalisp, Maclisp (PDP-10 and Multics), and NIL, and a
moderately compatible package is under development for the MDL
programming environment.  @code{loop} was inspired by the FOR
facility of CLISP in InterLisp;  however, it is not compatible and
differs in several details.

	The general approach is that a form introduced by the word
@code{loop} generates a single program loop, into which a large variety
of features can be incorporated.  The loop consists of some
initialization (@i{prologue}) code, a body that may be executed
several times, and some exit (@i{epilogue}) code.  Variables may be
declared local to the loop.  The special features of @code{loop} are concerned with loop
variables, deciding when to end the iteration, putting user-written
code into the loop, returning a value from the construct, and
iterating a variable through various real or virtual sets of values.

	The @code{loop} form consists of a series of clauses, each
introduced by a ``keyword'' symbol.  These symbols are keywords from
@code{loop}'s point of view; they are not keywords in the usual sense
(symbols in the @code{keyword} package).  @code{loop} ignores the package
when it compares a symbol against the known keywords.

Forms appearing in or implied by the
clauses of a @code{loop} form are classed as those to be executed as
initialization code, body code, and/or exit code;  within each part of
the template filled in by @code{loop}, they are executed strictly in
the order implied by the original composition.  Thus, just as in
ordinary Lisp code, side-effects may be used, and one piece of code
may depend on following another for its proper operation.  This is the
principal philosophic difference from InterLisp's FOR facility.

	Note that @code{loop} forms are intended to look like stylized
English rather than Lisp code.  There is a notably low density of
parentheses, and many of the keywords are accepted in several synonymous
forms to allow writing of more euphonious and grammatical English.  Some
find this notation verbose and distasteful, while others find it
flexible and convenient.  The former are invited to stick to @code{do}.

	Here are some examples to illustrate the use of @code{loop}.
.space 1
.group
@lisp
(defun print-elements-of-list (list-of-elements)
    (loop for element in list-of-elements
	  do (print element)))
@end lisp
prints each element in its argument, which
should be a list.  It returns @code{nil}.
.end_group
.space 1
.group
@lisp
(defun gather-alist-entries (list-of-pairs)
    (loop for pair in list-of-pairs
	  collect (car pair)))
@end lisp
takes an association list and
returns a list of the keys;  that is, @code{(gather-alist-entries
'((foo 1 2) (bar 259) (baz)))} returns @code{(foo bar baz)}.
.end_group
.space 1
.group
@lisp
(defun extract-interesting-numbers (start-value end-value)
   (loop for number from start-value to end-value
	 when (interesting-p number) collect number))
@end lisp
takes two arguments, which should be
integers, and returns a list of all the numbers in that range
(inclusive) which satisfy the predicate @code{interesting-p}.
.end_group
.space 1
.group
@lisp
(defun find-maximum-element (an-array)
   (loop for i from 0 below (array-dimension-n 1 an-array)
	 maximize (aref an-array i)))
@end lisp
returns the maximum of the elements
of its argument, a one-dimensional array.
.end_group
.group
.space 1
@lisp
(defun my-remove (object list)
   (loop for element in list
	 unless (equal object element) collect element))
@end lisp
is like the standard function @code{remove}, except
that it copies the entire list.
.end_group
.space 1
.group
@lisp
(defun find-frob (list)
   (loop for element in list
	 when (frobp element) return element
	 finally (ferror nil "No frob found in the list ~S"
			 list)))
@end lisp
returns the first element of its list argument which
satisfies the predicate @code{frobp}.  If none is found, an error is
signaled.
.end_group

Common Lisp defines @code{loop} as equivalent to @code{do-forever}: it is used
with a body consisting only of forms to be evaluated until a nonlocal
exit happens.  This is incompatible with the traditional @code{loop} macro
which this chapter is about.  However, it is possible to tell which
meaning of @code{loop} the programmer intended: in the traditional @code{loop}
macro, it must be a symbol, while in the Common Lisp @code{loop} it is
useless to use a symbol there.  Therefore, if the first argument of
a @code{loop} form is not a symbol, it is treated as a Common Lisp @code{loop}.

@section  Clauses

	Internally, @code{loop} constructs a @code{prog} which includes
variable bindings, pre-iteration (initialization) code,
post-iteration (exit) code, the body of the iteration, and stepping
of variables of iteration to their next values (which happens on
every iteration after the body is executed).

	A @i{clause} consists of a keyword symbol and any Lisp
forms and keywords that it deals with.  For example,
@lisp
(loop for x in l do (print x)),
@end lisp
contains two clauses, 7for x in l* and 7do (print x)*.
Certain of the parts of the clause will be described as being
@i{expressions}, e.g. @code{(print x)} in the above.  An expression can
be a single Lisp form, or a series of forms implicitly collected with
@code{progn}.  An expression is terminated by the next following atom,
which is taken to be a keyword.  This syntax allows only the first
form in an expression to be atomic, but makes misspelled keywords
more easily detectable.

	@code{loop} uses print-name equality to compare keywords so
that @code{loop} forms may be written without package prefixes;  in
Lisp implementations that do not have packages, @code{eq} is used for
comparison.

	Bindings and iteration variable steppings may be performed
either sequentially or in
'loop_topic sequential vs parallel binding and initialization
parallel.  This affects how the stepping of one iteration variable
may depend on the value of another.  The syntax for distinguishing
the two will be described with the corresponding clauses.  When a set
of variables are to be bound in parallel, all of the initial values
are computed and then all the bindings are established.  Subsequent
bindings will be performed inside of that binding environment.
When the same variables are stepped, all the new values are computed
and then the variables are set.

@subsection Iteration-Driving Clauses

	These clauses all create a @i{variable of iteration}, which
is bound locally to the loop and takes on a new value on each
successive iteration.  Note that if more than one iteration-driving
clause is used in the same loop, several variables are created that
all step together through their values;  when any of the iterations
terminates, the entire loop terminates.  Nested iterations are not
generated;  for those, you need a second @code{loop} form in the body of
the loop.  In order not to produce strange interactions, iteration-driving clauses are required to precede any clauses that produce
body code:  that is, all except those that produce prologue or
epilogue code (@code{initially} and @code{finally}), bindings
(@code{with}), the @code{named} clause, and the iteration termination
clauses (@code{while} and @code{until}).

	Clauses which drive the iteration may be arranged to perform
their testing and stepping either in series or in parallel.  They are
by default grouped in series, which allows the stepping computation of
one clause to use the just-computed values of the iteration variables
of previous clauses.  They may be made to step in parallel, as is
the case with the @code{do} special form, by ``joining'' the iteration
clauses with the keyword @code{and}.  The form this typically takes is
something like
@lisp
(loop ... for x = (f) and for y = @i{init} then (g x) ...)
@end lisp
which sets @code{x} to @code{(f)} on every iteration, and binds @code{y}
to the value of @i{init} for the first iteration, and on every
iteration thereafter sets it to @code{(g x)}, where @code{x} still has
the value from the @i{previous} iteration.  Thus, if the calls to
@code{f} and @code{g} are not order-dependent, this would be best
written as
@lisp
(loop ... for y = @i{init} then (g x) for x = (f) ...)
@end lisp
because, as a general rule, parallel stepping has more overhead than
sequential stepping.  Similarly, the example
@lisp
(loop for sublist on some-list
      and for previous = 'undefined then sublist
      ...)
@end lisp
which is equivalent to the @code{do} construct
@lisp
(do ((sublist some-list (cdr sublist))
     (previous 'undefined sublist))
    ((null sublist) ...)
  ...)
@end lisp
in terms of stepping, would be better written as
@lisp
(loop for previous = 'undefined then sublist
      for sublist on some-list
      ...)
@end lisp

	When iteration-driving clauses are joined with @code{and}, if
the token following the @code{and} is not a keyword that introduces an
iteration driving clause, it is assumed to be the same as the keyword
that introduced the most recent clause;  thus, the above example
showing parallel stepping could have been written as
@lisp
(loop for sublist on some-list
      and previous = 'undefined then sublist
      ...)
@end lisp

	The order of evaluation in iteration-driving clauses is as follows:
'loop_topic order of evaluation in iteration clauses
those expressions that are only evaluated once are evaluated in order
at the beginning of the form, during the variable-binding phase, while
those expressions that are evaluated each time around the loop are
evaluated in order in the body.

	One common and simple iteration-driving clause is
@code{repeat}:
@table @code
@item repeat @i{expression}
.loop_keyword_index repeat
Evaluates @i{expression} (during the variable binding phase),
and causes the @code{loop} to iterate that many times.
@i{expression} is expected to evaluate to an integer.  If
@i{expression} evaluates to a zero or negative result, the body code
will not be executed.
@end table

	All remaining iteration-driving clauses are subdispatches of
the keyword @code{for}, which is synonomous with @code{as}.
'loop_keyword_index for as
In all of them a @i{variable of iteration} is specified.  Note that,
in general, if an iteration-driving clause implicitly supplies an
endtest, the value of this iteration variable is undefined as the loop is exited
(i.e., when the epilogue code is run).  This is
discussed in more detail in section
(loop-iteration-framework-section).

	Here are all of the varieties of @code{for} clauses.  Optional
parts are enclosed in curly brackets.
@c The @i{data-type}s as used
@c here are discussed fully in section (loop-data-type-section).

@table @code

@item for @i{var} in @i{expr1} @{by @i{expr2}@}
@c @item for @i{var} @{@i{data-type}@} in @i{expr1} @{by @i{expr2}@}
.loop_keyword_index for
Iterates over each of the elements in the list @i{expr1}.  If
the @code{by} subclause is present, @i{expr2} is evaluated once
on entry to the loop
to supply the function to be used to fetch successive sublists,
instead of @code{cdr}.

@item for @i{var} on @i{expr1} @{by @i{expr2}@}
@c @item for @i{var} @{@i{data-type}@} on @i{expr1} @{by @i{expr2}@}
.loop_keyword_index for
Like the previous @code{for} format, except that @i{var} is
set to successive sublists of the list instead of successive elements.
Note that
@code{loop} uses a @code{null} rather than an @code{atom} test to
implement both this and the preceding clause.
@c Note also that since @i{var} will always be a list, it is
@c not meaningful to specify a @i{data-type} unless @i{var} is
@c a @i{destructuring pattern}, as described in the section on
@c @i{destructuring}, (loop-destructuring-page).

@item for @i{var} = @i{expr}
@c @item for @i{var} @{@i{data-type}@} = @i{expr}
.loop_keyword_index for
On each iteration, @i{expr} is evaluated and @i{var} is set to the result.

@item for @i{var} = @i{expr1} then @i{expr2}
@c @item for @i{var} @{@i{data-type}@} = @i{expr1} then @i{expr2}
.loop_keyword_index for
@i{var} is bound to @i{expr1} when the loop is entered, and set to
@i{expr2} (re-evaluated) at all but the first iteration.  Since
@i{expr1} is evaluated during the binding phase, it cannot reference
other iteration variables set before it;  for that, use the following:

@item for @i{var} first @i{expr1} then @i{expr2}
@c @item for @i{var} @{@i{data-type}@} first @i{expr1} then @i{expr2}
.loop_keyword_index for
Sets @i{var} to @i{expr1} on the first iteration, and to
@i{expr2} (re-evaluated) on each succeeding iteration.  The
evaluation of both expressions is performed @i{inside} of the
@code{loop} binding environment, before the @code{loop} body.  This
allows the first value of @i{var} to come from the first value of
some other iteration variable, allowing such constructs as
@lisp
(loop for term in poly
      for ans first (car term) 
	      then (gcd ans (car term))
      finally (return ans))
@end lisp

@item for @i{var} from @i{expr1} @{to @i{expr2}@} @{by @i{expr3}@}
@c @item for @i{var} @{@i{data-type}@} from @i{expr1} @{to @i{expr2}@} @{by @i{expr3}@}
.loop_keyword_index for
This performs numeric iteration.  @i{var} is initialized to
@i{expr1}, and on each succeeding iteration is incremented by
@i{expr3} (default @code{1}).  If the @code{to} phrase is given, the
iteration terminates when @i{var} becomes greater than @i{expr2}.
Each of the expressions is evaluated only once, and the @code{to} and
@code{by} phrases may be written in either order.  Alternative keywords
may be used in place of @code{to}; this choice controls the direction
of stepping and the step at which the loop terminates.
@code{downto} instead of @code{to} says that @i{var} is decremented by
the step value, and the endtest is adjusted accordingly.  If
@code{below} is used instead of @code{to}, or @code{above} instead of
@code{downto}, the iteration terminates before @i{expr2} is
reached, rather than after.  Note that the @code{to} variant
appropriate for the direction of stepping must be used for the endtest
to be formed correctly;  i.e. the code will not work if @i{expr3}
is negative or zero.  If no limit-specifying clause is given, then the
direction of the stepping may be specified as decreasing by
using @code{downfrom} instead of @code{from}.  @code{upfrom} may also be
used instead of @code{from};  it forces the stepping direction to be
increasing.
@c The @i{data-type} defaults to @code{fixnum}.

@item for @i{var} being @i{expr} and its @i{path} ...
@itemx for @i{var} being @{each|the@} @i{path} ...
@c @item for @i{var} @{@i{data-type}@} being @i{expr} and its @i{path} ...
@c @itemx for @i{var} @{@i{data-type}@} being @{each|the@} @i{path} ...
.loop_keyword_index for
Provides a user-definable iteration facility.  @i{path} names
the manner in which the iteration is to be performed.  The ellipsis
indicates where various path dependent preposition/expression pairs
may appear.  See the section on Iteration Paths
((iteration-path-page)) for complete documentation.
@end table

@subsection Bindings
.loop_keyword_index with
'loop_topic variable bindings
	The @code{with} keyword may be used to establish initial
bindings, that is, variables that are local to the loop but are only
set once, rather than on each iteration.  The @code{with} clause looks like:
@lisp
@code{with @i{var1} @{= @i{expr1}@}
     @{and @i{var2} @{= @i{expr2}@}@}...}
@c @code{with @i{var1} @{@i{data-type}@} @{= @i{expr1}@}
@c      @{and @i{var2} @{@i{data-type}@} @{= @i{expr2}@}@}...}
@end lisp
If no @i{expr} is given, the variable is initialized to @code{nil}.
@c If no @i{expr} is given, the variable is initialized to the
@c appropriate value for its data type, usually @code{nil}.

	@code{with} bindings linked by @code{and} are performed in
parallel; those not linked are performed sequentially.  That is,
@lisp
(loop with a = (foo) and b = (bar) and c
      ...)
@end lisp
binds the variables like
@lisp
(let ((a (foo)) (b (bar)) c) ...)
@end lisp
whereas
@lisp
(loop with a = (foo) with b = (bar a) with c ...)
@end lisp
binds the variables like
@lisp
(let ((a (foo)))
  (let ((b (bar)))
    (let (c) ...)))
@end lisp
All @i{expr}'s in @code{with} clauses are evaluated in the order they
are written, in lambda expressions surrounding the generated
@code{prog}.  The @code{loop} expression
@lisp
(loop with a = @i{xa} and b = @i{xb}
      with c = @i{xc}
      for d = @i{xd} then (f d)
	and e = @i{xe} then (g e d)
      for p in @i{xp}
      with q = @i{xq}
      ...)
@end lisp
produces the following binding contour, where @code{t1} is a
@code{loop}-generated temporary:
@lisp
(let ((a xa) (b xb))
  (let ((c xc))
    (let ((d xd) (e xe))
      (let ((p nil) (t1 xp))
	(let ((q xq))
	  ...)))))
@end lisp
Because all expressions in @code{with} clauses are evaluated during the
variable binding phase, they are best placed near the front of the
@code{loop} form for stylistic reasons.

	For binding more than one variable with no particular
initialization, one may use the construct
@lisp
@code{with @i{variable-list} @{and ...@}}
@c @code{with @i{variable-list} @{@i{data-type-list}@} @{and ...@}}
@end lisp
as in
@lisp
with (i j k t1 t2) ...
@c with (i j k t1 t2) (fixnum fixnum fixnum) ...
@end lisp
@c A slightly shorter way of writing this is
@c @lisp
@c with (i j k) fixnum and (t1 t2) ...
@c @end lisp
These are cases of @i{destructuring} which @code{loop} handles
specially;  destructuring and data type keywords are discussed in
section (loop-destructuring-section).
@c and (loop-data-type-section).

@c 	Occasionally there are various implementational reasons 
@c for a variable @i{not} to be given a local type declaration.  If
@c this is necessary, the @code{nodeclare} clause may be used:
@c @code
@c @item nodeclare @i{variable-list}
@c 'loop_keyword_index nodeclare
@c The variables in @i{variable-list} are noted by @code{loop} as not
@c requiring local type declarations.  Consider the following:
@c @lisp
@c (declare (special k) (fixnum k))
@c (defun foo (l)
@c     (loop for x in l as k fixnum = (f x) ...))
@c @end lisp
@c If @code{k} did not have the @code{fixnum} data-type keyword given for
@c it, then @code{loop} would bind it to @code{nil}, and some compilers
@c would complain.  On the other hand, the @code{fixnum} keyword also
@c produces a local @code{fixnum} declaration for @code{k};  since @code{k}
@c is special, some compilers will complain (or error out).  The solution
@c is to do:
@c @lisp
@c (defun foo (l)
@c     (loop nodeclare (k)
@c 	  for x in l as k fixnum = (f x) ...))
@c @end lisp
@c which tells @code{loop} not to make that local declaration.  The
@c @code{nodeclare} clause must come @i{before} any reference to the
@c variables so noted.  Positioning it incorrectly will cause this clause
@c to not take effect, and may not be diagnosed.
@c @end table

@subsection Entrance and Exit

@table @code
@item initially @i{expression}
.loop_keyword_index initially
Puts @i{expression} into the @i{prologue} of the iteration.  It
will be evaluated before any other initialization code except for
initial bindings.  For the sake of good style, the @code{initially}
clause should therefore be placed after any @code{with} clauses but
before the main body of the loop.

@item finally @i{expression}
.loop_keyword_index finally
Puts @i{expression} into the @i{epilogue} of the loop, which is
evaluated when the iteration terminates (other than by an explicit
@code{return}).  For stylistic reasons, then, this clause should appear
last in the loop body.  Note that certain clauses may generate code
which terminates the iteration without running the epilogue code;
this behavior is noted with those clauses.  Most notable of these are
those described in the section (aggregated-boolean-tests-section),
Aggregated Boolean Tests.  This clause may be used to cause the loop
to return values in a non-standard way:
@lisp
(loop for n in l
      sum n into the-sum
      count t into the-count
      finally (return (quotient the-sum the-count)))
@end lisp
@end table

@subsection Side Effects
@table @code
@item do @i{expression}
@itemx doing @i{expression}
.loop_keyword_index do doing
@i{expression} is evaluated each time through the loop, as shown in
the @code{print-elements-of-list} example on
(print-elements-of-list-example).
@end table

@subsection Values
	The following clauses accumulate a return value for the
iteration in some manner.  The general form is
@lisp
@code{@i{type-of-collection expr} @{into @i{var}@}}
@c @code{@i{type-of-collection expr} @{@i{data-type}@} @{into @i{var}@}}
@end lisp
where @i{type-of-collection} is a @code{loop} keyword, and @i{expr}
is the thing being accumulated somehow.  If no @code{into} is
specified, then the accumulation will be returned when the @code{loop}
terminates.  If there is an @code{into}, then when the epilogue of the
@code{loop} is reached, @i{var} (a variable automatically bound
locally in the loop) will have been set to the accumulated
result and may be used by the epilogue code.  In this way, a user may
accumulate and somehow pass back multiple values from a single
@code{loop}, or use them during the loop.  It is safe to reference
these variables during the loop, but they should not be modified
until the epilogue code of the loop is reached.
For example,
@lisp
(loop for x in list
      collect (foo x) into foo-list
      collect (bar x) into bar-list
      collect (baz x) into baz-list
    finally (return (list foo-list bar-list baz-list)))
@end lisp
has the same effect as
@lisp
(do ((#:g0001 list (cdr #:g0001))
     (x) (foo-list) (bar-list) (baz-list))
    ((null #:g0001)
     (list (nreverse foo-list)
	   (nreverse bar-list)
	   (nreverse baz-list)))
   (setq x (car #:g0001))
   (setq foo-list (cons (foo x) foo-list))
   (setq bar-list (cons (bar x) bar-list))
   (setq baz-list (cons (baz x) baz-list)))
@end lisp
except that @code{loop} arranges to form the lists in the correct
order, obviating the @code{nreverse}s at the end, and allowing the
lists to be examined during the computation.  (This is how the
expression would print; this text would not read in properly because a
new uninterned symbol would be created by each use of 7#:*.)

@table @code

@item collect @i{expr} @{into @i{var}@}
@itemx collecting ...
.loop_keyword_index collect collecting
Causes the values of @i{expr} on each iteration to be collected
into a list.

@item nconc @i{expr} @{into @i{var}@}
@itemx nconcing ...
@itemx append ...
@itemx appending ...
.loop_keyword_index nconc nconcing append appending
Like @code{collect}, but the results are @code{nconc}'ed or
@code{append}'ed together as appropriate.
@lisp
(loop for i from 1 to 3
      nconc (list i (* i i)))
  => (1 1 2 4 3 9)
@end lisp

@item count @i{expr} @{into @i{var}@}
@c @item count @i{expr} @{into @i{var}@} @{@i{data-type}@}
@itemx counting ...
.loop_keyword_index count counting
If @i{expr} evaluates non-@code{nil}, a counter is incremented.
@c The @i{data-type} defaults to @code{fixnum}.

@item sum @i{expr} @{into @i{var}@}
@c @item sum @i{expr} @{@i{data-type}@} @{into @i{var}@}
@itemx summing ...
.loop_keyword_index sum summing
Evaluates @i{expr} on each iteration and accumulates the sum of all
the values.
@c @i{data-type} defaults to
@c @code{number}, which for all practical purposes is @code{notype}.  Note
@c that specifying @i{data-type} implies that @i{both} the sum and
@c the number being summed (the value of @i{expr}) will be of that type.

@item maximize @i{expr} @{into @i{var}@}
@c @item maximize @i{expr} @{@i{data-type}@} @{into @i{var}@}
@itemx minimize ...
.loop_keyword_index maximize minimize
Computes the maximum (or minimum) of @i{expr} over all
iterations.
@c @i{data-type} defaults to @code{number}.
Note that if
the loop iterates zero times, or if conditionalization prevents the
code of this clause from being executed, the result will be
meaningless.
@c If @code{loop} can determine that the arithmetic being
@c performed is not contagious (by virtue of @i{data-type} being
@c @code{fixnum}, @code{flonum}, or @code{small-flonum}), then it may choose
@c to code this by doing an arithmetic comparison rather than calling
@c either @code{max} or @code{min}.
@c As with the @code{sum} clause,
@c specifying @i{data-type} implies that both the result of the
@c @code{max} or @code{min} operation and the value being maximized or
@c minimized will be of that type.
@end table

	Not only may there be multiple accumulations in a
'loop_topic multiple accumulations
@code{loop}, but a single accumulation may come from multiple
places @i{within the same @code{loop} form}.  Obviously, the types of
the collection must be compatible.  @code{collect}, @code{nconc}, and
@code{append} may all be mixed, as may @code{sum} and @code{count}, and
@code{maximize} and @code{minimize}.  For example,
@lisp
(loop for x in '(a b c) for y in '((1 2) (3 4) (5 6))
      collect x
      append y)
  => (a 1 2 b 3 4 c 5 6)
@end lisp
.group
The following computes the average of the entries in the list
@i{list-of-frobs}:
@lisp
(loop for x in list-of-frobs
      count t into count-var
      sum x into sum-var
    finally (return (cli:// sum-var count-var)))
@end lisp
.end_group

@subsection Endtests
.loop_topic terminating the iteration
	The following clauses may be used to provide additional
control over when the iteration gets terminated, possibly causing
exit code (due to @code{finally}) to be performed and possibly returning
a value (e.g., from @code{collect}).

@table @code
@item while @i{expr}
.loop_keyword_index while
If @i{expr} evaluates to @code{nil}, the loop is exited, performing
exit code (if any) and returning any accumulated value.  The
test is placed in the body of the loop where it is written.  It may
appear between sequential @code{for} clauses.

@item until @i{expr}
.loop_keyword_index until
Identical to @code{while (not @i{expr})}.
@end table

	This may be needed, for example, to step through a strange
data structure, as in
@lisp
(loop until (top-of-concept-tree? concept)
      for concept = @i{expr} then (superior-concept concept)
      ...)
@end lisp
Note that the placement of the @code{until} clause before the @code{for}
clause is valid in this case because of the definition of this
particular variant of @code{for}, which @i{binds} @code{concept} to
its first value rather than setting it from inside the @code{loop}.

	The following may also be of use in terminating the iteration:
@defmac loop-finish
@code{(loop-finish)} causes the iteration to terminate ``normally'', like
implicit termination by an iteration-driving clause, or by the
use of @code{while} or @code{until}--the epilogue code (if any) will be
run, and any implicitly collected result will be returned as the value
of the @code{loop}.
For example,
@lisp
(loop for x in '(1 2 3 4 5 6)
      collect x
      do (cond ((= x 4) (loop-finish))))
 => (1 2 3 4)
@end lisp
This particular example would be better written as @code{until (= x 4)}
in place of the @code{do} clause.
@end defmac

@subsection Aggregated Boolean Tests
	All of these clauses perform some test and may immediately
terminate the iteration depending on the result of that test.

@table @code
@item always @i{expr}
.loop_keyword_index always
Causes the loop to return @code{t} if @i{expr} @code{always} evaluates
non-@code{null}.  If @i{expr} evaluates to @code{nil} the loop
immediately returns @code{nil}, without running the epilogue code (if
any, as specified with the @code{finally} clause);  otherwise, @code{t}
will be returned when the loop finishes, after the epilogue code has
been run.

@item never @i{expr}
.loop_keyword_index never
Causes the loop to return @code{t} if @i{expr} @code{never} evaluates
non-@code{null}.  This is equivalent to @code{always (not @i{expr})}.

@item thereis @i{expr}
.loop_keyword_index thereis
If @i{expr} evaluates non-@code{nil}, then the iteration is
terminated, and that value is returned without running the epilogue
code.
@end table

@subsection Conditionalization
.loop_topic conditionalizing clause(s)
	These clauses may be used to ``conditionalize'' the following
clause.  They may precede any of the side-effecting or value-producing
clauses, such as @code{do}, @code{collect}, @code{always}, or
@code{return}.

@table @code
@item when @i{expr}
@itemx if @i{expr}
.loop_keyword_index when if
.space 0
@c Make sure this starts it on a new line....
@c .break doesn't do it.
@c Will a ".space 0" do it?
If @i{expr} evaluates to @code{nil}, the following clause will be
skipped, otherwise not.

@item unless @i{expr}
.loop_keyword_index unless
This is equivalent to @code{when (not @i{expr}))}.
@end table

	Multiple conditionalization clauses may appear in sequence.
If one test fails, then any following tests in the immediate sequence,
as well as the clause being conditionalized, are skipped.

	Multiple clauses may be conditionalized under the same test by
joining them with @code{and}, as in
@lisp
(loop for i from a to b
      when (zerop (remainder i 3))
        collect i and do (print i))
@end lisp
which returns a list of all multiples of @code{3} from @code{a} to
@code{b} (inclusive) and prints them as they are being collected.

	If-then-else conditionals may be written using the @code{else} keyword, as in
@lisp
(loop for i from a to b
      when (oddp i)
        collect i into odd-numbers
      else collect i into even-numbers)
@end lisp
Multiple clauses may appear in an @code{else}-phrase, using @code{and} to join them
in the same way as above.

	Conditionals may be nested.  For example,
@lisp
(loop for i from a to b
      when (zerop (remainder i 3))
	do (print i)
	and when (zerop (remainder i 2))
	      collect i)
@end lisp
returns a list of all multiples of @code{6} from @code{a} to @code{b},
and prints all multiples of @code{3} from @code{a} to @code{b}.

	When @code{else} is used with nested conditionals, the ``dangling else''
ambiguity is resolved by matching the @code{else} with the innermost @code{when}
not already matched with an @code{else}.  Here is a complicated example.
@lisp
(loop for x in l
      when (atom x)
	when (memq x *distinguished-symbols*)
	  do (process1 x)
	else do (process2 x)
      else when (memq (car x) *special-prefixes*)
	     collect (process3 (car x) (cdr x))
	     and do (memoize x)
           else do (process4 x))
@end lisp

	Useful with the conditionalization clauses is the @code{return}
clause, which causes an explicit return of its argument as
the value of the iteration, bypassing any epilogue code.  That is,
@lisp
@code{when @i{expr1} return @i{expr2}}
@end lisp
is equivalent to
@lisp
@code{when @i{expr1} do (return @i{expr2})}
@end lisp
	Conditionalization of one of the ``aggregated boolean value''
clauses simply causes the test that would cause the iteration to
terminate early not to be performed unless the condition succeeds.
For example,
@lisp
(loop for x in l
      when (significant-p x)
	do (print x) (princ "is significant.")
	and thereis (extra-special-significant-p x))
@end lisp
does not make the @code{extra-special-significant-p} check unless the
@code{significant-p} check succeeds.

.group
	The format of a conditionalized clause is typically something
like
@lisp
@code{when @i{expr1} @i{keyword} @i{expr2}}
@end lisp
If @i{expr2} is the keyword @code{it}, then a variable is generated to
hold the value of @i{expr1}, and that variable gets substituted for
@i{expr2}.  Thus, the composition
@lisp
@code{when @i{expr} return it}
@end lisp
is equivalent to the clause
@lisp
@code{thereis @i{expr}}
@end lisp
and one may collect all non-null values in an iteration by saying
@lisp
@code{when @i{expression} collect it}
@end lisp
If multiple clauses are joined with @code{and}, the @code{it} keyword
may only be used in the first.  If multiple @code{when}s,
@code{unless}es, and/or @code{if}s occur in sequence, the value
substituted for @code{it} will be that of the last test performed.
The @code{it} keyword is not recognized in an @code{else}-phrase.
.end_group

@subsection Miscellaneous Other Clauses

@table @code
@item named @i{name}
.loop_keyword_index named
Defines a @code{block} named @i{name} around the code for the @code{loop},
so that one may use @code{return-from} to return explicitly out of
this particular @code{loop}.  This is obsolete now that @code{block}
exists; it is cleaner to write @code{(@code{block} @i{name} ...)}
around the @code{loop}.

Note that every @code{loop} generates a @code{block} named @code{nil},
so the function @code{return} can always be used to exit the innermost
@code{loop} (assuming no other construct generating a @code{block} @code{nil} intervenes).

@item return @i{expression}
.loop_keyword_index return
Immediately returns the value of @i{expression} as the value of the
loop, without running the epilogue code.  This is most useful with
some sort of conditionalization, as discussed in the previous
section.  Unlike most of the other clauses, @code{return} is not
considered to ``generate body code'', so it is allowed to occur between
iteration clauses, as in
@lisp
(loop for entry in list
      when (not (numberp entry))
	return (ferror ...)
      as frob = (times entry 2)
      ...)
@end lisp
Although @code{ferror} is called only for effect, @code{return} is used
so that it can be called from that point in the @code{loop}.

If one instead desires the loop to have some return value when it
finishes normally, one may place a call to the @code{return} function in the
epilogue (with the @code{finally} clause, (loop-finally-clause)).
@end table

@section  Loop Synonyms

@defmac define-loop-macro keyword
May be used to make @i{keyword}, a @code{loop} keyword (such as
@code{for}), into a Lisp macro that may introduce a @code{loop} form.
For example, after evaluating
@lisp
(define-loop-macro for),
@end lisp
one may now write an iteration as
@lisp
(for i from 1 below n do ...)
@end lisp
@end defmac
	This facility exists primarily for diehard users of a
predecessor of @code{loop}.  Its unconstrained use is not recommended,
as it tends to decrease the transportability of the code and
needlessly uses up a function name.

@c @section  "Data Types"
@c .loop_topic data type keywords
@c 	In many of the clause descriptions, an optional @i{data-type}
@c is shown.  A @i{data-type} in this sense is an atomic symbol, and is
@c recognizable as such by @code{loop}.  These are used for declaration
@c and initialization purposes;  for example, in
@c @lisp
@c (loop for x in l
@c       maximize x flonum into the-max
@c       sum x flonum into the-sum
@c       ...)
@c @end lisp
@c the @code{flonum} data-type keyword for the @code{maximize} clause
@c says that the result of the @code{max} operation, and its "argument"
@c (@code{x}), will both be flonums;  hence @code{loop} may choose to code
@c this operation specially since it knows there can be no contagious
@c arithmetic.  The @code{flonum} data-type keyword for the @code{sum}
@c clause behaves similarly, and in addition causes @code{the-sum} to be
@c correctly initialized to @code{0.0} rather than @code{0}.  The
@c @code{flonum} keywords will also cause the variables @code{the-max} and
@c @code{the-sum} to be declared to be @code{flonum}, in implementations
@c where such a declaration exists.  In general, a numeric data-type more
@c specific than @code{number}, whether explicitly specified or defaulted,
@c is considered by @code{loop} to be license to generate code using
@c type-specific arithmetic functions where reasonable.  The following
@c data-type keywords are recognized by @code{loop} (others may be
@c defined;  for that, consult the source code):
@c
@c @code
@c @item fixnum
@c An implementation-dependent limited range integer.
@c @item flonum
@c An implementation-dependent limited precision floating point number.
@c @item small-flonum
@c This is recognized in the Zetalisp implementation only, where its
@c only significance is for initialization purposes, since no such
@c declaration exists.
@c @item integer
@c Any integer (no range restriction).
@c @item number
@c Any number.
@c @item notype
@c Unspecified type (i.e., anything else).
@c @end table
@c 	Note that explicit specification of a non-numeric type for a
@c numeric operation (such as the @code{summing} clause) may cause a variable
@c to be initialized to @code{nil} when it should be @code{0}.
@c 	If local data-type declarations must be inhibited, one can use
@c the @code{nodeclare} clause, which is described on
@c (loop-nodeclare-clause).

@section  Destructuring
	@i{Destructuring} provides one with the ability to
``simultaneously'' assign or bind multiple variables to components of
some data structure.  Typically this is used with list structure.
For example,
@lisp
(loop with (foo . bar) = '(a b c) ...)
@end lisp
has the effect of binding @code{foo} to @code{a} and @code{bar} to @code{(b
c)}.

	@code{loop}'s destructuring support is intended to parallel and
perhaps augment that provided by the host Lisp implementation, with a goal
of minimally providing destructuring over list structure patterns.
Thus, in Lisp implementations with no system destructuring support at
all, one may still use list-structure patterns as @code{loop} iteration
variables and in @code{with} bindings.
@c In NIL, @code{loop} also supports destructuring over vectors.

	One may specify the data types of the components of a pattern
by using a corresponding pattern of the data type keywords in place of
a single data type keyword.  This syntax remains unambiguous because
wherever a data type keyword is possible, a @code{loop} keyword is
the only other possibility.  Thus, if one wants to do
@lisp
(loop for x in l
      as i = (car x)
      and j = (cadr x)
      and k = (cddr x)
      ...)
@c (loop for x in l
@c       as i fixnum = (car x)
@c       and j fixnum = (cadr x)
@c       and k fixnum = (cddr x)
@c       ...)
@end lisp
and no reference to @code{x} is needed, one may instead write
@lisp
(loop for (i j . k) in l ...)
@c (loop for (i j . k) (fixnum fixnum . fixnum) in l ...)
@end lisp
To allow some abbreviation of the data type pattern, an atomic
component of the data type pattern is considered to state that all
components of the corresponding part of the variable pattern are of
that type.  That is, the previous form could be written as
@lisp
(loop for (i j . k) in l ...)
@c (loop for (i j . k) fixnum in l ...)
@end lisp
@c This generality allows binding of multiple typed variables in a
@c reasonably concise manner, as in
@c @lisp
@c (loop with (a b c) and (i j k) ...)
@c (loop with (a b c) and (i j k) fixnum ...)
@c @end lisp
@c which binds @code{a}, @code{b}, and @code{c} to @code{nil} and @code{i},
@c @code{j}, and @code{k} to @code{0} for use as temporaries during the
@c iteration, and declares @code{i}, @code{j}, and @code{k} to be fixnums
@c for the benefit of the compiler.
.group
@lisp
.space 1
(defun map-over-properties (fn symbol)
   (loop for (propname propval) on (plist symbol) by 'cddr
	 do (funcall fn symbol propname propval)))
@end lisp
maps @i{fn} over the properties on @i{symbol}, giving it arguments
of the symbol, the property name, and the value of that property.
.end_group
@c 	In Lisp implementations where @code{loop} performs its own
@c destructuring, notably Multics Maclisp and Zetalisp, one can
@c cause @code{loop} to use already provided destructuring support
@c instead:
@c @defvar si:loop-use-system-destructuring?
@c This variable exists @i{only} in @code{loop} implementations in Lisps
@c that do not provide destructuring support in the default environment.
@c It is by default @code{nil}.  If changed, then @code{loop} will behave
@c as it does in Lisps that @i{do} provide destructuring support:
@c destructuring binding will be performed using @code{let}, and
@c destructuring assignment will be performed using @code{desetq}.
@c Presumably if one's personalized environment supplies these macros,
@c then one should set this variable to @code{t};  however, there is
@c little if any efficiency loss if this is not done.
@c @end defvar

@section  The Iteration Framework
	This section describes the way @code{loop} constructs
iterations.  It is necessary if you will be writing your own iteration
paths, and may be useful in clarifying what @code{loop} does with its
input.

	@code{loop} considers the act of @i{stepping} to have four
possible parts.  Each iteration-driving clause has some or all of these
four parts, which are executed in this order:
@table @i
@item pre-step-endtest
This is an endtest which determines if it is safe to step to the next
value of the iteration variable.
@item steps
Variables that get stepped.  This is internally manipulated as a
list of the form @code{(@i{var1} @i{val1} @i{var2} @i{val2}
...)};  all of those variables are stepped in parallel, meaning that
all of the @i{val}s are evaluated before any of the @i{var}s are
set.
@item post-step-endtest
Sometimes you can't see if you are done until you step to the next
value;  that is, the endtest is a function of the stepped-to value.
@item pseudo-steps
Other things that need to be stepped.  This is typically used for
internal variables that are more conveniently stepped here, or to
set up iteration variables that are functions of some internal
variable(s) actually driving the iteration.  This is a list
like @i{steps}, but the variables in it do not get stepped in
parallel.
@end table
	The above alone is actually insufficient in just about all
the iteration-driving clauses that @code{loop} handles.  What is missing
is that in most cases the stepping and testing for the first time
through the loop is different from that of all other times.  So, what
@code{loop} deals with is two four-tuples as above;  one for the first
iteration, and one for the rest.  The first may be thought of as
describing code that immediately precedes the loop in the @code{prog},
and the second following the body code--in fact, @code{loop} does
just this, but severely perturbs it in order to reduce code
duplication.  Two lists of forms are constructed in parallel:  one is
the first-iteration endtests and steps, the other the
remaining-iterations endtests and steps.  These lists have dummy
entries in them so that identical expressions will appear in the same
position in both.  When @code{loop} is done parsing all of the clauses,
these lists get merged back together such that corresponding identical
expressions in both lists are not duplicated unless they are ``simple''
and it is worth doing.

	Thus, one @i{may} get some duplicated code if one has
multiple iterations.  Alternatively, @code{loop} may decide to use and
test a flag variable that indicates whether one iteration has been
performed.  In general, sequential iterations have less overhead than
parallel iterations, both from the inherent overhead of stepping
multiple variables in parallel, and from the standpoint of potential
code duplication.

	One other point that must be noted about parallel stepping is
that although the user iteration variables are guaranteed to be
stepped in parallel, the placement of the endtest for any particular
iteration may be either before or after the stepping.  A notable case
of this is
@lisp
(loop for i from 1 to 3 and dummy = (print 'foo)
      collect i)
  => (1 2 3)
@end lisp
but prints @code{foo} @i{four} times.  Certain other constructs, such
as @code{for @i{var} on}, may or may not do this depending on the
particular construction.

	This problem also means that it may not be safe to examine an
iteration variable in the epilogue of the loop form.  As a general
rule, if an iteration-driving clause implicitly supplies an endtest,
then one cannot know the state of the iteration variable when the loop
terminates.  Although one can guess on the basis of whether the
iteration variable itself holds the data upon which the endtest is
based, that guess @i{may} be wrong.  Thus,
@lisp
(loop for subl on @i{expr}
      ...
      finally (f subl))
@end lisp
is incorrect, but
@lisp
(loop as frob = @i{expr} while (g frob)
      ...
      finally (f frob))
@end lisp
is safe because the endtest is explicitly dissociated from the
stepping.

@section  Iteration Paths
	Iteration paths provide a mechanism for user extension of
iteration-driving clauses.  The interface is constrained so that the
definition of a path need not depend on much of the internals of
@code{loop}.  The typical form of an iteration path is
@lisp
for @i{var} being @{each|the@} @i{path} @{@i{preposition1} @i{expr1}@}...
@c for @i{var} @{@i{data-type}@} being @{each|the@} @i{path} @{@i{preposition1} @i{expr1}@}...
@end lisp
@i{path} is an atomic symbol which is defined as a @code{loop} path
function.
@c The usage and defaulting of @i{data-type} is up to the path function.
Any number of preposition/expression pairs may be
present; the prepositions allowable for any particular path are
defined by that path.  For example,
@lisp
(loop for x being the array-elements of my-array from 1 to 10
      ...)
@end lisp
To enhance readability, paths are usually defined in both the
singular and plural forms;  this particular example could have been
written as
@lisp
(loop for x being each array-element of my-array from 1 to 10
      ...)
@end lisp

	Another format, which is not so generally applicable, is
@lisp
for @i{var} being @i{expr0} and its @i{path} @{@i{preposition1} @i{expr1}@}...
@c for @i{var} @{@i{data-type}@} being @i{expr0} and its @i{path} @{@i{preposition1} @i{expr1}@}...
@end lisp
In this format, @i{var} takes on the value of @i{expr0} the first
time through the loop.  Support for this format is usually limited to
paths for which the next value is obtained by operating on the previous value.
Thus, we can hypothesize the @code{cdrs} path, such that
@lisp
(loop for x being the cdrs of '(a b c . d) collect x)
 => ((b c . d) (c . d) d)
@end lisp
but
@lisp
(loop for x being '(a b c . d) and its cdrs collect x)
 => ((a b c . d) (b c . d) (c . d) d)
@end lisp
To satisfy the anthropomorphic among you, @code{his}, @code{her}, or
@code{their} may be substituted for the @code{its} keyword, as may
@code{each}.  Egocentricity is not condoned.  Some example uses of
iteration paths are shown in section (predefined-paths-section).

	Very often, iteration paths step internal variables which the
user does not specify, such as an index into some data-structure.
Although in most cases the user does not wish to be concerned with
such low-level matters, it is occasionally useful to have a handle on
such things.  @code{loop} provides an additional syntax with which one
may provide a variable name to be used as an ``internal'' variable by an
iteration path, with the @code{using} ``prepositional phrase''.
'loop_path_preposition_index using
The @code{using} phrase is placed with the other phrases associated
with the path, and contains any number of keyword/variable-name pairs:
@lisp
(loop for x being the array-elements of a using (index i)
      ...)
@end lisp
which says that the variable @code{i} should be used to hold the index
of the array being stepped through.  The particular keywords which may
be used are defined by the iteration path;  the @code{index} keyword is
recognized by all @code{loop} sequence paths (section
(loop-sequence-section)).  Note that any individual @code{using}
phrase applies to only one path;  it is parsed along with the
``prepositional phrases''.  It is an error if the path does not call for
a variable using that keyword.

	By special dispensation, if a @i{path} is not recognized,
then the @code{default-loop-path} path will be invoked upon a syntactic
transformation of the original input. Essentially, the @code{loop} fragment
'loop_path_preposition_index in
@lisp
for @i{var} being @i{frob}
@end lisp
is taken as if it were
@lisp
for @i{var} being default-loop-path in @i{frob}
@end lisp
and
@lisp
for @i{var} being @i{expr} and its @i{frob} ...
@end lisp
is taken as if it were
@lisp
for @i{var} being @i{expr} and its default-loop-path in @i{frob}
@end lisp
Thus, this ``undefined path hook'' only works if the
@code{default-loop-path} path is defined.  Obviously, the use of this
``hook'' is competitive, since only one such hook may be in use, and the
potential for syntactic ambiguity exists if @i{frob} is the name of
a defined iteration path.  This feature is not for casual use;  it is
intended for use by large systems that wish to use a special
syntax for some feature they provide.
@c In Brand X, for example, the two formats
@c @lisp
@c for @i{var} being each @i{p} of @i{expr}
@c @end lisp
@c where @i{p} is not a @code{loop} path, and
@c @lisp
@c for @i{var} being the property-values of @i{expr} in '@i{p}
@c @end lisp
@c are equivalent, having the effect of stepping @i{x} through the
@c @i{p} property of @i{expr} (Brand X manipulates "multiple
@c valued" properties).  Note that @i{p} is implicitly quoted by the
@c first format; this behavior is defined by the default loop path
@c function which Brand X defines, not by @code{loop}.

@subsection Pre-Defined Paths
	@code{loop} comes with two pre-defined iteration path
functions;  one implements a @code{mapatoms}-like iteration path
facility and the other is used for defining iteration paths for
stepping through sequences.

.loop_subsection The Interned-Symbols Path
.loop_path_index interned-symbols
'loop_path_preposition_index in
	The @code{interned-symbols} iteration path is like a
@code{mapatoms} for @code{loop}.
@lisp
(loop for sym being interned-symbols ...)
@end lisp
iterates over all of the symbols in the current package and its
superiors.
@c (or, in Maclisp, the current obarray).
This is the same set
of symbols over which @code{mapatoms} iterates, although not
necessarily in the same order.  The particular package to look in may
be specified as in
@lisp
(loop for sym being the interned-symbols in @i{package} ...)
@end lisp
which is like giving a second argument to @code{mapatoms}.

You can restrict the iteration to the symbols directly present in
the specified package, excluding inherited symbols, using the
@code{local-interned-symbols} path:
@lisp
(loop for sym being the local-interned-symbols  @{in @i{package}@}
      ...)
@end lisp
.space 1
Example:
@lisp
(defun my-apropos (sub-string &optional (pkg package))
    (loop for x being the interned-symbols in pkg
	  when (string-search sub-string x)
	    when (or (boundp x) (fboundp x) (plist x))
	      do (print-interesting-info x)))
@end lisp
In the Zetalisp and NIL implementations of @code{loop}, a package
specified with the @code{in} preposition may be anything acceptable to
the @code{pkg-find-package} function.  The code generated by this path
will contain calls to internal @code{loop} functions, with the effect
that it will be transparent to changes to the implementation of
packages.  In the Maclisp implementation, the obarray @i{must} be an
array pointer, @i{not} a symbol with an @code{array} property.

.loop_subsection The Hash-Elements Path
.loop_path_index hash-elements
'loop_path_preposition_index of
'loop_path_preposition_index with-key
	The @code{hash-elements} path provides an effect like that of
the function @code{maphash}.  It can find all the occupied entries in a hash table.
@lisp
(loop for value being the hash-elements of @i{hash-table} ...)
@end lisp
iterates over all the occupied entries in @i{hash-table}.  Each time,
@i{value} is the value stored in the entry.  To examine the keys of the
entries as well, write
@lisp
(loop for value being the hash-elements of @i{hash-table}
      with-key keysym ...)
@end lisp
and then @code{keysym}'s value each will be the hash key that corresponds to @i{value}.

.loop_subsection Sequence Iteration
	One very common form of iteration is done over the elements
of some object that is accessible by means of an integer index.
@code{loop} defines an iteration path function for doing this in a
general way and provides a simple interface to allow users to define
iteration paths for various kinds of ``indexable'' data.

@defmac define-loop-sequence-path path-name-or-names fetch-fun size-fun &optional sequence-type default-var-type
@i{path-name-or-names} is either an atomic path name or list of path
names.  @i{fetch-fun} is a function of two arguments, the sequence
and the index of the item to be fetched.  (Indexing is assumed to be
zero-origined.)  @i{size-fun} is a function of one argument, the
sequence;  it should return the number of elements in the sequence.
@i{sequence-type} is the name of the data-type of the sequence, and
@i{default-var-type} the name of the data-type of the elements of
the sequence.  These are applicable to use of @code{loop} in other
Lisp systems; on the Lisp Machine they might as well be omitted.
@end defmac

.group
   The Zetalisp implementation of @code{loop} utilizes the
Zetalisp array manipulation primitives to define both
@code{array-element} and @code{array-elements} as iteration paths:
'loop_path_index array-elements
.nofill
7(define-loop-sequence-path (array-element array-elements)
    aref array-active-length)*
.fill
.unbreak
Then, the @code{loop} clause
'loop_path_preposition_index of
@lisp
for @i{var} being the array-elements of @i{array}
@end lisp
will step @i{var} over the elements of @i{array}, starting from
element 0.  The sequence path function also accepts @code{in} as a
synonym for @code{of}.
.end_group
	The range and stepping of the iteration may be specified with
the use of all of the same keywords which are accepted by the @code{loop}
arithmetic stepper (@code{for @i{var} from ...});  they are
@code{by}, @code{to}, @code{downto}, @code{from}, @code{downfrom},
@code{below}, and @code{above}, and are interpreted in the same manner.
Thus,
@lisp
(loop for @i{var} being the array-elements of @i{array}
	  from 1 by 2
      ...)
@end lisp
steps @i{var} over all of the odd elements of @i{array}, and
@lisp
(loop for @i{var} being the array-elements of @i{array}
	  downto 0
      ...)
@end lisp
steps in reverse order.
.space 1
@lisp
(define-loop-sequence-path (vector-elements vector-element)
    vref vector-length notype notype)
@end lisp
is how the @code{vector-elements} iteration path can be defined in NIL
(which it is).  One can then do such things as
@lisp
(defun cons-a-lot (item &restv other-items)
    (and other-items
	 (loop for x being the vector-elements of other-items
	       collect (cons item x))))
@end lisp
	All such sequence iteration paths allow one to specify the
variable to be used as the index variable, by use of the @code{index}
keyword with the @code{using} prepositional phrase, as described (with
an example) on (loop-using-crock).

.loop_insert_for_NIL "lsbdoc;()path >"

@subsection Defining Paths

	This section and the next may not be of interest to those
not interested in defining their own iteration paths.

	 In addition to the code which defines the iteration (section
(loop-iteration-framework-section)), a @code{loop} iteration clause (e.g.
a @code{for} or @code{as} clause) produces variables to be bound and
pre-iteration (@i{prologue}) code.  This breakdown allows a
user-interface to @code{loop} which does not have to depend on or know
about the internals of @code{loop}.  To complete this separation, the
iteration path mechanism parses the clause before giving it to the user
function that will return those items.  A function to generate code for
a path may be declared to @code{loop} with the @code{define-loop-path}
function:
@defmac define-loop-path pathname-or-names path-function list-of-allowable-prepositions &rest data
This defines @i{path-function} to be the handler for the path(s)
@i{path-or-names}, which may be either a symbol or a list of
symbols.  Such a handler should follow the conventions described
below.  The @i{datum-i} are optional;  they are passed in to
@i{path-function} as a list.
@end defmac

The handler will be called with the following arguments:
@table @i
@item path-name
The name of the path that caused the path function to be invoked.
@item variable
The ``iteration variable''.
@item data-type
The data type supplied with the iteration variable, or @code{nil} if
none was supplied.  This is a facility of the @code{loop} intended for
other Lisp systems in which declaring the type of a variable produces
more efficient code.  It is not documented in this manual since it is
never useful on the Lisp Machine.
@item prepositional-phrases
This is a list with entries of the form @i{(preposition
expression)}, in the order in which they were collected.  This may
also include some supplied implicitly (e.g. an @code{of} phrase when
the iteration is inclusive, and an @code{in} phrase for the
@code{default-loop-path} path); the ordering will show the order of
evaluation that should be followed for the expressions.
@item inclusive?
This is @code{t} if @i{variable} should have the starting point of
the path as its value on the first iteration (by virtue of being
specified with syntax like @code{for @i{var} being @i{expr} and its
@i{path}}), @code{nil} otherwise.  When @code{t}, @i{expr}
will appear in @i{prepositional-phrases} with the @code{of}
preposition;  for example, @code{for x being foo and its cdrs} gets
@i{prepositional-phrases} of @code{((of foo))}.
@item allowed-prepositions
This is the list of allowable prepositions declared for the path
that caused the path function to be invoked.  It and @i{data}
(immediately below) may be used by the path function such that a
single function may handle similar paths.
@item data
This is the list of ``data'' declared for the path that caused the
path function to be invoked.  It may, for instance, contain a
canonicalized path, or a set of functions or flags to aid the
path function in determining what to do.  In this way, the same
path function may be able to handle different paths.
@end table
	The handler should return a list of either six or ten
elements:
@table @i
@item variable-bindings
This is a list of variables that need to be bound.  The entries in it
may be of the form @i{variable} or (@i{variable} @i{expression}).
@c or (@i{variable} @i{expression} @i{data-type}).
Note that it is
the responsibility of the handler to make sure the iteration variable
gets bound.  All of these variables will be bound in parallel;
if initialization of one depends on others, it should be done with a
@code{setq} in the @i{prologue-forms}.  Returning only the variable
without any initialization expression is not allowed if the variable
is a destructuring pattern.
@item prologue-forms
This is a list of forms that should be included in the @code{loop}
prologue.
@item the four items of the iteration specification
These are the four items described in section
(loop-iteration-framework-section),
(loop-iteration-framework-page):  @i{pre-step-endtest},
@i{steps}, @i{post-step-endtest}, and @i{pseudo-steps}.
@item another four items of iteration specification
If these four items are given, they apply to the first iteration, and
the previous four apply to all succeeding iterations;  otherwise, the
previous four apply to @i{all} iterations.
@end table

	Here are the routines that are used by @code{loop} to compare
keywords for equality.  In all cases, a @i{token} may be any Lisp
object, but a @i{keyword} is expected to be an atomic symbol.  In
certain implementations these functions may be implemented as macros.

@defun si:loop-tequal token keyword
This is the @code{loop} token comparison function.  @i{token} is any Lisp
object;  @i{keyword} is the keyword it is to be compared
against.  It returns @code{t} if they represent the same token,
comparing in a manner appropriate for the implementation.
@end defun

@defun si:loop-tmember token keyword-list
The @code{member} variant of @code{si:loop-tequal}.
@end defun

@defun si:loop-tassoc token keyword-alist
The @code{assoc} variant of @code{si:loop-tequal}.
@end defun

	If an iteration path function desires to make an internal
variable accessible to the user, it should call the following function
instead of @code{gensym}:
'loop_path_preposition_index using
@defun si:loop-named-variable keyword
This should only be called from within an iteration path function.  If
@i{keyword} has been specified in a @code{using} phrase for this
path, the corresponding variable is returned;  otherwise, @code{gensym}
is called and that new symbol returned.  Within a given path function,
this routine should only be called once for any given keyword.

If the user specifies a @code{using} preposition containing any keywords
for which the path function does not call @code{si:loop-named-variable},
@code{loop} will inform the user of his error.
@end defun

.loop_subsection Path Definition Example
	Here is an example function that defines the
@code{string-characters} iteration path.  This path steps a variable
through all of the characters of a string.  It accepts the format
@lisp
(loop for @i{var} being the string-characters of @i{str} ...)
@end lisp
@c I may regret this later:
.page
	The function is defined to handle the path by
@lisp
(define-loop-path string-characters string-chars-path (of))
@exdent Here is the function:
(defun string-chars-path (path-name variable data-type
			  prep-phrases inclusive?
			  allowed-prepositions data
			  &aux (bindings nil)
			       (prologue nil)
			       (string-var (gensym))
			       (index-var (gensym))
			       (size-var (gensym)))
   allowed-prepositions data 1; unused variables*
   data-type
   1; To iterate over the characters of a string, we need*
   1; to save the string, save the size of the string,*
   1; step an index variable through that range, setting*
   1; the user's variable to the character at that index.*
@c    1; Default the data-type of the user's variable:*
@c    (cond ((null data-type) (setq data-type 'fixnum)))
   1; We support exactly one ``preposition'', which is required,*
   1; so this check suffices:*
   (cond ((null prep-phrases)
	  (ferror nil "OF missing in ~S iteration path of ~S"
		  path-name variable)))
   1; We do not support ``inclusive'' iteration:*
   (cond ((not (null inclusive?))
	  (ferror nil
	    "Inclusive stepping not supported in ~S path ~
	     of ~S (prep phrases = ~:S)"
	    path-name variable prep-phrases)))
   1; Set up the bindings*
   (setq bindings (list (list variable nil)
			(list string-var (cadar prep-phrases))
			(list index-var 0)
			(list size-var 0)))
   1; Now set the size variable*
   (setq prologue (list `(setq ,size-var (string-length
					    ,string-var))))
   1; and return the appropriate stuff, explained below.*
   (list bindings prologue
	 `(= ,index-var ,size-var)
	 nil nil
	 (list variable `(aref ,string-var ,index-var)
	       index-var `(1+ ,index-var))))
@end lisp

	The first element of the returned list is the bindings.  The
second is a list of forms to be placed in the @i{prologue}.  The
remaining elements specify how the iteration is to be performed.  This
example is a particularly simple case, for two reasons:  the actual
``variable of iteration'', @code{index-var}, is purely internal
(being @code{gensym}med), and the stepping of it (@code{1+}) is such
that it may be performed safely without an endtest.  Thus
@code{index-var} may be stepped immediately after the setting of the
user's variable, causing the iteration specification for the first
iteration to be identical to the iteration specification for all
remaining iterations.  This is advantageous from the standpoint of the
optimizations @code{loop} is able to perform, although it is frequently
not possible due to the semantics of the iteration (e.g., @code{for
@i{var} first @i{expr1} then @i{expr2}}) or to subtleties of
the stepping.  It is safe for this path to step the user's variable in
the @i{pseudo-steps} (the fourth item of an iteration specification)
rather than the ``real'' steps (the second), because the step value can
have no dependencies on any other (user) iteration variables.  Using
the pseudo-steps generally results in some efficiency gains.

	If one desired the index variable in the above definition to
be user-accessible through the @code{using} phrase feature with the
'loop_path_preposition_index using
@code{index} keyword, the function would need to be changed in two
ways.  First, @code{index-var} should be bound to
@code{(si:loop-named-variable 'index)} instead of @code{(gensym)}.
Secondly, the efficiency hack of stepping the index variable ahead of
the iteration variable must not be done.  This is effected by changing
the last form to be
@lisp
(list bindings prologue
      nil
      (list index-var `(1+ ,index-var))
      `(= ,index-var ,size-var)
      (list variable `(aref ,string-var ,index-var))
      nil
      nil
      `(= ,index-var ,size-var)
      (list variable `(aref ,string-var ,index-var)))
@end lisp
Note that although the second @code{`(= ,index-var ,size-var)} could
have been placed earlier (where the second @code{nil} is), it is best
for it to match up with the equivalent test in the first iteration
specification grouping.

@c This needs more work.  More examples are needed.
@c Everything needs more work....

@chapter Defstruct
@cindex structures
@cindex defstruct
@cindex record (structure)
@c Macro-defining macros!!!!!
@cindex macro defining macros

	@code{defstruct} provides a facility in Lisp for creating and
using aggregate datatypes with named elements.  These are like
structures in PL/I, or records in Pascal.  In the last two chapters we
saw how to use macros to extend the control structures of Lisp; here we
see how they can be used to extend Lisp's data structures as well.

@section  Introduction to Structure Macros

	To explain the basic idea, assume you were writing a Lisp
program that dealt with space ships.  In your program, you want to
represent a space ship by a Lisp object of some kind.  The interesting
things about a space ship, as far as your program is concerned, are
its position (@i{x} and @i{y}), velocity (@i{x} and @i{y}), and mass.  How do you
represent a space ship?

	Well, the representation could be a list of the x-position,
@i{y} position, and so on.  Equally well it could be an array of five
elements, the zeroth being the @i{x} position, the first being the
@i{y} position, and so on.  The problem with both of these representations
is that the ``elements'' (such as @i{x} position) occupy places in the object
which are quite arbitrary, and hard to remember (Hmm, was the mass the
third or the fourth element of the array?).  This would make programs
harder to write and read.  It would not be obvious when reading
a program that an expression such as @code{(cadddr ship1)} or @code{(aref ship2 3)}
means ``the @i{y} component of the ship's velocity'', and it would be very easy
to write @code{caddr} in place of @code{cadddr}.

What we would like to see are names, easy to remember and to understand.
If the symbol @code{foo} were bound to a representation of a space ship, then
@lisp
(ship-x-position foo)
@end lisp
could return its @i{x} position, and
@lisp
(ship-y-position foo)
@end lisp
its @i{y} position, and so forth.  The @code{defstruct} facility does just this.

	@code{defstruct} itself is a macro which defines a structure.  For the
space ship example above, we might define the structure by saying:
@lisp
(defstruct (ship)
  "Represents a space ship."
  ship-x-position
  ship-y-position
  ship-x-velocity
  ship-y-velocity
  ship-mass)
@end lisp

This says that every @code{ship} is an object with five named components.
(This is a very simple case of @code{defstruct}; we will see the general form
later.)  The evaluation of this form does several things.  First, it
defines @code{ship-x-position} to be a function which, given a ship, returns
the @i{x} component of its position.  This is called an @i{accessor function},
because it @i{accesses} a component of a structure.
@cindex accessor function
@code{defstruct} defines the other four accessor functions analogously.

@code{defstruct} also defines @code{make-ship} to be a macro or function
(you can specify which one) that can create a @code{ship} object.  So @code{(setq s
(make-ship))} makes a new ship, and sets @code{s} to it.  This is
called the @i{constructor}, because it constructs a new structure.
@cindex constructor

We also want to be able to change the contents of a structure.  To do this,
we use the @code{setf} macro (see (setf-fun)), as follows (for example):
@lisp
(setf (ship-x-position s) 100)
@end lisp
Here @code{s} is bound to a ship, and after the evaluation of the @code{setf}
form, the @code{ship-x-position} of that ship is 100.  Another way
to change the contents of a structure is to use the alterant macro,
which is described later, in (using-defstruct-alterant).

How does all this map into the familiar primitives of Lisp?  In this simple
example, we left the choice of implementation technique up to
@code{defstruct}; by default, it chooses to represent a ship as an array.  The array has
five elements, which are the five components of the ship.  The accessor
functions are defined thus:
@lisp
(defun ship-x-position (ship)
  (aref ship 0))
@end lisp
The constructor form @code{(make-ship)} performs @code{(make-array 5)}, which
makes an array of the appropriate size to be a ship.  Note that a program which
uses ships need not contain any explicit knowledge that ships are represented
as five-element arrays; this is kept hidden by @code{defstruct}.

The accessor functions are not actually ordinary functions; instead they
are substs (see (subst)).  This difference has two implications: it allows
@code{setf} to understand the accessor functions, and it allows the compiler to
substitute the body of an accessor function directly into any function that uses it,
making compiled programs that use @code{defstruct} exactly equal in efficiency to
programs that ``do it by hand''.  Thus writing @code{(ship-mass s)} is exactly
equivalent to writing @code{(aref s 4)}, and writing @code{(setf (ship-mass s) m)}
is exactly equivalent to writing @code{(setf (aref s 4) m)}, when the program is compiled.
It is also possible to tell @code{defstruct} to implement the accessor
functions as macros; this is not normally done in Zetalisp, however.

	We can now use the @code{describe-defstruct} function to look at the
@code{ship} object, and see what its contents are:
@lisp
(describe-defstruct x 'ship) =>

#<art-q-5 17073131> is a ship
   ship-x-position:              100
   ship-y-position:              nil
   ship-x-velocity:              nil
   ship-y-velocity:              nil
   ship-mass:                    nil
#<art-q-5 17073131>
@end lisp
(The @code{describe-defstruct} function is explained more fully on
(describe-defstruct-fun).)

	By itself, this simple example provides a powerful structure
definition tool.  But, in fact, @code{defstruct} has many other features.  First
of all, we might want to specify what kind of Lisp object to use for the
``implementation'' of the structure.  The example above implemented a ship
as an array, but @code{defstruct} can also implement structures as array-leaders,
lists, and other things.  (For array-leaders, the accessor functions call
@code{array-leader}, for lists, @code{nth}, and so on.)

	Most structures are implemented as arrays.  Lists take slightly less
storage, but elements near the end of a long list are slower to access.
Array leaders allow you to have a homogeneous aggregate (the array)
and a heterogeneous aggregate with named elements (the leader) tied
together into one object.  Packages are this sort of an object,
and so are the strings which Zmacs uses for storing lines of text.

	The constructor function or macro allows you to specify values
for slots in the new structure.  @code{defstruct} allows you to specify
default initial values for slots; whenever a structure is constructed
and no value is specified for a slot, the slot's default initial value
is stored in it.

	The @code{defstruct} in Zetalisp also works in various
dialects of Maclisp, and so it has some features that are not useful in
Zetalisp.  When possible, the Maclisp-specific features attempt
to do something reasonable or harmless in Zetalisp, to make it
easier to write code that will run equally well in Zetalisp and
Maclisp.  (Note that this @code{defstruct} is not necessarily the one installed in Maclisp!)

Note that there is another version of @code{defstruct} used in Common Lisp
programs, which is slightly incompatible.  See (cli-defstruct).

@section  How to Use Defstruct
@cindex slot

@defmac defstruct
A call to @code{defstruct} looks like:
@lisp
(defstruct (@i{name} @i{options}@code{...})
  [@i{doc-string}]
  @i{slot-description-1}
  @i{slot-description-2}
  @code{...})
@end lisp
@i{name} must be a symbol; it is the name of the structure.  It is given a
@code{si:defstruct-description} property that describes the attributes and elements of the
structure; this is intended to be used by programs that examine Lisp
programs and that want to display the contents of structures in a helpful
way.  @i{name} is used for other things, described below.

Each @i{option} may be either a symbol, which should be one of the recognized
option names listed in the next section, or a list, whose car should be one of the
option names and the rest of which should be arguments to the option.
Some options have arguments that default; others require that arguments be
given explicitly.

@i{doc-string} is a string which is recorded as the documentation of
@i{name} as a structure.  It can be accessed via @code{(documentation
'@i{name} 'structure)}.  It is not required.

Each @i{slot-description} may be in any of three forms:
@lisp
1(1)*	@i{slot-name}
1(2)*	(@i{slot-name} [@i{default-init} @i{slot-options}@code{...}])
1(3)*	((@i{slot-name-1} @i{byte-spec-1} [@i{default-init-1} @i{slot-options}@code{...}])
	 (@i{slot-name-2} @i{byte-spec-2} [@i{default-init-2} @i{slot-options}@code{...}])
		@code{...})
@end lisp
Each @i{slot-description} allocates one element of the physical structure,
even though in form (3) several slots are defined.

Each @i{slot-name} must always be a symbol; an accessor function is defined
for each slot.

In form (1), @i{slot-name} simply defines a slot with the given name.  An
accessor function is defined with the name @i{slot-name} (but see the
@code{:conc-name} option, (defstruct-conc-name-option)).  Form (2) is
similar, but allows a default initialization for the slot.  Initialization
is explained further on (defstruct-initialization).  Form (3) lets you pack
several slots into a single element of the physical underlying structure, using
the byte field feature of @code{defstruct}, which is explained on
(defstruct-byte-field).

Forms (2) and (3) allow @i{slot-options} which are alternating
keywords and values (unevaluated).  These slot option keywords are
defined:
@table @code
@item :read-only @i{flag}
'kindex :read-only "defstruct slot option"
If @i{flag} is non-@code{nil}, this specifies that this slot should not be changed in
an existing structure.  @code{setf} will not be allowed on the slot's
accessor.

@item :type @i{type-spec}
'kindex :type "defstruct slot option"
Declares that the contents of this slot must be of type @i{type-spec}.
The Lisp machine compiler does not use this information,
but sometimes it enables @code{defstruct} to deduce that it
can pack the structure into less space by using a specialized array type.

@item :documentation @i{documentation-string}
'kindex :documentation "defstruct slot option"
Makes @i{documentation-string} the documentation for the slot's accessor
function.  It also goes in the @code{si:defstruct-slot-description-documentation}
for this slot in the @code{defstruct-description} structure.
@end table

Here is an eggsample of using slot options:

@lisp
(defstruct (eggsample :named :conc-name) 
  (yolk 'a
   :documentation "First thing you need in an eggsample.") 
  (grade 3) 
  (albumen nil :read-only t)) 

(documentation 'eggsample-yolk 'function)
=> "First thing you need in an eggsample." 

(setf (eggsample-albumen (make-eggsample)) 'eggsistential)
>>ERROR: SETF is forbidden on EGGSAMPLE-ALBUMEN.
While in the function ...
@end lisp
@end defmac

Because evaluation of a @code{defstruct} form causes many functions and macros
to be defined, you must take care not to define the same name with two
different @code{defstruct} forms.  A name can only have one function
definition at a time; if it is redefined, the latest definition is the one
that takes effect, and the earlier definition is clobbered.  (This is no
different from the requirement that each @code{defun} which is intended to
define a distinct function must have a distinct name.)

To systematize this necessary carefulness, as well as for
clarity in the code, it is conventional to prefix the names of all of the
accessor functions with some text unique to the structure.  In the example
above, all the names started with @code{ship-}.  The @code{:conc-name}
option can be used to provide such prefixes automatically (see (defstruct-conc-name-option)).
Similarly, the conventional name for the constructor in the example
above was @code{make-ship}, and the conventional name for the alterant macro
(see (using-defstruct-alterant)) was @code{alter-ship}.

The @code{describe-defstruct} function lets you examine an instance of
a structure.

@defun describe-defstruct instance &optional name
@code{describe-defstruct} takes an @i{instance} of a structure, and prints
out a description of the instance, including the contents of each of its
slots.  @i{name} should be the name of the structure; you must provide
the name of the structure so that @code{describe-defstruct} can know what
structure @i{instance} is an instance of, and therefore figure out what
the names of the slots of @i{instance} are.

If @i{instance} is a named structure, you don't have to provide @i{name},
since it is just the named structure symbol of @i{instance}.
Normally the @code{describe} function (see (describe-fun)) calls
@code{describe-defstruct} if it is asked to describe a named structure;
however some named structures have their own idea of how to describe themselves.
See (named-structure) for more information about named structures.
@end defun

@section  "Options to Defstruct"

This section explains each of the options that can be given to @code{defstruct}.
Here is an example that shows the typical syntax of a call to @code{defstruct}
that gives several options.
@lisp
(defstruct (foo (:type (:array (mod 256)))
		(:make-array (:leader-length 3))
		:conc-name
		(:size-macro foo))
  a b)
@end lisp

@table @code
@item :type
'kindex :type defstruct
The @code{:type} option specifies what kind of Lisp object to use
to implement the structure.  It must be given one argument, which must
be one of the symbols enumerated below, or a user-defined type.
If the option itself is not
provided, the type defaults to @code{:array} in traditional programs,
or @code{:vector} in Common Lisp programs.  You can define your
own types; this is explained in (defining-your-own-defstruct-types).

@table @code
@item :list
'kindex :list defstruct
Uses a list.
@item :named-list
'kindex :named-list defstruct
Like @code{:list}, but the first element of the list holds the
symbol that is the name of the structure and so is not used
as a component.

@item :array
@itemx :typed-array
@itemx :vector
'kindex :array defstruct
'kindex :typed-array defstruct
'kindex :vector defstruct
These are all synonymous.
They use an array, storing components in the body of the array.
@item :named-array
'kindex :named-array defstruct
Like @code{:array}, but makes the array a named structure (see
(named-structure)) using the name of the structure as the named
structure symbol.  Element 0 of the array holds the named
structure symbol and so is not used to hold a component of the
structure.
@item :named-typed-array
@itemx :named-vector
'kindex :named-typed-array defstruct
'kindex :named-vector defstruct
These two synonyms are
like @code{:named-array} but the array always has a leader and the
named structure symbol is stored there.  As a result, it is
possible to use the @code{:subtype} option to specify a restricted
array type, such as @code{art-8b}.
@item :phony-named-vector
'kindex :phony-named-vector defstruct
This is what you get in Common Lisp if you say
@code{(:type :vector)} and @code{:named}.

@item :array-leader
'kindex :array-leader defstruct
Use an array, storing components in the leader of the array.
(See the @code{:make-array} option, described below.)
@item :named-array-leader
'kindex :named-array-leader defstruct
Like @code{:array-leader}, but makes the array a named structure (see
(named-structure)) using the name of the structure as the named
structure symbol.  Element 1 of the leader holds the named
structure symbol and so is not used to hold a component of the
structure.

@item :fixnum-array
'kindex :fixnum-array defstruct
Like @code{:array}, but the type of the array is @code{art-32b}.
@item :flonum-array
'kindex :flonum-array defstruct
Like @code{:array}, but the type of the array is @code{art-float}.
@item :named-fixnum-array
@itemx :named-flonum-array
'kindex :named-fixnum-array defstruct
'kindex :named-flonum-array defstruct
Like @code{:fixnum-array} or @code{:flonum-array} but also a named structure, with a leader
to hold the named structure symbol.

@item :tree
'kindex :tree defstruct
The structure is implemented out of a binary tree of conses, with
the leaves serving as the slots.

@item :fixnum
'kindex :fixnum defstruct
This unusual type implements the structure as a single fixnum.  The
structure may only have one slot.  This is only useful with the
byte field feature (see (defstruct-byte-field)); it lets you store
a bunch of small numbers within fields of a fixnum, giving the
fields names.

@item :grouped-array
'kindex :grouped-array defstruct
This is described in (grouped-array).
@end table

The argument of @code{:type} may also have the form
@code{(@i{type} @i{subtype})}.  This is equivalent to
specifying @i{type} for the @code{:type} option and @i{subtype}
for the @code{:subtype} option.  For example, @code{(:type (:array (mod 16.)))}
specifies an array of four-bit bytes.

@item :subtype
For structures which are arrays, @code{:subtype} permits the array type
to be specified.  It requires an argument, which must be either
an array type name such as @code{art-4b} or a type specifier restricting the elements
of the array.  In other words, it should be a suitable value for either
the @i{type} or the @i{element-type} argument to @code{make-array}.

If no @code{:subtype} option is specified but a @code{:type} slot option is
given for every slot, @code{defstruct} may deduce a subtype automatically
to make the structure more compact.

See (type-specifiers) for more information on type specifiers.

@item :constructor
'kindex :constructor defstruct
Specifies how to make a constructor for the structure.  In the simplest
use, there is one argument, which specifies the name to give to the
standard keyword-argument constructor.  If the argument is not provided
or if the option itself is not provided, the name of the constructor is
made by concatenating the string @code{"make-"} to the name of the
structure.  If the argument is provided and is @code{nil}, no constructor
is defined.  More complicated usage is explained in
(using-defstruct-constructor).

@item :alterant
'kindex :alterant defstruct
Takes one argument, which specifies the name of the alterant
macro.  If the argument is not provided, the name of the alterant is
made by concatenating the string @code{"alter-"} to the name of the
structure.  If the argument is provided and is @code{nil}, no alterant is
defined.  Use of the alterant macro is explained in
(using-defstruct-alterant).

In Common Lisp programs, the default for @code{:alterant} is @code{nil};
no alterant is defined.  In traditional programs, the default is @code{alter-@i{name}}.

@item :predicate defstruct
Causes @code{defstruct} to generate a predicate
to recognize instances of the structure.  Naturally it only works for
``named'' types.  The argument to the @code{:predicate} option is the name of
the predicate.  If the option is present without an argument, then the
name is formed by concatenating `@code{-p}' to the end of the name symbol
of the structure.  If the option is not present, then no predicate is
generated.  Example:
@lisp
(defstruct (foo :named :predicate)
  a
  b)
@end lisp
defines a single argument function, @code{foo-p}, that is true only of
instances of this structure.

The defaulting of the @code{:predicate} option is different (and complicated)
in Common Lisp programs.  See (cli-defstruct).

@item :copier defstruct
Causes @code{defstruct} to generate a single argument function that can
copy instances of this structure.  Its argument is the name of the copying
function.  If the option is present without an argument, then the name is
formed by concatenating `@code{copy-}' with the name of the structure.  Example:
@lisp
(defstruct (foo (:type :list) :copier)
  foo-a
  foo-b)
@end lisp
Generates a function approximately like:
@lisp
(defun copy-foo (x)
  (list (car x) (cadr x)))
@end lisp

@item :default-pointer
'kindex :default-pointer defstruct
Normally, the accessors defined by @code{defstruct} expect to
be given exactly one argument.  However, if the @code{:default-pointer}
argument is used, the argument to each accessor is optional.  If
the accessor is used with no argument, it evaluates the default-pointer
form to find a structure and accesses the appropriate component of
that structure.  Here is an example:
@lisp
(defstruct (room 
	     (:default-pointer *default-room*))
   room-name
   room-contents)

(room-name x) ==> (aref x 0)
(room-name)   ==> (aref *default-room* 0)
@end lisp

If the argument to the @code{:default-pointer} argument is not given, it
defaults to the name of the structure.

@item :conc-name
'kindex :conc-name defstruct
It is conventional to begin the names of all the accessor functions of
a structure with a specific prefix, usually
the name of the structure followed by a hyphen.  The @code{:conc-name}
option allows you to specify this prefix and have it concatenated
onto the front of all the slot names to make the names of the accessor
functions.  The argument should be a string to be used as the prefix,
or a symbol whose pname is to be used.
If @code{:conc-name} is specified without an argument, the prefix is the
name of the structure followed by a hyphen.  If the argument is @code{nil} or @code{""},
the names of the accessors are the same as the slot names,
and it is up to you to name the slots according to some suitable convention.

In Common Lisp programs, the default for @code{:conc-name}, when this
option is not specified,  is the structure name followed by a hyphen.
For traditional programs, the default is @code{nil}.

The keywords recognized by the constructor and alterant are the slot
names, not the accessor names, transfered into the keyword package.  It
is important to keep this in mind when using @code{:conc-name}, since it
causes the slot and accessor names to be different.  Here is an example:

@lisp
(defstruct (door :conc-name)
   knob-color
   width)

(setq d (make-door :knob-color 'red :width 5.0))

(door-knob-color d) ==> red
@end lisp

@item :include
'kindex :include defstruct
Builds a new structure definition as an extension of an old
structure definition.  Suppose you have a structure called @code{person} that
looks like this:

@lisp
(defstruct (person :named :conc-name)
   name
   age
   sex)
@end lisp

Now suppose you want to make a new structure to represent an astronaut.
Since astronauts are people too, you would like them to also have the
attributes of name, age, and sex, and you would like Lisp functions
that operate on @code{person} structures to operate just as well on
@code{astronaut} structures.  You can do this by defining @code{astronaut}
with the @code{:include} option, as follows:
@lisp
(defstruct (astronaut :named (:include person) 
		      :conc-name)
   helmet-size
   (favorite-beverage 'tang))
@end lisp

The argument to the @code{:include} option is required, and must be the
name of some previously defined structure of the same type as this
structure.  @code{:include} does not work with structures of type
@code{:tree} or of type @code{:grouped-array}.

The @code{:include} option inserts the slots of the included structure at
the front of the list of slots for this structure.  That is, an
@code{astronaut} has five slots; first the three defined in @code{person}, and
then after those the two defined in @code{astronaut} itself.  The accessor
functions defined by the @code{person} structure, such as @code{person-name}, can be used also on
@code{astronaut}'s.  New accessor functions are generated for these slots
in the @code{astronaut} structure as if they were defined afresh;
their names start with @code{astronaut-} instead of @code{person-}.
In fact, the functions @code{person-age} and @code{astronaut-age} receive
identical definitions.

Since the structures are named structures, recognizable by @code{typep},
@code{subtypep} considers @code{astronaut} a subtype of @code{person},
and @code{typep} considers any @code{astronaut} to be of type @code{person}.

The following examples illustrate how you can
construct and use @code{astronaut} structures:

@lisp
(setq x (make-astronaut :name 'buzz
			:age 45.
			:sex t
			:helmet-size 17.5))

(person-name x) => buzz
(astronaut-name x) => buzz
(astronaut-favorite-beverage x) => tang

(typep x 'astronaut) => t
(typep x 'person) => t
@end lisp

Note that the @code{:conc-name} option was @i{not} inherited from the
included structure; it is present for @code{:astronaut} only because it was
specified explicitly in the definition.  Similarly, the
@code{:default-pointer} and @code{:but-first} options are not inherited from
the @code{:include}'d structure.

The following is an advanced feature.  Sometimes, when one structure
includes another, the default values or slot options for the slots that
came from the included structure are not what you want.  The new
structure can specify new default values or slot options for the
included slots by giving the @code{:include} option as:

@lisp
(:include @i{name new-descriptor-1 @code{...} new-descriptor-n})
@end lisp

Each @i{new-slot-descriptor} is just like the slot descriptors used for
defining new slots, except that byte fields are not allowed.  The
default initialization specified in @i{new-slot-descriptor}, or the
absence of one, overrides what was specified in the included structure
type (@code{person}).  Any slot option values specified in @i{new-slot-descriptor}
also override the values given in the included structure's definition.
Any inherited slots for which no @i{new-slot-descriptor} is given,
and any slot options not explicitly overridden, are inherited.

For example, if we had wanted to define @code{astronaut} so that the
default age for an astronaut is @code{45.}, and provide
documentation for its accessor, then we could have said:
@lisp
(defstruct (astronaut :conc-name
	     (:include person 
	       (age 45. :documentation
	         "The ASTRONAUT's age in years.")))
   helmet-size
   (favorite-beverage 'tang))
@end lisp

If the @code{:read-only} option is specified as @code{nil} when @code{t}
would have been inherited, an error is signaled.

@item :named
'kindex :named defstruct
This means that you want to use one of the ``named'' types.  If you
specify a type of @code{:array}, @code{:array-leader}, or @code{:list}, and give
the @code{:named} option, then the @code{:named-array},
@code{:named-array-leader}, or @code{:named-list} type is used instead.
Asking for type @code{:array} and giving the @code{:named} option as well
is the same as asking for the type @code{:named-array}; the only difference
is stylistic.

The @code{:named} option works quite differently in Common Lisp programs;
see (cli-defstruct).

@item :make-array
'kindex :make-array defstruct
If the structure being defined is implemented as an array, this option
may be used to control those aspects of the array that are not otherwise constrained by
@code{defstruct}.  For example, you might want to control the area in which
the array is allocated.  Also, if you are creating a structure of type
@code{:array-leader}, you almost certainly want to specify the dimensions
of the array to be created, and you may want to specify the type of the
array.

The argument to the @code{:make-array} option should be a list of alternating
keyword symbols for the @code{make-array} function (see (make-array-fun)),
and forms whose values are the arguments to those keywords.  For example,
@code{(:make-array (:area 'permanent-storage-area))} would request that the array
be allocated in a particular area.  Note that the keyword symbol is @i{not} evaluated.

@code{defstruct} overrides any of the @code{:make-array} options that it needs
to.  For example, if your structure is of type @code{:array}, then
@code{defstruct} supplies the size of that array regardless of what you
say in the @code{:make-array} option.  If you use the @code{:initial-element}
@code{make-array} option, it initializes all the slots, but
@code{defstruct}'s own initializations are done afterward.  If a subtype
has been specified to or deduced by @code{defstruct}, it overrides
any @code{:type} keyword in the @code{:make-array} argument.

Constructors for structures implemented as arrays recognize the keyword
argument @code{:make-array}.  Attributes supplied therein overide any
@code{:make-array} option attributes supplied in the original @code{defstruct}
form.  If some attribute appears in neither the invocation of the
constructor nor in the @code{:make-array} option to @code{defstruct}, then the
constructor chooses appropriate defaults.  The @code{:make-array} option
may only be used with the default style of
constructor that takes keyword arguments.

If a structure is of type @code{:array-leader}, you probably want to
specify the dimensions of the array.  The dimensions of an array are
given to @code{:make-array} as a position argument rather than a keyword
argument, so there is no way to specify them in the above syntax.  To
solve this problem, you can use the keyword @code{:dimensions} or the
keyword @code{:length} (they mean the same thing), with a value that is
anything acceptable as @code{make-array}'s first argument.

@item :times
'kindex :times defstruct
Used for structures of type @code{:grouped-array} to control
the number of repetitions of the structure to be allocated by the
constructor.  (See (grouped-array).)  The constructor also accepts a
keyword argument @code{:times} to override the value given in the
@code{defstruct}.  If @code{:times} appears in neither the invocation of the
constructor nor as a @code{defstruct} option, the constructor allocates
only one instance of the structure.

@item :size-macro
'kindex :size-macro defstruct
Defines a special macro to expand into the size of this structure.  The
exact meaning of the size varies, but in general this number is the one
you would need to know if you were going to allocate one of these
structures yourself (for example, the length of the array or list).  The
argument of the @code{:size-macro} option is the name to be used for the
macro.  If this option is present without an argument, then the name of
the structure is concatenated with `@code{-size}' to produce the macro
name.

Example:
@lisp
(defstruct (foo :conc-name :size-macro)
  a b)
(macroexpand '(foo-size)) => 2
@end lisp

@item :size-symbol
'kindex :size-symbol defstruct
Like @code{:size-macro} but defines a global variable rather than a macro.
The size of the structure is the variable's value.  Use of @code{:size-macro}
is considered cleaner.

@item :initial-offset
'kindex :initial-offset defstruct
This allows you to tell @code{defstruct} to skip over a certain
number of slots before it starts allocating the slots described in the
body.  This option requires an argument (which must be a fixnum), which
is the number of slots you want @code{defstruct} to skip.  To make use of
this option requires that you have some familiarity with how @code{defstruct}
is implementing your structure; otherwise, you will be unable to make
use of the slots that @code{defstruct} has left unused.

@item :but-first
'kindex :but-first defstruct
This option is best explained by example:

@lisp
(defstruct (head (:type :list)
		 (:default-pointer person)
		 (:but-first person-head))
  nose
  mouth
  eyes)
@end lisp

The accessors expand like this:

@lisp
(nose x)	==> (car (person-head x))
(nose)		==> (car (person-head person))
@end lisp

The idea is that @code{:but-first}'s argument is an accessor from some
other structure, and it is never expected that this structure will be
found outside of that slot of that other structure.  Actually, you can
use any one-argument function, or a macro that acts like a one-argument
function.  It is an error for
the @code{:but-first} option to be used without an argument.

@item :callable-accessors defstruct
Controls whether accessors are really functions,
and therefore ``callable'', or whether they are really macros.  With
an argument of @code{t}, or with no argument, or if the option is not
provided, then the accessors are really functions.  Specifically,
they are substs, so that they have all the efficiency of macros
in compiled programs, while still being function objects that
can be manipulated (passed to @code{mapcar}, etc.).  If
the argument is @code{nil} then the accessors are really macros.

@item :callable-constructors defstruct
Controls whether constructors are really functions,
and therefore ``callable'', or macros.  An argument of @code{t}
makes them functions; @code{nil} makes them macros.
The default is @code{t} in Common Lisp programs, @code{nil} in
traditional programs.  See (using-defstruct-constructor) for more information.

@item :property defstruct
For each structure defined by defstruct, a property list is maintained
for the recording of arbitrary properties about that structure.  (That
is, there is one property list per structure definition, not one for
each instantiation of the structure.)

The @code{:property} option can be used to give a @code{defstruct} an
arbitrary property.  @code{(:property @i{property-name value})} gives the
@code{defstruct} a @i{property-name} property of @i{value}.  Neither
argument is evaluated.  To access the property list, the user must
look inside the @code{defstruct-description} structure himself (see
(defstruct-description)).

@item :print defstruct
Controls the printed representation of his structure in a way
independent of the Lisp dialect in use.  Here is an example:
@lisp
(defstruct (foo :named
	        (:print "#<Foo ~S ~S>"
                        (foo-a foo) (foo-b foo)))
  foo-a
  foo-b)
@end lisp

Of course, this only works if you use some named type, so that the system
can recognize examples of this structure automatically.

The arguments to the @code{:print} option are arguments to the @code{format}
function (except for the stream of course!).  They are evaluated in an
environment where the name symbol of the structure (@code{foo} in this
case) is bound to the instance of the structure to be printed.

This works by generating a @code{defselect} that creates a named structure
handler.  Do not use the @code{:print} option if you define a named
structure handler yourself, as they will conflict.

@item :print-function
is the Common Lisp version of the @code{:print} option.  Its argument is a function
to print a structure of this type, and it is called with three arguments:
the structure to be printed, the stream to print it on, and the current printing depth
(which should be compared with @code{*print-level*} to decide when to cut off
recursion and print `@code{#}').
The function is expected to observe the values of the various printer-control variables
such as @code{*print-escape*} (see (*print-escape*-var)).  Example:

@lisp
(defstruct (bar :named :conc-name
                (:print-function
                  (lambda (struct stream depth)
                    depth ;1 unused*
                    (sys:printing-random-object
			(struct stream :type)
                      (format stream "with zap ~S"
                              (bar-zap struct))))))
  "The famous BAR structure."
  (zap 'yow)
  random-slot)

(make-bar) => #<BAR with zap YOW>
@end lisp

@item @i{type}
In addition to the options listed above, any currently defined type
(any legal argument to the @code{:type} option) can be used as an option.
This is mostly for compatibility with the old version of @code{defstruct}.
It allows you to say just @i{type} instead of @code{(:type @i{type})}.  It
is an error to give an argument to one of these options.

@item @i{other}
Finally, if an option isn't found among those listed above,
it should be a valid defstruct-keyword for the type
of structure being defined, and the option should be of the form
@code{(@i{option-name value})}.  If so, the option is treated
just like @code{(:property @i{option-name value})}.
That is, the @code{defstruct} is given an @i{option-name} property of @i{value}.

This provides a primitive way for you to define your own options to
@code{defstruct}, particularly in connection with user-defined types (see
(defining-your-own-defstruct-types)).  Several of the options listed above
are actually implemented using this mechanism.  They include
@code{:times}, @code{:subtype} and @code{:make-array}.

The valid defstruct-keywords of a type are in a list in the 
@code{defstruct-keywords} slot of the
@code{defstruct-type-description} structure for @i{type}.
@end table

@section  Using the Constructor and Alterant

After you have defined a new structure with @code{defstruct}, you can
create instances of this structure using the constructor, and
you can alter the values of its slots using the alterant macro.  By
default, traditional @code{defstruct} defines both the constructor and the alterant,
forming their names by concatenating `@code{make-}' and `@code{alter-}',
respectively, onto the name of the structure.  The @code{defstruct} for Common Lisp 
programs defines no alterant by default.  You can specify the names
yourself by passing the name you want to use as the argument to the
@code{:constructor} or @code{:alterant} options, or specify that you don't
want the macro created at all by passing @code{nil} as the argument.

@subsection Constructors
@cindex constructor

A call to a constructor, in general, has the form
@lisp
(@i{name-of-constructor}  @i{keyword-1} @i{value-1}  @i{keyword-2} @i{value-2}  @code{...})
@end lisp
Each @i{keyword} is a keyword (a symbol in the @code{keyword} package)
whose name matches one of the slots of the structure,
or one of a few specially recognized keywords.

The name of the constructor is specified by the @code{:constructor} option,
which can also specify a documentation string for it:
@lisp
(:constructor @i{name-of-constructor} [@i{doc-string}])
@end lisp

If a @i{keyword} matches the name of a slot (@i{not} the name of an
accessor), then the corresponding @i{value} is used to initialize that
slot of the new structure.  Any slots whose values are not specified in
this way are initialized to the values of the default initial value forms
specified in the @code{defstruct}.  If no default initial value was specified
either for a slot, that slot's initial value is undefined.
You should always specify the initialization, either in the @code{defstruct}
or in the constructor invocation, if you care about the initial value of the slot.

Constructors may be macros or functions.  They are functions
if the @code{:callable-constructors} option to @code{defstruct}
is non-@code{nil}.  By default, they are functions in Common Lisp programs
and macros in traditional programs.

Constructor macros allow the slot name (in its own package) to be
used instead of a keyword.  Constructor functions do not, as they
are ordinary functions defined using @code{&key}.  Old code using slot
names not in the keyword package should be converted.

The default initial value forms are evaluated (if needed) each
time a structure is constructed, so that if @code{(gensym)} is used as a
default initial value form then a new symbol is generated for each
structure.  The order of evaluation of the default initial value forms
is unpredictable.  When the constructor is a macro, the order of
evaluation of the keyword argument forms it is given is also
unpredictable.

The two special keyword arguments recognized by constructors are @code{:make-array}
and @code{:times}.  @code{:make-array} should be used only for structures
which are represented as arrays, and @code{:times} only for @code{:grouped-array}
structures.  If one of these arguments is given, then it overrides the @code{:make-array}
option or the @code{:times} option (see (defstruct-make-array-option))
specified in the @code{defstruct}.  For example:
@lisp
@exdent For example,
@c with a constructor macro
(make-ship :ship-x-position 10.0
           :ship-y-position 12.0
           :make-array '(:leader-length 5 :area disaster-area))
@c @exdent or with a constructor function
@c (make-ship :ship-x-position 10.0
@c            :ship-y-position 12.0
@c            :make-array '(:leader-length 5 :area disaster-area))
@end lisp

@c Note that the argument of a special keyword is evaluated if the
@c constructor is a function, but not if it is a macro.  This
@c incompatibility is unfortunately unavoidable.

User-defined types of structures can define their own special
constructor keywords.

@subsection By-Position Constructors

If the @code{:constructor} option is given as
@code{(:constructor @i{name} @i{arglist} [@i{doc-string}])}, then instead of making a keyword
driven constructor, @code{defstruct} defines a positional constructor,
taking arguments whose meaning is determined by the argument's position
rather than by a keyword.
The @i{arglist} is used to describe what arguments the constructor should accept.
In the simplest case something like
@code{(:constructor make-foo (a b c))} defines @code{make-foo} to be a three-argument
constructor macro whose arguments are used to initialize the
slots named @code{a}, @code{b}, and @code{c}.

In addition, the keywords @code{&optional}, @code{&rest}, and @code{&aux} are
recognized in the argument list.  They work in the way you might expect,
but there are a few fine points worthy of explanation:

@lisp
(:constructor make-foo 
	(a &optional b (c 'sea) &rest d &aux e (f 'eff))
  "Make a FOO, with positional arguments")
@end lisp

This defines @code{make-foo} to be a constructor of one or more arguments.
The first argument is used to initialize the @code{a} slot.  The second
argument is used to initialize the @code{b} slot.  If there isn't any
second argument, then the default value given in the body of the
@code{defstruct} (if given) is used instead.  The third argument is used to
initialize the @code{c} slot.  If there isn't any third argument, then the
symbol @code{sea} is used instead.  Any arguments following the third
argument are collected into a list and used to initialize the @code{d}
slot.  If there are three or fewer arguments, then @code{nil} is placed in
the @code{d} slot.  The @code{e} slot @i{is not initialized}; its initial
value is undefined, even if a default value was specified in its slot-description.
Finally, the @code{f} slot is initialized to contain
the symbol @code{eff}.

	The actions taken in the @code{b} and @code{e} cases were carefully
chosen to allow the user to specify all possible behaviors.  Note that
the aux ``variables'' can be used to override completely the default
initializations given in the body.

	Since there is so much freedom in defining constructors this
way, it would be cruel to only allow the @code{:constructor} option to be
given once.  So, by special dispensation, you are allowed to give the
@code{:constructor} option more than once, so that you can define several
different constructors, each with a different syntax.  These
may include both keyword and positional constructors.  If there are
multiple keyword constructors, they all behave the same, differing
only in the name.  @code{It is important
to have a keyword constructor} because otherwise the @code{#S} reader
construct cannot work.

	Note that positional constructors may be macros or functions,
just like keyword constructors, and based on the same criterion: they
are functions if the @code{:callable-constructors} option to @code{defstruct}
is non-@code{nil}.  By default, they are functions in Common Lisp programs
and macros in traditional programs.  If the positional constructor is a
macro, then the actual order of evaluation of its arguments is
unpredictable.

	  Also note that you cannot specify the @code{:make-array}
or @code{:times} information in a positional constructor.

@subsection Alterant Macros
@cindex alterant macro

A call to the alterant macro, in general, has the form
@lisp
(@i{name-of-alterant-macro} @i{instance-form} 
    @i{slot-name-1} @i{form-1}
    @i{slot-name-2} @i{form-2}
    @i{...})
@end lisp
@i{instance-form} is evaluated and should return an instance of the
structure.  Each @i{form} is evaluated and the corresponding slot is
changed to have the result as its new value.  The slots are altered
after all the @i{forms} are evaluated, so you can exchange the values
of two slots, as follows:
@lisp
(alter-ship enterprise
    :ship-x-position (ship-y-position enterprise)
    :ship-y-position (ship-x-position enterprise))
@end lisp

As with constructor macros, the order of evaluation of the @i{forms} is
undefined.  Using the alterant macro can produce more efficient Lisp
than using consecutive @code{setf}s when you are altering two byte fields
of the same object, or when you are using the @code{:but-first} option.

@section  Byte Fields
	The byte field feature of @code{defstruct} allows you to specify that
several slots of your structure are bytes (see
(byte-manipulation-functions)) in an integer stored in one
element of the structure.  For example, suppose we had the following
structure:
@lisp
(defstruct (phone-book-entry (:type :list))
  name
  address
  (area-code 617.)
  exchange
  line-number)
@end lisp

This works correctly but it wastes space.  Area codes and
exchange numbers are always less than 1000, and so both can fit
into 10 bit fields when expressed as binary numbers.  Since Lisp
Machine fixnums have (more than) 20 bits, both of these
values can be packed into a single fixnum.  To tell @code{defstruct} to do
so, you can change the structure definition to the following:

@lisp
(defstruct (phone-book-entry (:type :list))
  name
  address
  ((area-code (byte 10. 10.) 617.)
   (exchange (byte 10. 0)))
  line-number)
@end lisp

The expressions @code{(byte ...)} calculate byte specifiers to be used
with the functions @code{ldb} and @code{dpb}.  The accessors, constructor, and
alterant will now operate as follows:

@lisp
(area-code pbe)	==> (ldb (byte 10. 10.) (caddr pbe))
(exchange pbe)	==> (ldb (byte 10. 0) (caddr pbe))
@end lisp
@lisp

(make-phone-book-entry
   :name "Fred Derf"
   :address "259 Octal St."
   :exchange ex
   :line-number 7788.)

==> (list "Fred Derf" "259 Octal St." 
          (dpb ex (byte 10. 0) 631808.)
	  7788.)

@end lisp
@lisp
(alter-phone-book-entry pbe
   :area-code ac
   :exchange ex)

==> ((lambda (#:g0530)
       (setf (nth 2 #:g0530)
	     (dpb ac (byte 10. 10.) 
		     (dpb ex (byte 10. 0) (nth 2 #:g0530)))))
     pbe)
@end lisp

(This is how the expression would print; this text would not read in
properly because a new uninterned symbol would be created by each use of
7#:*.)

Note that the alterant macro is optimized to only read and write the
second element of the list once, even though you are altering two
different byte fields within it.  This is more efficient than using two
@code{setf}'s.  Additional optimization by the alterant macro occurs if the
byte specifiers in the @code{defstruct} slot descriptions are constants.
However, you don't need to worry about the details of how the alterant
macro does its work.

If the byte specifier is @code{nil}, then the accessor is
defined to be the usual kind that accesses the entire Lisp object,
thus returning all the byte field components as a fixnum.  These slots
may have default initialization forms.

The byte specifier need not be a constant; a variable or, indeed, any
Lisp form, is legal as a byte specifier.  It is evaluated each
time the slot is accessed.  Of course, unless you are doing something
very strange you will not want the byte specifier to change between
accesses.

Constructors (both functions and macros) initialize
words divided into byte fields as if they were deposited in in the
following order:

 1) Initializations for the entire word given in the defstruct form.

 2) Initializations for the byte fields given in the defstruct form.

 3) Initializations for the entire word given in the constructor invocation.

 4) Initializations for the byte fields given in the constructor invocation.

@c should have example of how this works -- using phone-book-entry, for example.

Alterant macros work similarly: the modification for the entire Lisp
object is done first, followed by modifications to specific byte fields.
If any byte fields being initialized or altered overlap each other, the
action of the constructor and alterant is unpredictable.

@section  Grouped Arrays
@cindex grouped array

	The grouped array feature allows you to store several instances
of a structure side-by-side within an array.  This feature is somewhat
limited; it does not support the @code{:include} and @code{:named} options.

	The accessor functions are defined to take an extra argument, which
should be an integer, and is the index into the array of where this
instance of the structure starts.  This index should normally be a multiple
of the size of the structure, for things to make sense.  Note that the
index is the @i{first} argument to the accessor function and the structure
is the @i{second} argument, the opposite of what you might expect.  This
is because the structure is @code{&optional} if the @code{:default-pointer} option
is used.

	Note that the ``size'' of the structure (for purposes of the
@code{:size-symbol} and @code{:size-macro} options) is the number of elements
in @i{one} instance of the structure; the actual length of the array is
the product of the size of the structure and the number of instances.
The number of instances to be created by the constructor is taken from
the @code{:times} keyword of the constructor or the argument to the
@code{:times} option to @code{defstruct}.

@section  Named Structures

@cindex named structure

	The @i{named structure} feature provides a very simple form of
user-defined data type.  (Flavors are another, more powerful, facility
for defining data types, but they are more expensive in simple cases.  See
(flavor).)  A named structure is actually an array, containing
elements and optionally a leader.  The difference between a named
structure and an ordinary array is that the named structure also contains
an explicit slot to hold its ostensible data type.  This data type is a
symbol, any symbol the programmer cares to use.  In traditional
programs, named structures are normally defined using @code{defstruct} with
the @code{:named} option.  In Common Lisp programs, @code{defstruct} defines a
named structure by default.  Individual named structures are made with
the constructors defined by @code{defstruct}.

The data type symbol of a named structure is also called the @i{named
structure symbol}.  It is stored in array element 0 if the structure
has no leader.  If there is a leader, the type symbol is stored in array
leader element 1 (recall that element 0 is reserved for the fill
pointer).  If a numeric-type array is to be a named structure, it must
have a leader, since a symbol cannot be an element of a numeric array.

Named structure are @i{recognizable}; that is, if you define a named
structure called @code{foo}, you can always tell whether an object is a
@code{foo} structure.  No array created in the normal fashion, no matter
what components it has, will be mistaken for a genuine @code{foo}.

Named structures can recognized by @code{typep}.  Specify @code{foo},
the named structure name, as the second argument, and the object to be
tested as the first argument.  @code{type-of} of an ordinary array returns
@code{array}, but @code{type-of} of a named structure returns the explicitly
recorded data type symbol.

@lisp
(defstruct (foo :named) a b)
(type-of (make-foo)) => foo
(typep (make-foo) 'foo) => t
@end lisp

Named structures of other types which include @code{foo} are also recognized
as @code{foo}'s by @code{typep}.  For example, using the previously-given definitions
of @code{person} and @code{astronaut}, then
@lisp
(typep (make-astronaut) 'person) => t
@end lisp
because the type @code{person} was explicitly included by the @code{defstruct}
for @code{astronaut}.  Indirect includes count also:

@lisp
(defstruct (mission-specialist :named
	     (:include astronaut))
   @code{...})

(typep (make-mission-specialist) 'person) => t
(subtypep 'person 'mission-specialist) => t
@end lisp

It should be emphasized that the named structure @i{is} an array.
All the usual array functions, such as @code{aref} and @code{array-dimension},
can be used on it.  If it is one-dimensional (as is usually the case)
then the named structure is a vector and the generic sequence functions
can be used on it.

@lisp
(typep (make-astronaut) 'array) => t
(arrayp (make-astronaut)) => t
(array-rank (make-astronaut)) => 1
@end lisp

Because named structure data types are recognizable, they can define generic
operations and say how to handle them.  A few
such operations are defined by the system and are invoked automatically
from well-defined places.  For example @code{print} automatically invokes
the @code{:print-self} operation if you give it a named structure.  Thus,
each type of named structure can define how it should print.  The standardly
defined named structure operations are listed below.  You can also define
new named structure operations and invoke them by calling the named structure
as a function just as you would invoke a flavor instance.

Operations on a named structure are all handled by a single function,
which is found as the @code{named-structure-invoke} property of the
structure type symbol.  It is OK for a named structure type to have no
handler function.  Then invocation of any operation on the named
structure returns @code{nil}, and system routines such as @code{print} take
default actions.

If a handler function exists, it is given these arguments:
@table @i
@item operation
The name of the operation being invoked; usually a keyword.
@item structure
The named structure which is being operated on.
@item additional-arguments...
Any other arguments which were passed when the operation was invoked.
The handler function should have a rest parameter so it can accept
any number of arguments.
@end table

@noindent
The handler function should return @code{nil} if it does not recognize
the @i{operation}.
These are the named structure operations used by the system at present:
@table @code
@item :which-operations
Should return a list of the names of the operations the function handles.
Every handler function must handle this operation, and every opertation
that the function handles should be included in this list.

@item :print-self
Should output the printed representation of the named structure to a stream.
The additional arguments are the stream to output to, the current
depth in list-structure, and the current value of @code{*print-escape*}.  If
@code{:print-self} is not in the value returned by @code{:which-operations},
or if there is no handler function, @code{print} uses @code{#s} syntax.

@item :describe
Is invoked by @code{describe} and should output a description of the
structure to @code{*standard-output*}.  If there is no handler function
or @code{:describe} is not in its @code{:which-operations} list,
@code{describe} prints the names and values of the structure's fields as
defined in the @code{defstruct}.

@item :sxhash
Is invoked by @code{sxhash} and should return a hash code to
use as the value of @code{sxhash} for this structure.  It is often useful
to call @code{sxhash} on some (perhaps all) of the components of the
structure and combine the results in some way.

There is one additional argument to this operation: a flag saying
whether it is permissible to use the structure's address in forming the
hash code.  For some kinds of structure, there may be no way to generate
a good hash code except to use the address.  If the flag is @code{nil},
they must simply do the best they can, even if it means always returning
zero.

It is permissible to return @code{nil} for @code{:sxhash}.  Then @code{sxhash}
produces a hash code in its default fashion.

@item :fasd-fixup
Is invoked by @code{fasload} on a named structure that has
been created from data in a QFASL file.  The purpose of the operation
is to give the structure a chance to ``clean itself up'' if, in order to
be valid, it needs to have contents that are not exactly identical
to those that were dumped.  For example, readtables push themselves onto
the list @code{si:*all-readtables*} so that they can be found by name.

For most kinds of structures it is
acceptable not to define this operation at all (so that it returns @code{nil}).
@end table

Example handler function:
@lisp
(defun (:property person named-structure-invoke)
       (op self &rest args)
  (selectq op
    (:which-operations '(:print-self :describe))
    (:describe
      (format (car args)
	      "This is a ~D-year-old person"
	      (person-age self)))
    (:print-self
      (if *print-escape*
	  (si:printing-random-object (self (car args) :type)
	    (princ (person-name self) (car args)))
	(princ (person-name self) (car args))))))
@exdent or
(defselect ((:property person named-structure-handler)
	    ignore)
  (:print-self (self stream ignore &optional ignore)
    (if *print-escape*
	(si:printing-random-object (self stream :type)
	  (princ (person-name self) stream))
      (princ (person-name self) stream)))
  (:describe (self)
    (format *standard-output*
	    "This is a ~D-year-old person"
	    (person-age self))))
@end lisp

@noindent
This handler causes a person structure to include its name in its printed
representation; it also causes @code{princ} of a person to print just the
name, with no `@code{#<}' syntax.  This simple example could have been
done even more simply with the @code{:print-function} option.

It is often convenient to define a handler function with @code{defselect};
but you must be careful.  @code{defselect} by default defines the function
to signal an error if it is called with a first argument that is not
recognized.  A handler function should return @code{nil} and get no error.
To avoid the problem, specify @code{ignore} as the default handler when you
write the @code{defselect}.  See (defselect-fun).

Note that the handler function of a named structure type is @i{not}
inherited by other named structure types that include it.  For
example, the above definition of a handler for @code{person} has no
effect at all on the @code{astronaut} structure.  If you need such
inheritance, you must use flavors rather than named structures (see
(flavor)).

@noindent
The following functions operate on named structures.

@defun named-structure-p x
This semi-predicate returns @code{nil} if @i{x} is not a named structure; otherwise
it returns @i{x}'s named structure symbol.
@end defun

@defun make-array-into-named-structure array
Marks @i{array} as a named structure and returns it.
This is used by @code{make-array} when creating named structures.
You should not normally call it explicitly.
@end defun

@defun named-structure-invoke operation structure &rest args
Invokes a named structure operation on @i{structure}.
@i{operation} should be a keyword symbol, and @i{structure} should be a
named structure.  The handler function of the named structure symbol,
found as the value of the @code{named-structure-invoke} property of the
symbol, is called with appropriate arguments.

If the structure type has no @code{named-structure-invoke} property,
@code{nil} is returned.  By convention, @code{nil} is also returned
by the handler if it does not recognize @code{operation}.

@code{(send @i{structure} @i{operation} @i{args}...)}
has the same effect, by calling @code{named-structure-invoke}.
@end defun

See also the @code{:named-structure-symbol} keyword to @code{make-array}, (make-array-fun).

@section  Common Lisp Defstruct

@defmac cli:defstruct
The version of @code{defstruct} used in Common Lisp programs
differs from the traditional @code{defstruct} in the defaults for
a few options and the meanings of a few of them.

The @code{:conc-name} option defaults to the structure type name followed
by a hyphen in @code{cli:defstruct}.  In traditional @code{defstruct} it
defaults to @code{nil}.

The @code{:callable-constructors} option defaults to @code{t} in
@code{cli:defstruct}, so that the constructor is a function.
Traditionally, it defaults to @code{nil}.

The @code{:alterant} option defaults to @code{nil} in @code{cli:defstruct},
so that no alterant is defined.  Traditionally, an alterant is defined
by default with the name @code{alter-@i{name}}.

The @code{:type} option defaults to @code{:named-vector} in @code{cli:defstruct}.
This makes a named structure, and you may specify how to print it.
The @code{:predicate} option defaults to @code{t} in this case.

If the @code{:type} option is specified in @code{cli:defstruct}, you never get
a named structure.  You get either a plain list or a plain vector.
There is no type-testing predicate, and you may not request one.
You may not say how to print the structure, either.

If you specify the @code{:named} option along with @code{:type}, you still
@i{do not} get a named structure.  You get a plain list or a plain vector
in which the structure name happens to be stored.  The type is either
@code{:named-list} or @code{:phony-named-vector}.
The @code{:predicate} option defaults to @code{nil}, but you may specify @code{t} yourself.
However, any randomly created list or vector with the structure name
stored in the right place will satisfy the predicate thus defined.
@code{typep} cannot recognize these phony named structures, and you
may not specify how to print them (they do not understand @code{named-structure-invoke}.)
@end defmac

@section  The si:defstruct-description Structure
	This section discusses the internal structures used by
@code{defstruct} that might be useful to programs that want to interface
to @code{defstruct} nicely.  For example, if you want to write a program
that examines structures and displays them the way @code{describe}
(see (describe-fun)) and the Inspector do, your program should work
by examining these structures.
The information in this section is also
necessary for anyone who is thinking of defining his own structure
types.

	Whenever the user defines a new structure using @code{defstruct},
@code{defstruct} creates an instance of the @code{si:defstruct-description} structure.
This can be found as the @code{si:defstruct-description} property of
the name of the structure; it contains such useful information as
the number of slots in the structure, the @code{defstruct} options specified,
and so on.

This is a simplified version of the way 
the @code{si:defstruct-description} structure is defined.
It omits some slots whose meaning is not worth documenting here.
(The actual definition is in the @code{system-internals} package.)

@lisp
(defstruct (defstruct-description
		(:default-pointer description)
		(:conc-name defstruct-description-))
	   name
	   size
	   property-alist
	   slot-alist
	   documentation)
@end lisp

	The @code{name} slot contains the symbol supplied by the user to be
the name of his structure, such as @code{spaceship} or
@code{phone-book-entry}.

	The @code{size} slot contains the total number of slots in an
instance of this kind of structure.  This is @i{not} the same number as
that obtained from the @code{:size-symbol} or @code{:size-macro} options to
@code{defstruct}.  A named structure, for example, usually uses up an extra
location to store the name of the structure, so the @code{:size-macro} option
will get a number one larger than that stored in the @code{defstruct}
description.

	The @code{property-alist} slot contains an alist with pairs of the
form @code{(@i{property-name} . @i{property})} containing properties placed there
by the @code{:property} option to @code{defstruct} or by property names used as
options to @code{defstruct} (see the @code{:property} option, (defstruct-property-option)).

	The @code{slot-alist} slot contains an alist of pairs of the form
@code{(@i{slot-name} . @i{slot-description})}.  A @i{slot-description} is
an instance of the @code{defstruct-slot-description} structure.  The
@code{defstruct-slot-description} structure is defined something like
this (with other slots that are omitted here), also in the @code{si} package:

@lisp
(defstruct (defstruct-slot-description
		(:default-pointer slot-description)
		:conc-name)
  number
  ppss
  init-code
  type
  property-alist
  ref-macro-name
  documentation)
@end lisp
	The @code{number} slot contains the number of the location of this
slot in an instance of the structure.  Locations are numbered,
starting with 0, and continuing up to a number one less than the size of the
structure.  The actual location of the slot is determined by the
reference-consing function associated with the type of the structure; see
(defstruct-reference-consing-function).

	The @code{ppss} slot contains the byte specifier code for this slot if
this slot is a byte field of its location.  If this slot is the entire
location, then the @code{ppss} slot contains @code{nil}.

	The @code{init-code} slot contains the initialization code supplied
for this slot by the user in his @code{defstruct} form.  If there is no
initialization code for this slot then the init-code slot contains a
canonical object which can be obtained (for comparison using @code{eq})
as the result of @code{(si:defstruct-empty)}.

	The @code{ref-macro-name} slot contains the symbol that is defined as
a macro or a subst that expands into a reference to this slot (that is, the name
of the accessor function).

@section  Extensions to Defstruct

	The macro @code{si:defstruct-define-type} can be used to teach @code{defstruct}
about new types that it can use to implement structures.

@defmac si:defstruct-define-type
Is used for teaching @code{defstruct} about new types.

The syntax of @code{si:defstruct-define-type} is:
@lisp
(si:defstruct-define-type @i{type}
  @i{option-1} @i{option-2} @code{...})
@end lisp
where each @i{option} is either the symbolic name of an option or a list of
the form @code{(@i{option-name} .  @i{rest})}.  Different options interpret
@i{rest} in different ways.  The symbol @i{type} is given an
@code{si:defstruct-type-description} property of a structure that describes the type
completely.

The semantics of @code{si:defstruct-define-type} is the subject
of the rest of this section.
@end defmac

@subsection Example

	Let us start by examining a sample call to
@code{defstruct-define-type}.  This is how the @code{:list} type of structure might
have been defined:

@lisp
(si:defstruct-define-type :list
  (:cons (initialization-list description
                              keyword-options) 
         :list
         `(list . ,initialization-list))
  (:ref (slot-number description argument)
        `(nth ,slot-number ,argument)))
@end lisp

This is the simplest possible form of @code{defstruct-define-type}.  It
provides @code{defstruct} with two Lisp forms: one for creating forms to
construct instances of the structure, and one for creating forms to
become the bodies of accessors for slots of the structure.

The keyword @code{:cons} is followed by a list of three variables that will
be bound while the constructor-creating form is evaluated.  The first,
@code{initialization-list}, will be bound to a list of the initialization
forms for the slots of the structure.  The second, @code{description}, will
be bound to the @code{defstruct-description} structure for the structure
(see (defstruct-description)).  The third variable and the @code{:list} keyword
will be explained later.

The keyword @code{:ref} is followed by a list of three variables that will
be bound while the accessor-creating form is evaluated.  The first,
@code{slot-number}, will bound to the number of the slot that the new accessor
should reference.  The second, @code{description}, will be bound to the
@code{defstruct-description} structure for the structure.  The third, @code{argument},
will be bound to the form that was provided as the argument to the accessor.

@subsection Options to si:defstruct-define-type

	This section is a catalog of all the options currently known
about by @code{si:defstruct-define-type}.

@table @code
@item :cons
'kindex :cons si:defstruct-define-type
Specifies the code to cons up a form that will construct an instance
of a structure of this type.

The @code{:cons} option has the syntax:
@lisp
(:cons (@i{inits} @i{description} @i{keywords}) @i{kind}
  @i{body})
@end lisp
@i{body} is some code that should construct and return a piece
of code that will construct, initialize, and return an instance of a
structure of this type.

The symbol @i{inits} will be bound to the information that the
constructor conser should use to initialize the slots of the
structure.  The exact form of this argument is determined by the
symbol @i{kind}.  There are currently two kinds of initialization.
There is the @code{:list} kind, where @i{inits} is bound to a list of
initializations, in the correct order, with @code{nil}s in uninitialized
slots.  And there is the @code{:alist} kind, where @i{inits} is bound to an
alist with pairs of the form @code{(@i{slot-number} . @i{init-code})}. Additional
kinds may be provided in the future.

The symbol @i{description} will be bound to the instance of the
@code{defstruct-description} structure (see (defstruct-description)) that
@code{defstruct} maintains for this particular structure.  This is so that
the constructor conser can find out such things as the total size of
the structure it is supposed to create.

The symbol @i{keywords} will be bound to an alist with pairs of the form
@code{(@i{keyword} . @i{value})}, where each @i{keyword} was a keyword supplied to
the constructor that wasn't the name of a slot, and @i{value} was the Lisp
object that followed the keyword.  This is how you can make your own special
keywords, like the existing @code{:make-array} and @code{:times} keywords.  See the
section on using the constructor, (using-defstruct-constructor).  You
specify the list of acceptable keywords with
the @code{:cons-keywords} option (see (defstruct-define-type-keywords)).

	It is an error not to supply the @code{:cons} option to
@code{si:defstruct-define-type}.

@item :ref
'kindex :ref si:defstruct-define-type
Specifies the code to cons up a form that will reference an
instance of a structure of this type.

The @code{:ref} option has the syntax:
@lisp
(:ref (@i{number} @i{description} @i{arg-1} @code{...} @i{arg-n})
  @i{body})
@end lisp
@i{body} is some code that should construct and return a piece
of code that will reference an instance of a structure of this type.

The symbol @i{number} will be bound to the location of the slot
that is to be referenced.  This is the same number that is found
in the number slot of the @code{defstruct-slot-description} structure
(see (defstruct-slot-description-structure)).

The symbol @i{description} will be bound to the instance of the
@code{si:defstruct-description} structure that @code{defstruct} maintains for this
particular structure.

The symbols @i{arg-i} are bound to the forms supplied to the accessor as
arguments.  Normally there should be only one of these.  The @i{last} argument
is the one that will be defaulted by the @code{:default-pointer} option (see
(defstruct-default-pointer-option)).  @code{defstruct} will check that the user
has supplied exactly @i{n} arguments to the accessor function before calling the
reference consing code.

It is an error not to supply the @code{:ref} option to
@code{si:defstruct-define-type}. 

@item :overhead
'kindex :overhead si:defstruct-define-type
Declares to @code{defstruct} that the implementation of this particular type
of structure ``uses up'' some number of locations in the object
actually constructed.  This option is used by various ``named'' types of
structures that store the name of the structure in one location.
For example, named arrays have an overhead of one, and named array
leaders an overhead of two, but named typed arrays have no overhead
since the structure type symbol is stored in the array leader whilst the
actual data specifying the values of the slots is stored in the array proper.

The syntax of @code{:overhead} is @code{(:overhead @i{n})}, where @i{n} is a
fixnum that says how many locations of overhead this type needs.

This number is used only by the @code{:size-macro} and @code{:size-symbol}
options to @code{defstruct} (see (defstruct-size-macro-option)).

@item :named
'kindex :named si:defstruct-define-type
Controls the use of the @code{:named} option to @code{defstruct}.  With no
argument, the @code{:named} option means that this type is one which
records the structure type name somehow (not necessarily by using an
actual named structure).  With an argument, as in @code{(:named
@i{type-name})}, the symbol @i{type-name} should be the name of some
other structure type that @code{defstruct} should use if the user
specifies this type and @code{:named} as well.  For example, the
definition of the @code{:list} type contains @code{(:named :named-list)},
saying that a @code{defstruct} that specifies @code{(:list :named)} really
uses type @code{:named-list}.

@item :cons-keywords
'kindex :cons-keywords si:defstruct-define-type
Defines additional constructor keywords for this type of structure.
Using these keywords, one may specify additional information
about a structure at the time it is created (``consed'') using one of
its constructor functions or macros.
(The @code{:times} constructor keyword for structures of type
@code{:grouped-array} is an example.)  The syntax is: @code{(:cons-keywords
@i{keyword-1} ... @i{keyword-n})} where each @i{keyword} is a symbol
that the constructor conser expects to find in the @i{keywords} alist
(explained above).

@item :keywords si:defstruct-define-type
@code{:keywords} is an old name for the @code{:cons-keywords} option.

@item :defstruct-keywords
'kindex :defstruct-keywords si:defstruct-define-type
Defines additional @code{defstruct} options allowed for this
type of structure.  (The @code{:subtype} option for structures of type
@code{:array} is an example.)  These options take effect at the time
the structure is defined using @code{defstruct}, and thus affect
all structures of a particular type (unless overridden in some way.)
In contrast, the @code{:cons-keywords} options affect the creation
of individual structures of a particular type.

The syntax is:
@code{(:defstruct-keywords @i{keyword-1} ... @i{keyword-n})} where each
@i{keyword} is a keyword that @code{defstruct} will recognize as an option.
@code{defstruct} puts such options, with their values, in the
@code{property-alist} slot of the @code{defstuct-description} structure
(defined above)

@item :predicate si:defstruct-define-type
Tells @code{defstruct} how to produce predicates for a particular type
(for the @code{:predicate} option to @code{defstruct}).  Its syntax is:
@lisp
(:predicate (@i{description} @i{name})
  @i{body}@code{...})
@end lisp
The variable @i{description} is bound to the @code{defstruct-description}
structure maintained for the structure for which a predicate is being
generated.  The variable @i{name} is bound to the symbol that is to be
defined as a predicate.  @i{body} is a piece of code to compute
the defining form for the predicate.  A typical use of this
option might look like:
@lisp
(:predicate (description name)
  `(defun ,name (x)
     (and (frobbozp x)
	  (eq (frobbozref x 0)
	      ',(si:defstruct-description-name
		  description)))))
@end lisp

@item :copier si:defstruct-define-type
@code{defstruct} knows how to generate a copier function using the
constructor and reference code that must be provided with any new
defstruct type.  Nevertheless it is sometimes desirable to specify a
specific method of copying a particular defstruct type.  The @code{:copier}
option to @code{si:defstruct-define-type} allow this to be done:
@lisp
(:copier (@i{description} @i{name})
  @i{body})
@end lisp
As with the @code{:predicate} option, @i{description} is bound to an instance of the
@code{defstruct-description} structure, @i{name} is bound to the symbol to be defined,
and @i{body} is some code to evaluate to get the defining form.  For example:
@lisp
(:copier (description name)
  `(fdefine ',name 'copy-frobboz))
@end lisp

@item :defstruct
'kindex :defstruct si:defstruct-define-type
The @code{:defstruct} option to @code{si:defstruct-define-type} allows the user
to run some code and return some forms as part of the expansion of the
@code{defstruct} macro.

The @code{:defstruct} option has the syntax:
@lisp
(:defstruct (@i{description})
  @i{body})
@end lisp
@i{body} is a piece of code that will be run whenever @code{defstruct}
is expanding a @code{defstruct} form that defines a structure of this type.
The symbol @i{description} will be bound to the instance of the
@code{defstruct-description} structure that @code{defstruct} maintains for this
particular structure.

The value returned by the @i{body} should be a @i{list}
of forms to be included with those that the @code{defstruct} expands into.
Thus, if you only want to run some code at @code{defstruct}-expand time, and
you don't want to actually output any additional code, then you should
be careful to return @code{nil} from the code in this option.

@code{defstruct} will cause the @i{body} forms to be evaluated as early
as possible in the parsing of a structure definition, and cause the
returned forms to be evalutated as late as possible in the
macro-expansion of the @code{defstuct} forms. This is so that @i{body}
can rehack arguments, signal errors, and the like before many of
@code{defstruct}'s internal forms are executed, while enabling it to
return code which will modify or extend the default forms produced by
a vanilla @code{defstruct}.

@end table

@c I assume that this comes after the discussion of defstruct but
@c before the discussion of streams.

@chapter Objects, Message Passing, and Flavors
@cindex flavor
@cindex message
@cindex method
@cindex object
@cindex instance

The object-oriented programming style used in the Smalltalk and
Actor families of languages is available in Zetalisp and used
by the Lisp Machine software system.  Its purpose is to perform
@i{generic operations} on objects.  Part of its implementation is
simply a convention in procedure-calling style; part is a powerful
language feature, called Flavors, for defining abstract objects.
This chapter attempts to explain what programming with objects and with
message passing means, the various means of implementing these in
Zetalisp, and when you should use them.  It assumes no prior
knowledge of any other languages.

@section  Objects

When writing a program, it is often convenient to model what the program
does in terms of @i{objects}, conceptual entities that can be likened to
real-world things.  Choosing what objects to provide in a program is
very important to the proper organization of the program.  In an
object-oriented design, specifying what objects exist is the first
task in designing the system.  In a text editor, the objects might be
``pieces of text'', ``pointers into text'', and ``display windows''.  In an
electrical design system, the objects might be ``resistors'',
``capacitors'', ``transistors'', ``wires'', and ``display windows''.  After
specifying what objects there are, the next task of the design is to
figure out what operations can be performed on each object.  In the text
editor example, operations on ``pieces of text'' might include inserting
text and deleting text; operations on ``pointers into text'' might include
moving forward and backward; and operations on ``display windows'' might
include redisplaying the window and changing which ``piece of text'' the
window is associated with.

In this model, we think of the program as being built around a set of
objects, each of which has a set of operations that can be performed on
it.  More rigorously, the program defines several @i{types} of object
(the editor above has three types), and it can create many @i{instances}
of each type (that is, there can be many pieces of text, many pointers
into text, and many windows).  The program defines a set of types of
object and, for each type, a set of operations that can be performed on
any object of the type.

The new types may exist only in the programmer's mind.  For example, it
is possible to think of a disembodied property list as an abstract data
type on which certain operations such as @code{get} and @code{putprop} are
defined.  This type can be instantiated with @code{(cons nil nil)} (that
is, by evaluating this form you can create a new disembodied property
list); the operations are invoked through functions defined just for
that purpose.  The fact that disembodied property lists are really
implemented as lists, indistinguishable from any other lists, does not
invalidate this point of view.  However, such conceptual data types
cannot be distinguished automatically by the system; one cannot ask ``is
this object a disembodied property list, as opposed to an ordinary
list''.

The @code{defstruct} for @code{ship} early in chapter (defstruct-chapter)
defines another conceptual type.  @code{defstruct} automatically defines some
operations on this object, the operations to access its elements.  We
could define other functions that did useful things with @code{ship}'s,
such as computing their speed, angle of travel, momentum, or velocity,
stopping them, moving them elsewhere, and so on.

In both cases, we represent our conceptual object by one Lisp object.
The Lisp object we use for the representation has @i{structure} and
refers to other Lisp objects.  In the disembodied property list case,
the Lisp object is a list of pairs; in the @code{ship} case, the Lisp
object is an array whose details are taken care of by @code{defstruct}.  In
both cases, we can say that the object keeps track of an @i{internal
state}, which can be @i{examined} and @i{altered} by the operations
available for that type of object.  @code{get} examines the state of a
property list, and @code{putprop} alters it; @code{ship-x-position} examines
the state of a ship, and @code{(setf (ship-x-position @i{ship}) 5.0)}
alters it.

We have now seen the essence of object-oriented programming.  A
conceptual object is modeled by a single Lisp object, which bundles up
some state information.  For every type of object, there is a set of
operations that can be performed to examine or alter the state of the
object.

@section  Modularity

An important benefit of the object-oriented style is that it lends
itself to a particularly simple and lucid kind of modularity.
If you have modular programming constructs and techniques available,
they help and encourage you to write
programs that are easy to read and understand, and so are more
reliable and maintainable.  Object-oriented programming lets a
programmer implement a useful facility that presents the caller with a set
of external interfaces, without requiring the caller to understand how
the internal details of the implementation work.  In other words, a program
that calls this facility can treat the facility as a black box; the
program knows what the facility's external interfaces guarantee to do,
and that is all it knows.

For example, a program that uses disembodied property lists never needs
to know that the property list is being maintained as a list of
alternating indicators and values; the program simply performs the
operations, passing them inputs and getting back outputs.  The program
only depends on the external definition of these operations: it knows
that if it @code{putprop}'s a property, and doesn't @code{remprop} it (or
@code{putprop} over it), then it can do @code{get} and be sure of getting back
the same thing it put in.  The important thing about this hiding of
the details of the implementation is that someone reading a program that uses disembodied
property lists need not concern himself with how they are implemented;
he need only understand what they undertake to do.  This saves the
programmer a lot of time and lets him concentrate his energies on
understanding the program he is working on.  Another good thing about
this hiding is that the representation of property lists could be
changed and the program would continue to work.  For example, instead
of a list of alternating elements, the property list could be
implemented as an association list or a hash table.  Nothing in the
calling program would change at all.

The same is true of the @code{ship} example.  The caller is presented with
a collection of operations, such as @code{ship-x-position},
@code{ship-y-position}, @code{ship-speed}, and @code{ship-direction}; it simply
calls these and looks at their answers, without caring how they did what
they did.  In our example above, @code{ship-x-position} and
@code{ship-y-position} would be accessor functions, defined automatically
by @code{defstruct}, while @code{ship-speed} and @code{ship-direction} would be
functions defined by the implementor of the @code{ship} type.  The code
might look like this:

@lisp
(defstruct (ship :conc-name)
  x-position
  y-position
  x-velocity
  y-velocity
  mass)

(defun ship-speed (ship)
  (sqrt (+ (^ (ship-x-velocity ship) 2)
           (^ (ship-y-velocity ship) 2))))

(defun ship-direction (ship)
  (atan2 (ship-y-velocity ship)
         (ship-x-velocity ship)))
@end lisp

The caller need not know that the first two functions were structure accessors
and that the second two were written by hand and do arithmetic.  Those
facts would not be considered part of the black box characteristics of
the implementation of the @code{ship} type.  The @code{ship} type does not
guarantee which functions will be implemented in which ways; such aspects
are not part of the contract between @code{ship} and its callers.  In fact,
@code{ship} could have been written this way instead:

@lisp
(defstruct (ship :conc-name)
  x-position
  y-position
  speed
  direction
  mass)

(defun ship-x-velocity (ship)
  (* (ship-speed ship) (cos (ship-direction ship))))

(defun ship-y-velocity (ship)
  (* (ship-speed ship) (sin (ship-direction ship))))
@end lisp

In this second implementation of the @code{ship} type, we have decided to
store the velocity in polar coordinates instead of rectangular
coordinates.  This is purely an implementation decision.  The caller has
no idea which of the two ways the implementation uses; he just
performs the operations on the object by calling the appropriate
functions.

We have now created our own types of objects, whose implementations are
hidden from the programs that use them.  Such types are usually referred to as
@i{abstract types}.  The object-oriented style of programming can be
used to create abstract types by hiding the implementation of the
operations and simply documenting what the operations are defined to do.

Some more terminology: the quantities being held by the elements of the
@code{ship} structure are referred to as @i{instance variables}.  Each
instance of a type has the same operations defined on it; what
distinguishes one instance from another (besides @code{eq}-ness)
is the values that reside in its instance variables.  The example above
illustrates that a caller of operations does not know what the instance
variables are; our two ways of writing the @code{ship} operations have
different instance variables, but from the outside they have exactly the
same operations.

One might ask: ``But what if the caller evaluates @code{(aref ship 2)} and
notices that he gets back the @i{x} velocity rather than the speed?  Then he
can tell which of the two implementations were used.''  This is true; if
the caller were to do that, he could tell.  However, when a facility is
implemented in the object-oriented style, only certain functions are
documented and advertised, the functions that are considered to be
operations on the type of object.  The contract from @code{ship} to its
callers only speaks about what happens if the caller calls these
functions.  The contract makes no guarantees at all about what would
happen if the caller were to start poking around on his own using
@code{aref}.  A caller who does so @i{is in error}; he is depending on
something that is not specified in the contract.  No guarantees were
ever made about the results of such action, and so anything may happen;
indeed, @code{ship} may get reimplemented overnight, and the code that does
the @code{aref} will have a different effect entirely and probably stop
working.  This example shows why the concept of a contract between a callee and
a caller is important: the contract specifies the interface
between the two modules.

Unlike some other languages that provide abstract types, Zetalisp
makes no attempt to have the language automatically forbid
constructs that circumvent the contract.  This is intentional.  One
reason for this is that the Lisp Machine is an interactive system, and
so it is important to be able to examine and alter internal state
interactively (usually from a debugger).  Furthermore, there is no
strong distinction between the ``system'' programs and the ``user'' programs
on the Lisp Machine; users are allowed to get into any part of the
language system and change what they want to change.  Another reason is
the traditional MIT AI Lab philosophy that opposes ``fascist'' restrictions
which impose on the user ``for his own good''.  The user himself should
decide what is good for him.

In summary: by defining a set of operations and making only a
specific set of external entrypoints available to the caller, the
programmer can create his own abstract types.  These types can be useful
facilities for other programs and programmers.  Since the implementation
of the type is hidden from the callers, modularity is maintained and
the implementation can be changed easily.

We have hidden the implementation of an abstract type by making its
operations into functions which the user may call.  The important thing
is not that they are functions--in Lisp everything is done with functions.
The important thing is that we have defined a new conceptual operation
and given it a name, rather than requiring anyone who wants to do the
operation to write it out step-by-step.  Thus we say @code{(ship-x-velocity s)}
rather than @code{(aref s 2)}.

Often a few abstract operation functions are simple enough that
it is desirable
to compile special code for them rather than really calling the function.
(Compiling special code like this is often called @i{open-coding}.)
The compiler is directed to do this through use of macros, substs, or
optimizers.  @code{defstruct} arranges for this kind of special compilation
for the functions that get the instance variables of a structure.

When we use this optimization, the implementation of the abstract type
is only hidden in a certain sense.  It does not appear in the Lisp code
written by the user, but does appear in the compiled code.  The reason
is that there may be some compiled functions that use the macros (or whatever);
even if you change the definition of the macro, the existing compiled
code will continue to use the old definition.  Thus, if
the implementation of a module is changed programs that use it may need to be
recompiled.  This is something we sometimes accept for the sake of
efficiency.

In the present implementation of flavors, which is discussed below,
there is no such compiler incorporation of nonmodular knowledge into a
program, except when the @code{:ordered-instance-variables} feature is
used; see (ordered-instance-variables-option), where this problem is
explained further.  If you don't use the
@code{:ordered-instance-variables} feature, you don't have to worry about
this.

@section  Generic Operations

Suppose we think about the rest of the program that uses the
@code{ship} abstraction.  It may want to deal with other objects that are
like @code{ship}'s in that they are movable objects with mass, but unlike
@code{ship}s in other ways.  A more advanced model of a ship might include
the concept of the ship's engine power, the number of passengers on
board, and its name.  An object representing a meteor probably would
not have any of these, but might have another attribute such as how
much iron is in it.

However, all kinds of movable objects have positions, velocities, and
masses, and the system will contain some programs that deal with these
quantities in a uniform way, regardless of what kind of object the
attributes apply to.  For example, a piece of the system that calculates
every object's orbit in space need not worry about the other, more
peripheral attributes of various types of objects; it works the same way
for all objects.  Unfortunately, a program that tries to calculate the
orbit of a ship needs to know the ship's attributes, and must therefore
call @code{ship-x-position} and @code{ship-y-velocity} and so on.  The problem is
that these functions won't work for meteors.  There would have to be a
second program to calculate orbits for meteors that would be exactly the
same, except that where the first one calls @code{ship-x-position}, the
second one would call @code{meteor-x-position}, and so on.  This would be
very bad; a great deal of code would have to exist in multiple copies,
all of it would have to be maintained in parallel, and it would take up
space for no good reason.

What is needed is an operation that can be performed on objects of
several different types.  For each type, it should do the thing
appropriate for that type.  Such operations are called @i{generic}
operations.  The classic example of generic operations is the arithmetic
functions in most programming languages, including Zetalisp.  The @code{+}
(or @code{plus}) function accepts integers, floats, ratios and complex
numbers, and perform an appropriate kind of addition, based on the data
types of the objects being manipulated.  In our example, we need a
generic @code{x-position} operation that can be performed on either
@code{ship}'s, @code{meteor}'s, or any other kind of mobile object represented
in the system.  This way, we can write a single program to calculate
orbits.  When it wants to know the @i{x} position of the object it is
dealing with, it simply invokes the generic @code{x-position} operation on
the object, and whatever type of object it has, the correct operation is
performed, and the @i{x} position is returned.

Another terminology for the use of such generic operations has emerged
from the Smalltalk language: performing a generic operation
is called @i{sending a message}.  The message consists of an operation
name (a symbol) and arguments.  The objects in the program are thought
of as little people, who get sent messages and respond with answers
(returned values).  In the example above, the objects are sent
@code{x-position} messages, to which they respond with their @i{x}
position.

Sending a message is a way of invoking a function without specifying
which function is to be called.  Instead, the data determines the
function to use.  The caller specifies an operation name and an object;
that is, it said what operation to perform, and what object to perform
it on.  The function to invoke is found from this information.

The two data used to figure out which function
to call are the @i{type} of the object, and the @i{name} of the operation.
The same set of functions are used for all instances of a given type, so
the type is the only attribute of the object used to figure out which
function to call.  The rest of the message besides the operation is data
which are passed as arguments to the function, so the operation is the only
part of the message used to find the function.  Such a function is
called a @i{method}.  For example, if we send an @code{x-position} message
to an object of type @code{ship}, then the function we find is ``the
@code{ship} type's @code{x-position} method''.  A method is a function that
handles a specific operation on a specific kind of object; this
method handles messages named @code{x-position} to objects of type
@code{ship}.

In our new terminology: the orbit-calculating program finds the @i{x}
position of the object it is working on by sending that object a message
consisting of the operation @code{x-position} and no arguments.  The
returned value of the message is the @i{x} position of the object.  If
the object was of type @code{ship}, then the @code{ship} type's @code{x-position}
method was invoked; if it was of type @code{meteor}, then the @code{meteor}
type's @code{x-position} method was invoked.  The orbit-calculating program
just sends the message, and the right function is invoked based on the
type of the object.  We now have true generic functions, in the form of
message passing: the same operation can mean different things depending
on the type of the object.

@section  Generic Operations in Lisp

How do we implement message passing in Lisp?  Our convention is that objects
that receive messages are always @i{functional} objects (that is, you
can apply them to arguments).  A message is sent to an object by
calling that object as a function, passing the operation name as
the first argument and the arguments of the message as the rest of the
arguments.  Operation names are represented by symbols; normally these
symbols are in the keyword package (see (package)), since messages are
a protocol for communication between different programs, which may
reside in different packages.  So if we have a variable @code{my-ship}
whose value is an object of type @code{ship}, and we want to know its
@i{x} position, we send it a message as follows:

@lisp
(send my-ship :x-position)
@end lisp

To set the
ship's @i{x} position to @code{3.0}, we send it a message like this:

@lisp
(send my-ship :set :x-position 3.0)
@end lisp

It should be stressed that no new features are added to Lisp for message
sending; we simply define a convention on the way objects take
arguments.  The convention says that an object accepts messages by
always interpreting its first argument as an operation name.  The object
must consider this operation name, find the function which is the method
for that operation, and invoke that function.

@defun send object operation &rest arguments
Sends @i{object} a message with operation and arguments as specified.
Currently @code{send} is identical to @code{funcall}, but preferable when
a message is being sent, just for clarity.

There are vague ideas of making @i{send} different from @i{funcall}
if @i{object} is a symbol, list, number, or other object that does not
normally handle messages when funcalled, but the meaning of this is
not completely clear.
@end defun

@defun lexpr-send object operation &rest arguments
Currently @code{lexpr-send} is the same as @i{apply}.
@end defun

This raises the question of how message receiving works.  The object
must somehow find the right method for the message it is sent.
Furthermore, the object now has to be callable as a function.  But an
ordinary function will not do.  We need something that can store the
instance variables (the internal state) of the object.  We need a
function with internal state; that is, we need a coroutine.

Of the Zetalisp features presented so far, the most appropriate
is the closure (see (closure)).  A message-receiving object could be
implemented as a closure over a set of instance variables.  The function
inside the closure would have a big @code{selectq} form to dispatch on its
first argument.  (Actually, rather than using closures and a @code{selectq},
you would probably use entities ((entity)) and @code{defselect} ((defselect-fun)).)


While using closures (or entities) does work, it has several serious
problems.  The main problem is that in order to add a new operation to a
system, it is necessary to modify a lot of code; you have to find all
the types that understand that operation, and add a new clause to the
@code{selectq}.  The problem with this is that you cannot textually
separate the implementation of your new operation from the rest of the
system; the methods must be interleaved with the other operations for
the type.  Adding a new operation should only require @i{adding} Lisp code;
it should not require @i{modifying} Lisp code.

The conventional way of making generic operations is to have a procedure
for each operation, which has a big @code{selectq} for all the types; this
means you have to modify code to add a type.  The way described above is
to have a procedure for each type, which has a big @code{selectq} for all
the operations; this means you have to modify code to add an operation.
Neither of these has the desired property that extending the system
should only require adding code, rather than modifying code.

Closures (and entities) are also somewhat clumsy and crude.  A far more
streamlined, convenient, and powerful system for creating
message-receiving objects exists; it is called the @i{flavor} mechanism.
With flavors, you can add a new method simply by adding code, without
modifying anything.  Furthermore, many common and useful things
are very easy to do with flavors.  The rest of this chapter describes
flavors.

@section  Simple Use of Flavors

A @i{flavor}, in its simplest form, is a definition of an abstract type.
New flavors are created with the @code{defflavor} special form, and
methods of the flavor are created with the @code{defmethod} special form.
New instances of a flavor are created with the @code{make-instance}
function.  This section explains simple uses of these forms.

For an example of a simple use of flavors, here is how the @code{ship}
example above would be implemented.

@lisp
(defflavor ship (x-position y-position 
                 x-velocity y-velocity mass)
	        ()
  :gettable-instance-variables)

(defmethod (ship :speed) ()
  (sqrt (+ (^ x-velocity 2)
           (^ y-velocity 2))))

(defmethod (ship :direction) ()
  (atan2 y-velocity x-velocity))
@end lisp

The code above creates a new flavor.  The first subform of the
@code{defflavor} is @code{ship}, which is the name of the new flavor.  Next
is the list of instance variables; they are the five that should be
familiar by now.  The next subform is something we will get to later.
The rest of the subforms are the body of the @code{defflavor}, and each
one specifies an option about this flavor.  In our example, there is
only one option, namely @code{:gettable-instance-variables}.  This means
that for each instance variable, a method should automatically be
generated to return the value of that instance variable.  The name of
the operation is a symbol with the same name as the instance variable, but
interned on the keyword package.  Thus, methods are created to handle
the operations @code{:x-position}, @code{:y-position}, and so on.

Each of the two @code{defmethod} forms adds a method to the flavor.  The
first one adds a handler to the flavor @code{ship} for the operation
@code{:speed}.  The second subform is the lambda-list, and the rest is the
body of the function that handles the @code{:speed} operation.  The body can
refer to or set any instance variables of the flavor, just like variables
bound by a containing @code{let}.  When any instance of the
@code{ship} flavor is invoked with a first argument of @code{:direction}, the
body of the second @code{defmethod} is evaluated in an environment in
which the instance variables of @code{ship} refer to the instance variables
of this instance (the one to which the message was sent).  So the arguments
passed to @code{cli:atan} are the the velocity components of this particular ship.
The result of @code{cli:atan} becomes the value returned by the @code{:direction}
operation.

Now we have seen how to create a new abstract type: a new flavor.  Every
instance of this flavor has the five instance variables named in
the @code{defflavor} form, and the seven methods we have seen (five that
were automatically generated because of the
@code{:gettable-instance-variables} option, and two that we wrote
ourselves).  The way to create an instance of our new flavor is with the
@code{make-instance} function.  Here is how it could be used:

@lisp
(setq my-ship (make-instance 'ship))
@end lisp

This returns an object whose printed representation is
@code{#<SHIP 13731210>}.
(Of course, the value of the magic number will vary; it is just
the object address in octal.)  The argument to @code{make-instance} is
the name of the flavor to be instantiated.  Additional
arguments, not used here, are @i{init options}, that is, commands
to the flavor of which we are making an instance, selecting optional
features.  This will be discussed more in a moment.

Examination of the flavor we have defined shows that it is quite useless
as it stands, since there is no way to set any of the parameters.  We
can fix this up easily by putting the @code{:settable-instance-variables}
option into the @code{defflavor} form.  This option tells @code{defflavor} to
generate methods for operation @code{:set} for first argument
@code{:x-position}, @code{:y-position}, and so on; each such method takes one
additional argument and sets the corresponding instance variable to that value.
It also generates methods for the operations @code{:set-x-position},
@code{:set-y-position} and so on; each of these takes one argument
and sets the corresponding variable.

Another option we can add to the @code{defflavor} is
@code{:inittable-instance-variables}, which allows us to initialize the values
of the instance variables when an instance is first created.
@code{:inittable-instance-variables} does not create any methods; instead,
it makes @i{initialization keywords} named @code{:x-position},
@code{:y-position}, etc., that can be used as init-option arguments to
@code{make-instance} to initialize the corresponding instance variables.
The list of init options is sometimes called the @i{init-plist} because
it is like a property list.

Here is the improved @code{defflavor}:
@lisp
(defflavor ship (x-position y-position
                 x-velocity y-velocity mass) 
		()
  :gettable-instance-variables
  :settable-instance-variables
  :inittable-instance-variables)
@end lisp

All we have to do is evaluate this new @code{defflavor}, and the existing
flavor definition is updated and now includes the new methods and
initialization options.  In fact, the instance we generated a while ago
now accepts the new operations!  We can set the mass of
the ship we created by evaluating
@lisp
(send my-ship :set-mass 3.0)
@exdent or
(send my-ship :set :mass 3.0)
@end lisp
and the @code{mass} instance variable of @code{my-ship} is properly set to
@code{3.0}.  Whether you use @code{:set-mass} or the general operation
@code{:set} is a matter of style; @code{:set} is used by the expansion of
@code{(setf (send my-ship :mass) 3.0)}.

If you want to play around with flavors, it is useful
to know that @code{describe} of an instance tells you the flavor of the
instance and the values of its instance variables.  If we were to evaluate
@code{(describe my-ship)} at this point, the following would be printed:

@lisp
#<SHIP 13731210>, an object of flavor SHIP,
 has instance variable values:
	X-POSITION:         void
	Y-POSITION:         void
	X-VELOCITY:         void
	Y-VELOCITY:         void
	MASS:               3.0
@end lisp

Now that the instance variables are @i{inittable}, we can create another
ship and initialize some of the instance variables using the init-plist.
Let's do that and @code{describe} the result:

@lisp
(setq her-ship (make-instance 'ship :x-position 0.0
			            :y-position 2.0
				    :mass 3.5))
		=> #<SHIP 13756521>


(describe her-ship)
#<SHIP 13756521>, an object of flavor SHIP,
 has instance variable values:
	X-POSITION:         0.0
	Y-POSITION:         2.0
	X-VELOCITY:         void
	Y-VELOCITY:         void
	MASS:               3.5
@end lisp

A flavor can also establish default initial values for instance
variables.  These default values are used when a new instance is created
if the values are not initialized any other way.  The syntax for
specifying a default initial value is to replace the name of the
instance variable by a list, whose first element is the name and whose
second is a form to evaluate to produce the default initial value.  For
example:

@lisp
(defvar *default-x-velocity* 2.0)
(defvar *default-y-velocity* 3.0)

(defflavor ship ((x-position 0.0)
		 (y-position 0.0)
		 (x-velocity *default-x-velocity*)
		 (y-velocity *default-y-velocity*)
		 mass) 
		()
  :gettable-instance-variables
  :settable-instance-variables
  :inittable-instance-variables)

(setq another-ship (make-instance 'ship :x-position 3.4))
 => #<SHIP 14563643>

(describe another-ship)
#<SHIP 14563643>, an object of flavor SHIP,
 has instance variable values:
	X-POSITION:         3.4
	Y-POSITION:         0.0
	X-VELOCITY:         2.0
	Y-VELOCITY:         3.0
	MASS:               void
@end lisp

@code{x-position} was initialized explicitly, so the default was ignored.
@code{y-position} was initialized from the default value, which was
@code{0.0}.  The two velocity instance variables were initialized from
their default values, which came from two global variables.  @code{mass}
was not explicitly initialized and did not have a default
initialization, so it was left void.

There are many other options that can be used in @code{defflavor}, and the
init options can be used more flexibly than just to initialize instance
variables; full details are given later in this chapter.  But even with
the small set of features we have seen so far, it is easy to write
object-oriented programs.

@section  Mixing Flavors

Now we have a system for defining message-receiving objects so that we
can have generic operations.  If we want to create a new type called
@code{meteor} that would accept the same generic operations as @code{ship}, we
could simply write another @code{defflavor} and two more @code{defmethod}'s
that looked just like those of @code{ship}, and then meteors and ships
would both accept the same operations.  @code{ship} would have some
more instance variables for holding attributes specific to ships
and some more methods for operations that are not generic, but
are only defined for ships; the same would be true of @code{meteor}.

However, this would be a a wasteful thing to do.  The same code has to
be repeated in several places, and several instance variables have to be
repeated.  The code now needs to be maintained in many places, which is
always undesirable.  The power of flavors (and the name ``flavors'') comes
from the ability to mix several flavors and get a new flavor.  Since the
functionality of @code{ship} and @code{meteor} partially overlap, we can take
the common functionality and move it into its own flavor, which might be
called @code{moving-object}.  We would define @code{moving-object} the same
way as we defined @code{ship} in the previous section.  Then, @code{ship} and
@code{meteor} could be defined like this:

@lisp
(defflavor ship (engine-power number-of-passengers name) 
                (moving-object)
   :gettable-instance-variables)

(defflavor meteor (percent-iron)
		  (moving-object)
   :inittable-instance-variables)
@end lisp

These @code{defflavor} forms use the second subform, which we ignored
previously.  The second subform is a list of flavors to be combined to
form the new flavor; such flavors are called @i{components}.
Concentrating on @code{ship} for a moment (analogous things are true of
@code{meteor}), we see that it has exactly one component flavor:
@code{moving-object}.  It also has a list of instance variables, which
includes only the ship-specific instance variables and not the ones that
it shares with @code{meteor}.  By incorporating @code{moving-object}, the @code{ship}
flavor acquires all of its instance variables, and so need not name them
again.  It also acquires all of @code{moving-object}'s methods, too.  So
with the new definition, @code{ship} instances still implement the
@code{:x-velocity} and @code{:speed} operations, with the same meaning as before.
However, the @code{:engine-power} operation is also understood (and
returns the value of the @code{engine-power} instance variable).

What we have done here is to take an abstract type, @code{moving-object},
and build two more specialized and powerful abstract types on top of it.
Any ship or meteor can do anything a moving object can do, and each also
has its own specific abilities.  This kind of building can continue; we
could define a flavor called @code{ship-with-passenger} that was built on
top of @code{ship}, and it would inherit all of @code{moving-object}'s
instance variables and methods as well as @code{ship}'s instance variables
and methods.  Furthermore, the second subform of @code{defflavor} can be a
list of several components, meaning that the new flavor should combine
all the instance variables and methods of all the flavors in the list,
as well as the ones @i{those} flavors are built on, and so on.  All the
components taken together form a big tree of flavors.  A flavor is built
from its components, its components' components, and so on.  We
sometimes use the term ``components'' to mean the immediate components
(the ones listed in the @code{defflavor}), and sometimes to mean all the
components (including the components of the immediate components and so
on).  (Actually, it is not strictly a tree, since some flavors might be
components through more than one path.  It is really a directed graph;
it can even be cyclic.)

The order in which the components are combined to form a flavor is
important.  The tree of flavors is turned into an ordered list by
performing a @i{top-down, depth-first} walk of the tree, including
non-terminal nodes @i{before} the subtrees they head, ignoring any
flavor that has been encountered previously somewhere else in the tree.
For example, if @code{flavor-1}'s immediate components are @code{flavor-2} and
@code{flavor-3}, and @code{flavor-2}'s components are @code{flavor-4} and
@code{flavor-5}, and @code{flavor-3}'s component was @code{flavor-4}, then the
complete list of components of @code{flavor-1} would be:
@lisp
flavor-1, flavor-2, flavor-4, flavor-5, flavor-3
@end lisp
The flavors earlier in this list are the more specific, less basic ones;
in our example, @code{ship-with-passengers} would be first in the list,
followed by @code{ship}, followed by @code{moving-object}.  A flavor is always
the first in the list of its own components.  Notice that @code{flavor-4}
does not appear twice in this list.  Only the first occurrence of a
flavor appears; duplicates are removed.  (The elimination of duplicates
is done during the walk; if there is a cycle in the directed graph, it
does not cause a non-terminating computation.)

The set of instance variables for the new flavor is the union of all the
sets of instance variables in all the component flavors.  If both
@code{flavor-2} and @code{flavor-3} have instance variables named @code{foo},
then @code{flavor-1} has an instance variable named @code{foo}, and any
methods that refer to @code{foo} refer to this same instance variable.
Thus different components of a flavor can communicate with one another
using shared instance variables.  (Typically, only one component ever
sets the variable; the others only look at it.)  The default initial
value for an instance variable comes from the first component flavor to
specify one.

@cindex combined method
The way the methods of the components are combined is the heart of the
flavor system.  When a flavor is defined, a single function, called a
@i{combined method}, is constructed for each operation supported by the
flavor.  This function is constructed out of all the methods for that
operation from all the components of the flavor.  There are many different
ways that methods can be combined; these can be selected by the user
when a flavor is defined.  The user can also create new forms of
combination.

There are several kinds of methods, but
so far, the only kinds of methods we have seen are @i{primary} methods.
The default way primary methods are combined is that all but the
earliest one provided are ignored.  In other words, the combined method
is simply the primary method of the first flavor to provide a primary
method.  What this means is that if you are starting with a flavor
@code{foo} and building a flavor @code{bar} on top of it, then you can
override @code{foo}'s method for an operation by providing your own method.
Your method will be called, and @code{foo}'s will never be called.

Simple overriding is often useful; for example, if you want to make a
new flavor @code{bar} that is just like @code{foo} except that it reacts
completely differently to a few operations.  However, often you don't
want to completely override the base flavor's (@code{foo}'s) method;
sometimes you want to add some extra things to be done.  This is where
combination of methods is used.

The usual way methods are combined is that one flavor provides a primary
method, and other flavors provide @i{daemon methods}.  The idea
is that the primary method is ``in charge'' of the main business of
handling the operation, but other flavors just want to keep informed
that the message was sent, or just want to do the part of the operation
associated with their own area of responsibility.

@cindex daemon methods

@i{daemon} methods come in two kinds, @i{before} and @i{after}.  There is
a special syntax in @code{defmethod} for defining such methods.  Here is an example
of the syntax.  To give the @code{ship} flavor an after-daemon method for the
@code{:speed} operation, the following syntax would be used:
@lisp
(defmethod (ship :after :speed) () @i{body})
@end lisp

Now, when a message is sent, it is handled by a new function called the
@i{combined} method.  The combined method first calls all of the before daemons,
then the primary method, then all the after daemons.  Each method is passed the
same arguments that the combined method was given.  The returned values from the
combined method are the values returned by the primary method; any values
returned from the daemons are ignored.  Before-daemons are called in the order
that flavors are combined, while after-daemons are called in the reverse order.
In other words, if you build @code{bar} on top of @code{foo}, then @code{bar}'s
before-daemons run before any of those in @code{foo}, and @code{bar}'s
after-daemons run after any of those in @code{foo}.

The reason for this order is to keep the modularity order correct.  If
we create @code{flavor-1} built on @code{flavor-2}, then it should not matter
what @code{flavor-2} is built out of.  Our new before-daemons go before all
methods of @code{flavor-2}, and our new after-daemons go after all methods of
@code{flavor-2}.  Note that if you have no daemons, this reduces to the
form of combination described above.  The most recently added component
flavor is the highest level of abstraction; you build a higher-level
object on top of a lower-level object by adding new components to the
front.  The syntax for defining daemon methods can be found in the
description of @code{defmethod} below.

To make this a bit more clear, let's consider a simple example that is
easy to play with: the @code{:print-self} method.  The Lisp printer
(i.e. the @code{print} function; see (printer)) prints instances of flavors by sending
them @code{:print-self} messages.  The first argument to the
@code{:print-self} operation is a stream (we can ignore the others for now),
and the receiver of the message is supposed to print its printed
representation on the stream.  In the @code{ship} example above, the reason
that instances of the @code{ship} flavor printed the way they did is
because the @code{ship} flavor was actually built on top of a very basic
flavor called @code{vanilla-flavor}; this component is provided
automatically by @code{defflavor}.  It was @code{vanilla-flavor}'s
@code{:print-self} method that was doing the printing.  Now, if we give
@code{ship} its own primary method for the @code{:print-self} operation, then
that method completely takes over the job of printing;
@code{vanilla-flavor}'s method will not be called at all.  However, if we
give @code{ship} a before-daemon method for the @code{:print-self} operation,
then it will get invoked before the @code{vanilla-flavor} method, and so
whatever it prints will appear before what @code{vanilla-flavor} prints.
So we can use before-daemons to add prefixes to a printed
representation; similarly, after-daemons can add suffixes.

There are other ways to combine methods besides daemons, but this way is the
most common.  The more advanced ways of combining methods are explained
in a later section; see (method-combination).  @code{vanilla-flavor} and what it does for
you are also explained later; see (vanilla-flavor).

@section  Flavor Functions

@defmac defflavor
A flavor is defined by a form
@lisp
(defflavor @i{flavor-name} (@i{var1} @i{var2}...) (@i{flav1} @i{flav2}...)
	@i{opt1} @i{opt2}...)
@end lisp
@i{flavor-name} is a symbol which serves to name this flavor.  It is given an @code{si:flavor}
property which is the internal data-structure containing the details of the flavor.

@code{(type-of @i{obj})}, where @i{obj} is an instance of the flavor named
@i{flavor-name}, returns the symbol @i{flavor-name}.
@code{(typep @i{obj} @i{flavor-name})} is @code{t} if @i{obj} is an instance of a
flavor, one of whose components (possibly itself) is @i{flavor-name}.

@i{var1}, @i{var2}, etc. are the names of the instance-variables
containing the local state for this flavor.  A list of the name of an
instance-variable and a default initialization form is also acceptable;
the initialization form is evaluated when an instance of
the flavor is created if no other initial value for
the variable is obtained.  If no initialization is specified, the variable
remains void.

@i{flav1}, @i{flav2}, etc. are the names of the component flavors out of
which this flavor is built.  The features of those flavors are inherited
as described previously.

@i{opt1}, @i{opt2}, etc. are options; each option may be either a
keyword symbol or a list of a keyword symbol and arguments.  The options
to @code{defflavor} are described in (defflavor-options).
@end defmac

@defvar *all-flavor-names*
A list of the names of all the flavors that have ever been @code{defflavor}'ed.
@end defvar

@defmac defmethod
A method, that is, a function to handle a particular operation for instances
of a particular flavor, is defined by a form such as
@lisp
(defmethod (@i{flavor-name} @i{method-type} @i{operation}) @i{lambda-list}
  @i{form1} @i{form2}...)
@end lisp
@i{flavor-name} is a symbol which is the name of the flavor which is to
receive the method.
@i{operation} is a keyword symbol which names the operation
to be handled.  @i{method-type} is a keyword symbol for the type of method;
it is omitted when you are defining a primary method.  For some method-types,
additional information is expected.  It comes after @i{operation}.

The meaning of @i{method-type} depends on what style of
method combination is declared for this operation.  For instance, if
@code{:daemon} combination (the default style) is in use,
method types @code{:before} and @code{:after} are allowed.  See
(method-combination) for a complete description of method types and
the way methods are combined.

@i{lambda-list} describes the arguments and aux variables of the
function; the first argument to the method, which is the operation
name itself, is automatically handled and so is not included in the
lambda-list.  Note that methods may not have unevaluated (@code{&quote}) arguments;
that is, they must be functions, not special forms.  @i{form1},
@i{form2}, etc. are the function body; the value of the last form
is returned.

The variant form
@lisp
(defmethod (@i{flavor-name} @i{operation}) @i{function})
@end lisp
where @i{function} is a symbol, says that @i{flavor-name}'s method for
@i{operation} is @i{function}, a symbol which names a function.  That
function must take appropriate arguments; the first argument is the
operation.  When the function is called, @code{self} will be bound.

If you redefine a method that is already defined, the old definition is
replaced by the new one.  Given a flavor, an operation name, and a
method type, there can only be one function (with the exception of
@code{:case} methods; see (case-method-combination)), so if you define a @code{:before} daemon method for the
@code{foo} flavor to handle the @code{:bar} operation, then you replace the
previous before-daemon; however, you do not affect the primary method or
methods of any other type, operation or flavor.

The function spec for a method (see (method-function-spec)) looks like:
@lisp
(:method @i{flavor-name} @i{operation})  1or*
(:method @i{flavor-name} @i{method-type} @i{operation})  1or*
(:method @i{flavor-name} @i{method-type} @i{operation} @i{suboperation})
@end lisp
This is useful to know if you want to trace ((trace-fun)), breakon
((breakon-fun)) or advise ((advise-fun)) a method, or if you want to
poke around at the method function itself, e.g.  disassemble it
(see (disassemble-fun)).
@end defmac

@defun make-instance flavor-name init-option1 value1 init-option2 value2... 
Creates and returns an instance of the specified flavor.  Arguments
after the first are alternating init-option keywords and arguments to
those keywords.  These options are used to initialize instance variables
and to select arbitrary options, as described above.  An @code{:init}
message is sent to the newly-created object with one argument, the
init-plist.  This is a disembodied property-list containing the
init-options specified and those defaulted from the flavor's
@code{:default-init-plist} (however, init keywords that simply initialize instance
variables, and the corresponding values, may be absent when the
@code{:init} methods are called).  @code{make-instance} is an easy-to-call
interface to @code{instantiate-flavor}, below.

If @code{:allow-other-keys} is used as an init keyword
with a non-@code{nil} value, this error check is suppressed.
Then unrecognized keywords are simply ignored.  Example:
@lisp
(make-instance 'foo :lose 5 :allow-other-keys t)
@end lisp
specifies the init keyword @code{:lose}, but prevents an error
should the keyword not be handled.
@end defun

@defun instantiate-flavor flavor-name init-plist &optional send-init-message-p return-unhandled-keywords area
This is an extended version of @code{make-instance}, giving you more features.
Note that it takes the @i{init-plist} as an individual argument, rather than taking a rest
argument of init options and values.

The @i{init-plist} argument must be a disembodied property list;
@code{locf} of a rest argument is satisfactory.  Beware!  This property list
can be modified; the properties from the default init plist are
@code{putprop}'ed on if not already present, and some @code{:init} methods
do explicit @code{putprop}'s onto the @i{init-plist}.

In the event that @code{:init} methods @code{remprop} properties already on
the @i{init-plist} (as opposed to simply doing @code{get} and @code{putprop}),
then the @i{init-plist} is @code{rplacd}'ed.  This means that the actual
supplied list of options is modified.  It also means that @code{locf} of a
rest argument does not work; the caller of @code{instantiate-flavor}
must copy its rest argument (e.g. with @code{copylist}); this is because
@code{rplacd} is not allowed on stack lists.

Do not use @code{nil} as the @i{init-plist} argument.  This would mean
to use the properties of the symbol @code{nil} as the init options.
If your goal is to have no init options, you must provide a property list
containing no properties, such as the list @code{(nil)}.

Here is the sequence of actions by which @code{instantiate-flavor} creates
a new instance:

First, the specified flavor's instantiation flavor function
((instantiation-flavor-function)), if it exists, is called to determine
which flavor should actually be instantiated.  If there is no instantiation
flavor function, the specified flavor is instantiated.

If the flavor's method hash-table and other internal information have
not been computed or are not up to date, they are computed.  This may
take a substantial amount of time or even invoke the compiler, but
it happens only once for each time you define or redefine a particular flavor.

Next, the instance itself is created.  If the @i{area} argument is
specified, it is the number of an area in which to cons the instance;
otherwise the flavor's instance area function is called to choose an area
if there is one; otherwise, @code{default-cons-area} is used.  See
(instance-area-function).

Then the initial values of the instance variables are computed.  If an
instance variable is declared inittable, and a keyword with the same
spelling as its name appears in @i{init-plist}, the property for that
keyword is used as the initial value.

Otherwise, if the default init plist specifies such a property, it is
evaluated and the value is used.  Otherwise, if the flavor definition
specifies a default initialization form, it is evaluated and the value
is used.  The initialization form may not refer to any instance
variables.  It can find the new instance in @code{self} but should not
invoke any operations on it and should not refer directly to any
instance variables.  It can get at instance variables using accessor
macros created by the @code{:outside-accessible-instance-variables} option
((outside-accessible-instance-variables-option)) or the function
@code{symeval-in-instance} ((symeval-in-instance-fun)).

If an instance variable does not get initialized either of these ways it
is left void; an @code{:init} method may initialize it (see below).

All remaining keywords and values specified in the
@code{:default-init-plist} option to @code{defflavor}, that do not initialize
instance variables and are not overridden by anything explicitly specified
in @i{init-plist} are then merged into @i{init-plist} using @code{putprop}.
The default init plist of the instantiated flavor is considered first,
followed by those of all the component flavors in the standard order.
See (default-init-plist-option).

Then keywords appearing in the @i{init-plist} but not defined with the
@code{:init-keywords} option or the @code{:inittable-instance-variables}
option for some component flavor are collected.  If the
@code{:allow-other-keys} option is specified with a non-@code{nil} value
(either in the original @i{init-plist} argument or by some default init
plist) then these @i{unhandled} keywords are ignored.  If the
@i{return-unhandled-keywords} argument is non-@code{nil}, a list of these
keywords is returned as the second value of @code{instantiate-flavor}.
Otherwise, an error is signaled if any unrecognized init keywords are
present.

If the @i{send-init-message-p} argument is supplied and non-@code{nil}, an
@code{:init} message is sent to the newly-created instance, with one
argument, the @i{init-plist}.  @code{get} can be used to extract options
from this property-list.  Each flavor that needs initialization can
contribute an @code{:init} method by defining a daemon.

The @code{:init} methods should not look on the @i{init-plist} for keywords
that simply initialize instance variables (that is, keywords defined
with @code{:inittable-instance-variables} rather than @code{:init-keywords}).
The corresponding instance variables are already set up when the
@code{:init} methods are called, and sometimes the keywords and their
values may actually be missing from the @i{init-plist} if it is more
efficient not to put them on.  To avoid problems, always refer to the
instance variables themselves rather than looking for the init keywords
that initialize them.
@end defun

.defmetamethod "all flavor instances" :init init-plist
This operation is implemented on all flavor instances.  Its purpose is to
examine the init keywords and perform whatever initializations are
appropriate.  @i{init-plist} is the argument that was given to
@code{instantiate-flavor}, and may be passed directly to @code{get}
to examine the value of any particular init option.

The default definition of this operation does nothing.  However,
many flavors add @code{:before} and @code{:after} daemons to it.
.end_defmetamethod

@defun instancep object
Returns @code{t} if @code{object} is an instance.
This is equivalent to @code{(typep @i{object} 'instance)}.
@end defun

@defmac defwrapper
This is hairy and if you don't understand it you should skip it.

Sometimes the way the flavor system combines the methods of different
flavors (the daemon system) is not powerful enough.  In that case @code{defwrapper}
can be used to define a macro that expands into code that is wrapped around
the invocation of the methods.  This is best explained by an example;
suppose you needed a lock locked during the processing of the
@code{:foo} operation on flavor @code{bar}, which takes two arguments,
and you have a @code{lock-frobboz} special-form that knows how to lock the lock
(presumably it generates an @code{unwind-protect}).  @code{lock-frobboz} needs to see
the first argument to the operation; perhaps that tells it what sort of operation
is going to be performed (read or write).
@lisp
(defwrapper (bar :foo) ((arg1 arg2) . body)
  `(lock-frobboz (self arg1)
     . ,body))
@end lisp
The use of the @code{body} macro-argument prevents the macro defined by
@code{defwrapper} from knowing the exact implementation and allows
several @code{defwrapper}'s from different flavors to be combined
properly.

Note well that the argument variables, @code{arg1} and @code{arg2}, are not referenced
with commas before them.  These may look like @code{defmacro} ``argument'' variables,
but they are not.  Those variables are not bound at the time the @code{defwrapper}-defined
macro is expanded and the back-quoting is done; rather the result of that
macro-expansion and back-quoting is code which, when a message is sent, will
bind those variables to the arguments in the message as local variables of
the combined method.

Consider another example.  Suppose you thought you wanted a @code{:before} daemon,
but found that if the argument was @code{nil} you needed to return from processing
the message immediately, without executing the primary method.  You could write
a wrapper such as
@lisp
(defwrapper (bar :foo) ((arg1) . body)
  `(cond ((null arg1))
	 (t (print "About to do :FOO")
	    . ,body)))
@end lisp

Suppose you need a variable for communication among the daemons for a particular
operation; perhaps the @code{:after} daemons need to know what the primary method did,
and it is something that cannot be easily deduced from just the arguments.  You
might use an instance variable for this, or you might create a special variable
which is bound during the processing of the operation and used free by the methods.
@lisp
(defvar *communication*)
(defwrapper (bar :foo) (ignore . body)
  `(let ((*communication* nil))
     . ,body))
@end lisp

Similarly you might want a wrapper that puts a @code{catch} around the processing
of an operation so that any one of the methods could throw out in the event of
an unexpected condition.

Like daemon methods, wrappers work in outside-in order; when you add a
@code{defwrapper} to a flavor built on other flavors, the new wrapper
is placed outside any wrappers of the component flavors.  However,
@i{all} wrappers happen before @i{any} daemons happen.  When the combined
method is built, the calls to the before-daemon methods, primary methods,
and after-daemon methods are all placed together, and then the wrappers
are wrapped around them.  Thus, if a component flavor defines a wrapper,
methods added by new flavors execute within that wrapper's context.

@code{:around} methods can do some of the same things that wrappers can.  See
(around-method-type).  If one flavor defines both a wrapper and an
@code{:around} method for the same operation, the @code{:around} method is
executed inside the wrapper.

By careful about inserting the body into an internal lambda-expression
within the wrapper's code.  Doing so interacts with the internals of the
flavor system and requires knowledge of things not documented in the
manual in order to work properly.  It is much simpler to use an
@code{:around} method instead.
@end defmac

@defmac undefmethod (flavor [type] operation [suboperation])
@lisp
(undefmethod (flavor :before :operation))
@exdent removes the method created by
(defmethod (flavor :before :operation) (@i{args}) ...)
@end lisp

To remove a wrapper, use @code{undefmethod} with @code{:wrapper} as the method type.

@code{undefmethod} is simply an interface to @code{fundefine}
(see (fundefine-fun)) that accepts the same syntax as
@code{defmethod}.

If a file that used to contain a method definition is reloaded
and if that method no longer seems to have a definition in the file,
the user is asked whether to @code{undefmethod} that method.  This may be
important to enable the modified program to inherit the methods it is
supposed to inherit.  If the method in question has been redefined by some
other file, this is not done, the assumption being that the definition was
merely moved.
@end defmac

@defun undefflavor flavor
Undefines flavor @i{flavor}.  All methods of the flavor are lost.
@i{flavor} and all flavors that depend on it are no longer valid to
instantiate.

If instances of the discarded definition exist, they continue to
use that definition.
@end defun

@defvar self
When a message is sent to an object, the variable @code{self} is automatically
bound to that object, for the benefit of methods which want to manipulate
the object itself (as opposed to its instance variables).
@end defvar

@defun funcall-self operation arguments...
@defunx lexpr-funcall-self operation arguments... list-of-arguments
@code{funcall-self} is nearly equivalent to @code{funcall} with @code{self} as
the first argument.  @code{funcall-self} used to be faster, but now
@code{funcall} of @code{self} is just as fast.  Therefore, @code{funcall-self}
is obsolete.  It should be replaced with @code{funcall} or @code{send} of @code{self}.

Likewise, @code{lexpr-funcall-self} should be replaced with use of
@code{lexpr-send} to @code{self}.
@end defun

@defun funcall-with-mapping-table function mapping-table &rest arguments
Applies @i{function} to @i{arguments} with @code{sys:self-mapping-table}
bound to @i{mapping-table}.  This is faster than binding the variable
yourself and doing an ordinary @code{funcall}, because the system assumes
that the mapping table you specify is the correct one for @i{function}
to be run with.  However, if you pass the wrong mapping table, incorrect
execution will take place.

This function is used in the code for combined methods and is also useful
for the user in @code{:around} methods (see (around-method-type)).
@end defun

@defun lexpr-funcall-with-mapping-table function mapping-table &rest arguments
Applies @i{function} to @i{arguments} using @code{lexpr-funcall}, with
@code{sys:self-mapping-table} bound to @i{mapping-table}.
@end defun

@defmac declare-flavor-instance-variables (flavor) body...
Sometimes it is useful to have a function which is not itself a method, but
which is to be called by methods and wants to be able to access the
instance variables of the object @code{self}.  The form
@lisp
(declare-flavor-instance-variables (@i{flavor-name})
  (defun @i{function} @i{args} @i{body}...))
@end lisp
surrounds the function definition with a peculiar kind of declaration 
which makes the instance variables of flavor @i{flavor-name}
accessible by name.  Any kind of function definition is allowed;
it does not have to use @code{defun} per se.

If you call such a function when @code{self}'s value is an instance whose
flavor does not include @i{flavor-name} as a component, it is an error.

Cleaner than using @code{declare-flavor-instance-variables}, because it
does not involve putting anything around the function definition, is using
a local declaration.  Put @code{(declare (:self-flavor @i{flavorname}))} as
the first expression in the body of the function.  For example:
@lisp
(defun foo (a b)
  (declare (:self-flavor myobject))
  (+ a (* b speed)))
@end lisp
(where @code{speed} is an instance variable of the flavor @code{myobject})
is equivalent to
@lisp
(declare-flavor-instance-variables (myobject)
(defun foo (a b)
  (+ a (* b speed))))
@end lisp
@end defmac

@defspec with-self-variables-bound body...
Within the body of this special form, all of @code{self}'s instance
variables are bound as specials to the values inside @code{self}.
(Normally this is true only of those instance variables that are
specified in @code{:special-instance-variables} when @code{self}'s flavor was
defined.)  As a result, inside the body you can use @code{set}, @code{boundp}
and @code{symeval}, etc., freely on the instance variables of @code{self}.
@end defspec

@defun recompile-flavor flavor-name &optional single-operation (use-old-combined-methods @code{t}) (do-dependents @code{t})
Updates the internal data of the flavor and any flavors that depend on it.
If @i{single-operation} is supplied non-@code{nil}, only the methods for that
operation are changed.  The system does this when you define a new method that
did not previously exist.
If @i{use-old-combined-methods} is @code{t}, then the existing combined
method functions are used if possible.  New ones are generated only
if the set of methods to be called has changed.  This
is the default.
If @i{use-old-combined-methods} is @code{nil}, automatically-generated functions
to call multiple methods or to contain code generated by wrappers are regenerated
unconditionally.
If @i{do-dependents} is @code{nil}, only the specific flavor you specified
is recompiled.  Normally all flavors that depend on it are also recompiled.

@code{recompile-flavor} affects only flavors that have already been compiled.
Typically this means it affects flavors that have been instantiated,
but does not bother with mixins (see (mixin-flavor)).
@end defun

@defvar si:*dont-recompile-flavors*
If this variable is non-@code{nil}, automatic recompilation of combined methods
is turned off.

If you wish to make several changes each of which will cause recompilation
of the same combined methods, you can use this variable to speed things up by
making the recompilations happen only once.  Set the variable to @code{t},
make your changes, and then set the variable back to @code{nil}.
Then use @code{recompile-flavor} to recompile whichever combined methods
need it.  For example:
@lisp
(setq si:*dont-recompile-flavors* t)
(undefmethod (tv:sheet :after :bar))
(defmethod (tv:sheet :before :bar) ...)
(setq si:*dont-recompile-flavors* nil)
(recompile-flavor 'tv:sheet :bar)
@end lisp
@code{tv:sheet} has very many dependents; @code{recompile-flavor} even once
takes painfully long.  It's nice to avoid spending the time twice.
@end defvar

@defmac compile-flavor-methods flavor...
The form @code{(compile-flavor-methods @i{flavor-name-1}
@i{flavor-name-2}...)}, placed in a file to be compiled, directs the
compiler to include the automatically-generated combined methods for the
named flavors in the resulting QFASL file, provided all of the necessary
flavor definitions have been made.  Furthermore, all internal data
structures needed to instantiate the flavor will be computed when the
QFASL file is loaded rather than waiting until the first attempt to
instantiate it.

This means that the combined methods get compiled at compile time and
the data structures get generated at load time, rather than both things
happening at run time.  This is a very good thing, since if the
the compiler must be invoked at run time, the program will be
slow the first time it is run.  (The compiler must be called in any case if
incompatible changes have been made, such as addition or deletion of
methods that must be called by a combined method.)

You should only use @code{compile-flavor-methods} for flavors that are
going to be instantiated.  For a flavor that is never to be instantiated
(that is, a flavor that only serves to be a component of other flavors
that actually do get instantiated), it is a complete waste of time,
except in the unusual case where those other flavors can all inherit
the combined methods of this flavor instead of each one having its
own copy of a combined method which happens to be identical to the
others.  In this unusual case, you should use the @code{:abstract-flavor}
option in @code{defflavor} ((abstract-flavor-option)).

The @code{compile-flavor-methods} forms should be compiled after all of
the information needed to create the combined methods is available.  You
should put these forms after all of the definitions of all relevant
flavors, wrappers, and methods of all components of the flavors mentioned.

The methods used by @code{compile-flavor-methods} to form the combined
methods that go in the QFASL file are all those present in the file
being compiled and all those defined in the Lisp world.

When a @code{compile-flavor-methods} form is seen by the interpreter,
the combined methods are compiled and the internal data structures
are generated.
@end defmac

@defun get-handler-for object operation
Given an object and an operation, this returns the object's method for that
operation, or @code{nil} if it has none.  When @i{object} is an instance of
a flavor, this function can be useful to find which of that flavor's
components supplies the method.  If you get back a combined method,
you can use the @code{Meta-X List Combined Methods} editor command ((list-combined-methods))
to find out what it does.

This is related to the @code{:handler} function spec
(see (function-spec)).

It is preferable to use the generic operation @code{:get-handler-for}.
@end defun

@defun flavor-allows-init-keyword-p flavor-name keyword
Returns non-@code{nil} if the flavor named @i{flavor-name} allows @i{keyword}
in the init options when it is instantiated, or @code{nil} if it does not.
The non-@code{nil} value is the name of the component flavor that contributes
the support of that keyword.
@end defun

@defun si:flavor-all-allowed-init-keywords flavor-name
Returns a list of all the init keywords that may be used
in instantiating @i{flavor-name}.
@end defun

@defun symeval-in-instance instance symbol &optional no-error-p
Returns the value of the instance variable @i{symbol} inside
@i{instance}.  If there is no such instance variable, an error is
signaled, unless @i{no-error-p} is non-@code{nil} in which case @code{nil}
is returned.
@end defun

@defun set-in-instance instance symbol value
Sets the value of the instance variable @i{symbol} inside @i{instance}
to @i{value}.  If there is no such instance variable, an error is
signaled.
@end defun

@defun locate-in-instance instance symbol
Returns a locative pointer to the cell inside @i{instance} which holds the
value of the instance variable named @i{symbol}.
@end defun

@defun describe-flavor flavor-name
Prints descriptive information about a flavor; it is self-explanatory.
An important thing it tells you that can be hard to figure out
yourself is the combined list of component flavors; this list is what
is printed after the phrase `and directly or indirectly depends on'.
@end defun

@defvar si:*flavor-compilations*
Contains a history of when the flavor mechanism invoked
the compiler.  It is a list; elements toward the front of the list
represent more recent compilations.  Elements are typically of the
form
@lisp
(@i{function-spec} @i{pathname})
@end lisp
where the function spec starts with @code{:method} and has a method type of
@code{:combined}.

You may @code{setq} this variable to @code{nil} at any time; for instance before
loading some files that you suspect may have missing or obsolete
@code{compile-flavor-methods} in them.
@end defvar

.defcondition sys:unclaimed-message (@code{error})
This condition is signaled whenever a flavor instance is sent a message whose
operation it does not handle.  The condition instance supports these operations:
@table @code
@item :object
The flavor instance that received the message.
@item :operation
The operation that was not handled.
@item :arguments
The list of arguments to that operation
@end table
.end_defcondition

@section  Defflavor Options


There are quite a few options to @code{defflavor}.  They are all described here,
although some are for very specialized purposes and not of interest to most users.
Each option can be written in two forms; either the keyword by itself, or a list
of the keyword and arguments to that keyword.

Several of these options declare things about instance variables.
These options can be given with arguments which are instance variables,
or without any arguments in which case they refer to all of the
instance variables listed at the top of the @code{defflavor}.  This is
@i{not} necessarily all the instance variables of the component
flavors, just the ones mentioned in this flavor's @code{defflavor}.  When
arguments are given, they must be instance variables that were listed
at the top of the @code{defflavor}; otherwise they are assumed to be
misspelled and an error is signaled.  It is legal to declare things
about instance variables inherited from a component flavor, but to do
so you must list these instance variables explicitly in the instance
variable list at the top of the @code{defflavor}.

@table @code
@item :gettable-instance-variables
'kindex :gettable-instance-variables defflavor
Enables automatic generation of methods for getting the values of
instance variables.  The operation name is the name of the variable, in
the keyword package (i.e. it has a colon in front of it).

Note that there is nothing special about these methods; you could easily
define them yourself.  This option generates them automatically to save
you the trouble of writing out a lot of very simple method definitions.
(The same is true of methods defined by the
@code{:settable-instance-variables} option.)  If you define a method for the
same operation name as one of the automatically generated methods, the
explicit definition overrides the automatic one.

@item :settable-instance-variables
'kindex :settable-instance-variables defflavor
Enables automatic generation of methods for setting the values of
instance variables.  The operation name is `@code{:set-}' followed by the
name of the variable.  All settable instance
variables are also automatically made gettable and inittable.
(See the note in the description of the @code{:gettable-instance-variables}
option, above.)

In addition, @code{:case} methods are generated for the @code{:set} operation
with suboperations taken from the names of the variables, so that
@code{:set} can be used to set them.

@item :inittable-instance-variables
'kindex :inittable-instance-variables defflavor
The instance variables listed as arguments, or all instance variables
listed in this @code{defflavor} if the keyword is given alone, are made
@i{inittable}.  This means that they can be initialized through use of a
keyword (a colon followed by the name of the variable) as an init-option
argument to @code{make-instance}.

@item :special-instance-variables
'kindex :special-instance-variables defflavor
The instance variables listed as arguments, or all instance variables
listed in this @code{defflavor} if the keyword is given alone, will
be bound dynamically when handling messages.  (By default, instance
variables are bound lexically with the scope being the method.)
You must do this to any instance variables that you wish to be accessible
through @code{symeval}, @code{set}, @code{boundp} and @code{makunbound}, since they
see only dynamic bindings.

This should also be done for any instance variables that are declared
globally special.  If you omit this, the flavor system does it for
you automatically when you instantiate the flavor, and gives you a
warning to remind you to fix the @code{defflavor}.

@item :init-keywords
'kindex :init-keywords defflavor
The arguments are declared to be valid keywords to use in
@code{instantiate-flavor} when creating an instance of this flavor (or any
flavor containing it).  The system uses this for error-checking: before
the system sends the @code{:init} message, it makes sure that all the
keywords in the init-plist are either inittable instance variables or
elements of this list.  If any is not recognized, an error is signaled.
When you write a @code{:init} method that accepts some keywords, they
should be listed in the @code{:init-keywords} option of the flavor.

If @code{:allow-other-keys} is used as an init keyword
with a non-@code{nil} value, this error check is suppressed.
Then unrecognized keywords are simply ignored.

@item :default-init-plist
'kindex :default-init-plist defflavor
The arguments are alternating keywords and value forms, like a
property list.  When the flavor is instantiated, these properties and
values are put into the init-plist unless already present.  This allows
one component flavor to default an option to another component flavor.
The value forms are only evaluated when and if they are used.  For
example,
@lisp
(:default-init-plist :frob-array
		     (make-array 100))
@end lisp
would provide a default ``frob array'' for any instance for which the
user did not provide one explicitly.

@lisp
(:default-init-plist :allow-other-keys t)
@end lisp
prevents errors for unhandled init keywords in all instantiation
of this flavor and other flavors that depend on it.

@item :required-init-keywords defflavor
The arguments are init keywords which are to be required each time
this flavor (or any flavor containing it) is instantiated.
An error is signaled if any required init keyword is missing.

@item :required-instance-variables
'kindex :required-instance-variables defflavor
Declares that any flavor incorporating this one that is instantiated
into an object must contain the specified instance variables.
An error occurs if there is an attempt to instantiate a flavor that
incorporates this one if it does not have these in its set of instance
variables.  Note that this option is not one of those that checks
the spelling of its arguments in the way described at the start of this section
(if it did, it would be useless).

Required instance variables may be freely accessed by methods just like
normal instance variables.  The difference between listing instance
variables here and listing them at the front of the @code{defflavor} is
that the latter declares that this flavor ``owns'' those variables and
accepts responsibility for initializing them, while the former declares that this
flavor depends on those variables but that some other flavor must be
provided to manage them and whatever features they imply.

@item :required-methods
'kindex :required-methods defflavor
The arguments are names of operations that any flavor incorporating this
one must handle.  An error occurs if there is an attempt to instantiate
such a flavor and it is lacking a method for one of these operations.
Typically this option appears in the @code{defflavor} for a base flavor
(see (base-flavor)).  Usually this is used when a base flavor does a
@code{(send self ...)} to send itself a message that is
not handled by the base flavor itself; the idea is that the base flavor
will not be instantiated alone, but only with other components (mixins)
that do handle the message.  This keyword allows the error of having no
handler for the message to be detected when the flavor instantiated or when
@code{compile-flavor-methods} is done, rather than when the missing
operation is used.

@item :required-flavors
'kindex :required-flavors defflavor
The arguments are names of flavors that any flavor incorporating this one
must include as components, directly or indirectly.  The difference between
declaring flavors as required and listing them directly as components at the
top of the @code{defflavor} is that declaring flavors to be required does not make
any commitments about where those flavors will appear in the ordered list of
components; that is left up to whoever does specify them as components.
The purpose of declaring a flavor to be required is to allow
instance variables declared by that flavor to be accessed.  It also provides
error checking: an attempt to instantiate a flavor that does not include the
required flavors as components signals an error.  Compare this with
@code{:required-methods} and @code{:required-instance-variables}.

For an example of the use of required flavors, consider the @code{ship}
example given earlier, and suppose we want to define a @code{relativity-mixin}
which increases the mass dependent on the speed.  We might write,
@lisp
(defflavor relativity-mixin () (moving-object))
(defmethod (relativity-mixin :mass) ()
  (// mass (sqrt (- 1 (^ (// (send self :speed)
			     *speed-of-light*)
			 2)))))
@end lisp
but this would lose because any flavor that had @code{relativity-mixin}
as a component would get @code{moving-object} right after it in its
component list.  As a base flavor, @code{moving-object} should be last
in the list of components so that other components mixed in can replace
its methods and so that daemon methods combine in the right order.
@code{relativity-mixin} has no business changing the order in which flavors
are combined, which should be under the control of its caller.  For example,
@lisp
(defflavor starship ()
	   (relativity-mixin long-distance-mixin ship))
@end lisp
puts @code{moving-object} last (inheriting it from @code{ship}).

So instead of the definition above we write,
@lisp
(defflavor relativity-mixin () ()
	(:required-flavors moving-object))
@end lisp
which allows @code{relativity-mixin}'s methods to access @code{moving-object}
instance variables such as @code{mass} (the rest mass), but does not
specify any place for @code{moving-object} in the list of components.

It is very common to specify the @i{base flavor} of a mixin with the
@code{:required-flavors} option in this way.

@item :included-flavors
'kindex :included-flavors defflavor
The arguments are names of flavors to be included in this flavor.  The difference
between declaring flavors here and declaring them at the top of the @code{defflavor}
is that when component flavors are combined, if an included flavor is not specified
as a normal component, it is inserted into the list of components immediately after
the last component to include it.  Thus included flavors act like defaults.
The important thing is that if an included flavor @i{is} specified as a component,
its position in the list of components is completely controlled by that specification,
independently of where the flavor that includes it appears in the list.

@code{:included-flavors} and @code{:required-flavors} are used in similar ways; it would
have been reasonable to use @code{:included-flavors} in the @code{relativity-mixin}
example above.  The difference is that when a flavor is required but not given
as a normal component, an error is signaled, but when a flavor is included
but not given as a normal component, it is automatically inserted into the list
of components at a reasonable place.

@item :no-vanilla-flavor
'kindex :no-vanilla-flavor defflavor
Normally when a flavor is instantiated, the special flavor
@code{si:vanilla-flavor} is included automatically at the end of its list of
components.  The vanilla flavor provides some default methods for the
standard operations which all objects are supposed to understand.  These
include @code{:print-self}, @code{:describe}, @code{:which-operations}, and several
other operations.  See (vanilla-flavor).

If any component of a flavor specifies the @code{:no-vanilla-flavor} option,
then @code{si:vanilla-flavor} is not included in that flavor.  This option
should not be used casually.

@item :default-handler
'kindex :default-handler defflavor
The argument is the name of a function that is to be called to handle
any operation for which there is no method.  Its arguments are
the arguments of the @code{send} which invoked the operation,
including the operation name as the first argument.  Whatever values
the default handler returns are the values of the operation.

Default handlers can be inherited from component flavors.  If a flavor
has no default handler, any operation for which there is no method
signals a @code{sys:unclaimed-message} error.

@item :ordered-instance-variables
'kindex :ordered-instance-variables defflavor
This option is mostly for esoteric internal system uses.
The arguments are names of instance variables which must appear first (and in this order)
in all instances of this flavor, or any flavor depending on this flavor.
This is used for instance variables that are specially known about by
microcode, and also in connection with the @code{:outside-accessible-instance-variables}
option.  If the keyword is given alone, the arguments default to the list
of instance variables given at the top of this @code{defflavor}.

Removing any of the @code{:ordered-instance-variables}, or changing their
positions in the list, requires that you recompile all methods that use
any of the affected instance variables.

@item :outside-accessible-instance-variables
'kindex :outside-accessible-instance-variables defflavor
The arguments are instance variables which are to be accessible from
outside of this flavor's methods.
A macro (actually a subst) is defined which takes an object of
this flavor as an argument and returns the value of the instance variable;
@code{setf} may be used to set the value of the instance variable.  The name
of the macro is the name of the flavor concatenated with a hyphen and the
name of the instance variable.  These macros are similar to the accessor
macros created by @code{defstruct} (see (defstruct).)

This feature works in two different ways, depending on whether the instance
variable has been declared to have a fixed slot in all instances, via the
@code{:ordered-instance-variables} option.

If the variable is not ordered, the position of its value cell in the
instance must be computed at run time.  This takes noticeable
time, although less than actually sending a message would take.  An
error is signaled if the argument to the accessor macro is
not an instance or is an instance that does not have an instance
variable with the appropriate name.  However, there is no error check
that the flavor of the instance is the flavor the accessor macro was
defined for, or a flavor built upon that flavor.  This error check
would be too expensive.

If the variable is ordered, the compiler compiles a call to
the accessor macro into a subprimitive which simply accesses that
variable's assigned slot by number.  This subprimitive is only three
or four times slower than @code{car}.  The only error-checking
performed is to make sure that the argument is really an instance
and is really big enough to contain that slot.  There is no check
that the accessed slot really belongs to an instance variable of
the appropriate name.

@item :accessor-prefix
'kindex :accessor-prefix defflavor
Normally the accessor macro created by the @code{:outside-accessible-instance-variables}
option to access the flavor @i{f}'s instance variable @i{v} is named @i{f-v}.
Specifying @code{(:accessor-prefix get$)} causes it to be named @code{get$@i{v}} instead.

@item :alias-flavor
'kindex :alias-flavor defflavor
Marks this flavor as being an alias for another flavor.  This flavor
should have only one component, which is the flavor it is an alias for,
and no instance variables or other options.  No methods should be defined for it.

The effect of the @code{:alias-flavor} option is that an attempt to instantiate
this flavor actually produces an instance of the other flavor.  Without
this option, it would make an instance of this flavor, which might behave
identically to an instance of the other flavor.  @code{:alias-flavor} eliminates
the need for separate mapping tables, method tables, etc. for this flavor,
which becomes truly just another name for its component flavor.

The alias flavor and its base flavor are also equivalent when used as
an argument of @code{subtypep} or as the second argument of @code{typep};
however, if the alias status of a flavor is changed, you must
recompile any code which uses it as the second argument to @code{typep}
in order for such code to function.

@code{:alias-flavor} is mainly useful for changing a flavor's name gracefully.

@item :abstract-flavor
'kindex :abstract-flavor defflavor
This option marks the flavor as one that is not supposed to be
instantiated (that is, is supposed to be used only as a component of other
flavors).  An attempt to instantiate the flavor signals an error.

It is sometimes useful to do @code{compile-flavor-methods} on a flavor that
is not going to be instantiated, if the combined methods for this flavor
will be inherited and shared by many others.  @code{:abstract-flavor} tells
@code{compile-flavor-methods} not to complain about missing required
flavors, methods or instance variables.  Presumably the flavors that
depend on this one and actually are instantiated will supply what is
lacking.

@item :method-combination
'kindex :method-combination defflavor
Specifies the method combination style to be used for certain
operations.
Each argument to this option is a list @code{(@i{style order operation1 operation2}...)}.
@i{operation1}, @i{operation2}, etc. are names of operations whose methods
are to be combined in the declared fashion.  @i{style} is a keyword that
specifies a style of combination; see (method-combination).  @i{order}
is a keyword whose interpretation is up to @i{style}; typically it is
either @code{:base-flavor-first} or @code{:base-flavor-last}.

Any component of a flavor may specify the type of method combination to
be used for a particular operation.  If no component specifies a style
of method combination, then the default style is used, namely
@code{:daemon}.  If more than one component of a flavor specifies the
combination style for a given operation, then they must agree on the
specification, or else an error is signaled.

@item :instance-area-function defflavor
The argument is the name of a function to be used when this flavor is
instantiated, to determine which area to create the new instance in.
Use a function name rather than an explicit lambda expression.
@lisp
(:instance-area-function @i{function-name})
@end lisp

When the instance area function is called, it is given the init plist as
an argument, and should return an area number or @code{nil} to use the
default.  Init keyword values can be accessed using @code{get} on the init
plist.

Instance area functions can be inherited from component flavors.
If a flavor does not have or inherit an instance area function,
its instances are created in @code{default-cons-area}.

@item :instantiation-flavor-function defflavor
You can define a flavor @code{foo} so that, when you try to instantiate it,
it calls a function to decide what flavor it should really instantiate
(not necessarily @code{foo}).  This is done by giving @code{foo} an
instantiation flavor function:
@lisp
(:instantiation-flavor-function @i{function-name})
@end lisp

When @code{(make-instance 'foo @i{keyword-args}...)} is done, the
instantiation flavor function is called with two arguments: the flavor
name specified (@code{foo} in this case) and the init plist (the list of
keyword args).  It should return the name of the flavor that should
actually be instantiated.

Note that the instantiation flavor function applies only to the flavor it is
specified for.  It is not inherited by dependent flavors.

@item :run-time-alternatives defflavor
@itemx :mixture defflavor
A run-time-alternative flavor defines a collection of similar flavors,
all built on the same base flavor but having various mixins as well.
Instantiation chooses a flavor of the collection at run time based on
the init keywords specified, using an automatically generated
instantiation flavor function.

A simple example would be
@lisp
(defflavor foo () (basic-foo)
  (:run-time-alternatives
     (:big big-foo-mixin))
  (:init-keywords :big))
@end lisp

Then @code{(make-instance 'foo :big t)} makes an instance of a flavor
whose components are @code{big-foo-mixin} as well as @code{foo}.  But
@code{(make-instance 'foo)} or @code{(make-instance 'foo :big nil)} makes an
instance of @code{foo} itself.  The clause @code{(:big big-foo-mixin)} in the
@code{:run-time-alternatives} says to incorporate @code{big-foo-mixin} if
@code{:big}'s value is @code{t}, but not if it is @code{nil}.

There may be several clauses in the @code{:run-time-alternatives}.  Each
one is processed independently.  Thus, two keywords @code{:big} and
@code{:wide} could independently control two mixins, giving four
possibilities.
@lisp
(defflavor foo () (basic-foo)
  (:run-time-alternatives
     (:big big-foo-mixin)
     (:wide wide-foo-mixin))
  (:init-keywords :big))
@end lisp

It is possible to test for values other than @code{t} and @code{nil}.  The clause
@lisp
(:size (:big big-foo-mixin)
       (:small small-foo-mixin)
       (nil nil))
@end lisp
allows the value for the keyword @code{:size} to be @code{:big}, @code{:small} or @code{nil} (or omitted).
If it is @code{nil} or omitted, no mixin is used (that's what the second @code{nil} means).
If it is @code{:big} or @code{:small}, an appropriate mixin is used.  This kind of clause
is distinguished from the simpler kind by having a list as its second element.
The values to check for can be anything, but @code{eq} is used to compare them.

The value of one keyword can control the interpretation of others
by nesting clauses within clauses.  If an alternative has more than two elements,
the additional elements are subclauses which are considered only if that
alternative is selected.  For example, the clause
@lisp
(:etherial (t etherial-mixin)
	   (nil nil
		(:size (:big big-foo-mixin)
		       (:small small-foo-mixin)
		       (nil nil))))
@end lisp
says to consider the @code{:size} keyword only if @code{:etherial} is @code{nil}.

@code{:mixture} is synonymous with @code{:run-time-alternatives}.  It exists
for compatibility with Symbolics systems.

@item :documentation
'kindex :documentation defflavor
Specifies the documentation string for the flavor definition, which is
made accessible through @code{(documentation @i{flavorname} 'flavor)}.

This documentation can be viewed with the @code{describe-flavor} function
(see (describe-flavor-fun)) or the editor's @code{Meta-X Describe Flavor}
command (see (describe-flavor-command)).

Previously this option expected two arguments, a keyword and a string.
The keyword was intended to classify the flavor as a base flavor,
mixin or combination.  But no way was found for this classification
to serve a useful purpose.  Keyword are still accepted but no longer
recommended for use.

@end table

@section  Flavor Families

@cindex base-flavor
@cindex mixin

The following organization conventions are recommended for programs that use flavors.

A @i{base flavor} is a flavor that defines a whole family of related flavors,
all of which have that base flavor as a component.
Typically the base flavor includes things relevant to the whole family,
such as instance variables, @code{:required-methods} and @code{:required-instance-variables}
declarations, default methods for certain operations, @code{:method-combination}
declarations, and documentation on the general protocols and conventions
of the family.  Some base flavors are complete and can be instantiated, but
most are not instantiatable and merely serve as a base upon which to build
other flavors.  The base flavor for the @i{foo} family is often named @code{basic-@i{foo}}.

A @i{mixin flavor} is a flavor that defines one particular feature of an object.
A mixin cannot be instantiated, because it is not a complete description.
Each module or feature of a program
is defined as a separate mixin; a usable flavor can be constructed by choosing
the mixins for the desired characteristics and combining them, along with the
appropriate base flavor.  By organizing your flavors this way, you keep separate
features in separate flavors, and you can pick and choose among them.
Sometimes the order of combining mixins does not matter,
but often it does, because the order of flavor combination controls the order
in which daemons are invoked and wrappers are wrapped.  Such order dependencies
should be documented as part of the conventions of the appropriate family of flavors.
A mixin flavor that provides the @i{mumble} feature is often named @i{mumble@code{-mixin}}.

If you are writing a program that uses someone else's facility to do something,
using that facility's flavors and methods, your program may still define
its own flavors, in a simple way.  The facility provides a base flavor and
a set of mixins: the caller can combine these in various ways depending
on exactly what it wants, since the facility probably does not provide all possible
useful combinations.  Even if your private flavor has exactly the
same components as a pre-existing flavor, it can still be useful since
you can use its @code{:default-init-plist} (see (default-init-plist-option)) to
select options of its component flavors and you can define one or two methods
to customize it ``just a little''.

@section  Vanilla Flavor

The operations described in this section are a standard protocol, which all
message-receiving objects are assumed to understand.  The standard methods
that implement this protocol are automatically supplied by the flavor
system unless the user specifically tells it not to do so.  These methods
are associated with the flavor @code{si:vanilla-flavor}:

.defflavor si:vanilla-flavor
Unless you specify otherwise (with the @code{:no-vanilla-flavor} option to
@code{defflavor}), every flavor includes the ``vanilla'' flavor, which has no
instance variables but provides some basic useful methods.
.end_defflavor

.defmessage :print-self stream prindepth escape-p
The object should output its printed-representation to a stream.  The
printer sends this message when it encounters an instance or an entity.
The arguments are the stream, the current depth in list-structure (for
comparison with @code{prinlevel}), and whether escaping is enabled (a copy
of the value of @code{*print-escape*}; see (*print-escape*-var)).
@code{si:vanilla-flavor} ignores the last two arguments and prints something like
@code{#<@i{flavor-name octal-address}>}.  The @i{flavor-name} tells you
what type of object it is and the @i{octal-address} allows you to tell
different objects apart (provided the garbage collector doesn't move
them behind your back).
.end_defmessage

.defmessage :describe
The object should describe itself, printing a description onto the
@code{*standard-output*} stream.  The @code{describe} function sends this
message when it encounters an instance.  @code{si:vanilla-flavor}
outputs in a reasonable format the object, the name of its flavor, and
the names and values of its instance-variables.
.end_defmessage

.defmessage :set keyword value
The object should set the internal value specified by @i{keyword}
to the new value @i{value}.  For flavor instances, the @code{:set}
operation uses @code{:case} method combination, and a method is
generated automatically to set each settable instance variable,
with @i{keyword} being the variable's name as a keyword.
.end_defmessage

.defmessage :which-operations
The object should return a list of the operations it can handle.
@code{si:vanilla-flavor} generates the list once per flavor and remembers
it, minimizing consing and compute-time.  If the set of operations
handled is changed, this list is regenerated the next time someone asks
for it.
.end_defmessage

.defmessage :operation-handled-p operation
@i{operation} is an operation name.  The object should return @code{t} if it
has a handler for the specified operation, @code{nil} if it does not.
.end_defmessage

.defmessage :get-handler-for operation
@i{operation} is an operation name.
The object should return the method it uses to handle @i{operation}.
If it has no handler for that operation, it should return @code{nil}.
This is like the @code{get-handler-for} function (see (get-handler-for-fun)),
but, of course, you can use it only on objects known to accept messages.
.end_defmessage

.defmessage :send-if-handles operation &rest arguments
@i{operation} is an operation name and @i{arguments} is a list of
arguments for the operation.  If the object handles the operation, it
should send itself a message with that operation and arguments, and
return whatever values that message returns.  If it doesn't handle the
operation it should just return @code{nil}.
.end_defmessage

.defmessage :eval-inside-yourself form
The argument is a form that is evaluated in an environment in which special
variables with the names of the instance variables are bound to the values
of the instance variables.  It works to @code{setq} one of these special variables;
the instance variable is modified.  This is intended to be used mainly
for debugging.
.end_defmessage

.defmessage :funcall-inside-yourself function &rest args
@i{function} is applied to @i{args} in an environment in which special
variables with the names of the instance variables are bound to the values
of the instance variables.  It works to @code{setq} one of these special variables;
the instance variable is modified.  This is a way of allowing callers
to provide actions to be performed in an environment set up by the instance.
.end_defmessage

.defmessage :break
@code{break} is called in an environment in which special
variables with the names of the instance variables are bound to the values
of the instance variables.
.end_defmessage

@section  Method Combination
@cindex method combination
@cindex combined method

When a flavor has or inherits more than one method for an operation,
they must be called in a specific sequence.
The flavor system creates a function called a @i{combined method}
which calls all the user-specified methods in the proper order.
Invocation of the operation actually calls the combined method,
which is responsible for calling the others.

For example, if the flavor @code{foo} has components and methods as follows:

@lisp
(defflavor foo () (foo-mixin foo-base))
(defflavor foo-mixin () (bar-mixin))

(defmethod (foo :before :hack) ...)
(defmethod (foo :after :hack) ...)

(defmethod (foo-mixin :before :hack) ...)
(defmethod (foo-mixin :after :hack) ...)

(defmethod (bar-mixin :before :hack) ...)
(defmethod (bar-mixin :hack) ...)

(defmethod (foo-base :hack) ...)
(defmethod (foo-base :after :hack) ...)
@end lisp

@noindent
then the combined method generated looks like this (ignoring many
important details not related to this issue):

@lisp
(defmethod (foo :combined :hack) (&rest args)
  (apply #'(:method foo :before :hack) args)
  (apply #'(:method foo-mixin :before :hack) args)
  (apply #'(:method bar-mixin :before :hack) args)
  (multiple-value-prog1
      (apply #'(:method bar-mixin :hack) args)
    (apply #'(:method foo-base :after :hack) args)
    (apply #'(:method foo-mixin :after :hack) args)
    (apply #'(:method foo :after :hack) args)))
@end lisp

@cindex method types
@cindex untyped methods
This example shows the default style of method combination, the one
described in the introductory parts of this chapter, called @code{:daemon}
combination.  Each style of method combination defines which @i{method types}
it allows, and what they mean.  @code{:daemon} combination
accepts method types @code{:before} and @code{:after},
in addition to @i{untyped} methods; then it creates a combined method which
calls all the @code{:before} methods, only one of the untyped methods, and
then all the @code{:after} methods, returning the value of the untyped
method.  The combined method is constructed by a function much like a
macro's expander function, and the precise technique used to create the
combined method is what gives @code{:before} and @code{:after} their meaning.

Note that the @code{:before} methods are called in the order @code{foo},
@code{foo-mixin}, @code{bar-mixin} and @code{foo-base}.  (@code{foo-base} does not
have a @code{:before} method, but if it had one that one would be last.)
This is the standard ordering of the components of the flavor @code{foo}
(see (flavor-components)); since it puts the base flavor last, it is
called @code{:base-flavor-last} ordering.  The @code{:after} methods are
called in the opposite order, in which the base flavor comes first.
This is called @code{:base-flavor-first} ordering.

@cindex primary method
Only one of the untyped methods is used; it is the one that comes first
in @code{:base-flavor-last} ordering.  An untyped method used in this way
is called a @i{primary} method.

Other styles of method combination define their own method types
and have their own ways of combining them.  Use of another
style of method combination is requested with the @code{:method-combination} option to
@code{defflavor} (see (method-combination-option)).  Here is an example
which uses @code{:list} method combination, a style of combination
that allows @code{:list} methods and untyped methods:

@lisp
(defflavor foo () (foo-mixin foo-base))
(defflavor foo-mixin () (bar-mixin))
(defflavor foo-base () ()
  (:method-combination (:list :base-flavor-last :win)))

(defmethod (foo :list :win) ...)
(defmethod (foo :win) ...)

(defmethod (foo-mixin :list :win) ...)

(defmethod (bar-mixin :list :win) ...)
(defmethod (bar-mixin :win) ...)

(defmethod (foo-base :win) ...)

@exdent yielding the combined method

(defmethod (foo :combined :win) (&rest args)
  (list
    (apply #'(:method foo :list :win) args)
    (apply #'(:method foo-mixin :list :win) args)
    (apply #'(:method bar-mixin :list :win) args)
    (apply #'(:method foo :win) args)
    (apply #'(:method bar-mixin :win) args)
    (apply #'(:method foo-base :win) args)))
@end lisp

The @code{:method-combination} option in the @code{defflavor} for @code{foo-base}
causes @code{:list} method combination to be used for the @code{:win}
operation on all flavors that have @code{foo-base} as a component,
including @code{foo}.  The result is a combined method which calls all the
methods, including all the untyped methods rather than just one, and
makes a list of the values they return.  All the @code{:list} methods are
called first, followed by all the untyped methods; and within each type,
the @code{:base-flavor-last} ordering is used as specified.  If the @code{:method-combination}
option said @code{:base-flavor-first}, the relative order of the @code{:list}
methods would be reversed, and so would the untyped methods, but
the @code{:list} methods would still be called before the untyped ones.
@code{:base-flavor-last} is more often right, since it means that
@code{foo}'s own methods are called first and @code{si:vanilla-flavor}'s
methods (if it has any) are called last.

A few specific method types, such as @code{:default} and @code{:around}, have
standard meanings independent of the style of method combination, and
can be used with any style.  They are described in a table below.

Here are the standardly defined method combination styles.

@table @code
@item :daemon
The default style of method combination.  All the @code{:before}
methods are called, then the primary (untyped) method for the outermost
flavor that has one is called, then all the @code{:after} methods are
called.  The value returned is the value of the primary method.

@item :daemon-with-or
Like the @code{:daemon} method combination style, except that the primary
method is wrapped in an @code{:or} special form with all @code{:or} methods.
Multiple values can be returned from the primary method, but not from
the @code{:or} methods (as in the @code{or} special form).  This produces
code like the following in combined methods:
@lisp
(progn (foo-before-method)
       (multiple-value-prog1
         (or (foo-or-method)
	     (foo-primary-method))
         (foo-after-method)))
@end lisp

This is useful primarily for flavors in which a mixin introduces an
alternative to the primary method.  Each @code{:or} method gets a chance
to run before the primary method and to decide whether the primary
method should be run or not; if any @code{:or} method returns a non-@code{nil}
value, the primary method is not run (nor are the rest of the @code{:or}
methods).  Note that the ordering of the combination of the @code{:or} methods
is controlled by the @i{order} keyword in the @code{:method-combination} option.

@item :daemon-with-and
Like @code{:daemon-with-or} except that it combines @code{:and} methods
in an @code{and} special form.  The primary method is run only
if all of the @code{:and} methods return non-@code{nil} values.

@item :daemon-with-override
Like the @code{:daemon} method combination style, except an @code{or}
special form is wrapped around the entire combined method with all
@code{:override} typed methods before the combined method.  This differs
from @code{:daemon-with-or} in that the @code{:before} and @code{:after} daemons
are run only if @i{none} of the @code{:override} methods returns
non-@code{nil}.  The combined method looks something like this:
@lisp
(or (foo-override-method)
    (progn (foo-before-method)
	   (foo-primary-method)
	   (foo-after-method)))
@end lisp

@item :progn
Calls all the methods inside a @code{progn} special form.  Only
untyped and @code{:progn} methods are allowed.  The combined method calls
all the @code{:progn} methods and then all the untyped methods.  The result
of the combined method is whatever the last of the methods returns.

@item :or
Calls all the methods inside an @code{or} special form.  This means
that each of the methods is called in turn.  Only untyped methods and
@code{:or} methods are allowed; the @code{:or} methods are called first.  If a
method returns a non-@code{nil} value, that value is returned and none of
the rest of the methods are called; otherwise, the next method is
called.  In other words, each method is given a chance to handle the
message; if it doesn't want to handle the message, it can return
@code{nil}, and the next method gets a chance to try.

@item :and
Calls all the methods inside an @code{and} special form.  Only
untyped methods and @code{:and} methods are allowed.  The basic idea is
much like @code{:or}; see above.

@item :append
Calls all the methods and appends the values together.
Only untyped methods and @code{:append} methods are allowed; the
@code{:append} methods are called first.

@item :nconc
Calls all the methods and @code{nconc}'s the values together.
Only untyped methods and @code{:nconc} methods are allowed, etc.

@item :list
Calls all the methods and returns a list of their returned values.
Only untyped methods and @code{:list} methods are allowed, etc.

@item :inverse-list
Calls each method with one argument; these arguments are successive
elements of the list that is the sole argument to the operation.
Returns no particular value.  Only untyped methods and @code{:inverse-list}
methods are allowed, etc.

If the result of a @code{:list}-combined operation is
sent back with an @code{:inverse-list}-combined operation, with the same
ordering and with corresponding method definitions, each component
flavor receives the value that came from that flavor.

@item :pass-on
Calls each method on the values returned by the preceeding one.  The values
returned by the combined method are those of the outermost call.  The format
of the declaration in the @code{defflavor} is:
@lisp
(:method-combination (:pass-on (@i{ordering} . @i{arglist}))
                     . @i{operation-names})
@end lisp

where @i{ordering} is @code{:base-flavor-first} or @code{:base-flavor-last}.
@i{arglist} may include the @code{&aux} and @code{&optional} keywords.

Only untyped methods and @code{:pass-on} methods are allowed.
The @code{:pass-on} methods are called first.

@item :case
With @code{:case} method combination, the combined method automatically
does a @code{selectq} dispatch on the first argument of the operation,
known as the @i{suboperation}.  Methods of type @code{:case} can be used,
and each one specifies one suboperation that it applies to.  If no
@code{:case} method matches the suboperation, the primary method, if any,
is called.

@lisp
@exdent Example:
(defflavor foo (a b) ()
  (:method-combination (:case :base-flavor-last :win)))

@exdent This method handles @code{(send a-foo :win :a)}:
(defmethod (foo :case :win :a) ()
  a)

@exdent This method handles @code{(send a-foo :win :a*b)}:
(defmethod (foo :case :win :a*b) ()
  (* a b))

@exdent This method handles @code{(send a-foo :win :something-else)}:
(defmethod (foo :win) (suboperation)
  (list 'something-random suboperation))
@end lisp

@code{:case} methods are unusual in that one flavor can have many @code{:case}
methods for the same operation, as long as they are for different
suboperations.

The suboperations @code{:which-operations}, @code{:operation-handled-p},
@code{:send-if-handles} and @code{:get-handler-for} are all handled
automatically based on the collection of @code{:case} methods that are
present.

Methods of type @code{:or} are also allowed.  They are called just before
the primary method, and if one of them returns a non-@code{nil} value, that
is the value of the operation, and no more methods are called.
@end table

Here is a table of all the method types recognized by the standard
styles of method combination.

@table @code
@item 1(no type)*
If no type is given to @code{defmethod}, a primary method is created.
This is the most common type of method.

@item :before
@itemx :after
Used for the before-daemon and after-daemon
methods used by @code{:daemon} method combination.

@item :default
If there are no untyped methods among any of the flavors being combined,
then the @code{:default} methods (if any) are treated as if they were untyped.
If there are any untyped methods, the @code{:default} methods are ignored.

Typically a base-flavor (see (base-flavor)) defines some default
methods for certain of the operations understood by its family.  When
using the default kind of method combination these default methods are
suppressed if another component provides a primary method.

@item :or
@itemx :and
Used for @code{:daemon-with-or} and @code{:daemon-with-and}
method combination.  The @code{:or} methods are wrapped in an @code{or},
or the @code{:and} methods are wrapped in an @code{and}, together
with the primary method, between the @code{:before} and @code{:after} methods.

@item :override
Allows the features of @code{:or} method combination to
be used together with daemons.  If you specify
@code{:daemon-with-override} method combination, you may use
@code{:override} methods.  The @code{:override} methods are executed first, until
one of them returns non-@code{nil}.  If this happens, that method's value(s)
are returned and no more methods are used.  If all the @code{:override}
methods return @code{nil}, the @code{:before}, primary and @code{:after} methods are
executed as usual.

In typical usages of this feature, the
@code{:override} method usually returns @code{nil} and does nothing,
but in exceptional circumstances it takes over the handling of the
operation.

@item :or1, *:and1, *:progn1, *:list1, *:inverse-list1, *pass-on1, *:append1, *:nconc1.*
Each of these methods types is allowed in the method combination style
of the same name.  In those method combination styles, these typed
methods work just like untyped ones, but all the typed methods are
called before all the untyped ones.

@item :case
@code{:case} methods are used by @code{:case} method combination.
@end table

@noindent
These method types can be used with any method combination style; they
have standard meanings independent of the method combination style being
used.

@table @code
@item :around
An @code{:around} method is able to control when, whether and how the
remaining methods are executed.  It is given a continuation that is a
function that will execute the remaining methods, and has complete
responsibility for calling it or not, and deciding what arguments to give
it.  For the simplest behavior, the arguments should be the operation name
and operation arguments that the @code{:around} method itself received; but
sometimes the whole purpose of the @code{:around} method is to modify the
arguments before the remaining methods see them.

The @code{:around} method receives three special arguments before the
arguments of the operation itself: the @i{continuation}, the
@i{mapping-table}, and the @i{original-argument-list}.  The last is a list
of the operation name and operation arguments.  The simplest way
for the @code{:around} method to invoke the remaining methods is to do
@lisp
(lexpr-funcall-with-mapping-table
  @i{continuation} @i{mapping-table}
  @i{original-argument-list})
@end lisp
In general, the @i{continuation} should be called with either
@code{funcall-with-mapping-table} or @code{lexpr-funcall-with-mapping-table},
providing the @i{continuation}, the @i{mapping-table}, and the operation name
(which you know because it is the same as in the @code{defmethod}), followed
by whatever arguments the remaining methods are supposed to see.

@lisp
(defflavor foo-one-bigger-mixin () ())

(defmethod (foo-one-bigger-mixin :around :set-foo)
           (cont mt ignore new-foo)
  (funcall-with-mapping-table cont mt :set-foo
  			      (1+ new-foo)))
@end lisp

is a mixin which modifies the @code{:set-foo} operation so that the value
actually used in it is one greater than the value specified in the message.

@item :inverse-around
@code{:inverse-around} methods work like @code{:around} methods, but they are
invoked at a different time and in a different order.

With @code{:around} methods, those of earlier flavor components components
are invoked first, starting with the instantiated flavor itself, and
those of earlier components are invoked within them.
@code{:inverse-around} methods are invoked in the opposite order:
@code{si:vanilla-flavor} would come first.  Also, all @code{:around} methods
and wrappers are invoked inside all the @code{:inverse-around} methods.

For example, the @code{:inverse-around} @code{:init} method for @code{tv:sheet} (a base
flavor for all window flavors) is used to handle the init keywords
@code{:expose-p} and @code{:activate-p}, which cannot be handled correctly
until the window is entirely set up.  They are handled in this method
because it is guaranteed to be the first method invoked by the @code{:init}
operation on any flavor of window (because no component of @code{tv:sheet}
defines an @code{:inverse-around} method for this operation).  All the rest
of the work of making a new window valid takes place in this method's
continuation; when the continuation returns, the window must be as valid
as it will ever be, and it is ready to be exposed or activated.

@item :wrapper
Used internally by @code{defwrapper}.

Note that if one flavor defines both a wrapper and an @code{:around} method
for the same operation, the @code{:around} method is executed inside the
wrapper.

@item :combined
Used internally for automatically-generated @i{combined} methods.
@end table

The most common form of combination is @code{:daemon}.  One thing may not
be clear: when do you use a @code{:before} daemon and when do you use an @code{:after}
daemon?  In some cases the primary method performs a clearly-defined
action and the choice is obvious:  @code{:before :launch-rocket} puts in the
fuel, and @code{:after :launch-rocket} turns on the radar tracking.

In other cases the choice can be less obvious.  Consider the @code{:init}
message, which is sent to a newly-created object.  To decide what kind
of daemon to use, we observe the order in which daemon methods are
called.  First the @code{:before} daemon of the instantiated flavor
is called, then @code{:before} daemons of successively more basic
flavors are called, and finally the @code{:before} daemon (if
any) of the base flavor is called.  Then the primary method is called.
After that, the @code{:after} daemon for the base flavor is
called, followed by the @code{:after} daemons at successively less
basic flavors.

Now, if there is no interaction among all these methods, if their
actions are completely independent, then it doesn't matter whether you
use a @code{:before} daemon or an @code{:after} daemon.  There is a difference
if there is some interaction.  The interaction we are talking about is
usually done through instance variables; in general, instance variables
are how the methods of different component flavors communicate with each
other.  In the case of the @code{:init} operation, the @i{init-plist} can be
used as well.  The important thing to remember is that no method knows
beforehand which other flavors have been mixed in to form this flavor; a
method cannot make any assumptions about how this flavor has been
combined, and in what order the various components are mixed.

This means that when a @code{:before} daemon has run, it must assume that
none of the methods for this operation have run yet.  But the @code{:after}
daemon knows that the @code{:before} daemon for each of the other flavors
has run.  So if one flavor wants to convey information to the other, the
first one should ``transmit'' the information in a @code{:before} daemon, and
the second one should ``receive'' it in an @code{:after} daemon.  So while
the @code{:before} daemons are run, information is ``transmitted''; that is,
instance variables get set up.  Then, when the @code{:after} daemons are
run, they can look at the instance variables and act on their values.

In the case of the @code{:init} method, the @code{:before} daemons typically set up
instance variables of the object based on the init-plist, while the
@code{:after} daemons actually do things, relying on the fact that all of the
instance variables have been initialized by the time they are called.

The problems become most difficult when you are creating a network of
instances of various flavors that are supposed to point to each other.
For example, suppose you have flavors for ``buffers'' and ``streams'', and
each buffer should be accompanied by a stream.  If you create the stream
in the @code{:before} @code{:init} method for buffers, you can inform the
stream of its corresponding buffer with an init keyword, but the stream
may try sending messages back to the buffer, which is not yet ready to
be used.  If you create the stream in the @code{:after} @code{:init} method
for buffers, there will be no problem with stream creation, but some
other @code{:after} @code{:init} methods of other mixins may have run and made
the assumption that there is to be no stream.  The only way to guarantee
success is to create the stream in a @code{:before} method and inform it of
its associated buffer by sending it a message from the buffer's
@code{:after} @code{:init} method.  This scheme--creating associated objects
in @code{:before} methods but linking them up in @code{:after} methods--often
avoids problems, because all the various associated objects used by
various mixins at least exist when it is time to make other objects
point to them.

Since flavors are not hierarchically organized, the notion of
levels of abstraction is not rigidly applicable.  However, it remains a
useful way of thinking about systems.

@section  Implementation of Flavors

An object that is an instance of a flavor is implemented using the
data type @code{dtp-instance}.  The representation is a structure whose
first word, tagged with @code{dtp-instance-header}, points to a structure
(known to the microcode as an ``instance descriptor'') containing the
internal data for the flavor.  The remaining words of the structure are value cells
containing the values of the instance variables.  The instance descriptor
is a @code{defstruct} that appears on the @code{si:flavor} property of the flavor
name.  It contains, among other things, the name of the flavor, the
size of an instance, the table of methods for handling operations, and
information for accessing the instance variables.

@code{defflavor} creates such a data structure for each flavor, and
links them together according to the dependency relationships
between flavors.

A message is sent to an instance simply by calling it as a function,
with the first argument being the operation.
The microcode binds @code{self} to the object and binds those instance
variables that are supposed to be special to the value
cells in the instance.  Then it
passes on the operation and arguments to a funcallable hash table taken
from the flavor-structure for this flavor.

When the funcallable hash table is called as a function, it hashes the
first argument (the operation) to find a function to handle the operation
and an array called a mapping table.  The variable
@code{sys:self-mapping-table} is bound to the mapping table, which tells
the microcode how to access the lexical instance variables, those not
defined to be special.  Then the function is called.  If there is only
one method to be invoked, this function is that method; otherwise it is
an automatically-generated function called the combined method (see
(combined-method)),
which calls the appropriate methods in the right order.
If there are wrappers, they are incorporated into this combined
method.

The mapping table is an array whose elements correspond to the instance
variables which can be accessed by the flavor to which the currently
executing method belongs.  Each element contains the position in
@code{self} of that instance variable.  This position varies with the other
instance variables and component flavors of the flavor of @code{self}.

Each time the combined method calls another method, it sets up the
mapping table required by that method--not in general the same
one which the combined method itself uses.  The mapping tables for the
called methods are extracted from the array leader of the mapping table
used by the combined method, which is kept in a local variable of the
combined method's stack frame while @code{sys:self-mapping-table} is set to
the mapping tables for the component methods.

@defvar sys:self-mapping-table
Holds the current mapping table, which tells the running
flavor method where in @code{self} to find each instance variable.
@end defvar

Ordered instance variables are referred to directly without going
through the mapping table.  This is a little faster, and reduces the
amount of space needed for mapping tables.  It is also the reason why
compiled code contains the positions of the ordered instance variables
and must be recompiled when they change.

@subsection Order of Definition

There is a certain amount of freedom to the order in which you do @code{defflavor}'s,
@code{defmethod}'s, and @code{defwrapper}'s.  This freedom is designed to make it easy
to load programs containing complex flavor structures without having to do things
in a certain order.  It is considered important that not all the methods for a flavor
need be defined in the same file.  Thus the partitioning of a program into files
can be along modular lines.

The rules for the order of definition are as follows.

Before a method can be defined (with @code{defmethod} or @code{defwrapper}) its flavor
must have been defined (with @code{defflavor}).  This makes sense because the system
has to have a place to remember the method, and because it has to know the
instance-variables of the flavor if the method is to be compiled.

When a flavor is defined (with @code{defflavor}) it is not necessary that
all of its component flavors be defined already.  This is to allow
@code{defflavor}'s to be spread between files according to the modularity
of a program, and to provide for mutually-dependent flavors.
Methods can be defined for a flavor some of whose component flavors are
not yet defined; however, in certain cases compiling those methods may
produce a warning that an instance variable was declared
special (because the system did not realize it was an instance
variable).  If this happens, you should fix the problem and recompile.

The methods automatically generated by the @code{:gettable-instance-variables}
and @code{:settable-instance-variables} @code{defflavor} options
(see (gettable-instance-variables-option)) are generated at the time
the @code{defflavor} is done.

The first time a flavor is instantiated, or when
@code{compile-flavor-methods} is done, the system looks through all of the
component flavors and gathers various information.  At this point an
error is signaled if not all of the components have been
@code{defflavor}'ed.  This is also the time at which certain other errors
are detected, for instance lack of a required instance-variable (see the
@code{:required-instance-variables} @code{defflavor} option,
(required-instance-variables-option)).  The combined methods (see
(combined-method)) are generated at this time also, unless they already
exist.

After a flavor has been instantiated, it is possible to make changes to it.
Such changes affect all existing instances if possible.  This is
described more fully immediately below.

@subsection Changing a Flavor

You can change anything about a flavor at any time.  You can change the
flavor's general attributes by doing another @code{defflavor} with the same
name.  You can add or modify methods by doing @code{defmethod}'s.  If you
do a @code{defmethod} with the same flavor-name, operation (and
suboperation if any), and (optional) method-type as an existing method,
that method is replaced by the new definition.  You can remove a
method with @code{undefmethod} (see (undefmethod-fun)).

These changes always propagate to all flavors that depend upon the
changed flavor.  Normally the system propagates the changes to all
existing instances of the changed flavor and its dependent flavors.
However, this is not possible when the flavor has been changed so
drastically that the old instances would not work properly with the new
flavor.  This happens if you change the number of instance variables,
which changes the size of an instance.  It also happens if you change
the order of the instance variables (and hence the storage layout of an
instance), or if you change the component flavors (which can change
several subtle aspects of an instance).  The system does not keep a list
of all the instances of each flavor, so it cannot find the instances and
modify them to conform to the new flavor definition.  Instead it gives
you a warning message, on the @code{*error-output*} stream, to the effect
that the flavor was changed incompatibly and the old instances will not
get the new version.  The system leaves the old flavor data-structure
intact (the old instances continue to point at it) and makes a new
one to contain the new version of the flavor.  If a less drastic change
is made, the system modifies the original flavor data-structure, thus
affecting the old instances that point at it.  However, if you redefine
methods in such a way that they only work for the new version of the
flavor, then trying to use those methods with the old instances won't
work.

@section  Useful Editor Commands

This section briefly documents
some editor commands that are useful in conjunction with flavors.

@table @code
@item Meta-.
The @code{Meta-.} (@code{Edit Definition}) command can find the definition of a flavor
in the same way that it can find the definition of a function.

@code{Edit Definition} can find the definition of a method if you give it
a suitable function spec starting with @code{:method}, such as @code{(:method
tv:sheet :expose)}.  The keyword @code{:method} may be omitted if the
definition is in the editor already.  Completion is available on the
flavor name and operation name, as usual only for definitions
loaded into the editor.

@item Meta-X Describe Flavor
Asks for a flavor name in the mini-buffer and describes its characteristics.
When typing the flavor name you have completion over the names of all defined
flavors (thus this command can be used to aid in guessing the name of a flavor).
The display produced is mouse sensitive where there are names of flavors and
of methods; as usual the right-hand mouse button gives you a menu of
editor commands to apply to the name
and the left-hand mouse button does one of them, typically positioning
the editor to the source code for that name.

@item Meta-X List Methods
@itemx Meta-X Edit Methods
Asks you for an operation in the mini-buffer and lists all the flavors
that have a method for that operation.  You may type in the operation name,
point to it with the mouse, or let it default to the operation of the message
being sent by the Lisp form the cursor is on.  @code{List Methods}
produces a mouse-sensitive display allowing you to edit selected methods
or just to see which flavors have methods, while @code{Edit Methods} skips the
display and proceeds directly to editing the methods.

As usual with this type of command, the editor command @code{Control-Shift-P}
advances the editor cursor to the next method in the list, reading in
its source file if necessary.  Typing @code{Control-Shift-P}, while the display
is on the screen, edits the first method.

In addition, you can find a copy of the list in the editor buffer
@code{*Possibilities*}.  While in that buffer, the command @code{Control-/}
visits the definition of the method described on the line the cursor is
pointing at.

These techniques of moving through the objects listed apply to all the
following commands as well.

@item Meta-X List Combined Methods
@itemx Meta-X Edit Combined Methods
Asks you for an operation name and a flavor in two mini-buffers and lists all
the methods that would be called to handle that operation for an instance of that
flavor.

@code{List Combined Methods} can be very useful for telling what a flavor
will do in response to a message.  It shows you the primary method,
the daemons, and the wrappers and lets you see the code for all of
them; type @code{Control-Shift-P} to get to successive ones.

@item Meta-X List Flavor Components
@itemx Meta-X Edit Flavor Components
Asks you for a flavor and lists or begins visiting all the flavors it depends on.

@item Meta-X List Flavor Dependents
@itemx Meta-X Edit Flavor Dependents
Asks you for a flavor and lists or begins visiting all the flavors that depend on it.

@item Meta-X List Flavor Direct Dependents
@itemx Meta-X Edit Flavor Direct Dependents
Asks you for a flavor and lists or begins visiting all the flavors
that depend directly on it.

@item Meta-X List Flavor Methods
@itemx Meta-X Edit Flavor Methods
Asks you for a flavor and lists or begins visiting all the methods defined
for that flavor.  (This does not include methods inherited from its component
flavors.)
@end table

@section  Property List Operations

It is often useful to associate a property list with an abstract object,
for the same reasons that it is useful to have a property list
associated with a symbol.  This section describes a mixin flavor that
can be used as a component of any new flavor in order to provide that
new flavor with a property list.  For more details and examples, see the
general discussion of property lists ((plist)).  The usual property
list functions (@code{get}, @code{putprop}, etc.) all work on instances by
sending the instance the corresponding message.

.defflavor si:property-list-mixin
This mixin flavor provides the basic operations on property lists.
.end_defflavor

@defmethod si:property-list-mixin :get property-name &optional default
Looks up the object's @i{property-name} property.
If it finds such a property, it returns the value; otherwise it
returns @i{default}.
@end defmethod

@defmethod si:property-list-mixin :getl property-name-list
Like the @code{:get} operation, except that the
argument is a list of property names.  The @code{:getl} operation searches
down the property list until it finds a property whose property name is
one of the elements of @i{property-name-list}.  It returns the portion
of the property list begining with the first such property that it
found.  If it doesn't find any, it returns @code{nil}.
@end defmethod

@defmethod si:property-list-mixin :putprop value property-name
Gives the object an @i{property-name} property of @i{value}.
@lisp
(send @i{object} :set :get @i{property-name} @i{value})
@end lisp
also has this effect.
@end defmethod

@defmethod si:property-list-mixin :remprop property-name
Removes the object's @i{property-name} property, by splicing it out
of the property list.  It returns one of the cells spliced out, whose car
is the former value of the property that was just removed.  If there was
no such property to begin with, the value is @code{nil}.
@end defmethod

@defmethod si:property-list-mixin :get-location-or-nil property-name
@defmethodx si:property-list-mixin :get-location property-name
Both return a locative pointer to the cell in which this object's
@i{property-name} property is stored.  If there is no such property,
@code{:get-location-or-nil} returns @code{nil}, but @code{:get-location}
adds a cell to the property list and initialized to @code{nil}, and a
pointer to that cell is returned.
@end defmethod

@defmethod si:property-list-mixin :push-property value property-name
The @i{property-name} property of the object should be a list (note that
@code{nil} is a list and an absent property is @code{nil}).  This operation sets
the @i{property-name} property of the object to a list whose car is
@i{value} and whose cdr is the former @i{property-name} property of the
list.  This is analogous to doing
@lisp
(push @i{value} (get @i{object} @i{property-name}))
@end lisp
See the @code{push} special form ((push-fun)).
@end defmethod

@defmethod si:property-list-mixin :property-list
Returns the list of alternating property names and values that implements
the property list.
@end defmethod

@defmethod si:property-list-mixin :property-list-location
Returns a locative pointer to the cell in the instance which holds
the property list data.
@end defmethod

@defmethod si:property-list-mixin :set-property-list list
Sets the list of alternating property names and values that implements
the property list to @i{list}.  So does
@lisp
(send @i{object} :set :property-list @i{list})
@end lisp
@end defmethod

.definitoption si:property-list-mixin :property-list list
This initializes the list of alternating property names and values that implements
the property list to @i{list}.
.end_definitoption

@section  Printing Flavor Instances Readably

A flavor instance can print out so that it can be read back in, as long
as you give it a @code{:print-self} method that produces a suitable
printed representation, and provide a way to parse it.  The convention
for doing this is to print as
@lisp
#@i{flavor-name} @i{additional-data}
@end lisp
and make sure that the flavor defines or inherits a @code{:read-instance}
method that can parse the @i{additional-data} and return an instance
(see (horseshoe-read)).  A convenient way of doing this is to use
@code{si:print-readably-mixin}.

.defflavor si:print-readably-mixin
Provides for flavor instances to print out using the @code{#}
syntax, and also for reading things that were printed in that way.
.end_defflavor

@defmethod si:print-readably-mixin :reconstruction-init-plist
When you use @code{si:print-readably-mixin}, you must define the operation
@code{:reconstruction-init-plist}.  This should return an alternating list
of init options and values that could be passed to @code{make-instance} to
create an instance ``like'' this one.  Sufficient similarity is defined
by the practical purposes of the flavor's implementor.
@end defmethod

@section  Copying Instances

Many people have asked ``How do I copy an instance?'' and have
expressed surprise when told that the flavor system does not
include any built-in way to copy instances.  Why isn't there
just a function @code{copy-instance} that creates a new instance
of the same flavor with all its instance variables having the same
values as in the original instance?  This would work for the
simplest use of flavors, but it isn't good enough for most
advanced uses of flavors.  A number of issues are raised by
copying:

@table @strong
@item *
Do you or do you not send an @code{:init} message to the new instance?
If you do, what init-plist options do you supply?

@item *
If the instance has a property list, you should copy the property
list (e.g. with @code{copylist}) so that @code{putprop} or @code{remprop}
on one of the instances does not affect the properties of the
other instance.

@item *
If the instance is a pathname, the concept of copying is not even meaningful.
Pathnames are @i{interned}, which means that there can only be one pathname
object with any given set of instance-variable values.

@item *
If the instance is a stream connected to a network, some of the
instance variables represent an agent in another host elsewhere in the
network.  Should the copy talk to the same agent, or should a new
agent be constructed for it?

@item *
If the instance is a stream connected to a file, should copying the
stream make a copy of the file or should it make another stream open
to the same file?  Should the choice depend on whether the file is
open for input or for output?
@end table

In general, you can see that in order to copy an instance one must understand
a lot about the instance.  One must know what the instance variables mean so
that the values of the instance variables can be copied if necessary.  One must
understand what relations to the external environment the instance has so
that new relations can be established for the new instance.  One must even
understand what the general concept `copy' means in the context of this
particular instance, and whether it means anything at all.

Copying is a generic operation, whose implementation for a particular instance
depends on detailed knowledge relating to that instance.  Modularity dictates
that this knowledge be contained in the instance's flavor, not in a ``general
copying function''.  Thus the way to copy an instance is to send it a message,
as in @code{(send object :copy)}.  It is up to you to implement the
operation in a suitable fashion, such as
@lisp
(defflavor foo (a b c) ()
  (:inittable-instance-variables a b))

(defmethod (foo :copy) ()
  (make-instance 'foo :a a :b b))
@end lisp

The flavor system chooses not to provide any default method for copying an
instance, and does not even suggest a standard name for the copying message,
because copying involves so many semantic issues.

If a flavor supports the @code{:reconstruction-init-plist} operation, a
suitable copy can be made by invoking this operation and passing the
result to @code{make-instance} along with the flavor name.  This is
because the definition of what the @code{:reconstruction-init-plist}
operation should do requires it to address all the problems listed
above.  Implementing this operation is up to you, and so is making
sure that the flavor implements sufficient init keywords to transmit
any information that is to be copied.  See
(si:print-readably-mixin-reconstruction-init-plist-method).

@c Need to add examples in the section on read, maybe print too.

@chapter The I/O System
@cindex input and output
@cindex stream

	Zetalisp provides a powerful and flexible system for performing
input and output to peripheral devices.  Device independent I/O is
generalized in the concept of an @i{I/O stream}.  A stream is a source
or sink for data in the form of characters or integers; sources are
called @i{input streams} and sinks are called @i{output streams}.  A
stream may be capable of use in either direction, in which case it is a
@i{bidirectional} stream.  In a few unusual cases, it is useful to have
a `stream' which supports neither input nor output; for example, opening
a file with direction @code{:probe} returns one ((probe-streams)).
Streams on which characters are transferred are called @i{character
streams}, and are used more often than @i{binary streams}, which
usually transfer integers of type @code{(unsigned-byte @i{n})} for some
@i{n}.

Streams automatically provide a modular separation between the program
which implements the stream and the program which uses it, because
streams obey a standard protocol.  The stream protocol is a special case
is based on the general message passing protocol: a stream operation is
invoked by calling the stream as a function, with a first argument that
is a keyword and identifies the I/O operation desired (such as, @code{:tyi}
to read a character) and additional arguments as that operation calls
for them.  The stream protocol consists of a particular set of operation
names and calling conventions for them.  It is documented in
(streams).

Many programs do not invoke the stream operations directly; instead, they
call standard I/O functions which then invoke stream operations.
This is done for two reasons: the functions may provide useful services,
and they may be transportable to Common Lisp or Maclisp.  Programs that
use stream operations directly are not transportable outside Zetalisp.
The I/O functions are documented in the first sections of this chapter.

The generality of the Zetalisp I/O stream comes from the fact that
I/O operations on it can invoke arbitrary Lisp code.  For example,
it would be very simple to implement a "morse code" stream that accepted
character output and used @code{beep} with appropriate pauses to `display' it.
How to implement a stream is documented in (stream-implementation),
and the following sections.

The most commonly used streams are windows, which read input from the
keyboard and dispose of output by drawing on the screen, file streams,
editor buffer streams which get input from the text in a buffer
and insert output into the buffer, and string streams which do
likewise with the contents of a string.

Another unusual aspect of Lisp I/O is the ability to input and output
general Lisp objects, represented as text.  These are done using the
@code{read} and related functions and using @code{print} and related functions.
They are documented in chapter (expression-io-chapter).

@section  Input Functions

The input functions read characters, lines, or bytes from an input
stream.  This argument is called @i{stream}.  If omitted or @code{nil},
the current value of @code{*standard-input*}.  This is the
``default input stream'', which in simple use reads
from the terminal keyboard.  If the argument is @code{t}, the current
value of @code{*terminal-io*} is used; this is conventionally supposed to
access ``the user's terminal'' and nearly always reads from the keyboard
in processes belonging to windows.

If the stream is an interactive one, such as the terminal, the input is
echoed, and functions which read more than a single character allow
editing as well.  @code{peek-char} echoes all of the characters that were
skipped over if @code{read-char} would have echoed them; the character not
removed from the stream is not echoed either.

When an input stream has no more data to return, it reports end of file.
Each stream input operation has a convention for how to do this.
The input functions accept an argument @i{eof-option} or two arguments
@i{eof-error} and @i{eof-value} to tell them what to do if end of file
is encountered instead of any input.  The functions that take two
@i{eof-} arguments are the Common Lisp ones.  For them, end of
file is an error if @i{eof-error} is non-@code{nil} or if it is
unsupplied.  If @i{eof-error} is @code{nil}, then the function returns
@i{eof-value} at end of file.

The functions which have one argument called @i{eof-option} are from
Maclisp.  End of file causes an error if the argument is not supplied.
Otherwise, end of file causes the function to return the argument's
value.  Note that an @i{eof-option} of @code{nil} means to return @code{nil}
if the end of the file is reached; it is @i{not} equivalent to supplying
no @i{eof-option}.

.defcondition sys:end-of-file (@code{error})
All errors signaled to report end of file possess this condition name.

The @code{:stream} operation on the condition instance returns the stream
on which end of file was reached.
.end_defcondition

@subsection String Input Functions

@defun read-line &optional stream (eof-errorp @code{t}) eof-value ignore options
Reads a line of text, terminated by a @code{Return}.  It
returns the line as a character string, @i{without} the @code{Return}
character that ended the line.  The argument @i{ignore}
must be accepted for the sake of the Common Lisp specifications
but it is not used.

This function is usually used to get a line of input from
the user.  If rubout processing is happening, then @i{options} is passed
as the list of options to the rubout handler (see (rubout-handler)).

There is a second value, @code{t} if the line was terminated by end of file.
@end defun

@defun readline &optional stream eof-option options
Like @code{read-line} but uses the Maclisp convention for specifying
what to do about end of file.  This function can take its first two
arguments in the other order, for Maclisp compatibility only; see the
note in (maclisp-input-functions).
@end defun

@defun readline-trim &optional stream eof-option options
This is like @code{readline} except that leading and trailing spaces and
tabs are discarded from the value before it is returned.
@end defun

@defun readline-or-nil &optional stream eof-option options
Like @code{readline-trim} except that @code{nil} is returned if the line is empty
or all blank.
@end defun

@defun read-delimited-string &optional delimiter stream eof rubout-handler-options buffer-size
Reads input from @i{stream} until a delimiter character is reached, then
returns as a string all the input up to but not including the delimiter.
@i{delimiter} is either a character or a list of characters which all
serve as delimiters.  It defaults to the character @code{End}.  @i{stream}
defaults to the value of @code{*standard-input*}.

If @i{eof} is non-@code{nil}, then end of file on attempting to read the
first character is an error.  Otherwise it just causes an empty string
to be returned.  End of file once at least one character has been read
is never an error but it does cause the function to return all the input
so far.

Input is done using rubout handling and echoing if stream supports the
@code{:rubout-handler} operation.  In this case, @i{rubout-handler-options}
are passed as the options argument to that operation.

@i{buffer-size} specifies the size of string buffer to allocate initially.

The second value returned is @code{t} if input ended due to end of file.

The third value is the delimiter character which terminated input,
or @code{nil} if input terminated due to end of file.
This character is currently represented as a fixnum, but perhaps someday
will be a character object instead.
@end defun

@subsection Character-Level Input Functions

@defun read-char &optional stream (eof-errorp @code{t}) eof-value
Reads a character from @i{stream} and returns it as a character object.
End of file is an error if @i{eof-errorp} is non-@code{nil}; otherwise, it
causes @code{read-char} to return @i{eof-value}.  This uses the @code{:tyi}
stream operation.
@end defun

@defun read-byte stream &optional (eof-errorp @code{t}) eof-value
Like @code{read-char} but returns an integer rather than a character
object.  In strict Common Lisp, only @code{read-char} can be used
on character streams and only @code{read-byte} can be used on binary streams.
@end defun

@defun read-char-no-hang &optional stream (eof-errorp @code{t}) eof-value
Similar but returns @code{nil} immediately when no input is available on an interactive stream.
Uses the @code{:tyi-no-hang} stream operation ((streams-tyi-no-hang-method)).
@end defun

@defun unread-char char &optional stream
Puts @i{char} back into @i{stream} so that it will be read again
as the next input character.  @i{char} must be the same character that was
read from stream most recently.  It may not work to unread two characters
in a row before reading again.
Uses the @code{:untyi} stream operation ((streams-untyi-method)).
@end defun

@defun peek-char peek-type &optional stream (eof-errorp @code{t}) eof-value
If @i{peek-type} is @code{nil}, this is like @code{read-char} except leaves the character
to be read again by the next input operation.

If @i{peek-type} is @code{t}, skips whitespace characters and peeks at the
first nonwhitespace character.  That character is the value, and is also
left to be reread.

If @i{peek-type} is a character, reads input until that character is seen.
That character is unread and also returned.
@end defun

@defun listen &optional stream
@code{t} if input is now available on @i{stream}.  Uses the @code{:listen} operation
((streams-listen-method)).
@end defun

@defun clear-input &optional stream
Discards any input now available on @i{stream}, if it is an interactive stream.
Uses the @code{:clear-input} stream operation ((streams-clear-input-method)).
@end defun

@subsection Maclisp Compatibility Input Functions

These functions accept an argument @i{eof-option} to tell them what to
do if end of file is encountered instead of any input.  End of file
signals an error if the argument is not supplied.  Otherwise, end of
file causes the function to return the argument's value.  Note that an
@i{eof-option} of @code{nil} means to return @code{nil} if the end of the
file is reached; it is @i{not} equivalent to supplying no
@i{eof-option}.

The arguments @i{stream} and @i{eof-option} can also be given in the
reverse order for compatibility with old Maclisp programs.  The
functions attempt to figure out which way they were called by seeing
whether each argument is a plausible stream.  Unfortunately, there is
an ambiguity with symbols: a symbol might be a stream and it might be
an eof-option.  If there are two arguments, one being a symbol and the
other being something that is a valid stream, or only one argument,
which is a symbol, then these functions interpret the symbol as an
eof-option instead of as a stream.  To force them to interpret a
symbol as a stream, give the symbol an @code{si:io-stream-p} property
whose value is @code{t}.

@defun tyi &optional stream eof-option
Reads one character from @i{stream} and returns it.
The character is echoed if @i{stream} is interactive,
except that @code{Rubout} is not echoed.
The @code{Control}, @code{Meta}, etc. shifts echo as @code{C-}, @code{M-}, etc.

The @code{:tyi} stream operation is preferred over the @code{tyi} function for
some purposes.  Note that it does not echo.  See (general-stream-ops).

(This function can take its arguments in the other order, for Maclisp
compatibility only; see the note above.)
@end defun

@defun readch &optional stream eof-option
Like @code{tyi} except that instead of returning a fixnum character, it
returns a symbol whose print name is the character.  The symbol is
interned in the current package.  This is just Maclisp's version of
character object.  (This function can take its arguments in the other
order, for Maclisp compatibility only; see the note above.)

This function is provided only for Maclisp compatibility, since
in Zetalisp never uses symbols to represent characters in this way.
@end defun

@defun tyipeek &optional peek-type stream eof-option
This function is provided mainly for Maclisp compatibility;
the @code{:tyipeek} stream operation is usually clearer (see (tyipeek-stream-operation)).

What @code{tyipeek} does depends on the @i{peek-type}, which
defaults to @code{nil}.  With a @i{peek-type} of @code{nil},
@code{tyipeek} returns the next character to be read from 
@i{stream}, without actually removing it from the input stream.
The next time input is done from @i{stream} the character will still
be there; in general, @code{(= (tyipeek) (tyi))} is @code{t}.

If @i{peek-type} is a fixnum less than 1000 octal, then @code{tyipeek}
reads characters from @i{stream} until it gets one equal to @i{peek-type}.
That character is not removed from the input stream.

If @i{peek-type} is @code{t}, then @code{tyipeek} skips over input characters
until the start of the printed representation of a Lisp object is reached.
As above, the last character (the one that starts an object)
is not removed from the input stream.

The form of @code{tyipeek} supported by Maclisp in which @i{peek-type}
is a fixnum not less than 1000 octal is not supported, since the readtable
formats of the Maclisp reader and the Zetalisp reader are quite different.

Characters passed over by @code{tyipeek} are echoed if @i{stream} is interactive.
@end defun

@subsection Interactive Input with Prompting

@defun prompt-and-read type-of-parsing format-string &rest format-args
Reads some sort of object from @code{*query-io*}, parsing
it according to @i{type-of-parsing}, and prompting by calling @code{format}
using @i{format-string} and @i{format-args}.

@i{type-of-parsing} is either a keyword or a list starting with a
keyword and continuing with a list of options and values, whose meanings
depend on the keyword used.

Most keywords specify reading a line of input and parsing it in some
way.  The line can be terminated with @code{Return} or @code{End}.  Sometimes
typing just @code{End} has a special meaning.

The keywords defined are
@table @code
@item :eval-sexp
@itemx :eval-form prompt-and-read
This keyword directs @code{prompt-and-read} to accept a Lisp
expression.  It is evaluated, and the value is returned by @code{prompt-and-read}.

If the Lisp expression is not a constant or quoted, the user is asked to
confirm the value it evaluated to.

A default value can be specified with an option, as in
@lisp
(:eval-sexp :default @i{default})
@end lisp
Then, if the user types @code{Space}, @code{prompt-and-read} returns the
@i{default} as the first value and @code{:default} as the second value.

@item :eval-sexp-or-end
@itemx :eval-form-or-end prompt-and-read
Synonymously direct @code{prompt-and-read} to accept a Lisp expression or
just the character @code{End}.  If @code{End} is typed, @code{prompt-and-read}
returns @code{nil} as its first value and @code{:end} as its second value.
Otherwise, things proceed as for @code{:eval-sexp}.

A default value is allowed, as in @code{:eval-sexp}.

@item :read
@itemx :expression prompt-and-read
Synonymously direct @code{prompt-and-read} to read an object
and return it, with no evaluation.

@item :expression-or-end
Is like @code{:expression} except that the user is also allowed to type just
@code{End}.  If he does so, @code{prompt-and-read} returns the two values
@code{nil} and @code{:end}.

@item :number
Directs @code{prompt-and-read} to read and return a number.
It insists on getting a number, forcing the user to rub out anything else.
Additional features can be specified with options:
@lisp
(:number :input-radix @i{radix} :or-nil @i{nil-ok-flag})
@end lisp
parses the number using radix @i{radix} if the number is a rational.  (By default,
the ambient radix is used).  If
@i{nil-ok-flag} is non-@code{nil}, then the user is also permitted to type
just @code{Return} or @code{End}, and then @code{nil} is returned.

@item :decimal-number
@itemx :number-or-nil prompt-and-read
@itemx :decimal-number-or-nil prompt-and-read
Abbreviations for
@lisp
(:number :input-radix 10)
(:number :or-nil t)
(:number :input-radix 10 :or-nil t)
@end lisp

@item :date
Directs @code{prompt-and-read} to read a date and time, terminated
with @i{Return} or @code{End}, and return it
as a universal time (see (get-universal-time-fun)).  It allows several options:
@lisp
(:date :never-p @i{never-ok} :past-p @i{past-required})
@end lisp
If @i{past-required} is non-@code{nil}, the date must be before the
present time, or the user must rub out and use a different date.  If
@i{never-ok} is non-@code{nil}, the user may also type ``never''; then
@code{nil} is returned.

@item :date-or-never
@itemx :past-date prompt-and-read
@itemx :past-date-or-never prompt-and-read
Abbreviations for
@lisp
(:date :never-p t)
(:date :past-p t)
(:date :never-p t :past-p t)
@end lisp

@item :character
Directs @code{prompt-and-read} to read a single character and
return a character object representing it.

@item :string
Directs @code{prompt-and-read} to read a line and return its
contents as a string, using @code{readline}.

@item :string-or-nil
Directs @code{prompt-and-read} to read a line and return its
contents as a string, using @code{readline-trim}.  In addition, if the
result would be empty, @code{nil} is returned instead of the empty string.

@item :string-list
Like @code{:string-trim} but regards the line as a sequence of input
strings separated by commas.  Each substring between commas is trimmed,
and a list of the strings is returned.

@item :keyword-list
Like @code{:string-list} but converts each string to a keyword by interning
it in the @code{keyword} package.  The value is therefore a list of keywords.

@item :font-list
Like @code{:string-list} but converts each string to a font name by interning
it in the @code{fonts} package.  The symbols must already exist in that package
or the user is required to retype the input.

@item :delimited-string
Directs @code{prompt-and-read} to read a string terminated by specified delimiters.
With
@lisp
(:delimited-string :delimiter @i{delimiter-list}
		   :buffer-size @i{size})
@end lisp
you can specify a list of delimiter characters and an initial size for the
buffer.  The list defaults to @code{(#\end)} and the size to 100.

The work is done by @code{read-delimited-string}
((read-delimited-string-fun)).  The delimiters and size are passed to
that function.

@item :delimited-string-or-nil
Like @code{:delimited-string} except that @code{nil} is returned instead
of the empty string if the first character read is a delimiter.

@item :host
Directs @code{prompt-and-read} to read a line and interpret the
contents as a network host name.  The value returned is the host, looked up
using @code{si:parse-host} ((si:parse-host-fun)).  An option is defined:
@lisp
(:host :default @i{default-name} :chaos-only @i{chaos-only})
@end lisp
If the line read is empty, the host named @i{default-name} is used.
If @i{chaos-only} is non-@code{nil}, only hosts on the Chaosnet are
permitted input.

@item :host-list
Like @code{:host} but regards the line as a sequence of host names
separated by commas.  Each host name is looked up as in @code{:host}
and a list of the resulting hosts is returned.

@item :pathname-host
Like @code{:host} but uses @code{fs:get-pathname-host} to look up the host
object from its name ((fs:get-pathname-host-fun)).  Thus, you find
hosts that can appear in pathnames rather than hosts that are on the
network.

@item :pathname
Directs @code{prompt-and-read} to read a line and parse it as
a pathname, merging it with the defaults.  If the line is empty,
the default pathname is used.  These options are defined:
@lisp
(:pathname :defaults @i{defaults-alist-or-pathname}
	   :version @i{default-version})
@end lisp
uses @i{defaults-alist-or-pathname} as the @i{defaults} argument to
@code{fs:merge-pathname-defaults}, and @i{default-version} as the
@i{version} argument to it.

@item :pathname-or-nil
Is like @code{:pathname}, but if the user types just @code{End} it
is interpreted as meaning ``no pathname'' rather than ``use the default''.
Then @code{nil} is returned.

@item :pathname-list
Like @code{:pathname} but regards the line as a sequence of filenames
separated by commas.  Each filename is parsed and defaulted and a list
of the resulting pathnames is returned.

@item :fquery
Directs @code{prompt-and-read} to query the user for a fixed
set of alternatives, using @code{fquery}.  @i{type-of-parsing} should always
be a list, whose car is @code{:fquery} and whose cdr is a list to be passed
as the list of options (@code{fquery}'s first argument).
@lisp
@exdent Example:
(prompt-and-read `(:fquery 
		   . ,format:y-or-p-options)
                 "Eat it? ")
@exdent is equivalent to
(y-or-n-p "Eat it? ")
@end lisp

This keyword is most useful as a way to get to @code{fquery} when going
through an interface defined to call @code{prompt-and-read}.
@end table
@end defun

@section  Output Functions

These functions all take an optional argument called @i{stream}, which is
where to send the output.  If unsupplied @i{stream} defaults to the value of
@code{*standard-output*}.  If @i{stream} is @code{nil}, the value of
@code{*standard-output*} (i.e. the default) is used.  If it is @code{t}, the value of
@code{*terminal-io*} is used (i.e. the interactive terminal).  This is all
more-or-less compatible with Maclisp, except that instead of the
variable @code{*standard-output*} Maclisp has several variables and complicated rules.
For detailed documentation of streams, refer to (streams).

For @code{print} and the other expression output functions, see
(expression-output).

@defun write-char char &optional stream
@defunx tyo char &optional stream
Outputs @i{char} to @i{stream} (using @code{:tyo}).  @i{char} may be an
integer or a character object; in the latter case, it is converted to an
integer before the @code{:tyo}.
@end defun

@defun write-byte number &optional stream
Outputs number to stream using @code{:tyo}.
In strict Common Lisp, output to binary streams can be done only with
@code{write-byte} and output to character streams requires @code{write-char}.
In fact, the two functions are identical on the Lisp Machine.
@end defun

@defun write-string string &optional stream &key (start @code{0}) end
Outputs @i{string} (or the specified portion of it) to @i{stream}.
@end defun

@defun write-line string &optional stream &key (start @code{0}) end
Outputs @i{string} (or the specified portion) to @i{stream}, followed by a @code{Return} character.
@end defun

@defun fresh-line &optional stream
Outputs a @code{Return} character to @code{stream} unless either
@table @strong
@item (1)
nothing has been output to @i{stream} yet, or
@item (2)
the last thing output was a @code{Return} character, or
@item (3)
@i{stream} does not remember what previous output there has been.
@end table

This uses the @code{:fresh-line} stream operation.
The value is @code{t} if a @code{Return} is output, @code{nil} if nothing is output.
@end defun

@defun force-output &optional stream
Causes @i{stream}'s buffered output, if any, to be transmitted immediately.
This uses the @code{:force-output} stream operation.
@end defun

@defun finish-output &optional stream
Causes @i{stream}'s buffered output, if any, to be transmitted immediately,
and waits until that is finished.
This uses the @code{:finish} stream operation.
@end defun

@defun clear-output &optional stream
Discards any output buffered in @i{stream}.
This uses the @code{:clear-output} stream operation.
@end defun

@defun terpri &optional stream
Outputs a @code{Return} character to @i{stream}.
It returns @code{t} for Maclisp compatibility.
It is wise not to depend on the value @code{terpri} returns.
@end defun

@defun cli:terpri &optional stream
Outputs a @code{Return} character to @i{stream}.
Returns @code{nil} to meet Common Lisp specifications.
It is wise not to depend on the value @code{cli:terpri} returns.
@end defun

	The @code{format} function (see (format-fun)) is very useful for producing
nicely formatted text.  It can do anything any of the above functions
can do, and it makes it easy to produce good looking messages and such.
@code{format} can generate a string or output to a stream.

@defun stream-copy-until-eof from-stream to-stream &optional leader-size
@code{stream-copy-until-eof} inputs characters from @i{from-stream}
and outputs them to @i{to-stream}, until it reaches the end of file
on the @i{from-stream}.  For example, if @code{x} is bound to a stream
for a file opened for input, then @code{(stream-copy-until-eof x *terminal-io*)}
prints the file on the console.

If @i{from-stream} supports the @code{:line-in} operation and @i{to-stream} 
supports the @code{:line-out} operation, then @code{stream-copy-until-eof}
uses those operations instead of @code{:tyi} and @code{:tyo}, for greater
efficiency.  @i{leader-size} is passed as the argument to the
@code{:line-in} operation.
@end defun

@defun beep &optional beep-type (stream @code{*terminal-io*})
This function is intended to attract the user's attention by causing
an audible beep, or flashing the screen, or something similar.  If
the stream supports the @code{:beep} operation, then this function sends
it a @code{:beep} message, passing @i{beep-type} along as an argument.  Otherwise
it just causes an audible beep on the terminal.

@i{beep-type} is a keyword which explains the significance of this beep.
Users can redefine @code{beep} to make different noises depending on the
beep type.  The defined beep types are:
@table @code
@item zwei:converse-problem
Used for the beep that is done when Converse is unable to send a message.
@item zwei:converse-message-received
Used for the beeps done when a Converse message is received.
@item zwei:no-completion
Used when you ask for completion in the editor and the string does not complete.
@item tv:notify
Used for the beep done when you get a notification that cannot 
be printed on the selected window.
@item fquery
Used for the beep done by @code{yes-or-no-p} or by @code{fquery} with the
@code{:beep} option specified.
@item supdup:terminal-bell
Used for the beep requested by the remote host being used through
a Supdup window.
@item nil
Used whenever no other beep type applies.
@end table

The @code{:beep} operation is described on (streams-beep-method).
@end defun

@defun cursorpos &rest args
This function exists primarily for Maclisp compatibility.  Usually it is
preferable to send the appropriate messages (see the Window System manual).

@code{cursorpos} normally operates on the @code{*standard-output*} stream;
however, if the last argument is a stream or @code{t} (meaning @code{*terminal-io*})
then @code{cursorpos} uses that stream and ignores it when doing the operations
described below.  @code{cursorpos} only works on streams
that are capable of these operations, such as windows.
A stream is taken to be any argument that is not a number and not a symbol,
or that is a symbol other than @code{nil} with a name more than one character long.

@code{(cursorpos) => (@i{line} . @i{column})}, the current
cursor position.

@code{(cursorpos @i{line} @i{column})} moves the cursor to that position.
It returns @code{t} if it succeeds and @code{nil} if it doesn't.

@code{(cursorpos @i{op})} performs a special operation coded by @i{op},
and returns @code{t} if it succeeds and @code{nil} if it doesn't.
@i{op} is tested by string comparison, it is not a keyword symbol
and may be in any package.
@table @code
@item f
Moves one space to the right.
@item b
Moves one space to the left.
@item d
Moves one line down.
@item u
Moves one line up.
@item t
Homes up (moves to the top left corner).  Note that @code{t} as the last
argument to @code{cursorpos} is interpreted as a stream, so a stream @i{must}
be specified if the @code{t} operation is used.
@item z
Home down (moves to the bottom left corner).
@item a
Advances to a fresh line.  See the @code{:fresh-line} stream operation.
@item c
Clears the window.
@item e
Clear from the cursor to the end of the window.
@item l
Clear from the cursor to the end of the line.
@item k
Clear the character position at the cursor.
@item x
@code{b} then @code{k}.
@end table
@end defun

.page
@section I/O Streams
@cindex stream
@cindex I/O stream

An @i{I/O stream}, or just @i{stream}, is a source
and/or sink of characters or bytes.  A set of @i{operations} is
available with every stream; operations include things like ``output a
character'' and ``input a character''.  The way to perform an operation on
a stream is the same for all streams, although what happens inside the
stream is very different depending on what kind of a stream it is.  So
all a program has to know is how to deal with streams using the
standard, generic operations.  A programmer creating a new kind of stream
only needs to implement the appropriate standard operations.

	A stream is a message-receiving object.  This means that it is
something that you can apply to arguments.  The first argument is a
keyword symbol which is the name of the operation you wish to perform.
The rest of the arguments depend on what operation you are doing.
Message-passing and generic operations are explained in the flavor
chapter ((flavor)).

	Some streams can only do input, some can only do output, and
some can do both.  Some operations are only supported by some streams.
Also, there are some operations that the stream may not support by
itself, but which work anyway, albeit slowly, because the @i{stream
default handler} can handle them.  All streams support the operation
@code{:which-operations}, which returns a list of the names of all of the
operations that are supported ``natively'' by the stream.
(@code{:which-operations} itself is not in the list.)

All input streams support all the standard input operations, and all
output streams support all the standard output operations.  All
bidirectional streams support both.

@defun streamp object
According to Common Lisp, this returns @code{t} if @i{object} is a stream.  In
the Lisp machine, a stream is any object which can be called as a
function with certain calling conventions.  It is theoretically
impossible to test for this.  However, @code{streamp} does return @code{t} for any of
the usual types of streams, and @code{nil} for any Common Lisp datum which is
not a stream.
@end defun

@subsection Standard Streams

	There are several variables whose values are streams used by many
functions in the Lisp system.  These variables and their uses are listed here.
By convention, variables that are expected to hold a stream capable of input
have names ending with @code{-input}, and similarly for output.  Those expected
to hold a bidirectional stream have names ending with @code{-io}.  The names
with asterisks are synonyms introduced for the sake of Common Lisp.

@defvar *standard-input*
@defvarx standard-input
In the normal Lisp top-level loop, input is read from
@code{*standard-input*} (that is, whatever stream is the value of
@code{*standard-input*}).  Many input functions, including @code{tyi} and
@code{read}, take a stream argument that defaults to @code{*standard-input*}.
@end defvar

@defvar *standard-output*
@defvarx standard-output
In the normal Lisp top-level loop, output is sent to
@code{*standard-output*} (that is, whatever stream is the value of
@code{*standard-output*}).  Many output functions, including @code{tyo} and
@code{print}, take a stream argument that defaults to @code{*standard-output*}.
@end defvar

@defvar *error-output*
@defvarx error-output
The value of @code{*error-output*} is a stream on which noninteractive error
or warning messages should be printed.  Normally this is the same as
@code{*standard-output*}, but @code{*standard-output*} might be bound to a file
and @code{*error-output*} left going to the terminal.
@end defvar

@defvar *debug-io*
@defvarx debug-io
The value of @code{*debug-io*} is used for all input and output by the
error handler.  Normally this is a synonym for @code{*terminal-io*}.  The
value may be @code{nil}, which is regarded as equivalent to a synonym for
@code{*terminal-io*}.  This feature is provided because users often set
@code{*debug-io*} by hand, and it is much easier to set it back to @code{nil}
afterward than to figure out the proper synonym stream pointing to
@code{*terminal-io*}.
@end defvar

@defvar *query-io*
@defvarx query-io
The value of @code{*query-io*} is a stream that should be used when
asking questions of the user.  The question should be output to this
stream, and the answer read from it.  The reason for this is that when
the normal input to a program may be coming from a file, questions such
as ``Do you really want to delete all of the files in your directory??'' should
be sent directly to the user, and the answer should come from the user,
not from the data file.  @code{*query-io*} is used by @code{fquery} and related
functions; see (fquery-fun).
@end defvar

@defvar *terminal-io*
@defvarx terminal-io
The value of @code{*terminal-io*} is the stream that the program should use
to talk to the user's console.  In an interactive program, it is the
window from which the program is being run; I/O on this stream reads
from the keyboard and displays on the screen.  However, in a background
process that has no window, @code{*terminal-io*} defaults to a stream that
does not ever expect to be used.  If it is used, perhaps by an error
printout, it turns into a background window and requests the user's
attention.
@end defvar

@defvar *trace-output*
@defvarx trace-output
The value of @code{*trace-output*} is the stream on which the @code{trace} function
prints its output.
@end defvar

@code{*standard-input*}, @code{*standard-output*}, @code{*error-output*}, @code{*debug-io*},
@code{*trace-output*}, and @code{*query-io*} are initially bound to synonym
streams that pass all operations on to the stream that is the value of
@code{*terminal-io*}.  Thus any operations performed on those streams go
to the keyboard and screen.

Most user programs should not change the value of @code{*terminal-io*}.  A
program which wants (for example) to divert output to a file should do
so by binding the value of @code{*standard-output*}; that way queries on
@code{*query-io*}, debugging on @code{*debug-io*} and error messages sent to
@code{*error-output*} can still get to the user by going through
@code{*terminal-io*}, which is usually what is desired.

@subsection Standard Input Stream Operations

.defmetamethod streams :tyi &optional eof
The stream inputs one character and returns it.  For example, if the next
character to be read in by the stream is a `C', then the form
@lisp
(send s :tyi)
@end lisp
returns the value of @code{#/C} (that is, 103 octal).
Note that the @code{:tyi} operation does not
echo the character in any fashion; it just does the input.  The
@code{tyi} function (see (tyi-fun)) does echoing
when reading from the terminal.

The optional @i{eof} argument to the @code{:tyi}
operation tells the stream what to do if it gets to the end of the
file.  If the argument is not provided or is @code{nil}, the stream
returns @code{nil} at the end of file.  Otherwise it signals a @code{sys:end-of-file} error.
Note that this is @i{not} the same as the eof-option argument to
@code{read}, @code{tyi}, and related functions.

The @code{:tyi} operation on a binary input stream returns a non-negative
number, not necessarily to be interpreted as a character.

For some streams (such as windows), not all the input data are numbers.
Some are lists, called @i{blips}.  The @code{:tyi} operation returns only
numbers.  If the next available input is not a number, it is discarded,
and so on until a number is reached (or end of file is reached).
.end_defmetamethod

.defmetamethod streams :any-tyi &optional eof
Like @code{:tyi} but returns any kind of datum.  Non-numbers are not
discarded as they would be by @code{:tyi}.  This distinction only makes
a difference on streams which can provide input which is not composed
of numbers; currently, only windows can do that.
.end_defmetamethod

.defmetamethod streams :tyipeek &optional eof
Peeks at the next character or byte from the stream without discarding
it.  The next @code{:tyi} or @code{:tyipeek} operation will get the same
character.

@i{eof} is the same as in the @code{:tyi} operation: if @code{nil}, end of
file returns @code{nil}; otherwise, it signals a @code{sys:end-of-file} error.
.end_defmetamethod

.defmetamethod streams :untyi char
Unreads the character or byte @i{char}; that is to say, puts it back into
the input stream so that the next @code{:tyi} operation will read it again.
For example,
@lisp
(send s :untyi 120)
(send s :tyi) ==> 120
@end lisp
This operation is used by @code{read}, and any stream that supports @code{:tyi}
must support @code{:untyi} as well.

You are only allowed to @code{:untyi} one character before doing a
@code{:tyi}, and the character you @code{:untyi} must be the last character
read from the stream.  That is, @code{:untyi} can only be used to back up
one character, not to stuff arbitrary data into the stream.  You also
can't @code{:untyi} after you have peeked ahead with @code{:tyipeek} since
that does one @code{:untyi} itself.  Some streams implement @code{:untyi} by
saving the character, while others implement it by backing up the
pointer to a buffer.
.end_defmetamethod

.defmetamethod streams :string-in eof-option string &optional (start @code{0}) end
Reads characters from the stream and stores them into the array
@i{string}.  Many streams can implement this far more efficiently that
repeated @code{:tyi}'s.  @i{start} and @i{end}, if supplied, delimit the
portion of @i{string} to be stored into.  If @i{eof-option} is
non-@code{nil} then a @code{sys:end-of-file} error is signaled if end of file
is reached on the stream before the string has been filled.  If
@i{eof-option} is @code{nil}, any number of characters before end of file
is acceptable, even no characters.

If @i{string} has an array-leader, the fill pointer is adjusted to @i{start} plus
the number of characters stored into @i{string}.

Two values are returned: the index of the next position in @i{string} to be filled,
and a flag that is non-@code{nil} if end of file was reached before @i{string} was
filled.  Most callers do not need to look at either of these values.

@i{string} may be any kind of array, not necessarily a string; this is useful
when reading from a binary input stream.
.end_defmetamethod

.defmetamethod streams :line-in &optional leader
The stream should input one line from the input source, and return it as a
string with the carriage return character stripped off.  Contrary to what you
might assume from its name, this operation is not much like the @code{readline} function.

Many streams have a string that is used as a buffer for lines.  If this string
itself were returned, there would be problems caused if the caller of the stream
attempted to save the string away somewhere, because the contents of the string
would change when the next line was read in.  In order to solve this problem,
the string must be copied. On the other hand, some streams don't reuse the
string, and it would be wasteful to copy it on every @code{:line-in} operation.
This problem is solved by using the @i{leader} argument to @code{:line-in}.  If
@i{leader} is @code{nil} (the default), the stream does not bother to copy the
string and the caller should not rely on the contents of that string after the
next operation on the stream.  If @i{leader} is @code{t}, the stream does make a
copy.  If @i{leader} is a fixnum then the stream makes a copy with an array
leader @i{leader} elements long.  (This is used by the editor, which represents
lines of buffers as strings with additional information in their array-leaders,
to eliminate an extra copy operation.)

If the stream reaches end of file while reading in characters, it
returns the characters it has read in as a string and returns a second value of
@code{t}.  The caller of the stream should therefore arrange to receive the second
value, and check it to see whether the string returned was a whole line or just
the trailing characters after the last carriage return in the input source.

This operation should be implemented by all input streams whose data are
characters.
.end_defmetamethod

.defmetamethod streams :string-line-in eof-option string &optional (start @code{0}) end
Reads characters, storing them in @i{string}, until @i{string} is full
or a @code{Return} character is read.  If input stops due to a Return, the Return
itself is not put in the buffer.

Thus, this operation is nearly the same as @code{:string-in}, except that
@code{:string-in} always keeps going until the buffer is full or until end
of file.

@i{start} and @i{end}, if supplied, delimit the
portion of @i{string} to be stored into.  If @i{eof-option} is
non-@code{nil} then a @code{sys:end-of-file} error is signaled if end of file
is reached on the stream before the string has been filled.  If
@i{eof-option} is @code{nil}, any number of characters before end of file
is acceptable, even no characters.

If @i{string} has an array-leader, the fill pointer is adjusted to @i{start} plus
the number of characters stored into @i{string}.

@i{string} may be any kind of array, not necessarily a string; this is useful
when reading from a binary input stream.

Three values are returned:
@table @strong
@item (1)
The index in @i{string} at which input stopped.  This is the first
index not stored in.
@item (2)
@code{t} if input stopped due to end of file.
@item (3)
@code{t} if the line is incomplete; that is, if a @code{Return} character
did not terminate it.
@end table
.end_defmetamethod

.defmetamethod streams :read-until-eof
Discards all data from the stream until it is at end of file,
or does anything else with the same result.
.end_defmetamethod

.defmetamethod streams :close &optional ignore
Releases resources associated with the stream, when it is not going to be
used any more.  On some kinds of streams, this may do nothing.
On Chaosnet streams, it closes the Chaosnet connection, and
on file streams, it closes the input file on the file server.

The argument is accepted for compatibility with @code{:close} on output streams.
.end_defmetamethod

@subsection Standard Output Stream Operations

.defmetamethod streams :tyo char
The stream outputs the character @i{char}.  For example, if @code{s} is bound
to a stream, then the form
@lisp
(send s :tyo #/B)
@end lisp
outputs a @code{B} to the stream.  For binary output streams, the argument
is a non-negative number rather than specifically a character.
.end_defmetamethod

.defmetamethod streams :fresh-line
Tells the stream that it should position itself at the beginning of
a new line.  If the stream is already at the beginning of a fresh line
it should do nothing; otherwise it should output a carriage return.  If
the stream cannot tell whether it is at the beginning of a line, it should
always output a carriage return.
.end_defmetamethod

.defmetamethod streams :string-out (string @code{0}) &optional start end
Outputs the characters of @i{string} successively to @i{stream}.  This
operation is provided for two reasons; first, it saves the writing of a loop
which is used very often, and second, many streams can perform this operation
much more efficiently than the equivalent sequence of @code{:tyo} operations.

If @i{start} and @i{end} are not supplied, the whole string is output.
Otherwise a substring is output; @i{start} is the index of the first character
to be output (defaulting to @code{0}), and @i{end} is one greater than the index of
the last character to be output (defaulting to the length of the string).  Callers
need not pass these arguments, but all streams that handle @code{:string-out} must
check for them and interpret them appropriately.
.end_defmetamethod

.defmetamethod streams :line-out string &optional (start @code{0}) end
Outputs the characters of @i{string} successively to @i{stream}, then
outputs a @code{Return} character.  @i{start} and @i{end} optionally
specify a substring, as with @code{:string-out}.  If the stream doesn't
support @code{:line-out} itself, the default handler implements it by means
of @code{:tyo}.

This operation should be implemented by all output streams whose data are
characters.
.end_defmetamethod

.defmetamethod streams :close &optional mode
Closes the stream to make the output final if this is necessary.  The
stream becomes @i{closed} and no further output operations should be
performed on it.  However, it is all right to @code{:close} a closed
stream.  On many file server hosts, a file being written is not
accessible to be read until the output stream is closed.

This operation does nothing on streams for which it is not meaningful.

The @i{mode} argument is normally not supplied.  If it is @code{:abort}, we are
abnormally exiting from the use of this stream.  If the stream is outputting to
a file, and has not been closed already, the stream's newly-created file is
deleted; it will be as if it was never opened in the first place.  Any previously
existing file with the same name remains undisturbed.
.end_defmetamethod

.defmetamethod streams :eof
Indicates the end of data on an output stream.  This is different from @code{:close}
because some devices allow multiple data files to be transmitted without closing.
@code{:close} implies @code{:eof} when the stream is an output stream and the close
mode is not @code{:abort}.

This operation does nothing on streams for which it is not meaningful.
.end_defmetamethod

@subsection Asking Streams What They Can Do

All streams are supposed to support certain operations which enable a
program using the stream to ask which operations are available.

.defmetamethod streams :which-operations
Returns a list of operations handled natively by the stream.
Certain operations not in the list may work anyway, but slowly, so it is
just as well if any programs that work with or without them
choose not to use them.

@code{:which-operations} itself need not be in the list.
.end_defmetamethod

.defmetamethod streams :operation-handled-p operation
Returns @code{t} if @i{operation} is handled natively by the stream:
if @i{operation} is a member of the @code{:which-operations} list, or is
@code{:which-operations}.
.end_defmetamethod

.defmetamethod streams :send-if-handles operation &rest arguments
Performs the operation @i{operation}, with the specified @i{arguments},
only if the stream can handle it.  If @i{operation} is handled, this
is the same as sending an @i{operation} message directly, but if @i{operation}
is not handled, using @code{:send-if-handles} avoids any error.

If @i{operation} is handled, @code{:send-if-handles} returns whatever values
the execution of the @i{operation} returns.  If @i{operation} is not handled,
@code{:send-if-handles} returns @code{nil}.
.end_defmetamethod

.defmetamethod streams :direction
Returns @code{:input}, @code{:output}, or @code{:bidirectional}
for a bidirectional stream.

There are a few kinds of streams, which cannot do either input or
output, for which the @code{:direction} operation returns @code{nil}.  For
example, @code{open} with the @code{:direction} keyword specified as @code{nil}
returns a stream-like object which cannot do input or output but can
handle certain file inquiry operations such as @code{:truename} and
@code{:creation-date}.
.end_defmetamethod

.defmetamethod streams :characters
Returns @code{t} if the data input or output on the stream
represent characters, or @code{nil} if they are just numbers (as for a stream
reading a non-text file).
.end_defmetamethod

.defmetamethod streams :element-type
Returns a type specified describing in principle the data input or output on the stream.
Refer to the function @code{stream-element-type}, below, which works
using this operation.
.end_defmetamethod

.need 2000
These functions for inquiring about streams are defined by Common Lisp.

@defun input-stream-p stream
@code{t} if @i{stream} handles input operations (at least, if it handles @code{:tyi}).
@end defun

@defun output-stream-p stream
@code{t} if @i{stream} handles output operations (at least, if it handles @code{:tyo}).
@end defun

@defun stream-element-type stream
Returns a type specifier which describes, conceptually, the kind of data
input from or output to @i{stream}.  The value is always a subtype of
@code{integer} (for a binary stream) or a subtype of @code{character} (for a
character stream).  If it is a subtype of @code{integer}, a Common Lisp
program should use @code{read-byte} ((read-byte-fun)) or @code{write-byte}
((write-byte-fun)) for I/O.  If it is a subtype of @code{character},
@code{read-char} ((read-char-fun)) or @code{write-char} ((write-char-fun))
should be used.

The value returned is not intended to be rigidly accurate.  It describes
the typical or characteristic sort of data transferred by the stream,
but the stream may on occasion deal with data that do not fit the type;
also, not all objects of the type may be possible as input or even make
sense as output.  For example, windows describe their element type
as @code{character} even though they may offer blips, which are lists,
as input on occasion.  In addition, streams which say they provide
characters really return integers if the @code{:tyi} operation is used
rather than the standard Common Lisp function @code{read-char}.
@end defun

@subsection Operations for Interactive Streams

The operations @code{:listen}, @code{:tyi-no-hang}, @code{:rubout-handler} and
@code{:beep} are intended for interactive streams, which communicate with
the user.  @code{:listen} and @code{:tyi-no-hang} are supported in a trivial
fashion by other streams, for compatibility.

.defmetamethod streams :listen
On an interactive device, the @code{:listen} operation returns non-@code{nil} if
there are any input characters immediately available, or @code{nil} if there is
no immediately available input.  On a non-interactive device, the operation
always returns non-@code{nil} except at end of file.

The main purpose of @code{:listen} is to test whether the user has hit
a key, perhaps trying to stop a program in progress.
.end_defmetamethod

.defmetamethod streams :tyi-no-hang &optional eof
Just like @code{:tyi} except that it returns @code{nil} rather than waiting if
it would be necessary to wait in order to get the character.  This lets
the caller check efficiently for input being available and get the input
if there is any.

@code{:tyi-no-hang} is different from @code{:listen} because it reads a
character.

Streams for which the question of whether input is available is not
meaningful treat this operation just like @code{:tyi}.  So do
Chaosnet file streams.  Although in fact reading a
character from a file stream may involve a delay, these delays are
@i{supposed} to be insignificant, so we pretend they do not exist.
.end_defmetamethod

.defmetamethod streams :any-tyi-no-hang &optional eof
Like @code{:tyi-no-hang} but does not filter and discard input which is not numbers.
It is therefore possible to see blips in the input stream.
The distinction matters only for input from windows.
.end_defmetamethod

.defmetamethod streams :rubout-handler options function &rest args
This is supported by interactive bidirectional streams, such as windows
on the terminal, and is described in its own section below (see
(rubout-handler)).
.end_defmetamethod

.defmetamethod streams :beep &optional type
This is supported by interactive streams.  It attracts the attention of the
user by making an audible beep and/or flashing the screen.
@i{beep-type} is a keyword selecting among several different beeping noises;
see @code{beep} ((beep-fun)) for a list of them.
.end_defmetamethod

@subsection Cursor Positioning Stream Operations

.defmetamethod streams :read-cursorpos &optional (units @code{:pixel})
This operation is supported by all windows and some other streams.

It returns two values, the current @i{x} and @i{y} coordinates
of the cursor.  It takes one optional argument, which is a symbol indicating
in what units @i{x} and @i{y} should be; the symbols @code{:pixel}
and @code{:character} are understood.  @code{:pixel} means that the coordinates
are measured in display pixels (bits), while @code{:character} means that
the coordinates are measured in characters horizontally and lines vertically.

This operation and @code{:increment-cursorpos} are used by the @code{format} @code{~T}
request (see (format-t-operation)), which is why @code{~T} doesn't work on all
streams.  Any stream that supports this operation should support
@code{:increment-cursorpos} as well.

Some streams return a meaningful value for the horizontal position
but always return zero for the vertical position.  This is sufficient
for @code{~T} to work.
.end_defmetamethod

.defmetamethod streams :increment-cursorpos x-increment y-increment &optional (units @code{:pixel})
Moves the stream's cursor left or down according to the specified increments,
as if by outputting an appropriate number of space or return characters.
@i{x} and @i{y}
are like the values of @code{:read-cursorpos} and @i{units} is the same
as the @i{units} argument to @code{:read-cursorpos}.

Any stream which supports this operation should support
@code{:read-cursorpos} as well, but it need not support @code{:set-cursorpos}.

Moving the cursor with @code{:increment-cursorpos} differs from moving it
to the same place with @code{:set-cursorpos} in that this operation is
thought of as doing output and @code{:set-cursorpos} is not.  For example,
moving a window's cursor down with @code{:increment-cursorpos} when it is
near the bottom to begin with will wrap around, possibly doing a
@code{**MORE**}.  @code{:set-cursorpos}, by comparison, cannot move the cursor
``down'' if it is at the bottom of the window; it can move the cursor
explicitly to the top of the window, but then no @code{**MORE**} will
happen.

Some streams, such as those created by @code{with-output-to-string}, cannot
implement arbitrary cursor motion, but do implement this operation.
.end_defmetamethod

.defmetamethod streams :set-cursorpos x y &optional (units @code{:pixel})
This operation is supported by the same streams that support
@code{:read-cursorpos}.  It sets the position of the cursor.  @i{x} and @i{y}
are like the values of @code{:read-cursorpos} and @i{units} is the same
as the @i{units} argument to @code{:read-cursorpos}.
.end_defmetamethod

.defmetamethod streams :clear-screen
Erases the screen area on which this stream displays.
Non-window streams don't support this operation.
.end_defmetamethod

There are many other special-purpose stream operations for graphics.  They are
not documented here, but in the window-system documentation.  No claim that the
above operations are the most useful subset should be implied.

@subsection Operations for Efficient Pretty-Printing

@code{grindef} runs much more efficiently on streams that implement
the @code{:untyo-mark} and @code{:untyo} operations.

.defmetamethod streams :untyo-mark
This is used by the grinder (see (grindef-fun)) if the output stream supports it.
It takes no arguments.  The stream
should return some object that indicates how far output has gotten up to in
the stream.
.end_defmetamethod

.defmetamethod streams :untyo mark
This is used by the grinder (see (grindef-fun)) in conjunction with @code{:untyo-mark}.
It takes one argument, which is something returned by the @code{:untyo-mark}
operation of the stream.  The stream should back up output to the point
at which the object was returned.
.end_defmetamethod

@subsection Random Access File Operations

The following operations are implemented only by streams to random-access devices,
principally files.

.defmetamethod streams :read-pointer
Returns the current position within the file, in characters (bytes in fixnum
mode).  For text files on ASCII file servers, this is the number of Lisp
Machine characters, not ASCII characters.  The numbers are different because of
character-set translation.
.end_defmetamethod

.defmetamethod streams :set-pointer new-pointer
Sets the reading position within the file to @i{new-pointer} (bytes in
fixnum mode).  For text files on ASCII file servers, this does not do
anything reasonable unless @i{new-pointer} is 0, because of
character-set translation.  Some file systems support this operation
for input streams only.
.end_defmetamethod

.defmetamethod streams :rewind
This operation is obsolete.  It is the same as @code{:set-pointer} with
argument zero.
.end_defmetamethod

@subsection Buffered Stream Operations

.defmetamethod streams :clear-input
Discards any buffered input the stream may have.
It does nothing on streams for which it is not meaningful.
.end_defmetamethod

.defmetamethod streams :clear-output
Discards any buffered output the stream may have.
It does nothing on streams for which it is not meaningful.
.end_defmetamethod

.defmetamethod streams :force-output
This is for output streams to buffered asynchronous devices, such as the
Chaosnet.  @code{:force-output} causes any buffered output to be sent to the
device.  It does not wait for it to complete; use @code{:finish} for that.  If a
stream supports @code{:force-output}, then @code{:tyo}, @code{:string-out}, and
@code{:line-out} may have no visible effect until a @code{:force-output} is done.

This operation does nothing on streams for which it is not meaningful.
.end_defmetamethod

.defmetamethod streams :finish
This is for output streams to buffered asynchronous devices, such as the
Chaosnet.  @code{:finish} does a @code{:force-output}, then waits until the
currently pending I/O operation has been completed.

This operation does nothing on streams for which it is not meaningful.
.end_defmetamethod

The following operations are implemented only by buffered input streams.
They allow increased efficiency by making the stream's internal buffer
available to the user.

.defmetamethod streams :read-input-buffer &optional eof
Returns three values: a buffer array, the index in that array of the next input byte,
and the index in that array just past the last available input byte.  These values
are similar to the @i{string}, @i{start}, @i{end} arguments taken by many functions
and stream operations.  If the end of the file
has been reached and no input bytes are available,
this operation returns @code{nil} or signals an error,
based on the @i{eof} argument, just like the @code{:tyi} operation.
After reading as many bytes from the array
as you care to, you must use the @code{:advance-input-buffer} operation.
.end_defmetamethod

.defmetamethod streams :get-input-buffer &optional eof
This is an obsolete operation similar to @code{:read-input-buffer}.
The only difference is that the third value is the number of significant
elements in the buffer-array, rather than a final index.
If found in programs, it should be replaced with @code{:read-input-buffer}.
.end_defmetamethod

.defmetamethod streams :advance-input-buffer &optional new-pointer
If @i{new-pointer} is non-@code{nil}, it is the index in the buffer array of the next
byte to be read.  If @i{new-pointer} is @code{nil}, the entire buffer has been used up.
.end_defmetamethod

@subsection Obtaining Streams to Use

Windows are one important class of streams.  Each window can be used as
a stream.  Output is displayed on the window and input comes from the
keyboard.  A window is created using @code{make-instance} on a window
flavor.  Simple programs use windows implicitly through @code{*terminal-io*}
and the other standard stream variables.

Also important are @i{file streams}, which are produced by the function
@code{open} (see (open-fun)).  These read or write the contents of a file.

@i{Chaosnet streams} are made from Chaosnet connections.  Data output to
the stream goes out over the network; data coming in over the network is
available as input from the stream.  File streams that deal with
Chaosnet file servers are very similar to Chaosnet streams, but Chaosnet
streams can be used for many purposes other than file access.

@i{String streams} read or write the contents of a string.  They are
made by @code{with-output-to-string} or @code{with-input-from-string}
(see (with-input-from-string-fun)), or by @code{make-string-input-stream}
or @code{make-string-output-stream}, below.

@i{Editor buffer streams} read or write the contents of an editor
buffer.

The @i{null stream} may be passed to a program that asks for a stream
as an argument.  It returns immediate end of file if used for input
and throws away any output.  The null stream is the symbol
@code{si:null-stream}.  This is to say, you do not call that function to
get a stream or use the symbol's value as the stream; @i{the symbol
itself} is the object that is the stream.

The @i{cold-load stream} is able to do I/O to the keyboard and screen
without using the window system.  It is what is used by the error
handler, if you type @code{Terminal Call}, to handle a background error that the
window system cannot deal with.  It is called the cold-load stream
because it is what is used during system bootstrapping, before the
window system has been loaded.

@defun si:null-stream operation &rest arguments
This function is the null stream.  Like any stream, it supports various
operations.  Output operations are ignored and input operations report
end of file immediately, with no data.  Usage example:
@lisp
(let ((*standard-output* 'si:null-stream))
  (function-whose-output-I-dont-want))
@end lisp
@end defun

.defconst si:cold-load-stream
The one and only cold-load stream.  Usage example:
@lisp
(let ((*query-io* si:cold-load-stream))
  (yes-or-no-p "Clear all window system locks? "))
@end lisp
.end_defconst

@defmac with-open-stream (variable expression) body...
@i{body} is executed with @i{variable} bound to the value of
@i{expression}, which ought to be a stream.  On exit, whether normal
or by throwing, a @code{:close} message with argument @code{:abort} is sent
to the stream.

This is a generalization of @code{with-open-file}, which is equivalent
to using @code{with-open-stream} with a call to @code{open} as the
@i{expression}.
@end defmac

@defmac with-open-stream-case (variable expression) clauses...
Like @code{with-open-stream} as far as opening and closing the stream are
concerned, but instead of a simple body, it has clauses like those of a
@code{condition-case} that say what to do if @i{expression} does or does
not get an error.  See @code{with-open-file-case}, (with-open-file-case-fun).
@end defmac

@defun make-synonym-stream symbol-or-locative
@defunx make-syn-stream symbol-or-locative
Creates and returns a @i{synonym} stream (`syn' for
short).  Any operations sent to this stream are redirected to the stream
that is the value of the argument (if it is a symbol) or the contents of
it (if it is a locative).

A synonym stream is actually an uninterned symbol whose function
defnition is forwarded to the function cell of the argument or
to the contents of the argument as appropriate.  If the argument is a
symbol, the synonym stream's print-name is @i{symbol}@code{-syn-stream};
otherwise the name is just @code{syn-stream}.  Once a synonym stream is
made for a symbol, it is recorded, and the same one is handed out
again if there is another request for it.

The two names for this function are synonyms too.
@end defun

@defun make-concatenated-stream &rest streams
Returns an input stream which will read its input from the first of @i{streams} until
that reaches its eof, then read input from the second of @i{streams}, and so on until
the last of @i{streams} has reached end of file.
@end defun

@defun make-two-way-stream input-stream output-stream
Returns a bidirectional stream which passes input operations to
@i{input-stream} and passes output operations to @i{output-stream}.
This works by attempting to recognize all standard input operations;
anything not recognized is passed to @i{output-stream}.
@end defun

@defun make-echo-stream input-stream output-stream
Like @code{make-two-way-stream} except that each input character read via
@i{input-stream} is output to @i{output-stream} before it is returned to
the caller.
@end defun

@defun make-broadcast-stream &rest streams
Returns a stream that only works in the output direction.  Any output sent to
this stream is forwarded to all of the streams given.  The @code{:which-operations}
is the intersection of the @code{:which-operations} of all of the streams.  The value(s)
returned by a stream operation are the values returned by the last stream in @i{streams}.
@end defun

@defun zwei:interval-stream interval-or-from-bp &optional to-bp in-order-p hack-fonts
Returns a bidirectional stream that reads or writes all or part of an
editor buffer.  Note that editor buffer streams can also be obtained
from @code{open} by using a pathname whose host is @code{ED}, @code{ED-BUFFER} or
@code{ED-FILE} (see (editor-hosts)).

The first three arguments specify the buffer or portion to be read or
written.  Either the first argument is an @i{interval} (a buffer is one
kind of interval), and all the text of that interval is read or written,
or the first two arguments are two buffer pointers delimiting the range
to be read or written.  The third argument is used only in the latter
case; if non-@code{nil}, it tells the function to assume that the second
buffer pointer comes later in the buffer than the first and not to take
the time to verify the assumption.

The stream has only one pointer inside it, used for both input and
output.  As you do input, the pointer advances through the text.
When you do output, it is inserted in the buffer at the place where the
pointer has reached.  The pointer starts at the beginning of the
specified range.

@i{hack-fonts} tells what to do about fonts.  Its possible values are

@table @code
@item t
The character @code{} is recognized as special when you output to the
stream; sequences such as @code{} are interpreted as font-changes.  They
do not get inserted into the buffer; instead, they change the font in
which following output will be inserted.  On input, font change
sequences are included to indicate faithfully what was in the buffer.

@item :tyo
You are expected to read and write
16-bit characters containing font numbers.

@item nil
All output is inserted in font zero and font information is discarded in
the input you receive.  This is the best mode to use if you are
reading or otherwise parsing the contents of an editor buffer.
@end table
@end defun

@defmac sys:with-help-stream (stream options...) body...
Executes the @i{body} with the variable @i{stream} bound to a suitable
stream for printing a large help message.  If @code{*standard-output*} is a
window, then @i{stream} is also a window; a temporary window which fills
the screen.  Otherwise, @i{stream} is just the same as
@code{*standard-output*}.

The purpose of this is to spare the user the need to read a large help
printout in a small window, or have his data overwritten by it
permanently.  This is the mechanism used if you type the @code{Control-Help}
key while in the rubout handler.

@i{options} is a list of alternating keywords and values.
@table @code
@item :label
The value (which is evaluated) is used as the label of the temporary
window, if one is used.

@item :width
The value, which is not evaluated, is a symbol.  While @i{body} is
executed, this symbol is bound to the width, in characters, available
for the message.

@item :height
The value is a symbol, like the value after @code{:width}, and it is bound
to the height in lines of the area available for the help message.

@item :superior
The value, which is evaluated, specifies the original stream to use in
deciding where to print the help message.  The default is
@code{*standard-output*}.
@end table
@end defmac

@subsection String I/O Streams

The functions and special forms in this section allow you to create I/O
streams that input from or output to the contents of a string.

@defun make-string-input-stream string &optional (start @code{0}) end
Returns a stream which can be used to read the contents of @i{string}
(or the portion of it from index @i{start} to index @i{end}) as input.
End of file occurs on reading past position @i{end} or the end of
string.
@end defun

@defun make-string-output-stream &optional string
Returns an output stream which will accumulate all output in a string.
If @i{string} is non-@code{nil}, output is added to it with @code{string-nconc}
((string-nconc-fun)).  Otherwise, a new string is created and used to
hold the output.
@end defun

@defun get-output-stream-string string-output-stream
Returns the string of output accumulated so far by a stream which was
made by @code{make-string-output-stream}.  The accumulated output is
cleared out, so it will not be obtained again if
@code{get-output-stream-string} is called another time on the same stream.
@end defun

@defmac with-input-from-string (var string &key start end index) body...
The form
@lisp
(with-input-from-string (@i{var} @i{string})
    @i{body})
@end lisp
evaluates the forms in @i{body} with the variable @i{var} bound to a stream
which reads characters from the string which is the value of the form
@i{string}.  The value of the construct is the value of the last
form in its body.

If the @i{start} and @i{end} arguments are specified, they should be
forms.  They are evaluated at run time to produce the indices starting and
ending the portion of @i{string} to be read.

If the @i{index} argument is specified, it should be something @code{setf}
can store in.  When @i{body} is finished, the index in the string at
which reading stopped is stored there.  This is the index of the first
character not read.  If the entire string was read, it is the length of
the string.  The value of @i{index} is not updated until
@code{with-input-from-string} is exited, so you can't use its value within
the body to see how far the reading has gotten.  Example:
@lisp
(with-input-from-string
     (foo "This is a test." :start (+ 2 2) :end 8 :index bar)
  (readline))
@end lisp
returns @code{" is "} and sets @code{bar} to eight.

An older calling sequence which used positional rather than keyword
arguments is still accepted:
@lisp
(with-input-from-string (@i{var} @i{string} @i{index} @i{end})
    @i{body})
@end lisp

The functions @code{read-from-string} and @code{cli:read-from-string}
are convenient special cases of what @code{with-input-from-string} can do.
See (read-from-string-fun).
@end defmac

@defmac with-output-to-string (var [string [index]]) body...
This special form provides a variety of ways to send output to a string
through an I/O stream.
@lisp
(with-output-to-string (@i{var})
  @i{body})
@end lisp
evaluates the forms in @i{body} with @i{var} bound to a stream
which saves the characters output to it in a string.  The value of
the special form is the string.

@lisp
(with-output-to-string (@i{var} @i{string})
  @i{body})
@end lisp
appends its output to the string which is the value of the form @i{string}.
(This is like the @code{string-nconc} function; see (string-nconc-fun).)
The value returned is the value of the last form in the body, rather than the string.
Multiple values are not returned.  @i{string} must have a fill pointer.
If @i{string}
is too small to contain all the output, @code{adjust-array-size} is used to
make it bigger.

@lisp
(with-output-to-string (@i{var} @i{string} @i{index})
  @i{body})
@end lisp
is similar to the above except that @i{index} is a variable or @code{setf}-able
reference which contains the index of the next character to be stored into.
It must be initialized before the @code{with-output-to-string} and it is updated
upon normal exit.
The value of @i{index} is not updated until @code{with-output-to-string}
returns, so you can't use its value within the body to see how far
the writing has gotten.  The presence of @i{index} means that @i{string}
is not required to have a fill-pointer; if there is one, it is updated on exit.
@end defmac

Another way of doing output to a string is to use the @code{format} facility
(see (format-fun)).

@subsection Implementing Streams

There are two ways to implement a stream: using @code{defun} or using flavors.

Using flavors is best when you can take advantage of the predefined
stream mixins, including those which perform buffering, or when you wish
to define several similar kinds of streams that can inherit methods from
each other.

@code{defun} (or @code{defselect}, which is a minor variation of the
technique) may have an advantage if you are dividing operations into
broad groups and handling them by passing them off to one or more other
streams.  In this case, the automatic operation decoding provided by
flavors may get in the way.  A number of streams in the system are
implemented using @code{defun} or @code{defselect} for historical reasons.  It
isn't yet clear whether there is any reason not to convert most of them
to use flavors.

If you use @code{defun}, you can use the @i{stream default handler} to
implement some of the standard operations for you in a default manner.
If you use flavors, there are predefined mixins to do this for you.

A few streams are individual objects, one of a kind.  For example, there
is only one null stream, and no need for more, since two null streams
would behave identically.  But most streams are elements of a general
class.  For example, there can be many file streams for different files,
even though all behave the same way.  There can also be multiple streams
reading from different points in the same file.

If you implement a class of streams with @code{defun}, then the actual
streams must be closures of the function you define, made with
@code{closure}.

If you use flavors to implement the streams, having a class of similar
streams comes naturally: each instance of the flavor is a stream, and
the instance variables distinguish one stream of the class from another.

@subsection Implementing Streams with Flavors

To define a stream using flavors, define a flavor which incorporates the
appropriate predefined stream flavor, and then redefine those operations
which are peculiar to your own type of stream.

Flavors for defining unbuffered streams:

.defflavor si:stream
This flavor provides default definitions for a few standard operations such as
@code{:direction} and @code{:characters}.  Usually you do not have to mention
this explicitly; instead you use the higher level flavors below, which
are built on this one.
.end_defflavor

.defflavor si:input-stream
This flavor provides default definitions of all the mandatory input
operations except @code{:tyi} and @code{:untyi}, in terms of those two.  You
can make a simple non-character input stream by defining a flavor
incorporating this one and giving it methods for @code{:tyi} and
@code{:untyi}.
.end_defflavor

.defflavor si:output-stream
This flavor provides default definitions of all the mandatory output
operations except @code{:tyo}, in terms of @code{:tyo}.  All you need to do to
define a simple unbuffered non-character output stream is to define a
flavor incorporating this one and give it a method for the
@code{:tyo} operation.
.end_defflavor

.defflavor si:bidirectional-stream
This is a combination of @code{si:input-stream} and @code{si:output-stream}.
It defines @code{:direction} to return @code{:bidirectional}.  To define a
simple unbuffered non-character bidirectional stream, build on this
flavor and define @code{:tyi}, @code{:untyi} and @code{:tyo}.
.end_defflavor

The unbuffered streams implement operations such as @code{:string-out} and
@code{:string-in} by repeated use of @code{:tyo} or @code{:tyi}.

For greater efficiency, if the stream's data is available in blocks, it
is better to define a buffered stream.  You start with the predefined
buffered stream flavors, which define @code{:tyi} or @code{:tyo} themselves
and manage the buffers for you.  You must provide other operations that
the system uses to obtain the next input buffer or to write or discard
an output buffer.

.need 1800
Flavors for defining buffered streams:

.defflavor si:buffered-input-stream
This flavor is the basis for a non-character buffered input stream.
It defines @code{:tyi} as well as all the other standard input operations,
but you must define the two operations @code{:next-input-buffer} and
@code{:discard-input-buffer}, which the buffer management routines use.
.end_defflavor

.defmethod si:buffered-input-stream :next-input-buffer
In a buffered input stream, this operation is used as a subroutine of
the standard input operations, such as @code{:tyi}, to get the next
bufferful of input data.  It should return three values: an array
containing the data, a starting index in the array, and an ending index.
For example, in a Chaosnet stream, this operation would get the next
packet of input data and return pointers delimiting the actual data in
the packet.
.end_defmethod

.defmethod si:buffered-input-stream :discard-input-buffer buffer-array
In a buffered input stream, this operation is used as a subroutine of
the standard input operations such as @code{:tyi}.  It says that the buffer
management routines have used or thrown away all the input in a buffer,
and the buffer is no longer needed.

In a Chaosnet stream, this operation would return the packet buffer
to the pool of free packets.
.end_defmethod

.defflavor si:buffered-output-stream
This flavor is the basis for a non-character buffered output stream.  It
defines @code{:tyo} as well as all the other standard output operations, but
you must define the operations @code{:new-output-buffer},
@code{:send-output-buffer} and @code{:discard-output-buffer}, which the buffer
management routines use.
.end_defflavor

.defmethod si:buffered-output-stream :new-output-buffer
In a buffered output stream, this operation is used as a subroutine of
the
standard output operations, such as @code{:tyo}, to get an empty buffer for
storing more output data.  How the buffer is obtained depends on the
kind of stream, but in any case this operation should return an array
(the buffer), a starting index, and an ending index.  The two indices
delimit the part of the array that is to be used as a buffer.

For example, a Chaosnet stream would get a packet from the free pool
and return indices delimiting the part of the packet array which can
hold data bytes.
.end_defmethod

.defmethod si:buffered-output-stream :send-output-buffer buffer-array ending-index
In a buffered output stream, this operation is used as a subroutine of
the standard output operations, such as @code{:tyo}, to send the data in a
buffer that has been completely or partially filled.

@i{ending-index} is the first index in the buffer that has not actually
been stored.  This may not be the same as the ending index that was
returned by the @code{:new-output-buffer} operation that was used to
obtain this buffer; if a @code{:force-output} is being handled, @i{ending-index}
indicates how much of the buffer is currently full.

The method for this operation should process the buffer's data and, if
necessary, return the buffer to a free pool.
.end_defmethod

.defmethod si:buffered-output-stream :discard-output-buffer buffer-array
In a buffered output stream, this operation is used as a subroutine
of the standard output operations, such as @code{:clear-output}, to free an
output buffer and say that the data in it should be ignored.

It should simply return @i{buffer-array} to a free pool, if appropriate.
.end_defmethod

Some buffered output streams simply have one buffer array which they use
over and over.  For such streams, @code{:new-output-buffer} can simply
return that particular array each time; @code{:send-output-buffer} and
@code{:discard-output-buffer} do not have to do anything about returning
the buffer to a free pool.  In fact, @code{:discard-output-buffer} can
probably do nothing.

.defflavor si:buffered-stream
This is a combination of @code{si:buffered-input-stream} and
@code{si:buffered-output-stream}, used to make a buffered bidirectional
stream.  The input and output buffering are completely independent of
each other.  You must define all five of the low level operations:
@code{:new-output-buffer}, @code{:send-output-buffer} and
@code{:discard-output-buffer} for output, and @code{:next-input-buffer} and
@code{:discard-input-buffer} for input.
.end_defflavor

The data in most streams are characters.  Character streams should support
either @code{:line-in} or @code{:line-out} in addition to the other standard
operations.

.defflavor si:unbuffered-line-input-stream
This flavor is the basis for unbuffered character input streams.
You need only define @code{:tyi} and @code{:untyi}.
.end_defflavor

.defflavor si:line-output-stream-mixin
To make an unbuffered character output stream, mix this flavor into the
one you define, together with @code{si:output-stream}.  In addition, you
must define @code{:tyo}, as for unbuffered non-character streams.
.end_defflavor

.defflavor si:buffered-input-character-stream
This is used just like @code{si:buffered-input-stream}, but it also
provides the @code{:line-in} operation and makes @code{:characters} return
@code{t}.
.end_defflavor

.defflavor si:buffered-output-character-stream
This is used just like @code{si:buffered-output-stream}, but it also
provides the @code{:line-out} operation and makes @code{:characters} return
@code{t}.
.end_defflavor

.defflavor si:buffered-character-stream
This is used just like @code{si:buffered-stream}, but it also
provides the @code{:line-in} and @code{:line-out} operations and makes
@code{:characters} return @code{t}.
.end_defflavor

To make an unbuffered random-access stream, you need only define the
@code{:read-pointer} and @code{:set-pointer} operations as appropriate.
Since you provide the @code{:tyi} or @code{:tyo} handler yourself, the system
cannot help you.

In a buffered random-access stream, the random access operations must
interact with the buffer management.  The system provides for this.

.defflavor si:input-pointer-remembering-mixin
Incorporate this into a buffered input stream to
support random access.  This flavor defines the @code{:read-pointer} and
@code{:set-pointer} operations.  If you wish @code{:set-pointer} to work, you
must provide a definition for the @code{:set-buffer-pointer} operation.
You need not do so if you wish to support only @code{:read-pointer}.
.end_defflavor

.defmethod si:input-pointer-remembering-mixin :set-buffer-pointer new-pointer
You must define this operation if you use
@code{si:input-pointer-remembering-mixin} and want the @code{:set-pointer}
operation to work.

This operation should arrange for the next @code{:next-input-buffer}
operation to provide a bufferful of data that includes the specified
character or byte position somewhere inside it.

The value returned should be the file pointer corresponding to the first
character or byte of that next bufferful.
.end_defmethod

.defflavor si:output-pointer-remembering-mixin
Incorporate this into a buffered output stream to
support random access.  This mixin defines the @code{:read-pointer} and
@code{:set-pointer} operations.  If you wish @code{:set-pointer} to work, you
must provide definitions for the @code{:set-buffer-pointer} and
@code{:get-old-data} operations.  You need not do so if you wish to support
only @code{:read-pointer}.
.end_defflavor

.defmethod si:output-pointer-remembering-mixin :set-buffer-pointer new-pointer
This is the same as in @code{si:input-pointer-remembering-mixin}.
.end_defmethod

.defmethod si:output-pointer-remembering-mixin :get-old-data buffer-array lower-output-limit
The buffer management routines perform this operation when you do a
@code{:set-pointer} that is outside the range of pointers that fit in the
current output buffer.  They first send the old buffer, then do
@code{:set-buffer-pointer} as described above to say where in the file the
next output buffer should come, then do @code{:new-output-buffer} to get the
new buffer.  Then the @code{:get-old-data} operation is performed.

It should fill current buffer (@i{buffer-array}) with the @i{old}
contents of the file at the corresponding addresses, so that when the
buffer is eventually written, any bytes skipped over by random access
will retain their old values.

The instance variable @code{si:stream-output-lower-limit} is the starting
index in the buffer of the part that is supposed to be used for output.
@code{si:stream-output-limit} is the ending index.
The instance variable @code{si:output-pointer-base} is the file pointer
corresponding to the starting index in the buffer. 
.end_defmethod

.defflavor si:file-stream-mixin
Incorporate this mixin together with @code{si:stream} to make a @i{file probe stream},
which cannot do input or output but records the answers to an enquiry
about a file.  You should specify the init option @code{:pathname} when you
instantiate the flavor.

You must provide definitions for the @code{:plist} and @code{:truename}
operations; in terms of them, this mixin defines the operations
@code{:get}, @code{:creation-date}, and @code{:info}.
.end_defflavor

.defflavor si:input-file-stream-mixin
Incorporate this mixin into input streams that are used to read files.
You should specify the file's pathname with the @code{:pathname} init option
when you instantiate the flavor.

In addition to the services and requirements of
@code{si:file-stream-mixin}, this mixin takes care of mentioning the file
in the who-line.  It also includes
@code{si:input-pointer-remembering-mixin} so that the @code{:read-pointer}
operation, at least, will be available.
.end_defflavor

.defflavor si:output-file-stream-mixin
This is the analogue of @code{si:input-file-stream-mixin} for output
streams.
.end_defflavor

@subsection Implementing Streams Without Flavors

You do not need to use flavors to implement a stream.
Any object that can be used as a function, and decodes its first
argument appropriately as an operation name, can serve as a stream.
Although in practice using flavors is as easy as any other way,
it is educational to see how to define streams ``from scratch''.

We could begin to define a simple output stream, which accepts
characters and conses them onto a list, as follows:

@lisp
(defvar the-list nil)

(defun list-output-stream (op &optional arg1 &rest rest)
  (ecase op
    (:tyo
     (setq the-list (cons arg1 the-list)))
    (:which-operations '(:tyo))))
@end lisp

This is an output stream, and so it supports the @code{:tyo} operation.
All streams must support @code{:which-operations}.

The lambda-list for a stream defined with a @code{defun} must always have
one required parameter (@i{op}), one optional parameter (@i{arg1}), and
a rest parameter (@i{rest}).

This definition is not satisfactory, however.  It handles @code{:tyo}
properly, but it does not handle @code{:string-out}, @code{:direction},
@code{:send-if-handles}, and other standard operations.

The function @code{stream-default-handler} exists to spare us the trouble
of defining all those operations from scratch in simple streams like
this.  By adding one additional clause, we let the default handler take
care of all other operations, if it can.

@lisp
(defun list-output-stream (op &optional arg1 &rest rest)
    (selectq op
        (:tyo
         (setq the-list (cons arg1 the-list)))
        (:which-operations '(:tyo))
        (otherwise
          (stream-default-handler #'list-output-stream
				  op arg1 rest))))
@end lisp

If the operation is not one that the stream understands (e.g. @code{:string-out}),
it calls @code{stream-default-handler}.  Note how the rest argument is
passed to it.  This is why the argument list must look the way it does.
@code{stream-default-handler} can be thought of as a restricted analogue of
flavor inheritance.

If we want to have only one stream of this sort, the symbol
@code{list-output-stream} can be used as the stream.  The data output to it
will appear in the global value of @code{the-list}.  One more step is
required, though:
@lisp
(defprop list-output-stream t si:io-stream-p)
@end lisp
This tells certain functions including @code{read} to treat the symbol
@code{list-output-stream} as a stream rather than as an end of file option.

If we wish to be able to create any number of list output
streams, each accumulating its own list, we must use closures:

@lisp
(defvar the-stream nil
  "Inside a list output stream, holds the stream itself.")
(defvar the-list nil
  "Inside a list output stream,
holds the list of characters being accumulated.")

(defun list-output-stream (op &optional arg1 &rest rest)
    (selectq op
        (:tyo
	 (push arg1 the-list)))
	(:withdrawal (prog1 the-list (setq the-list nil)))
        (:which-operations '(:tyo :withdrawal))
        (otherwise
          (stream-default-handler the-stream
				  op arg1 rest))))

(defun make-list-output-stream ()
  (let ((the-stream the-list))
    (setq the-stream
	  (closure '(the-stream the-list)
                   'list-output-stream))))
@end lisp

We have added a new operation @code{:withdrawal} that can be used to find
out what data has been accumulated by a stream.  This is necessary
because we can no longer simply look at or set the global value of
@code{the-list}; that is not the same as the value closed into the stream.

In addition, we have a new variable @code{the-stream} which allows the
function @code{list-output-stream} to know which stream it is serving at
any time.  This variable is passed to @code{stream-default-handler} so that
when it simulates @code{:string-out} by means of @code{:tyo}, it can do the
@code{:tyo}'s to the same stream that the @code{:string-out} was done to.

The same stream could be defined with @code{defselect} instead of
@code{defun}.  It actually makes only a small difference.  The @code{defun}
for @code{list-output-stream} could be replaced with this code:

@lisp
(defselect (list-output-stream list-output-d-h)
  (:tyo (arg1)
    (push arg1 the-list))
  (:withdrawal ()
    (prog1 the-list (setq the-list nil))))

(defun list-output-d-h (op &optional arg1 &rest rest)
  (stream-default-handler the-stream op arg1 rest))
@end lisp

@code{defselect} takes care of decoding the operations, provides a
definition for @code{:which-operations}, and allows you to write a separate
lambda list for each operation.

By comparison, the same stream defined using flavors looks like this:

@lisp
(defflavor list-output-stream ((the-list nil))
	   (si:line-output-stream-mixin si:output-stream))

(defmethod (list-output-stream :tyo) (character)
  (push character the-list))

(defmethod (list-outut-stream :withdrawal) ()
  (prog1 the-list (setq the-list nil)))

(defun make-list-output-stream ()
  (make-instance 'list-output-stream))
@end lisp

.need 1800
Here is a simple input stream, which generates successive characters of a list.

@lisp
(defvar the-list)	;Put your input list here
(defvar the-stream)
(defvar untyied-char nil)

(defun list-input-stream (op &optional arg1 &rest rest)
  (selectq op
    (:tyi
     (cond ((not (null untyied-char))
	    (prog1 untyied-char (setq untyied-char nil)))
	   ((null the-list)
	    (and arg1 (error arg1)))
	   (t (pop the-list))))
    (:untyi
     (setq untyied-char arg1))
    (:which-operations '(:tyi :untyi))
    (otherwise
      (stream-default-handler the-stream
                              op arg1 rest))))

(defun make-list-input-stream (the-list)
  (let (the-stream untyied-char)
    (setq the-stream
	  (closure '(the-list the-stream untyied-char)
		   'list-input-stream))))
@end lisp
	The important things to note are that @code{:untyi} must be supported,
and that the stream must check for having reached the end of the information
and do the right thing with the argument to the @code{:tyi} operation.

@defun stream-default-handler stream op arg1 rest
Tries to handle the @i{op} operation on @i{stream}, given arguments of
@i{arg1} and the elements of @i{rest}.  The exact action taken for each
of the defined operations is explained with the documentation on that
operation, above.
@end defun

@section Formatted Output
@cindex formatted output

There are two ways of doing general formatted output.  One is the
function @code{format}.  The other is the @code{output} subsystem.
@code{format} uses a control string written in a special format
specifier language to control the output format.
@code{format:output} provides Lisp functions to do
output in particular formats.  

For simple tasks in which only the most basic format specifiers are
needed, @code{format} is easy to use and has the advantage of brevity.
For more complicated tasks, the format specifier language becomes
obscure and hard to read.  Then @code{format:output} becomes advantageous
because it works with ordinary Lisp control constructs.

@subsection The Format Function

@defun format destination control-string &rest args
Produces formatted output.
@code{format} outputs the characters of @i{control-string}, except
that a tilde (`@code{~}') introduces a directive.  The character after
the tilde, possibly preceded by prefix parameters and modifiers, specifies
what kind of formatting is desired.  Most directives use one or more
elements of @i{args} to create their output; the typical directive
puts the next element of @i{args} into the output, formatted in
some special way.

	The output is sent to @i{destination}.  If @i{destination} is
@code{nil}, a string is created which contains the output; this string is
returned as the value of the call to @code{format}.  In all other cases
@code{format} returns no interesting value (generally it returns @code{nil}).
If @i{destination} is a stream, the output is sent to it.  If
@i{destination} is @code{t}, the output is sent to @code{*standard-output*}.  If
@i{destination} is a string with an array-leader, such as would be
acceptable to @code{string-nconc} (see (string-nconc-fun)), the output is
added to the end of that string.
@end defun

	A directive consists of a tilde, optional prefix parameters
separated by commas, optional colon (`@code{:}') and atsign (`@code{@@}') modifiers,
and a single character indicating what kind of directive this is.
The alphabetic case of the character is ignored.
The prefix parameters are generally decimal numbers.
Examples of control strings:

@lisp
"~S"        ; 1This is an S directive with no parameters.*
"~3,4:@@s"   ; 1This is an S directive with two parameters, 3 and 4,*
            ; 1   and both the colon and atsign flags.*
"~,4S"      ; 1The first prefix parameter is omitted and takes*
            ; 1   on its default value, while the second is 4.*
@end lisp

@code{format} includes some extremely complicated and specialized
features.  It is not necessary to understand all or even most of its
features to use @code{format} efficiently.  The beginner should
skip over anything in the following documentation that is not
immediately useful or clear.  The more sophisticated features are
there for the convenience of programs with complicated formatting
requirements.

	Sometimes a prefix parameter is used to specify a character,
for instance the padding character in a right- or left-justifying
operation.  In this case a single quote ("@code{'}") followed by the
desired character may be used as a prefix parameter, so that you don't
have to know the decimal numeric values of characters in the character
set.  For example, you can use @code{"~5,'0d"} instead of @code{"~5,48d"} to
print a decimal number in five columns with leading zeros.

In place of a prefix parameter to a directive, you can put the letter
@code{V}, which takes an argument from @i{args} as a parameter to the
directive.  Normally this should be a number but it doesn't really have
to be.  This feature allows variable column-widths and the like.  Also,
you can use the character @code{#} in place of a parameter; it represents the
number of arguments remaining to be processed.

.need 1800
Here are some relatively simple examples to give you the general
flavor of how @code{format} is used.
@lisp
(format nil "foo") => "foo"
(setq x 5)
(format nil "The answer is ~D." x) => "The answer is 5."
(format nil "The answer is ~3D." x) => "The answer is   5."
@end lisp
@lisp
(setq y "elephant")
(format nil "Look at the ~A!" y) => "Look at the elephant!"
(format nil "The character ~:@@C is strange." #\meta-beta)
      => "The character Meta- (Greek-b) is strange."
@end lisp
@lisp
(setq n 3)
(format nil "~D item~:P found." n) => "3 items found."
(format nil "~R dog~:[s are~; is~] here." n (= n 1))
      => "three dogs are here."
(format nil "~R dog~:*~[~1; is~:;s are~] here." n)
      => "three dogs are here."
(format nil "Here ~[~1;is~:;are~] ~:*~R pupp~:@@P." n)
      => "Here are three puppies."
@end lisp

The directives will now be described.
@i{arg} will be used to refer to the next argument from @i{args}.
@table @code
@item ~A
@i{arg}, any Lisp object, is printed without escaping (as by @code{princ}).
@code{~:A} prints @code{()} if @i{arg} is @code{nil}; this is useful when printing
something that is always supposed to be a list.
@code{~@i{n}A} inserts spaces on the right, if necessary, to make the
column width at least @i{n}.  The @code{@@} modifier causes the spaces
to be inserted on the left rather than the right.
@code{~@i{mincol,colinc,minpad,padchar}A} is the full form of @code{~A},
which allows elaborate control of the padding.
The string is padded on the right with at least @i{minpad} copies
of @i{padchar}; padding characters are then inserted @i{colinc} characters
at a time until the total width is at least @i{mincol}.
The defaults are 0 for @i{mincol} and @i{minpad}, 1 for @i{colinc},
and space for @i{padchar}.

@item ~S
This is just like @code{~A}, but @i{arg} is printed @i{with} escaping
(as by @code{prin1} rather than @code{princ}).

@item ~D
@i{arg}, a number, is printed in base ten.
Unlike @code{print}, @code{~D} never puts a decimal point after the number.
@code{~@i{n}D} uses a column width of @i{n}; spaces are inserted on
the left if the number requires less than @i{n} columns for its digits
and sign.  If the number doesn't fit in @i{n} columns, additional columns
are used as needed. @code{~@i{n},@i{m}D} uses @i{m} as the pad character
instead of space.  If @i{arg} is not a number, it is printed
in @code{~A} format and decimal base.
The @code{@@} modifier causes the number's sign to be printed always; the default
is only to print it if the number is negative.
The @code{:} modifier causes commas to be printed between groups of three digits;
the third prefix parameter may be used to change the character used as the comma.
Thus the most general form of @code{~D} is
@code{~@i{mincol},@i{padchar},@i{commachar}D}.

@item ~O
This is just like @code{~D} but prints in octal instead of decimal.

@item ~X
This is just like @code{~D} but prints in hex instead of decimal.
Note that @code{~X} used to have a different meaning: print one or more spaces.
Uses of @code{~X} intended to have this meaning should be replaced with @code{~@@T}.

@item ~B
This is just like @code{~D} but prints in binary instead of decimal.

@item ~@i{w},@i{d},@i{k},@i{ovfl},@i{pad}F
@i{arg} is printed in nonexponential floating point format, as in
`10.5'.  (If the magnitude of @i{arg} is very large or very small, it is
printed in exponential notation.)  The parameters control the details of
the formatting.
@table @i
@item w
is the total field width desired.  If omitted, this is not constrained.
@item d
is the number of digits to print after the decimal point.
If @i{d} is omitted, it is chosen to do a good job based on @i{w}
(if specified) and the value of @i{arg}.
@item k
is a scale factor.  @i{arg} is multiplied by @code{(exp 10. @i{k})}
before it is printed.
@item ovfl
is a character to use for overflow.  If @i{arg}
is too big to print and fit the constraints of field width, etc.,
and @i{ovfl} is specified then the whole field is filled with @i{ovfl}.
If @i{ovfl} is not specified, @i{arg} is printed using extra width as needed.
@item pad
is a character to use for padding on the left, when the field
width is specified and not that many characters are really needed.
@end table

.nopara
If the @code{@@} modifier is used, a sign is printed even if @i{arg} is positive.

Rational numbers are converted to floats and then printed.
Anything else is printed with @code{~@i{w}D} format.

@item ~@i{w},@i{d},@i{e},@i{k},@i{ovfl},@i{pad},@i{expt}E
@i{arg} is printed in exponential notation, as in `.105e+2'.  The parameters control
the details of the formatting.
@table @i
@item w
is the total field width desired.  If omitted, this is not constrained.
@item d 1and* k
control the number of mantissa digits and their arrangement around the
decimal point.  @i{d}+1 digits are printed.  If @i{k} is positive, all
of them are significant digits, and the decimal point is printed after
the first @i{k} of them.  If @i{k} is zero or negative, the first
|@i{k}|+1 of the @i{d}+1 digits are leading zeros, and the decimal
point follows the first zero.  (This zero can be omitted if necessary
to fit the number in @i{w} characters.)  So the number of significant
figures is less than @i{d} if @i{k} is negative.

The exponent printed always compensates for any powers of ten
introduced according to @i{k}, so 10.5 might be printed as
@code{0.105e+2} or as @code{1050.0e-2}.

If @i{d} is omitted, the system chooses enough significant figures
to represent the float accurately.  If @i{k} is omitted, the default is one.
@item e
is the number of digits to use for the exponent.  If it is not specified,
however many digits are needed are used.
@item ovfl
is the overflow character.
If the exponent doesn't fit in @i{e} digits or the entire number
does not fit in @i{w} characters, then if @i{ovfl} is specified,
the field of @i{w} characters is filled with @i{ovfl}.  Otherwise
more characters are used as needed.
@item pad
is a character to use for padding on the left, when the field
width is specified and not that many characters are really needed.
@item expt
is a character to use to separate the mantissa from the exponent.
The default is @code{e} or @code{s} or @code{f}, whichever would be used
in printing the number normally.
@end table

.nopara
If the @code{@@} modifier is used, a sign is printed even if @i{arg} is positive.

@item ~@i{w},@i{d},@i{e},@i{k},@i{ovfl},@i{pad},@i{expt}G
Prints a floating point number @i{arg} in either @code{~F} or @code{~E}
format.  Fixed format is used if the absolute value of @i{arg} is less
than @code{(expt 10. @i{d})}, and exponential format otherwise.  (If @i{d}
is not specified, it defaults based on the value of @i{arg}.)  If fixed
format is used, @i{e}+2 blanks are printed at the end (where the
exponent and its separator and sign would go, in exponential format).
These count against the width @i{w} if that is specified.  Four blanks
are used if @i{e} is omitted.  The diminished width available, @i{d},
@i{ovfl} and @i{pad} are used as specified.  The scale factor used in
fixed format is always zero, not @i{k}.

If exponential format needs to be used, all the parameters are passed to
the @code{~E} directive to print the number.

Rational numbers are converted to floats and then printed.
Anything else is printed with @code{~@i{w}D} format.

@item ~$
@code{~@i{rdig},@i{ldig},@i{field},@i{padchar}$} prints
@i{arg}, a float, with exactly @i{rdig} digits after the decimal
point.  The default for @i{rdig} is 2, which is convenient for
printing amounts of money.  At least @i{ldig} digits are printed
preceding the decimal point; leading zeros are printed if there would
be fewer than @i{ldig}.  The default for @i{ldig} is 1.  The number is
right justified in a field @i{field}
columns long, padded out with @i{padchar}.  The colon modifier means
that the sign character is to be at the beginning of the field, before
the padding, rather than just to the left of the number.  The atsign modifier
says that the sign character should always be output.

If @i{arg} is not a number, or is unreasonably large, it is printed
in @code{~@i{field},,,@i{padchar}@@A} format; i.e. it is @code{princ}'ed
right-justified in the specified field width.

@item ~C
@code{(character @i{arg})} is put in the output.  @i{arg} is treated as a
keyboard character (see (%%kbd)), thus it may contain extra
control-bits.  These are printed first by representing them with
abbreviated prefixes: `@code{C-}' for @code{Control}, `@code{M-}' for @code{Meta}, `@code{H-}' for @code{Hyper},
and `@code{S-}' for @code{Super}.

With the colon flag (@code{~:C}), the names of the control bits are spelled out
(e.g. `@code{Control-Meta-F}') and non-printing characters
are represented by their names (e.g. `@code{Return}') rather than being output
as themselves.  The printing characters Space and Altmode are also represented
as their names, but all others are printed directly.

With both colon and atsign (@code{~:@@C}), the colon-only format is printed, and then
if the character requires the @code{Top} or @code{Greek} (@code{Front}) shift key(s) to type it,
this fact is mentioned (e.g. `@code{ (Top-U)}').  This is the format
used for telling the user about a key he is expected to type, for instance
in prompt messages.

For all three of these formats, if the character is a mouse character, it
is printed as @code{Mouse-}, the name of the button, `7-*', and the number
of clicks.

With just an atsign (@code{~@@C}), the character is printed in such a way that
the Lisp reader can understand it, using `@code{#\}' or `@code{#/}', depending
on the escaping character of @code{*readtable*} (see (escape-characters)).

@item ~%
Outputs a carriage return.  @code{~@i{n}%} outputs @i{n} carriage returns.
No argument is used.  Simply putting a carriage return in the control string
would work, but @code{~%} is usually used because it makes the control string
look nicer in the Lisp source program.

@item ~&
The @code{:fresh-line} operation is performed on the output stream.
Unless the stream knows that it is already at the front of a line,
this outputs a carriage return.  @code{~@i{n}&} does a @code{:fresh-line} operation
and then outputs @i{n}-1 carriage returns.

@item ~|
Outputs a page separator character (@code{#\page}).  @code{~@i{n}|} does this
@i{n} times.  With a @code{:} modifier, if the output stream supports the
@code{:clear-screen} operation this directive clears the screen, otherwise
it outputs page separator character(s) as if no @code{:} modifier were
present.  @code{|} is vertical bar, not capital I.

@item ~~
Outputs a tilde.  @code{~@i{n}~} outputs @i{n} tildes.

@item ~ <CR>
Tilde immediately followed by a carriage return ignores the carriage return
and any whitespace at the beginning of the next line.  With a @code{:}, the whitespace
is left in place.  With an @code{@@}, the carriage return is left in place.
This directive is typically used when a format control string is too long
to fit nicely into one line of the program.

@item ~*
@i{arg} is ignored.  @code{~@i{n}*} ignores the next @i{n} arguments.
@code{~:*} ``ignores backwards''; that is, it backs up in the list of
arguments so that the argument last processed will be processed again.
@code{~@i{n}:*} backs up @i{n} arguments.  @code{~@i{n}@@*} is absolute;
it moves to argument @i{n} (@i{n} = 0 specifies the first argument).

When within a @code{~@{} construct (see below), the ignoring (in either
direction) is relative to the list of arguments being processed by the
iteration.

@item ~P
If @i{arg} is not @code{1}, a lower-case `s' is printed.  (`@code{P}' is for `plural'.)
@code{~:P} does the same thing, after doing a @code{~:*}; that is, it prints
a lower-case s if the @i{last} argument was not 1.  @code{~@@P} prints `y'
if the argument is 1, or `ies' if it is not.  @code{~:@@P} does the same thing,
but backs up first.

@item ~T
Spaces over to a given column.  @code{~@i{n},@i{m}T} outputs
sufficient spaces to move the cursor to column @i{n}.  If the cursor
is already past column @i{n}, it outputs spaces to move it to
column @i{n}+@i{mk}, for the smallest integer value @i{k} possible.
@i{n} and @i{m} default to @code{1}.  Without the colon flag, @i{n} and
@i{m} are in units of characters; with it, they are in units of pixels.

Note: this operation works properly @i{only} on streams that support
the @code{:read-cursorpos} and @code{:increment-cursorpos} stream operations
(see (read-cursorpos)).  On other streams, any @code{~T} operation
simply outputs two spaces.  When @code{format} is creating
a string, @code{~T} works by assuming that the first character in the string
is at the left margin.

@code{~@@T} simply outputs a space.
@code{~@i{rel}T} simply outputs @i{rel} spaces.
@code{~@i{rel}, @i{period}T} outputs @i{rel} spaces and then
additional spaces until it reaches a column which is a multiple
of @i{period}.  If the output stream does not support @code{:read-cursorpos}
then it simply outputs @i{rel} spaces.

@item ~R
@code{~R} prints @i{arg} as a cardinal English number, e.g. four.
@code{~:R} prints @i{arg} as an ordinal number, e.g. fourth.
@code{~@@R} prints @i{arg} as a Roman numeral, e.g. @code{IV}.
@code{~:@@R} prints @i{arg} as an old Roman numeral, e.g. @code{IIII}.

@code{~@i{n}R} prints @i{arg} in radix @i{n}.
The flags and any remaining parameters are used as for the @code{~D} directive.
Indeed, @code{~D} is the same as @code{~10R}.  The full form here is therefore
@code{~@i{radix},@i{mincol},@i{padchar},@i{commachar}R}.

@item ~?
Uses up two arguments, and processes the first one as a format control string
using the second one's elements as arguments.  Thus,
@lisp
(format nil "~? ~D" "~O ~O" '(4 20.) 9)
@end lisp
returns @code{"4 24 9"}.

@code{~@@?} processes the following argument as a format control string,
using all the remaining arguments.  Any arguments it does not use
are left to be processed by the format directives following the @code{~@@?}
in the original control string.
@lisp
(format nil "~@@? ~D" "~O ~O" 4 20. 9)
@end lisp
likewise returns @code{"4 24 9"}.

@item ~@i{str}~
Performs the formatting specified by @i{str}, with indentation on
any new lines.  Each time a @code{Return} is printed during the processing of @i{str},
it is followed by indentation sufficient to line up underneath the place
where the cursor was at the beginning of @i{str}.  For example,
@lisp
(format t "Foo: ~8T~~A~" @i{string})
@end lisp
prints @i{string} with each line starting at column 8.  If @i{string}
is @code{(string-append "This is" #\return "the string")} then the output is
@lisp
Foo:    This is
	the string
@end lisp

@item ~(@i{str}~)
Performs output with case conversion.
The formatting specified by @i{str} is done, with all the letters in the
resulting output being converted to upper or lower case according to
the modifiers given to the @code{~(} command:
@table @code
@item ~(  1without modifiers*
Converts all the letters to lower case.
@item ~:(
Converts the first letter of each word to upper case and the rest to lower case.
@item ~@@(
Converts the first letter of the first word to upper case, and all other letters
to lower case.
@item ~:@@(
Converts all the letters to upper case.
@item ~1(
Converts the first letter of the first word to upper case
and does not change anything else.  If you arrange to generate
all output in lower case except for letters that should be
upper case regardless of context, you can use this directive
when the output appears at the beginning of a sentence.
@end table
@lisp
@exdent Example:
"~(FoO BaR~) ~:(FoO BaR~) ~@@(FoO BaR~) ~:@@(FoO BaR~)
~1(at the White Hart~)"
@exdent produces
foo bar Foo Bar Foo bar FOO BAR
At the White Hart
@end lisp

@item ~[@i{str0}~;@i{str1}~;@i{...}~;@i{strn}~]
This is a set of alternative control strings.  The alternatives
(called @i{clauses})
are separated by @code{~;} and the construct is terminated by @code{~]}.
For example,
@lisp
"~[Siamese ~;Manx ~;Persian ~;Tortoise-Shell ~
   ~;Tiger ~;Yu-Shiang ~]kitty"
@end lisp
@cindex kitty, yu-shiang
The @i{arg}th
alternative is selected; @code{0} selects the first.
If a prefix parameter is given (i.e. @code{~@i{n}[}),
then the parameter is used instead of an argument
(this is useful only if the parameter is `@code{#}').
If @i{arg} is out of range no alternative is selected.
After the selected alternative has been processed, the control string
continues after the @code{~]}.

@code{~[@i{str0}~;@i{str1}~;@i{...}~;@i{strn}~:;@i{default}~]} has a default case.
If the @i{last} @code{~;} used to separate clauses
is instead @code{~:;}, then the last clause is an ``else'' clause,
which is performed if no other clause is selected.
For example,
@lisp
"~[Siamese ~;Manx ~;Persian ~;Tiger ~
   ~;Yu-Shiang ~:;Bad ~] kitty"
@end lisp

@code{~[~@i{tag00},@i{tag01},@i{...};@i{str0}~@i{tag10},@i{tag11},@i{...};@i{str1...}~]}
allows the clauses to have explicit tags.  The parameters to each @code{~;}
are numeric tags for the clause which follows it.  That clause is processed
which has a tag matching the argument.  If @code{~@i{a1},@i{a2},@i{b1},@i{b2},@i{...}:;} (note the colon)
is used, then the following clause is tagged not by single values but
by ranges of values @i{a1} through @i{a2} (inclusive), @i{b1} through @i{b2}, etc.
@code{~:;} with no parameters may be used at the end to denote a default clause.
For example,
@lisp
"~[~'+,'-,'*,'//;operator ~'A,'Z,'a,'z:;letter ~
   ~'0,'9:;digit ~:;other ~]"
@end lisp

@code{~:[@i{false}~;@i{true}~]} selects the @i{false} control string
if @i{arg} is @code{nil}, and selects the @i{true} control string otherwise.

@code{~@@[@i{true}~]} tests the argument.  If it is not @code{nil},
then the argument is not used up, but is the next one to be processed,
and the one clause is processed.
If it is @code{nil}, then the argument is used up, and the clause is not processed.  For example,
@lisp
(setq *print-level* nil *print-length* 5)
(format nil
        "~@@[ *PRINT-LEVEL*=~D~]~@@[ *PRINT-LENGTH*=~D~]"
        prinlevel prinlength)
   =>  " *PRINT-LENGTH*=5"
@end lisp

The combination of @code{~[} and @code{#} is useful, for
example, for dealing with English conventions for printing lists:
@lisp
(setq foo "Items:~#[ none~; ~S~; ~S and ~
           ~S~:;~@@@{~#[~1; and~] ~S~^,~@}~].")
(format nil foo)
	=>  "Items: none."
(format nil foo 'foo)
	=>  "Items: FOO."
(format nil foo 'foo 'bar)
	=>  "Items: FOO and BAR."
(format nil foo 'foo 'bar 'baz)
	=>  "Items: FOO, BAR, and BAZ."
(format nil foo 'foo 'bar 'baz 'quux)
	=>  "Items: FOO, BAR, BAZ, and QUUX."
@end lisp

@item ~;
Separates clauses in @code{~[} and @code{~<} constructions.  It is undefined elsewhere.

@item ~]
Terminates a @code{~[}.  It is undefined elsewhere.

@item ~@{@i{str}~@}
This is an iteration construct.  The argument should be a list,
which is used as a set of arguments as if for a recursive call to @code{format}.
The string @i{str} is used repeatedly as the control string.
Each iteration can absorb as many elements of the list as it likes;
if @i{str} uses up two arguments by itself, then two elements of the
list get used up each time around the loop.
If before any iteration step the list is empty, then the iteration is terminated.
Also, if a prefix parameter @i{n} is given, then there can be at most @i{n}
repetitions of processing of @i{str}.  Here are some simple examples:
@lisp
(format nil "Here it is:~@{ ~S~@}." '(a b c))
     => "Here it is: A B C."
(format nil "Pairs of things:~@{ <~S,~S>~@}." '(a 1 b 2 c 3))
     => "Pairs of things: <A,1> <B,2> <C,3>."
@end lisp

Using @code{~^} as well, to terminate @i{str} if no arguments remain,
we can print a list with commas between the elements:
@lisp
(format nil "Elements: ~@{~S~^, ~@}." '(a b c))
     => "Elements: A, B, C."
@end lisp

@code{~:@{@i{str}~@}} is similar, but the argument should be a list of sublists.
At each repetition step one sublist is used as the set of arguments for
processing @i{str}; on the next repetition a new sublist is used, whether
or not all of the last sublist had been processed.  Example:
@lisp
(format nil "Pairs of things:~:@{ <~S,~S>~@}."
	    '((a 1) (b 2) (c 3)))
     => "Pairs of things: <A,1> <B,2> <C,3>."
@end lisp

@code{~@@@{@i{str}~@}} is similar to @code{~@{@i{str}~@}}, but instead of
using one argument which is a list, all the remaining arguments
are used as the list of arguments for the iteration.  Example:
@lisp
(format nil "Pairs of things:~@@@{ <~S,~S>~@}."
	    'a 1 'b 2 'c 3)
     => "Pairs of things: <A,1> <B,2> <C,3>."
@end lisp

@code{~:@@@{@i{str}~@}} combines the features of @code{~:@{@i{str}~@}} and @code{~@@@{@i{str}~@}}.
All the remaining arguments
are used, and each one must be a list.
On each iteration the next argument is used as a list of arguments to @i{str}.
Example:
@lisp
(format nil "Pairs of things:~:@@@{ <~S,~S>~@}."
	    '(a 1) '(b 2) '(c 3))
     => "Pairs of things: <A,1> <B,2> <C,3>."
@end lisp

Terminating the repetition construct with @code{~:@}} instead of @code{~@}}
forces @i{str} to be processed at least once even if the initial
list of arguments is null (however, it does not override an explicit
prefix parameter of zero).

If @i{str} is empty, then an argument is used as @i{str}.  It must be a string,
and precedes any arguments processed by the iteration.  As an example,
the following are equivalent:
@lisp
(apply #'format stream string args)
(format stream "~1@{~:@}" string args)
@end lisp
This uses @code{string} as a formatting string.  The @code{~1@{} says it must
be processed at most once, and the @code{~:@}} says it must be processed at least once.
Therefore it is processed exactly once, using @code{args} as the arguments.

As another example, the @code{format} function itself uses @code{format-error}
(a routine internal to the @code{format} package) to signal
error messages, which in turn uses @code{ferror}, which uses @code{format} recursively.  
Now @code{format-error} takes a string and arguments, just like @code{format},
but also prints some additional information: if the control string in @code{ctl-string}
actually is a string (it might be a list--see below), then it prints the string
and a little arrow showing where in the processing of the control string the
error occurred.  The variable @code{ctl-index} points one character after the place of
the error.
@lisp
(defun format-error (string &rest args)
  (if (stringp ctl-string)
      (ferror nil "~1@{~:@}~%~VT~%~3@@T/"~A/"~%"
	      string args (+ ctl-index 3) ctl-string)
    (ferror nil "~1@{~:@}" string args)))
@end lisp
This first processes the given string and arguments using @code{~1@{~:@}}, then
tabs a variable amount for printing the down-arrow, then prints the control
string between double-quotes.  The effect is something like this:
@lisp
(format t "The item is a ~[Foo~;Bar~;Loser~]." 'quux)
>>ERROR: The argument to the FORMAT "~[" command 
         must be a number
                   
   "The item is a ~[Foo~;Bar~;Loser~]."
...
@end lisp

@item ~@}
Terminates a @code{~@{}.  It is undefined elsewhere.

@item ~<
@code{~@i{mincol},@i{colinc},@i{minpad},@i{padchar}<@i{text}~>}
justifies @i{text} within a field at least @i{mincol} wide.  @i{text}
may be divided up into segments with @code{~;}--the
spacing is evenly divided between the text segments.
With no modifiers, the leftmost text segment is left justified in the
field, and the rightmost text segment right justified;  if there is
only one, as a special case, it is right justified.
The @code{:} modifier causes
spacing to be introduced before the first text segment;  the @code{@@}
modifier causes spacing to be added after the last.
@i{Minpad}, default @code{0}, is the minimum number of @i{padchar}
(default space) padding characters to be output between each segment.
If the total width needed to satisfy these constraints is greater
than @i{mincol}, then @i{mincol} is adjusted upwards in
@i{colinc} increments.  @i{colinc} defaults to @code{1}.  @i{mincol} defaults to @code{0}.
For example,
@lisp
(format nil "~10<foo~;bar~>")          =>  "foo    bar"
(format nil "~10:<foo~;bar~>")         =>  "  foo  bar"
(format nil "~10:@@<foo~;bar~>")        =>  "  foo bar "
(format nil "~10<foobar~>")            =>  "    foobar"
(format nil "~10:<foobar~>")           =>  "    foobar"
(format nil "~10@@<foobar~>")           =>  "foobar    "
(format nil "~10:@@<foobar~>")          =>  "  foobar  "
(format nil "$~10,,,'*<~3f~>" 2.5902)  =>  "$******2.59"
@end lisp

Note that @i{text} may include format directives.  The last example
illustrates how the @code{~<} directive can be combined with the @code{~f}
directive to provide more advanced control over the formatting of
numbers.

Here are some examples of the use of @code{~^} within a @code{~<} construct.
@code{~^} is explained in detail below, however the general idea is that
it eliminates the segment in which it appears and all following segments
if there are no more arguments.
@lisp
(format nil "~15<~S~;~^~S~;~^~S~>" 'foo)
	=>  "            FOO"
(format nil "~15<~S~;~^~S~;~^~S~>" 'foo 'bar)
	=>  "FOO         BAR"
(format nil "~15<~S~;~^~S~;~^~S~>" 'foo 'bar 'baz)
	=>  "FOO   BAR   BAZ"
@end lisp

The idea is that if a segment contains a @code{~^}, and @code{format} runs out
of arguments, it just stops there instead of getting an error, and it as
well as the rest of the segments are ignored.

If the first clause of a @code{~<} is terminated with @code{~:;} instead of @code{~;},
then it is used in a special way.  All of the clauses are processed
(subject to @code{~^}, of course), but the first one is omitted in
performing the spacing and padding.  When the padded result has been
determined, then if it will fit on the current line of output, it is output,
and the text for the first clause is discarded.  If, however, the padded text
will not fit on the current line, then the
text segment for the first clause is output before the padded text.  The first clause ought
to contain a carriage return (@code{~%}).  The first clause is
always processed, and so any arguments it refers to will be used;
the decision is whether to use the resulting segment of text, not whether to
process the first clause.  If the @code{~:;} has a prefix parameter @i{n}, then
the padded text must fit on the current line with @i{n} character positions to spare
to avoid outputting the first clause's text.
For example, the control string
@lisp
"~%;; ~@{~<~%;; ~1:; ~S~>~^,~@}.~%"
@end lisp
can be used to print a list of items separated by commas, without
breaking items over line boundaries, and beginning each line with
`@code{;; }'.  The prefix parameter @code{1} in @code{~1:;} accounts for the width of the
comma which will follow the justified item if it is not the last
element in the list, or the period if it is.  If @code{~:;} has a second
prefix parameter, then it is used as the width of the line,
thus overriding the natural line width of the output stream.  To make
the preceding example use a line width of 50, one would write
@lisp
"~%;; ~@{~<~%;; ~1,50:; ~S~>~^,~@}.~%"
@end lisp

If the second argument is not specified, then @code{format} sees whether
the stream handles the @code{:size-in-characters} message.  If it does,
then @code{format} sends that message and uses the first returned value as
the line length in characters.  If it doesn't, @code{format} uses @code{72.}
as the line length.

Rather than using this complicated syntax, one can often call the function
@code{format:print-list} (see (format:print-list-fun)).

@item ~>
Terminates a @code{~<}.  It is undefined elsewhere.

@item ~^
This is an escape construct.  If there are no more arguments remaining
to be processed, then the immediately enclosing @code{~@{} or @code{~<}
construct is terminated.  If there is no such enclosing construct, then
the entire formatting operation is terminated.
In the @code{~<} case, the formatting @i{is} performed, but no
more segments are processed before doing the justification.
The @code{~^} should appear only at the @i{beginning} of a @code{~<} clause,
because it aborts the entire clause.  @code{~^} may appear anywhere in a @code{~@{} construct.

If a prefix parameter is given, then termination occurs if the parameter
is zero.  (Hence @code{~^} is the same as @code{~#^}.)  If two parameters are
given, termination occurs if they are equal.  If three are given, termination
occurs if the second is between the other two in ascending order.  Of course,
this is useless if all the prefix parameters are constants; at least one
of them should be a @code{#} or a @code{V} parameter.

If @code{~^} is used within a @code{~:@{} construct, then it merely terminates
the current iteration step (because in the standard case it tests for
remaining arguments of the current step only); the next iteration step
commences immediately.  To terminate the entire iteration process,
use @code{~:^}.

@item ~Q
An escape to arbitrary user-supplied code.  @i{arg} is called as a function;
its arguments are the prefix parameters to @code{~Q}, if any.  @i{args} can be
passed to the function by using the @code{V} prefix parameter.  The function may
output to @code{*standard-output*} and may look at the variables @code{format:colon-flag}
and @code{format:atsign-flag}, which are @code{t} or @code{nil} to reflect the
@code{:} and @code{@@} modifiers on the @code{~Q}.  For example,
@lisp
(format t "~VQ" foo bar)
@end lisp
is a fancy way to say
@lisp
(funcall bar foo)
@end lisp
and discard the value.
Note the reversal of order; the @code{V} is processed before the @code{Q}.

@item ~\
This begins a directive whose name is longer than one character.
The name is terminated by another @code{\} character.
The following directives have names longer than one character
and make use of the @code{~\} mechanism as part of their operation.

.need 1500
@item ~\lozenged-string\
This is like @code{~A} except when output is to a window, in which case the
argument is printed in a small font inside a lozenge.

@item ~\lozenged-character\
This is like @code{~C} except when output is to a window, in which case the
argument is printed in a small font inside a lozenge if it has a character name,
even if it is a formatting character or graphic character.

@item ~\date\
This expects an argument that is a universal time (see
(universal-time)), and prints it as a date and time using
@code{time:print-universal-date}.
@lisp
@exdent Example:
(format t "It is now ~\date\" (get-universal-time))
@exdent prints
It is now Saturday the fourth of December, 1982; 4:00:32 am
@end lisp

@item ~\time\
This expects an argument that is a universal time (see
(universal-time)), and prints it in a brief format using
@code{time:print-universal-time}.
@lisp
@exdent Example:
(format t "It is now ~\time\" (get-universal-time))
@exdent prints
It is now 12/04/82 04:01:38
@end lisp

@item ~\datime\
This prints the current time and date.  It does not use an argument.
It is equivalent to using the @code{~\time\} directive with
@code{(time:get-universal-time)} as argument.

@item ~\time-interval\
This prints a time interval measured in seconds using the function
@code{time:print-interval-or-never}.
@lisp
@exdent Example:
(format t "It took ~\time-interval\." 3601.)
@exdent prints
It took 1 hour 1 second.
@end lisp
@end table

You can define your own directives.  How to do this is not documented
here; read the code.  Names of user-defined directives longer than one
character may be used if they are enclosed in backslashes (e.g.
@code{~4,3\GRAPH\}).

(Note: @code{format} also allows @i{control-string} to be a list.  If the
list is a list of one element, which is a string, the string is simply
printed.  This is for the use of the @code{format:outfmt} function below.
The old feature wherein a more complex interpretation of this list was
possible is now considered obsolete; use @code{format:output} if you like
using lists.)

A condition instance can also be used as the @i{control-string}.  Then
the @code{:report} operation is used to print the condition instance;
any other arguments are ignored.  This way, you can pass a condition
instance directly to any function that normally expects a format string
and arguments.

@defun format:print-list destination element-format list &optional separator start-line tilde-brace-options
This function provides a simpler interface for the specific purpose of
printing comma-separated lists with no list element split across two
lines; see the description of the @code{~:;} directive
((ultra-hairy-print-list)) to see the more complex way to do this
within @code{format}.  @i{destination} tells where to send the output; it
can be @code{t}, @code{nil}, a @code{string-nconc}'able string, or a stream, as
with @code{format}.  @i{element-format} is a @code{format} control-string
that tells how to print each element of @i{list}; it is used as the
body of a @code{~@{...~@}} construct.  @i{separator}, which defaults to
@code{", "} (comma, space) is a string which goes after each element
except the last.  @code{format} control commands are not recommended in
@i{separator}.  @i{start-line}, which defaults to three spaces, is a
@code{format} control-string that is used as a prefix at the beginning of
each line of output, except the first.  @code{format} control commands are
allowed in @i{separator}, but they should not swallow arguments from
@i{list}.  @i{tilde-brace-options} is a string inserted before the
opening `@code{@{}'; it defaults to the null string, but allows you to
insert colon and/or atsign.  The line-width of the stream is computed
the same way that the @code{~:;} command computes it;
it is not possible to override the natural line-width of the stream.
@end defun 


.page
@subsection The Output Subsystem

The formatting functions associated with the @code{format:output} subsystem allow
you to do formatted output using Lisp-style control structure.  Instead
of a directive in a @code{format} control string, there is one formatting
function for each kind of formatted output.

The calling conventions of most of the formatting functions are similar.
The first argument is usually the datum to be output.  The second
argument is usually the minimum number of columns to use.  The
remaining arguments are keyword arguments.

Most of the functions accept the keyword arguments @i{padchar}, @i{minpad}
and @i{tab-period}.  @i{padchar} is a character to use for padding.
@i{minpad} is a minimum number of padding characters to output after the data.
@i{tab-period} is the distance between allowable places
to stop padding.  To make the meaning of @i{tab-period} clearer, if
the value of @i{tab-period} is 5, if the minimum size of the field
is 10, and if the value of @i{minpad} is 2, then a datum that takes 9
characters is padded out to 15 characters.  The requirement to
use at least two characters of padding means it can't fit into 10
characters, and the @i{tab-period} of 5 means the next allowable
stopping place is at 10+5 characters.  The default values for
@i{minpad} and @i{tab-period}, if they are not specified, are
zero and one.  The default value for @i{padchar} is space.

The formatting functions always output to @code{*standard-output*} and do
not require an argument to specify the stream.  The macro
@code{format:output} allows you to specify the stream or a string, just
as @code{format} does, and also makes it convenient to concatenate
constant and variable output.

@defmac format:output stream string-or-form...
Makes it convenient to intersperse arbitrary output
operations with printing of constant strings.
@code{*standard-output*} is bound to @i{stream}, and each @i{string-or-form}
is processed in succession from left to right.  If it is a string, it is
printed; otherwise it is a form, which is evaluated for effect.  Presumably
the forms will send output to @code{*standard-output*}.

If @i{stream} is written as @code{nil}, then the output is put into a
string which is returned by @code{format:output}.  If @i{stream} is written
as @code{t}, then the output goes to the prevailing value of
@code{*standard-output*}.  Otherwise @i{stream} is a form, which must evaluate
to a stream.

Here is an example:
@lisp
(format:output t "FOO is " (prin1 foo) " now." (terpri))
@end lisp

Because @code{format:output} is a macro, what matters about @i{stream} is
not whether it @i{evaluates} to @code{t} or @code{nil}, but whether it
is actually written as @code{t} or @code{nil}.
@end defmac

@defmac format:outfmt string-or-form...
Some system functions ask for a @code{format} control string and
arguments, to be printed later.  If you wish to generate the output
using the formatted output functions, you can use @code{format:outfmt}, which
produces a control argument that will eventually make @code{format}
print the desired output (this is a list whose one element is a string
containing the output).  A call to @code{format:outfmt} can be used as
the second argument to @code{ferror}, for example:
@lisp
(ferror nil (format:outfmt "Foo is " (format:onum foo) 
			   " which is too large"))
@end lisp
@end defmac

@defun format:onum number &optional radix minwidth &key padchar minpad tab-period signed commas
Outputs @i{number} in base @i{radix}, padding to at least
@i{minwidth} columns and obeying the other padding options specified
as described above.

@i{radix} can be a number, or it can be @code{:roman}, @code{:english},
or @code{:ordinal}.  The default @i{radix} is @code{10.} (decimal).

If @i{signed} is non-@code{nil}, a @code{+} sign is printed if the number is
positive.  If @i{commas} is non-@code{nil}, a comma is printed every third
digit in the customary way.  These arguments are meaningful only with
numeric radices.
@end defun

@defun format:ofloat number &optional n-digits force-exponential-notation minwidth &key padchar minpad tab-period
Outputs @i{number} as a floating point number using
@i{n-digits} digits.  If @i{force-exponential-notation} is
non-@code{nil}, then an exponent is always used.  @i{minwidth} and
the padding options are interpreted as usual.
@end defun

@defun format:ostring string &optional minwidth &key padchar minpad tab-period right-justify
Outputs @i{string}, padding to at least
@i{minwidth} columns if @i{minwidth} is not @code{nil}, and obeying
the other padding options specified as described above.

Normally the data are left justified; any padding follows the data.
If @i{right-justify} is non-@code{nil}, the padding comes before
the data.  The amount of padding is not affected.

The argument need not really be a string.  Any Lisp object is allowed,
and it is output with @code{princ}.
@end defun

@defun format:oprint object &optional minwidth &key padchar minpad tab-period right-justify
Prints @i{object}, any Lisp object, padding to at
least @i{minwidth} columns if @i{minwidth} is not @code{nil}, and
obeying the padding options specified as described above.

Normally the data are left justified; any padding follows the data.
If @i{right-justify} is non-@code{nil}, the padding comes before
the data.  The amount of padding is not affected.

The printing of the object is done with @code{prin1}.
@end defun

@defun format:ochar character &optional style top-explain minwidth &key padchar minpad tab-period
Outputs @i{character} in one of three styles, selected
by the @i{style} argument.  @i{minwidth} and the padding options control
padding as usual.

@table @code
@item :read 1or* nil
The character is printed using @code{#\} or @code{#/} so that it could be read
back in.

@item :editor
Output is in the style of
`@code{Meta-Rubout}'.   Non-printing characters, and the two printing
characters Space and Altmode, are represented by their names.  Other printing
characters are printed directly.

@item :brief
Brief prefixes such as `@code{C-}' and
`@code{M-}' are used, rather than `@code{Control-}' or `@code{Meta-}'.  Also,
character names are used only if there are meta bits present.

@item :lozenged
The output is the same as that of the @code{:editor} style, but If the
character is not a graphic character or if it has meta bits, and the
stream supports the @code{:display-lozenged-string} operation, that
operation is used instead of @code{:string-out} to print the text.  On
windows this operation puts the character name inside a lozenge.

@item :sail
`7*', `7*', etc. are used to represent @code{Control} and @code{Meta},
and shorter names for characters are also used when possible.  See
(character-set).
@end table

@i{top-explain} is useful with the @code{:editor}, @code{:brief} and
@code{:sail}
styles.  It says that any character that has to be typed using the
Top or Greek keys should be followed by an explanation of how to type
it.  For example: `@code{ (Top-K)}' or `@code{ (Greek-a)}'.
@end defun

@defun format:tab mincol &key padchar minpad tab-period terpri unit
Outputs padding at least until column @i{mincol}.  It
is the only formatting function that bases its actions on the actual
cursor position rather than the width of what is being output.  The
padding options @i{padchar}, @i{minpad}, and @i{tab-period} are
obeyed.  Thus, at least the @i{minpad} number of padding characters
are output even if that goes past @i{mincol}, and once past
@i{mincol}, padding can only stop at a multiple of @i{tab-period}
characters past @i{mincol}.

In addition, if the @i{terpri} option is @code{t}, then if column
@i{mincol} is passed, @code{format:tab} starts a new line and indents it
to @i{mincol}.

The @i{unit} option specifies the units of horizontal position.
The default is to count in units of characters.  If @i{unit} is
specified as @code{:pixel}, then the computation (and the argument
@i{mincol} and the @i{minpad} and @i{tab-period} options) are
in units of pixels.
@end defun

@defmac format:pad (minwidth &key padchar minpad tab-period...) body...
@code{format:pad} is used for printing several items in a fixed amount of
horizontal space, padding between them to use up any excess space.
Each of the @i{body} forms prints one item.  The padding goes between
items.  The entire @code{format:pad} always uses at least @i{minwidth}
columns; any columns that the items don't need are distributed as
padding between the items.  If that isn't enough space, then more
space is allocated in units controlled by the @i{tab-period} option
until there is enough space.  If it's more than enough, the excess is
used as padding.

If the @i{minpad} option is specified, then at least that many pad
characters must go between each pair of items.

Padding goes only between items.  If you want to treat several actual
pieces of output as one item, put a @code{progn} around them.  If you
want padding before the first item or after the last, as well as
between the items, include a dummy item @code{nil} at the beginning or
the end.

If there is only one item, it is right justified.  One item followed by
@code{nil} is left-justified.  One item preceded and followed by @code{nil} is
centered.  Therefore, @code{format:pad} can be used to provide the usual
padding options for a function that does not provide them itself.
@end defmac

@defun format:plural number singular &optional plural
Outputs either the singular or the plural form of a
word depending on the value of @i{number}.  The singular is used if and only if
@i{number} is 1.  @i{singular} specifies the singular form of the word.
@code{string-pluralize} is used to compute the plural, unless
@i{plural} is explicitly specified.

It is often useful for @i{number} to be a value returned by
@code{format:onum}, which returns its argument.  For example:
@lisp
(format:plural (format:onum n-frobs) " frob")
@end lisp
prints "1 frob" or "2 frobs".
@end defun

@defmac format:breakline linel print-if-terpri print-always...
Goes to the next line if there is
not enough room for something to be output on the current line.
The @i{print-always} forms print the text which is supposed to fit
on the line.  @i{linel} is the column before which the text must end.
If it doesn't end before that column, then @code{format:breakline}
moves to the next line and executes the @i{print-if-terpri} form
before doing the @i{print-always} forms.

Constant strings are allowed as well as forms for @i{print-if-terpri}
and @i{print-always}.  A constant string is just printed.

To go to a new line unconditionally, simply call @code{terpri}.

Here is an example that prints the elements of a list,
separated by commas, breaking lines between elements when necessary.

@lisp
(defun pcl (list linel)
  (do ((l list (cdr l))) ((null l))
    (format:breakline linel "  "
      (princ (car l))
      (and (cdr l) (princ ", ")))))
@end lisp
@end defmac


.page



@section  Rubout Handling
@cindex rubout handler

The rubout handler is a feature of all interactive streams, that is, streams
that connect to terminals.  Its purpose is to allow the user to edit
minor mistakes made during type-in.  At the same time, it is not supposed to
get in the way; input is to be seen by Lisp as soon as a syntactically complete
form has been typed.  The definition of `syntactically complete form'
depends on the function that is reading from the stream; for @code{read}, it
is a Lisp expression.

Some interactive streams (`editing Lisp listeners') have a rubout handler
that allows input to be edited with the full power of the ZWEI editor.
(ZWEI is the general editor implementation on which Zmacs and ZMail are based.)
Most windows have a rubout handler that apes ZWEI, implementing about twenty
common ZWEI commands.  The cold load stream has
a simple rubout handler that allows just rubbing out of single
characters, and a few simple commands like clearing the screen and
erasing the entire input typed so far.  All three kinds of rubout
handler use the same protocol, which is described in this section.  We
also say a little about the most common of the three rubout handlers.
.br
[Eventually some version of ZWEI will be used for all streams
except the cold load stream]

The tricky thing about the rubout handler is the need for it to figure
out when you are all done.  The idea of a rubout handler is that you can
type in characters, and they are saved up in a buffer so that if you
change your mind, you can rub them out and type different characters.
However, at some point, the rubout handler has to decide that the time
has come to stop putting characters into the buffer and to let the
function parsing the input, such as @code{read}, return.  This is
called @i{activation}.  The right time to activate depends on the function
calling the rubout handler, and may be very complicated (if the function
is @code{read}, figuring out when one Lisp expression has been typed
requires knowledge of all the various printed representations, what all
currently-defined reader macros do, and so on).  Rubout handlers should
not have to know how to parse the characters in the buffer to
figure out what the caller is reading and when to activate; only the
caller should have to know this.  The rubout handler interface is
organized so that the calling function can do all the parsing, while the
rubout handler does all the handling of editing commands, and the two are kept
completely separate.

The basic way that the rubout handler works is as follows.  When
an input function that reads characters from a stream, such as @code{read} or @code{readline}
(but not @code{tyi}), is invoked with a stream which has @code{:rubout-handler}
in its @code{:which-operations} list, that function ``enters'' the rubout handler.
It then goes ahead @code{:tyi}'ing characters from the stream.  Because control
is inside the rubout handler, the stream echoes these characters so the user
can see what he is typing.  (Normally echoing is considered to be a higher-level
function outside of the province of streams, but when the higher-level function
tells the stream to enter the rubout handler it is also handing it the responsibility
for echoing.)  The rubout handler is also saving all these characters in a buffer,
for reasons disclosed in the following paragraph.
When the parsing function decides it has enough
input, it returns and control ``leaves'' the rubout handler.  This is the easy case.

If the user types a rubout, a @code{throw} is done out of all recursive levels
of @code{read}, reader macros, and so forth, back to the point where the rubout
handler was entered.  Also the rubout is echoed by erasing from the screen
the character which was rubbed out.  Now the @code{read} is tried over again,
re-reading all the characters that have not been rubbed out, not echoing
them this time.  When the saved characters have been exhausted, additional input is read
from the user in the usual fashion.

The effect of this is a complete separation of the functions of rubout
handling and parsing, while at the same time mingling the execution of
these two functions in such a way that input is always activated at
just the right time.  It does mean that the parsing function (in the
usual case, @code{read} and all macro-character definitions) must be
prepared to be thrown through at any time and should not have
non-trivial side-effects, since it may be called multiple times.

If an error occurs while inside the rubout handler, the error message is printed
and then additional characters are read.  When the user types a rubout,
it rubs out the error message as well as the character that caused the error.
The user can then proceed to type the corrected expression;
the input will be reparsed from the beginning in the usual fashion.

The rubout handler based on the ZWEI editor interprets control
characters in the usual ZWEI way: as editing commands, allowing you to
edit your buffered input.

The common rubout handler also recognizes a subset of the editor
commands, including @code{Rubout}, @code{Control-F} and @code{Meta-F} and others.
Typing @code{Help} while in the rubout handler displays a list of the
commands.  The kill and yank commands in the rubout handler use the same
kill ring as the editor, so you can kill an expression in the editor and
yank it back into a rubout handler with @code{Control-Y}, or kill an
expression in the rubout handler with @code{Control-K} or @code{Clear-input}
and yank it back in the editor.  The rubout processor also keeps a ring
buffer of most recent input strings (a separate ring for each stream),
and the commands @code{Control-C} and @code{Meta-C} retrieve from this ring
just as @code{Control-Y} and @code{Meta-Y} do from the kill ring.

When not inside the rubout handler, and when
typing at a program that uses control characters for its own purposes,
control characters are treated the same as ordinary characters.

Some programs such as the debugger allow the user to type either a
control character or an expression.  In such programs, you are really
not inside the rubout handler unless you have typed the beginning of an
expression.  When the input buffer is empty, a control character is
treated as a command for the program (such as, @code{Control-C} to continue
in the debugger); when there is text in the rubout handler buffer, the
same character is treated as a rubout handler command.  Another
consequence of this is that the message you get by typing @code{Help}
varies, being either the rubout handler's documentation or the
debugger's documentation. 

To write a parsing function that reads with rubout handling,
use @code{with-input-editing}.

@defmac with-input-editing (stream options) body...
Invokes the rubout handler on @i{stream}, if @i{stream} supports it,
and then executes @i{body}.  @i{body} is executed in any case,
within the rubout handler if possible.  @code{rubout-handler} is
non-@code{nil} while in @i{body} if rubout handling is in use.

@i{options} are used as the rubout handler options.
If already within an invocation of the rubout handler, @i{options} are
appended to the front of the options already in effect.  This happens if
a function which reads input using @code{with-input-editing}, such as
@code{read} or @code{readline}, is called from the body of another
@code{with-input-editing}.  The @code{:norecursive} option can be used
to cause the outer set of options to be completely ignored even
when not overridden by new ones.

@i{body}'s values are returned by @code{with-input-editing}.
@i{body} ought to read input from @i{stream} and return
a Lisp object that represents the input.  It should have
no nontrivial side effects aside from reading input from @i{stream}
structure, as it may be aborted at any time it reads input
and may be executed over and over.

If the @code{:full-rubout} option is specified, and the user types some input
and rubs it all out, the @code{with-input-editing} form returns immediately.
See @code{:full-rubout}, below.

If a preemptive command is input by the user, @code{with-input-editing}
returns immediately with the values being as specified below
under the @code{:command} and @code{:preemptable} options.  @i{body}
is aborted from its call to the @code{:tyi} operation, and the input
read so far remains in the rubout handler editing buffer to be read
later.
@end defmac

@defvar rubout-handler
If control is inside the rubout handler in this process,
the value is the stream on which rubout handling is being done.
Otherwise, the value is @code{nil}.
@end defvar

.defmetamethod streams :rubout-handler options function &rest args
Invokes the rubout handler on the stream, with @i{options} as
the options, and parses by applying @i{function} to @i{args}.
@code{with-input-editing} uses this operation.
.end_defmetamethod

.defmetamethod streams :read-bp
This operation may be used only from within the code for
parsing input from this stream inside the rubout handler.
It returns the index within the rubout handler buffer
which parsing has reached.
.end_defmetamethod

.defmetamethod streams :force-rescan
This operation may be used only from within the code for
parsing input from this stream inside the rubout handler.
It causes parsing to start again immediately from the beginning of the buffer.
.end_defmetamethod

.defmetamethod streams :rescanning-p
This operation may be used only from within the code for
parsing input from this stream inside the rubout handler.
It returns @code{t} if parsing is now being done on input
already in the buffer, @code{nil} if parsing has used up all
the buffered input and the next character parsed will come
from the keyboard.
.end_defmetamethod

Each option in the list of rubout handler options consists of a list
whose first element is a keyword and whose remaining elements are
the arguments of that keyword.  Note that this is not the same format as
the arguments to a typical function that takes keyword arguments; rather
this is an alist of options.  The standard options are:
@table @code
@item (:activation @i{fn} @i{args}...) 
Activate if certain characters are typed in.
When the user types an activation character, the rubout handler
moves the editing pointer immediately to the end of the buffer
and inserts the activation character.  This immediately causes
the parsing function to begin rescanning the input.

@i{fn} is used to test characters for being activators.  It is called
with an input character as the first arg (possibly a fixnum, possibly a
character object) and @i{args} as additional args.  If @i{fn} returns
non-@code{nil}, the character is an activation.  @i{fn} is not called
for blips.

After the parsing function has read the entire contents of the buffer,
it sees the activation character as a blip @code{(:activation @i{char}
@i{numeric-arg})} where @i{char} is the character that activated and
@i{numeric-arg} is the numeric arg that was pending for the next rubout
handler command.  Normally the parsing function will return at this point.
Then the activation character does not echo.  But if the parsing function
continues to read input, the activation character echoes and is inserted
in the buffer.

@item (:do-not-echo @i{chars}...) 
Poor man's activation characters.  Like @code{:activation} except that the
characters that should activate are listed explicitly, and the character
itself is returned to the parsing function rather than a blip.

@item (:full-rubout @i{val})
If the user rubs out all the characters he typed, then control is returned
from the rubout handler immediately.  Two values are returned; the first is
@code{nil} and the second is @i{val}.  (If the user doesn't rub out all the
characters, then the rubout handler propagates multiple values back
from the function that it calls, as usual.)  In the absence of this option, the rubout
handler would simply wait for more characters to be typed in and would ignore
any additional rubouts.

This is how the debugger knows to remove @code{Eval:} from the screen
if you type the beginning of a form and rub it all out.

@item (:pass-through @i{char1} @i{char2}...)
The characters @i{char1}, @i{char2}, etc. are not to be treated as special by
the rubout handler.  They are read as input by the parsing function.
If the parsing function does not return, they can be rubbed out.
This works only for characters with no modifier bits.

@item (:preemptable @i{value}) 
Makes all blips read as input by the rubout handler act as preemptive
commands.  If this option is specified, the rubout handler returns
immediately when it reads a blip.  It returns two values: the blip that
was read, and @i{value}.  The parsing function is not allowed to finish
parsing up to a delimiter; instead, any buffered input remains in the
buffer for the next time input is done.  In the mean time, the
preemptive command character can be processed by the command loop.

While this applies to all blips, the blips which it is probably intended
for are mouse blips.

@item (:command @i{fn} @i{args}...) 
Makes certain characters preemptive commands.  A preemptive command
returns instantly to the caller of the @code{:rubout-handler} operation,
regardless of the input in the buffer.  It returns two values: a list
@code{(:command @i{char} @i{numeric-arg})} and the keyword @code{:command}.
The parsing function is not allowed to finish parsing up to a delimiter;
instead, any buffered input remains in the buffer for the next time
input is done.  In the mean time, the preemptive command character can
be processed by the command loop.

The test for whether a character should be a preemptive command
is done using @i{fn} and @i{args} just as in @code{:activation}.

@item (:editing-command (@i{char} @i{doc})...) 
Defines editing commands to be executed by the parsing function itself.
This is how @code{qsend} implements the @code{Control-Meta-Y} command.
Each @i{char} is such a command, and @i{doc} says what it does.
(@i{doc} is printed out by the rubout handler's @code{Help} command.)
If any of these characters is read by the rubout handler,
it is returned immediately to the parsing function
regardless of where the editing pointer is in the buffer.
(Normal inserted text is not returned immediately when read unless the editing pointer
is at the end of the buffer.)

The parsing function should not regard these characters as part of the input.
There are two reasonable things that the parsing function can do
when it receives one of the editing command characters:
print some output, or force some input.

If it prints output, it should invoke the @code{:refresh-rubout-handler} operation
afterward before the next @code{:tyi}.  This causes the rubout handler to redisplay
so that the input being edited appears after the output that was done.

If the parsing function forces input, the input is read by the rubout
handler.  This can be used to modify the buffered input.  @code{qsend}'s
@code{Control-Meta-Y} command works by forcing the yanked text as input.
There is no way to act directly on the buffered input because different
implementations of the rubout handler store it in different ways.

@item (:prompt @i{function})
@itemx (:reprompt @i{function})
When it is time for the user to be prompted, @i{function} is called with
two arguments.  The first is a stream it may print on; the second is the
character which caused the need for prompting, e.g. @code{#\clear-input}
or @code{#\clear-screen}, or @code{nil} if the rubout handler was just entered.

The difference between @code{:prompt} and @code{:reprompt} is that the latter does
not call the prompt function when the rubout handler is first entered, but only
when the input is redisplayed (e.g. after a screen clear).  If both options
are specified then @code{:reprompt} overrides @code{:prompt} except when the rubout
handler is first entered.

@i{function} may also be a string.  Then it is simply printed.

If the rubout handler is exited with an empty buffer due to the
@code{:full-rubout} option, whatever prompt was printed is erased.

@item (:initial-input @i{string})
Pretends that the user typed @i{string}.  When the rubout handler is entered,
@i{string} is typed out.  The user can input more characters or rub out
characters from it.

@item (:initial-input-index @i{index})
Positions the editing pointer initially @i{index} characters into the
initial input string.  Used only in company with with
@code{:initial-input}.

@item (:no-input-save t) 
Don't save this batch of input in the input history when it is done.
For example, @code{yes-or-no-p} specifies this option.

@item (:norecursive t)
If this invocation of the rubout handler is within another one,
the options specified in the previous call should be completely
ignored during this one.  Normally, individual options specified
this time override the previous settings for the same options,
but any of the previous options not individually overridden
are still in effect.
@end table

Rubout handlers handle the condition @code{sys:parse-error} if it is
signaled by the parsing function.  The handling consists of printing the
error message, waiting for the user to rub out, erasing the error message,
and parsing the input again.  All errors signaled by a parsing function
that signify that the user's input was syntactically invalid should have
this condition name.  For example, the errors @code{read} signals have
condition name @code{sys:parse-error} since it is is a consequence of @code{sys:read-error}.

.defcondition sys:parse-error (@code{error})
The condition name for syntax errors in input being parsed.
.end_defcondition

The compiler handles @code{sys:parse-error} by proceeding with proceed-type
@code{:no-action}.  All signalers of @code{sys:parse-error} should offer
this proceed type, and respond to its use by continuing to parse,
ignoring the invalid input.

@defun sys:parse-ferror format-string &rest args
Signals a @code{sys:parse-error} error, using @i{format-string} and @i{args}
to print the error message.  The proceed-type @code{:no-action} is provided,
and if a handler uses it, this function returns @code{nil}.
@end defun

@c Need to add examples in the section on read, maybe print too.

@chapter Expression Input and Output
@cindex printed representation

	People cannot deal directly with Lisp objects, because the
objects live inside the machine.  In order to let us get at and talk
about Lisp objects, Lisp provides a representation of objects in the
form of printed text; this is called the @i{printed representation}.
This is what you have been seeing in the examples throughout this manual.
Functions such as @code{print}, @code{prin1},  and @code{princ} take a Lisp
object and send the characters of its printed representation to a
stream.  These functions (and the internal functions they call) are
known as the @i{printer}.  The @code{read} function takes characters from a stream,
interprets them as a printed representation of a Lisp object, builds a
corresponding object, and returns it.  It and related functions are known as the @i{reader}.
(Streams are explained in (streams).)

For the rest of the chapter, the phrase `printed representation' is
abbreviated as `p.r.'

@section  What the Printer Produces
@cindex printer
	The printed representation of an object depends on its type.  In
this section, we consider each type of object and explain how it is
printed.  There are several variables which you can set before calling
the printer to control how certain kinds of objects print.  They are
mentioned where relevant in this section and summarized in the following
section, but one of them is so important it must be described now.  This
is the @i{escaping} feature, controlled by the value of
@code{*print-escape*}.

@cindex escaping
Escaping means printing extra syntactical delimiters and @i{escape characters}
when necessary to avoid ambiguity.  Without escaping, a symbol is
printed by printing the contents of its name; therefore, the symbol
whose name consists of the three characters @code{1}, @code{.} and @code{5}
prints just like the floating point number @code{1.5}.  Escaping causes the symbol to
print as @code{|1.5|} to differentiate the two.  @code{|} is a kind of escape
character; see (escape-characters) for more information on escape
characters and what they mean syntactically.

Escaping also involves printing package prefixes for symbols, printing
double-quotes or suitable delimiters around the contents of strings,
pathnames, host names, editor buffers, condition objects, and many other
things.  For example, without escaping, the pathname @code{SYS: SYS; QCP1 LISP} prints as
exactly those characters.  The string with those contents prints indistinguishably.
With escaping, the pathname prints as 
@lisp
#FS:LOGICAL-PATHNAME "SYS: SYS; QCP1 LISP"
@end lisp
and the string prints as @code{"SYS: SYS; QCP1 LISP"}.

The non-escaped version is nicer looking in general, but if you give it
to @code{read} it won't do the right thing.  The escaped version is
carefully set up so that @code{read} will be able to read it in.  Printing
with escaping is useful in writing expressions into files.  Printing without
escaping is useful when constructing messages for the user.  However, when the purpose
of a message printed for the user is to @i{mention} an object,
the object should be printed with escaping:
@lisp
Your output is in the file SYS: SYS; QCP1 QFASL.
@exdent vs
Expected pathname properties missing from
 #FS:LOGICAL-PATHNAME "SYS: SYS; QCP1 LISP".
@end lisp

@cindex Common Lisp syntax
@cindex traditional syntax

The printed representation of an object also may depend on whether
Common Lisp syntax is in use.  Common Lisp syntax and traditional
Zetalisp syntax are incompatible in some aspects of their specifications.  In order to
print objects so that they can be read back in, the printer needs to
know which syntax rules the reader will use.  This decision is based on
the current readtable: the value of @code{*readtable*} at the time printing
is done.

Now we describe how each type of object is standardly printed.

@noindent
Integers:

For an integer (a fixnum or a bignum): the printed representation
consists of
@table @strong
@item *
a possible radix prefix
@item *
a minus sign, if the number is negative
@item *
the representation of the number's absolute value
@item *
a possible radix suffix.
@end table

The radix used for printing the number's absolute value
is found as the value of @code{*print-base*}.  This should be either
a positive fixnum or a symbol with an @code{si:princ-function} property.
In the former case, the number is simply printed in that radix.
In the latter case, the property is called as a function with two
arguments, minus the absolute value of the number, and the stream
to print on.  The property is responsible for all printing.
If the value of @code{*print-base*} is unsuitable, an error is signaled.

A radix prefix or suffix is used if either @code{*nopoint} is @code{nil}
and the radix used is ten, or if @code{*nopoint} is non-@code{nil} and
@code{*print-radix*} is non-@code{nil}.  For radix ten, a period is used
as the suffix.  For any other radix, a prefix of the form
7#@i{radix}r* is used.  A radix prefix or suffix is useful
to make sure that @code{read} parses the number using the same
radix used to print it, or for reminding the user how to interpret
the number.

@noindent
Ratios:

The printed representation of a ratio consists of
@table @strong
@item *
a possible radix prefix
@item *
a minus sign, if the number is negative
@item *
the numerator
@item *
a ratio delimiter
@item *
the denominator
@end table

If Common Lisp syntax is in use, the ratio delimiter is a slash (@code{/}).
If traditional syntax is in use, backslash (@code{\}) is used.  The
numerator and denominator are printed according to @code{*print-base*}.

The condition for printing a radix prefix is the same as for integers,
but a prefix 7#10r* is used to indicate radix ten, rather than a
period suffix.

@noindent
Floating Point Numbers:

@table @strong
@item *
a minus sign, if the number is negative
@item *
one or more decimal digits
@item *
a decimal point
@item *
one or more decimal digits
@item *
an exponent, if the number is small enough or large enough to require one.
The exponent, if present, consists of
@table @strong
@item *
a delimiter, the letter @code{e}, @code{s} or @code{f}
@item *
a minus sign, if the exponent is negative
.item
one to three decimal digits
@end table
@end table

The number of digits printed is just enough to represent all the
significant mantissa bits the number has.  Feeding the p.r. of a float
back to the reader is always supposed to produce an equal float.
Floats are always printed in decimal; they are not affected by escaping
or by @code{*print-base*}, and there are never any radix prefixes or
suffixes.

The Lisp Machine supports two floating point number formats.  At any
time, one of them is the default; this is controlled by the value of
@code{*read-default-float-format*}.  When a floating point number whose
format is @i{not} currently the default is printed, it must be printed
with an exponent so that the exponent delimiter can specify the format.
The exponent is introduced in this case by @code{f} or @code{s} to specify the
format.  To the reader, @code{f} specifies @code{single-float} format and
@code{s} specifies @code{short-float} format.

A floating point number of the default format is printed with no exponent
if this looks nice; namely, if this does not require too many extra zeros
to be printed before or after the decimal point.  Otherwise, an exponent
is printed and is delimited with @code{e}.  To the reader, @code{e} means
`use the default format'.

Normally the default float format is @code{single-float}.  Therefore, the
printer may print full size floats without exponents or with @code{e}
exponents, but short floats are always printed with exponents
introduced by @code{s} so as to tell the reader to make a short float.

@noindent
Complex Numbers:

The traditional printed representation of a complex number consists of
@table @strong
@item *
the real part
@item *
a plus sign, if the imaginary part is positive
@item *
the imaginary part
@item *
the letter @code{i}, printed in lower case
@end table

If the imaginary part is negative, the @code{+} is omitted since the initial @code{-}
of the imaginary part serves to separate it from the real part.

In Common Lisp syntax, a complex number is printed as 7#C(@i{realpart}
@i{imagpart})*; for example, @code{#C(5 3)}.  Common Lisp inexplicably
does not allow the more natural @code{5+3i} syntax.

The real and imaginary parts are printed individually according to the
specifications above.
@noindent
Symbols:

If escaping is off, the p.r. is simply the successive
characters of the print-name of the symbol. If escaping is on,
two changes must be made.  First, the symbol might require a package prefix
in order that @code{read} work correctly, assuming that the package into which
@code{read} will read the symbol is the one in which it is being printed.
See the chapter on packages ((package)) for an explanation
of the package name prefix.  If the symbol is one which would have
another symbol substituted for it if printed normally and read back,
such as the symbol @code{member} printed using Common Lisp syntax
which would be replaced with @code{cli:member} if read in thus,
it is printed with a package prefix (e.g., @code{global:member})
to make it read in properly.  See (reader-symbol-substitutions)
for more information on this.

If the symbol is uninterned, 7#:* is printed instead of a package
prefix, provided @code{*print-gensym*} is non-@code{nil}.

Secondly, if the p.r. would not read in as a symbol at all (that is, if
the print-name looks like a number, or contains special characters),
then escape characters are added so as to suppress the other reading.
Two kinds of escape characters may be used: single-character escapes
and multiple escapes.  A single-character escape can be used in front of
a character to overrule its special syntactic meaning.  Multiple escapes
are used in pairs, and all the characters between the pair have their
special syntactic meanings suppressed @i{except single-character escapes}.
If the symbol name contains escape characters, they are escaped with
single-character escapes.  If the symbol name contains anything else
problematical, a pair of multiple escape characters are printed around it.

The single-character and multiple escape characters are determined by
the current readtable.  Standardly the multiple escape character is
vertical bar (@code{|}), in both traditional and Common Lisp syntax.  The
single-character escape character is slash (@code{/}) in traditional syntax
and backslash (@code{\}) in Common Lisp syntax.

@lisp
FOO        ;1typical symbol, name composed of upper case letters*
A/|B       ;1symbol with a vertical bar in its name*
|Symbol with lower case and spaces in its name|
|One containing slash (//) and vertical bar (/|) also|
@end lisp

Except when multiple escape characters are printed, any upper case
letters in the symbol's name may be printed as lower case, according to
the value of the variable @code{*print-case*}.  This is true whether escaping
is enabled or not.  See the next section for
details.

@noindent
Conses:

The p.r. for conses tends to favor @i{lists}.  It starts with an
open-parenthesis.  Then the car of the cons is printed and the
cdr of the cons is examined.  If it is @code{nil}, a close-parenthesis
is printed.  If it is anything else but a cons, space dot space followed
by that object is printed.  If it is a cons, we print a space and start
all over (from the point @i{after} we printed the open-parenthesis)
using this new cons.  Thus, a list is printed as an open-parenthesis,
the p.r.'s of its elements separated by spaces, and a close-parenthesis.
This is how the printer produces representations such as @code{(a b (foo bar)
c)} in preference to synonymous forms such as @code{(a . (b . ((foo . (bar
. nil)) . (c . nil))))}.

The following additional feature is provided for the p.r. of conses: as
a list is printed, @code{print} maintains the length of the list so far and
the depth of recursion of printing lists.  If the length exceeds the
value of the variable @code{*print-length*}, @code{print} terminates the
printed representation of the list with an ellipsis (three periods) and
a close-parenthesis.  If the depth of recursion exceeds the value of the
variable @code{*print-level*}, then the character 7#* is printed instead
of the list.  These two features allow a kind of abbreviated printing
that is more concise and suppresses detail.  Of course, neither the
ellipsis nor the 7#* can be interpreted by @code{read}, since the
relevant information is lost.  In Common Lisp read syntax, either one
causes @code{read} to signal an error.

If @code{*print-pretty*} is non-@code{nil}, conses are given to the grinder to print.

If @code{*print-circle*} is non-@code{nil}, a check is made for cars or cdrs
that are circular or shared structure, and any object (except for an
interned symbol) already mentioned is replaced by a 7#@i{n}#* label
reference.  See (circular-structure-reading) for more information on them.

@lisp
(let ((*print-circle* t))
  (prin1 (circular-list 3 4)))
@exdent prints
#1= (3 4 . #1#)
@end lisp

@noindent
Character Objects:

When escaping is off, a character object is printed by printing the
character itself, with no delimiters.

In Common Lisp syntax, a character object is printed with escaping as
7#@i{font}\@i{character-or-name}*.  @i{font} is the character's font
number, in decimal, or is omitted if zero.  @i{character-or-name} begins
with prefixes for any modifier bits (control, meta, etc.) present in
the character, each followed by a hyphen.  Then comes a representation
of the character sans font and modifier bits.  If this reduced character
is a graphic character, it represents itself.  Otherwise, it certainly
has a standard name; the name is used.  If a graphic characters has special
syntactic properties (such as whitespace, paretheses, and macro characters)
and modifier bit prefixes have been printed then
a single-character escape character is printed before it.

In traditional syntax, the p.r. is the similar except that the 7\* is
replaced by 7/*.

@noindent
Strings:

If escaping is off, the p.r. is simply the successive characters of the
string.  If escaping is on, double-quote characters (`@code{"}') are printed
surrounding the contents, and any single-character escape characters or
double-quotes inside the contents are preceded by single-character
escapes.  If the string contains a Return character followed by an open
parenthesis, a single-character escape is printed before the open
parenthesis.  Examples:
@lisp
"Foo"
"/"Foo/", he said."
@end lisp

@noindent
Named Structures:

If the named structure type symbol has a @code{named-structure-invoke}
property, the property is called as a function with four arguments: the
symbol @code{:print-self}, the named structure itself, the stream to print
on, and the current @i{depth} of list structure (see below).  It is this
function's responsibility to output a suitable printed representation to
the stream.  This allows a user to define his own p.r. for his named
structures; more information can be found in the named structure section
(see (named-structure)).  Typically the printed representation used
starts with either 7#*@code{<} if it is not supposed to be readable or 7#*
(see (horseshoe-read)) if it is supposed to be readable.

If the named structure symbol does not have a @code{named-structure-invoke}
property, the printed-representation depends on whether escaping is in
use.  If it is, 7#s* syntax is used:
@lisp
#s(@i{named-structure-symbol}
   @i{component} @i{value}
   @i{component} @i{value}
   ...)
@end lisp
Named structure component values are checked for circular or shared structure
if @code{*print-circle*} is non-@code{nil}.

If escaping is off, the p.r. is like that used for miscellaneous data-types: 7#*@code{<},
the named structure symbol, the numerical address of the structure, and @code{>}.

@noindent
Other Arrays:

If @code{*print-array*} is non-@code{nil}, the array is printed in a way which
shows the elements of the array.  Bit vectors use 7#** syntax, other
vectors use 7#(...)* syntax, and arrays of rank other than one use
7#@i{n}a(...)* syntax.  The printed representation does not indicate
the array type (that is, what elements it is allowed to contain).  If
the printed representation is read in, a general array (array type
@code{art-q}) is always created.  See (array-syntax) for more information
on these syntaxes.  Examples:
@lisp
(vector 1 2 5) => #(1 2 5)
(make-array '(2 4) :initial-element t) => #2a((t t t t) (t t t t))
@end lisp

Vector and array groupings count like list groupings in maintaining the
depth value that is compared with @code{*print-level*} for cutting off
things that get too deep.  More than @code{*print-length*} elements in a
given vector or array grouping level are cut off with an ellipsis just
like a list that is so long.

Array elements are checked for circular or shared structure if
@code{*print-circle*} is non-@code{nil}.

If @code{*print-array*} is @code{nil}, the p.r. starts with 7#*@code{<}.  Then the
@code{art-} symbol for the array type is printed.  Next the dimensions of
the array are printed, separated by hyphens.  This is followed by a
space, the machine address of the array, and a @code{>}, as in
@code{#<ART-COMPLEX-FLOAT-3-6 34030451>}.

@noindent
Instances and Entities:

If the object says it can handle the
@code{:print-self} message, that message is sent with three arguments: the
stream to print to, the current @i{depth} of list structure (see below),
and whether escaping is enabled.  The object should print a
suitable p.r. on the stream.  See (flavor) for documentation on
instances.  Most such objects print like ``any other data type'' below,
except with additional information such as a name.  Some objects print
only their name when escaping is not in effect (when
@code{princ}'ed).  Some objects, including pathnames, use a printed
representation that begins with 7#*, ends with @code{}, and contains
sufficient information for the reader to reconstruct an
equivalent object.  See (horseshoe-read).  If the object cannot handle
@code{:print-self}, it is printed like ``any other data type''.

@noindent
Any Other Data Type:

The printed representation starts with 7#*@code{<} and ends with @code{>}.  This
sort of printed representation cannot be read back in.  The 7#*@code{<} is
followed by the @code{dtp-} symbol for this datatype, a space, and the
octal machine address of the object.  The object's name, if one can be
determined, often appears before the address.  If this style of printed
representation is being used for a named structure or instance, other
interesting information may appear as well.  Finally a greater-than sign
(7>*) is printed in octal.  Examples:
@lisp
#'equal => #<DTP-U-ENTRY EQUAL 410>
(value-cell-location nil) => #<DTP-LOCATIVE 1>
@end lisp

Including the machine address in the p.r. makes it possible to tell two objects of this
kind apart without explicitly calling @code{eq} on them.  This can be very useful during
debugging.  It is important to know that if garbage collection is turned on, objects
will occasionally be moved, and therefore their octal machine addresses will be
changed.  It is best to shut off garbage collection temporarily when depending on
these numbers.

Printed representations that start with `7#*@code{<}' can never be read
back.
This can be a problem if, for example, you are printing a structure into a
file with the intent of reading it in later.  The following feature allows
you to make sure that what you are printing may indeed be read with the reader.

@defvar si:print-readably
When @code{si:print-readably} is bound to @code{t}, the printer signals an error
if there is an attempt to print an object that cannot be interpreted by @code{read}.
When the printer sends a @code{:print-self} or a @code{:print} message, it assumes
that this error checking is done for it.  Thus it is possible for these messages
@i{not} to signal an error, if they see fit.
@end defvar

@defmac si:printing-random-object (object stream . keywords) &body body
The vast majority of objects that define @code{:print-self} messages have much
in common.  This macro is provided for convenience so that users do not
have to write out that repetitious code.  It is also the preferred interface
to @code{si:print-readably}.  With no keywords, @code{si:printing-random-object}
checks the value of @code{si:print-readably} and signals an error if it is not
@code{nil}.  It then prints a number sign and a less-than sign, evaluates the
forms in @i{body}, then prints a space, the octal machine address
of the object and
a greater-than sign.  A typical use of this macro might look like:
@lisp
(si:printing-random-object (ship stream :typep)
  (tyo #\space stream)
  (prin1 (ship-name ship) stream))
@end lisp
This might print @code{#<ship "ralph" 23655126>}.
@end defmac

The following keywords may be used to modify the behaviour of @code{si:printing-random-object}:

@table @code
@item :no-pointer
This suppresses printing of the octal address of the object.

@item :type
This prints the result of @code{(type-of @i{object})} after the less-than sign.
In the example above, this option could have been used instead of
the first two forms in the body.
@end table

.defcondition sys:print-not-readable (@code{error})
This condition is signaled by @code{si:print-readably} when the object
cannot be printed readably.

The condition instance supports the operation @code{:object}, which
returns the object that was being printed.
.end_defcondition

If you want to control the printed representation of some object,
usually the right way to do it is to make the object an array that is a
named structure (see (named-structure)), or an instance of a flavor
(see (flavor)).  However, occasionally it is desirable to get control
over all printing of objects, in order to change, in some way, how they
are printed.  If you need to do this, the best way to proceed is to
customize the behavior of @code{si:print-object} (see
(si:print-object-fun)), which is the main internal function of the
printer.  All of the printing functions, such as @code{print} and
@code{princ}, as well as @code{format}, go through this function.  The way to
customize it is by using the ``advice'' facility (see (advise)).

@section  Options that Control Printing

Several special variables are defined by the system for the user to set or bind
before calling @code{print} or other printing functions.  Their values, as set
up by the user, control how various kinds of objects are printed.

@defvar *print-escape*
Escaping is done if this variable is non-@code{nil}.  See the previous section
for a description of the many effects of escaping.  Most of the output functions
bind this variable to @code{t} or to @code{nil}, so you rarely use the variable itself.
@end defvar

@defvar *print-base*
@defvarx base
The radix to use for printing integers and ratios.  The value must be either an
integer from 2 to 36 or a symbol with a valid @code{si:princ-function}
property, such as @code{:roman} or @code{:english}.

The default value of @code{*print-base*} is ten.  In input from files, the
@code{Base} attribute (see (file-attribute-list)) controls the value of
@code{*print-base*} (and of @code{*read-base*}).

The synonym @code{base} is from Maclisp.
@end defvar

@defvar *print-radix*
If non-@code{nil}, integers and ratios are output with a prefix or suffix
indicating the radix used to print them.  For integers and radix ten, a
period is printed as a suffix.  Otherwise, a prefix such as 7#x* or
7#3r* is printed.  The default value of @code{*print-radix*} is @code{nil}.
@end defvar

@defvar *nopoint
If the value of @code{*nopoint} is @code{nil}, a trailing decimal point
is printed when a fixnum is printed out in base 10.  This allows
the numbers to be read back in correctly even if @code{*read-base*}
is not 10 at the time of reading.  The default value of @code{*nopoint}
is @code{t}.  @code{*nopoint} has no effect if @code{*print-radix*} is non-@code{nil}.

@code{*nopoint} exists for Maclisp compatibility.  But to get truly
compatible behavior, you must set @code{*nopoint} to @code{nil}
(and, by default, @code{base} and @code{ibase} to eight).
@end defvar

@defvar *print-circle*
If non-@code{nil}, the printer recognizes circular and shared structure and
prints it using 7#@i{n}=* labels so that it has a finite printed
representation (which can be read back in).  The default is @code{nil},
since @code{t} makes printing slower.  See (circular-structure-reading)
for information on the 7#@i{n}=* construct.
@end defvar

@defvar *print-pretty*
If non-@code{nil}, the printer actually calls @code{grind-top-level} so that it prints extra
whitespace for the sake of formatting.  The default is @code{nil}.
@end defvar

@defvar *print-gensym*
If non-@code{nil}, uninterned symbols are printed with the prefix 7#:* to mark them as such
(but only when @code{*print-escape*} is non-@code{nil}).  The prefix causes the
reader to construct a similar uninterned symbol when the expression is read.
If @code{nil}, no prefix is used for uninterned symbols.  The default is @code{t}.
@end defvar

@defvar *print-array*
If non-@code{nil}, non-string arrays are printed using the 7#*@code{(...)},
7#** or 7#@i{n}a*@code{(...)} syntax so that you can see their contents
(and so that they can be read back in).  If @code{nil}, such arrays are
printed using 7#*@code{<...>} syntax and do not show their contents.  The
default is @code{nil}.  The printing of strings is not affected by this
variable.
@end defvar

@defvar *print-case*
Controls the case used for printing upper-case letters in the names of
symbols.  Its value should be @code{:upcase}, @code{:downcase} or
@code{:capitalize}.  These mean, respectively, to print those letters as
upper case, to print them as lower case, or to capitalize each word (see
@code{string-capitalize}, (string-capitalize-fun)).  Any lower case
letters in the symbol name are printed as lower case and escaped
suitably; this flag does not affect them.  Note that the case used for
printing the upper case letters has no effect on reading the symbols
back in, since they are case-converted by @code{read}.  Any upper case
letters that happen to be escaped are always printed in upper case.

@lisp
(dolist (*print-case* '(:upcase :downcase :capitalize))
  (prin1-then-space 'foo)
  (prin1-then-space '|Foo|))
@end lisp
prints @code{FOO |Foo| foo |Foo| Foo |Foo| }.
@end defvar

@defvar *print-level*
@defvarx prinlevel
@code{*print-level*} can be set to the maximum number of nested lists that
can be printed before the printer gives up and just prints a 7#*
instead of a list element.  If it is @code{nil}, which it is initially, any
number of nested lists can be printed.  Otherwise, the value of
@code{*print-level*} must be a fixnum.  Example:
@lisp
(let ((*print-level* 2))
  (prin1 '(a (b (c (d e))))))
@end lisp
prints @code{(a (b #))}.

The synonym @code{prinlevel} is from Maclisp.
@end defvar

@defvar *print-length*
@defvarx prinlength
@code{*print-length*} can be set to the maximum number of elements of a
list that can be printed before the printer gives up and prints an
ellipsis (three periods).  If it is @code{nil}, which it is initially,
any length list may be printed.  Example:
@lisp
(let ((*print-length* 3))
  (prin1 '((a b c d) #(e f g h) (i j k l) (m n o p))))
@end lisp
prints @code{((a b c ...) #(e f g ...) (i j k ...) ...)}.

The synonym @code{prinlength} is from Maclisp.
@end defvar

@section  What The Reader Accepts
@cindex reader
	The purpose of the reader is to accept characters, interpret
them as the p.r. of a Lisp object, and create and return such an
object.  The reader cannot accept everything that the printer produces;
for example, the p.r.'s of compiled code objects, closures, stack
groups, etc., cannot be read in.  However, it has many features that are
not seen in the printer at all, such as more flexibility, comments, and
convenient abbreviations for frequently-used unwieldy constructs.

	This section shows what kind of p.r.'s the reader understands,
and explains the readtable, reader macros, and various features
provided by @code{read}.

@cindex Common Lisp syntax
@cindex traditional syntax
The syntax specified for Common Lisp is incompatible with the
traditional Zetalisp syntax.  Therefore, the Lisp Machine supports
both traditional and Common Lisp syntax, but @code{read} must be told
in advance which one to use.  This is controlled by the choice of
readtable (see (readtable)).  When reading input from a file, the Lisp
system chooses the syntax according to the file's attribute list:
Common Lisp syntax is used if the @code{Common Lisp} attribute is present
(see (file-attribute-list)).

The main difference between traditional and Common Lisp syntax is
that traditionally the single-character escape is slash (@code{/}), whereas
in Common Lisp syntax it is backslash (@code{\}).  Thus, the division
function which in traditional syntax is written @code{//} is written
just @code{/} in Common Lisp syntax.  The other differences are obscure
and are mentioned below where they occur.

In general, the reader operates by recognizing tokens in the input
stream.  Tokens can be self-delimiting or can be separated by delimiters such as
whitespace.  A token is the p.r. of an atomic object such as a symbol or
number, or a special character such as a parenthesis.  The reader reads one
or more tokens until the complete p.r. of an object has been seen, then
constructs and returns that object.

@cindex escape characters
@i{Escape characters} can be used to suppress the special syntactic
significance of any character, including @code{:}, @code{Space}, @code{(} or
@code{"}.  There are two kinds of escape character: the @i{single-character
escape} (@code{/} in traditional syntax, @code{\} in Common Lisp syntax)
suppresses the significance of the immediately following character;
@i{multiple escapes} (vertical bar, @code{|}) are used in pairs, and
suppress the special significance of all the characters except escapes
between the pair.  Escaping a character causes it to be treated as a
token constituent and causes the token containing it to be read as a
symbol.  For example, @code{(12 5 x)} represents a list of three elements,
two of which are integers, but @code{(/12 5/ x)} or @code{(|15| |5 X|)}
represents a list of two elements, both symbols.  Escaping also prevents
conversion of letters to upper case, so that @code{|x|} is
the symbol whose print name contains a lower-case @code{x}.

The circle-cross (7*) character an @i{octal escape character}
which may be useful for including weird characters in the input.  The
next three characters are read and interpreted as an octal number, and the
character whose code is that number replaces the circle-cross and the digits in the
input stream.  This character is always treated as a token constituent and
forces the token to be read as a symbol.  7* is allowed in both traditional
and Common Lisp syntax, but it is not valid Common Lisp.

@noindent
Integers:

	The reader understands the p.r.'s of integers in a way
more general than is employed by the printer.  Here is a complete
description of the format for integers.

	Let a @i{simple integer} be a string of digits, optionally
preceded by a plus sign or a minus sign, and optionally followed by a
trailing decimal point.  A simple integer is interpreted by
@code{read} as an integer.  If the trailing decimal point is present, the
digits are interpreted in decimal radix; otherwise, they are
considered as a number whose radix is the value of the variable
@code{*read-base*}.

@defvar *read-base*
@defvarx ibase
The value of @code{ibase} or @code{*read-base*} is an integer between 2 and 36
that is the radix in which integers and ratios are read.  The initial value of is
ten.  For input from files or editor buffers, the @code{Base} attribute
specifies the value to be used (see (file-attribute-list)); if it is
not given, the ambient value is used.

The synonym @code{ibase} is from Maclisp.
@end defvar

If the input radix is greater than ten, letters starting with @code{a} are
used as additional ``digits'' with values ten and above.  For example, in
radix 16, the letters @code{a} through @code{f} are digits with values ten
through 15.  Alphabetic case is not significant.  These additional
digits can be used wherever a simple integer is expected and are parsed
using the current input radix.  For example, if @code{*read-base*} is 16
then 7ff* is recognized as an integer (255 decimal).  So is @code{10e5},
which is a float when @code{*read-base*} is ten.

Traditional syntax also permits a simple integer,
followed by an underscore (@code{_}) or a circumflex (@code{^}),
followed by another simple integer.  The two simple integers
are interpreted in the usual way;
the character in between indicates an operation that is then
performed on the two integers.  The underscore indicates a binary
``left shift''; that is, the integer to its left is doubled the
number of times indicated by the integer to its right.  The circumflex
multiplies the integer to its left by @code{*read-base*} the number of
times indicated by the integer to its right.  (The second simple
integer is not allowed to have a leading minus sign.)  Examples:  @code{3_2}
means @code{12} and @code{645^3} means @code{645000}.

Here are some examples of valid representations
of integers to be given to @code{read}:
@lisp
4
23456.
-546
+45^+6     ;1means* 45000000
2_11       ;4096
72361356126536125376512375126535123712635
-123456789.
105_1000   ;(ash 105 1000) has this value.
105_1000.
@end lisp

@noindent
Floating Point Numbers:

Floats can be written with or without exponent.
The syntax for a float without exponent is an optional plus or minus sign, optionally
some digits, a decimal point, and one or more digits.  A float with exponent
consists of a simple integer or a float without exponent, followed by an exponent
delimiter (a letter) and a simple integer (the exponent itself) which is the
power of ten by which the number is to be scaled.  The exponent may not have
a trailing decimal point.  Both the mantissa and the exponent are always
interpreted in base ten, regardless of the value of @code{*read-base*}.

Only certain letters are allowed for delimiting the exponent: @code{e}, @code{s}, @code{f},
@code{d} and @code{l}.  The case of the letter is not significant.  @code{s} specifies
that the number should be a short float; @code{f}, that it should be a full-size
float.  @code{d} or @code{l} are equivalent to @code{f}; Common Lisp defines them
to mean `double float' or `long float', but the Lisp Machine does not support
anything longer than a full-size float, so it regards @code{d} and @code{l} as synonymous
with @code{f}.  @code{e} tells the reader to use the current default format,
whatever it may be, as specified by the value of @code{*read-default-float-format*}.

@defvar *read-default-float-format*
The value is the type for read to produce by default for floats whose
precise type is not specified by the syntax.  The value should be either
@code{global:small-float} or @code{global:single-float}, these being the only
distinct floating formats that the Lisp Machine has.  The default is
@code{single-float}, to make full-size floats.
@end defvar

Here are some examples of printed-representations that always read as full-size floats:
@lisp
6.03f23  1F-9     1.f3      3d6
@end lisp

Here are some examples of printed-representations that always read as short floats:
@lisp
0s0      1.5s9    -42S3     1.s5
@end lisp

These read as floats or as a short floats according to @code{*read-default-float-format*}:
@lisp
0.0      1.5      14.0      0.01
.707     -.3      +3.14159  6.03e23
1E-9     1.e3
@end lisp

@noindent
Rationals:

The syntax for a rational is an integer, a ratio delimiter, and another integer.
The integers may not include the @code{^} and @code{_} scaling characters
or decimal points, and only the first one may have a sign.
The ratio delimiter is backslash (@code{\}) in traditional syntax, slash (@code{/}) in
Common Lisp syntax.  Here are examples:
@lisp
1\2      -100000000000000\3     80\10    1traditional*
1/2      -100000000000000/3     80/10    1Common Lisp*
@end lisp
Recall that rationals include the integers; @code{80\10} as input to the
reader is equivalent to @code{8}.

@noindent
Complex Numbers:

The traditional syntax for a complex number is a number (for the real
part), a sign (+ or 7-*), an unsigned number (for the imaginary part),
and the letter @code{i}.  The real and imaginary parts can be any type of
number, but they are converted to be of the same type (both floating of
the same format, or both rational).  For example:
@lisp
1-3\4i
1.2s0+3.45s8i
@end lisp

The Common Lisp syntax for a complex number is 7#c(@i{real} @i{imag})*,
where @i{real} is the real part and @i{imag} is the imaginary part.
This construction is allowed in traditional syntax too.
@lisp
#c(1 -3/4)
#c(1.2s0 3.45s8)
@end lisp

@noindent
Symbols:

	A string of letters, numbers, and characters without
special syntactic meaning is recognized by the reader as a symbol, provided
it cannot be interpreted as a number.  Alphabetic case is ignored
in symbols; lower-case letters are translated to upper-case unless
escaped.
When the reader sees the p.r. of a symbol, it @i{interns} it on a @i{package}
(see (package), for an explanation of interning and the package system).
Symbols may start with digits; you could even
have one named @code{-345t}; @code{read} accepts this as a symbol
without complaint.  If you want to put strange characters (such as
lower-case letters, parentheses, or reader macro characters) inside the name of a symbol,
they must be escaped.  If the symbol's name would look like a number,
at least one character in the name must be escaped, but it matters not which one.
@lisp
@exdent Examples of symbols:
foo
bar/(baz/)    1; traditional*
bar\(baz\)    1; Common Lisp*
34w23
|Frob Sale| 1and* F|rob |S|ale| 1are equivalent*

|a/|b|    1; traditional*
|a\|b|    1; Common Lisp*
@end lisp

In Common Lisp syntax, a symbol composed only of two or more periods is not allowed
unless escaping is used.

The reader can be directed to perform substitutions on the symbols it
reads.  Symbol substitutions are used to implement the incompatible
Common Lisp definitions of various system functions.  Reading of Common
Lisp code is done with substitutions that replace @code{subst} with
@code{cli:subst}, @code{member} with @code{cli:member}, and so on.  This is why,
when a Common Lisp program uses the function @code{member}, it gets the
standard Common Lisp @code{member} function rather than the traditional
one.  This is why we say that @code{cli:member} is ``the Common Lisp
version of @code{member}''.  While @code{cli:member} can be referred to from
any program in just that way, it exists primarily to be referred to from
a Common Lisp program which says simply @code{member}.

Symbol substitutions do not apply to symbols written with package
prefixes, so one can use a package prefix to force a reference to a
symbol that is normally substituted for, such as using @code{global:member}
in a Common Lisp program.

@noindent
Strings:

Strings are written with double-quote characters (@code{"}) before and after
the string contents.  To include a double-quote character or single-character escape
character in the contents, write an extra single-character escape character
in front of it.
@lisp
@exdent Examples of strings:
"This is a typical string."
"That is a /"cons cell/"."    1;; traditional*
"That is a \"cons cell\"."    1;; Common Lisp*
"Strings are often used for I//O."    1;; traditional*
"Strings are often used for I/O."     1;; Common Lisp*
"Here comes one backslash: \\"        1;; Common Lisp*
@end lisp

@noindent
Conses:

	When @code{read} sees an open-parenthesis, it knows that
the p.r. of a cons is coming, and calls itself recursively to
get the elements of the cons or the list that follows.
The following are valid p.r.'s of conses:
@lisp
(foo . bar)
(foo "bar" 33)
(foo . ("bar" . (33 . nil)))
(foo bar . quux)
@end lisp
The first is a cons, whose car and cdr are both symbols.  The second
is a list, and the third is equivalent to the second (although
@code{print} would never produce it).  The fourth is a dotted list;
the cdr of the last cons cell (the second one) is not @code{nil}, but
@code{quux}.
@cindex dotted list

The reader always allocates new cons cells to represent parentheses.
They are never shared with other structure, not even part of the same read.
For example,
@lisp
(let ((x (read)))
  (eq (car x) (cdr x)))
((a b) . (a b))          1;; data for @code{read}*
  => nil
@end lisp
because each time @code{(a b)} is read, a new list is constructed.  This contrasts
with the case for symbols, as very often @code{read} returns symbols
that it found interned in the package rather than creating new symbols
itself.  Symbols are the only thing that work this way.

	The dot that separates the two elements of a dotted-pair p.r.
for a cons is only recognized if it is surrounded by delimiters
(typically spaces).  Thus dot may be freely used within print-names of
symbols and within numbers.  This is not compatible with Maclisp; in
Maclisp @code{(a.b)} reads as a cons of symbols @code{a} and @code{b}, whereas in
Zetalisp it reads as a list of a symbol @code{a.b}.

@noindent
Comments:

A comment begins with a semicolon (@code{;}) and continues to the end of
the line.  Comments are ignored completely by the reader.  If the
semicolon is escaped or inside a string, it is not recognized as
starting a comment; it is part of a symbol or part of the string.
@lisp
;; This is a comment.
"This is a string; but no comment."
@end lisp

Another way to write a comment is to start it with 7#|* and end it with 7|#*.
This is useful for commenting out multiple-line segments of code.
The two delimiters nest, so that 7#| #| |# |#* is a single comment.
This prevents surprising results if you use this construct to comment out
code which already contains such a comment.

@lisp
(cond ((atom x) y)
 #|
      ((foo x)
       (do-it y))
    |#
      (t (hack y)))
@end lisp

@noindent
Abbreviations:

The single-quote character (@code{'}) is an abbreviation for a list starting with the
symbol @code{quote}.  The following pairs of p.r.'s produce equal lists:
@lisp
'a   1and*   (quote a)
'(x (y))   1and*   (quote (x (y)))
@end lisp

The backquote character (@code{`}) and comma are used in a syntax that
abbreviates calls to the list and vector construction functions.
For example,
@lisp
`(a ,b c)
@end lisp
reads as a list whose meaning as a Lisp form is equivalent to
@lisp
(list 'a b 'c)
@end lisp
See (backquote) for full details about backquote.

@subsection Sharp-sign Constructs
@cindex sharp sign reader macros
@cindex # reader macros

Sharp-sign (@code{#}) is used to introduce syntax extensions.
It is the beginning of a two-character sequence whose meaning
depends on the second character.  Sharp-sign is only recognized with
a special meaning if it occurs at the beginning of a token.
If encountered while a token is in progress, it is a symbol constituent.
For example, 7#xff* is a sharp-sign construct that interprets
7ff* as a hexidecimal number, but 71#xff* is just a symbol.

If the sharp-sign is followed by decimal digits, the digits form a
parameter.  The first non-digit determines which sharp-sign construct
is actually in use, and the decimal integer parsed from the digits
is passed to it.  For example, 7#r* means ``read in specified radix'';
it must actually be used with a radix notated in decimal between the 7#*
and the 7r*, as in 7#8r*.

It is possible for a sharp-sign construct to have different meanings
in Common Lisp and traditional syntax.  The only constructs which
differ are 7#\* and 7#/*.

The function @code{set-dispatch-macro-character} (see
(set-dispatch-macro-character-fun)) can be used to define additional
sharp sign abbreviations.

Here are the currently-defined sharp sign constructs:

@table @code
@item #/
7#/* is used in traditional syntax only to represent the number that
is the character code for a character.  You can follow the 7#/* with
the character itself, or with the character's name.  The name is
preferable for nonprinting characters, and it is the only way to
represent characters which have control bits since they cannot go in
files.  Here are examples of 7#/*:
@lisp
#/a          #o141
#/A          #o101
#/(          #o50
#/c-a        1the character code for @code{Control-A}*
#/c-/a       1the character code for @code{Control-a}*
#/c-sh-a     1the character code for @code{Control-a}*
#/c-/A       1the character code for @code{Control-A}*
#/c-/(       1the character code for @code{Control-(}*
#/return     1the character code for @code{Return}*
#/h-m-system 1the character code for @code{Hyper-Meta-System}*
@end lisp

To represent a printing character, write 7#/@i{x}* where @i{x} is the
character.  For example, 7#/a* is equivalent to @code{#o141} but clearer
in its intent.  To avoid ambiguity, the character following @i{x} should
not be a letter; good style would require this anyway.

As in strings, upper and lower-case letters are distinguished after
7#/*.  Any character works after 7#/*, even those that are normally
special to @code{read}, such as parentheses.  Thus, 7#/A* is equivalent
to @code{#o101}, and 7#/(* is equivalent to @code{#o50}.  Note that the
slash causes this construct to be parsed correctly by the editors Emacs
and Zmacs.  Even non-printing characters may be used, but for them it is
preferable to use the character's name.

To refer to a character by name, write 7#/* followed by the name.  For
example, 7#/*@code{return} reads as the numeric code for the character
@code{Return}.  The defined character names are documented below (see
(xr-special-character-names)).  In general, the names that are written
on the keyboard keys are accepted.  In addition, all the nonalphanumeric
characters have names.  The abbreviations @code{cr} for @code{return} and
@code{sp} for @code{space} are accepted, since these characters are used so
frequently.  The page separator character is called @code{page}, although
@code{form} and @code{clear-screen} are also accepted since the keyboard has
one of those legends on the page key.  The rules for reading @i{name}
are the same as those for symbols; thus letters are converted to upper
case unless escaped, and the name must be terminated by a delimiter such
as a space, a carriage return, or a parenthesis.

When the system types out the name of a special character, it uses the same table
that 7#/* uses; therefore, any character name typed out is acceptable as input.

7#/* can also be used to read in the names of characters that have
modifier bits (Control, Meta, Super and Hyper).  The syntax looks like
7#/*@code{control-meta-b} to get a `B' character with the control and
meta bits set.  You can use any of the prefix bit names @code{control},
@code{meta}, @code{hyper}, and @code{super}.  They may be in any order, and case
is not significant.  Prefix bit names can be abbreviated as the single
letters @code{c}, @code{m}, @code{h} and @code{s}, and @code{control} may be spelled
@code{ctrl} as it is on the keyboard.  The last hyphen may be followed by a
single character or by any of the special character names normally
recognized by 7#/*.  A single character is treated the same way the
reader normally treats characters in symbols; if you want to use a
lower-case character or a special character such as a parenthesis, you
must precede it by a slash character.  Examples:
7#/*@code{Hyper-Super-A}, 7#/*@code{meta-hyper-roman-i},
7#/*@code{CTRL-META-/(}.

An obsolete method of specifying control bits in a character is to
insert the characters @code{}, @code{}, @code{}, @code{} and @code{} between the
7#* and the 7/*.  Those stand for @code{control}, @code{meta},
@code{control-meta}, @code{super} and @code{hyper}, respectively.  This syntax should
be converted to the new 7#\*@code{control-meta-x} syntax described below.

@code{greek} (or @code{front}), @code{top}, and @code{shift} (or @code{sh}) are also
allowed as prefixes of names.  Thus, 7#/*@code{top-g} is equivalent to
7#/* or 7#/*@code{uparrow}.  7#/*@code{top-g} should be used if you are
specifying the keyboard commands of a program and the mnemonic
significance belongs to the `@code{G}' rather than to the actual character
code.

@item #\
In traditional syntax, 7#\* is a synonym for 7#/*.
In the past, 7#/* had to be used before a single character
and 7#\* had to be used in all other cases.  Now either one is allowed
in either case.

In Common Lisp syntax, 7#\* produces a character object rather than
a fixnum representing a character.

@item #/
7#/*@i{x} is the traditional syntax way to produce a character object.
It is used just like 7#/*.  Thus, Common Lisp 7#\* is equivalent to
traditional syntax 7#/*.

@item #^
7#^@i{x}* is exactly like 7#/*@code{control-@i{x}} if the input is being
read by Zetalisp; it generates Control-@i{x}.
In Maclisp @i{x} is converted to upper case and then exclusive-or'ed with 100 (octal).
Thus 7#^@i{x}* always generates the character returned by @code{tyi} if
the user holds down the control key and types @i{x}.
(In Maclisp 7#/*@code{control-@i{x}} sets the bit set by the Control key when the TTY is
open in @code{fixnum} mode.)

@item #'
7#'@i{foo}* is an abbreviation for @code{(function @i{foo})}.
@i{foo} is the p.r. of any object.  This abbreviation can be remembered by
analogy with the @code{'} macro-character, since the @code{function} and @code{quote}
special forms are somewhat analogous.

@item #(
7#(@i{elements}...)* constructs a vector (rank-one array) of type
@code{art-q} with elements @i{elements}.  The length of the vector is the
number of elements written.  Thus, 7#*@code{(a 5 "Foo")} reads as a vector
containing a symbol, an integer and a string.  If a decimal integer
appears after the 7#*, it specifies the length of the vector.
The last element written is replicated to fill the remaining elements.

@item #a
7#@i{n}a @i{contents}* signifies an array of rank @i{n}, containing @i{contents}.
@i{contents} is passed to @code{make-array} as the @i{initial-contents}
argument.  It is a list of lists of lists... or vector of vectors...
as deep as @i{n}.  The dimensions of the array are specified by the
lengths of the lists or vectors.  The rank is specified
explicitly so that the reader can distinguish whether a list or vector
in the contents is a sequence of array elements or a single array element.
The array type is always @code{art-q}.
@lisp
@exdent Examples:
#2a ((x y) (a b) ((uu 3) "VV"))
@exdent produces a 3 by 2 array.  @code{(uu 3)} is one of the elements.
#2a ("foo" "bar")
@end lisp
produces a 2 by 3 array whose elements are character objects.
Recall that a string is a kind of vector.
@lisp
#0a 5
@end lisp
produces a rank-0 array whose sole element is 5.

@item #*
7#*@i{bbb}...* signifies a bit vector; @i{bbb}... are the bits
(characters @code{1} or @code{0}).  A vector of type @code{art-1b} is created
and filled with the specified bits, the first bit specified going in
array element 0.  The length is however many bits you specify.
Alternatively, specify the length with a decimal number between the
7#* and the 7**.  The last @code{1} or @code{0} specified is duplicated
to fill the additional bits.  Thus, 7#8*@code{*0101} is the same as 7#**@code{01011111}.

@item #s
7#s(@i{type} @i{slot} @i{value} @i{slot} @i{value} @i{slot} @i{value} ...)*
constructs a structure of type @i{type}.  Any structure type defined with
@code{defstruct} can be used as @i{type} provided it has a standard constructor
taking slot values as keyword arguments.  (Standard constructors can be
functions or macros; either kind works for 7#s*.)  The slot names
and values appearing in the read syntax are passed to the constructor
so that they initialize the structure.  Example:
@lisp
(defstruct (foo :named)
  bar
  lose)
#s (foo :bar 5 :lose haha)
@end lisp
produces a @code{foo} whose @code{bar} component is 5 and whose @code{lose} component
is @code{haha}.

@item #=
@itemx ##
Are used to represent circular structure or shared structure.
7#@i{n}=* preceding an object ``labels'' that object with the label @i{n},
a decimal integer.  This has no effect on the way the object labeled
is read, but it makes the label available for use in a 7#@i{n}#* construct
within that object (to create circular structure) or later on (to create
shared structure).  7#@i{n}#* counts as an object in itself, and reads
as the object labeled by @i{n}.  

For example, 7#1=*@code{(a . 7#1#})* is a way of notating a circular list such
as would be produced by @code{(circular-list 'a)}.  The list is labeled
with label 1, and then its cdr is given as a reference to label 1.
@code{(7#1=#:}foo 7#1#*)* is an example of shared structure.  An uninterned
symbol named @code{foo} is used as the first element of the list, and
labeled.  The second element of the list is the very same uninterned
symbol, by virtue of a reference to the label.

Printing outputs 7#@i{n}=* and 7#@i{n}#* to represent circular or
shared structure when @code{*print-circle} is non-@code{nil}.

@item #,
Evaluate a form at load time.
7#,@i{foo}* evaluates @i{foo} (the p.r. of a Lisp form) at read
time, except that during file-to-file compilation it is arranged
that @i{foo} will be evaluated when the QFASL file is loaded.  This is a way,
for example, to include in your code complex list-structure constants that cannot
be written with @code{quote}.  Note that the reader does not put @code{quote}
around the result of the evaluation.  You must do this yourself if you
want it, typically by using the @code{'} macro-character.  An example of 
a case where you do not want @code{quote} around it is when this object is
an element of a constant list.

@item #.
7#.@i{foo}* evaluates @i{foo} (the p.r. of a lisp form) at read
time, regardless of who is doing the reading.

@item #`
7#`* is a construct for repeating an expression with some
subexpressions varying.  It is an abbreviation for writing several
similar expressions or for the use of @code{mapc}.  Each subexpression
that is to be varied is written as a comma followed by a list of the
things to substitute.  The expression is expanded at read time into
a @code{progn} containing the individual versions.
@lisp
#`(send stream ',(:clear-input :clear-output))
@end lisp
expands into
@lisp
(progn (send stream :clear-input)
       (send stream :clear-output))
@end lisp

Multiple repetitions can be done in parallel by using commas
in several subexpressions:
@lisp
#`(rename-file ,("foo" "bar") ,("ofoo" "obar"))
@end lisp
expands into
@lisp
(progn (rename-file "foo" "ofoo")
       (rename-file "bar" "obar"))
@end lisp

If you want to do multiple independent repetitions, you must use nested
7#`* constructs.  Individual commas inside the inner 7#`* apply to
that 7#`*; they vary at maximum speed.  To specify a subexpression
that varies in the outer 7#`*, use two commas.
@lisp
#`#`(print (* ,(5 7) ,,(11. 13.)))
@end lisp
expands into
@lisp
(progn (progn (print (* 5 11.)) (print (* 7 11.)))
       (progn (print (* 5 13.)) (print (* 7 13.)))
@end lisp

@item #o
7#o @i{number}* reads @i{number} in octal regardless of the
setting of @code{*read-base*}.  Actually, any expression can be prefixed
by 7#o*; it is read with @code{*read-base*} bound to 8.

@item #b
Like 7#o* but reads in binary.

@item #x
Like 7#x* but reads in radix 16 (hexadecimal).  The letters @code{a}
through @code{f} are used as the digits beyond 9.

@item #r
7#@i{radix}r @i{number}* reads @i{number} in radix @i{radix} regardless
of the setting of @code{*read-base*}.  As with 7#o*, any expression
can be prefixed by 7#@i{radix}r*; it is read with @code{*read-base*}
bound to @i{radix}.  @i{radix} must be a valid decimal integer between
2 and 36.

For example, 7#3r102* is another way of writing @code{11.} and
7#11r32* is another way of writing @code{35}.  Bases larger than ten use
the letters starting with @code{a} as the additional digits.

@item #c
7#c(@i{real} @i{imag})* constructs a complex number with real part
@i{real} and imaginary @i{part}.  It is equivalent to @code{@i{real}+@i{imag}i},
except that 7#c* is allowed in Common Lisp syntax and the other is not.

@cindex conditionalization, read-time
@item #+
This abbreviation provides a read-time conditionalization facility.  It
is used as 7#+@i{feature} @i{form}*.  If @i{feature} is a symbol, then
this is read as @i{form} if @i{feature} is present in the list
@code{*features*} (see (*features*-var)).  Otherwise, the construct is
regarded as whitespace.

Alternately, @i{feature} may be a boolean expression composed of @code{and}, @code{or}, and
@code{not} operators and symbols representing items that may appear on
@code{*features*}.  Thus,
7#+*@code{(or lispm amber)} causes the following object to be seen
if either of the features @code{lispm} or @code{amber} is present.

For example, 7#+*@code{lispm @i{form}} makes @i{form} count if being read by Zetalisp,
and is thus equivalent to 7#q @i{form}*.  Similarly, 7#+*@code{maclisp @i{form}} is equivalent
to 7#m @i{form}*.  7#+*@code{(or lispm nil) @i{form}} makes @i{form} count on either
Zetalisp or in NIL.

Here is a list of features with standard meanings:
@table @code
@item lispm
This feature is present on any Lisp machine (no matter what version of hardware
or software).

@item maclisp
This feature is present in Maclisp.

@item nil
This feature is present in NIL (New Implementation of Lisp).

@item mit
This feature is present in the MIT Lisp machine system,
which is what this manual is about.

@item symbolics
This feature is present in the Symbolics version of the Lisp machine system.
May you be spared the dishonor of using it.
@end table

7#+*, and the other read-time conditionalization constructs that
follow, discard the following expression by reading it with
@code{*read-suppress*} bound to @code{t} if the specified condition is false.

@item #-
7#-@i{feature} @i{form}* is equivalent to 7#+*@code{(not @i{feature}) @i{form}}.

@item #q
7#q @i{foo}* reads as @i{foo} if the input is being read by
Zetalisp, otherwise it reads as nothing (whitespace).
This is considered obsolete; use 7#+*@code{lispm} instead.

@item #m
7#m @i{foo}* reads as @i{foo} if the input is being read into Maclisp,
otherwise it reads as nothing (whitespace).
This is considered obsolete; use 7#+*@code{maclisp} instead.

@item #n
7#n @i{foo}* reads as @i{foo} if the input is being read into NIL
or compiled to run in NIL, otherwise it reads as nothing (white space).
This is considered obsolete; use 7#+*@code{nil} instead.

@item #
7#*@code{} introduces an expression in infix notation.  @code{} should be used
to terminate it.  The text in between describes a Lisp object such as a symbol,
number or list but using a nonstandard, infix-oriented syntax.  For example,
@lisp
#x:y+car(a1[i,j])
@exdent is equivalent to
(setq x (+ y (car (aref a1 i j))))
@end lisp

It is not strictly true that the Lisp object produced in this way has to be
an expression.  Since the conversion is done at read time, you can use
a list expressed this way for any purpose.  But the infix syntax is designed
to be used for expressions.

For full details, refer to the file @code{SYS: IO1; INFIX LISP}.

@item #<
This is not legal reader syntax.  It is used in the p.r. of objects that cannot
be read back in.  Attempting to read a 7#*@code{<} signals an error.

@item #
This is used in the p.r. of miscellaneous objects (usually named
structures or instances) that can be read back in.  7#*@code{} should be
followed by a typename and any other data needed to construct an
object, terminated with a @code{}.  For example, a pathname might print as
@lisp
#FS:ITS-PATHNAME "AI: RMS; TEST 5"
@end lisp
The typename is a keyword that @code{read} uses to figure out how to read in
the rest of the printed representation and construct the object.  It is read in in
package @code{user} (but it can contain a package prefix).  The resulting symbol
should either have a @code{si:read-instance} property or be the name of a flavor
that handles the @code{:read-instance} operation.

In the first case, the property is applied as a function to the typename
symbol itself and the input stream.  In the second, the handler for that
operation is applied to the operation name (as always), the typename
symbol, and the input stream (three arguments, but the first is implicit
and not mentioned in the @code{defmethod}).  @code{self} will be @code{nil} and
instance variables should not be referred to.
@code{si:print-readably-mixin} is a useful implementation the
@code{:read-instance} operation for general purposes; see
(si:print-readably-mixin-flavor).

In either case, the handler function should read the remaining data from
the stream, and construct and return the datum it describes.  It should
return with the @code{} character waiting to be read from the input stream
(@code{:untyi} it if necessary).  @code{read} signals an error after it is returned
to if a @code{} character is not next.

The typename can be any symbol with an appropriate property or flavor, not
necessarily related to the type of object that is created; but for clarity, it is good
if it is the same as the @code{type-of} of the object printed.  Since the type symbol is
passed to the handler, one flavor's handler can be inherited by many other
flavors and can examine the type symbol read in to decide what flavor to
construct.

@item #|
7#|* is used to comment out entire pieces of code.  Such a comment
begins with 7#|* and ends with 7|#*.  The text in between should be
one or more properly balanced p.r.'s of Lisp objects, possibly
including nested 7#|...|#* comments.  This text is skipped over by the
reader, and does not contribute to the value returned by @code{read}.
@end table

@section  Expression Output Functions
@cindex printing
@cindex expression output

These functions all take an optional argument called @i{stream}, which is
where to send the output.  If unsupplied @i{stream} defaults to the value of
@code{*standard-output*}.  If @i{stream} is @code{nil}, the value of
@code{*standard-output*} (i.e. the default) is used.  If it is @code{t}, the value of
@code{*terminal-io*} is used (i.e. the interactive terminal).  This is all
more-or-less compatible with Maclisp, except that instead of the
variable @code{*standard-output*} Maclisp has several variables and complicated rules.
For detailed documentation of streams, refer to (streams).

@defun prin1 object &optional stream
Outputs the printed representation of @i{object} to
@i{stream}, with escaping (see (escaping)).
@i{object} is returned.
@end defun

@defun prin1-then-space object &optional stream
Like @code{prin1} except that output
is followed by a space.
@end defun

@defun print object &optional stream
Like @code{prin1} except that output
is preceded by a carriage return and followed by a space.
@i{object} is returned.
@end defun

@defun princ object &optional stream
Like @code{prin1} except that the output is not escaped.  @i{object} is
returned.
@end defun

@defun write object &key stream escape radix base circle pretty level length case gensym array
Prints @i{object} on @i{stream}, having bound all the printing flags according to the
keyword arguments if specified.  For example, the keyword argument @i{array} specifies how
to bind @code{*print-array*}; if @i{array} is omitted, the ambient value of @code{*print-array*}
is used.  This function is sometimes cleaner than binding a printing control variable
explicitly.  The value is @i{object}.
@end defun

@subsection Pretty-Printing Output Functions
@cindex formatting lisp code
@cindex pretty-printing
@cindex grinding

@c If we ever get a new grinder, this section will document how to
@c customize it and that sort of thing.

@defun pprint object &optional stream
@code{pprint} is like @code{prin1} except that @code{*print-pretty*} is bound to @code{t}
so that the grinder is used.  @code{pprint} returns zero values, just as
the form @code{(values)} does.
@end defun

@defmac grindef function-spec...
Prints the definitions of one or more functions, with indentation to make the code
readable.  Certain other ``pretty-printing'' transformations are performed:  The @code{quote}
special form is represented with the @code{'} character.  Displacing macros are
printed as the original code rather than the result of macro expansion.
The code resulting from the backquote (@code{`}) reader macro is represented
in terms of @code{`}.

The subforms to @code{grindef} are the function specs whose
definitions are to be printed; the usual way @code{grindef} is used
is with a form like @code{(grindef foo)} to print the definition
of @code{foo}.  When one of these subforms is a symbol, if
the symbol has a value its value is prettily printed also.  Definitions are
printed as @code{defun} special forms, and values are printed as @code{setq} special
forms.

If a function is compiled, @code{grindef} says so and tries to find its
previous interpreted definition by looking on an associated property
list (see @code{uncompile} ((uncompile-fun)).  This works only if the
function's interpreted definition was once in force; if the definition
of the function was simply loaded from a QFASL file, @code{grindef} cannot
not find the interpreted definition.

With no subforms, @code{grindef} assumes the same arguments as when it was
last called.
@end defmac

@defun grind-top-level obj &optional width (stream @code{*standard-output*}) (untyo-p @code{nil}) (displaced @code{'si:displaced}) (terpri-p @code{t}) notify-fun loc
Pretty-prints @i{obj} on @i{stream}, putting up to @i{width} characters
per line.  This is the primitive interface to the pretty-printer.  Note that it does not
support variable-width fonts.  If the @i{width} argument is supplied, it is how many
characters wide the output is to be.  If @i{width} is unsupplied or @code{nil},
@code{grind-top-level} tries to figure out the natural width of the stream,
by sending a @code{:size-in-characters} message to the stream and using the first
returned value.  If the stream doesn't handle that message, a width of @code{95.}
characters is used instead.

The remaining optional arguments activate various strange features and usually should not
be supplied.  These options are for internal use by the system and are documented
here for only completeness.
If @i{untyo-p} is @code{t}, the @code{:untyo} and @code{:untyo-mark} operations are
be used on @i{stream}, speeding up the algorithm somewhat.  @i{displaced} controls the
checking for displacing macros; it is the symbol which flags a place that has been
displaced, or @code{nil} to disable the feature.
If @i{terpri-p} is @code{nil}, @code{grind-top-level} does
not advance to a fresh line before printing.

If @i{notify-fun} is non-@code{nil}, it should be a function that to be
called with three arguments for each ``token'' in the pretty-printed
output.  Tokens are atoms, open and close parentheses, and reader macro
characters such as 7'*.  The arguments given to @i{notify-fun} are the
token, its ``location'' (see next paragraph), and @code{t} if it is an atom
or @code{nil} if it is a character.

@i{loc} is the ``location'' (typically a cons) whose car is @i{obj}.  As the
grinder recursively descends through the structure being printed, it keeps track
of the location where each thing came from, for the benefit of the @i{notify-fun}.
This makes it possible for a program to correlate the printed output
with the list structure.  The ``location'' of a close parenthesis is @code{t}, because
close parentheses have no associated location.
@end defun

@subsection Non-Stream Printing Functions

@defun write-to-string object &key escape radix base circle pretty level length case gensym array
@defunx prin1-to-string object
@defunx princ-to-string object
Like @code{write}, @code{prin1} and @code{princ}, respectively, but put the output in a string
and return the string (see (write-fun)).
@end defun

See also the @code{with-output-to-string} special form ((with-output-to-string-fun)).

The following obsolete functions are for Maclisp compatibility only.
The examples use traditional syntax.

@defun exploden object
Returns a list of characters (represented as fixnums) that
are the characters that would be typed out by @code{(princ @i{object})}
(i.e. the unescaped printed representation of @i{object}).
@lisp
@exdent Example:
(exploden '(+ /12 3)) => #o(50 53 40 61 62 40 63 51)
@end lisp
@end defun

@defun explodec object
Returns a list of characters represented by symbols,
interned in the current package,
whose names are the characters that would be typed out by 
@code{(princ @i{object})} (i.e. the unescaped printed representation of @i{object}).
@lisp
@exdent Example:
(explodec '(+ /12 3)) => (|(| + | | |1| |2| | | |3| |)|)
@end lisp
(Note that there are escaped spaces in the above list.)
@end defun

@defun explode object
Like @code{explodec} but uses the escaped printed representation.
@lisp
@exdent Example:
(explode '(+ /12 3)) => (|(| + | | // |1| |2| | | |3| |)|)
@end lisp
(Note that there are escaped spaces in the above list.)
@end defun

@defun flatsize object
Returns the number of characters in the escaped printed representation
of @i{object}.
@end defun

@defun flatc object
Returns the number of characters in the unescaped printed representation
of @i{object}.
@end defun

@section  Expression Input Functions
@cindex reading
@cindex expression input

Most expression input functions read characters from an input stream.
This argument is called @i{stream}.  If unsupplied it
defaults to the value of @code{*standard-input*}.

All of these functions echo their input and permit editing if used on an
interactive stream (one which supports the @code{:rubout-handler}
operation; see below.)

The functions accept an argument @i{eof-option} or two arguments
@i{eof-error} and @i{eof-value} to tell them what to do if end of file
is encountered instead of an object's p.r.  The functions that take
two @i{eof-} arguments are the Common Lisp ones.

In functions that accept the @i{eof-option} argument, if no argument
is supplied, an error is signaled at eof.  If the argument is
supplied, end of file causes the function to return that argument.  Note
that an @i{eof-option} of @code{nil} means to return @code{nil} if the end of
the file is reached; it is @i{not} equivalent to supplying no
@i{eof-option}.

In functions that accept two arguments @i{eof-error} and @i{eof-value},
end of file is an error if @i{eof-error} is non-@code{nil} or if it is unsupplied.
If @i{eof-error} is @code{nil}, then the function returns @i{eof-value}
at end of file.

An error is always signaled if end of file is encountered in the middle
of an object; for example, if a file does not contain enough right
parentheses to balance the left parentheses in it.  Mere whitespace does
not count as starting an object.  If a file contains a symbol or a number
immediately followed by end-of-file, it can be read normally without
error; if an attempt is made to read further, end of file is encountered
immediately and the @i{eof-} argument(s) obeyed. 

These end-of-file conventions are not completely compatible with
Maclisp.  Maclisp's deviations from this are generally considered to be
bugs rather than features.

For Maclisp compatibility, @code{nil} as the @i{stream} argument also means
to use the value of @code{*standard-input*}, and @code{t} as the @i{stream}
argument means to use the value of @code{*terminal-io*}.  This is only
advertised to work in functions that Maclisp has, and should not be
written in new programs.  Instead of the variable @code{*standard-input*}
Maclisp has several variables and complicated rules.  For detailed
documentation of streams, refer to (streams).

The functions below that take @i{stream} and @i{eof-option} arguments
can also be called with the stream and eof-option in the other order.
This functionality is only for compatibility with old Maclisp programs,
and should never be used in new programs.  The functions attempt to
figure out which way they were called by seeing whether each argument is
a plausible stream.  Unfortunately, there is an ambiguity with symbols:
a symbol might be a stream and it might be an eof-option.  If there are
two arguments, one being a symbol and the other being something that is
a valid stream, or only one argument, which is a symbol, then these
functions interpret the symbol as an eof-option instead of as a
stream.  To force them to interpret a symbol as a stream, give the
symbol an @code{si:io-stream-p} property whose value is @code{t}.

@defun read &optional stream eof-option rubout-handler-options
Reads the printed representation of a Lisp object
from @i{stream}, builds a corresponding Lisp object, and returns
the object.  @i{rubout-handler-options} are used as options
for the rubout handler, if @i{stream} supports one; see
(rubout-handler) for more information on this.
@end defun

@defun cli:read &optional stream (eof-errorp @code{t}) eof-value recursive-p
The Common Lisp version of @code{read} differs only in how its arguments
are passed.

@i{recursive-p} should be non-@code{nil} when calling from the reader or
from the defining function of a read-macro character; that is, when
reading a subexpression as part of the task of reading a larger
expression.  This has two effects: the subexpression is allowed to share
7#@i{n}#* labels with the containing expression, and whitespace which
terminates the subexpression (if it is a symbol or number) is not
discarded.
@end defun

@defun read-or-end &optional stream eof-option rubout-handler-options
Like @code{read}, but on an interactive stream if the input is just
the character @code{End} it returns the two values @code{nil} and @code{:end}.
@end defun

@defvar read-preserve-delimiters
Certain printed representations given to @code{read}, notably those of symbols
and numbers, require a delimiting character after them.  (Lists do not, because
the matching close-parenthesis serves to mark the end of the list.)
Normally @code{read} throws away the delimiting character if it is whitespace,
but preserves it (using the @code{:untyi} stream operation) if the character is
syntactically meaningful, since it may be the start of the next expression.

If @code{read-preserve-delimiters} is bound to @code{t} around a call to @code{read},
the delimiting character is never thrown away, even if it is whitespace.
This may be useful for certain reader macros or special syntaxes.
@end defvar

@defun read-preserving-whitespace &optional stream (eof-errorp @code{t}) eof-value recursive-p
Like @code{cli:read} but binds @code{read-preserve-delimiters} to @code{t}.
This is the Common Lisp way of requesting the @code{read-preserve-delimiters} feature.
@end defun

@defun read-delimited-list char &optional stream recursive-p
Reads expressions from @i{stream} until the character @i{char} is seen
at top level when an expression is expected; then returns a list of
the objects read.  @i{char} may be a fixnum or a character object.
For example, if @i{char} is 7#/]*, and the text to be read from
@i{stream} is @code{a (b c)]} ...  then the objects @code{a} and @code{(b c)}
are read, the @code{]} is seen as a terminator and discarded, and the
value returned is @code{(a (b c))}.  @i{recursive-p} is as for
@code{cli:read}.  End of file within this function is always an error
since it is always ``within an object''--the object whose textual
representation is terminated by @i{char}.

Note that use of this function does not cause @i{char} to terminate
tokens.  Usually you want that to happen, but it is purely under the
control of the readtable.  So you must modify the readtable to make this
so.  The usual way is to define @i{char} as a macro character whose
defining function just signals an error.  The defining function is not
called when @i{char} is encountered in the expected context by
@code{read-delimited-list}; if @i{char} is encountered anywhere else,
it is an unbalanced bracket and an error is appropriate.
@end defun

@defun read-for-top-level &optional stream eof-option
This is a slightly different version of @code{read}.  It differs from @code{read}
only in that it ignores close-parentheses seen at top level,
and it returns the symbol @code{si:eof} if the stream reaches end-of-file
if you have not supplied an @i{eof-option} (instead of signalling
an error as @code{read} would).  This version of @code{read} is used in
the system's ``read-eval-print'' loops.
@end defun

@defun read-check-indentation &optional stream eof-option
This is like @code{read}, but validates the input based on indentation.
It assumes that the input data is formatted to follow the usual
convention for source files, that an open-parenthesis in column zero
indicates a top-level list (with certain specific exceptions).
An open-parenthesis in column zero encountered in the middle of a list
is more likely to result from close-parentheses missing before it than
from a mistake in indentation.

If @code{read-check-indentation} finds an open-parenthesis
following a return character in the middle of a list, it
invents enough close-parentheses to close off all pending lists, and
returns.  The offending open-parenthesis is @code{:untyi}'d so it can begin
the next list, as it probably should.  End of file in the middle of a
list is handled likewise.

@code{read-check-indentation} notifies the caller of the incorrect formatting
by signaling the condition @code{sys:missing-closeparen}.  This
is how the compiler is able to record a warning about the missing
parentheses.  If a condition handler proceeds, @code{read} goes ahead
and invents close-parentheses.

There are a few special forms that are customarily used around function
definitions--for example, @code{eval-when}, @code{local-declare}, and @code{comment}.
Since it is desirable to begin the function definitions in
column zero anyway, @code{read-check-indentation} allows a list to begin
in column zero within one of these special forms.  A non-@code{nil}
@code{si:may-surround-defun} property identifies the symbols for which this
is allowed.
@end defun

@defvar read-check-indentation
This variable is non-@code{nil} during a read in which indentation is being
checked.
@end defvar

@subsection Non-Stream Parsing Functions

The following functions do expression input but get the characters
from a string or a list instead of a stream.

@defun read-from-string string &optional eof-option (start @code{0}) end
The characters of @i{string} are given successively
to the reader, and the Lisp object built by the reader is returned.
Macro characters and so on all take effect.  If @i{string}
has a fill-pointer it controls how much can be read.

@i{eof-option} is what to return if the end of the string is reached, as
in @code{read}.  @i{start} is the index in the string of the first
character to be read.  @i{end} is the index at which to stop reading;
that point is treated as end of file.

@code{read-from-string} returns two values; the first is the object read
and the second is the index of the first character in the string not read.
If the entire string was read, this is the length of the string.

@lisp
@exdent Example:
(read-from-string "(a b c)") => (a b c) 1and* 7
@end lisp
@end defun

@defun cli:read-from-string string &optional (eof-errorp @code{t}) eof-value &key (start @code{0}) end preserve-whitespace
The Common Lisp version of @code{read-from-string} uses a different calling
convention.  The arguments mean the same thing but are arranged
differently.  There are three arguments with no counterparts:
@i{eof-errorp} and @i{eof-value}, which are simply passed on to
@code{cli:read}, and @i{preserve-whitespace}, which if non-@code{nil} means
that the reading is done with @code{read-preserve-delimiters} bound to
@code{t}.
@end defun

See also the @code{with-input-from-string} special form ((with-input-from-string-fun)).

@defun parse-integer string &key (start @code{0}) end (radix @code{10.}) junk-allowed
Parses the contents of @i{string} (or the portion from @i{start} to @i{end}) as a numeral
for an integer using the specified radix, and returns the integer.
Radices larger than ten are allowed, and they use letters as digits beyond 9.
Leading whitespace is always allowed and ignored.  A leading sign is also allowed
and considered part of the number.

When @i{junk-allowed} is @code{nil}, the entire specified portion of string
must consist of an integer and leading and trailing whitespace.
Otherwise, an error happens.

If @i{junk-allowed} is non-@code{nil}, parsing just stops when a non-digit
is encountered.  The number parsed so far is returned as the first
value, and the index in @i{string} at which parsing stopped is returned
as the second value.  This number equals @i{end} (or the length of
@i{string}) if there is nothing but a number.  If non-digits are found
without finding a number first, the first value is @code{nil}.  Examples:
@lisp
(parse-integer " 1A " :radix 16.) => 26.
(parse-integer " 15X " :end 3) => 15.
(parse-integer " -15X " :junk-allowed t) => -15. 3
(parse-integer " 15X ") => error!
@end lisp
@end defun

@defun readlist char-list
This function is provided mainly for Maclisp compatibility.
@i{char-list} is a list of characters.  The characters may be
represented by anything that the function @code{character} accepts:
character objects, fixnums, strings, or symbols.  The characters are
given successively to the reader, and the Lisp object built by the
reader is returned.  Macro characters and so on all take effect.

If there are more characters in @i{char-list} beyond those needed to
define an object, the extra characters are ignored.  If there are not
enough characters, some kind of @code{sys:read-end-of-file} error is signaled.
@end defun

@subsection Input Error Conditions

.defcondition sys:read-error (@code{sys:parse-error} @code{error})
This condition name classifies all errors detected by the reader per se.
Since @code{sys:parse-error} is implied, all @code{sys:read-error} errors
must provide the proceed type @code{:no-action} so that automatic proceed
is possible if the error happens during compilation.  See (sys:parse-error-condition).

Since this condition name implies @code{sys:parse-error} and @code{error}, those
two are not mentioned as implications below when @code{sys:read-error} is.
.end_defcondition

.defcondition sys:read-end-of-file (@code{sys:read-error} @code{sys:end-of-file})
Whenever the reader signals an error for end of file, the condition object
possesses this condition name.

Since @code{sys:end-of-file} is implied, the @code{:stream} operation on the
condition instance returns the stream on which end of file was reached.
.end_defcondition

.defcondition sys:read-list-end-of-file (@code{sys:read-end-of-file} @code{sys:read-error} @code{sys:end-of-file})
This condition is signaled when @code{read} detects end of file in the middle of a list.

In addition to the @code{:stream} operation provided because
@code{sys:end-of-file} is one of the proceed types, the condition instance
supports the @code{:list} operation, which returns the list read so far.

Proceed type @code{:no-action} is provided.  If it is used, the reader
invents a close-parenthesis to close off the list.
Within @code{read-check-indentation}, the reader signals the error only once,
no matter how many levels of list are unterminated.
.end_defcondition

.defcondition sys:read-string-end-of-file (@code{sys:read-end-of-file} @code{sys:read-error} @code{sys:end-of-file})
This is signaled when @code{read} detects end of file in the middle of a
string delimited by double-quotes.

The @code{:string} operation on the condition instance returns the string
read so far.

Proceed type @code{:no-action} terminates the string and returns.
If the string is within other constructs that are unterminated,
another end of file error is will be signaled later.
.end_defcondition

.defcondition sys:read-symbol-end-of-file (@code{sys:read-end-of-file} @code{sys:read-error} @code{sys:end-of-file})
This is signaled when @code{read} detects end of file within
a multiple escape construct.

The @code{:string} operation on the condition instance returns the print
name read so far.

Proceed type @code{:no-action} terminates the symbol and returns.
If the symbol is within other constructs that are unterminated,
another end of file error is will be signaled later.
.end_defcondition

.defcondition sys:missing-closeparen (@code{condition})
This condition, which is not an error, is signaled when
@code{read-check-indentation} finds an open-parenthesis in column zero
within a list.

Proceed type @code{:no-action} is provided.  On proceeding, the reader
invents enough close-parentheses to close off all the lists that are
pending.
.end_defcondition

@section  The Readtable
@cindex readtable

The syntax used by the reader is controlled by a data structure called
the @i{readtable}.  (Some aspects of printing are also controlled by the
readtable.)  There can be many readtables, but the one that is used is
the one which is the value of @code{*readtable*}.  A particular syntax can be
selected for use by setting or binding @code{*readtable*} to a readtable
which specifies that syntax before reading or printing.  In particular,
this is how Common Lisp or traditional syntax is selected.  The
readtable also controls the symbol substitutions which implement
the distinction between the traditional and Common Lisp versions of
functions such as @code{subst}, @code{member}and @code{defstruct}.

The functions in this section allow you to modify the syntax of
individual characters in a readtable in limited ways.  You can
also copy a readtable; then you can modify one copy and leave
the other unchanged.

A readtables may have one or more names.  Named readtables are
recorded in a central data base so that you can find a readtable by
name.  When you copy a readtable, the new one is anonymous and is not
recorded in the data base.

@defvar readtable
@defvarx *readtable*
The value of @code{readtable} or @code{*readtable*} is the current readtable.
This starts out as the initial standard readtable.  You can bind this
variable to change temporarily the readtable being used.

The two names are synonymous.
@end defvar

.defconst si:standard-readtable
This is copied into @code{*readtable*} every time the machine is booted.
Therefore, it is normally the same as @code{*readtable*} unless you make
@code{*readtable*} be some other readtable.  If you alter the contents of
@code{*readtable*} without setting or binding it to some other readtable,
this readtable is changed.
.end_defconst

.defconst si:initial-readtable
The value of @code{si:initial-readtable} is a read-only copy of the default
current readtable.  Its purpose is to preserve a copy of the standard
read syntax in case you modify the contents of @code{*readtable*} and regret
it later.  You could use @code{si:initial-readtable} as the
@i{from-readtable} argument to @code{copy-readtable} or
@code{set-syntax-from-char} to restore all or part of the standard syntax.
.end_defconst

.defconst si:common-lisp-readtable
A readtable which initially is set up to define Common Lisp read syntax.
Reading of Common Lisp programs is done using this readtable.
.end_defconst

.defconst si:initial-common-lisp-readtable
A read-only copy of @code{si:common-lisp-readtable}, whose purpose is to
preserve a copy of the standard Common Lisp syntax in case you modify
@code{si:common-lisp-readtable} (such as, by reading a Common Lisp program
which modifies the current readtable).
.end_defconst

@defun si:rdtbl-names readtable
Returns the list of names of @code{readtable}.
You may @code{setf} this to add or remove names.
@end defun

@defun si:find-readtable-named name
Returns the readtable named @code{name}, or @code{nil} if none is recorded.
@end defun

@defun readtablep object
@code{t} if @i{object} is a readtable.
@end defun

The user can program the reader by changing the readtable in any of three ways.
The syntax of a character can be set to one of several predefined possibilities.
A character can be made into a @i{macro character}, whose interpretation
is controlled by a user-supplied function which is called when the character is read.
The user can create a completely new readtable, using the readtable compiler
(@code{SYS: IO; RTC LISP}) to define new kinds of syntax and to assign syntax classes to
characters.  Use of the readtable compiler is not documented here.

@defun copy-readtable &optional from-readtable to-readtable
@i{from-readtable}, which defaults to the current readtable, is copied.
If @i{from-readtable} is @code{nil}, the standard Common Lisp syntax is
copied.  If @i{to-readtable} is unsupplied or @code{nil}, a fresh copy is
made.  Otherwise @i{to-readtable} is clobbered with the copied syntax.

Use @code{copy-readtable} to get a private readtable before using the following
functions to change the syntax of characters in it.  The value of @code{*readtable*}
at the start of a Lisp Machine session is the initial standard readtable, which
usually should not be modified.
@end defun

@defun set-syntax-from-char to-char from-char &optional to-readtable from-readtable
Copies the syntax of @i{from-char} in @i{from-readtable} to character
@i{to-char} in @i{to-readtable}.  @i{to-readtable} defaults to the
current readtable and @i{from-readtable} defaults to @code{si:initial-standard-readtable}
(standard traditional syntax).
@end defun

@defun cli:set-syntax-from-char to-char from-char &optional to-readtable from-readtable
Is a Common Lisp function which copies the syntax of @i{from-char} in
@i{from-readtable} to character @i{to-char} in @i{to-readtable}.
@i{to-readtable} defaults to the current readtable and
@i{from-readtable} defaults to @code{si:initial-common-lisp-readtable}
(standard Common Lisp syntax).

Common Lisp has a peculiar idea of what it means to copy the syntax of a character.
The only aspect of syntax that the readtable supposedly specifies is the choice among
@table @code
@item *
token constituent:
digits, letters, random things like @code{@@}, @code{!}, @code{$}, and also colon!
@item *
whitespace:
spaces, @code{Tab}, @code{Return}.
@item *
single escape character:
@code{/} traditionally, @code{\} in Common Lisp.
@item *
multiple escape character:
vertical-bar.
@item *
macro character:
standardly @code{()",.'`;}
@item *
nonterminating macro character:
@code{#} is the only such character standardly defined.
@end table

The differences among macro characters are determined entirely by the
functions that they invoke.  The differences among token constituents
(including the difference between @code{A} and colon) are fixed!  You
can make @code{A} be a macro character, or whitespace, or a quote
character, but if you make it a token constituent then it always behaves
the way it normally does.  You can make colon be a macro character,
or whitespace, etc., but if it is a token constituent it always
delimits package names.  If you make open-parenthesis into a token
constituent, there is only one kind of token constituent it can be (it
forces the token to be a symbol, like @code{$} or @code{@@} or @code{%}).

This is not how Lisp Machine readtables really work, but since
@code{cli:set-syntax-from-char} is provided just for Common Lisp, the
behavior specified by Common Lisp is laboriously provided.  So, if
@i{from-char} is some kind of token constituent, this function makes
@i{to-char} into a token constituent of the kind that @i{to-char} is
supposed to be--not the kind of token constituent that @i{from-char} is.

By contrast, the non-Common-Lisp @code{set-syntax-from-char} would make
@i{to-char} have exactly the same syntactic properties that
@i{from-char} has.
@end defun

@defun set-character-translation from-char to-char &optional readtable
Changes @i{readtable} so that @i{from-char} will be translated to @i{to-char} upon
read-in, when @i{readtable} is the current readtable.
This is normally used only for translating lower case letters to upper case.
Character translation is inhibited by escape characters and within strings.
@i{readtable} defaults to the current readtable.
@end defun

@noindent
The following syntax-setting functions are more or less obsolete.

@defun set-syntax-from-description char description &optional readtable
Sets the syntax of @i{char} in @i{readtable} to be that described by the
symbol @i{description}.  @i{readtable} defaults to the current readtable.

Each readtable has its own set of descriptions which it defines.
The following descriptions are defined in the standard readtable:
@table @code
@item si:alphabetic
An ordinary character such as `@code{A}'.
@item si:break
A token separator such as `@code{(}'.  (Obviously left parenthesis has other
properties besides being a break.
@item si:whitespace
A token separator that can be ignored, such as `@code{ }'.
@item si:single
@cindex single-character symbol
A self-delimiting single-character symbol.  The initial readtable does not
contain any of these.
@item si:escape
The character quoter.  In the initial readtable this is `@code{/}'.
@item si:multiple-escape
The symbol print-name quoter.  In the initial readtable this is `@code{|}'.
@item si:macro
A macro character.  Don't use this; use @code{set-macro-character} ((set-macro-character-fun)).
@item si:non-terminating-macro
A macro character recognized only at the start of a token.  In the
initial readtable, `7#*' is such a character.  (It is also a dispatching
macro, but that is another matter.) The correct way to make a character
be a macro is with @code{set-macro-character}.
@item si:character-code-escape
The octal escape for special characters.  In the initial readtable this is `@code{}'.
@item si:digitscale
a character for shifting an integer by digits.
In the initial readtable this is `7^*'.
@item si:bitscale
A character for shifting an integer by bits.
In the initial readtable this is `7_*' (underscore).

@item si:slash
@itemx si:circlecross
Obsolete synonyms for @code{si:escape} and @code{si:character-code-escape}.
@end table

Unfortunately it is no longer possible to provide @code{si:doublequote} as
double-quote is now an ordinary macro character.

These symbols may be moved to the keyword package at some point.
@end defun

@defun setsyntax character arg2 arg3
This exists only for Maclisp compatibility.  The above functions are preferred in new
programs.  The syntax of @i{character} is altered in the current readtable, according
to @i{arg2} and @i{arg3}.  @i{character} can be a fixnum, a symbol, or a string,
i.e. anything acceptable to the @code{character} function.
@i{arg2} is usually a keyword; it can be in any package since this is a Maclisp
compatibility function.  The following values are allowed for @i{arg2}:
@table @code
@item :macro
The character becomes a macro character.  @i{arg3} is the name of a function to be
invoked when this character is read.  The function takes no arguments, may @code{tyi} or
@code{read} from @code{*standard-input*} (i.e. may call @code{tyi} or @code{read} without
specifying a stream),
and returns an object which is taken as the result of the read.

@item :splicing
Like @code{:macro} but the object returned by the macro function is a list
that is @code{nconc}ed into the list being read.  If the character is read
anywhere except inside a list (at top level or after a dotted-pair dot),
then it may return @code{()}, which means it is ignored, or @code{(@i{obj})},
which means that @i{obj} is read.

@item :single
The character becomes a self-delimiting single-character symbol.  If @i{arg3} is
a fixnum, the character is translated to that character.

@item nil
The syntax of the character is not changed, but if @i{arg3} is
a fixnum, the character is translated to that character.

@item 1a symbol*
The syntax of the character is changed to be the same as that of
the character @i{arg2} in the standard initial readtable.  @i{arg2}
is converted to a character by taking the first character of its print name.
Also if @i{arg3} is
a fixnum, the character is translated to that character.
@end table
@end defun

@section  Read-Macro Characters
@cindex read macro characters
@cindex macro characters

A @i{read-macro character} (or just @i{macro character}) is a character
whose syntax is defined by a function which the reader calls whenever
that character is seen (unless it is escaped).  This function can
optionally read additional characters and is then responsible for
returning the object which they represent.

The standard meanings of the characters open-parenthesis, semicolon,
single-quote, double-quote, @code{#}, backquote (@code{`}) and comma are
implemented by making them macro characters.

For example, open-parenthesis is implemented as a macro character
whose defining function reads expressions until a close-parenthesis is found,
throws away the close-parenthesis, and returns a list of the expressions read.
(It actually must be more complicated than this in order to deal properly
with dotted lists and with indentation checking.)  Semicolon is implemented as
a macro character whose defining function swallows characters until a @code{Return}
and then returns no values.

Close-parenthesis and close-horseshoe (7*) are also macro
characters so that they will terminate symbols.  Their defining
functions signal errors if actually called; but when these delimiters
are encountered in their legitimate contexts they are recognized
and handled specially before the defining function is called.

The user can also define macro characters.

When a macro's defining function is called, it receives two arguments:
the input stream, and the macro character being handled.  The function
may read characters from the stream, and should return zero or more
values, which are the objects that the macro construct ``reads as''.  Zero
values causes the macro construct to be ignored (the semicolon macro
character does this), and one value causes the macro construct to
read as a single object (most macro characters do this).  More than one
value is allowed only within a list.

@cindex terminating macro character
@cindex non-terminating macro character
Macro characters may be @i{terminating} or @i{non-terminating}.
A non-terminating macro character is only recognized as a macro character
when it appears at the beginning of a token.  If it appears when a token
is already in progress, it is treated as a symbol constituent.  Of the standard
macro characters, all but @code{#} are terminating.

@cindex dispatch macro character
One kind of macro character is the @i{dispatch} macro character.
This kind of character is handled by reading one more character,
converting it to upper case,
and looking it up in a table.  Thus, the dispatch macro character
is the start of a two-character sequence, with which is associated
a defining function.  @code{#} is the only standardly defined dispatch
macro character.

When a dispatch macro character is used, it may be followed by a decimal
integer which serves as a parameter.  The character for the dispatch
is actually the first non-digit seen.

The defining function for a dispatch macro two-character sequence
is almost like that of an ordinary macro character.  However, it receives
one more argument.  This is the parameter, the decimal integer that
followed the dispatch macro character, or @code{nil} if no parameter was written.
Also, the second argument is the subdispatch character, the second character
of the sequence.  The dispatch macro character itself is not available.

@defun set-macro-character char function &optional non-terminating-p in-readtable
Sets the syntax of character @i{char} in readtable @i{in-readtable} to be that of a
macro character which is handled by @i{function}.  When that character is read
by @code{read}, @i{function} is called.

@i{char} is made a non-terminating macro character
if @i{non-terminating-p} is non-@code{nil}, a terminating one otherwise.
@end defun

@defun get-macro-character char in-readtable
Returns two values that describe the macro character status of @i{char}
in @i{in-readtable}.  If @i{char} is not a macro character, both values
are @code{nil}.  Otherwise, the first value is the @i{function} and the
second value is the @i{non-terminating-p} for this character.

Those two values, passed to @code{set-macro-character}, are usually
sufficient to recreate exactly the syntax @i{char} has now;
however, since one of the arguments that the function receives
is the macro character that invoked it, it may not behave the same
if installed on a different character or in a different readtable.
In particular, the definition of a dispatch macro character is
a standard function that looks the macro character up in the readtable.
Thus, the definition only records that the macro character @i{is}
a dispatch macro character; it does not say what subcharacters
are allowed or what they mean.
@end defun

@defun make-dispatch-macro-character char &optional non-terminating-p in-readtable
Makes @i{char} be a dispatch macro character in @i{in-readtable}.  This
means that when @i{char} is seen @code{read} will read one more character
to decide what to do.  @code{#} is an example of a dispatch macro
character.  @i{non-terminating-p} means the same thing as in
@code{set-macro-character}.
@end defun

@defun set-dispatch-macro-character char subchar function &optional in-readtable
Sets the syntax of the two-character sequence @i{char} @i{subchar}, assuming that
@i{char} is already a dispatch macro character.  @i{function} becomes the
defining function for this sequence.

If @i{subchar} is lower case, it is converted to upper case.  Case is never
significant for the character that follows a dispatch macro character.
The decimal digits may not be defined as subchars since they are always
used for infix numeric arguments as in 7#5r*.
@end defun

@defun get-dispatch-macro-character char subchar &optional in-readtable
Returns the @i{function} for @i{subchar} following dispatch macro character @i{char}
in readtable @i{in-readtable}.  The value is @code{nil} if @i{subchar} is not defined
for following @i{char}.
@end defun

@noindent
These subroutines are for use by the defining functions of macro characters.
Ordinary @code{read} should not be used for reading subexpressions, and
the ordinary @code{:tyi} operation or functions @code{read-char} or @code{tyi}
should not be used for single-character input.  The functions below
should be used instead.

@defun si:read-recursive &optional stream
Equivalent to @code{(cli:read @i{stream} t nil t)}.  See (cli:read-fun).
This is the recommended way for a macro character's defining function
to read a subexpression.
@end defun

@defun si:xr-xrtyi stream ignore-whitespace no-chars-special no-multiple-escapes
Reads the next input character from @i{stream}, for a macro character's defining
function.  If @i{ignore-whitespace} is non-@code{nil}, any whitespace characters
seen are discarded and the first non-whitespace character is returned.

The first value is the character as translated; the third value is the
original character, before translation.  The second value is a syntax
code which is of no interest to users except to be passed to
@code{si:xr-xruntyi} if this character must be unread.

Normally, this function processes all the escape characters, and
performs translations (such as from lower case letters to upper case
letters) on characters not escaped.  Font specifiers (epsilons followed
by digits or 7**) are ignored if the file is formatted using them.

If @i{no-multiple-escapes} is non-@code{nil}, multiple escapes (vertical bar
characters) are not processed; they are returned to the caller.  This mode
is used for reading the contents of strings.  If @i{no-chars-special}
is non-@code{nil}, no escape characters are processed.  All characters are
simply returned to the caller (except that font specifiers are still
discarded if appropriate).
@end defun

@defun si:xr-xruntyi stream char num
Unreads @i{char}, for a macro character's defining function.
@i{char} should be the third value returned by the last call to @code{si:xr-xrtyi},
and @i{num} should be the second value.
@end defun

@defvar *read-suppress*
If this variable is non-@code{nil}, all the standard read functions and
macro characters do their best to avoid any errors, and any side effects
except for removing characters from the input stream.  For example,
symbols are not interned to avoid either errors (for nonexistent packages)
or side effects (adding new symbols to packages).  In fact, @code{nil} is
used in place of any symbol that is written.

User macro characters should also notice this variable when appropriate.

The purpose of the variable is to allow expressions to be skipped and
discarded.  The read-time conditional constructs 7#+* and 7#-* bind
it to @code{t} to skip the following expression if it is not wanted.
@end defvar

@noindent
The following functions for defining macro characters are more or less obsolete.

@defun set-syntax-macro-char char function &optional readtable
Changes @i{readtable} so that @i{char} is a macro character.  When
@i{char} is read, @i{function} is called.  @i{readtable} defaults to the
current readtable.

@i{function} is called with two arguments, @i{list-so-far} and the input stream.
When a list is being read, @i{list-so-far} is that list (@code{nil} if this is the
first element).  At the top level of @code{read}, @i{list-so-far} is the symbol
@code{:toplevel}.  After a dotted-pair dot, @i{list-so-far} is the symbol @code{:after-dot}.
@i{function} may read any number of characters from the input stream and process
them however it likes.

@i{function} should return three values, called @i{thing}, @i{type}, and @i{splice-p}.
@i{thing} is the object read.  If @i{splice-p} is @code{nil}, @i{thing} is the result.
If @i{splice-p} is non-@code{nil}, then when reading a list @i{thing} replaces
the list being read--often it will be @i{list-so-far} with something else 
@code{nconc}'ed onto the end.  At top-level and after a dot, if @i{splice-p} is non-@code{nil}
the @i{thing} is ignored and the macro-character does not contribute anything to
the result of @code{read}.
@i{type} is a historical artifact and is not really used; @code{nil} is a safe value.
Most macro character functions return just one value and let the other two
default to @code{nil}.

Note that the convention for values returned by @i{function} is different from that
used for functions specified in @code{set-macro-character}, above.  @code{set-syntax-macro-char}
works by encapsulating @i{function} in a closure to convert the values to
the sort that @code{set-macro-character} wants and then passing the closure to
@code{set-macro-character}.

@i{function} should not have any side-effects other than on the stream and @i{list-so-far}.
Because of the way the rubout-handler works, @i{function} can be called several times
during the reading of a single expression in which the macro character only appears once.

@i{char} is given the same syntax that single-quote, backquote, and comma have
in the initial readtable (it is called @code{:macro} syntax).
@end defun

@defun set-syntax-#-macro-char char function &optional readtable
Causes @i{function} to be called when 7#@i{char}* is read.
@i{readtable} defaults to the current readtable.
The function's arguments and return values are the same as for normal macro
characters, documented above.  When @i{function} is called, the special variable
@code{si:xr-sharp-argument} contains @code{nil} or a number that is the
number or special bits between the @code{#} and @i{char}.
@end defun

@defun setsyntax-sharp-macro character type function &optional readtable
This exists only for Maclisp compatibility.  @code{set-dispatch-macro-character}
should be used instead.
If @i{function} is @code{nil}, 7#@i{character}* is turned off, otherwise it
becomes a macro that calls @i{function}.  @i{type} can be @code{:macro}, @code{:peek-macro},
@code{:splicing}, or @code{:peek-splicing}.  The splicing part controls whether @i{function} returns
a single object or a list of objects.  Specifying peek causes @i{character}
to remain in the input stream when @i{function} is called; this is useful if
@i{character} is something like a left parenthesis.  @i{function} gets one
argument, which is @code{nil} or the number between the @code{#} and the @i{character}.
@end defun

@section  The :read and :print Stream Operations

A stream can specially handle the reading and printing of objects by
handling the @code{:read} and @code{:print} stream operations.  Note that these
operations are optional and most streams do not support them.

If the @code{read} function is given a stream that has @code{:read} in its
which-operations, then instead of reading in the normal way it sends the
@code{:read} message to the stream with one argument, @code{read}'s
@i{eof-option} if it had one or a magic internal marker if it didn't.
Whatever the stream returns is what @code{read} returns.
If the stream wants to implement the @code{:read} operation by internally
calling @code{read}, it must use a different stream that does not have
@code{:read} in its which-operations.

If a stream has @code{:print} in its which-operations, it may intercept all
object printing operations, including those due to the @code{print}, @code{prin1},
and @code{princ} functions, those due to @code{format}, and those used internally,
for instance in printing the elements of a list.  The stream receives the
@code{:print} message with three arguments: the object being printed, the
@i{depth} (for comparison against the @code{*print-level*} variable), and
@i{escape-p} (which is the value of @code{*print-escape*}).  If the stream
returns @code{nil}, then normal printing takes place as usual.  If the stream
returns non-@code{nil}, then @code{print} does nothing; the stream is assumed to have
output an appropriate printed representation for the object.
The two following functions are useful in this connection; however, they are
in the @code{system-internals} package and may be changed without much notice.

@defun si:print-object object depth stream &optional which-operations
Outputs the printed-representation of @i{object} to @i{stream}, as modified
by @i{depth} and the values of the @code{*print-...} variables.

This is the internal guts of the Lisp printer.  When a stream's
@code{:print} handler calls this function, it should supply the list
@code{(:string-out)} for @i{which-operations}, to prevent itself from being
called recursively.  Or it can supply @code{nil} if it does not want to
receive @code{:string-out} messages.

If you want to customize the behavior of all printing of Lisp objects,
advising (see (advise)) this function is the way to do it.  See
(customizing-the-printer).
@end defun

@defun si:print-list list depth stream which-operations
This is the part of the Lisp printer that prints lists.  A stream's
@code{:print} handler can call this function, passing along its own arguments
and its own which-operations, to arrange for a list to be printed the
normal way and the stream's @code{:print} hook to get a chance at each of the
list's elements.
@end defun

@chapter Naming of Files
@cindex filename
@cindex pathname

A Lisp Machine generally has access to many file systems.  While it may
have its own file system on its own disks, usually a community of Lisp
Machine users want to have a shared file system accessible by any of the
Lisp Machines over a network.  These shared file systems can be
implemented by any computer that is capable of providing file system
service.  A file server computer may be a special-purpose computer that
does nothing but service file system requests from computers on a
network, or it may be a time-sharing system.

Programs need to use names to designate files within these file systems.
The main difficulty in dealing with names of files is that different
file systems have different naming formats for files.  For example, in
the ITS file system, a typical name looks like:
@lisp
	DSK: GEORGE; FOO QFASL
@end lisp
with @code{DSK} being a device name, @code{GEORGE} being a directory name, @code{FOO}
being the first file name and @code{QFASL} being the second file name.  However, in
TOPS-20, a similar file name is expressed as:
@lisp
	PS:<GEORGE>FOO.QFASL
@end lisp
It would be unreasonable for each program that deals with file names to
be expected to know about each different file name format that exists, or
new formats that could get added in the future.  However, existing
programs should retain their abilities to manipulate the names.

The functions and flavors described in this chapter exist to solve this
problem.  They provide an interface through which a program can deal with
names of files and manipulate them without depending on anything about
their syntax.  This lets a program deal with multiple remote file
servers simultaneously, using a uniform set of conventions.

@section  Pathnames

All file systems dealt with by the Lisp Machine are mapped into a common
model, in which files are named by something called a @i{pathname}.  A
pathname always has six components, each with a standard meaning.  These
components are the common interface that allows programs to work the
same way with different file systems; the mapping of the pathname
components into the concepts peculiar to each file system is taken care
of by the pathname software.  Pathname components are described in the
following section, and the mappings between components and user syntax
is described for each file system later in this chapter.

@defun pathnamep object
@code{t} if @i{object} is a pathname.
@end defun

A pathname is an instance of a flavor (see (flavor)); exactly which
flavor depends on what the host of the pathname is, but @code{pathname}
is always one of its component flavors.  If @i{p} is a pathname, then
@code{(typep @i{p} 'pathname)} returns @code{t}.  One of the messages
handled by host objects is the @code{:pathname-flavor} operation, which
returns the name of the flavor to use for pathnames on that host.  And
one of the differences between host flavors is how they handle this
operation.

There are functions for manipulating pathnames, and there are also
messages that can be sent to them.  These are described later in this
chapter.

@cindex parse (pathname)
@cindex merge (pathname)
Two important operations of the pathname system are @i{parsing} and @i{merging}.
Parsing is the conversion of a string--which might be something typed in by the
user when asked to supply the name of a file--into a pathname object.  This involves
finding out what host the pathname is for, then using the file name syntax
conventions of that host to parse the string into the standard pathname components.
Merging is the operation that takes a pathname with missing components and
supplies values for those components from a set of defaults.

The function @code{string}, applied to a pathname, converts it into a
string that is in the file name syntax of its host's file system, except
that the name of the host followed by a colon is inserted at the front.
This is the inverse of parsing.  @code{princ} of a pathname also does this,
then prints the contents of the string.  Flavor operations such as
@code{:string-for-dired} exist which convert all or part of a pathname to a
string in other fashions that are designed for specific applications.
@code{prin1} of a pathname prints the pathname using the 7#* syntax so
it can be read back in to produce an equivalent pathname (or the same
pathname, if read in the same session).

Since each kind of file server can have its own character string
representation of names of its files, there has to be a different parser
for each of these representations, capable of examining such a character
string and figuring out what each component is.  The parsers all work
differently.  How can the parsing operation know which parser to use?
The first thing that the parser does is to figure out which host this
filename belongs to.  A filename character string may specify a host
explicitly by having the name of the host, followed by a colon, at
either the beginning or the end of the string.  For example, the following
strings all specify hosts explicitly:
@lisp
AI: COMMON; GEE WHIZ		;1 This specifies host AI.*
COMMON; GEE WHIZ AI:		;1 So does this.*
AI: ARC: USERS1; FOO BAR	;1 So does this.*
ARC: USERS1; FOO BAR AI:	;1 So does this.*
EE:PS:<COMMON>GEE.WHIZ.5	;1 This specifies host EE.*
PS:<COMMON>GEE.WHIZ.5 EE:	;1 So does this.*
@end lisp
If the string does not specify a host explicitly, the parser chooses a
host by default and uses the syntax for that host.  The optional
arguments passed to the parsing function (@code{fs:parse-pathname}) tell it
which host to assume.  Note: the parser is not confused by strings
starting with @code{DSK:} or @code{PS:} because it knows that neither of
those is a valid host name.  But if the default host has a device whose
name happens to match the name of some host, you can prevent the device
name from being misinterpreted as a host name by writing an extra colon
at the beginning of the string: For example, @code{:EE:<RMS>FOO.BAR} refers
to the device @code{EE} on the default host (assumed to use TOPS-20 syntax)
rather than to the host named @code{EE}.

Pathnames are kept unique, like symbols, so that there is only one
object with a given set of components.  This is useful because a
pathname object has a property list (see (plist)) on which you can
store properties describing the file or family of files that the
pathname represents.  The uniqueness implies that each time the same
components are typed in, the program gets the same pathname object
and finds there the properties it ought to find.

Note that a pathname is not necessarily the name of a specific file.  Rather,
it is a way to get to a file; a pathname need not correspond to any file that
actually exists, and more than one pathname can refer to the same file.  For
example, the pathname with @code{:newest} as its version refers to the same file
as a pathname which has the appropriate number as the version.
In systems with links, multiple file names, logical devices, etc., two pathnames
that look quite different may really turn out to address the same file.
To get from a pathname to a file requires doing a file system operation
such as @code{open}.

When you want to store properties describing an individual file,
use the pathname you get by sending @code{:truename} to a stream rather
than the pathname you open.  This avoids problems with different pathnames
that refer to the same file.

To get a unique pathname object representing a family of files, send the
message @code{:generic-pathname} to a pathname for any file in the family
(see (generic-pathname)).

@section  Pathname Components

@cindex host (pathname)
@cindex device (pathname)
@cindex directory (pathname)
@cindex name (pathname)
@cindex type (pathname)
@cindex version (pathname)
These are the components of a pathname.  They are clarified by an example below.
@table @i
@item host
An object that represents the file system machine on which the file
resides.  A host object is an instance of a flavor one of whose
components is @code{si:basic-host}.  The precise flavor varies depending on the type
of file system and how the files are to be accessed.

@item device
Corresponds to the ``device'' or ``file structure'' concept in many host file systems.

@item directory
The name of a group of related files belonging to a single user or project.
Corresponds to the ``directory'' concept in many host file systems.

@item name
The name of a group of files that can be thought of as conceptually the
``same'' file.  Many host file systems have a concept of ``name'' which maps
directly into this component.

@item type
Corresponds to the ``filetype'' or ``extension'' concept in many host file systems.
This says what kind of file this is; such as, a Lisp source file, a QFASL file, etc.

@item version
Corresponds to the ``version number'' concept in many host file systems.
This is a number that increments every time the file is modified.
Some host systems do not support version numbers.
@end table

As an example, consider a Lisp program named @code{CONCH}.  If it belongs
to @code{GEORGE}, who uses the @code{FISH} machine, the host would be the
host-object for the machine @code{FISH}, the device would probably be the default
and the directory would be @code{GEORGE}.  On this directory
would be a number of files related to the @code{CONCH} program.  The source
code for this program would live in a set of files with name @code{CONCH},
type @code{LISP}, and versions @code{1}, @code{2}, @code{3}, etc.  The compiled form
of the program would live in files named @code{CONCH} with type @code{QFASL};
each would have the same version number as the source file that it came
from.  If the program had a documentation file, it would have type
@code{INFO}.

Not all of the components of a pathname need to be specified.  If a
component of a pathname is missing, its value is @code{nil}.  Before a file
server can do anything interesting with a file, such as opening the
file, all the missing components of a pathname must be filled in from
defaults.  But pathnames with missing components are often handed around
inside the machine, since almost all pathnames typed by users do not
specify all the components explicitly.  The host is not allowed to be
missing from any pathname; since the behavior of a pathname is
host-dependent to some extent, it has to know what its host is.  All
pathnames have host attributes, even if the string being parsed does not
specify one explicitly.

@cindex unspecific pathname components

A component of a pathname can also be the special symbol
@code{:unspecific}.  @code{:unspecific} means, explicitly, ``this component has
been specified as missing'', whereas @code{nil} means that the component was
not specified and should default.  In merging, @code{:unspecific} counts as
a specified component and is not replaced by a default.  @code{:unspecific}
does @i{not} mean ``unspecified''; it is unfortunate that those two words
are similar.

@code{:unspecific} is used in @i{generic} pathnames, which refer not to a
file but to a whole family of files.  The version, and usually the type,
of a generic pathname are @code{:unspecific}.  Another way @code{:unspecific}
is used has to do with mapping of pathnames into file systems such as
ITS that do not have all six components.  A component that is really ``not
there'' is @code{:unspecific} in the pathname.  When a pathname is
converted to a string, @code{nil} and @code{:unspecific} both cause the
component not to appear in the string.

A component of a pathname can also be the special symbol @code{:wild}.  This is
useful only when the pathname is being used with a directory primitive such
as @code{fs:directory-list} (see (fs:directory-list-fun)), where it means that this pathname component matches
anything.  The printed representation of a pathname usually designates
@code{:wild} with an asterisk; however, this is host-dependent.

What values are allowed for components of a pathname depends, in general,
on the pathname's host.  However, in order for pathnames to be usable
in a system-independent way certain global conventions are adhered to.
These conventions are stronger for the type and version than for the
other components, since the type and version are actually understood by
many programs, while the other components are usually just treated as something
supplied by the user that only needs to be remembered.

In general, programs can interpret the components of a pathname
independent of the file system; and a certain minimum set of possible
values of each component are supported on all file systems.  The
same pathname component value may have very different representations
when the pathname is made into a string, depending on the file system.
This does not affect programs that operate on the components.  The user,
when asked to type a pathname, always uses the system-dependent string
representation.  This is convenient for the user who moves between using
the Lisp Machine on files stored on another host and making direct use of that
host.  However, when the mapping between string form and components is
complicated, the components may not be obvious from what you type.

The type is always a string, or one of the special symbols @code{nil},
@code{:unspecific}, and @code{:wild}.  Certain hosts impose a limit on the
size of string allowed, often very small.  Many programs that deal with
files have an idea of what type they want to use.  For example, Lisp
source programs are usually @code{"LISP"}, compiled Lisp programs are
@code{"QFASL"}, etc.  However, these file type conventions are
host-specific, for the important reason that some hosts do not allow a
string five characters long to be used as the type.  Therefore, programs
should use a @i{canonical type} rather than an actual string to specify
their conventional default file types.  Canonical types are described below.

For the version, it is always legitimate to use a positive fixnum, or
certain special symbols.  @code{nil}, @code{:unspecific}, and @code{:wild} have
been explained above.  The other standardly allowed symbols are
@code{:newest} and @code{:oldest}.  @code{:newest} refers to the largest version
number that exists when reading a file, or that number plus one when
writing a new file.  @code{:oldest} refers to the smallest version number
that exists.  Some file systems may define other special version
symbols, such as @code{:installed} for example, or may allow negative
numbers.  Some do not support versions at all.  Then a pathname may still
contain any of the standard version components, but it does not matter
what the value is.

@cindex structured pathname components
The device, directory, and name are more system-dependent.  These can be strings
(with host-dependent rules on allowed characters and length) or they can
be @i{structured}.  A structured component is a list of strings.  This
is used for file system features such as hierarchical directories.  The system is
arranged so that programs do not need to know about structured components
unless they do host-dependent operations.  Giving a string as a pathname component
to a host that wants a structured value converts the string to the appropriate
form.  Giving a structured component to a host that does not understand them
converts it to a string by taking the first element and ignoring the rest.

Some host file systems have features that do not fit into this pathname
model.  For instance, directories might be accessible as files, there
might be complicated structure in the directories or names, or there
might be relative directories, such as `<' in Multics.  These features
appear in the parsing of strings into pathnames, which is one reason why
the strings are written in host-dependent syntax.  Pathnames for hosts with
these features are also likely to handle additional messages besides the
common ones documented in this chapter, for the benefit of
host-dependent programs that want to access those features.  However,
once your program depends on any such features, it will
work only for certain file servers and not others; in general, it is a good
idea to make your program work just as well no matter what file server
is being used.

@subsection Raw Components and Interchange Components
@cindex interchange form of pathname components
@cindex raw pathname components

On some host file systems it is conventional to use lower-case letters
in file names, while in others upper case is customary, or possibly
required.  When pathname components are moved from pathnames of one file
system to pathnames of another file system, it is useful to convert the
case if necessary so that you get the right case convention for the
latter file system as a default.  This is especially useful when copying
files from one file system to another.

The Lisp Machine system defines two representations for each of several
pathname components (the device, directory, name and type).  There is
the @i{raw} form, which is what actually appears in the filename on the
host file system, and there is the @i{interchange} form, which may
differ in alphabetic case from the raw form.  The raw form is what is
stored inside the pathname object itself, but programs nearly always
operate on the interchange form.  The @code{:name}, @code{:type}, etc.,
operations return the interchange form, and the @code{:new-name}, etc.,
operations expect the interchange form.  Additional operations
@code{:raw-name}, etc., are provided for working with the raw components,
but these are rarely needed.

The interchange form is defined so that it is always customarily in
upper case.  If upper case is customary on the host file system, then
the interchange form of a component is the same as the raw form.  If
lower case is customary on the host file system, as on Unix, then the
interchange form has case inverted.  More precisely, an all-upper-case
component is changed to all-lower-case, an all-lower-case component is
changed to all-upper-case, and a mixed-case component is not changed.
(This is a one-to-one mapping).  Thus, a Unix pathname with a name
component of @code{"foo"} has an interchange-format name of
@code{"FOO"}, and vice versa.

For host file systems which record case when files are created but
ignore case when comparing filenames, the interchange form is always
upper case.

The host component is not really a name, and case is always ignored in
host names, so there is no need for two forms of host component.  The
version component does not need them either, because it is never a string.

@subsection Pathname Component Operations

@defmethod pathname :host
@defmethodx pathname :device
@defmethodx pathname :directory
@defmethodx pathname :name
@defmethodx pathname :type
@defmethodx pathname :version
These return the components of the pathname, in interchange form.  The
returned values can be strings, special symbols, or lists of strings in
the case of structured components.  The type is always a string or
a symbol.  The version is always a number or a symbol.
@end defmethod

@defmethod pathname :raw-device
@defmethodx pathname :raw-directory
@defmethodx pathname :raw-name
@defmethodx pathname :raw-type
These return the components of the pathname, in raw form.
@end defmethod

@defmethod pathname :new-device dev
@defmethodx pathname :new-directory dir
@defmethodx pathname :new-name name
@defmethodx pathname :new-type type
@defmethodx pathname :new-version version
These return a new pathname that is the same as the pathname they are
sent to except that the value of one of the components has been changed.
The specified component value is interpreted as being in interchange
form, which means its case may be converted.  The @code{:new-device},
@code{:new-directory} and @code{:new-name} operations accept a string (or a
special symbol) or a list that is a structured name.  If the host does
not define structured components, and you specify a list, its first
element is used.
@end defmethod

@defmethod pathname :new-raw-device dev
@defmethodx pathname :new-raw-directory dir
@defmethodx pathname :new-raw-name name
@defmethodx pathname :new-raw-type type
These return a new pathname that is the same as the pathname they are
sent to except that the value of one of the components has been changed.
The specified component value is interpreted as raw.
@end defmethod

@defmethod pathname :new-suggested-name name
@defmethodx pathname :new-suggested-directory dir
These differ from the @code{:new-name} and @code{:new-directory} operations in
that the new pathname constructed has a name or directory based on the
suggestion, but not necessarily identical to it.  It tries, in a
system-dependent manner, to adapt the suggested name or directory to the
usual customs of the file system in use.

For example, on a TOPS-20 system, these operations would convert
@i{name} or @i{dir} to upper case, because while lower-case letters
@i{may} appear in TOPS-20 pathnames, it is not customary to generate
such pathnames by default.
@end defmethod

@defmethod pathname :new-pathname &rest options
This returns a new pathname that is the same as the pathname it is sent
to except that the values of some of the components have been changed.
@i{options} is a list of alternating keywords and values.  The keywords
all specify values of pathname components; they are @code{:host},
@code{:device}, @code{:directory}, @code{:name}, @code{:type}, and @code{:version}.
Alternatively, the keywords @code{:raw-device}, @code{:raw-directory},
@code{:raw-name} and @code{:raw-type} may be used to specify a component in
raw form.

Two additional keywords, @code{:canonical-type} and @code{:original-type},
allow the type field to be specified as a canonical type.  See the
following section for a description of canonical types.  Also, the value
specified for the keyword @code{:type} may be a canonical type symbol.

If an invalid component is specified, it is replaced by some valid
component so that a valid pathname can be returned.  You can tell
whether a component is valid by specifying it in @code{:new-pathname}
and seeing whether that component of the resulting pathname
matches what you specified.

The operations @code{:new-name}, etc., are equivalent to @code{:new-pathname}
specifying only one component to be changed; in fact, that is how those
operations are implemented.
@end defmethod

@subsection Canonical Types
@cindex canonical type (of a pathname)

@i{Canonical types} are a way of specifying a pathname type component
using host-dependent conventions without making the program itself
explicitly host dependent.  For example, the function @code{compile-file}
normally provides a default type of @code{"LISP"}, but on VMS systems the
default must be @code{"LSP"} instead, and on Unix systems it is @code{"l"}.
What @code{compile-file} actually does is to use a canonical type, the keyword
@code{:lisp}, as the default.  This keyword is given a definition as a
canonical type, which specifies what it maps into on various file
systems.

A single canonical type may have more than one mapping on a particular
file system.  For example, on TOPS-20 systems the canonical type
@code{:LISP} maps into either @code{"LISP"} or @code{"LSP"}.  One of the
possibilities is marked as ``preferred''; in this case, it is @code{"LISP"}.
The effect of this is that either @code{FOO.LISP} or @code{FOO.LSP} would be
acceptable as having canonical type @code{:lisp}, but merging
yields @code{"LISP"} as the type when defaulting from @code{:lisp}.

Note that the canonical type of a pathname is not a distinct component.
It is another way of describing or specifying the type component.

A canonical type must be defined before it is used.

@defmac fs:define-canonical-type symbol standard-mapping system-dependent-mappings...
Defines @i{symbol} as a canonical type.  @i{standard-mapping} is the
actual type component that it maps into (a string), with exceptions as
specified by @i{system-dependent-mappings}.  Each element of
@i{system-dependent-mappings} (that is, each additional argument) is a list of the form
@lisp
(@i{system-type} @i{preferred-mapping} @i{other-mappings}...)
@end lisp
@i{system-type} is one of the system-type keywords the @code{:system-type}
operation on a host object can return, such as @code{:unix}, @code{:tops20},
and @code{:lispm} (see (si:host-alist-var)).  The argument describes how
to map this canonical type on that type of file system.
@i{preferred-map} (a string) is the preferred mapping of the canonical
type, and @i{other-mappings} are additional strings that are accepted as
matching the canonical type.

@i{system-type} may also be a list of system types.  Then the argument
applies to all of those types of file systems.

All of the mapping strings are in interchange form.

For example, the canonical type @code{:lisp} is defined as follows:
@lisp
(fs:define-canonical-type :lisp "LISP"
  (:unix "L" "LISP")
  (:vms "LSP")
  ((:tops20 :tenex) "LISP" "LSP"))
@end lisp

Other canonical types defined by the system include @code{:qfasl},
@code{:text}, @code{:press}, @code{:qwabl}, @code{:babyl}, @code{:mail}, @code{:xmail},
@code{:init}, @code{:patch-directory}, @code{:midas}, @code{:palx}, @code{:unfasl},
@code{:widths}, @code{:output}, @code{mac}, @code{tasm}, @code{doc}, @code{mss}, @code{tex},
@code{pl1} and @code{clu}.  The standard mapping for each is the symbol's
pname.
@end defmac

To match a pathname against a canonical type, use the @code{:canonical-type} operation.

@defmethod pathname :canonical-type
Returns two values which describe whether and how this pathname's type
component matches any canonical type.

If the type component is one of the possible mappings of some canonical
type, the first value is that canonical type (the symbol).  The second
value is @code{nil} if the type component is the preferred mapping of the
canonical type; otherwise it is the actual type component, in
interchange form.  The second value is called the @i{original type} of
the pathname.

If the type component does not match a canonical type, the first value is the
type component in interchange form (a string), and the second value is @code{nil}.

This operation is useful in matching a pathname against a canonical
type; the first value is @code{eq} to the canonical type if the pathname
matches it.  The operation is also useful for transferring a type field
from one file system to another while preserving canonical type; this is
described below.
@end defmethod

A new pathname may also be constructed by specifying a canonical type.

@defmethod pathname :new-canonical-type canonical-type &optional original-type
Returns a pathname different from this one in having a type component
that matches @i{canonical-type}.

If @i{original-type} is a possible mapping for @i{canonical-type} on
this pathname's host, then it is used as the type component.  Otherwise,
the preferred mapping for @i{canonical-type} is used.  If
@i{original-type} is not specified, it defaults to this pathname's type
component.  If it is specified as @code{nil}, the preferred mapping of the
canonical type is always used.  If @i{canonical-type} is a string rather
than an actual canonical type, it is used directly as the type
component, and the @i{original-type} does not matter.

The @code{:new-pathname} operation accepts the keywords @code{:canonical-type}
and @code{:original-type}.  The @code{:new-canonical-type} operation is
equivalent to @code{:new-pathname} with those keywords.
@end defmethod

Suppose you wish to copy the file named @i{old-pathname} to a directory
named @i{target-directory-pathname}, possibly on another host, while
preserving the name, version and canonical type.  That is, if the original file
has a name acceptable for a QFASL file, the new file should also.
Here is how to compute the new pathname:
@lisp
(multiple-value-bind (canonical original)
    (send old-pathname :canonical-type)
  (send target-directory-pathname :new-pathname 
	:name (send old-pathname :name)
	:version (send old-pathname :version)
	:canonical-type canonical
	:original-type original))
@end lisp

Suppose that @i{old-pathname} is @code{OZ:<FOO>A.LISP.5}, where @code{OZ} is a
TOPS-20, and the target directory is on a VMS host.  Then @code{canonical} is
@code{:lisp} and @code{original} is @code{"LISP"}.  Since @code{"LISP"} is
not an acceptable mapping for @code{:lisp} on a VMS system, the resulting pathname
has as its type component the preferred mapping for @code{:lisp} on VMS,
namely, @code{"LSP"}.

But if the target host is a Unix host, the new file's type is
@code{"LISP"}, since that is an acceptable (though not preferred) mapping
for @code{:lisp} on Unix hosts.
If you would rather that the preferred mapping always be used for the
new file's type, omit the @code{:original-type} argument to the
@code{:new-pathname} operation.  This would result in a type component of
@code{"L"} in interchange form, or @code{"l"} in raw form, in the new file's pathname.

The function @code{compile-file} actually does something cleverer than using the
canonical type as a default.  Doing that, and opening the resulting
pathname, would look only for the preferred mapping of the canonical
type.  @code{compile-file} actually tries to open @i{each} possible mapping,
trying the preferred mapping first.  Here is how it does so:

@defmethod pathname :open-canonical-default-type canonical-type &rest options
If this pathname's type component is non-@code{nil}, the pathname is simply
opened, passing the @i{options} to the @code{:open} operation.  If the type
component is @code{nil}, each mapping of @i{canonical-type} is tried as a
type component, in the order the mappings appear in the canonical type
definition.  If an open succeeds, a stream is returned.  The
possibilities continue to be tried as long as @code{fs:file-not-found}
errors happen; other errors are not handled.  If all the possibilities fail,
a @code{fs:file-not-found} error is signaled for the caller, with a pathname
that contains the preferred mapping as its type component.
@end defmethod

@section  Defaults and Merging
@cindex default (pathname)
@cindex merge (pathname)

When the user is asked to type in a pathname, it is of course unreasonable
to require the user to type a complete pathname, containing all components.
Instead there are defaults, so that components not specified by the user can
be supplied automatically by the system.  Each program that deals with pathnames
typically has its own set of defaults.

The system defines an object called a @i{defaults alist}.  Functions are
provided to create one, get the default pathname out of one, merge a pathname
with one, and store a pathname back into one.  A defaults alist can remember
more than one default pathname if defaults are being kept separately for
each host; this is controlled by the variable @code{fs:*defaults-are-per-host*}.
The main primitive for using defaults is the function
@code{fs:merge-pathname-defaults} (see (fs:merge-pathname-defaults-fun)).

In place of a defaults alist, you may use just a pathname.  Defaulting one
pathname from another is useful for cases such as a program that has an input
file and an output file, and asks the user for the name of both, letting
the unsupplied components of one name default from the other.  Unspecified
components of the output pathname come from the input pathname, except
that the type should default not to the type of the input but to the appropriate
default type for output from this program.

The implementation of a defaults alist is an association list of host names
and default pathnames.  The host name @code{nil} is special and holds the
defaults for all hosts, when defaults are not per-host.

The @i{merging} operation takes as input a pathname, a defaults alist
(or another pathname), a default type, and a default version, and returns a
pathname.  Basically, the missing components in the pathname are filled
in from the defaults alist.  However, if a name is specified but the
type or version is not, then the type or version is treated specially.

Here are the merging rules in full detail.

If no host is specified, the host is taken from the defaults.  If the
pathname explicitly specifies a host and does not supply a device, then
the the default file device for that host is used.

If the pathname specifies a device named @code{DSK}, that is replaced with the
@i{working device} for the pathname's host, and the directory defaults to
the @i{working directory} for the host if it is not specified.  See
@code{fs:set-host-working-directory}, below.

Next, if the pathname does not specify a host, device, directory, or name,
that component comes from the defaults.

If the value of @code{fs:*always-merge-type-and-version*} is non-@code{nil},
the type and version are merged just like the other components.

If @code{fs:*always-merge-type-and-version*} is @code{nil}, as it normally
is, the merging rules for the type and version are more complicated
and depend on whether the pathname specifies a name.  If the pathname
doesn't specify a name, then the type and version, if not provided,
come from the defaults, just like the other components.  However,
if the pathname does specify a name, then the type and version come
from the @i{default-type} and @i{default-version} arguments to
@code{merge-pathname-defaults}.  If those arguments were omitted, the
value of @code{fs:*name-specified-default-type*} (initially, @code{:lisp})
is used as the default type, and @code{:newest} is used as the default
version.

The reason for this is that the type and version
``belong to'' some other filename, and are thought to be unlikely to have
anything to do
with the new filename you are typing in.

@defun fs:set-host-working-directory host pathname
Sets the @i{working device} and @i{working directory} for @i{host} to
those specified in @i{pathname}.  @i{host} should be a host object or the
name of a host.  @i{pathname} may be a string or a pathname.
The working device and working directory are used for defaulting pathnames
in which the device is specified as @code{DSK}.

The editor command @code{Meta-X Set Working Directory} provides a convenient
interface to this function.
@end defun

The following special variables are parts of the pathname interface
that are relevant to defaults.

@defvar fs:*defaults-are-per-host*
This is a user customization option intended to be set by a user's
@code{LISPM INIT} file (see (lispm-init-file)).  The default value is
@code{nil}, which means that each program's set of defaults contains only
one default pathname.  If you type in just a host name and a colon, the
other components of the name default from the previous host, with
appropriate translation to the new host's pathname syntax.  If
@code{fs:*defaults-are-per-host*} is set to @code{t}, each program's set of
defaults maintains a separate default pathname for each host.  If
you type in just a host name and a colon, the last file that was
referenced on that host is used. 
@end defvar

@defvar fs:*always-merge-type-and-version*
If this variable is non-@code{nil}, then the type and version are defaulted
only from the pathname defaults just like the other components.
@end defvar

@defvar fs:*name-specified-default-type*
If @code{fs:*always-merge-type-and-version*} is @code{nil}, then when a name is
specified but not a type, the type defaults from an argument to the
merging function.  If that argument is not specified, this variable's
value is used.  It may be a string or a canonical type keyword.  The
value is initially @code{:lisp}.
@end defvar

@defvar *default-pathname-defaults*
This is the default defaults alist; if the pathname primitives that need
a set of defaults are not given one, they use this one.  Most programs, however,
should have their own defaults rather than using these.
@end defvar

@defvar cli:*default-pathname-defaults*
The Common Lisp version of the default pathname defaults.  The value of
this variable is a pathname rather than an alist.  This variable is
magically (with a forwarding pointer) identified with a cell in the
defaults-alist which the system really uses, so that setting this
variable modifies the contents of the alist.
@end defvar

@defvar fs:last-file-opened
This is the pathname of the last file that was opened.  Occasionally
this is useful as a default.  Since some programs deal with files
without notifying the user, you must not expect the user to know what
the value of this symbol is.  Using this symbol as a default may cause
unfortunate surprises if you don't announce it first, and so such use is
discouraged.
@end defvar

@noindent
These functions are used to manipulate defaults alists directly.

@defun fs:make-pathname-defaults
Creates a defaults alist initially containing no defaults.  If you ask
this empty set of defaults for its default pathname before anything has
been stored into it you get the file @code{FOO} on the user's home
directory on the host he logged in to.
@end defun

@defun fs:copy-pathname-defaults defaults
Creates a defaults alist, initially a copy of @i{defaults}.
@end defun

@defun fs:default-pathname &optional defaults host default-type default-version
This is the primitive function for getting a default pathname out of a defaults alist.
Specifying the optional arguments @i{host}, @i{default-type}, and @i{default-version}
to be non-@code{nil} forces those fields of the returned pathname to contain those values.

If @code{fs:*defaults-are-per-host*} is @code{nil} (its default value), this gets the
one relevant default from the alist.  If it is @code{t}, this gets the default for
@i{host} if one is specified, otherwise for the host most recently used.

If @i{defaults} is not specified, the default defaults are used.

This function also has an additional optional argument @i{internal-p}, which is obsolete.
@end defun

@defun fs:default-host defaults
Returns the default host object specified by the defaults-alist @i{defaults}.
This is the host used by pathname defaulting with the given defaults
if no host is specified.
@end defun

@defun fs:set-default-pathname pathname &optional defaults
This is the primitive function for updating a set of defaults.  It
stores @i{pathname} into @i{defaults}.
If @i{defaults} is not specified, the default defaults are used.
@end defun

@section  Pathname Functions

@noindent
This function obtains a pathname from an object if that is possible.

@defun pathname object
Converts @i{object} to a pathname and returns that, if possible.  If
@i{object} is a string or symbol, it is parsed.  If @i{object} is a
plausible stream, it is asked for its pathname with the @code{:pathname}
operation.  If @i{object} is a pathname, it is simply returned.
Any other kind of @i{object} causes an error.
@end defun

@noindent
These functions are what programs use to parse and default file names
that have been typed in or otherwise supplied by the user.

@defun parse-namestring thing &optional host defaults &key (start @code{0}) end junk-allowed
Is the Common Lisp function for parsing file names.  It is equivalent to
@code{fs:parse-pathname} except in that it takes some keyword arguments where
the other function takes all positional arguments.
@end defun

@defun fs:parse-pathname thing &optional host defaults (start @code{0}) end junk-allowed
This turns @i{thing}, which can be a pathname, a string, a symbol, or a
Maclisp-style name list, into a pathname.  Most functions that are advertised
to take a pathname argument call @code{fs:parse-pathname} on it so that they can
accept anything that can be turned into a pathname.  If @code{thing} is itself
a pathname, it is returned unchanged.

If @i{thing} is a string, @i{start} and @i{end} are interpreted as
indices specifying a substring to parse.  They are just like
the second and third arguments to @code{substring}.  The rest of @i{thing} is
ignored.  @i{start} and @i{end} are ignored if @i{thing} is not a string.

If @i{junk-allowed} is non-@code{nil}, parsing stops without error if the
syntax is invalid, and this function returns @code{nil}.  The second value
is then the index of the invalid character.  If parsing is successful,
the second value is the index of the place at which parsing was supposed
to stop (@i{end}, or the end of @i{thing}).  If @i{junk-allowed} is
@code{nil}, invalid syntax signals an error.

This function does @i{not} do defaulting, even though it has an argument
named @i{defaults}; it only does parsing.  The @i{host} and @i{defaults}
arguments are there because in order to parse a string into a pathname,
it is necessary to know what host it is for so that it can be parsed with
the file name syntax peculiar to that host.  If @i{thing} does not contain
a manifest host name, then if @i{host} is non-@code{nil}, it is the host name
to use, as a string.  If @i{thing} is a string, a manifest host name may be
at the beginning or the end, and consists of the name of a host followed by a colon.
If @i{host} is @code{nil} then the host name is obtained
from the default pathname in @i{defaults}.  If @i{defaults} is not supplied,
the default defaults (@code{*default-pathname-defaults*}) are used.

Note that if @i{host} is specified, and @i{thing} contains a host name, an
error is signaled if they are not the same host.
@end defun

.defcondition fs:pathname-parse-error (@code{fs:pathname-error} @code{error})
This condition is signaled when @code{fs:parse-pathname} finds a syntax
error in the string it is given.

@code{fs:parse-pathname} sets up a nonlocal proceed type @code{:new-pathname}
for this condition.  The proceed type expects one argument, a pathname,
which is returned from @code{fs:parse-pathname}.
.end_defcondition

@defun fs:merge-pathname-defaults pathname &optional defaults default-type default-version
Fills in unspecified components of @i{pathname} from the defaults and returns
a new pathname.  This is the function that most programs should call to
process a file name supplied by the user.  @i{pathname} can be a pathname,
a string, a symbol, or a Maclisp namelist.  The returned value is always
a pathname.  The merging rules are documented on (pathname-merging-rules).

If @i{defaults} is a pathname, rather than a defaults alist, then the defaults
are taken from its components.  This is how you merge two pathnames.  (In Maclisp
that operation is called @code{mergef}.)

@i{defaults} defaults to the value of @code{*default-pathname-defaults*}
if unsupplied.  @i{default-type} defaults to the value of
@code{fs:*name-specified-default-type*}.  @i{default-version} defaults to @code{:newest}.
@end defun

@defun merge-pathnames pathname &optional defaults (default-version @code{:newest})
Is the Common Lisp function for pathname defaulting.  It does only some
of the things that @code{fs:merge-pathname-defaults} does.  It merges
defaults from @i{defaults} (which defaults to the value of
@code{*default-pathname-defaults*}) into @i{pathname} to get a new
pathname, which is returned.  @i{pathname} can be a string (or symbol);
then it is parsed and the result is defaulted.  @i{default-version} is
used as the version when pathname has a name but no version.
@end defun

@defun fs:merge-and-set-pathname-defaults pathname &optional defaults default-type default-version
This is the same as @code{fs:merge-pathname-defaults} except that after it
is done the defaults-list @i{defaults} is modified so that the merged
pathname is the new default.  This is handy for programs that have
sticky defaults, which means that the default for each command
is the last filename used.  (If @i{defaults} is a pathname rather than a
defaults alist, then no storing back is done.)  The optional arguments
default the same way as in @code{fs:merge-pathname-defaults}.
@end defun

@noindent
These functions convert a pathname into a namestring for all or some
of the pathname's components.

@defun namestring pathname
Returns a string containing the printed form of @i{pathname}, as you would type it in.
This uses the @code{:string-for-printing} operation.
@end defun

@defun file-namestring pathname
Returns a string showing just the name, type and version of @i{pathname}.
This uses the @code{:string-for-dired} operation.
@end defun

@defun directory-namestring pathname
Returns a string showing just the device and directory of @i{pathname}.
This uses the @code{:string-for-directory} operation.
@end defun

@defun enough-namestring pathname &optional defaults
Returns a string showing just the components of @i{pathname} which would
not be obtained by defaulting from @i{defaults}.  This is the shortest
string that would suffice to specify pathname, given those defaults.  It
is made by using the @code{:string-for-printing}  operation on a modified
pathname.
@end defun

@noindent
This function yields a pathname given its components.

@defun make-pathname &key (defaults @code{t}) host device raw-device directory raw-directory name raw-name type raw-type version canonical-type original-type
Returns a pathname whose components are as specified.

If @i{defaults} is a pathname or a defaults-alist, any components not
explicitly specified default from it.  If @i{defaults} is @code{t} (which
is the default), then unspecified components default to @code{nil}, except
for the host (since every pathname must have a specific host), which
defaults based on @code{*default-pathname-defaults*}.
@end defun

@noindent
These functions give the components of a pathname.

@defun pathname-host pathname
Returns the host component of @i{pathname}.
@end defun

@defun pathname-device pathname
@defunx pathname-directory pathname
@defunx pathname-name pathname
@defunx pathname-type pathname
@defunx pathname-version pathname
Likewise, for the other components
@end defun

@noindent
These functions return useful information.

@defun fs:user-homedir &optional host reset-p (user @code{user-id}) force-p
@defunx user-homedir-pathname &optional host reset-p (user @code{user-id}) force-p
@cindex home directory
Returns the pathname of the @i{user}'s home directory on @i{host}.
These default to the logged in user and the host logged in to.  Home
directory is a somewhat system-dependent concept, but from the point of
view of the Lisp Machine it is the directory where the user keeps
personal files such as init files and mail.

This function returns a pathname without any name, type, or version
component (those components are all @code{nil}).

If @i{reset-p} is specified non-@code{nil}, the machine the user is logged
in to is changed to be @i{host}.

The synonym @code{user-homedir-pathname} is from Common Lisp.
@end defun

@defun init-file-pathname program-name &optional host
@cindex init file
Returns the pathname of the logged-in user's init file for the program @i{program-name},
on the @i{host}, which defaults to the host the user logged in to.  Programs that load
init files containing user customizations call this function to find where to look
for the file, so that they need not know the separate init file name conventions of
each host operating system.  The @i{program-name} @code{"LISPM"} is used by the @code{login}
function.
@end defun

@noindent
These functions are useful for poking around.

@defun fs:describe-pathname pathname
If @i{pathname} is a pathname object, this describes it, showing you its properties
(if any) and information about files with that name that have been loaded into the
machine.  If @i{pathname} is a string, this describes all interned pathnames that
match that string, ignoring components not specified in the string.
One thing this is useful for is finding the directory of a file
whose name you remember.  Giving @code{describe} (see (describe-fun)) a pathname
object invokes this function.
@end defun

@defun fs:pathname-plist pathname
Parses and defaults @i{pathname}, then returns the list of properties of that pathname.
@end defun

@defvar fs:*pathname-hash-table*
This is the hash table in which pathname objects are interned.  You can
find all pathnames ever constructed by applying the function @code{maphash}
to this hash table.
@end defvar

@section  Generic Pathnames

@cindex generic pathname

A generic pathname stands for a whole family of files.  The property
list of a generic pathname is used to remember information about the
family, some of which (such as the package) comes from the 7-*-* line
(see (file-attribute-list))
of a source file in the family.  Several types of files with that name, in
that directory, belong together.  They are different members of the same
family; for example, they may be source code and compiled code.
However, there may be several other types
of files that form a logically distinct group even though they have
this same name; @code{TEXT} and @code{PRESS} for example.  The exact mapping is
done on a per host basis since it can sometimes be affected by host naming
conventions.

The generic pathname of pathname @i{p} usually has the same host,
device, directory, and name as @i{p} does.  However, it has a version of
@code{:unspecific}.  The type of the generic pathname is obtained by
sending a @code{:generic-base-type} @i{type-of-p} message to the host of
@i{p}.  The default response to this message is to return the associated
type from @code{fs:*generic-base-type-alist*} if there is one, else
@i{type-of-p}.  Both the argument and the value are either strings, in
interchange form, or canonical type symbols.

However, the ITS file system presents special problems.  One cannot
distinguish multiple generic base types in this same way since the type
component does not exist as such; it is derived from the second
filename, which unfortunately is also sometimes used as a version
number.  Thus, on ITS, the type of a generic pathname is always
@code{:unspecific} if there is any association for the type of the pathname
on @code{fs:*generic-base-type-alist*}. 

  Since generic pathnames are primarily useful for storing properties,
it is important that they be as standardized and conceptualized as possible.
For this reason, generic pathnames are defined to be backtranslated, i.e.
the generic pathname of a pathname that is (or could be) the result of a logical host
translation has the host and directory of the logical pathname.  For
example, the generic pathname of @code{OZ:<L.WINDOW>;STREAM LISP} would be
@code{SYS:WINDOW;STREAM  } if @code{OZ} is the system host.

  All version numbers of a particular pathname share the
same identical generic pathname.  If the values of particular properties have
changed between versions, it is possible for confusion to result.
One way to deal with this problem is to have the property be a list associating
version number with the actual desired property.  Then it is relatively
easy to determine which versions have which values for the property in question
and select one appropriately.  But in the applications for which
generic pathnames are typically used, this is not necessary.

The @code{:generic-pathname} operation on a pathname returns its
corresponding generic pathname.  See
(pathname-generic-pathname-method).  The @code{:source-pathname} operation
on a pathname returns the actual or probable pathname of the
corresponding source file (with @code{:newest} as the version).  See
(pathname-source-pathname-method).

@defvar fs:*generic-base-type-alist*
This is an association list of the file types and the type of the generic pathname
used for the group of which that file type is a part.  Constructing a generic
pathname replaces the file type with the association from this list, if there
is one (except that ITS hosts always replace with @code{:unspecific}).
File types not in this list are really part of the name in some sense.
The initial list is
@lisp
 ((:text . :text) ("DOC" . :text)
  (:press . :text) ("XGP" . :text)
  (:lisp . :unspecific) (:qfasl . :unspecific)
  (nil . :unspecific))
@end lisp
The association of @code{:lisp} and @code{:unspecific} is unfortunately made
necessary by the problems of ITS mentioned previously.  This way makes
the generic pathnames of logically mapped @code{LISP} files identical no
matter whether the logical host is mapped to an ITS host or not.

The first entry in the list with a particular cdr is the entry for
the type that source files have.  Note how the first element whose
cdr is @code{:unspecific} is the one for @code{:lisp}.  This is how the
@code{:source-pathname} operation knows what to do, by default.

Some users may need to add to this list.
@end defvar

The system records certain properties on generic pathnames
automatically.

@table @code
@item :warnings
This property is used to record compilation and other warnings for the
file.

@item :definitions
This property records all the functions and other things defined in the
file.  The value has one element for each
package into which the file has been loaded; the element's car is the
package itself and the cdr is a list of definitions made.

Each definition is a cons whose car is the symbol or function spec
defined and whose cdr is the type of definition (usually one of the
symbols @code{defun}, @code{defvar}, @code{defflavor} and @code{defstruct}).

@item :systems
This property's value is a list of the names of all the systems (defined
with @code{defsystem}, see (defsystem-fun)) of which this is a source file.

@item :file-id-package-alist
This property records what version of the file was most recently loaded.
In case the file has been loaded into more than one package, as is
sometimes necessary, the loaded version is remembered for each package
separately.  This is how @code{make-system} tells whether a file needs to
be reloaded.  The value is a list with an element for each package that
the file has been loaded into; the elements look like
@lisp
(package file-information)
@end lisp
@i{package} is the package object itself; @i{file-information}
is the value returned by the @code{:info} operation on a file stream, and
is usually a cons whose car is the truename (a pathname) and whose cdr
is the file creation date (a universal time number).
@end table

Some additional properties are put on the generic pathname by reading
the attribute list of the file (see (fs:read-attribute-list-fun)).  It
is not completely clear that this is the right place to store these
properties, so it may change in the future.  Any property name can
appear in the attributes list and get onto the generic pathname; the
standard ones are described in (file-attribute-list).

@section  Pathname Operations

This section documents the operations a user may send to a pathname
object.  Pathnames handle some additional operations that are only
intended to be sent by the file system itself, and therefore are not
documented here.  Someone who wants to add a new host to the system
would need to understand those internal operations.

The operations on pathnames that actually operate on files are
documented in (pathname-file-operations).  Certain pathname flavors,
for specific kinds of hosts, allow additional special purpose
operations.  These are documented in (specific-host-syntax) in the
section on the specific host type.

@defmethod pathname :generic-pathname
Returns the generic pathname for the family of files of which this pathname is a member.
See (generic-pathname) for documentation on generic pathnames.
@end defmethod

@defmethod pathname :source-pathname
Returns the pathname for the source file in the family of files to which
this pathname belongs.  The returned pathname has @code{:newest}
as its version.  If the file has been loaded in some fashion into the
Lisp environment, then the pathname type is that which the user actually
used.  Otherwise, the conventional file type for source files is determined
from the generic pathname.
@end defmethod

@defmethod pathname :primary-device
Returns the default device name for the pathname's host.  This is used
in generating the initial default pathname for a host.
@end defmethod

@noindent
Operations dealing with wildcards.
@cindex wildcards (in pathnames)

The character 7** in a namestring is a @i{wildcard}.
It means that the pathname is a really a pattern which
specifies a set of possible filenames rather than a single
filename.  The 7* matches any sequence of characters
within a single component of the name.  Thus, the component
@code{FOO*} would match @code{FOO}, @code{FOOBAR}, @code{FOOT},
or any other component starting with @code{FOO}.

Any component of a pathname can contain wildcards except the
host; wild hosts are not allowed because a known host is required
in order to know what flavor the pathname should be.
If a pathname component is written in the namestring as just 7**,
the actual component of the pathname instance is the keyword
@code{:wild}.  Components which contain wildcards but are not
simply a single wildcard are represented in ways subject to change.

Pathnames whose components contain wildcards are called
@i{wild} pathnames.  Wild pathnames useful in functions such as
@code{delete-file} for requesting the deletion of many files at once.
Less obviously but more fundamentally, wild pathnames are
required for most use of the function @code{fs:directory-list};
an entire directory's contents are obtained by specifying a
pathname whose name, type and version components are @code{:wild}.

@defmethod pathname :wild-p
Returns non-@code{nil} if this pathname contains any sort of wildcards.
If the value is not @code{nil}, it is a keyword, one of
@code{device}, @code{:directory}, @code{:name}, @code{:type} and
@code{:version}, and it identifies the `first' component
which is wild.
@end defmethod

@defmethod pathname :device-wild-p
@code{t} if this pathname's device contains any sort of wildcards.
@end defmethod

@defmethod pathname :directory-wild-p
@defmethodx pathname :name-wild-p
@defmethodx pathname :type-wild-p
@defmethodx pathname :version-wild-p
Similar, for the other components that can be wild.  (The host cannot
ever be wild.)
@end defmethod

@defmethod pathname :pathname-match candidate-pathname &optional (match-host-p @code{t})
Returns @code{t} if @code{candidate-pathname} matches the pathname
on which the operation is invoked (called, in this context, the
@i{pattern pathname}).  If the pattern pathname contains
no wildcards, the pathnames match only if they are identical.
This operation is intended in cases where wildcards are expected.

Wildcard matching is done individually by component; the operation
returns @code{t} only if each component matches.  Within each component,
an occurrencs of 7** in pattern pathname's component can match
any sequence of characters in @i{candidate-pathname}'s component.
Other characters, except for host-specific wildcards, must match exactly.
@code{:wild} as a component of the pattern pathname matches any component
that @i{candidate-pathname} may have.

Note that if a component of the pattern pathname is @code{nil},
@i{candidate-pathname}'s component must be @code{nil} also to match it.
Most user programs that read pathnames and use them as patterns
default unspecified components to @code{:wild} first.

Examples:
@lisp
(defvar pattern)
(defun test (str)
  (send pattern
        :pathname-match
        (parse-namestring str)))

(setq pattern
      (parse-namestring "OZ:*:<F*O>*.TEXT.*"))

(test "OZ:<FOO>A.TEXT") => t
(test "OZ:<FO>HAHA.TEXT.3") => t
(test "OZ:<FPPO>HAHA.TEXT.*") => t
(test "OZ:<FOX>LOSE.TEXT") => nil

(setq pattern
      (parse-namestring "OZ:*:<*>A.TEXT*.5"))

(test "OZ:<FOO>A.TEXT.5") => t
(test "OZ:<FOO>A.TEXTTTT.5") => t
(test "OZ:<FOO>A.TEXT") => nil
@end lisp

If @i{match-host-p} is @code{nil}, then the host components of
the two pathnames are not tested.  The result then depends only
on the other components.
@end defmethod

@defmethod pathname :translate-wild-pathname target-pattern starting-data &optional reversible
Returns a pathname corresponding to @i{starting-data} under the mapping
defined by the wild pathnames @i{source-pattern}, which is the
pathname this operation is invoked on, and @i{target-pattern}, the argument.
It is expected that @i{starting-data} would match
the source pattern under the @code{:pathname-match} operation.

@code{:translate-wild-pathname} is used by functions such as
@code{copy-file} which use one wild pathname to
specify a set of files and a second wild pathname to specify
a corresponding filename for each file in the set.
The first wild pathname would be used as the source-pattern
and the second, specifying the name to copy each file to,
would be passed as the @i{target-pattern} pathname.

Each component of the result is computed individually from the corresponding
components of @i{starting-data} and the pattern pathnames, using the
following rules:
@table @strong
@item 1)
If @i{target-pattern}'s component is @code{;wild},
then the result component is taken from @i{starting-data}.

@item 2)
Otherwise, each non-wild character in @i{target-pattern}'s component
is taken literally into the result.  Each wild character in
@i{target-pattern}'s component is paired with a wild character in
@i{source-pattern}'s component, and thereby with the portion of
@i{starting-data}'s component which that matched.  This portion
of @i{starting-data} appears in the result in place of the wild
target character.
@end table

Example:
@lisp
(setq source (fs:parse-pathname "OZ:PS:<FOO>A*B*.*.*"))
(setq target (fs:parse-pathname "OZ:SS:<*>*LOSE*.*B.*"))

(send source :translate-wild-pathname target
      (fs:parse-pathname "OZ:PS:<FOO>ALIBI.LISP.3"))
 => @i{the pathname }OZ:SS:<FOO>LILOSEI.LISPB.3
@end lisp

It is easiest to understand the mapping as being done
in interchange case: the interchange components of the
arguments are used and the results specify the interchange
components of the value.

The type component is slightly special; if the @i{target-pattern} type
is @code{:wild}, the canonical type of @i{starting-data} is taken
and then interpreted according to the mappings of the target host.
Example:
@lisp
(setq source (fs:parse-pathname "OZ:PS:<FOO>A*.*.*"))
(setq target (fs:parse-pathname "U://usr//foo//b*.*"))

(send source :translate-wild-pathname target
      (fs:parse-pathname "OZ:PS:<FOO>ALL.LISP"))
 => @i{the pathname }U:/usr/foo/bll.l
@end lisp

If @i{reversible} is non-@code{nil}, rule 1 is not used;
rule 2 controls all mapping.  This mode is used by logical
pathname translation.  It makes a difference when
the target pattern component is @code{:wild} and the source
pattern component contains wildcards but is not simply
@code{:wild}.  For example, with source and target pattern
components @code{BIG7*}* and 7**, and starting data
@code{BIGGER}, the result is ordinarily @code{BIGGER} by rule 1,
but with reversible translation the result is @code{GER}.
@end defmethod

@noindent
Operations to get a path name string out of a pathname object:

@defmethod pathname :string-for-printing
Returns a string that is the printed representation of the path name.  This is
the same as what you get if you @code{princ} the pathname or take @code{string} of it.
@end defmethod

@defmethod pathname :string-for-wholine length
Returns a string like the @code{:string-for-printing}, but designed to fit
in @i{length} characters.  @i{length} is a suggestion; the actual
returned string may be shorter or longer than that.  However, the
who-line updater truncates the value to that length if it is longer.
@end defmethod

@defmethod pathname :string-for-editor
Returns a string that is the pathname with its components rearranged so
that the name is first.  The editor uses this form to name its buffers.
@end defmethod

@defmethod pathname :string-for-dired
Returns a string to be used by the directory editor.  The string contains only
the name, type, and version.
@end defmethod

@defmethod pathname :string-for-directory
Returns a string that contains only the device and directory of
the pathname.  It identifies one directory among all directories on the host.
@end defmethod

@defmethod pathname :string-for-host
Returns a string that is the pathname the way the host file system likes to see it.
@end defmethod

@noindent
Operations to move around through a hierarchy of directories:

@defmethod pathname :pathname-as-directory
Assuming that the file described by the pathname is a directory,
return another pathname specifying that @i{as} a directory.
Thus, if sent to a pathname @code{OZ:<RMS>FOO.DIRECTORY}, it would return the
pathname @code{OZ:<RMS.FOO>}.  The name, type and version of the returned
pathname are @code{:unspecific}.
@end defmethod

@defmethod pathname :directory-pathname-as-file
This is the inverse of the preceding operation.  It returns a pathname
specifying as a file the directory of the original pathname.  The name,
type and version of the original pathname are ignored.
@end defmethod

The special symbol @code{:root} can be used as the directory component of a
pathname on file systems that have a root directory.

@noindent
Operations to manipulate the property list of a pathname:

@defmethod pathname :get property-name &optional default-value
@defmethodx pathname :getl list-of-property-names
@defmethodx pathname :putprop value property-name
@defmethodx pathname :remprop property-name
@defmethodx pathname :plist
These manipulate the pathname's property list, and are used if you call
the property list functions of the same names (see (get-fun)) giving
the pathname as the first argument.  Please read the paragraph on
(pathname-plist-warning) explaining the care you must take in using
property lists of pathnames.
@end defmethod

@c omitted:
@c init-file because it's internal

@section  Host File Systems Supported

This section lists the host file systems supported, gives an example
of the pathname syntax for each system, and discusses any special idiosyncracies.
More host types may be added in the future.

@subsection ITS

@cindex ITS pathnames

An ITS pathname looks like @code{"@i{host}: @i{device}: @i{dir}; @i{name} @i{type-or-version}"}.
The primary device is @code{DSK:} but other devices such as @code{ML:}, @code{ARC:},
@code{DVR:}, or @code{PTR:} may be used.

ITS does not exactly fit the virtual file system model, in that a file
name has two components (FN1 and FN2) rather than three (name, type, and
version).  Consequently to map any virtual pathname into an ITS
filename, it is necessary to decide whether the FN2 is the type or
the version.  The rule is that usually the type goes in the FN2 and the
version is ignored; however, certain types (@code{LISP} and @code{TEXT}) are
ignored and instead the version goes in the FN2.  Also if the type is @code{:unspecific}
the FN2 is the version.

Given an ITS filename, it is converted into a pathname by making the FN2
the version if it is `<', `>', or a number.  Otherwise the FN2 becomes
the type.  ITS pathnames allow the special version symbols @code{:oldest}
and @code{:newest}, which correspond to `<' and `>' respectively.

In every ITS pathname either the version or the type is @code{:unspecific}
or @code{nil}; sometimes both are.  When you create a new ITS pathname, if
you specify only the version or only the type, the one not specified
becomes @code{:unspecific}.  If both are specified, the version is
@code{:unspecific} unless the type is a normally-ignored type (such as
@code{LISP}) in which case the version is @code{:newest} and the type is
@code{:unspecific} so that numeric FN2's are found.

Each component of an ITS pathname is mapped to upper case and truncated to
six characters.

Special characters (space, colon, and semicolon) in a component of an ITS pathname
can be quoted by prefixing them with right horseshoe (7*)
or equivalence sign (7*).  Right horseshoe is the same character code in the
Lisp Machine character set as control-Q in the ITS character set.

An ITS pathname can have a structured name, which is a list of two strings,
the FN1 and the FN2.  In this case there is neither a type nor a version.

An ITS pathname with an FN2 but no FN1 (i.e. a type and/or version but no name)
is represented with the placeholder FN1 `7*', because ITS pathname syntax
provides no way to write an FN2 without an FN1 before it.

The ITS init file naming convention is @code{"@i{homedir}; @i{user} @i{program}"}.

@defvar fs:*its-uninteresting-types*
The ITS file system does not have separate file types and version numbers;
both components are stored in the ``FN2''.  This variable is a list of the file
types that are ``not important''; files with these types use the FN2 for a version
number.  Files with other types use the FN2 for the type and do not have a version
number.  The initial list is
@lisp
("LISP" "TEXT" nil :unspecific)
@end lisp
Some users may need to add to this list.
@end defvar

@defmethod its-pathname :fn1
@defmethodx its-pathname :fn2
These two operations return a string that is the FN1 or FN2 host-dependent
component of the pathname.
@end defmethod

@defmethod pathname :type-and-version
@defmethodx pathname :new-type-and-version new-type new-version
These two operations provide a way of pretending that ITS pathnames can
have both a type and a version.  They use the first three characters of
the FN2 to store a type and the last three to store a version number.

On an ITS-pathname,
@code{:type-and-version} returns the type and version thus extracted (not
the same as the type and version of the pathname).
@code{:new-type-and-version} returns a new pathname constructed from the
specified new type and new version.

On any other type of pathname, these operations simply return or set
both the type component and the version component.
@end defmethod

@subsection TOPS-20 (Twenex), Tenex, and VMS.

@cindex TOPS-20 pathnames
@cindex Twenex pathnames

A pathname on TOPS-20 (better known as Twenex) looks like
@lisp
@i{host}:@i{device}:<@i{directory}>@i{name}.@i{type}.@i{version}
@end lisp
The primary device is @code{PS:}.

TOPS-20 pathnames are mapped to upper case.  Special characters (including
lower-case letters) are quoted with the circle-cross (7*) character, which
has the same character code in the Lisp Machine character set as Control-V,
the standard Twenex quoting character, in the ASCII character set.

If you specify a period after the name, but nothing after that,
then the type is @code{:unspecific}, which translates into an empty
extension on the TOPS-20 system.  If you omit the period, you have
allowed the type to be defaulted.

TOPS-20 pathnames allow the special version symbols @code{:oldest} and
@code{:newest}.  In the string form of a pathname, these are expressed as
`@code{.-2}', and as an omitted version.

The directory component of a TOPS-20 pathname may be structured.  The
directory @code{<FOO.BAR>} is represented as the list @code{("FOO" "BAR")}.

The characters @code{*} and @code{%} are wildcards that match any sequence of
characters and any single character (within one pathname component),
respectively.  To specify a filename that actually contains a @code{*} or
@code{%} character, quote the character with @code{}.  When a component is
specified with just a single @code{*}, the symbol @code{:wild} appears in the
pathname object.

The TOPS-20 init file naming convention is @code{"<@i{user}>@i{program}.INIT"}.

When there is an attempt to display a TOPS-20 file name in the who-line and
there isn't enough room to show the entire name, the name is truncated
and followed by a center-dot character to indicate that there is more to
the name than can be displayed.

@cindex Tenex pathnames
Tenex pathnames are almost the same as TOPS-20 pathnames, except that
the version is preceeded by a semi-colon instead of a period, the
default device is @code{DSK} instead of @code{PS}, and the quoting
requirements are slightly different.

@cindex VMS pathnames
@cindex very mangled software

VMS pathnames are basically like TOPS-20 pathnames, with a few
complexities.  The primary device is @code{USRD$}.

First of all, only alphanumeric characters are allowed in filenames
(though @code{$} and underscore can appear in device names).

Secondly, a version number is preceded by `@code{;}' rather than by `@code{.}'.

Thirdly, file types (called ``extensions'' in VMS terminology) are
limited to three characters.  Each of the system's canonical types has a
special mapping for VMS pathnames, which is three characters long:
@lisp
:lisp  LSP	:text  TXT	:qfasl  QFS	:midas  MID
:press  PRS	:widths  WID	:patch-directory  PDR
:qwabl  QWB	:babyl  BAB	:mail  MAI	:xmail  XML
:init  INI 	:unfasl  UNF	:output  OUT
@end lisp

@subsection Unix and Multics Pathnames
@cindex Unix pathnames

A Unix pathname is a sequence of directory or file names separated by
slashes.  The last name is the filename; preceding ones are directory
names (but directories are files anyway).  There are no devices or
versions.  Alphabetic case is significant in Unix pathnames, no case
conversion is normally done, and lower case is the default.  Therefore,
components of solid upper or lower case are inverted in case when going
between interchange form and raw form.  (What the user types in a
pathname string is the raw form.)

Unix allows you to specify a pathname relative to your default directory
by using just a filename, or starting with the first subdirectory name;
you can specify it starting from the root directory by starting with
a slash.  In addition, you can start with `@code{..}' as a directory name one
or more times, to refer upward in the hierarchy from the default
directory.

Unix pathnames on the Lisp Machine provide all these features too, but
the canonicalization to a simple descending list of directory names
starting from the root is done on the Lisp Machine itself when you merge
the specified pathname with the defaults.

If a pathname string starts with a slash, the pathname object that
results from parsing it is called ``absolute''.  Otherwise the pathname
object is called ``relative''.

In an absolute pathname object, the directory component is either a
symbol (@code{nil}, @code{:unspecific} or @code{:root}), a string, or a list of
strings.  A single string is used when there is only one level of
directory in the pathname.

A relative pathname has a directory that is a list of the symbol
@code{:relative} followed by some strings.  When the pathname is merged
with defaults, the strings in the list are appended to the strings
in the default directory.  The result of merging is always an absolute
pathname.

In a relative pathname's string form, the string ``@code{..}'' can be used as a
directory name.  It is translated to the symbol @code{:up} when the string
is parsed.  That symbol is processed when the relative pathname is
merged with the defaults.

Restrictions on the length of Unix pathnames require abbreviations for
the standard Zetalisp pathname types, just as for VMS.  On Unix the
preferred mappings of all canonical types are one or two characters
long.  We give here the mappings in raw form; they are actually
specified in interchange form.
@lisp
:lisp  l	:text  tx	:qfasl  qf	:midas  md
:press  pr	:widths  wd	:patch-directory  pd
:qwabl  qw	:babyl  bb	:mail  ma	:xmail  xm
:init  in	:unfasl  uf	:output  ot
@end lisp

@cindex Multics pathnames

The Multics file system is much like the Unix one; there are absolute
and relative pathnames, absolute ones start with a directory delimiter,
and there are no devices or versions.  Alphabetic case is significant.

There are differences in details.  Directory names are terminated, and
absolute pathnames begun, with the character `@code{>}'.  The containing
directory is referred to by the character `@code{<}', which is complete in
itself.  It does not require a delimiter.  Thus, @code{<<FOO>BAR} refers to
subdirectory @code{FOO}, file @code{BAR} in the superdirectory of the superdirectory
of the default directory.

The limits on filename sizes are very large, so the system canonical
types all use their standard mappings.  Since the mappings are specified
as upper case, and then interpreted as being in interchange form, the
actual file names on Multics contain lower case.

@subsection Lisp Machine File Systems
@cindex Lisp machine pathnames

There are two file systems that run in the MIT Lisp Machine system.
They have different pathname syntax.  Both can be accessed either
remotely like any other file server, or locally.

@cindex Local-File pathnames

The Local-File system uses host name @code{LM} for the machine you are on.
A Local-File system on another machine can be accessed using the name of
that machine as a host name, provided that machine is known as a file
server.

The remainder of the pathname for the Local-File system looks like
@code{"@i{directory}; @i{name}.@i{type}#@i{version}"}.  There is no restriction on the length
of names; letters are converted to upper case.  Subdirectories are
allowed and are specified by putting periods between the directory
components, as in @code{RMS.SUBDIR;}.

The TOPS-20 pathname syntax is also accepted.  In addition, if the flag
@code{fs:*lmfs-use-twenex-syntax*} is non-@code{nil}, Local-File pathnames
print out using TOPS-20 syntax.  Note that since the printed representation
of a pathname is cached, changing this flag's value does not change the
printing of pathnames with existing representations.

The Local-File system on the filecomputer at MIT has the host name @code{FS}.

@cindex LMFILE pathnames

The LMFILE system is primarily for use as a file server, unless you have
512k of memory.  At MIT it runs on the filecomputer and is accessed
remotely with host name @code{FC}.

The remainder of an LMFILE pathname looks like @code{"@i{directory};
@i{name} @i{type}#@i{version}"}.  However, the directory and name can
be composed of any number of subnames, separated by backslashes.  This
is how subdirectories are specified.  @code{FOO;BAR\X} refers to the same
file as @code{FOO\BAR;X}, but the two ways of specifying the file have
different consequences in defaulting, getting directory listings, etc.

Case is significant in LMFILE pathnames; however, when you open a file,
the LMFILE system ignores the case when it matches your pathname against
the existing files.  As a result, the case you use matters when you
create or rename a file, and appears in directory listings, but it is
ignored when you refer to an existing file, and you cannot have two
files whose names differ only in case.  When components are accessed in
interchange form, they are always converted to upper case.

@subsection Logical Pathnames
@cindex logical pathnames

There is another kind of pathname that doesn't correspond to any
particular file server.  It is called a @i{logical} pathname, and its host
is called a logical host.  Every logical pathname can be translated
into a corresponding @i{physical} pathname because each logical host
records a corresponding actual (``physical'') host and rules for translating
the other components of the pathname.

The reason for having logical pathnames is to make it easy to keep
bodies of software on more than one file system.  An important example
is the body of software that constitutes the Lisp Machine system.  Every
site has a copy of all of the sources of the programs that are loaded
into the initial Lisp environment.  Some sites may store the sources on
an ITS file system, while others may store them on a TOPS-20.  However,
system software (including @code{make-system}) wishes to be able to find a
particular file independent of the name of the host a particular site
stores it on, or even the kind of host it is.  This is done by means of
the logical host @code{SYS}; all pathnames for system files are actually
logical pathnames with host @code{SYS}.  At each site, @code{SYS} is defined
as a logical host, but translations are different at each site.  For
example, at MIT the source files are stored on the TOPS-20 system named
OZ, so MIT's site file says that @code{SYS} should translate to the host
@code{OZ}.

Each logical host, such as @code{SYS}, has a list of translations, each of
which says how to map certain pathnames for that host into pathnames for
the corresponding physical host.  To translate a logical pathname, the
system tests each of the logical host's translations, in sequence, to see if it is applicable.
(If none is applicable, an error is signaled.)  A translation
consists of a pair of pathnames or namestrings, typically containing
wildcards.  Unspecified components in them default to @code{:wild}.  The
@i{from}-pathname of the translation is used to match against the
pathname to be translated; if it matches, the corresponding
@i{to}-pathname is used to construct the translation, filling in its
wild fields from the pathname being translated as in the
@code{:translate-wild-pathname} operation
((pathname-translate-wild-pathname-method)).

Most commonly the translations contain pathnames that have only
directories specified, everything else wild.  Then the other components
are unchanged by translation.

If the files accessed through the logical host are moved, the translations
can be changed so that the same logical pathnames refer to the same files
on their new physical host via physical pathnames changed to fit
the restrictions and the conventions of the new physical host.

Each translation is specified as a list of two strings.  The strings
are parsed into pathnames and any unspecified components are defaulted
to @code{:wild}.  The first string of the pair is the source pattern;
it is parsed with logical pathname syntax.  The second string is the
target pattern, and it is parsed with the pathname syntax for the
specified physical host.

For example, suppose that logical host @code{FOO} maps to physical host
@code{BAR}, a Tops-20, and has the following list of translations:
@lisp
(("BACK;" "PS:<FOO.BACK>")
 ("FRONT;* QFASL" "SS:<FOO.QFASL>*.QFASL")
 ("FRONT;" "PS:<FOO.FRONT>"))
@end lisp
Then all pathnames with host @code{FOO} and directory @code{BACK}
translate to host @code{BAR}, device @code{PS} and directory @code{<FOO.BACK>}
with name, type and version unchanged.
All pathnames with host @code{FOO}, directory @code{FRONT} and
type @code{QFASL} translate to host @code{BAR}, device @code{SS},
directory @code{<FOO.QFASL>} and type @code{QFASL}, with name
and version unchanged.  All other pathnames with host @code{FOO}
and directory @code{FRONT} map to host @code{BAR}, device @code{PS}
and directory @code{<FOO.FRONT>}, with name, type and version
unchanged.  Note that the first translation whose pattern
matches a given pathname is the one that is used.

Another site might define @code{FOO}'s to map to a Unix host
@code{QUUX}, with the following translation list:
@lisp
(("BACK;" "//nd//foo//back//")
 ("FRONT;" "//nd//foo//front//"))
@end lisp
This site apparently does not see a need to store the @code{QFASL}
files in a separate directory.  Note that the slashes are duplicated
to quote them for Lisp; the actual namestrings contain single slashes
as is usual with Unix.

If the last translation's source pattern is entirely wild, it applies
to any pathname not so far handled.  Example:
@lisp
(("BACK;" "//nd//foo//back//")
 ("" "//nd//foo1//*//"))
@end lisp

Physical pathnames can also be @i{back-translated} into the
corresponding logical pathname.  This is the inverse transformation
of ordinary translation.  It is necessary to specify which logical
host to back translate for, as it may be that the same physical
pathname could be the translation of different logical pathnames
on different hosts.  Use the @code{:back-translated-pathname} operation,
below.

@defun fs:add-logical-pathname-host logical-host physical-host translations
@defunx fs:set-logical-pathname-host logical-host &key physical-host translations
Both create a new logical host named @i{logical-host}.  Its
corresponding physical host (that is, the host to which it should
forward most operations) is @i{physical-host}.  @i{logical-host} and
@i{physical-host} should both be strings.  @i{translations} should be a
list of translation specifications, as described above.
The two functions differ only in that one accepts positional
arguments and the other accepts keyword arguments.
Example:
@lisp
(add-logical-pathname-host "MUSIC" "MUSIC-10-A"
      '(("MELODY;" "SS:<MELODY>")
        ("DOC;" "PS:<MUSIC-DOCUMENTATION>")))
@end lisp

This creates a new logical host called @code{MUSIC}.  An attempt to open the
file @code{MUSIC:DOC;MANUAL  TEXT  2} will be re-directed to the file
@code{MUSIC-10-A:PS:<MUSIC-DOCUMENTATION>MANUAL.TEXT.2} (assuming that the
host @code{MUSIC-10-A} is a TOPS-20 system).
@end defun

@defun fs:make-logical-pathname-host name
Requests that the definition of logical host @i{name} be
loaded from a standard place in the file system: namely,
the file @code{SYS: SITE; @i{name} TRANSLATIONS}.
This file is loaded immediately with @code{load}, in
the @code{fs} package.
It should contain code to create the logical host;
normally, a call to @code{fs:set-logical-pathname-host} or
@code{fs:add-logical-pathname-host}, above.

The same file is automatically reloaded, if it has been changed,
at appropriate times: by @code{load-patches}, and whenever
site information is updated.
@end defun

@defmethod fs:logical-pathname :translated-pathname
Converts a logical pathname to a physical pathname.  It returns the
translated pathname of this instance, a pathname whose host
component is the physical host that corresponds to this instance's
logical host.

If this operation is applied to a physical pathname, it simply returns
that pathname unchanged.
@end defmethod

@defmethod fs:logical-pathname :back-translated-pathname pathname
Converts a physical pathname to a logical pathname.
@i{pathname} should be a pathname whose host is the physical host
corresponding to this instance's logical host.  This returns
a pathname whose host is the logical host and whose translation
is @i{pathname}.  If @i{pathname} is not the translation
of any logical pathname on this instance's host, @code{nil} is returned.

Here is an example of how this would be used in connection with truenames.
Given a stream that was obtained by opening a logical pathname,
@lisp
(send stream :pathname)
@end lisp
returns the logical pathname that was opened.
@lisp
(send stream :truename)
@end lisp
returns the true name of the file that is open, which of course is
a pathname on the physical host.  To get this in the form of a logical
pathname, one would do
@lisp
(send (send stream :pathname)
      :back-translated-pathname
      (send stream :truename))
@end lisp

If this operation is applied to a physical pathname, it simply returns its
argument.  Thus the above example works no matter what kind of
pathname was opened to create the stream.
@end defmethod

.defcondition fs:unknown-logical-pathname-translation (@code{fs:pathname-error} @code{error})
This is signaled when a logical pathname has no translation.
The condition instance supports the @code{:logical-pathname} operation,
which returns the pathname that was untranslatable.

The proceed type @code{:define-directory} is supported.
It expects a single argument, a pathname or a string to be parsed into one.
This defines the target pattern for a translation whose source pattern
is the directory from the untranslatable pathname (and all else wild).
Such a translation is added to the logical host, making it possible
to translate the pathname.
.end_defcondition

A logical pathname looks like @code{"@i{host}: @i{directory}; @i{name} @i{type} @i{version}"}.
There is no way to specify a device; parsing a logical pathname
always returns a pathname whose device component is @code{:unspecific}.
This is because devices don't have any meaning in logical pathnames.

The equivalence-sign character (@code{}) can be used for quoting special
characters such as spaces and semicolons.  The double-arrow character
(`@code{}') can be used as a place-holder for components that are @code{nil},
and the up-horseshoe (`@code{}') indicates @code{:unspecific} (generic pathnames
typically have @code{:unspecific} as the type and the version).
All letters are mapped to upper case unless quoted.  The @code{:newest}, @code{:oldest},
and @code{:wild} values for versions are written as
`@code{>}', `@code{<}', and `@code{*}' respectively.

There isn't any init file naming convention for logical hosts; you
can't log into them.  The @code{:string-for-host},
@code{:string-for-wholine}, @code{:string-for-dired}, and @code{:string-for-editor} messages are all
passed on to the translated pathname, but the @code{:string-for-printing}
is handled by the @code{fs:logical-pathname} flavor itself and shows
the logical name.

@subsection Editor Buffer Pathnames

The hosts @code{ED}, @code{ED-BUFFER} and @code{ED-FILE} are used in pathnames
which refer to buffers in the editor.  If you open such a pathname, you
get a stream that reads or writes the contents of an editor buffer.  The
three host names differ only in the syntax of the pathname, and in how
it is interpreted.

The host @code{ED} is followed by an abbreviation that should complete to
the name of an existing editor buffer.  For example, the pathname
@code{ED:FOO} could refer to the buffer @code{FOO.LISP PS:<ME> OZ:}.

The host @code{ED-BUFFER} is followed by an exact buffer name.  If there is
no buffer with that name, one is created.  This is most useful for
creating a buffer.

The host @code{ED-FILE} is followed by an arbitrary pathname, including a
host name.  An @code{ED-FILE} pathname refers to a buffer visiting that
file.  If necessary, the file is read into the editor.  For example,
@code{ED-FILE: OZ: PS:<ME>FOO.LISP} would refer to the same buffer as
@code{ED: FOO}.  The current default defaults are used in processing the
pathname that follows @code{ED-FILE}, when the pathname is parsed.

@section  Hosts
@cindex host objects

Each host known to the Lisp Machine is represented by a flavor instance
known as a host object.  The host object records such things as the name(s)
of the host, its operating system type, and its network address(es).
Host objects print like @code{#FS:TOPS20-CHAOS-HOST "MIT-OZ"}, so they
can be read back in.

Not all hosts support file access.  Those that do support it appear on the list
@code{fs:*pathname-host-list*} and can be the host component of pathnames.
A host object is also used as an argument when you make a Chaosnet
connection for any purpose.

The hosts that you can use for making network connections appear in the
value of @code{si:host-alist}.  Most of the hosts you can use for pathnames
are among these; but some, such as logical hosts, are not.

@subsection Parsing Hostnames

@defun si:parse-host namestring &optional no-error-p (unknown-ok @code{t})
Returns a host object that recognizes the specified name.
If the name is not recognized, it is an error, unless @i{no-error-p} is
non-@code{nil}; in that case, @code{nil} is returned.

If @i{unknown-ok} is non-@code{nil} (the default), a host table server on the
local network is contacted, to see if perhaps it can find the name there.  If
it can't, an error is signalled or @code{nil} is returned, according to
@i{no-error-p}.  The host instance created in this manner contains all the kinds
of information that a host defined from the host table file has.

If a string of the form @code{CHAOS|}@i{nnn} is used, a host object is
created and given @i{nnn} (interpreted as octal) as its Chaosnet
address.  This can be done regardless of the @i{unknown-ok} argument.

The first argument is allowed to be a host object instead of a string.
In this case, that argument is simply returned.
@end defun

.defcondition sys:unknown-host-name (@code{sys:local-network-error} @code{sys:network-error} @code{error})
This condition is signaled by @code{si:parse-host} when the
host is not recognized, if that is an error.

The @code{:name} operation on the condition instance returns the string
given to @code{si:parse-host}.
.end_defcondition

@defun si:get-host-from-address address network
Returns a host object given an address and the name of the network which
that address is for.  Usually the symbol @code{:chaos} is used as the
network name.

@code{nil} is returned if there is no known host with that address.
@end defun

@defun fs:get-pathname-host name &optional no-error-p
Returns a host object that can be used in pathnames.
If the name is not recognized, it is an error, unless @i{no-error-p} is
non-@code{nil}; in that case, @code{nil} is returned.

The first argument is allowed to be a host object instead of a string.
In this case, that argument is simply returned.

@code{si:parse-host} and @code{fs:get-pathname-host} differ in the set of
hosts searched.
@end defun

.defcondition fs:unknown-pathname-host (@code{fs:pathname-error} @code{error})
This condition is signaled by @code{fs:get-pathname-host} when the
host is not recognized, if that is an error.

The @code{:name} operation on the condition instance returns the string
given to @code{fs:get-pathname-host}.
.end_defcondition

@defvar fs:*pathname-host-list*
This is a list of all the host objects that support file access.
@end defvar

@defvar si:host-alist
This variable is a list of one element for each known network host.
The element looks like this:
@lisp
(@i{full-name} @i{host-object} (@i{nickname} @i{nickname2} ... @i{full-name})
 @i{system-type} @i{machine-type} @i{site}
 @i{network} @i{list-of-addresses} @i{network2} @i{list-of-addresses2} ...)
@end lisp
The @i{full-name} is the host's official name.  The @code{:name} operation on
the host object returns this.

The @i{host-object} is a flavor instance that represents this host.
It may be @code{nil} if none has been created yet; @code{si:parse-host}
creates them when they are referred to.

The @i{nickname}s are alternate names that @code{si:parse-host} should
recognize for this host, but which are not its official name.

The @i{system-type} is a symbol that tells what software the
host runs.  This is used to decide what flavor of host object to
construct.  Symbols now used include @code{:lispm}, @code{:its}, @code{:tops-20},
@code{:tenex}, @code{:vms}, @code{:unix}, @code{:multics}, @code{:minits}, @code{:waits},
@code{:chaos-gateway}, @code{:dos}, @code{:rsx}, @code{:magicsix}, @code{:msdos}, and others.
Not all of these are specifically understood in any way by the Lisp Machine.
If none of these applies to a host you wish to add, use a new symbol.

The @i{machine-type} is a symbol that describes the hardware of the
host.  Symbols in use include @code{:lispm}, @code{:pdp10}, @code{:pdp11},
@code{:vax}, @code{:nu}, @code{:pe3230}, and @code{:ibmpc}.
@code{(nil)} has also been observed to appear here.
Note that these machine types attempt to have wide meanings, lumping
together various brands, models, etc.

The @i{site} does not describe anything about the host.  Instead it
serves to say what the Lisp Machine's site name was when the host was
defined.  This is so that, when a Lisp Machine system is moved to a
different institution that has a disjoint set of hosts, all the old
site's hosts can be deleted from the host alist by site
reinitialization.

The @i{network}s and lists of addresses describe how to reach the host.
Usually there is only one network and only one address in the list.
The generality is so that hosts with multiple addresses on multiple
networks can be recorded.  Networks include @code{:chaos} and @code{:arpa}.
The address is meaningful only to code for a specific network.
@end defvar

@subsection Host Object Operations

.defmetamethod "host objects" :name
Returns the full, official name of the host.
.end_defmetamethod

.defmetamethod "host objects" :name-as-file-computer
Returns the name to print in pathnames on this host (assuming it
supports files).  This is likely to be a short nickname of the host.
.end_defmetamethod

.defmetamethod "host objects" :short-name
Returns the shortest known nickname for this host.
.end_defmetamethod

.defmetamethod "host objects" :pathname-host-namep string
Returns @code{t} if @i{string} is recognized as a name for this host for
purposes of pathname parsing.  The local host will recognise @code{LM}
as a pathname host name.
.end_defmetamethod

.defmetamethod "host objects" :system-type
Returns the operating system type symbol for this host.
See (host-table).
.end_defmetamethod

.defmetamethod "host objects" :network-type
Returns the symbol for one network that this host is connected to,
or @code{nil} if it is not connected to any.  @code{:chaos} is preferred if it
is one of the possible values.
.end_defmetamethod

.defmetamethod "host objects" :network-typep network
Returns @code{t} if the host is connected to the specified network.
.end_defmetamethod

.defmetamethod "host objects" :network-addresses
Returns an alternating list of network names and lists of addresses, such as
@lisp
(:chaos (3104) :arpa (106357002))
@end lisp
You can therefore find out all networks a host is known to be on, and
its addresses on any network.
.end_defmetamethod

.defmetamethod "host objects" :sample-pathname
Returns a pathname for this host, whose device, directory, name, type
and version components are all @code{nil}.  Sample pathnames are often
useful because many file-system-dependent pathname operations depend
only on the pathname's host.
.end_defmetamethod

.defmetamethod "host objects" :open-streams
Returns a list of all the open file streams for files on this host.
.end_defmetamethod

.defmetamethod "host objects" :close-all-files
Closes all file streams open for files on this host.
.end_defmetamethod

.defmetamethod "host objects" :generic-base-type type-component
Returns the type component for a generic pathname assuming it is being
made from a pathname whose type component is the one specified.
.end_defmetamethod

@chapter Accessing Files
@cindex file

The Lisp Machine can access files on a variety of remote file servers,
which are typically (but not necessarily) accessed through the Chaosnet,
as well as accessing files on the Lisp Machine itself, if the machine
has its own file system.  You are not allowed to refer to files
without first logging in, and you may also need to specify a username
and password for the host on which the file is stored; see (login-fun).

The way to read or write a file's contents is to @i{open} the file to
get an input or output stream, use the standard stream I/O functions or
operations described in chapters (io-chapter) and
(expression-io-chapter), and then close the stream.  The first section
of this chapter tells how to open and close the stream.  The rest of the
chapter describes things specific to files such as deleting and
renaming, finding out the true name of the file that has been opened,
and listing a directory.

Files are named with @i{pathnames}.  There is much to know about
pathnames aside from accessing files with them; all this is described
in the previous chapter.

Many functions in this chapter take an argument called @i{file} which
is intended to specify a file to be operated on.  This argument may be
given as a pathname (which is defaulted), a namestring (which is
parsed into a pathname and then defaulted), or a stream open to a file
(the same file is used).

@section  Opening and Closing File Streams

@defmac with-open-file (stream file options...) body...
Evaluates the @i{body} forms with the variable @i{stream} bound to a stream that
reads or writes the file named by the value of @i{file}.  The @i{options}
forms evaluate to the file-opening options to be used; see (file-opening-options).

When control leaves the body, either normally or abnormally (via @code{throw}),
the file is closed.  If a new output file is being written and control leaves
abnormally, the file is aborted and it is as if it were never written.  Because
it always closes the file, even when an error exit is taken, @code{with-open-file}
is preferred over @code{open}.  Opening a large number of files and forgetting to
close them tends to break some remote file servers, ITS's for example.

If an error occurs in opening the file, the result depends on the
values of the @i{error} option, the @i{if-exists} option, and the
@i{if-does-not-exist} option.  An error may be signaled (and possibly
corrected with a new pathname), or @i{stream} may be bound to a condition
object or even @code{nil}.
@end defmac

@defmac with-open-file-case (stream file options...) clauses...
This opens and closes the file like @code{with-open-file}, but what happens
afterward is determined by @i{clauses} that are like the clauses of a
@code{condition-case} ((condition-case-fun)).  Each clause begins with a
condition name or a list of condition names and is executed if @code{open}
signals a condition that possesses any of those names.  A clause
beginning with the symbol @code{:no-error} is executed if the file is
opened successfully.  This would be where the reading or writing of the
file would be done.
@lisp
@exdent Example:
(with-open-file-case (stream (send generic-pathname
				   :source-pathname))
  (sys:remote-network-error (format t "~&Host down."))
  (fs:file-not-found (format t "~&(New file)"))
  (:no-error (setq list (read stream))))
@end lisp
@end defmac

@defmac file-retry-new-pathname (pathname-var condition-names...) body...
@defmacx file-retry-new-pathname-if cond-form (pathname-var condition-names...) body...
@code{file-retry-new-pathname} executes @i{body}.  If @i{body} does not
signal any of the conditions in @i{condition-names}, @i{body}'s values
are simply returned.  If any of @i{condition-names} is signaled,
@code{file-retry-new-pathname} reads a new pathname, @code{setq}'s
@i{pathname-var} to it, and executes @i{body} again.

The user can type @code{End} instead of a pathname if he wishes
to let the condition be handled by the debugger.

@code{file-retry-new-pathname-if} is similar, but the conditions are
handled only if @i{cond-form}'s value is non-@code{nil}.

For an example, see the example of the following macro.
@end defmac

@defmac with-open-file-retry (stream (pathname-var condition-names...) options...) body...
Like @code{with-open-file} inside of a @code{file-retry-new-pathname}.  If an
error occurs while opening the file and it has one of the specified
@i{condition-names}, a new pathname is read, the variable
@i{pathname-var} is @code{setq}'d to it, and another attempt is made to
open a file with the newly specified name.  Example:
@lisp
(with-open-file-retry (instream (infile fs:file-not-found))
  ...)
@end lisp
@code{infile} should be a variable whose value is a pathname or namestring.
The example is equivalent to
@lisp
(file-retry-new-pathname (infile fs:file-not-found)
  (with-open-file (instream infile)
    ...))
@end lisp
@end defmac

@defmac with-open-file-search
Opens a file, trying various pathnames until one of them succeeds.  The
pathnames tried differ only in their type components.  For example,
@code{load} uses this macro to search for either a compiled file or a
source file.  The calling sequence looks like
@lisp
(with-open-file-search
   (@i{streamvar} (@i{operation} @i{defaults} @i{auto-retry})
	      @i{types-and-pathname} @i{options}...)
  @i{body}...)
@end lisp

@code{with-open-file-search}
tries opening various files until one succeeds; then binds @i{streamvar} to the stream
and executes @i{body}, closing the stream on exit.  The values of @i{body} are returned.

@i{types-and-pathname} specifies which files to open.  It should be a form
which evaluates to two values, the first being a list of types to try
and the second being a pathname called the base pathname.  Each pathname to try
is made by merging the base pathname with the defaults @i{defaults} and one of the types.
The types may be strings or canonical type keywords (see (canonical-types)).

@i{options} are forms whose values should be alternating to keywords and
values, which are passed to @code{open} each time.

If all the names to be tried fail, a @code{fs:multiple-file-not-found} error is signaled.
@i{operation} is provided just so that the @code{:operation} operation on the condition
object can return it.  Usually the value given for @i{operation} should be the
user-level function for which the @code{with-open-file-search} is being done.

If @i{auto-retry} is non-@code{nil}, an error causes the user to be
prompted for a new base pathname.  The entire set of types specified is
tried anew with the new pathname.
@end defmac

@defun open file &rest options
Returns a stream that is connected to the specified file.  Unlike
Maclisp, the @code{open} function creates streams only for @i{files};
streams of other kinds are created by other functions.  The @i{file}
and @i{options} arguments are the same as in @code{with-open-file}; see above.

When the caller is finished with the stream, it should close the file by using
the @code{:close} operation or the @code{close} function.  The @code{with-open-file}
special form does this automatically and so is usually preferred.  @code{open}
should only be used when the control structure of the program necessitates opening
and closing of a file in some way more complex than the simple way provided
by @code{with-open-file}.  Any program that uses @code{open} should set up
@code{unwind-protect} handlers (see (unwind-protect-fun)) to close its files
in the event of an abnormal exit.
@end defun

@defun close stream &optional option
The @code{close} function simply sends the @code{:close} message to @i{stream}.
If @i{option} is @code{:abort} for a file output stream, the file is discarded.
@end defun

@defun cli:close stream &key abort
The Common Lisp version of @code{close} is the same as @code{close} except for
its calling convention.  If @i{abort} is non-@code{nil} for a file output
stream, the file is discarded.
@end defun

@defun fs:close-all-files
Closes all open files.  This is useful when a program has run wild opening
files and not closing them.  It closes all the files in @code{:abort} mode
(see (close-message)), which means that files open for output are
deleted.  Using this function is dangerous, because you may close files
out from under various programs like Zmacs and ZMail; only use it if you
have to and if you feel that you know what you're doing.
@end defun

The @i{options} used when opening a file are normally alternating keywords and
values, like any other function that takes keyword arguments.  In addition,
for compatibility with the Maclisp @code{open} function, if only a single option
is specified it is either a keyword or a list of keywords (not alternating with
values).

The file-opening options control things like whether the stream is for input
from a existing file or output to a new file, whether the file is text or binary, etc.

The following keyword arguments are standardly recognized; additional keywords
can be implemented by particular file system hosts.

@table @i
@item direction
'kindex :direction open
Controls which direction of I/O can be done on the resulting stream.
The possible values are @code{:input} (the default), @code{:output}, @code{nil},
@code{:probe}, @code{:probe-directory} and @code{:probe-link}.  The first two
should be self-explanatory.  @code{nil} or @code{:probe} means that this is a
``probe'' opening; no data are to be transferred, the file is being opened
only to verify its existence or access its properties.  The stream
created in this case does not permit any I/O.  @code{nil} and @code{:probe}
differ in causing different defaults for the argument @i{if-does-not-exist}.
If that argument is specified explicitly, @code{nil} and @code{:probe} are equivalent.

@code{:probe-directory} is used to see whether a directory exists.  If the
directory specified for the file to be opened is found, then the
@code{open} completes (returning a non-I/O stream) as if the specified file
existed whether it really exists or not.

@code{:probe-link} is used to find out the truename of a link.  If the file
specified exists as a link, then the @code{open} completes returning a
non-I/O stream which describes the link itself rather than the file
linked to.  If the file exists and is not a link, the @code{open} also
completes for it as with any probe.

Common Lisp defines the value @code{:io} for this argument, requesting a stream
that can do input and output, but no file system
supported by the Lisp Machine has this capability.

@item characters
'kindex :characters open
The possible values are @code{t} (the default), @code{nil}, which means that the
file is a binary file, and @code{:default}, which means that the file system should
decide whether the file contains characters or binary data and open it in the
appropriate mode.

@item byte-size
'kindex :byte-size open
The possible values are @code{nil} (the default), a number, which is the number
of bits per byte, and @code{:default}, which means that the file system should
choose the byte size based on attributes of the file.  If the file is being
opened as characters, @code{nil} selects the appropriate system-dependent byte
size for text files; it is usually not useful to use a different byte size.
If the file is being opened as binary, @code{nil} selects the default byte size
of 16 bits.

@item element-type
This is the Common Lisp way to specify what kind of objects the stream wants to
read or write.  This combines the effect of the @i{characters} and @i{byte-size}
arguments.  The value is a type specifier; it must be one of the following:
@table @code
@item string-char
Read or write characters as usual.  The default.
@item character
Read or write characters, dealing with characters
that are more than 8 bits.  You can succeed in writing out any
sequence of character objects and reading it back, but the file
does not look anything like a text file.
@item (unsigned-byte @i{n})
Read or write @i{n}-bit bytes.
Like @i{characters} = @code{nil}, @i{byte-size} = @i{n}.
@item unsigned-byte
Similar, but uses the byte size that the file was originally written with.
This is the same as @i{characters} = @code{nil}, @i{byte-size} = @code{:default}.
@item (signed-byte @i{n})
Read or write @i{n}-bit bytes, sign-extending on input.
Each byte read from the file is sign-extended so that its most
significant bit serves as a sign bit.
@item signed-byte
Similar, but uses the byte size that the file was originally written with.
@item (mod @i{n})
Like @code{unsigned-byte} for a big enough byte size to hold all numbers
less than @i{n}.  @code{bit} is also accepted, and means @code{(mod 2)}.
@item :default
Is allowed, even though it is not a type specifier.
It is the same as using @code{:default} as the value of @i{characters}.
@end table

@item if-exists
'kindex :if-exists open
For output opens, @i{if-exists} specifies what to do if a file with the specified
name already exists.  There are several values you can use:
@table @code
@item :new-version
Create a new version.  This makes sense only when the pathname has
@code{:newest} as its version, and it is the default in that case.
@item :supersede
Make a new file which, when closed, replaces the old one.
@item :overwrite
Write over the data of the existing file, starting
at the beginning, and set the file's length to the length of the
newly written data.
@item :truncate
Like @code{:overwrite} except that it discards the old contents
of the file immediately, making it empty except for what is written into
it this time.
@item :append
Add new data onto the existing file at the end.
@item :rename
Rename the existing file and then create a new one.
@item :rename-and-delete
Rename the existing file, create a new one,
and delete the old file when the new one is closed.
@item :error
Signal an error (@code{fs:file-already-exists}).
This is the default when the pathname's version is not @code{:newest}.
The further handling of the error is controlled by the @i{error} argument.
@item nil
Return @code{nil} from @code{open} in this case.
The @i{error} argument is irrelevant in this case.
@end table

@item if-does-not-exist
Specifies what to do when the file requested does not
exist.  There are three allowed values:
@table @code
@item :create
Create a file.  This is the default for output opens, except when @i{if-exists}
is @code{:append}, @code{:overwrite} or @code{:truncate}.  This silly exception
is part of the Common Lisp specifications.
@item :error
Signal an error.  This is the default for input opens,
and also for output opens when @i{if-exists} is @code{:append}, @code{:overwrite}
or @code{:truncate}.
The further handling of the error is controlled by the @i{error} argument.
@item nil
Return @code{nil} from @code{open}.  This is the default for @code{:probe} opens.
The @i{error} argument is irrelevant in this case.
@end table

@item error
'kindex :error open
Specifies what to do if an error is signaled for any reason.
(Note that the values of the @i{if-exists} and @i{if-does-not-exist} arguments
control whether an error is signaled in certain circumstances.)
The possible values are @code{t} (the default), @code{:reprompt} and @code{nil}.
@code{t} means that nothing special is done, so the error invokes the
debugger if the caller does not handle it.  @code{nil} means that the
condition object should be returned as the value of @code{open}.  @code{:reprompt}
means that a new file name should be read and opened.

Any caller which need not know reliably which file was ultimately opened
might as well specify @code{:reprompt} for this argument.  Callers which
need to know if a different file is substituted should never specify
@code{:reprompt}; they may use @code{with-open-file-retry} or
@code{file-retry-new-pathname} (see (file-retry-new-pathname-fun)) if they
wish to permit an alternative file name to be substituted.

@item :submit
'kindex :submit open
If specified as @code{t} when opening a file for output, the file is
submitted as a batch job if it is closed normally.  The default is
@code{nil}.  You must specify @code{:direction} @code{:output} as well.

@item deleted
'kindex :deleted open
The default is @code{nil}.  If @code{t} is specified, and the file system has the
concept of deleted but not expunged files, it is possible to open a deleted
file.  Otherwise deleted files are invisible.

@item temporary
'kindex :temporary open
If @code{t} is specified, the file is marked as
temporary, if the file system has that concept.  The default is @code{nil}.

@item preserve-dates
'kindex :preserve-dates open
If @code{t} is specified, the file's reference and
modification dates are not updated.  The default is @code{nil}.

@item flavor
'kindex :flavor open
This controls the kind of file to be opened.  The default is @code{nil}, a
normal file.  Other possible values are @code{:directory} and @code{:link}.
Only certain file systems recognize this keyword.

@item link-to
'kindex :link-to open
When creating a file with @i{flavor} @code{:link}, this argument must be
specified; its value is a pathname or namestring that becomes the target of the link.

@item submit
'kindex :submit open
The value can be either @code{nil} (the default) or @code{t}.
If the value is @code{t}, and the @code{:direction} is @code{:output}, the
resulting file will be submitted as a batch job.
Currently, this option is implemented only for Twenex and VMS.

@item estimated-size
'kindex :estimated-size open
The value may be @code{nil} (the default), which means there is no estimated
size, or a number of bytes.  Some file systems use this to optimize disk
allocation.

@item physical-volume
'kindex :physical-volume open
The value may be @code{nil} (the default), or a string that is the name
of a physical volume on which the file is to be stored.  This is not meaningful
for all file systems.

@item logical-volume
'kindex :logical-volume open
The value may be @code{nil} (the default), or a string that is the name
of a logical volume on which the file is to be stored.  This is not meaningful
for all file systems.

@item super-image
'kindex :super-image open
The value may be @code{nil} (the default), or @code{t}, which
disables the special treatment of rubout in ASCII files.  Normally, rubout is
an escape which causes the following character to be interpreted specially,
allowing all characters from 0 through 376 (octal) to be stored.  This applies to
ASCII file servers only.

@item raw
'kindex :raw open
The value may be @code{nil} (the default), or @code{t}, which
disables all character set translation in ASCII files.  This applies to ASCII
file servers only.

@end table

In the Maclisp compatibility mode, there is only one @i{option}, and it
is either a symbol or a list of symbols.  These symbols are recognized no
matter what package they are in, since Maclisp does not have packages.
The following symbols are recognized:
@table @code
@item in, read
Select opening for input (the default).

@item out, write, print
Select opening for output; a new file is to be created.

@item binary, fixnum
Select binary mode; otherwise character mode is used.  Note that fixnum mode
uses 16-bit binary words and is not compatible with Maclisp fixnum mode, which
uses 36-bit words.  On the PDP-10, fixnum files are stored with two 16-bit words
per PDP-10 word, left-justified and in PDP-10 byte order.

@item character, ascii
The opposite of fixnum.  This is the default.

@item single, block
Ignored for compatibility with the Maclisp @code{open} function.

@item byte-size
Must be followed by a number in the options list, and must be used in combination
with @code{fixnum}.  The number is the number of bits per byte, which can be from
1 to 16.  On a PDP-10 file server these bytes will be packed into words in the
standard way defined by the @code{ILDB} instruction.  The @code{:tyi} stream operation
will (of course) return the bytes one at a time.

@item probe, error, noerror, raw, super-image, deleted, temporary
These are not available in Maclisp.  The corresponding keywords in the
normal form of file-opening options are preferred over these.

@end table

@section  File Stream Operations

The following functions and operations may be used on file streams, in addition to the normal I/O
operations which work on all streams.  Note that several of these operations are
useful with file streams that have been closed.  Some operations
use pathnames; refer to (pathname) for an explanation of pathnames.

@defun file-length file-stream
Returns the length of the file open on @i{file-stream}, in terms of the units
in which I/O is being done on that stream.  (A stream is needed, rather than
just a pathname, in order to specify the units.)
@end defun

@defun file-position file-stream &optional new-position
With one argument, returns the current position in the file of @i{file-stream},
using the @code{:read-pointer} stream operation.  It may return @code{nil} meaning that
the position cannot be determined.  In fact, it always returns @code{nil}
for a stream open in character mode and not at the beginning of the file.

With two arguments, sets the position using the @code{:set-pointer} stream
operation, if possible, and returns @code{t} if the setting was possible
and @code{nil} if not.  You can specify @code{:start} as the @i{new-position}
to position to the beginning of the file, or @code{:end} to position to the
end.
@end defun

.defmetamethod "file streams" :pathname
Returns the pathname that was opened to get this stream.  This may not be
identical to the argument to @code{open}, since missing components will have been
filled in from defaults.  The pathname may have been replaced wholesale if
an error occurred in the attempt to open the original pathname.
.end_defmetamethod

.defmetamethod "file streams" :truename
Returns the pathname of the file actually open on this stream.  This can be
different from what @code{:pathname} returns because of file links, logical
devices, mapping of version @code{:newest} to a particular version number, etc.  For
an output stream the truename is not meaningful until after the stream has been
closed, at least when the file server is an ITS.
.end_defmetamethod

.defmetamethod "file streams" :generic-pathname
Returns the generic pathname of the pathname that was opened to get this
stream.  Normally this is the same as the result of sending the
@code{:generic-pathname} message to the value of the @code{:pathname}
operation on the stream; however, it does special things when the Lisp
system is bootstrapping itself.
.end_defmetamethod

.defmetamethod "file streams" :qfaslp
Returns @code{t} if the file has a magic flag at the front that says it is a QFASL file,
@code{nil} if it is an ordinary file.
.end_defmetamethod

.defmetamethod "file streams" :length
Returns the length of the file, in bytes or characters.  For text files on
ASCII file servers, this is the number of ASCII characters, not Lisp Machine
characters.  The numbers are different because of character-set translation;
see (character-set-differences) for a full explanation.
For an output stream the length is not meaningful until after the stream has
been closed, at least when the file server is an ITS.
.end_defmetamethod

.defmetamethod "file streams" :creation-date
Returns the creation date of the file, as a number that is a universal time.
See the chapter on the time package ((time)).
.end_defmetamethod

.defmetamethod "file streams" :info
Returns a cons of the file's truename and its creation date.  This can
be used to tell if the file has been modified between two @code{open}'s.
For an output stream the information is not guaranteed to be correct
until after the stream has been closed.
.end_defmetamethod

@c .defmessage :status
@c Returns the status of the file stream.  This usually @code{:open} or @code{:closed}
@c (which should be self-explanatory).  @code{:eof} means that the file is open but
@c no more data are available.  There are other states associated with error handling.
@c [Maybe this shouldn't be documented.]
@c .end_defmessage

.defmetamethod "file streams" :properties &optional (error-p @code{t})
This returns two values: a property list (like an element of the list
returned by @code{fs:directory-list}), and a list of the settable
properties.   See the section on standard file properties ((directory-list)) for a
description of the ones that may possible found in the list.
.end_defmetamethod

.defmetamethod "file streams" :set-byte-size new-byte-size
This is only allowed on binary file streams.  The byte size
can be changed to any number of bits from 1 to 16.
.end_defmetamethod

.defmetamethod "file streams" :delete &optional (error-p @code{t})
Deletes the file open on this stream.  For the meaning of @i{error-p}, see the @code{deletef}
function.  The file doesn't really go away until the stream is closed.
.end_defmetamethod

.defmetamethod "file streams" :undelete &optional (error-p @code{t})
If you have used the @code{:deleted} option in @code{open} to open a deleted
file, this operation undeletes the file.
.end_defmetamethod

.defmetamethod "file streams" :rename new-name &optional (error-p @code{t})
Renames the file open on this stream.  For the meaning of @i{error-p}, see the @code{renamef}
function.
.end_defmetamethod

@c .defmessage :command mark-p command &rest strings
@c [Should this be documented?]
@c .end_defmessage
@c 
@c .defmessage :continue
@c [Should this be documented?]
@c .end_defmessage

@noindent
File output streams implement the @code{:finish} and @code{:force-output} operations.

@section  Manipulating Files

This section describes functions for doing things to files aside from
reading or writing their contents.

@defun truename object
Returns the truename of the file specified somehow by @i{object}.  If
@i{object} is a plausible stream, it is asked for the truename with the
@code{:truename} operation.  Otherwise, @i{object} is converted to a
pathname and that pathname is opened to get its file's truename.
@end defun

@defun delete-file file &key (error-p @code{t}) query?
@defunx deletef file &optional (error-p @code{t}) query?
Both delete the specified file.  The two functions differ in accepting
keyword arguments versus positional arguments.  @i{file} may contain
wildcard characters, in which case multiple files are deleted.

If @i{query?} is non-@code{nil}, the user is queried about each file
(whether there are wildcards or not).  Only the files that the user
confirms are actually deleted.

If @i{error-p} is @code{t}, then if an error occurs it is signaled as
a Lisp error.  If @i{error-p} is @code{nil} and an error occurs, the error
message is returned as a condition object.  Otherwise, the value is a list of
elements, one for each file considered.  The car of each element is
the truename of the file, and the cadr is non-@code{nil} if the file
was actually deleted (it is always @code{t} unless querying was done).
@end defun

@defun undelete-file file &key (error-p @code{t}) query?
@defunx undeletef file &optional (error-p @code{t}) query?
Both undelete the specified file.  Wildcards are allowed, just as in
@code{deletef}.  The rest of the calling conventions are the same as well.
The two functions differ in taking keyword arguments versus positional
arguments.

Not all file systems support undeletion, and if it is not supported on
the one you are using, it gets an error or returns a string according to
@i{error-p}.  To find out whether a particular file system supports
this, send the @code{:undeletable-p} operation to a pathname.  If it
returns @code{t}, the file system of that pathname supports undeletion.
@end defun

@defun rename-file file new-name &key (error-p @code{t}) query?
@defunx renamef file new-name &optional (error-p @code{t}) query?
Both rename the specified file to @i{new-name} (a pathname or string).
The two functions differ in taking keyword arguments versus positional
arguments.  @i{file} may contain wildcards, in which case multiple files
are renamed.  Each file's new name is produced by passing @i{new-name}
to @code{merge-pathname-defaults} with the file's truename as the defaults.
Therefore, @i{new-name} should be a string in this case.

If @i{query?} is non-@code{nil}, the user is queried about each file
(whether there are wildcards or not).  Only the files that the user
confirms are actually renamed.

If @i{error-p} is @code{t}, then if an error occurs it is signaled as
a Lisp error.  If @i{error-p} is @code{nil} and an error occurs, the error
message is returned as a condition object.  Otherwise, the value is a list of
elements, one for each file considered.  The car of each element is
the original truename of the file, the cadr is the name it was to be
renamed to, and the caddr is non-@code{nil} if the file was renamed.
The caddr is @code{nil} if the user was queried and said no.
@end defun

@defun copy-file file new-name &key (error @code{t}) (copy-creation-date @code{t}) (copy-author @code{t}) report-stream (create-directories @code{:query}) (characters @code{:default}) (byte-size @code{:default})
Copies the file specified by @i{file} to the name @i{new-name}.

@i{characters} and @i{byte-size} specify what mode of I/O to use to transfer the data.
@i{characters} can be
@table @code
@item t
to specify character input and output.
@item nil
for binary input and output,
@item :ask
meaning ask the user which one
@item :maybe-ask
meaning ask if it is not  possible to tell with certainty which method is best,
@item :default
meaning to guess as well as possible automatically.
@end table

If binary transfer is done, @i{byte-size} specifies the byte size to
use; @code{:default} means to ask the file system for the byte size that
the old file is stored in, just as it does in @code{open}.

@i{copy-author} and @i{copy-creation-date} say whether to set those
properties of the new file to be the same as those of the old file.  If
a property is not copied, it is set to your login name or the current
date and time.

@i{report-stream}, if non-@code{nil}, is a stream on which a message should
be printed describing the file copied, where it is copied to, and which
mode was used.

@i{create-directories} says what to do if the output filename specifies a directory that
does not exist.  It can be @code{t} meaning create the directory, @code{nil} meaning treat it as
an error, or @code{:query} meaning ask the user which one to do.  The default is @code{:query}.

@i{error}, if @code{nil}, means that if an error happens then this function
should just return an error indication.

If the pathname to copy from contains wildcards, multiple files are
copied.  The new name for each file is obtained by merging @i{new-name}
(parsed into a pathname) with that file's truename as a default.  The
mode of copy is determined for each file individually, and each copy is
reported on the @i{report-stream} if there is one.  If @i{error} is @code{nil},
an error in copying one file does not prevent the others from being
copied.

There are four values.  If wildcards were used, each value is a list with
one element describing each file that matched; otherwise, each value describes the
single file specified (though the value may be a list anyway).  The values,
for each file, are:
@table @i
@item output-file
The defaulted pathname to be opened for output in copying this file.
@item truename
The truename of the file copied
@item outcome
The truename of the new file, If the file was successfully copied.
A condition object, if there was an error and @i{error} was @code{nil}.
@code{nil} if the user was asked whether to copy this file and said no.
@item mode
A Common Lisp type descriptor such as @code{string-char} or @code{(unsigned-byte 8)}
saying how the file was copied.
@end table
@end defun

@defun probe-file file
@defunx probef file
Returns @code{nil} if there is no file named @i{file}; otherwise returns a
pathname that is the true name of the file, which can be different from
@i{file} because of file links, version numbers, etc.  If @i{file} is
a stream, this function cannot return @code{nil}.

Any problem in opening the file except for @code{fs:file-not-found} signals
an error.

@code{probef} is the Maclisp name; @code{probe-file} is the Common Lisp name.
@end defun

@defun file-write-date file
Returns the creation date/time of @i{file}, as a universal time.
@end defun

@defun file-author file
Returns the name of the author of @i{file} (the user who wrote it), as a
string.
@end defun

@defun viewf @i{file} &optional (output-stream @code{*standard-output*}) leader
Copies the contents of the specified file, opened in character
mode, onto @code{output-stream}.  Normally this has the effect of printing
the file on the terminal.  @i{leader} is passed along to
@code{stream-copy-until-eof} (see (stream-copy-until-eof-fun)).
@end defun

@defun fs:create-link link-name link-to &key (error @code{t})
Creates a link named @i{link-name} which points to a file named @i{link-to}.
An error happens if the host specified in @i{link-name} does not support links,
or for any of the usual problems that can happen in creating a file.
@end defun

@subsection Loading Files
@cindex loading

To @i{load} a file is to read through the file, evaluating each form
in it.  Programs are typically stored in files; the expressions in the file are mostly
special forms such as @code{defun} and @code{defvar} which define the functions and
variables of the program.

Loading a compiled (or QFASL) file is similar, except that the file does not
contain text but rather pre-digested expressions created by the
compiler which can be loaded more quickly.

These functions are for loading single files.  There is a system for keeping track
of programs which consist of more than one file; for further information refer
to (system-system).

@defun load file &key verbose print (if-does-not-exist @code{t}) set-default-pathname package
Loads the specified file into the Lisp environment.  If
@i{file} is a stream, @code{load} reads from it; otherwise @i{file}
is defaulted from the default pathname defaults and the result
specifies a file to be opened.  If the file is a QFASL file, @code{fasload}
is used; otherwise @code{readfile} is used.  If @i{file} specifies a name
but no type, @code{load} looks first for the canonical type @code{:qfasl} and
then for the canonical type @code{:lisp}.

Normally the file is read into the package specified in its attribute
list, but if @i{package} is supplied then the file is read in that
package.  If @i{package} is @code{nil} and @i{verbose} is @code{nil}, @code{load}
prints a message saying what file is being loaded and what package is
being used.  @i{verbose} defaults to the value of @code{*load-verbose*}.

If @i{if-does-not-exist} is @code{nil}, @code{load} just returns @code{nil} if no
file with the specified name exists.  Error conditions other than
@code{fs:file-not-found} are not handled by this option.

If a file is loaded, @code{load} returns the file's truename.

If @i{print} is non-@code{nil}, the value of each expression evaluated from
the file is printed on @code{*standard-output*}.

@i{pathname} is defaulted from the default pathname defaults.  If
@i{set-default-pathname} is non-@code{nil}, the pathname defaults are set
to the name of the file loaded.  The default for
@i{set-default-pathname} is @code{t}.

@code{load} used to be called with a different calling sequence:
@lisp
(load @i{pathname} @i{pkg} @i{nonexistent-ok}
      @i{dont-set-default})
@end lisp
This calling sequence is detected and still works, but it is obsolete.
@end defun

@defvar *load-verbose*
Is the default value for the @i{verbose} argument to @code{load}.
@end defvar

@defun readfile file &optional pkg no-msg-p
@code{readfile} is the version of @code{load} for text files.  It reads and evaluates
each expression in the file.  As with @code{load}, @i{pkg} can specify what package
to read the file into.  Unless @i{no-msg-p} is @code{t}, a message is printed
indicating what file is being read into what package.
@end defun

@defun fasload file &optional pkg no-msg-p
@code{fasload} is the version of @code{load} for QFASL files.  It defines
functions and performs other actions as directed by the specifications
inserted in the file by the compiler.  As with @code{load}, @i{pkg} can
specify what package to read the file into.  Unless @i{no-msg-p} is
@code{t}, a message is printed indicating what file is being read into what
package.
@end defun

@section  Pathname Operations That Access Files

Here are the operations that access files.  Many accept an argument
@i{error} or @i{error-p} which specifies whether to signal an error or
to return a condition instance, if the file cannot be accessed.  For
these arguments, @code{nil} and non-@code{nil} are the only significant values.
@code{:reprompt} has no special meaning as a value.  That value when passed
to one of the file accessing functions (@code{open}, @code{deletef}, etc.)
has its special significance at a higher level.

@defmethod pathname :truename
Returns a pathname object describing the exact name of the file specified
by the pathname the object is sent to.

This may be different from the original pathname.  For example, the
original pathname may have @code{:newest} as the version, but the truename
always has a number as the version if the file system supports versions.
@end defmethod

@defmethod pathname :open pathname &rest options
Opens a stream for the file named by the pathname.
The argument @i{pathname} is what the @code{:pathname} operation on the
resulting stream should return.  When a logical pathname is opened,
@i{pathname} is that logical pathname, but @code{self} is
its translated pathname.

@i{options} is a list of alternating keywords and values, as would be
passed to @code{open}.  The old style of @code{open} keywords are not allowed;
when they are used with @code{open}, @code{open} converts them to the new
style before sending the @code{:open} message.
@end defmethod

@defmethod pathname :delete &optional (error-p @code{t})
@defmethodx pathname :undelete &optional (error-p @code{t})
Respectively delete or undelete the file specified by the pathname.

All file systems support @code{:delete} but not all support @code{:undelete}.

If @i{error-p} is @code{nil}, problems such as nonexistent files cause a
string describing the problem to be returned.  Otherwise, they signal an
error.
@end defmethod

@defmethod pathname :undeletable-p
Returns @code{t} if this pathname is for a file system which allows
deletion to be undone.  Such pathnames support the @code{:undelete}
and @code{:expunge} operations.
@end defmethod

@defmethod pathname :rename new-name &optional (error-p @code{t})
Renames the file specified by the pathname.  @i{new-name}, a string or
pathname, specifies the name to rename to.  If it is a string, it is
parsed using @code{self} as the defaults.

If @i{error-p} is @code{nil}, problems such as nonexistent files cause a
string describing the problem to be returned.  Otherwise, they signal an
error.
@end defmethod

@defmethod pathname :complete-string string options
Attempts to complete the filename @i{string}, returning the results.
This operation is used by the function @code{fs:complete-pathname} (see
(fs:complete-pathname-fun)).  The pathname the message is sent to is
used for defaults.  @i{options} is a list whose elements may include
@code{:deleted}, @code{:read} (file is for input), @code{:write} (it's for
output), @code{:old} (only existing files allowed), or @code{:new-ok} (new files
are allowed too).

There are two values: a string, which is the completion as far as possible,
and a flag, which can be @code{:old}, @code{:new} or @code{nil}.
@code{:old} says that the returned string names an existing file,
@code{:new} says that the returned string is no file but some completion was done,
@code{nil} says that no completion was possible.
@end defmethod

@defmethod pathname :change-properties error-p &rest properties
Changes the properties of the file specified by the
pathname.  @i{properties} should be an
alternating list of property names and values.
@end defmethod

@defmethod pathname :directory-list options
Performs the work of @code{(fs:directory-list @i{this-pathname} @i{options}...)}.
@end defmethod

@defmethod pathname :properties
Returns a property list (in the form
of a directory-list element) and a list of settable properties.
See (directory-list) for more information on file properties.
@end defmethod

@defmethod pathname :wildcard-map function plistp dir-list-options &rest args
Maps @i{function} over all the
files specified by this pathname (which may contain wildcards).
Each time @i{function} is called, its first argument is a pathname
with no wildcards, or else a directory-list element (whose car is a
pathname and whose cdr contains property names and values).
The elements of @i{args} are given to @i{function} as additional
arguments.

@i{plistp} says whether @i{function}'s first argument should be a
directory-list element or just a pathname.  @code{t} specifies a
directory-list element.  That provides more information, but it makes it
necessary to do extra work if the specified pathname does @i{not}
contain wildcards.

@i{dir-list-options} is passed to @code{fs:directory-list}.  You can use this
to get deleted files mentioned in the list, for example.
@end defmethod

@noindent
The remaining file-access operations are defined only on certain file
systems.

@defmethod pathname :expunge &key (error @code{t})
Expunges the directory specified by the host, device and directory
components of the pathname.

The argument @i{error} says whether to signal an error if the directory
does not exist.  @code{nil} means just return a string instead.
@end defmethod

@defmethod pathname :create-directory &key (error @code{t})
Creates the directory specified in this pathname.
@end defmethod

@defmethod pathname :remote-connect &key (error @code{t}) access
Performs the work of @code{fs:remote-connect} with the same arguments
on this pathname's host.
@end defmethod

@section  File Attribute Lists
@cindex file attribute list
@cindex attribute list, file

Any text file can contain an @i{attribute list} that specifies several attributes
of the file.  The above loading functions, the compiler, and the editor look
at this property list.  Attribute lists are especially useful in program
source files, i.e. a file that is intended to be loaded (or compiled and
then loaded).  QFASL files also contain attribute lists, copied from
their source files.

If the first non-blank line in a text file contains the three characters
`7-*-*',
some text, and `7-*-*' again, the text is recognized as the file's attribute list.
Each attribute consists of the attribute name, a colon, and the attribute value.
If there is more than one attribute they are separated by semicolons.  An example
of such an attribute list is:
@lisp
; -*- Mode:Lisp; Package:Cellophane; Base:10 -*-
@end lisp
This defines three attributes: mode, package, and base.
The initial semicolon makes the line look like a comment rather than a Lisp expression.
Another example is:
@lisp
@c Part of the Lisp Machine manual.  -*- Mode:Bolio -*-
@end lisp

An attribute name is made up of letters, numbers, and otherwise-undefined
punctuation characters such as hyphens.  An attribute value can be such a
name, or a decimal number, or several such items separated by commas.
Spaces may be used freely to separate tokens.  Upper and lower-case
letters are not distinguished.  There is @i{no} quoting convention for
special characters such as colons and semicolons.

If the attribute list text contains no colons, it is an old Emacs
format, containing only the value of the @code{Mode} attribute.

The file attribute list format actually has nothing to do with Lisp; it
is just a convention for placing some information into a file that is
easy for a program to interpret.  The Emacs editor on the PDP-10 knows
how to interpret these attribute lists (primarily in order to look at the
@code{Mode} attribute).

The Lisp Machine handles the attribute list stored in the file by
parsing it into a Lisp data structure, a property list.  Attribute names
are interpreted as Lisp symbols and are interned on the keyword package.
Numbers are interpreted as Lisp fixnums and are read in decimal.  If a
attribute value contains any commas, then the commas separate several
expressions that are formed into a list.

When a file is compiled, its attribute list data structure is stored in
the QFASL file.  It can be loaded back from the QFASL file as well.
The representation in the QFASL file resembles nothing described here,
but when the attribute list is extracted from there, the same Lisp data
structure described above is obtained.

When a file is edited, loaded, or compiled, its file attribute list is
read in and the properties are stored on the property list of the
generic pathname (see (generic-pathname)) for that file, where they can
be retrieved with the @code{:get} and @code{:plist} messages.  This is done
using the function @code{fs:read-attribute-list}, below.  So the way you
examine the properties of a file is usually to use messages to a
pathname object that represents the generic pathname of a file.  Note
that there are other properties there, too.

Here the attribute names with standard meanings:
@table @strong
@item Mode
The editor major mode to be used when editing this file.  This is typically
the name of the language in which the file is written.  The most common values
are @code{Lisp} and @code{Text}.

@item Package
This attribute specifies the package in which symbols in the file should
be interned.  The attribute may be either the name of a package, or a
list that specifies both the package name and how to create the package
if it does not exist.  If it is a list, it should look like
@code{(@i{name} @i{superpackage} @i{initial-size} @i{...options...})}.  See (package)
for more information about packages.

@item Base
The number base in which the file is written (remember, it is
always parsed in decimal).  This affects both @code{*read-base*} and @code{*print-base*},
since it is confusing to have the input and output bases be different.
The most common values are 8 and 10.

@item Readtable
The value specifies the syntax (that is, the choice of readtable)
to use for reading Lisp objects from this file.
The defined values are @code{t} or @code{traditional} for traditional
Lisp Machine syntax, and @code{cl} or @code{common-lisp} for Common Lisp syntax.
If you do not specify this option, the objects in the file are read
using whatever readtable is current in the program that reads them.

@item Lowercase
If the attribute value is not @code{nil}, the file is written in lower-case letters
and the editor does not translate to upper case.  (The editor does not translate
to upper case by default unless the user enables Electric Shift Lock mode.)

@item Fonts
The attribute value is a list of font names, separated by commas.  The editor
uses this for files that are to be displayed in a specific font, or
contain multiple fonts.  If this attribute is present,
the file is actually stored in the file system with font-change indicators.
A font-change indicator is an epsilon (7*) followed by a digit or 7**.
7*@i{n} means to enter font @i{n}.  The previous font is saved on a stack
and 7*@i{*} means to pop the stack, returning to the previous font.
If the file includes an epsilon as part of its contents, it is stored as
7*.

When expressions are read from such files, font-change indicators
are ignored, and 7* is treated as a single 7*.

@item Backspace
If the attribute value is not @code{nil}, @code{Overstrike} characters in the
file should cause characters to overprint on each other.  The default is
to disallow overprinting and display @code{Overstrike} the way other
special function keys are displayed.  This default is to prevent the
confusion that can be engendered by overstruck text.

@item Patch-File
If the attribute value is not @code{nil}, the file is a @i{patch file}.  When it is loaded
the system will not complain about function redefinitions.  In a patch
file, the @code{defvar} special-form turns into @code{defconst}; thus patch files
always reinitialize variables.  Patch files are usually created by special
editor commands described in (patch-facility).

@item Cold-Load
A non-@code{nil} value for this attribute identifies files that are part of
the cold load, the core from which a new system version is built.
Certain features that do not work in the cold load check this flag to
give an error or a compiler warning if used in such files, so that the
problem can be detected sooner.

@end table

You are free to define additional file attributes of your own.  However,
to avoid accidental name conflicts, you should choose names that are
different from all the names above, and from any names likely to be
defined by anybody else's programs.

The following functions are used to examine file attribute lists:

@defun fs:file-attribute-list pathname
Returns the attribute list of the file specified by the pathname.
This works on both text files and QFASL files.
@end defun

@defun fs:extract-attribute-list stream
Returns the attribute list read from the specified stream, which should
be pointing to the beginning of a file.  This
works on both text streams and QFASL file binary streams.
After the attribute list is read, the stream's pointer is set back to
the beginning of the file using the @code{:set-pointer} file
stream operation (see (streams-set-pointer-method)).
@end defun

@defun fs:read-attribute-list pathname stream
@i{pathname} should be a pathname object (@i{not} a string or namelist,
but an actual pathname); usually it is a generic pathname (see
(generic-pathname)).  @i{stream} should be a stream that has been
opened and is pointing to the beginning of the file whose file attribute
list is to be parsed.  The attribute list is read from the stream and
then corresponding properties are placed on the specified @i{pathname}.
The attribute list is also returned.
@end defun

The fundamental way that programs in the Lisp Machine notice the
presence of properties on a file's attribute list is by examining the
property list in the generic pathname.  However, there is another way
that is more convenient for some applications.  File attributes can
cause special variables to be bound whenever Lisp expressions are being
read from the file--when the file is being loaded, when it is being
compiled, when it is being read from by the editor, and when its QFASL
file is being loaded.  This is how the @code{Package} and @code{Base} attributes work.
You can also deal with attributes this way, by using the following function:

@defun fs:file-attribute-bindings pathname
Returns values describing the special variables that should be bound
before reading expressions from file @i{pathname}.
It examines the property list of @i{pathname} and finds all
those property names that have @code{fs:file-attribute-bindings} properties.
Each such property name specifies a set of variables to bind and
a set of values to which to bind them.  This function returns two values,
a list of all the variables and a list of all the corresponding values.
Usually you use this function by calling it on a generic pathname
that has had @code{fs:read-attribute-list} done on it, and then
you use the two returned values as the first two arguments of a
@code{progv}
special form (see (progv-fun)).  Inside the body of the @code{progv} the
specified bindings will be in effect.

@i{pathname} may be anything acceptable as the first argument of @code{get}.
Usually it is a generic pathname.

Of the standard attribute names, the following ones have
@code{fs:file-attribute-bindings}, with the following effects.  @code{Package}
binds the variable @code{package} (see (package-var)) to the package.
@code{Base} binds the variables @code{*print-base*} (see (base-var)) and @code{*read-base*}
(see (ibase-var)) to the value.  @code{Readtable} binds the variable @code{readtable}
to a value computed from the specified attribute.  @code{Patch-file} binds
@code{fs:this-is-a-patch-file} to the value.  @code{Cold-load} binds
@code{si:file-in-cold-load} to the value.  @code{Fonts} binds
@code{si:read-discard-font-changes} to @code{t}.

Any properties whose names do not have @code{fs:file-attribute-bindings}
properties are ignored completely.

You can also add your own attribute names that affect bindings.  If
an indicator symbol has an @code{fs:file-attribute-bindings} property, the
value of that property is a function that is called when a file with a
file attribute of that name is going to be read from.  The function is
given three arguments: the file pathname, the attribute name, and the
attribute value.  It must return two values: a list of variables to be
bound and a list of values to bind them to.  The function for the
@code{Base} keyword could have been defined by:
@lisp
(defun (:base file-attribute-bindings) (file ignore bse)
  (if (not (and (typep bse 'fixnum)
		(> bse 1)
		(< bse 37.)))
      (ferror 'fs:invalid-file-attrbute
	      "File ~A has an illegal -*- Base:~D -*-"
	      file bse))
  (values (list 'base 'ibase) (list bse bse)))
@end lisp
@end defun

@defun fs:extract-attribute-bindings stream
Returns two values: a list of variables, and a corresponding list of values to bind them to,
giving the attribute bindings of the attribute list found on @i{stream}
@end defun

.defcondition fs:invalid-file-attribute (@code{error})
An attribute in the file attribute list had a bad value.  This is detected within
@code{fs:file-attribute-bindings}.
.end_defcondition

@section  Accessing Directories

To understand the functions in this section, it is vital to have read
the chapter on @i{pathnames}.  The @i{filespec} argument in many of
these functions may be a pathname or a namestring; its name, type and
version default to @code{:wild}.

@cindex file directory
@cindex directory (of files)

@defun listf filespec
Prints on @code{*standard-output*} the names of the files that match
@i{filespec}, and their sizes, creation dates, and other information
that comes in the directory listing.
@end defun

@defun fs:directory-list filespec &rest options
Finds all the files that match @i{filespec} and returns a list with one
element for each file.  Each element is a list whose car is the pathname
of the file and whose cdr is a list of the properties of the file; thus the element
is a disembodied property list and @code{get} may be used to access the file's
properties.  The car of one element is @code{nil}; the properties in this element
are properties of the file system as a whole rather than of a specific file.

@i{filespec} normally contains wildcards, and the data returned
describe all existing files that match it.  If it contains no wildcards,
it specifies a single file and only that file is described
in the data that are returned.

The @i{options} are keywords which modify the operation.  The following options
are currently defined:
@table @code
@item :noerror
'kindex :noerror fs:directory-list
If a file-system error (such as no such directory) occurs during the operation,
normally an error is signaled and the user is asked to supply a new pathname.
However, if @code{:noerror} is specified then, in the event of an error,
a condition object describing the error is returned as the result of @code{fs:directory-list}.
This is identical to the @code{:noerror} option to @code{open}.

@item :deleted
'kindex :deleted fs:directory-list
This is for file servers on which deletion is not permanent.  It specifies
that deleted (but not yet expunged) files are to be included in the
directory listing.

@item :sorted
'kindex :sorted fs:directory-list
This requests that the directory list be sorted by filenames before it
is returned.
@end table

The properties that may appear in the list of property lists returned by
@code{fs:directory-list} are host-dependent to some extent.  The following
properties are those that are defined for both ITS and TOPS-20 file servers.  This set of
properties is likely to be extended or changed in the future.
@cindex file properties
@table @code
@item :length-in-bytes
The length of the file expressed in terms of the basic units in which it is written
(characters in the case of a text file).
@item :byte-size
The number of bits in one of those units.
@item :length-in-blocks
The length of the file in terms of the file system's unit of storage allocation.
@item :block-size
The number of bits in one of those units.
@item :creation-date
The date the file was created, as a universal time.  See (time).
@item :reference-date
The most recent date on which the file was used, as a universal time or
@code{nil}, meaning the file was never referenced.
@item :modification-date
The most recent date on which the file's contents were changed, as a
universal time.
@item :author
The name of the person who created the file, as a string.
@item :reader
The name of the person who last read the file, as a string.
@item :not-backed-up
@code{t} if the file exists only on disk, @code{nil} if it has been backed up on magnetic tape.
@item :directory
@code{t} if this file is actually a directory.
@item :temporary
@code{t} if this file is temporary.
@item :deleted
@code{t} if this file is deleted.  Deleted files are included in the
directory list only if you specify the @code{:deleted} option.
@item :dont-delete
@code{t} indicates that the file is not allowed to be deleted.
@item :dont-supersede
@code{t} indicates that the file may not be superseded; that is, a file
with the same name and higher version may not be created.
@item :dont-reap
@code{t} indicates that this file is not supposed to be deleted
automatically for lack of use.
@item :dont-dump
@code{t} indicates that this file is not supposed to be dumped onto
magnetic tape for backup purposes.
@item :characters
@code{t} indicates that this file contains characters (that is, text).
@code{nil} indicates that the file contains binary data.
This property, rather than the file's byte size, should be used to
decide whether it is a text file.
@item :link-to
If the file is a link, this property is a string containing the name that
the link points to.
@item :offline
@code{T} if the file's contents are not online.
@item :incremental-dump-date
The last time this file was dumped during an incremental dump (a
universal time).
@item :incremental-dump-tape
The tape on which the last was saved in that incremental dump (a
string).
@item :complete-dump-date
The last time this file was dumped during an full dump (a
universal time).
@item :complete-dump-tape
The tape on which the last was saved in that full dump (a
string).
@item :generation-retention-count
The number of files differing in version that are kept around.
@item :default-generation-retention-count
The generation-retention-count that a file ordinarily gets when it is
created in this directory.
@item :auto-expunge-interval
The interval at which files are expunged from this directory, in
seconds.
@item :date-last-expunged
The last (universal) time this directory was expunged, or @code{nil}.
@item :account
The account to which the file belongs, a string.
@item :protection
A system-dependent description of the protection of this file as a
string.
@item :physical-volume
A string naming the physical volume on which the file is found.
@item :volume-name
A string naming the logical volume on which the file is found.
@item :pack-number
A string describing the pack on which this file is found.
@item :disk-space-description
A system-dependent description of the space usage on the file system.
This usually appears in the plist that applies to the entire directory
list.
@end table

The element in the directory list that has @code{nil} instead of a file's
pathname describes the directory as a whole.

@table @code
@item :physical-volume-free-blocks
This property is an alist in which each element maps a physical volume
name (a string) into a number, that is the number of free blocks on that volume.
@item :settable-properties
This property is a list of file property names that may be set.
This information is provided in the directory list because it is
different for different file systems.
@item :pathname
This property is the pathname from which this directory list was made.
@item :block-size
This is the number of words in a block in this directory.  It can be
used to interpret the numbers of free blocks.
@end table
@end defun

@defun fs:directory-list-stream filespec &rest options
This is like @code{fs:directory-list} but returns the information in a
different form.  Instead of returning the directory list all at once, it
returns a special kind of stream which gives out one element of the
directory list at a time.

The directory list stream supports two operations: @code{:entry} and
@code{:close}.  @code{:entry} asks for the next element of the directory
stream.  @code{:close} closes any connection to a remote file server.

The purpose of using @code{fs:directory-list-stream} instead of
@code{fs:directory-list} is that, when communicating with a remote file
server, the directory list stream can give you some of the
information without waiting for it to all be transmitted and parsed.
This is desirable if the directory is being printed on the console.
@end defun

@defun directory filespec
Returns a list of pathnames (truenames) of the files in the directory specified
by @i{filespec}.  Wildcards are allowed.  This is the Common Lisp way
to find the contents of a directory.
@end defun

@defun fs:expunge-directory filespec &key (error @code{t})
Expunges the directory specified in @i{filespec}; that is, permanently
eliminates any deleted files in that directory.  If @i{error} is @code{nil},
there is no error if the directory does not exist.

Note that not all file systems support this function.  To find out
whether a particular one does, send the @code{:undeletable-p} operation to
a pathname.  If it returns @code{t}, the file system of that pathname
supports undeletion (and therefore expunging).
@end defun

@defun fs:create-directory filespec &key (error @code{t})
Creates the directory specified in @i{filespec}.
If @i{error} is @code{nil}, there is no error if the directory cannot be
created; instead an error string is returned.
Not all file servers support creation of directories.
@end defun

@defun fs:remote-connect filespec &key (error @code{t}) access
Performs the TOPS-20 ``connect'' or ``access'' function, or their
equivalents, in a remote file server.  Access is done if
@i{access} is non-@code{nil}; otherwise, connect is done.

The connect operation grants you full access to the
specified directory.  The access operation grants you whatever access
to all files and directories you would have if logged in on the
specified directory.  Both operations affect access only, since the connected
directory of the remote server is never used by the Lisp Machine in
choosing which file to operate on.

This function may ask you for a password if one is required for the
directory you specify.  If the operation cannot be performed, then if
@i{error} is @code{nil}, an error object is returned.
@end defun

@noindent
File Properties:

@defun fs:change-file-properties file error-p &rest properties
Changes one or more properties of the
file @i{file}.  The @i{properties} arguments are alternating keywords
and values.  If an error occurs accessing the file or changing the
properties, the @i{error-p} argument controls what is done; if it is
@code{nil}, a condition object describing the error is returned; if it is
@code{t} a Lisp error is signaled.  If no error occurs,
@code{fs:change-file-properties} returns @code{t}.

Only some of the properties of a file may be changed; for instance,
its creation date or its author.  Exactly which properties may be
changed depends on the host file system; a list of the changeable
property names is the @code{:settable-properties} property of the file
system as a whole, returned by @code{fs:directory-list} as explained
above.
@end defun

@defun fs:file-properties file &optional (error-p @code{t})
Returns a disembodied property list for a single file (compare this to
@code{fs:directory-list}).  The car of the returned list is the truename of
the file and the cdr is an alternating list of indicators and values.
The @i{error-p} argument is the same as in @code{fs:change-file-properties}.
@end defun

@noindent
Filename Completion:
@cindex filename completion

@defun fs:complete-pathname defaults string type version &rest options
@i{string} is a partially-specified file name.  (Presumably it was typed in by a user
and terminated with the @code{Altmode} key or the @code{End} key to request completion.)
@code{fs:complete-pathname} looks in the file system on the appropriate host and
returns a new, possibly more specific string.  Any unambiguous abbreviations
are expanded out in a host-dependent fashion.

@i{defaults}, @i{type}, and @i{version} are the arguments to be given to
@code{fs:merge-pathname-defaults} (see (fs:merge-pathname-defaults-fun)) when the
user's input is eventually parsed and defaulted.

@i{options} are keywords (without following values) that control how the
completion is performed.  The following option keywords are allowed:
@table @code
@item :deleted
Looks for files which have been deleted but not yet expunged.

@item :read 1or* :in
'kindex :read fs:complete-pathname
'kindex :in fs:complete-pathname
The file is going to be read.  This is the default.

@item :print 1or* :write 1or* :out
'kindex :print fs:complete-pathname
'kindex :write fs:complete-pathname
'kindex :out fs:complete-pathname
The file is going to be written (i.e. a new version is going to be created).

@item :old
Looks only for files that already exist.  This is the default.

@item :new-ok
Allows either a file that already exists or a file that does not yet exist.
An example of the use of this is the @code{C-X} @code{C-F} (Find File) command in the editor.

@end table

The first value returned is always a string containing a file name, either the
original string or a new, more specific string.  The second value returned
indicates the success or failure of the completion.  It is @code{nil} if an
error occurred.  One possible error is that the file is on a file system that
does not support completion, in which case the original string is returned
unchanged.  Other possible second values are @code{:old}, which means that the
string completed to the name of a file that exists, @code{:new}, which means that
the string completed to the name of a file that could be created, and @code{nil}
again, which means that there is no possible completion.
@end defun

@noindent
Balance Directories:
@cindex balance directories

@defun fs:balance-directories filespec1 filespec2 &rest options
@code{fs:balance-directories} is a function for maintaining multiple copies
of a directory.  Often it is useful to maintain copies of your files on
more than one machine; this function provides a simple way of keeping
those copies up to date.

The function first parses @i{filespec1}, filling in missing components
with wildcards (except for the version, which is @code{:newest}).  Then
@i{filespec2} is parsed with @i{filespec1} as the default.  The
resulting pathnames are used to generate directory lists using
@code{fs:directory-list}.  Note that the resulting directory lists need not
be entire directories; any subset of a directory that
@code{fs:directory-list} can produce will do.

First the directory lists are matched up on the basis of file name and
type.  All of the files in either directory list which have both the
same name and the same type are grouped together.

The directory lists are next analyzed to determine if the directories
are consistent, meaning that two files with the same name and type have
equal creation-dates when their versions match, and greater versions
have later creation-dates.  If any inconsistencies are found, a warning
message is printed on the console.

If the version specified for both @i{filespec1} and @i{filespec2} was
@code{:newest} (the default), then the newest version of each file in each
directory is copied to the other directory if it is not already
there.  The result is that each directory has the newest copy
of every file in either of the two directories.

If one or both of the specified versions is not @code{:newest}, then @i{every}
version that appears in one directory list and not in the other is
copied.  This has the result that the two directories are completely the
same.  (Note that this is probably not the right thing to use to
@i{copy} an entire directory.  Use @code{copy-file} with a wildcard
argument instead.)

The @i{options} are keywords arguments which modify the operation.  The
following options are currently defined:

@table @code
@item :ignore
'kindex :ignore fs:balance-directories
This option takes one argument, which is a list of file names to ignore
when making the directory lists.  The default value is @code{nil}.

@item :error
'kindex :error fs:balance-directories
This option is identical to the @code{:error} option to @code{open}.

@item :query-mode
'kindex :query-mode fs:balance-directories
This option takes one argument, which indicates whether or not the user
should be asked before files are transferred.  If the argument is
@code{nil}, no querying is done.  If it is @code{:1->2}, then only files
being transferred from @i{filespec2} to @i{filespec1} are queried,
while if it is @code{:2->1}, then files transferred from @i{filespec1} to
@i{filespec2} are queried.  If the argument is @code{:always}, then
the user is asked about all files.

@item :copy-mode
'kindex :copy-mode fs:balance-directories
This option is identical to the @code{:copy-mode} option of @code{copy-file},
and is used to control whether files are treated as binary or textual
data.

@item :direction
This option specifies transfer of files in one direction only.
If the value is @code{:1->2} then files are transfered only from @i{filespec1}
to @i{filespec2}, never in the other direction.  If the value is
@code{:2->1} then files are transferred only from @i{filespec2} to
@i{filespec1}.  @code{nil}, the default, means transfer in either direction
as appropriate.
@end table
@end defun

@section  Errors in Accessing Files

.defcondition-flavor fs:file-error (@code{error})
This flavor is the basis for all errors signaled by the file system.

It defines two special operations, @code{:pathname} and @code{:operation}.
Usually, these return the pathname of the file being operated on, and
the operation used.  This operation was performed either on the pathname
object itself, or on a stream.

It defines prompting for the proceed types @code{:retry-file-operation} and
@code{:new-pathname}, both of which are provided for many file errors.
@code{:retry-file-operation} tries the operation again exactly as it was
requested by the program; @code{:new-pathname} expects on argument, a
pathname, and tries the same operation on this pathname instead of the
original one.
.end_defcondition-flavor

.defcondition fs:file-operation-failure (@code{fs:file-error})
This condition name signifies a problem with the file operation
requested.  It is an alternative to @code{fs:file-request-failure}
((file-request-failure-page)), which means that the file system
was unable to consider the operation properly.
.end_defcondition

All the following conditions in this section are always accompanied by
@code{fs:file-operation-failure}, @code{fs:file-error}, and @code{error}, so they
will not be mentioned.

.defcondition fs:file-open-for-output
The request cannot be performed because the file is open for output.
.end_defcondition

.defcondition fs:file-locked
The file cannot be accessed because it is already being accessed.  Just
which kinds of simultaneous access are allowed depends on the file
system.
.end_defcondition

.defcondition fs:circular-link
A link could not be opened because it pointed, directly or indirectly
through other links, to itself.  In fact, some systems report this condition
whenever a chain of links exceeds a fixed length.
.end_defcondition

.defcondition fs:invalid-byte-size
In @code{open}, the specified byte size was not valid for the particular
file server or file.
.end_defcondition

.defcondition fs:no-more-room
Processing a request requires resources not available, such as
space in a directory, or free disk blocks.
.end_defcondition

.defcondition fs:filepos-out-of-range
The @code{:set-pointer} operation was used with a pointer value outside the bounds of the file.
.end_defcondition

.defcondition fs:not-available
A requested pack, file, etc. exists but is currently off line or not available to users.
.end_defcondition

.defcondition fs:file-lookup-error
This condition name categorizes all sorts of failure to find a specified file,
for any operation.
.end_defcondition

.defcondition fs:device-not-found (@code{fs:file-lookup-error})
The specified device does not exist.
.end_defcondition

.defcondition fs:directory-not-found (@code{fs:file-lookup-error})
The specified directory does not exist.
.end_defcondition

.defcondition fs:file-not-found (@code{fs:file-lookup-error})
There is no file with the specified name, type and version.
This implies that the device and directory do exist,
or one of the errors described above would have been signaled.
.end_defcondition

.defcondition fs:multiple-file-not-found (@code{fs:file-lookup-error})
There is no file with the specified name and any of the
specified types, in @code{with-open-file-search}.
Three special operations are defined:
@table @code
@item :operation
Returns the function which used @code{with-open-file-search}, such as @code{load}.
@item :pathname
The base pathname used.
@item :pathnames
A list of all the pathnames that were looked for.
@end table
.end_defcondition

.defcondition fs:link-target-not-found (@code{fs:file-lookup-error})
The file specified was a link, but the link's target filename
fails to be found.
.end_defcondition

.defcondition fs:access-error
The operation is possible, but the file server is insubordinate and refuses to
obey you.
.end_defcondition

.defcondition fs:incorrect-access-to-file (@code{access-error}).
.defcondition1 fs:incorrect-access-to-directory (@code{access-error}).
The file server refuses to obey you because of protection attached to
the file (or, the directory).
.end_defcondition

.defcondition fs:invalid-wildcard
A pathname had a wildcard in a place where the particular file server
does not support them.  Such pathnames are not created by pathname
parsing, but they can be created with the @code{:new-pathname} operation.
.end_defcondition

.defcondition fs:wildcard-not-allowed
A pathname with a wildcard was used in an operation that does not support it.
For example, opening a file with a wildcard in its name.
.end_defcondition

.defcondition fs:wrong-kind-of-file
An operation was done on the wrong kind of file.
If files and directories share one name space and it is an error to open
a directory, the error possesses this condition name.
.end_defcondition

.defcondition fs:creation-failure
An attempt to create a file or directory failed for a reason
specifically connected with creation.
.end_defcondition

.defcondition fs:file-already-exists (@code{fs:creation-failure})
The file or directory to be created already exists.
.end_defcondition

.defcondition fs:superior-not-directory (@code{fs:creation-failure} @code{fs:wrong-kind-of-file})
In file systems where directories and files share one name space, this
error results from an attempt to create a file using a filename
specifying a directory whose name exists in the file system but is not
a directory.
.end_defcondition

.defcondition fs:delete-failure
A file to be deleted exists, but for some reason cannot be deleted.
.end_defcondition

.defcondition fs:directory-not-empty (@code{fs:delete-failure})
A file could not be deleted because it is a directory and has files in it.
.end_defcondition

.defcondition fs:dont-delete-flag-set (@code{fs:delete-failure})
A file could not be deleted because its ``don't delete'' flag is set.
.end_defcondition

.defcondition fs:rename-failure
A file to be renamed exists, but the renaming could not be done.  The
@code{:new-pathname} operation on the condition instance returns the
specified new pathname, which may be a pathname or a string.
.end_defcondition

.defcondition fs:rename-to-existing-file (@code{fs:rename-failure})
Renaming cannot be done because there is already a file with the
specified new name.
.end_defcondition

.defcondition fs:rename-across-directories (@code{fs:rename-failure})
Renaming cannot be done because the new pathname contains a different
device or directory from the one the file is on.  This may not always be
an error--some file systems support it in certain cases--but when
it is an error, it has this condition name.
.end_defcondition

.defcondition fs:unknown-property (@code{fs:change-property-failure})
A property name specified in a @code{:change-properties} operation is not
supported by the file server.  (Some file servers support only a fixed
set of property names.)  The @code{:property} operation on the condition
instance returns the problematical property name.
.end_defcondition

.defcondition fs:invalid-property-value (@code{fs:change-property-failure})
In a @code{:change-properties} operation, some property was given a value
that is not valid for it.  The @code{:property} operation on the
condition instance returns the property name, and the @code{:value}
operation returns the specified value.
.end_defcondition

.defcondition fs:invalid-property-name (@code{fs:change-property-failure})
In a @code{:change-properties} operation, a syntactically invalid property
name was specified.  This may be because it is too long to be stored.
The @code{:property} operation on the condition instance returns the
property name.
.end_defcondition

@section  File Servers
@cindex file servers

Files on remote file servers are accessed using @i{file servers} over
the Chaosnet.  Normally connections to servers are established
automatically when you try to use them, but there are a few ways you can
interact with them explicitly.

	When characters are written to a file server computer that
normally uses the ASCII character set to store text, Lisp Machine
characters are mapped into an encoding that is reasonably close to an
ASCII transliteration of the text.  When a file is written, the
characters are converted into this encoding; the inverse
transformation is done when a file is read back.  No information is
lost.  Note that the length of a file, in characters, is not the
same measured in original Lisp Machine characters as it is measured in
the encoded ASCII characters.  In the currently implemented ASCII file
servers, the following encoding is used.  All printing characters and
any characters not mentioned explicitly here are represented as
themselves.  Codes 010 (lambda), 011 (gamma), 012 (delta), 014
(plus-minus), 015 (circle-plus), 177 (integral), 200 through 207
inclusive, 213 (@code{Delete}), and 216 and anything higher, are preceded
by a 177; that is, 177 is used as a quoting character for these codes.
Codes 210 (@code{Overstrike}), 211 (@code{Tab}), 212 (@code{Line}), and 214 (@code{Page}), are
converted to their ASCII cognates, namely 010 (backspace), 011
(horizontal tab), 012 (line feed), and 014 (form feed) respectively.
Code 215 (@code{Return}) is converted into 015 (carriage return) followed by
012 (line feed).  Code 377 is ignored completely, and so cannot be
stored in files.

@cindex fascism
@cindex passwords

When a file server is first created for you on a particular host, you
must tell the server how to log in on that host.  This involves
specifying a @i{username}, and, if the obstructionists are in control
of your site, a password.
The Lisp Machine prompts you for these on the terminal when they are
needed.

Logging in a file server is not the same thing as logging in on the Lisp
Machine (see @code{login}, (login-fun)).  The latter identifies you as a
user in general and involves specifying one host, your login host.  The
former identifies you to a particular file server host and must be done
for each host on which you access files.  However, logging in on the
Lisp Machine does specify the username for your login host and logs in
a file server there.

The Lisp Machine uses your username (or the part that follows
the last period) as a first guess for your password (this happens to
take no extra time).  If that does not work, you are asked to type a
password, or else a username and a password, on the keyboard.  You do
not have to give the same user name that you are logged in as, since you
may have or use different user names on different machines.

Once a password is recorded for one host, the system uses that password
as the guess if you connect to a file server on another host.

@defvar fs:user-unames
This is an alist matching host names with the usernames you have
specified on those hosts.  Each element is the cons of a host object and
the username, as a string.

For hosts running ITS, the symbol @code{fs:its} is used instead of a
host object.  This is because every user has the same username on all
ITS hosts.
@end defvar

@defvar fs:user-host-password-alist
Once you have specified a password for a given username and host, it
is remembered for the duration of the session in this variable.
The value is a list of elements, each of the form
@lisp
((@i{username} @i{hostname}) @i{password})
@end lisp
All three data are strings.
@end defvar

The remembered passwords are used if more than one file server is needed
on the same host, or if the connection is broken and a new file server
needs to be created.

@cindex paranoia
If you are very scared of your password being known, you can turn off
the recording by setting this variable:

@defvar fs:record-passwords-flag
Passwords are recorded when typed in if this variable is non-@code{nil}.
@end defvar

You should set the variable at the front of your init file, and also set
@code{fs:user-host-password-alist} to @code{nil}, since it will already have
recorded your password when you logged in.

If you do not use a file server for a period of time, it is killed to
save resources on the server host.

@defvar fs:host-unit-lifetime
This is the length of time after which an idle file server connection
should be closed, in 60ths of a second.  The default is 20 minutes.
@end defvar

Some hosts have a caste system in which all users are not equal.  It is
sometimes necessary to enable one's privileges in order to exercise
them.  This is done with these functions:
@cindex capabilities

@defun fs:enable-capabilities host &rest capabilities
Enables the named capabilities on file servers for the specified host.
@i{capabilities} is a list of strings, whose meanings depend on the
particular file system that is available on @i{host}.
If @i{capabilities} is @code{nil}, a default list of capabilities is
enabled; the default is also dependent on the operating system type.
@end defun

@defun fs:disable-capabilities host &rest capabilities
Disables the named capabilities on file servers for the specified host.
@i{capabilities} is a list of strings, whose meanings depend on the
particular file system that is available on @i{host}.
If @i{capabilities} is @code{nil}, a default list of capabilities is
disabled; the default is also dependent on the operating system type.
@end defun

The PEEK utility has a mode that displays the status of all your file
connections, and of the @i{host unit} data structures that record them.
Clicking on a connection with the mouse gets a menu of operations, of
which the most interesting is @code{reset}.  Resetting a host unit may
be useful if the connection becomes hung.

@subsection Errors in Communication with File Servers

.defcondition fs:file-request-failure (@code{fs:file-error} @code{error})
This condition name categorizes errors that prevent the file system from
processing the request made by the program.
.end_defcondition

The following condition names are always accompanied by the more general
classifications @code{fs:file-request-failure}, @code{fs:file-error}, and @code{error}.

.defcondition fs:data-error
This condition signifies inconsistent data found in the file system,
indicating a failure in the file system software or hardware.
.end_defcondition

.defcondition fs:host-not-available
This condition signifies that the file server host is up, but refusing
connections for file servers.
.end_defcondition

.defcondition fs:network-lossage
This condition signifies certain problems in the use of the Chaosnet by a file server,
such as failure to open a data connection when it is expected.
.end_defcondition

.defcondition fs:not-enough-resources
This condition signifies a shortage of resources needed to consider
processing a request, as opposed to resources used up by the request
itself.  This may include running out of network connections or job
slots on the server host.  It does not include running out of space in a
directory or running out of disk space, because these are resources
whose requirements come from processing the request.
.end_defcondition

.defcondition fs:unknown-operation
This condition signifies that the particular file system fails to
implement a standardly defined operation; such as, expunging or
undeletion on ITS.
.end_defcondition

@chapter The Chaosnet

The purpose of the basic software protocol of Chaosnet is to allow
high-speed communication among processes on different machines, with no
undetected transmission errors.

@section  Chaosnet Overview

The principal service provided by Chaosnet is a @i{connection} between
two user processes.  This is a full-duplex reliable packet-transmission
channel.  The network undertakes never to garble, lose, duplicate, or
resequence the packets; in the event of a serious error it may break the
connection off entirely, informing both user processes.  User programs
may deal explicitly in terms of packets.  They may also ignore packet
boundaries and treat the connection as two uni-directional streams of
8-bit or 16-bit bytes, but this really works by means of packets.

If you just want to ask a question of another process or host and
receive a reply, you can use a @i{simple transaction}: You send only
one packet to the other host, and it sends one packet back.  This is
more efficient than establishing a connection and using it only briefly.
In a simple transaction, the server cannot tell whether the user
received the answer; and if the user does not receive the answer, it
cannot tell whether the server received the question.  In fact, the
server might receive the question more than once.  If this is
unacceptable, a connection must be used.

Each node (or host) on the network is identified by an @i{address},
which is a 16-bit number.  These addresses are used in the routing of
packets.  There is a table (the system host table, @code{SYS: CHAOS; HOSTS
TXT}) that relates symbolic host names to numeric host addresses.  The
host table can record addresses on any number of different networks, and
in certain contexts a host address is meaningful only together with the
name of the network it is for.

The data transmitted over connections are in units called @i{packets}.
Each packet contains an 8-bit number, the @i{opcode}, which indicates
what its function is.  Opcode numbers are always given in octal.
Opcodes less than 200 (octal) are special purpose.  Each such opcode
that is used has an assigned name and a specific function.  Users need
not know about all of them.  Opcodes 200 through 277 (octal) are used
for 8-bit user data.  Opcodes 300 through 377 (octal) are used for
16-bit user data.

Each packet also contains some number of data bytes, whose meaning
depends on the opcode.  If the opcode is for user data, then it is up to
the application user software to decide on the interpretation.

@noindent
Establishing a connection:

A connection is created because one process sends a request to a host.
The request is a packet containing the special-purpose opcode RFC.  The
data contains a @i{contact name} which is used to find the process to
connect to.  There may be a process on the target host @i{listening} on
this contact name.  If so, it decides whether to agree to the
connection.  Alternatively, the contact name can be the name of a standard service
such as 7TELNET*.  In this case, the receiving host creates a
process to respond, loaded with the program for that service.

Once a connection has been established, there is no more need for the
contact name and it is discarded.  The Lisp Machine remembers what
contact name was used to open a connection, but this is only for the
user's information.

In the case where two existing processes that already know about each
other want to establish a connection, they must agree on a contact name,
and then one of them must send the request while the other listens.
They must agree between themselves which is to do which.

Contact names are restricted to strings of upper-case letters, numbers,
and ASCII punctuation.  The maximum length of a contact name is limited
only by the packet size, although on ITS hosts the names of
automatically-started servers are limited by the file-system to six characters.
The contact name is terminated by a space.  If the RFC packet contains
data beyond the contact name, it is just for interpretation by the
listening process, which can also use it in deciding whether to accept
the connection.

A simple transaction is also begun with an RFC packet.  There is
nothing in the RFC packet which indicates whether it is intended to
start a connection or a simple transaction.  The server has the option
of doing either one.  But normally any given server always does one or
the other, and the requestor knows which one to expect.

The server accepts the request for a connection by sending an OPN packet
(a packet with opcode OPN) to the requestor.  It can also refuse the
connection by sending a CLS packet.  The data in the CLS packet is a
string explaining the reason for the refusal.  Another alternative is to
tell the requestor to try a different host or a different contact name.
This is called @i{forwarding} the request, and is done with a FWD
packet.

The server can also respond with an answer, an ANS packet, which is the
second half of a simple transaction.  (Refusing and forwarding are also
meaningful when a simple transaction is intended, just as when a
connection is intended).

@noindent
Once the connection is open:

Data transmitted through Chaosnet generally follow Lisp Machine
standards.  Bits and bytes are numbered from right to
left, or least-significant to most-significant.  The first 8-bit byte
in a 16-bit word is the one in the arithmetically least-significant
position.  The first 16-bit word in a 32-bit double-word is the one
in the arithmetically least-significant position.  This is the
``little-endian'' convention.

Big-endian machines such as the PDP-10 need to reorder the characters
in a word in order to access them conveniently.  For their sake, some
packet opcodes imply 8-bit data and some imply 16-bit data.  Packets
known to contain 8-bit bytes, including opcodes 200 through 277, are
stored in the big-endian machine's memory a character at a time,
whereas packets containing 16-bit data are stored 16 bits at a time.

The character set used is dictated by the higher-level protocol in use.
Telnet and Supdup, for example, each specifies its own ASCII-based character set.
The default character set--used for new protocols and for text that
appears in the basic Chaosnet protocol, such as contact names--is
the Lisp Machine character set.

If one process tries to send data faster than the other can process it,
the buffered packets could devour lots of memory.  Preventing this is
the purpose of @i{flow control}.  Each process specifies a @i{window
size}, which is the number of packets that are allowed to be waiting
for that process to read.  Attempting to send on a connection whose
other side's window is full waits until the other side reads some
packets.  The default window size is 13, but for some applications you
might wish to specify a larger value (see @code{chaos:connect},
(chaos:connect-fun)).  There is little reason ever to
specify a smaller value.

@noindent
Breaking a connection:

Either end of a connection can break the connection abruptly by sending
a CLS packet.  The data in this packet is a string describing why the
connection was broken.

To break a connection gently, it is necessary to verify that all the
data transmitted was received properly before sending a CLS.  This
matters in some applications and is unnecessary in others.  When it is
needed, it is done by sending a special packet, an EOF packet, which is
mostly like a data packet except for its significance with regard to
closing the connection.  The EOF packet is like the words ``the end'' at
the end of a book: it tells the recipient that it has received all the
data it is supposed to receive, that there are no missing pages that
should have followed.  When the sender of the EOF sees the
acknowledgement for the EOF packet, indicating that the EOF was received
and understood, it can break the connection with a CLS.

If a process that expects to receive an EOF gets a CLS with no EOF, it
takes this to mean that the connection was broken before the
transmission was finished.  If the process does receive an EOF, it does
not break the connection itself immediately.  It waits to see the sender
of the EOF break it.  If this does not happen in a few seconds, the EOF
recipient can break the connection.

It is illegal to put data in an EOF packet; in other words, the byte
count should always be zero.  Most Chaosnet implementations simply
ignore any data that is present in an EOF.

If both sides are sending data and both need to know for certain where
``the end'' is, they must do something a little more complicated.
Arbitrarily call one party the user and the other the server.  The
protocol is that after sending all its data, each party sends an EOF and
waits for it to be acknowledged.  The server, having seen its EOF
acknowledged, sends a second EOF.  The user, having seen its EOF
acknowledged, looks for a second EOF and @i{then} sends a CLS and goes
away.  The server goes away when it sees the user's CLS, or after a
brief timeout has elapsed.  This asymmetrical protocol guarantees that
each side gets a chance to know that both sides agree that all the data
have been transferred.  The first CLS is sent only after both sides
have waited for their (first) EOF to be acknowledged.

@noindent
Clearing up inconsistencies:

If a host crashes, it is supposed to forget all the connections that it
had.  When a packet arrives on one of the former connections, the host
will report ``no such connection'' to the sender with a LOS packet, whose
data is a string explaining what happened.  The same thing happens if a
CLS packet is lost; the intended recipient may keep trying to use the
connection that the other side (which sent the CLS) no longer believes
should exist.  LOS packets are used
whenever a host receives a packet that it should not be getting; the
recipient of the LOS packet knows that the connection it thought it was
using does not exist any more.

@section  Conns

On the Lisp Machine, your handle on a connection is a named
structure of type @code{chaos:conn}.  The @code{conn} may have an actual
connection attached to it, or it may have a connection still being made,
or record that a connection was refused, closed or broken.

@table @code
@item chaos:inactive-state "connection state"
This @code{conn} is not really in use at all.

@item chaos:rfc-sent-state "connection state"
This @code{conn} was used to request a connection to another process,
but no reply has been received.  When the reply is received, it may
change the @code{conn}'s state to @code{chaos:answered-state},
@code{chaos:cls-received-state}, or @code{chaos:open-state}.

@item chaos:listening-state "connection state"
This @code{conn} is being used to listen with.
If a RFC packet is received for the contact name you are listening
on, the state changes to @code{chaos:rfc-received-state}.

@item chaos:rfc-received-state "connection state"
This means that your listen has ``heard'' an RFC packet that matches
it.  You can accept, reject, forward or answer the request.  Accepting
goes to state @code{chaos:open-state}; refusing or forwarding goes to to state
@code{chaos:inactive-state}.

@item chaos:open-state "connection state"
This @code{conn} is one end of an open connection.
You can receive any data packets that are waiting and you can transmit
data.

@item chaos:answered-state "connection state"
This @code{conn} was used to send an RFC packet and an ANS packet
was received in response (a simple transaction answer arrived).	 You can
read the ANS packet, that is all.

@item chaos:cls-received-state "connection state"
This @code{conn} has received a CLS packet (the connection was closed
or refused).  You can read any data packets that came in before the
CLS; after them you can read the CLS.

@item chaos:los-received-state "connection state"
This @code{conn}'s connection was broken and the other end sent a LOS
packet to say so.  The LOS packet is the only packet available to be
read.

@item chaos:host-down-state "connection state"
The host at the other end of this @code{conn}'s connection has not
responded to anything for a significant time.

@item chaos:foreign-state "connection state"
The connection is being used with a foreign protocol encapsulated in UNC
packets
(see the MIT AI Lab memo entitled ``Chaosnet'' for more information on this).
@end table

@noindent
These are
the fields of a @code{conn} that you might be interested in:

@defun chaos:conn-state conn
This slot holds the state of @i{conn}.  It is one of the symbols listed above.
@end defun

@defun chaos:conn-foreign-address conn
Returns the address of the host at the other end of this connection.
Use @code{si:get-host-from-address} to find out which host this is
(see (si:get-host-from-address-fun)).
@end defun

@defun chaos:conn-read-pkts conn
Internally threaded chain of incoming packets available to be read from
@i{conn}.

Its main use for the applications programmer is to test whether there
are any incoming packets.
@end defun

@defun chaos:conn-window-available conn
Returns the number of packets you may transmit before the network
software forces you to wait for the receiver to read some.
This is just a minimum.  By the time you actually send this many
packets, the receiver may already have said he has room for some more.
@end defun

@defun chaos:conn-plist conn
This slot is used to store arbitrary properties on @i{conn}.
You can store properties yourself; use property names that are not in
the @code{chaos} package to avoid conflict.
@end defun

@defun chaos:contact-name conn
Returns the contact name with which @i{conn} was created.  The contact
name is not significant to the functioning of the connection once an RFC
and LSN have matched, but it is remembered for the sake of debugging.
The user can use this function or the @code{:contact-name} message to a
stream to determine any contact name ``arguments.''
@end defun

@defun chaos:wait conn state timeout &optional whostate
Waits until the state of @i{conn} is not the symbol @i{state}, or until
@i{timeout} 60ths of a second have elapsed.  If the timeout occurs, @code{nil} is
returned; otherwise @code{t} is returned.  @i{whostate} is the process state to
put in the who-line; it defaults to @code{"Chaosnet wait"}.
@end defun

@section  Opening and Closing Connections

@subsection User-Side

@defun chaos:connect host contact-name &optional window-size timeout
Opens a stream connection; returns a @code{conn} if it succeeds or else a
string giving the reason for failure.  @i{host} may be a number or the name
of a known host.  @i{contact-name} is a string containing the contact name
and any additional arguments to go in the RFC packet.  If @i{window-size}
is not specified it defaults to 13.  If @i{timeout} is not specified it
defaults to 600 (ten seconds).
@end defun

@defun chaos:simple host contact-name &optional timeout
Taking arguments similar to those of @code{chaos:connect}, this performs the user
side of a simple-transaction.  The returned value is either an ANS packet
or a string containing a failure message.  The ANS packet should be disposed
of (using @code{chaos:return-pkt}, see below) when you are done with it.
@end defun

@defun chaos:remove-conn conn
Makes @i{conn} null and void.  It becomes inactive, all its buffered packets
are freed, and the corresponding Chaosnet connection (if any) goes away.
This is called @i{removing} the connection.  @i{conn} itself is marked
for reuse for another Chaosnet connection, so you should not do anything
else with it after it is removed.
@end defun

@defun chaos:close-conn conn &optional reason
Closes and removes the connection.  If it is open, a CLS packet is sent
containing the string @i{reason}.  Don't use this to reject RFC's; use
@code{chaos:reject} for that.
@end defun

@defun chaos:open-foreign-connection host index &optional pkt-allocation distinguished-port
Creates a @code{conn} that may be used to transmit and receive foreign
protocols encapsulated in UNC packets.  @i{host} and @i{index} are the
destination address for packets sent with @code{chaos:send-unc-pkt}.
@i{pkt-allocation} is the `window size', i.e. the maximum number of input
packets that may be buffered.  It defaults to 10.
If @i{distinguished-port} is supplied, the local index is set to it.
This is necessary for protocols that define the meanings of particular index
numbers.

See the MIT AI Lab memo entitled ``Chaosnet'' for more information on
using foreign protocols.
@end defun

@subsection Server-Side

@defun chaos:listen contact-name &optional window-size wait-for-rfc
Waits for an RFC for the specified contact name to arrive, then returns a
@code{conn} that is in @code{chaos:rfc-received-state}.  If @i{window-size} is
not specified it defaults to 13.  If @i{wait-for-rfc} is specified as @code{nil}
(it defaults to @code{t}) then the @code{conn} is returned immediately without
waiting for an RFC to arrive.
@end defun

@defvar chaos:server-alist
Contains an entry for each server that always exists.  When an RFC
arrives for one of these servers, the specified form is evaluated in the
background process; typically it creates a process that will then do a
@code{chaos:listen}.  Use the @code{add-initialization} function to add entries
to this list.  Here is how the EVAL server is installed:
@lisp
(ADD-INITIALIZATION "EVAL"
     '(PROCESS-RUN-FUNCTION "EVAL Server" 'EVAL-SERVER-FUNCTION)
     NIL
     'CHAOS:SERVER-ALIST)
@end lisp
@end defvar

@defun chaos:accept conn
@i{conn} must be in @code{chaos:rfc-received-state}.  An OPN packet is
transmitted and @i{conn} enters the @code{chaos:open-state}.  If the RFC packet
has not already been read with @code{chaos:get-next-pkt}, it is discarded.  You
should read it before accepting, if it contains arguments in addition to the
contact name.
@end defun

@defun chaos:reject conn reason
@i{conn} must be in @code{chaos:rfc-received-state}.  A CLS packet containing
the string @i{reason} is sent and @i{conn} is removed from the connection table.
@end defun

@defun chaos:forward-all contact-name host
Causes all future requests for connection to this host on @i{contact-name} 
to be forwarded to the same contact name at host @i{host}.
@end defun

@defun chaos:answer-string conn string
@i{conn} must be in @code{chaos:rfc-received-state}.  An ANS packet containing
the string @i{string} is sent and @i{conn} is removed from the connection table.
@end defun

@defun chaos:answer conn pkt
@i{conn} must be in @code{chaos:rfc-received-state}.  @i{pkt} is transmitted as
an ANS packet and @i{conn} is removed.  Use this function when the answer 
is some binary data rather than a text string.
@end defun

@defun chaos:fast-answer-string contact-name string
If a pending RFC exists to @i{contact-name}, an ANS containing @i{string}
is sent in response to it and @code{t} is returned.  Otherwise @code{nil} is returned.
This function involves the minimum possible overhead.  No @code{conn} is created.
@end defun

@c @defun chaos:forward conn pkt host
@c Not documented because it is useless and takes the wrong arguments.

@section  Stream Input and Output

@defun chaos:open-stream host contact-name &key window-size timeout error direction characters ascii-translation
Opens a Chaosnet connection and returns a stream that does I/O to it.
@i{host} is the host to connect to; @i{contact-name} is the contact name at that host.
These two arguments are passed along to @code{chaos:connect}.

If @i{host} is @code{nil}, a connection to @i{contact-name} is listened
for, and a stream is returned as soon as a request comes in for that
contact name.  At this time, you must accept or reject the connection by
invoking the stream operation @code{:accept} or @code{:reject}.  Before you
decide which to do, you can use the @code{:foreign-host} operation to find
out where the connection came from.

The remaining arguments are:
@table @i
@item window-size
@itemx timeout
These two arguments specify two arguments for @code{chaos:connect}.
@item error
If the value is non-@code{nil}, a failure to connect causes a Lisp error.
Otherwise, it causes a string describing the error to be returned.
@item direction
@itemx characters
@itemx ascii-translation
These three arguments are passed along to @code{chaos:make-stream}.
@end table
@end defun

@defun chaos:make-stream conn &key direction characters ascii-translation
Creates and returns a stream that does I/O on the connection @i{conn},
which should be open as a stream connection.  @i{direction} may be
@code{:input}, @code{:output} or @code{:bidirectional}.

If @i{characters} is non-nil (which is the default), the stream reads
and writes 8-bit bytes.  If @i{characters} is @code{nil}, the stream reads
and writes 16-bit bytes.

If @i{ascii-translation} is non-@code{nil}, characters written to the
stream are translated to standard ASCII before they are sent, and
characters read are translated from ASCII to the Lisp Machine character
set.
@end defun

@defmethod chaos:basic-stream :connection
Returns the connection with which this stream is connected.
@end defmethod

@defmethod chaos:basic-stream :contact-name
Return the contact name with with this stream was opened.
@end defmethod

@defmethod chaos:basic-stream :foreign-host
Returns the host object for the host at the other end of this stream's connection.
@end defmethod

@defmethod chaos:basic-stream :accept
Accepts the request for a connection which this stream received.
Used only for streams made by @code{chaos:open-stream} with @code{nil} as
the @i{host} argument.
@end defmethod

@defmethod chaos:basic-stream :reject reason-string
Rejects the request for a connection which this stream received, sending
@i{reason-string} in the CLS packet as the reason.  Used only for
streams made by @code{chaos:open-stream} with @code{nil} as the @i{host}
argument.
@end defmethod

@defmethod chaos:basic-stream :close &optional abort-p
Sends a CLS packet and removes the connection.  For output connections and bidirectional
connections, the @code{:eof} operation is performed first, if
@i{abort-p} is @code{nil}.
@end defmethod

@defmethod chaos:basic-output-stream :force-output
Any buffered output is transmitted.  Normally output is accumulated until a
full packet's worth of bytes are available, so that maximum-size packets are
transmitted.
@end defmethod

@defmethod chaos:basic-output-stream :finish
Waits until either all packets have been sent and acknowledged, or the connection ceases
to be open.  If successful, returns @code{t}; if the connection goes into a bad state,
returns @code{nil}.
@end defmethod

@defmethod chaos:basic-output-stream :eof
Forces out any buffered output, sends an EOF packet, and does a @code{:finish}.
@end defmethod

@defmethod chaos:basic-input-stream :clear-eof
Allows you to read past an EOF packet on input.  Normally, each @code{:tyi}
done at eof returns @code{nil} or signals the specified eof error.  If you
do @code{:clear-eof} on the stream, you can then read more data (assuming
there are data packets following the EOF packet).
@end defmethod

@section  Packet Input and Output

Input and output on a Chaosnet connection can be done at the whole-packet
level, using the functions in this section.  A packet is represented by
a @code{chaos:pkt} data structure.  Allocation of @code{pkts} is controlled by the system;
each @code{pkt} that it gives you must be given back.  There are functions to
convert between @code{pkts} and strings.  A @code{pkt} is an @code{art-16b} array
containing the packet header and data; the leader of a @code{pkt}
contains a number of fields used by the system.

.defconst chaos:first-data-word-in-pkt
This is the index in any @code{pkt} of the element that is the first
16-bit word of user data.  (Preceding elements are used to store a
header used by the hardware.)
.end_defconst

.defconst chaos:max-data-words-per-pkt
The maximum number of 16-bit data words allowed in a packet.
.end_defconst

@defun chaos:pkt-opcode pkt
Accessor for the opcode of the packet @i{pkt}.  To set the opcode, do
@lisp
(setf (chaos:pkt-opcode my-pkt) my-opcode)
@end lisp
The system provides names for all the opcodes standardly used.  The names useful to the applications programmer appear at the end of this section.
@end defun

@defun chaos:pkt-nbytes pkt
Accessor for the number-of-data-bytes field of @i{pkt}'s.
This field says how much of @i{pkt}'s contects are valid data,
measured in 8-bit bytes.
This field can be set with @code{setf} also.
@end defun

@defun chaos:pkt-string pkt
An indirect array that is the data field of @i{pkt} as a string of 8-bit bytes.
The length of this string is equal to @code{(chaos:pkt-nbytes @i{pkt})}.
If you wish to record the contects of @i{pkt} permanently, you must copy this string.
@end defun

@defun chaos:set-pkt-string pkt &rest strings
Copies the @i{strings} into the data field of @i{pkt}, concatenating them,
and sets @code{(chaos:pkt-nbytes @i{pkt})} accordingly.
@end defun

@defun chaos:get-pkt
Allocates a @code{pkt} for use by the user.
@end defun

@defun chaos:return-pkt pkt
Returns @i{pkt} to the system for reuse.  The packets given to you by @code{chaos:get-pkt},
@code{chaos:get-next-pkt} and @code{chaos:simple} should be returned to the system in this way
when you are finished with them.
@end defun

@defun chaos:send-pkt conn pkt &optional (opcode @code{chaos:dat-op})
Transmits @i{pkt} on @i{conn}.  @i{pkt} should have been allocated with @code{chaos:get-pkt}
and then had its data field and n-bytes filled in.  @i{opcode} must be a data opcode
(#o200 or more) or EOF.  An error is signaled, with condition @code{chaos:not-open-state},
if @i{conn} is not open.

Giving a @code{pkt} to @code{chaos:send-pkt} constitutes giving it back to the system.
You do not need to call @code{chaos:return-pkt}.
@end defun

@defun chaos:send-string conn &rest strings
Sends a data packet containing the concatenation of @i{strings} as its data.
@end defun

@defun chaos:send-unc-pkt conn pkt &optional pkt-number ack-number
Transmits @i{pkt}, an UNC packet, on @i{conn}.  The opcode, packet
number, and acknowledge number fields in the packet header are filled in
(the latter two only if the optional arguments are supplied).

See the MIT AI Lab memo entitled ``Chaosnet'' for more information on
using foreign protocols.
@end defun

@defun chaos:may-transmit conn
A predicate that returns @code{t} if there is any space in the window for
transmitting on @i{conn}.  If the value is @code{nil}, you may have to wait
if you try to transmit.  If the value is @code{t}, you certainly do not have to wait.
@end defun

@defun chaos:finish-conn conn &optional (whostate @code{"Net Finish"})
Waits until either all packets have been sent and acknowledged, or the connection ceases
to be open.  If successful, returns @code{t}; if the connection goes into a bad state,
returns @code{nil}.  @i{whostate} is the process state to display in the who-line
while waiting.
@end defun

@defun chaos:conn-finished-p conn
@code{t} unless @i{conn} is open and has sent packets which have not been acknowledged.
@end defun

@defun chaos:get-next-pkt conn &optional (no-hang-p @code{nil}) whostate check-conn-state
Returns the next input packet from @i{conn}.  When you are done with the packet you
must give it back to the system with @code{chaos:return-pkt}.  This can return
an RFC, CLS, or ANS packet, in addition to data, UNC, or EOF.

If no packets are available, @code{nil} is returned
if @i{no-hang-p} is @code{t}.  Otherwise, @code{chaos:get-next-pkt}
waits for a packet to come in or for the state to change.  @i{whostate} is displayed
in the who line; it defaults to @code{"Chaosnet Input"}.

If @i{check-conn-state} is non-@code{nil}, the connection state is checked
for validity before anything else is done, and an error is signaled if
the connection is in a bad state, with condition name
@code{chaos:host-down}, @code{chaos:los-received-state}, or
@code{chaos:read-on-closed-connection}.  If @i{check-conn-state} is @code{nil}
and @i{no-hang-p} is @code{t}, @code{nil} is returned.  @i{check-conn-state}
defaults to @code{(not @i{no-hang-p})}.
@end defun

@defun chaos:data-available conn
A predicate that returns @code{t} if there any input packets available from @i{conn}.
@end defun

@noindent
Here are symbolic names for the opcodes that an applications programmer
needs to know about:

.defconst chaos:rfc-op
This special-purpose opcode is used for requesting a connection.  The
data consists of the contact name terminated by a space character,
followed optionally by additional data whose meaning is up to the server
for that contact name.
.end_defconst

.defconst chaos:brd-op
This special purpose opcode is for requesting responses from many hosts.
Currently, there is no user end for initiating these requests in the
Lisp Machine system, but the Lisp Machine can respond to such requests.
An incoming packet of this type is treated like an RFC packet.
.end_defconst

.defconst chaos:lsn-op
This special-purpose opcode is used when you ask to listen on a contact
name.  The data is just the contact name.  This packet is never actually
sent over the network, just kept in the Chaosnet software and compared
with the contact names in RFC packets that arrive.
.end_defconst

.defconst chaos:opn-op
This special-purpose opcode is used by the server process to accept the
request for a connection conveyed by an RFC packet.
Its data serves only internal functions.
.end_defconst

.defconst chaos:ans-op
This special-purpose opcode is used to send a simple reply.  The simple
reply is sent back in place of opening a connection.
.end_defconst

.defconst chaos:los-op
This special-purpose packet is what you receive if you try to use a
connection that has been broken.  Its data is a message explaining the
situation, which you can print for the user.
.end_defconst

.defconst chaos:cls-op
This special-purpose packet is used to close a connection.  Its data is
a message explaining the reason, and it can be printed for the user.
Note that you cannot count on receiving a CLS packet because it is
not retransmitted if it is lost.  If that happens you get a
LOS when you try to use the connection (thinking it is still open).

CLS packets are also used for refusing to open a connection in the
first place.
.end_defconst

.defconst chaos:eof-op
This special-purpose opcode is used to indicate the end of the data that
you really want to transmit.  When this packet is acknowledged by the
other process, you know that all the real data was received properly.
You can wait for this with @code{chaos:finish}.
The EOF packet carries no data itself.
.end_defconst

.defconst chaos:dat-op
This is opcode 200 (octal), which is the normal opcode used for 8-bit
user data.  Some protocols use multiple data opcodes in the range 200
through 277, but simple protocols that do not need to distinguish
types of packets just use opcode 200.
.end_defconst

@section  Connection Interrupts

@defun chaos:interrupt-function conn
This attribute of a @code{conn} is a function to be called when certain
events occur on this connection.  Normally this is @code{nil}, which means
not to call any function, but you can use @code{setf} to store a function
here.  Since the function is called in the Chaosnet background process,
it should not do any operations that might have to wait for the network,
since that could permanently hang the background process.

The function's first argument is one of the following symbols, giving the
reason for the interrupt.  The function's second argument is @i{conn}.
Additional arguments may be present depending on the reason.  The possible
reasons are:
@table @code
@item :input
A packet has arrived for the connection when it had no input packets queued.
It is now possible to do @code{chaos:get-next-pkt} without having to wait.
There are no additional arguments.

@item :output
An acknowledgement has arrived for the connection and made space in the window
when formerly it was full.  Additional output packets may now be transmitted
with @code{chaos:send-pkt} without having to wait.
There are no additional arguments.

@item :change-of-state
The state of the connection has changed.  The third argument to the function
is the symbol for the new state.
@end table
@end defun

@defun chaos:read-pkts conn
Some interrupt functions want to look at the queued input packets of a connection
when they get a @code{:input} interrupt.  @code{chaos:read-pkts} returns the first packet
available for reading.  Successive packets can be found by following @code{chaos:pkt-link}.
@end defun

@defun chaos:pkt-link pkt
Lists of packets in the NCP are threaded together by storing each packet
in the @code{chaos:pkt-link} of its predecessor.  The list is terminated with @code{nil}.
@end defun

@section  Chaosnet Errors

.defflavor-condition sys:network-error (@code{error})
All errors from the Chaosnet code use flavors built on this one.
.end_defflavor-condition

@subsection Local Problems

.defflavor-condition sys:local-network-error (@code{sys:network-error} @code{error})
This flavor is used for problems in connection with the Chaosnet
that have entirely to do with what is going on in this Lisp Machine.
.end_defflavor-condition

.defcondition sys:network-resources-exhausted (@code{sys:local-network-error} @code{sys:network-error} @code{error})
Signaled when some local resource in the NCP was exhausted.  Most
likely, there are too many Chaosnet connections and the connection table
is full.
.end_defcondition

.defcondition sys:unknown-address (@code{sys:local-network-error} @code{sys:network-error} @code{error})
The @i{address} argument to @code{chaos:connect} or some similar function was not recognizable.
The @code{:address} operation on the condition instance returns the address that was supplied.
.end_defcondition

@subsection Problems Involving Other Machines' Actions

.defflavor-condition sys:remote-network-error (@code{sys:network-error} @code{error})
This flavor is used for network problems that involve the
actions (or lack of them) of other machines.
It is often useful to test for as a condition name.

The operations @code{:connection} and @code{:foreign-host} return the
@code{chaos:conn} object and the host object for the foreign host.
.end_defflavor-condition

All the condition names listed below imply the presence of
@code{sys:remote-network-error}, @code{sys:network-error} and
@code{error}.  For brevity, these are not mentioned in the
individual descriptions.

Every instance of @code{sys:remote-network-error} is either a
@code{sys:connection-error} or a @code{sys:bad-connection-state}.

.defcondition sys:connection-error
This condition name categorizes failure to complete a connection.
.end_defcondition

.defcondition sys:bad-connection-state
This condition name categorizes errors where an existing, valid connection
becomes invalid.  The error is not signaled until you try to use the connection.
.end_defcondition

.defcondition sys:host-not-responding
This condition name categorizes errors where no packets whatever are
received from the foreign host, making it seem likely that that host or
the network is down.
.end_defcondition

.defcondition sys:host-not-responding-during-connection (@code{sys:connection-error} @code{sys:host-not-responding})
This condition is signaled when a host does not respond while it is
being asked to make a connection.
.end_defcondition

.defcondition sys:no-server-up (@code{sys:connection-error})
This condition is signaled by certain functions which request service from
any available machine which can provide it, if no such machine is
responding or no host is listed as a server for a particular service.
.end_defcondition

.defcondition sys:host-stopped-responding (@code{sys:bad-connection-state} @code{sys:host-not-responding})
This condition is signaled when a host does not respond even though a
connection to it already exists.
.end_defcondition

.defcondition sys:connection-refused (@code{sys:connection-error})
This is signaled when a connection is refused.

The @code{:reason} operation on the condition instance returns the reason
specified in the CLS packet (a string) or @code{nil} if no reason was
given.

Note that many Chaosnet implementations do not send CLS packets when
there is no process or server listening for a contact name.  Also, it is
possible for the CLS packet to get lost in the network, so that the
error actually signalled is not unlikely to be 
@code{sys:host-not-responding-during-connection}.
.end_defcondition

.defcondition sys:connection-closed (@code{sys:bad-connection-state})
This is signaled when you try to send on a connection which has been closed
by the other host.

The @code{:reason} operation on the condition instance returns the reason
specified in the CLS packet (a string) or @code{nil} if no reason was
given.
.end_defcondition

.defcondition sys:connection-lost (@code{sys:bad-connection-state})
This is signaled when you try to use a connection on which a LOS packet was received.

The @code{:reason} operation on the condition instance returns the reason
specified in the CLS packet (a string) or @code{nil} if no reason was
given.
.end_defcondition

.defcondition sys:connection-no-more-data (@code{sys:bad-connection-state})
This is signaled when you try to read from a connection which has been
closed by the other host, when there are no packets left to be read.
(It is no error to read from a connection which has been closed, if you
have not yet read all the packets which arrived, including the CLS
packet).

The @code{:reason} operation on the condition instance returns the reason
specified in the CLS packet (a string) or @code{nil} if no reason was
given.
.end_defcondition

@section  Information and Control

@defun chaos:host-up-p host &optional (timeout @code{180.})
@code{t} if @i{host} responds over the Chaosnet within @i{timeout} sixtieths of
a second, otherwise @code{nil}.  The value is always @code{nil} if @i{host}
is not on the Chaosnet.
@end defun

@defun chaos:up-hosts host-list &optional number-of-hosts (timeout @code{250.})
Returns a list of all the hosts in @i{host-list} which are currently responding
over the Chaosnet.  @i{host-list} is a list of host names and/or host objects.
The value is always a list of host objects, possibly @code{nil} for none of them.

If @i{number-of-hosts} is non-@code{nil}, it should be a positive integer; when that
many hosts have responded, @code{chaos:up-hosts} returns right away without
bothering to listen for replies from the rest.

@i{timeout} is an integer; if a host fails to respond for that many
sixtieths of a second, it is assumed to be down.
@end defun

@defun chaos:host-data &optional host
@i{host} may be a number or a known host name, and defaults to the local host.  Two
values are returned.  The first value is the host name and the second is
the host number.  If the host is a number not in the table, it is asked its name
using the @code{STATUS} protocol; if no response is received the name
@code{"Unknown"} is returned.
@end defun

@defun chaos:print-conn conn &optional (short @code{t})
Prints everything the system knows about the connection.  If @i{short} is @code{nil} it
also prints everything the system knows about each queued input and output packet
on the connection.
@end defun

@defun chaos:print-pkt pkt &optional (short @code{nil})
Prints everything the system knows about the packet, except its data field.
If @i{short} is @code{t}, only the first line of the information is printed.
@end defun

@defun chaos:print-all-pkts pkt &optional (short @code{t})
Calls @code{chaos:print-pkt} on @i{pkt} and all packets on the threaded list emanating
from it.
@end defun

@defun chaos:status
Prints the hardware status.  (Currently works for the CADR only.)
@end defun

@defun chaos:reset
Resets the hardware and software and turns off Chaosnet communication.
@end defun

@defun chaos:assure-enabled
Turns on Chaosnet communication if it is not already on.  It is normally
always on unless you call one of the functions in this section.
@end defun

@defun chaos:enable
Resets the hardware and turns on Chaosnet communication.
@end defun

@defun chaos:disable
Resets the hardware and turns off Chaosnet communication.
@end defun

@defun chaos:show-routing-table host &optional (stream @code{*standard-output})
Print out @i{host}'s routing table onto @i{stream}.
@end defun

@defun chaos:show-routing-path &key (from @code{si:local-host}) to (stream @code{*standard-output})
Show how a packet would get from @i{from} to @i{to}.  For this to
work when the hosts are on different subnets, the bridge must respond to
the @code{DUMP-ROUTING-TABLE} request.
@end defun

.defconst chaos:my-address
The sixteen bit Chaosnet address of this Lisp Machine.  On the CADR, this
is set by reading
a location off the Chaosnet (I/O) board.  On a Lambda, this is set by
looking at the name of the disk pack, and using that as a host name to
get the Chaosnet address.  (This is because a Lambda talks Chaosnet
through an Ethernet interface, which has a pre-assigned address of its
own.)
.end_defconst

.defconst chaos:my-subnet
The high eight bits of @code{chaos:my-address}.
.end_defconst

.defconst chaos:routing-table
This is an @code{art-16b} array which contains for each subnet the address
of a bridge which is the best way of getting to that subnet.  Since
(currently) Lisp Machines can only have one interface to the network,
the addresses in the table all contain the same subnet, namely, the name
of @code{chaos:my-address}.
.end_defconst

.defconst chaos:maximum-routing-cost
The maximum cost that a route can be in the routing table.  Subnets with
a cost greater than this do not appear in the Peek Chaosnet display
.end_deconst

.defconst chaos:routing-table-cost
This is an @code{art-16b} array which contains for each subnet the cost for
getting to that subnet.
.end_defconst

@defvar chaos:*receive-broadcast-packets-p*
If not @code{nil} (the default), broadcast packets are responded to.
@end defvar

@defvar chaos:*brd-history*
A list of elements of the form @code{(}@i{contact-name address}@code{)}
recording what hosts have been contacting this machine with broadcast
requests.
@end defvar

@defvar chaos:*brd-pkts-in*
The number of broadcast packets (opcode @code{BRD-OP}) that have been
received.  This should never be less than @code{(length chaos:*brd-history*)}.
@end defvar

The PEEK program has a mode that displays the status of all of the Lisp
Machine's Chaosnet connections, and various other information, in a
continuously updating fashion.

@section  Higher-Level Protocols

This section briefly documents some of the higher-level protocols of
the most general interest.  There are quite a few other protocols which
are too specialized to mention here.  All protocols other than the
@code{STATUS} protocol are optional and are only implemented by those
hosts that need them.  All hosts are required to implement the
@code{STATUS} protocol since it is used for network maintenance.

The site files tell the Lisp Machine which hosts at your site implement
certain higher-level protocols.  See (site-files).

@subsection Status

All network nodes, even bridges, are required to answer RFC's with contact
name 7STATUS*, returning an ANS packet in a simple transaction.  This
protocol is primarily used for network maintenance.  The answer to a
7STATUS* request should be generated by the Network Control Program,
rather than by starting up a server process, in order to provide rapid
response.

The 7STATUS* protocol is used to determine whether a host is up,
to determine whether an operable path through the network exists between
two hosts, to monitor network error statistics, and to debug new Network
Control Programs and new Chaosnet hardware.  The @code{hostat} function
on the Lisp Machine uses this protocol.

The first 32 bytes of the ANS contain the name of the node, padded on
the right with zero bytes.  The rest of the packet contains blocks of
information expressed in 16-bit and 32-bit words, low byte first
(little-endian convention).  The low-order half of a 32-bit word comes
first.  Since ANS packets contain 8-bit data (not 16-bit), big-endian
machines such as PDP-10s have to shuffle the bytes explicitly when
using this protocol.  The first 16-bit word in a block is its
identification.  The second 16-bit word is the number of 16-bit words
to follow.  The remaining words in the block depend on the
identification.

This is the only block type currently defined.  All items are optional,
according to the count field, and extra items not defined here may be
present and should be ignored.  Note that items after the first two
are 32-bit words.
@table @strong
@item word 0
A number between 400 and 777 octal.  This is 400 plus a subnet number.
This block contains information on this host's direct connection to
that subnet.

@item word 1
The number of 16-bit words to follow, usually 16.

@item words 2-3
The number of packets received from this subnet.

@item words 4-5
The number of packets transmitted to this subnet.

@item words 6-7
The number of transmissions to this subnet aborted by collisions or
because the receiver was busy.

@item words 8-9
The number of incoming packets from this subnet lost because the
host had not yet read a previous packet out of the interface and consequently
the interface could not capture the packet.

@item words 10-11
The number of incoming packets from this subnet with CRC errors.
These were either transmitted wrong or damaged in transmission.

@item words 12-13
The number of incoming packets from this subnet that had no CRC
error when received, but did have an error after being read out of
the packet buffer.  This error indicates either a hardware problem with the
packet buffer or an incorrect packet length.

@item words 14-15
The number of incoming packets from this subnet that were rejected
due to incorrect length (typically not a multiple of 16 bits).

@item words 16-17
The number of incoming packets from this subnet rejected for
other reasons (e.g. too short to contain a header, garbage byte-count,
forwarded too many times.)
@end table

If word 0, the identification, is a number between 0 and 377 octal, this is an obsolete
format of block.  The identification is a subnet number and the counts are as
above except that they are only 16 bits instead of 32, and consequently may overflow.
This format should no longer be sent by any hosts.

Identification numbers of 1000 octal and up are reserved for future use.

@subsection Routing Information

For network and NCP debugging, this RFC/ANS protocol should be
implemented.  The contact name is 7DUMP-ROUTING-TABLE*, and the
response is an ANS packet whose words alternately contain a
method to getting to a subnet, and the cost.
If the method is zero, then the machine knows of no way to get to
that subnet.  If the method is positive and less than 400 (octal),
it is an interface of some kind to that subnet.
If the method is 400 (octal) or greater, this is actually a bridge
(host) off which the machine is bouncing packets destined for the
subnet.

@subsection Telnet and Supdup

The Telnet and Supdup protocols of the Arpanet exist in
identical form in Chaosnet.  These protocols allow access to a
computer system as an interactive terminal from another network node.

The contact names are 7TELNET* and 7SUPDUP*.  The direct borrowing of
the Telnet and Supdup protocols was eased by their use of 8-bit byte
streams and of only a single connection.  Note that these protocols define
their own character sets, which differ from each other and from the
Chaosnet standard character set.

For the Telnet protocol, refer to the RFC 854 (An RFC is a network
document put out by the NIC or Network Information Center.)  For the Supdup
protocol, see MIT AI Lab memo 644.

Chaosnet contains no counterpart of the INR/INS attention-getting feature
of the Arpanet.  The Telnet protocol sends a packet with opcode 201 octal in
place of the INS signal.  This is a controlled packet and hence does not
provide the ``out of band'' feature of the Arpanet INS, however it is
satisfactory for the Telnet `interrupt process' and `discard output'
operations on the kinds of hosts attached to Chaosnet.

@subsection File Access

The FILE protocol is primarily used by Lisp Machines to access files on
network file servers.  ITS, TOPS-20, Tenex, Unix, VMS, and Lisp Machines are
equipped to act as file servers.  A user end for the file protocol also
exists for all the operating systems mentioned (except VMS) and
is used for general-purpose file transfer.  For complete documentation
on the file protocol, see @code{SYS: DOC; FILE TEXT}.  The Arpanet file
transfer protocols have not been implemented on the Chaosnet (except
through the Arpanet gateway described below).

@subsection Mail

The MAIL protocol is used to transmit inter-user messages through the Chaosnet.
The Arpanet mail protocol in FTP was not used because of its complexity
and poor
state of documentation.  This simple protocol is by no means the last word
in mail protocols; however, it is adequate for the mail systems we presently
possess.

The sender of mail connects to contact name 7MAIL* and establishes a stream connection.
It then sends the names of all the recipients to which the mail is to be sent
at (or via) the server host.  The names are sent one to a line and terminated
by a blank line (two carriage returns in a row).  The Lisp Machine character
set is used.  A reply (see below) is immediately returned for each recipient.
A recipient is typically just the name of a user, but it can be a user-atsign-host
sequence or anything else acceptable to the mail system on the server machine.
After sending the recipients, the sender sends the text of the message, terminated
by an EOF.  After the mail has been successfully swallowed, a reply is sent.
After the sender of mail has read the reply, both sides close the connection.

In the MAIL protocol, a reply is a signal from the server to the user
(or sender) indicating success or failure.  The first character of a reply
is a plus sign for success, a minus sign for permanent failure (e.g. no such
user exists), or a percent sign for temporary failure (e.g. unable to receive message
because disk is full).  The rest of a reply is a human-readable character string
explaining the situation, followed by a carriage return.

The message text transmitted through the mail protocol normally contains a header
formatted in the Arpanet standard fashion.  Refer to the Arpanet Protocols Handbook.

The SMTP protocol can also be used over Chaosnet; the contact name is
7SMTP*.  See RFC 821 for details.

@subsection Send

The SEND protocol is used to transmit an interactive message (requiring
immediate attention) between users.  The sender connects to contact name
7SEND* at the machine to which the recipient is logged in.  The remainder of
the RFC packet contains the name of the person being sent to.  A stream
connection is opened and the message is transmitted, followed by an EOF.
Both sides close after following the end-of-data protocol described in (safe-eof-protocol).
The fact that the RFC was responded to affirmatively indicates that the
recipient is in fact present and accepting messages.  The message text should begin
with a suitable header, naming the user that sent the message.  The standard
for such headers, not currently adhered to by all hosts, is one line formatted
as in the following example:
@lisp
Moon@@MIT-MC 6/15/81 02:20:17
@end lisp
Automatic reply to the sender can be implemented by searching for the first
`@@' and using the SEND protocol to the host following the `@@' with the
argument preceding it.

@subsection Name

The Name/Finger protocol of the Arpanet exists in identical form
on the Chaosnet.  Both Lisp Machines and timesharing machines support this
protocol and provide a display of the user(s) currently logged in to them.

The contact name is 7NAME*, which can be followed by a space and a string of
arguments like the ``command line'' of the Arpanet Name protocol.  A stream
connection is established and the ``finger'' display is output in Lisp
Machine character set, followed by an EOF.

Lisp Machines also support the FINGER protocol, a simple-transaction version
of the NAME protocol.  An RFC with contact name 7FINGER* is transmitted and
the response is an ANS containing the following items of information separated
by carriage returns: the logged-in user ID, the location of the terminal, the
idle time in minutes or hours-colon-minutes, the user's full name, and
the user's group affiliation.

@subsection Time

The Time protocol allows a host such as a Lisp Machine that has no
long-term timebase to ask the time of day.  An RFC to contact name
7TIME* evokes an ANS containing the universal time as a 32-bit
number in four 8-bit bytes, least-significant byte first.

@defun chaos:host-time &optional hosts
Returns either a universal time, or a string explaining why the time
couldn't be found out, from one of @i{hosts}.  @i{Hosts} defaults to
the list of Chaosnet time server hosts.
@end defun

@defun chaos:print-host-times &optional hosts (stream @code{*standard-output*})
Print out on @i{stream} the times given by @i{hosts}.  Any host that
returns a time that is more than three minutes off this hosts time will
have its repsonse marked with ``!''  @i{Hosts} defaults to the list of
Chaosnet time server hosts.
@end defun

@subsection Time Server Control

For a time server that does not have any other way to correct its own
time (usually because it is a bridge), that host should support this
simple way of accepting a request to reset its own timebase.  The contact
name is 7RESET-TIME-SERVER*, and the response (on successful
completion) is an ANS.  Following such a request, if the network is the
only source of a timebase, it may be wise to
immediately disable the 7TIME* server, wait about 20 seconds, and then
attempt to get the time from the network.  This may prevent the host
from getting bad times from other machines that were ``infected'' with
it.

@defun chaos:reset-time-server host
Reset the network time server of @i{host}.  It will try to tell you the
time it gets afterward, if possible.
@end defun

@subsection Uptime

This is similar to the TIME protocol, except that the contact
name is 7UPTIME*, and the time returned is actually an interval (in
seconds) describing how long the host has been up.

@defun host-uptime host &optional (stream @code{*standard-output*})
Return the number of seconds that @i{host} has been up, and print that
out in human-readable form if @i{stream} is not @code{nil}.
@end defun

@defun uptime &optional (stream @code{*standard-output*}) hosts
Print out the uptimes for @i{hosts} (which if not supplied defaults to
all Chaosnet hosts) onto @i{stream}.
@end defun

@subsection Internet Gateway

This protocol allows a Chaosnet host to access almost any service on
the Internet.  The gateway server runs on each ITS host that is connected
to both networks.  It creates an Internet connection and a Chaosnet connection
and forwards data bytes from one to the other.  It also provides for a one-way
auxiliary connection, used for the data connection of the Arpanet File Transfer Protocol.

The RFC packet contains a contact name of 7TCP*, a space, the name
of the Internet host to be connected to, optionally followed by a space
and the contact-socket number in octal, which defaults to 1 if omitted.
The name of host can also be an Internet-format address.
The bi-directional 8-bit connection is made by connecting to the host
with TCP.

If a data packet with opcode 201 (octal) is received, an Arpanet INS
signal is transmitted.
Any data bytes in this packet are transmitted
normally.  (This does nothing in the current server, since TCP
does not define an interrupt signal.)

If a data packet with opcode 210 (octal) is received, an auxiliary
connection on each network is opened.  The first eight data bytes are
the Chaosnet contact name for the auxiliary connection; the user should
send an RFC with this name to the server.  The next four data bytes are the
TCP socket number to be connected to, in the wrong order, most-significant
byte first.  The byte-size of the auxiliary connection is 8 bits.

The normal closing of an TCP connection corresponds to an EOF packet.
Closing due to an error, such as Host Dead, corresponds to a CLS packet.

@subsection Host Table

The 7HOSTAB* protocol may be used to access tables of host addresses
on other networks, such as the Arpanet or Internet.  Servers for this protocol
currently exist for Tenex, TOPS-20, ITS, and Lisp Machines.

The user connects to contact name 7HOSTAB*, undertakes a number of
transactions, then closes the connection.  Each transaction is initiated
by the user transmitting a host name followed by a carriage return.  The
server responds with information about that host, terminated with an EOF,
and is then ready for another transaction.  The server's response
consists of a number of attributes of the host.  Each attribute consists
of an identifying name, a space character, the value of the attribute,
and a carriage return.  Values may be strings (free of carriage returns
and @i{not} surrounded by double-quotes) or octal numbers.
Attribute names and most values are in upper case.  There can be more than
one attribute with the same name; for example, a host may have more than
one name or more than one network address.

The standard attribute names defined now are as follows.  Note that more
are likely to be added in the future.

@table @code
@item ERROR
The value is an error message.  The only error one might expect
to get is ``no such host''.

@item NAME
The value is a name of the host.  There may be more than one 7NAME*
attribute; the first one is always the official name, and any additional
names are nicknames.

@item MACHINE-TYPE
The value is the type of machine, such as 7LISPM*, 7PDP10*, etc.

@item SYSTEM-TYPE
The value is the type of software running on the machine,
such as 7LISPM*, 7ITS*, etc.

@item ARPA
The value is an address of the host on the Arpanet, in the form
@i{host}/@i{imp}.  The two numbers are decimal.

@item CHAOS
The value is an address of the host on Chaosnet, as an octal number.

@item DIAL
The value is an address of the host on Dialnet, as a telephone number.

@item LCS
The value is an address of the host on the LCSnet, as two octal numbers
separated by a slash.

@item SU
The value is an address of the host on the SUnet, in the form
@i{net}#@i{host}.  The two numbers are octal.

@end table

@subsection Dover

A press file may be sent to the Dover printer at MIT by connecting to contact
name @code{DOVER} at host @code{AI-CHAOS-11}.  This host provides a protocol
translation service that translates from Chaosnet stream protocol to
the @code{EFTP} protocol spoken by the Dover printer.  Only one file at
a time can be sent to the Dover, so an attempt to use this service may
be refused by a CLS packet containing the string @code{"BUSY"}.
Once the connection has been established, the press file is transmitted
as a sequence of 8-bit bytes in data packets (opcode 200).  It is necessary
to provide packets rapidly enough to keep the Dover's program (Spruce)
from timing out; a packet every five seconds suffices.  Of course, packets
are normally transmitted much more rapidly.

Once the file has been transmitted, an EOF packet must be sent.
The transmitter must wait for that EOF to be acknowledged, then send a
second one, and then close the connection.  The two EOF's are
necessary to provide the proper connection-closing sequence for the
@code{EFTP} protocol.  Once the press file has been transmitted to the
Dover in this way and stored on the Dover's local disk, it will be
processed, prepared for printing, and printed.

If an error message is returned by the Dover while the press file is
being transmitted, it is reported back through the Chaosnet as a
LOS containing the text of the error message.  Such errors are
fairly common; the sender of the press file should be prepared to retry
the operation a few times.

Most programs that send press files to the Dover first wait for the
Dover to be idle, using the Foreign Protocol mechanism of Chaosnet to
check the status of the Dover.  This is optional, but is courteous to
other users since it prevents printing from being held up while
additional files are sent to the Dover and queued on its local disk.

It would be possible to send to a press file to the Dover using its
@code{EFTP} protocol through the Foreign Protocol mechanism, rather than
using the @code{AI-CHAOS-11} gateway service.  This is not usually done
because @code{EFTP}, which requires a handshake for every packet, tends to
be very slow on a timesharing system.

@subsection Remote Disk

The Remote Disk server exists on Lisp Machines to allow other machines
to refer to or modify the contents of the Lisp Machine's disk.
Primarily this is used for printing and editing the disk label.

After first establishing a connection to contact name 7REMOTE-DISK*,
the user process sends commands as packets which contain a line of text,
ending with a @code{Return} character.  The text consists of a command name, a
space, and arguments interpreted according to the command.  The server
processing the command may send disk data to the user, or it may read
successive packets and write them to the disk.  It is up to the user to
know how many packets of disk data to read or send after each command.
The commands are:
@table @code
@item READ @i{unit} @i{block} @i{n-blocks}
Reads @i{n-blocks} of data from disk @i{unit} starting at @i{block} and
transmits their contents to the user process.

@item WRITE @i{unit} @i{block} @i{n-blocks}
Reads data from the net connection and stores it into @i{n-blocks} disk
blocks on disk @i{unit} starting at @i{block}.

@item SAY @i{text}
Prints @i{text}, which is simply all the rest of the line following @code{SAY},
on the screen of the server host as a notification.
@end table

Each disk block is transmitted as three packets, the first two
containing the data for 121 (decimal) Lisp Machine words, and the third
containing the data for the remaining 14 (decimal) words of the disk
block.  Each packet's data ends with a checksum made by adding together
all the 8-bit bytes of the actual disk data stored in the packet.

@subsection The Eval Server

The Eval server is available on Lisp Machines with contact name
7EVAL*.  It provides a read-eval-print loop which reads and prints
using the Chaosnet connection.  The data consists of text in the ASCII
character set.

Each time a complete s-expression arrives, the Eval
server reads it, evaluates it and prints the list of values back onto
the network connection, followed by a CRLF.  There is no way for the
user process to tell the end of the output for a particular
s-expression; the usual application is simply to copy all the output to
a user's terminal asynchronously.

The Eval server is disabled when the Lisp Machine is logged in, unless
the user requests to enable it.

@defun chaos:eval-server-on mode
Turn the Eval server on this Lisp Machine on or off.
@i{mode} can be @code{t} (on), @code{nil} (off), or @code{:notify} (on, but
notify the user when a connection is made).
@end defun

@section  Using Higher Level Protocols

@defun qsend user &optional text
Sends a message to another user.  @code{qsend} is different from @code{mail} because it
sends the message immediately; it will appear within seconds on the other user's
screen, rather than being saved in her mail file.

@i{user} should be a string of the form @code{"@i{username7@@}hostname}"*;
@i{host} is the name of the Lisp Machine or timesharing system the user
is currently logged-in to.  Multiple recipients separated by commas are
also allowed.  @i{text} is a string which is the message.  If @i{text}
is not specified, you are prompted to type in a message.

Unlike @code{mail} and @code{bug}, @code{qsend} does not put up a window to allow
you to compose the message; it just reads it from the input stream.  Use
Converse if you wish to compose sends in the editor.  Converse can be
invoked by typing @code{System} @code{C}.  If you have started typing in a message to
@code{qsend}, you can switch to Converse by typing @code{Control-Meta-E}
(``Edit'').  The text you have typed so far is transferred into
Converse.

@code{qsend} does give you the ability to insert the text of the last
message you received.  Type @code{Control-Meta-Y} to do this.
@end defun

@defun reply &optional text
@defunx qreply &optional text
Sends @i{text} as a message to the last user who sent a message to you,
like @code{qsend} with an appropriate first argument provided.
The two names are synonymous.
@end defun

@defun chaos:shout &optional message
Sends @i{message} to every Lisp Machine at your site.
If you do not specify @i{message}, it is read from @code{*standard-input*}.
@end defun

@defun print-sends
Reprints any messages that have been received.  This is useful if you want to see
a message again.
@end defun

@defun supdup &optional host
@i{host} may be a string or symbol, which is taken as a host name,
or a number, which is taken as a host number.  If no @i{host} is
given, the machine you are logged-in to is assumed.
This function opens a connection to the host
over the Chaosnet using the Supdup protocol, and allows the Lisp
Machine to be used as a terminal for any ITS, UNIX or TOPS-20 system.

To give commands to @code{supdup}, type the @code{Network} key followed by one character.
Type @code{Network} followed by @code{Help} for documentation.
@end defun

@defun telnet &optional host simulate-imlac
@code{telnet} is similar to @code{supdup} but uses the Arpanet-standard Telnet
protocol, simulating a printing terminal rather than a display terminal.
@end defun

@defun hostat &rest hosts
Asks each of the @i{hosts} for its status using the 7STATUS* protocol,
and prints the results.  If no hosts are specified, all hosts on the
Chaosnet are asked.  Hosts can be specified either by name or by number.

For each host, a line is output that either says that the host is not
responding or gives metering information for the host's network
attachments.  If a host is not responding, that usually means that it is down
or there is no such host at that address.  A Lisp Machine can fail to respond
if it is looping inside @code{without-interrupts} or paging extremely heavily,
such that it is simply unable to respond within a reasonable amount of time.
@end defun

@defun finger &optional spec (stream @code{*standard-output*})
@defunx whois &optional spec (stream @code{*standard-output*})
Prints brief (@code{finger}) or verbose (@code{whois}) information about a user
or users specified by @i{spec}, on @i{stream}.  @i{spec} can be a user
name, @code{@@} followed by a host name, or a user name, @code{@@}, and a host
name.  If there is no host name, the default login host is used.  If
there is no user name, all users on the host are described.
@lisp
@exdent Examples:
(finger "@@OZ")
(whois "RMS@@OZ")
@end lisp
@end defun

@defun chaos:finger-all-lms &optional stream print-free return-free hosts
Prints a line of information about the user of each Lisp Machine in
@i{hosts} (the default is all Lisp Machines at this site) on @i{stream}
(default is @code{*standard-output*}).

If @i{print-free} is non-@code{nil}, information on free Lisp Machines and
nonresponding Lisp Machines is also printed.

If @i{return-free} is non-@code{nil}, then this function returns two
values, the first a list of host objects of free Lisp Machines, the
second a list of host objects of nonresponding Lisp Machines.
@end defun

@defun chaos:user-logged-into-host-p username host
Returns @code{t} if there is a user named @i{username} logged in on
@i{host} (a host name or host object).
@end defun

@defun chaos:find-hosts-or-lispms-logged-in-as-user user hosts
Return a list of host objects for hosts on which @i{user} is logged in.
All Lisp Machines at this site are checked, and so are @i{hosts} (which
are presumably non-Lisp machines).
@end defun

@defun tv:close-all-servers reason
Close the connections of all network servers on this Lisp Machine,
giving @i{reason} (a string) as the reason in the CLS packet.

Note that PEEK has a mode that displays information on the active
network servers.
@end defun

@chapter Packages
@cindex package
@cindex name spaces

	A Lisp program is a collection of function definitions.
The functions are known by their names, and so each must have its
own name to identify it.  Clearly a programmer must not use the same
name for two different functions.

	The Lisp Machine consists of a huge Lisp environment, in which many
programs must coexist. All of the operating system, the compiler, the
editor, and a wide variety of programs are provided in the initial
environment.  Furthermore, every program that you use during
a session must be loaded into the same environment.  Each of these
programs is composed of a group of functions; apparently each function
must have its own distinct name to avoid conflicts.  For example, if
the compiler had a function named @code{pull}, and you loaded a program
which had its own function named @code{pull}, the compiler's @code{pull} would be
redefined, probably breaking the compiler.

	It would not really be possible to prevent these conflicts,
since the programs are written by many different people who could
never get together to hash out who gets the privilege of using
a specific name such as @code{pull}.

	Now, if we are to enable two programs to coexist in the Lisp
world, each with its own function @code{pull}, then each program must have
its own symbol named @code{pull}, because there can't be two function
definitions on the same symbol.  This means that separate @i{name
spaces}--mappings between names and symbols--must be provided for
the two programs.  The package system is designed to do just that.

	Under the package system, the author of a program or a group
of closely related programs identifies them together as a @i{package}.
The package system associates a distinct name space with each package.

	Here is an example: suppose there are two programs named @code{chaos}
and @code{arpa}, for handling the Chaosnet and Arpanet respectively.  The
author of each program wants to have a function called @code{get-packet},
which reads in a packet from the network (or something).  Also, each
wants to have a function called @code{allocate-pbuf}, which allocates the
packet buffer.  Each ``get'' routine first allocates a packet buffer,
and then reads bits into the buffer; therefore, each version of
@code{get-packet} should call the respective version of @code{allocate-pbuf}.

	Without the package system, the two programs could not coexist
in the same Lisp environment.  But the package feature can be used to
provide a separate name space for each program.  What is required is
to define a package named @code{chaos} to contain the Chaosnet program, and
another package @code{arpa} to hold the Arpanet program.  When the Chaosnet
program is read into the machine, its symbols would be entered in the
@code{chaos} package's name space.  So when the Chaosnet program's
@code{get-packet} referred to @code{allocate-pbuf}, the @code{allocate-pbuf} in the @code{chaos}
name space would be found, which would be the @code{allocate-pbuf} of the
Chaosnet program--the right one.  Similarly, the Arpanet program's
@code{get-packet} would be read in using the @code{arpa} package and
would refer to the Arpanet program's @code{allocate-pbuf}.

In order to have multiple name spaces, the function @code{intern}, which
searches for a name, must allow the name space to be specified.
@code{intern} accepts an optional second argument which is the package
to search.

	It's obvious that every file has to be loaded into the right package
to serve its purpose.  It may not be so obvious that every file must be
compiled in the right package, but it's just as true.  Luckily, this
usually happens automatically.

	The system can get the package of a source file from its 7-*-*
line.  For instance, you can put at the front of your file a line such
as
@lisp
; -*- Mode:Lisp; Package:System-Internals -*-
@end lisp
The compiler puts the package name into the QFASL file for use when it
is loaded.  If a file doesn't have such a package specification in it,
the system loads it into the current package and tells you what it did.

@section  The Current Package

At any time, one package is the @i{current package}.  By default,
symbol lookup happens in the current package.

@defvar package
@defvarx *package*
The value of the this variable is the current package.  @code{intern}
searches this package if it is not given a second argument.
Many other functions for operating on packages also use this as the default.

Setting or binding the variable changes the current package.
May the Goddess help you if you set it to something that isn't a package!

The two names are synonymous.
@end defvar

Each process or stack group can have its own setting for the current
package by binding @code{*package*} with @code{let}.  The actual current package
at any time is the value bound by the process which is running.  The bindings
of another process are irrelevant until the process runs.

@defmac pkg-bind pkg body...
@i{pkg} may be a package or a package name.  The forms of the @i{body}
are evaluated sequentially with the variable @code{*package*} bound to the
package named by @i{pkg}.
@lisp
@exdent Example:
(pkg-bind "ZWEI"
  (read-from-string function-name))
@end lisp
@end defmac

When a file is loaded, @code{*package*} is bound to the correct package for
the file (the one named in the file's 7-*-* line).  The Chaosnet program
file has @code{Package: Chaos;} in the 7-*-* line, and therefore its symbols
are looked up in the @code{chaos} package.  A QFASL file has an encoded representation
of the 7-*-* line of the source file; it looks different, but it serves the
same purpose.

The current package is also relevant when you type Lisp expressions on
the keyboard; it controls the reading of the symbols that you type.
Initially it is the package @code{user}.  You can select a different
package using @code{pkg-goto}, or even by @code{setq}ing @code{*package*}.  If you
are working with the Chaosnet program, it might be useful to type
@code{(pkg-goto 'chaos)} so that your symbols are found in the @code{chaos}
package by default.  The Lisp listen loop binds @code{*package*} so that
@code{pkg-goto} in one Lisp listener does not affect others, or any
other processes whatever.

@defun pkg-goto package &optional globally
Sets @code{*package*} to @i{package}, if @i{package} is suitable.
(Autoexporting packages used by other packages are not suitable
because it you could cause great troubles by interning new symbols in them).
@i{package} may be specified as a package object or the name of one.
If @code{globally} is non-@code{nil}, then this function also calls
@code{pkg-goto-globally} (see below)
@end defun

The Zmacs editor records the correct package for each buffer; it is
determined from the file's 7-*-* line.  This package is used whenever
expressions are read from the buffer.  So if you edit the definition of
the Chaosnet @code{get-packet} and recompile it, the new definition is read in the
@code{chaos} package.  The current buffer's package is also used for all
expressions or symbols typed by the user.  Thus, if you type @code{Meta-.
allocate-pbuf} while looking at the Chaosnet program, you get the
definition of the @code{allocate-pbuf} function in the @code{chaos} package.

The variable @code{*package*} also has a global binding, which is in
effect in any process or stack group which does not rebind the variable.
New processes that do bind @code{*package*} generally use the global
binding to initialize their own bindings, doing @code{(let ((*package*
*package*)) ...)}.  Therefore, it can be useful to set the global
binding.  But you cannot do this with @code{setq} or @code{pkg-goto} from a
Lisp listener, or in a file, because that will set the local binding of
@code{*package*} instead.  Therefore you must use @code{setq-globally}
((setq-globally-fun)) or @code{pkg-goto-globally}.

@defun pkg-goto-globally package
Sets the global binding of @code{*package*} to @i{package}.
An error is signaled if @i{package} is not suitable.
Bindings of @i{package} other than the the global one are not changed,
including the current binding if it is not the global one.
@end defun

The name of the current package is always displayed in the middle of the
who line, with a colon following it.  This describes the process which
the who line in general is describing; normally, the process of the
selected window.  No matter how the current package is changed, the who
line will eventually show it (at one-second intervals).  Thus, while a
file is being loaded, the who line displays that file's package; in the
editor, the who line displays the package of the selected buffer.

@section  Package Prefixes
@cindex package prefixes

The separation of name spaces is not an uncrossable gulf.  Consider a
program for accessing files, using the Chaosnet.  It may be useful to
put it in a distinct package @code{file-access}, not @code{chaos}, so that the
programs are protected from accidental name conflicts.  But the file
program cannot exist without referring to the functions of the Chaosnet
program.

The colon character (`@code{:}') has a special meaning to the Lisp reader.
When the reader sees a colon preceded by the name of a package, it
reads the next Lisp object with @code{*package*} bound to that package.
Thus, to refer to the symbol @code{connect} in package @code{chaos}, we write
@code{chaos:connect}.  Some symbols documented in this manual require
package prefixes to refer to them; they are always written with an
appropriate prefix.

Similarly, if the @code{chaos} program wanted to refer to the @code{arpa}
program's @code{allocate-pbuf} function (for some reason), it could use
@code{arpa:allocate-pbuf}.

Package prefixes are printed on output also.  If you would need a
package prefix to refer to a symbol on input, then the symbol is printed
with a suitable package prefix if it supposed to be printed readably
(@code{prin1}, as opposed to @code{princ}).
Just as the current package affects how a symbol is read, it also
affects how the symbol is printed.  A symbol available in the
current package is never printed with a package prefix.

The printing of package prefixes makes it possible to print list
structure containing symbols from many packages and read the text to
produce an equal list with the same symbols in it--provided the
current package when the text is read is the same one that was current
when the text was printed.

The package name in a package prefix is read just like a symbol name.
This means that escape characters can be used to include special
characters in the package name.  Thus, @code{foo/:bar:test} refers to the
symbol @code{test} in the package whose name is ``FOO:BAR'', and so does
@code{|FOO:BAR|:test}.  Also, letters are converted to upper case unless
they are escaped.  For this reason, the actual name of a package is
normally all upper case, but you can use either case when you write a
package prefix.

In Common Lisp programs, simple colon prefixes are supposed to be used
only for referring to external symbols (see (external-symbols)).
To refer to other symbols, one is supposed to use two colons, as in
@code{chaos::lose-it-later}.
The Lisp machine tradition is to allow reference to any symbol with
a single colon.  Since this is upward compatible with what is allowed
in Common Lisp, single-colon references are always allowed.
However, double-colon prefixes are printed for internal symbols
when Common Lisp syntax is in use, so that data printed on a Lisp Machine
can be read by other Common Lisp implementations.

@section  Home Packages of Symbols

Each symbol remembers one package which it belongs to: normally, the
first one it was ever interned in.  This package is available as
@code{(symbol-package @i{symbol})}.

With @code{make-symbol} (see (make-symbol-fun)) it is possible to create a
symbol that has never been interned in any package.  It is called an
@i{uninterned symbol}, and it remains one as long as nobody interns it.
The package cell of an uninterned symbol contains @code{nil}.  Uninterned
symbols print with @code{#:} as a prefix, as in @code{#:foo}.  This syntax can
be used as input to create an uninterned symbol with a specific name;
but a new symbol is created each time you type it, since the mechanism
which normally makes symbols unique is interning in a package.
Thus, @code{(eq #:foo #:foo)} returns @code{nil}.

@defun symbol-package symbol
Returns the contents of @i{symbol}'s package cell, which is the
package which owns @i{symbol}, or @code{nil} if @i{symbol} is uninterned.
@end defun

@defun package-cell-location symbol
Returns a locative pointer to @i{symbol}'s package cell.  It is preferable to write
@lisp
(locf (symbol-package @i{symbol}))
@end lisp
rather than calling this function explicitly.
@end defun

Printing of package prefixes is based on the contents of the symbol's
package cell.  If the cell contains the @code{chaos} package, then
@code{chaos:} is printed as the prefix when a prefix is necessary.
As a result of obscure actions involving interning and uninterning in multiple
packages, the symbol may not actually be present in @code{chaos} any more.
Then the printed prefix is inaccurate.  This cannot be helped.
If the symbol is not where it claims to be, there is no easy way to
find wherever it might be.

@section  Keywords

Distinct name spaces are useful for symbols which have function definitions
or values, to enable them to be used independently by different programs.

Another way to use a symbol is to check for it with @code{eq}.  Then there
is no possibility of name conflict.  For example, the function @code{open},
part of the file system, checks for the symbol @code{:error} in its input
using @code{eq}.  A user function might do the same thing.  Then the symbol
@code{:error} is meaningful in two contexts, but these meanings do not
affect each other.  The fact that a user program contains the code @code{(eq
sym :error)} does not interfere with the function of system code which
contains a similar expression.

There is no need to separate name spaces for symbols used in this way.
In fact, it would be a disadvantage.  If both the Chaosnet program and
the Arpanet program wish to recognize a keyword named ``address'', for
similar purposes (naturally), it is very useful for programs that can
call either one if it is the @i{same} keyword for either program.  But
which should it be?  @code{chaos:address}?  @code{arpa:address}?

To avoid this uncertainty, one package called @code{keyword} has been set
aside for the keywords of all programs.  The Chaosnet and Arpanet
programs would both look for @code{keyword:address}, normally written
as just @code{:address}.

Symbols in @code{keyword} are the normal choice for names of keyword
arguments; if you use @code{&key} to process them, code is automatically
generated to look for for symbols in @code{keyword}.  They are also
the normal choice for flavor operation names, and for any set of
named options meaningful in a specific context.

@code{keyword} and the symbols belonging to it are treated
differently from other packages in a couple of ways designed to make
them more convenient for this usage.
@table @strong
@item *
Symbols belonging to @code{keyword} are constants; they always
evaluate to themselves.  (This is brought about by storing
the symbol in its own value cell when the symbol is placed in the package).
So you can write just @code{:error} rather than @code{':error}.
The nature of the application of keywords is such that they
would always be quoted if they were not constant.
@item *
A colon by itself is a sufficient package prefix for @code{keyword}.
This is because keywords are the most frequent application of package
prefixes.
@end table

@defun keywordp object
@code{t} if @i{object} is a symbol which belongs to the keyword package.
@end defun

There are certain cases when a keyword should @i{not} be used for a
symbol to be checked for with @code{eq}.  Usually this is when the symbol
1) does not need to be known outside of a single program, and 2) is to
be placed in shared data bases such as property lists of symbols which
may sometimes be in @code{global} or @code{keyword}.  For example, if the
Chaosnet program were to record the existence of a host named CAR by
placing an @code{:address} property on the symbol @code{:car}, or the symbol
@code{car} (notice that @code{chaos:car} @i{is} @code{car}), it would risk
conflicts with other programs that might wish to use the @code{:address}
property of symbols in general.  It is better to call the property
@code{chaos:address}.

@section  Inheritance between Name Spaces
@cindex inheritance between packages

In the simplest (but not the default) case, a package is independent
of all other packages.  This is not the default because it is not
usually useful.  Consider the standard Lisp function and variables names,
such as @code{car}: how can the Chaosnet program, using the @code{chaos} package,
access them?  One way would be to install all of them in the @code{chaos}
package, and every other package.  But it is better to have one table
of the standard Lisp symbols and refer to it where necessary.  This is
called @i{inheritance}.  The single package @code{global} is the only one
which actually contains the standard Lisp symbols; other packages such
as @code{chaos} contain directions to ``search @code{global} too''.

Each package has a hash table of the symbols.  The symbols in this table
are said to be @i{present} (more explicitly, @i{present directly}) in
the package, or @i{interned} in it.  In addition, each package has a
list of other packages to inherit from.  By default, this list contains
the package @code{global} and no others; but packages can be added and
removed at any time with the functions @code{use-package} and
@code{unuse-package}.  We say that a package @i{uses} the packages it
inherits from.  Both the symbols present directly in the package and the
symbols it inherits are said to be @i{available} in the package.

Here's how this works in the above example.  When the Chaosnet program
is read into the Lisp world, the current package would be the @code{chaos}
package.  Thus all of the symbols in the Chaosnet program would be
interned in the @code{chaos} package.  If there is a reference to a
standard Lisp symbol such as @code{append}, nothing is found in the
@code{chaos} package's own table; no symbol of that name is present
directly in @code{chaos}.  Therefore the packages used by @code{chaos} are
searched, including @code{global}.  Since @code{global} contains a symbol
named @code{append}, that symbol is found.  If, however, there is a
reference to a symbol that is not standard, such as @code{get-packet}, the
first time it is used it is not found in either @code{chaos} or @code{global}.
So @code{intern} makes a new symbol named @code{get-packet}, and installs it
in the @code{chaos} package.  When @code{get-packet} is referred to later in
the Chaosnet program, @code{intern} finds @code{get-packet} immediately in the
@code{chaos} package.  @code{global} does not need to be searched.

When the Arpanet program is read in, the current package is
@code{arpa} instead of @code{chaos}.  When the Arpanet program refers
to @code{append}, it gets the @code{global} one; that is, it shares the same one
that the Chaosnet program got.  However, if it refers to @code{get-packet},
it does @i{not} get the same one the Chaosnet program got, because
the @code{chaos} package is presumably not used by @code{arpa}.  The @code{get-packet}
in @code{chaos} not being available, no symbol is found, so a new one is
created and placed in the @code{arpa} package.  Further references in the
Arpanet program find that @code{get-packet}.  This is the desired
result: the packages share the standard Lisp symbols only.

Inheritance between other packages can also be useful, but it must
be restricted: inheriting only some of the symbols of the used package.
If the file access program refers frequently to the advertised symbols
of the Chaosnet program--the connection states, such as @code{open-state},
functions such as @code{connect}, @code{listen} and @code{open-stream}, and
others--it might be convenient to be able to refer to these symbols from
the @code{file-access} package without need for package prefixes.

@cindex importation of symbols
One way to do this is to place the appropriate symbols of the @code{chaos}
package into the @code{file-access} package as well.  Then they can be
accessed by the file access program just like its own symbols.  Such
sharing of symbols between packages never happens from the ordinary
operation of packages, but it can be requested explicitly using
@code{import}.

@defun import symbols &optional (package @code{*package*})
Is the standard Common Lisp way to insert a specific symbol or symbols
into a package.  @i{symbols} is a symbol or a list of symbols.  Each of
the specified symbols becomes present directly in @i{package}.

If a symbol with the same name is already present (directly or by
inheritance) in @i{package}, an error is signaled.  On proceeding, you
can say whether to leave the old symbol there or replace it with the one
specified in @code{import}.
@end defun

But importing may not be the best solution.  All callers of the Chaosnet
program probably want to refer to the same set of symbols: the symbols
described in the documentation of the Chaosnet program.  It is simplest
if the Chaosnet program, rather than each caller, says which symbols
they are.

Restricted inheritance allows the @code{chaos} package to specify which
of its symbols should be inheritable.  Then @code{file-access} can use
package @code{chaos} and the desired symbols are available in it.

@cindex external symbols
@cindex internal symbols
@cindex exportation of symbols
@cindex autoexporting packages
The inheritable symbols of a package such as @code{chaos} in this example
are called @i{external}; the other symbols are @i{internal}.  Symbols
are internal by default.  The function @code{export} is how symbols are
made external.  Only the external symbols of a package are inherited by
other packages which use it.  This is true of @code{global} as well; Only
external symbols in @code{global} are inherited.  Since @code{global} exists
only for inheritance, every symbol in it is external; in fact, any
symbol placed in @code{global} is automatically made external.  @code{global}
is said to be @i{autoexporting}.  A few other packages with special
uses, such as @code{keyword} and @code{fonts}, are autoexporting.  Ordinary
packages such as @code{chaos}, which programs are loaded in, should not be.

If a request is made to find a name in a package, first the symbols
present directly in that package are searched.  If the name is not found
that way, then all the packages in the used-list are searched; but only
external symbols are accepted.  Internal symbols found in the used
packages are ignored.  If a new symbol needs to be created and put into
the name space, it is placed directly in the specified package.  New
symbols are never put into the inherited packages.

The used packages of a package are not in any particular order.
It does not make any difference which one is searched first,
because they are @i{not allowed} to have any conflicts among them.
If you attempt to set up an inheritance situation where a conflict
would exist, you get an error immediately.  You can then specify
explicitly how to resolve the conflict.  See (name-conflict).

The packages used by the packages used are @i{not} searched.  If package
@code{file-access} uses package @code{chaos} and file @code{mypackage} uses
package @code{file-access}, this does not cause @code{mypackage} to inherit
anything from @code{chaos}.  This is desirable; the Chaosnet functions for whose sake
@code{file-access} uses @code{chaos} are not needed in the programs in @code{mypackage}
simply to enable them to communicate with @code{file-access}.  If it is desirable
for @code{mypackage} to inherit from @code{chaos}, that can be requested explicitly.

These functions are used to set up and control package inheritance.

@defun use-package packages &optional (in-package @code{*package*})
Makes @i{in-package} inherit symbols from @i{packages}, which should be
either a single package or name for a package, or a list of packages and/or
names for packages.

This can cause a name conflict, if any of @i{packages} has a symbol
whose name matches a symbol in @i{in-package}.  In this case,
an error is signaled, and you must resolve the conflict or abort.
@end defun

@defun unuse-package packages &optional (in-package @code{*package*})
Makes @i{in-package} cease to inherit symbols from @i{packages}.
@end defun

@defun package-use-list package
Returns the list of packages used by @i{package}.
@end defun

@defun package-used-by-list package
Returns the list of packages which use @i{package}.
@end defun

You can add or remove inheritance paths at any time, no matter what else
you have done with the package.

These functions are used to make symbols external or internal in a package.
By default, they operate on the current package.

@defun export symbols &optional (package @code{*package*})
Makes @i{symbols} external in @i{package}.  @i{symbols} should be a symbol or string
or a list of symbols and/or strings.  The specified symbols or strings are
interned in @i{package}, and the symbols found are marked external in
@i{package}.

If one of the specified symbols is found by inheritance from a used package,
it is made directly present in @i{package} and then marked external there.
(We know it was already external in the package it was inherited from.)

Note that if a symbol is present directly in several packages, it can be
marked external or internal in each package independently.  Thus, it is
the symbol's presence in a particular package which is external or not,
rather than the symbol itself.  @code{export} makes symbols external
in whichever package you specify; if the same symbols are present directly
in any other package, their status as external or internal in the other package
is not affected.
@end defun

@defun unexport symbols &optional (package @code{*package*})
Makes @i{symbols} not be external in @i{package}.  An error occurs if
any of the symbols fails to be directly present in @i{package}.
@end defun

@defun package-external-symbols package
Returns a list of all the external symbols of @i{package}.
@end defun

@defun globalize name-or-symbol &optional (into-package @code{"GLOBAL"})
@end defun

Sometimes it will be discovered that a symbol which ought to be in
@code{global} is not there, and the file defining it has already been
loaded, thus mistakenly creating a symbol with that name in some other
package.  Creating a symbol in @code{global} would not fix the problem,
since pointers to the misbegotten symbol already exist.  Even worse,
similarly named symbols may have been created mistakenly in other
packages by code attempting to refer to the global symbol, and those
symbols also are already pointed to.  @code{globalize} is designed for
use in correcting such a situation.

@defun globalize symbol-or-string &optional (package @code{"GLOBAL"})
If @i{name-or-symbol} is a name (a string), interns the name in
@i{into-package} and then forwards together all symbols with the same
name in all the packages that use @i{into-package} as well as in
@i{into-package} itself.  These
symbols are forwarded together so that they become effectively one
symbol as far as the value, function definition and properties are
concerned.  The value of the composite is taken from whichever
of the symbols had a value; a proceedable error is signaled if
multiple, distinct values were found.  The function definition is treated
similarly, and so is each property that any of the symbols has.

If @i{name-or-symbol} is a symbol, @code{globalize} interns that symbol
in @i{into-package} and then forwards the other symbols to that one.

The symbol which ultimately is present in @i{into-package} is also exported.
@end defun

@section  Packages and Interning
@cindex interning

The most important service of the package system is to look up a name in
a package and return the symbol which has that name in the package's
name space.  This is done by the function @code{intern}, and is called
@i{interning}.  When you type a symbol as input, @code{read} converts your
characters to the actual symbol by calling @code{intern}.

The function @code{intern} allows you to specify a package as the
second argument.  It can be specified by giving either the package
object itself or a string or symbol that is a name for the package.
@code{intern} returns three values.  The first is the interned symbol.  The
second is a keyword that says how the symbol was found.  The third is
the package in which the symbol was actually found.  This can be either
the specified package or one of its used packages.

When you don't specify the second argument to @code{intern}, the
current package, which is the value of the symbol @code{*package*}, is used.
This happens, in particular, when you call @code{read} and @code{read}
calls @code{intern}.  To specify the
package for such functions to use, bind the symbol @code{*package*}
temporarily to the desired package with @code{pkg-bind}.

There are actually four forms of the @code{intern} function: regular
@code{intern}, @code{intern-soft}, @code{intern-local}, and
@code{intern-local-soft}.  @code{-soft} means that the symbol should not be
added to the package if there isn't already one; in that case, all three
values are @code{nil}.  @code{-local} turns off inheritance; it means that the
used packages should not be searched.  Thus, @code{intern-local} can be
used to cause shadowing.  @code{intern-local-soft} is right when you want
complete control over what packages to search and when to add symbols.
All four forms of @code{intern} return the same three values, except that
the @code{soft} forms return @code{nil nil nil} when the symbol isn't found.

@defun intern string-or-symbol &optional (pkg @code{*package*})
The simplest case of @code{intern} is where @i{string-or-symbol} is a string.
(It makes a big difference which one you use.)
@code{intern} searches @i{pkg} and its used packages sequentially, looking
for a symbol whose print-name is equal to @i{string-or-symbol}.  If one is found,
it is returned.  Otherwise, a new symbol with @i{string-or-symbol} as print name
is created, placed in package @i{pkg}, and returned.

The first value of @code{intern} is always the symbol found or created.
The second value tells whether an existing symbol was found, and how.
It is one of these four values:
@table @code
@item :internal
A symbol was found present directly in @i{pkg}, and it was internal in @i{pkg}.
@item :external
A symbol was found present directly in @i{pkg}, and it was external in @i{pkg}.
@item :inherited
A symbol was found by inheritance from a package used by @i{pkg}.
You can deduce that the symbol is external in that package.
@item nil
A new symbol was created
@end table

The third value returned by @code{intern} says which package the symbol found
or created is present directly in.  This is different from @i{pkg} if and only if
if the second value is @code{:inherited}.

If @i{string-or-symbol} is a symbol, the search goes on just the same,
using the print-name of @i{string-or-symbol} as the string to search
for.  But if no existing symbol is found, @i{string-or-symbol} itself is
placed directly into @i{pkg}, just as @code{import} would do.  No new
symbol is created; @i{string-or-symbol} @i{itself} is the ``new'' symbol.
This is done even if @i{string-or-symbol} is already present in another
package.  You can create arbitrary arrangements of sharing of symbols
between packages this way.

Note: @code{intern} is sensitive to case; that is, it will consider two
character strings different even if the only difference is one of
upper-case versus lower-case.  The reason that symbols get converted
to upper-case when you type them in is that the reader converts
the case of characters in symbols; the characters are converted to
upper-case before @code{intern} is ever called.  So if you call @code{intern}
with a lower-case @code{"foo"} and then with an upper-case @code{"FOO"}, you
won't get the same symbol.
@end defun

@defun intern-local string-or-symbol &optional (pkg @code{*package*})
Like @code{intern} but ignores inheritance.  If a symbol whose name
matches @i{string-or-symbol} is present directly in @i{pkg},
it is returned; otherwise @i{string-or-symbol} (if it is a symbol)
or a new symbol (if @i{string-or-symbol} is a string) is placed
directly in @i{pkg}.

@code{intern-local} returns second and third values with the same meaning
as those of @code{intern}.  However, the second value can never be
@code{:inherited}, and the third value is always @i{pkg}.

The function @code{import} is implemented by passing the symbol
to be imported to @code{intern-local}.
@end defun

@defun intern-soft string &optional (pkg @code{*package*})
@defunx find-symbol string &optional (pkg @code{*package*})
Like @code{intern} but never creates a symbol or modifies @i{pkg}.
If no existing symbol is found, @code{nil} is returned for all
three values.  It makes no important difference if you
pass a symbol instead of a string.

@code{intern-soft} returns second and third values with the same meaning
as those of @code{intern}.  However, if the second value is @code{nil},
it does not mean that a symbol was created, only that none was found.
In this case, the third value is @code{nil} rather than a package.

@code{find-symbol} is the Common Lisp name for this function.
The two names are synonymous.
@end defun

@defun intern-local-soft string &optional (pkg @code{*package*})
Like @code{intern-soft} but without inheritance.  If a matching symbol
is found directly present in @i{pkg}, it is returned;
otherwise, the value is @code{nil}.

@code{intern-local-soft} returns second and third values with the same meaning
as those of @code{intern}.  However, if the second value is @code{nil},
it does not mean that a symbol was created, only that none was found.
Also, it can never be @code{:inherited}.  The third value is rather useless
as it is either @i{pkg}, or @code{nil} if the second value is @code{nil}.
@end defun

@defun remob symbol &optional (package @code{(symbol-package @i{symbol})})
@defunx unintern symbol &optional (package @code{*package*})
Both remove @i{symbol} from @i{package}.
@i{symbol} itself is unaffected, but @code{intern} will no longer find
it in @i{package}.  @i{symbol} is not removed from any other package,
even packages used by @i{package}, if it should be present in them.
If @i{symbol} was present in @i{package} (and therefore, was removed)
then the value is @code{t}; otherwise, the value is @code{nil}.

In @code{remob}, @i{package} defaults to the contents of the symbol's
package cell, the package it belongs to.  In @code{unintern}, @i{package}
defaults to the current package.  @code{unintern} is the Common Lisp
version and @code{remob} is the traditional version.

If @i{package} is the package that @i{symbol} belongs to, then
@i{symbol} is marked as uninterned: @code{nil} is stored in its package
cell.

If a shadowing symbol is removed, a previously-hidden name conflict
between distinct symbols with the same name in two used packages can
suddenly be exposed, like a discovered check in chess.  If this happens,
an error is signaled.
@end defun

@section  Shadowing and Name Conflicts

@cindex shadowing of symbols
In a package that uses @code{global}, it may be desirable to avoid
inheriting a few standard Lisp symbols.  Perhaps the user has defined a function
@code{copy-list}, knowing that this symbol was not in @code{global}, and then
a system function @code{copy-list} was created as part of supporting Common
Lisp.  Rather than changing the name in his program, he can @i{shadow}
@code{copy-list} in the program's package.  Shadowing a symbol in a package
means putting a symbol in that package which hides any symbols with the
same name which could otherwise have been inherited there.  The symbol
is explicitly marked as a @i{shadowing symbol} so that the name conflict
does not result in an error.

Shadowing of symbols and shadowing of bindings are quite
distinct.  The same word is used for them because they are both examples
of the general abstract concept of shadowing, which is meaningful
whenever there is inheritance.

Shadowing can be done in the definition of a package (see
(defpackage-fun)) or by calling the function @code{shadow}.  @code{(shadow
"COPY-LIST")} creates a new symbol named @code{copy-list} in the current
package, regardless of any symbols with that name already available
through inheritance.  Once the new symbol is present directly in the
package and marked as a shadowing symbol, the potentially inherited
symbols are irrelevant.

@defun shadow names &optional (package @code{*package*})
Makes sure that shadowing symbols with the specified names exist in
@i{package}.  @i{names} is either a string or symbol or a list of such.
If symbols are used, only their names matter; they are equivalent to
strings.  Each name specified is handled independently as follows:

If there is a symbol of that name present directly in @i{package}, it is
marked as a shadowing symbol, to avoid any complaints about name conflicts.

Otherwise, a new symbol of that name is created and interned in
@i{package}, and marked as a shadowing symbol.
@end defun

Shadowing must be done before programs are loaded into the package,
since if the programs are loaded without shadowing first they will
contain pointers to the undesired inherited symbol.  Merely shadowing
the symbol at this point does not alter those pointers; only reloading
the program and rebuilding its data structures from scratch can do that.

If it is necessary to refer to a shadowed symbol, it can be done
using a package prefix, as in @code{global:copy-list}.

Shadowing is not only for symbols inherited from @code{global}; it can be
used to reject inheritance of any symbol.  Shadowing is the primary means
of resolving @i{name conflicts} in which there multiple symbols with the
same name are available, due to inheritance, in one package.

Name conflicts are not permitted to exist unless a resolution for the
conflict has been stated in advance by specifying explicitly which
symbol is actually to be seen in package.  If no resolution has been
specified, any command which would create a name conflict signals an
error instead.

For example, a name conflict can be created by @code{use-package} if it adds a new
used package with its own symbol @code{foo} to a package which already has or inherits
a different symbol with the same name @code{foo}.  @code{export} can cause a name conflict
if the symbol becoming external is now supposed to be inherited by another
package which already has a conflicting symbol.  On either occasion, if shadowing
has not already been performed to control the outcome, an error is signaled
and the useage or exportation does not occur.

The conflict is resolved--in advance, always--by placing the preferred
choice of symbol in the package directly, and marking it as a shadowing
symbol.  This can be done with the function @code{shadowing-import}.
(Actually, you can proceed from the error and specify a resolution, but
this works by shadowing and retrying.  From the point of view of the
retried operation, the resolution has been done in advance.)

@defun shadowing-import symbols &optional (package @code{*package*})
Interns the specified symbols in @i{package} and marks them as shadowing symbols.
@i{symbols} must be a list of symbols or a single symbol; strings are not allowed.

Each symbol specified is placed directly into @i{package}, after first removing any
symbol with the same name already interned in @i{package}.  This is rather drastic,
so it is best to use @code{shadowing-import} right after creating a package, when
it is still empty.

@code{shadowing-import} is primarily useful for choosing one of several conflicting
external symbols present in packages to be used.
@end defun

Once a package has a shadowing symbol named @code{foo} in it, any other potentially
conflicting external symbols with name @code{foo} can come and go in the inherited
packages with no effect.  It is therefore possible to perform the
@code{use-package} of another package containing another @code{foo}, or to export
the @code{foo} in one of the used packages, without getting an error.

In fact, @code{shadow} also marks the symbol it creates as a shadowing
symbol.  If it did not do so, it would be creating a name conflict and
would always get an error.

@defun package-shadowing-symbols package
Returns the list of shadowing symbols of @i{package}.  Each of these is
a symbol present directly in @i{package}.  When a symbol is present
directly in more than one package, it can be a shadowing symbol in one
and not in another.
@end defun

@section  Styles of Using Packages

The unsophisticated user need never be aware of the existence of
packages when writing his programs.  His files are loaded into package
@code{user} by default, and keyboard input is also read in @code{user} by
default.  Since all the functions that unsophisticated users are likely
to need are provided in the @code{global} package, which @code{user} inherits
from, they are all available without special effort.  In this manual,
functions that are not in the @code{global} package are documented with
colons in their names, and they are all external, so typing the name the way
it is documented does work in both traditional and Common Lisp syntax.

However, if you are writing a generally useful tool, you should
put it in some package other than @code{user}, so that its internal
functions will not conflict with names other users use.  If your program
contains more than a few files, it probably should have its own
package just on the chance that someone else will use it someday
along with other programs.

If your program is large, you can use multiple packages to help keep
its modules independent.  Use one package for each module, and export
from it those of the module's symbols which are reasonable for other
modules to refer to.  Each package can use the packages of other modules
that it refers to frequently.

@section  Package Naming
@cindex names (of packages)
@cindex nicknames (of packages)

A package has one name, also called the @i{primary name} for extra clarity, and can
have in addition any number of @i{nicknames}.  All of these names are defined
globally, and all must be unique.  An attempt to define a package with a name or
nickname that is already in use is an error.

Either the name of a package or one of its nicknames counts as a @i{name for} the
package.  All of the functions described below that accept a package as an
argument also accept a name for a package (either as a string, or as a symbol
whose print-name is the name).  Arguments that are lists of packages may also contain
names among the elements.

When the package object is printed, its primary name is used.  The name is
also used by default when printing package prefixes of symbols.  However, when
you create the package you can specify that one of the nicknames should be
used instead for this purpose.  The name to be used for this is called the
@i{prefix name}.

Case is significant in package name lookup.   Usually package names should be
all upper case.  @code{read} converts package prefixes to upper case except for quoted
characters, just as it does to symbol names, so the package prefix will match
the package name no matter what case you type it in, as long as the actual name
is upper case: @code{TV:FOO} and @code{tv:foo} refer to the same symbol.
@code{|tv|:foo} is different from them, and normally erroneous since there is no
package initially whose name is `tv' in lower case.

In the functions @code{find-package} and @code{pkg-find-package}, and others which accept
package names in place of packages, if you specify the name as a string you
must give it in the correct case:
@lisp
(find-package "TV") => 1the @code{tv} package*
(find-package "tv") => nil
@end lisp
You can alternatively specify the name as a symbol; then the symbol's pname is
used.  Since @code{read} converts the symbol's name to upper case, you can type the
symbol in either upper or lower case:
@lisp
(find-package 'TV) => 1the @code{tv} package*
(find-package 'tv) => 1the @code{tv} package*
@exdent since both use the symbol whose pname is @code{"TV"}.
@end lisp

Relevant functions:

@defun package-name package
Returns the name of @i{package} (as a string).
@end defun

@defun package-nicknames package
Returns the list of nicknames (strings) of @i{package}.
This does not include the name itself.
@end defun

@defun package-prefix-print-name package
Returns the name to be used for printing package prefixes that refer to @i{package}.
@end defun

@defun rename-package package new-name &optional new-nicknames
Makes @i{new-name} be the name for @i{package}, and makes
@i{new-nicknames} (a list of strings, possibly @code{nil}) be its nicknames.
An error is signaled if the new name or any of the new nicknames is
already in use for some other package.
@end defun

@defun find-package name &optional use-local-names-package
Returns the package which @i{name} is a name for, or @code{nil} if there is none.
If @i{use-local-names-package} is non-@code{nil}, the local nicknames of that package
are checked first.  Otherwise only actual names and nicknames are accepted.
@i{use-local-names-package} should be supplied only when interpreting
package prefixes.

If @i{name} is a package, it is simply returned.

If a list is supplied as @i{name}, it is interpreted as a specification of a package
name and how to create it.  The list should look like
@lisp
(@i{name} @i{super-or-use} @i{size})
@exdent or
(@i{name} @i{options})
@end lisp
If @i{name} names a package, it is returned.  Otherwise a package is created by passing
@i{name} and the @i{options} to @code{make-package}.
@end defun

@defun pkg-find-package name &optional create-p use-local-names-package
Invokes @code{find-package} on @i{name} and returns the package that finds, if any.
Otherwise, a package may be created, depending on @i{create-p} and possibly
on how the user answers.  These values of @i{create-p} are meaningful:
@table @code
@item nil
An error is signaled if an existing package is not found.
@item t
A package is created, and returned.
@item :find
@code{nil} is returned.
@item :ask
The user is asked whether to create a package.
If he answers @code{Yes}, a package is created and returned.
If he answers @code{No}, @code{nil} is returned.
@end table

If a package is created, it is done by calling @code{make-package}
with @i{name} as the only argument.

This function is not quite for historical compatibility only, since
certain values of @i{create-p} provide useful features.
@end defun

.defcondition sys:package-not-found (@code{error})
is signaled by @code{pkg-find-package} with second argument
@code{:error}, @code{nil} or omitted, when the package does not exist.

The condition instance supports the operations @code{:name} and
@code{:relative-to}; these return whatever was passed as the first and
third arguments to @code{pkg-find-package} (the package name, and the
package whose local nicknames should be searched).

The proceed types that may be available include
@table @code
@item :retry
says to search again for the specified name
in case it has become defined; if it is still undefined, the error occurs again.
@item :create-package
says to search again for the specified name, and create
a package with that name (and default characteristics) if none exists yet.
@item :new-name
is accompanied by a name (a string) as an argument.  That name
is used instead, ignoring any local nicknames.  If that name too is not found,
another error occurs.
@item :no-action
(available on errors from within @code{read}) says to continue with the
entire @code{read} as well as is possible without having a valid package.
@end table
.end_defcondition

@subsection Local Nicknames for Packages
@cindex local nicknames of packages

Suppose you wish to test new versions of the Chaosnet
and file access programs.  You could create new packages @code{test-chaos}
and @code{test-file-access}, and use them for loading the new versions of the programs.
Then the old, installed versions would not be affected; you could still
use them to edit and save the files of the new versions.  But one problem
must be solved: when the new file access program says "@code{chaos:connect}"
it must get @code{test-chaos:connect} rather than the actual @code{chaos:connect}.

This is accomplished by making @code{"CHAOS"} a local nickname for
@code{"TEST-CHAOS"} in the context of the package @code{test-file-access}.
This means that the when a @code{chaos:} prefix is encountered while
reading in package @code{test-file-access}, it refers to @code{test-chaos}
rather than @code{chaos}.

Local nicknames are allowed to conflict with global names and nicknames;
in fact, they are rarely useful unless they conflict.  The local nickname
takes precedence over the global name.

@cindex package prefixes
It is necessary to have a way to override local nicknames.  If you
@code{(pkg-goto 'test-file-access)}, you may wish to call a function
in @code{chaos} (to make use of the old, working Chaosnet program).
This can be done using @code{#:} as the package prefix instead of just @code{:}.
@code{#:} inhibits the use of local nicknames when it is processed.
It always refers to the package which is globally the owner of
the name that is specified.

@code{#:} prefixes are printed whenever the package name printed is
also a local nickname in the current package; that is, whenever
an ordinary colon prefix would be misunderstood when read back

These are the functions which manage local nicknames.

@defun pkg-add-relative-name in-pkg name for-pkg
Defines @i{name} as a local nickname in @i{in-pkg} for @i{for-pkg}.
@i{in-pkg} and @i{for-pkg} may be packages, symbols or strings.
@end defun

@defun pkg-delete-relative-name in-pkg name
Eliminates @i{name} as a local nickname in @i{in-pkg}.
@end defun

Looking up local nicknames is done with @code{find-package}, by
providing a non-@code{nil} @i{use-local-names-package} argument.

@section  Defining Packages
@cindex defining packages
@cindex package declarations

Before any package can be referred to or made current, it must be defined.
This is done with the special form @code{defpackage}, which tells the package system
all sorts of things, including the name of the package, what packages it should use,
its estimated size, and some of the symbols which belong in it.  The @code{defpackage}
form is recognized by Zmacs as a definition of the package name.

@defmac defpackage name &key ...
Defines a package named @i{name}.  The alternating keywords
and values are passed, unevaluated, to @i{make-package} to specify
the rest of the information about how to construct the package.

If a package named @i{name} already exists, it is modified
insofar as this is possible to correspond to the new definition.

Here are the possible options and their meanings
@table @i
@item nicknames
A list of nicknames for the new package.  The nicknames should be specified
as strings.

@item size
A number; the new package is initially made large enough to hold at least
this many symbols before a rehash is needed.

@item use
A list of packages or names for packages which the new package should
inherit from, or a single name or package.  It defaults to just the
@code{global} package.

@item prefix-name
Specifies the name to use for printing package prefixes that refer to
this package.  It must be equal to either the package name or one of the
nicknames.  The default is to use the name.

@item invisible
If non-@code{nil}, means that this package should not be put on the list
@code{*all-packages*}.  As a result, @code{find-package} will not find this
package, not by its name and not by any of its nicknames.  You can make
normal use of the package in all other respects (passing it as the
second argument to @code{intern}, passing it to @code{use-package} to make
other packages inherit from it or it from others, and so on).

@item export
@itemx import defpackage
@itemx shadow defpackage
@itemx shadowing-import defpackage
If any of these arguments is non-@code{nil}, it is passed to the function
of the same name, to operate on the package.
Thus, if @i{shadow} is @code{("FOO" "BAR")}, then
@lisp
(shadow @i{this-package} '("FOO" "BAR"))
@end lisp
is done.

You could accomplish as much by calling @code{export}, @code{import},
@code{shadow} or @code{shadowing-import} yourself, but it is clearer to
specify all such things in one central place, the @code{defpackage}.

@item import-from
If non-@code{nil}, is a list containing a package (or package name)
followed by names of symbols to import from that package.  Specifying
@i{import-from} as @code{(chaos "CONNECT" "LISTEN")} is nearly the same as specifying
@i{import} as @code{(chaos:connect chaos:listen)}, the difference being that with
@i{import-from} the symbols @code{connect} and @code{listen} are not looked up in the @code{chaos}
package until it is time to import them.

@item super
If non-@code{nil}, should be a package or name to be the superpackage
of the new package.  This means that the new package should inherit from
that package, and also from all the packages that package inherits from.
In addition, the superpackage is marked as autoexporting.
Superpackages are obsolete and are implemented for compatibility only.

@item relative-names
An alist specifying the local nicknames to have in this
package for other packages.  Each element looks like @code{(@i{localname} @i{package})},
where @i{package} is a package or a name for one, and @i{localname} is the
desired local nickname.

@item relative-names-for-me
An alist specifying local nicknames by which this
package can be referred to from other packages.  Each element looks like
@code{(@i{package} @i{localname})}, where @i{package} is a package name and @i{localname} is
the name to refer to this package by from @i{package}.
@end table

@end defmac

For example, the system package @code{eh} could have been defined this way:
@lisp
(defpackage "EH" :size 1200
  :use ("GLOBAL" "SYS") :nicknames ("DBG" "DEBUGGER")
  :shadow ("ARG"))
@end lisp
It has room initially for at least 1200. symbols,
nicknames @code{dbg} and @code{debugger}, uses @code{system} as well as @code{global},
and contains a symbol named @code{arg} which is not the same as the @code{arg}
in @code{global}.  You may note that the function @code{eh:arg} is documented in
this manual (see (eh-arg-fun)), as is the function @code{arg} (see (arg-fun)).

The packages of our inheritance example ((pkg-inheritance-example))
might have been defined by
@lisp
(defpackage 'chaos :size 1000 :use '(sys global)
   :export ("CONNECT" "OPEN-STREAM" "LISTEN" ...
	    "OPEN-STATE" "RFC-RECEIVED-STATE" ...))

(defpackage 'file-access :size 1500
   :use '(chaos global)
   :export ("OPEN-FILE" "CLOSE-FILE" "DELETE-FILE" ...)
   :import (chaos:connect chaos:open-state))

(defpackage 'mypackage :size 400
   :use '(file-access global))
@end lisp

It is usually best to put the package definition in a separate file,
which should be loaded into the @code{user} package.  (It cannot
be loaded into the package it is defining, and no other package has
any reason to be preferred.)  Often the files to be loaded into the
package belong to one or a few systems; then it is often convenient
to put the system definitions in the same file (see (system-system)).

A package can also be defined by the package attribute in a file's
7-*-* line.  Normally this specifies which (existing) package to
load, compile or edit the file in.  But if the attribute value
is a list, as in
@lisp
-*-Package: (foo :size 300 :use (global system)); ...-*-
@end lisp
then loading, compiling or editing the file automatically
creates package @code{foo}, if necessary with the specified options (just like
@code{defpackage} options).  No @code{defpackage} is needed.
It is wise to use this feature only when the package is used
for just a single file.  For programs containing multiple files,
it is good to make a system for them, and then convenient to
put a @code{defpackage} near the @code{defsystem}.

@defun make-package name &key nicknames size use prefix-name invisible export shadow import shadowing-import import-from super relative-names relative-names-for-me
Creates and returns new package with name @i{name}.

The meanings of the keyword arguments are described under @code{defpackage}
((defpackage-fun)).
@end defun

@defun pkg-create-package name &optional (super @code{*package*}) (size @code{#o 200})
Creates a new package named @i{name} of size @i{size} with superpackage @i{super}.
This function is obsolete.
@end defun

@defun kill-package name-or-package
Kills the package specified or named.  It is removed from
the list which is searched when package names are looked up.
@end defun

@defmac package-declare
@code{package-declare} is an older way of defining a package, obsolete
but still used.
@lisp
(package-declare @i{name} @i{superpackage} @i{size} nil
		 @i{option-1} @i{option-2} ...)
@end lisp
creates a package named @i{name} with initial size @i{size}.

@i{super} specifies the @i{superpackage} to use for this package.
Superpackages were an old way of specifying inheritance; it was
transitive, all symbols were inherited, and only one inheritance path
could exist.  If @i{super} is @code{global}, nothing special needs to be
done; otherwise, the old superpackage facility is simulated using the
@i{super} argument to @code{make-package}.

@i{body} is now allowed to contain only these types of elements:
@table @code
@item (shadow @i{names})
Passes the names to the function @code{SHADOW}.
@item (intern @i{names})
Converts each name to a string and interns it in the package.
@item (refname @i{refname} @i{packagename})
Makes @i{refname} a local nickname in this package
for the package named @i{packagename}.
@item (myrefname @i{packagename} @i{refname})
Makes @i{refname} a local nickname in the package named @i{packagename}
for this package.  If @i{packagename} is @code{"GLOBAL"}, makes @i{refname} a
global nickname for this package.
@item (external @i{names})
Does nothing.  This controlled an old feature that no longer exists.
@end table
@end defmac

@section  Operating on All the Symbols in a Package

To find and operate on every symbol present or available in a package,
you can choose between iteration macros that resemble @code{dolist} and
mapping functionals that resemble @code{mapcar}.

Note that all constructs that include inherited symbols in the iteration
can process a symbol more than once.  This is because a symbol can be
directly present in more than one package.  If it is directly present in
the specified package and in one or more of the used packages, the
symbol is processed once each time it is encountered.  It is also
possible for the iteration to include a symbol that is not actually
available in the specified package.  If that package shadows symbols
present in the packages it uses, the shadowed symbols are processed
anyway.  If this is a problem, you can explicitly use @code{intern-soft} to
see if the symbol handed to you is really available in the package.
This test is not done by default because it is slow and rarely needed.

@defmac do-symbols (var package result-form) body...
Executes @i{body} once for each symbol findable in @i{package} either
directly or through inheritance.  On each iteration, the variable
@i{var} is bound to the next such symbol.  Finally the @i{result-form}
is executed and its values are returned.
@end defmac

@defmac do-local-symbols (var package result-form) body...
Executes @i{body} once for each symbol present directly in @i{package}.
Inherited symbols are not considered.  On each iteration, the variable
@i{var} is bound to the next such symbol.  Finally the @i{result-form}
is executed and its values are returned.
@end defmac

@defmac do-external-symbols (var package result-form) body...
Executes @i{body} once for each external symbol findable in @i{package}
either directly or through inheritance.  On each iteration, the variable
@i{var} is bound to the next such symbol.  Finally the @i{result-form}
is executed and its values are returned.
@end defmac

@defmac do-local-external-symbols (var package result-form) body...
Executes @i{body} once for each external symbol present directly in
@i{package}.  Inherited symbols are not considered.  On each iteration,
the variable @i{var} is bound to the next such symbol.  Finally the
@i{result-form} is executed and its values are returned.
@end defmac

@defmac do-all-symbols (var result-form) body...
Executes @i{body} once for each symbol present in any package.
On each iteration, the variable @i{var} is bound to the next such symbol.
Finally the @i{result-form} is executed and its values are returned.

Since a symbol can be directly present in more than one package,
it is possible for the same symbol to be processed more than once.
@end defmac

@defun mapatoms function &optional (package @code{*package*}) (inherited-p @code{t})
@i{function} should be a function of one argument.  @code{mapatoms} applies
@i{function} to all of the symbols in @i{package}.  If @i{inherited-p} is
non-@code{nil}, then the function is applied to all symbols available in @i{package},
including inherited symbols.
@end defun

@defun mapatoms-all function &optional (package @code{"GLOBAL"})
@i{function} should be a function of one argument.
@code{mapatoms-all} applies @i{function} to all of the symbols
in @i{package} and all other packages which use @i{package}.

It is used by such functions as @code{apropos} and @code{who-calls} (see (apropos-fun))
@lisp
@exdent Example:
(mapatoms-all
  #'(lambda (x)
      (and (alphalessp 'z x)
           (print x))))
@end lisp
@end defun

@section  Packages as Lisp Objects

A package is a conceptual name space; it is also a Lisp object which
serves to record the contents of that name space, and is passed to
functions such as @code{intern} to identify a name space.  

@defun packagep object
@code{t} if object is a package.
@end defun

@defvar *all-packages*
The value is a list of all packages, except for invisible ones
(see the @i{invisble} argument to @code{make-package}, (make-package-fun)).
@end defvar

@defun list-all-packages
A Common Lisp function which returns @code{*all-packages*}.
@end defun

.defconst pkg-global-package
.defconst1 pkg-system-package
.defconst1 pkg-keyword-package
Respectively, the packages named @code{global}, @code{system} and @code{keyword}.
.end_defconst

@defun describe-package package
Prints everything there is to know about @i{package},
except for all the symbols interned in it.
@i{package} can be specified as a package or as the name of one.
@end defun

To see all the symbols interned in a package, do
@lisp
(mapatoms 'print @i{package})
@end lisp

@section  Common Lisp and Packages

Common Lisp does not have @code{defpackage} or 7-*-* lines in files.
One is supposed to use the function @code{in-package} to specify
which package a file is loaded in.

@defun in-package name &key nicknames use
Creates a package named @i{name}, with specified nicknames and used packages,
or modifies an existing package named @i{name} to have those nicknames and
used packages.

Then @code{*package*} is set to this package.
@end defun

Writing a call to @code{in-package} at the beginning of the file
causes @code{*package*} to be set to that package for the rest of the file.

If you wish to use this technique for the sake of portability,
it is best to have a 7-*-* line with a package attribute also.
While @code{in-package} does work for loading and compilation of the file,
Zmacs does not respond to it.

In Common Lisp, the first argument to @code{intern} or @code{find-symbol}
is required to be a symbol.

@section  Initialization of the Package System

	This section describes how the package system is initialized
when generating a new software release of the Lisp Machine system;
none of this should affect users.

The cold load, which contains the irreduceable minimum of the Lisp
system needed for loading the rest, contains the code for packages, but
no packages.  Before it begins to read from the keyboard, it creates all
the standard packages based on information in @code{si:initial-packages},
applying @code{make-package} to each element of it.  At first all of the
packages are empty.  The symbols which belong in the packages @code{global}
and @code{system} are recorded on lists which are made from the files
@code{SYS: SYS2; GLOBAL LISP} and @code{SYS: SYS2; SYSTEM LISP}.  Symbols
referred to in the cold load which belong in packages other than @code{si}
have strings (package names) in their package slots; scanning through
the area which contains all the symbols, the package initializer puts
each such symbol into the package it specifies, and all the rest into
@code{si} unless they are already in @code{global} or @code{system}.

@section  Initial Packages

The initially present packages include:

@table @code
@item global
Contains advertised global functions.
@item user
The default current package for the user's type-in.
@item sys 1or* system
Contains internal global symbols used by various system programs.
Many system packages use @code{system}.
@item si 1or* system-internals
Contains subroutines of many advertised
system functions.  Many files of the Lisp system are loaded in @code{si}.
@item compiler
Contains the compiler.  @code{compiler} uses @code{sys}.
@item fs 1or* file-system
Contains the code that deals with pathnames and accessing files.
@code{fs} uses @code{sys}.
@item eh 1or* dbg
Contains the error handler and the debugger.  Uses @code{sys}.
@item cc 1or* cadr
Contains the program that is used for debugging another machine.  Uses @code{sys}.
@item chaos
Contains the Chaosnet controller.  Uses @code{sys}.
@item tv
Contains the window system.  Uses @code{sys}.
@item zwei
Contains the editor.
@item format
Contains the function @code{format} and its associated subfunctions.
@item cli
(Common Lisp Incompatible) contains symbols such as @code{cli:member} which
the same pname as symbols in @code{global} but incompatible definitions.
@end table

There are quite a few others, but it would be pointless to list them all.

	Packages that are used for special sorts of data:
@table @code
@item fonts
Contains the names of all fonts.
@item format
Contains the keywords for @code{format}, as well as the code.
@item keyword
Contains all keyword symbols, symbols always written with a plain colon as a prefix.
These symbols are peculiar in that they are automatically given themselves as values.
@end table

Here is a picture depicting the initial package inheritance structure
@lisp
                           global		      keyword
                             |    			
       /-----------------------------------\	      fonts
       |     |          |          |       |
     user  zwei      system      format  (etc)	      cli
                        |
                /----------------------------------\
                |          |     |     |    |      |
         system-internals  eh  chaos  cadr  fs  compiler
@end lisp

@c Remainder of this chapter deleted since it is wrong
.eof

@section  Multiple Instantiations of a Program

	This isn't finished yet, which is why we don't say how to do
any of this.

	Suppose a maintainer of ZWEI (the Lisp Machine editor) has
made some changes to ZWEI, and would like to debug them.  He has a
problem: if he reads in the new version, which presumably may be full
of bugs, then he will not be able to do any editing!  This would be
annoying, since the editor is very useful.

	We would like both the regular and the experimental versions
of the editor to @i{both} be loaded into the Lisp world.  In order for two
definitions of each editor function to coexist, we need to load the
new version into a separate package, which must have a different name
(not named @code{zwei}, like the package the original editor is in).  If
the test version's package is called @code{test-zwei}, then the user can
try it by calling @code{(test-zwei:ed)}, and edit it using @code{(ed)}.

	However, there is a problem to be faced.  The editor redefines
a few entry-point functions (@code{ed}, @code{edprop}, etc) which reside in @code{global}.
If the test editor redefined them, the whole point of the separate
package would be lost.  So, the @code{test-zwei} package must @code{shadow} all these
symbols.

	Further complications are needed to make it possible to test
one program using another instead of by hand.  Suppose that there is a
program named @code{random} residing in its own package, and containing a
function named @code{number}.  Suppose that we have a debugged program @code{dp}
(Dissociated Press) which uses @code{random:number}.  And now, we have
written a new version of @code{random} and want to test it using @code{dp}, without
installing it and breaking system tools which use @code{random}.  What we
want to do is to load in a test version of @code{random}, @code{test-random}, and
also a @code{test-dp} which will refer to it, to test it with.

	This can be done if we can make the @code{test-dp} package
take references to @code{random} as references to the @code{test-random}
package.  All this takes is
an entry on @code{test-dp}'s refname-alist, associating the name @code{random}
with the @code{test-random} package.  Then, when @code{random:number} is seen in the
course of reading in the old @code{dp} program into @code{test-dp},
@code{test-random:number} will actually be used.  Note that normally @code{test-dp}
wouldn't have an entry on its own refname-alist for @code{random};  it
would inherit the association from @code{global}.  We are actually
shadowing in @code{test-dp} the definition of @code{random} as a package refname
which is present in @code{global}.  Here is what we will get.
@lisp
                            global  [random -> random]
                               |
      /-----------------------------------------------\
      |        |                      |               |
     dp  =>  random                test-dp  =>      test-random
                           [random -> test-random]
@end lisp
(`=>' indicates who calls whom;  `->' indicates a refname).

	So far, every package has had its own name as a refname for
itself.  A test package, however, shouldn't have its actual name as a
refname for itself, but the name its program expects:  @code{random}, not
@code{test-random}.  This is necessary to handle test packages with
subpackages right, together with shadowing.  In fact every package has
a ``program name'' as well as a ``name''.  For ordinary packages, they are
the same, but for a test package, the program name is identical to
that of the original package.

	Suppose we have the Macsyma program with all of its sub-packages as
described above. Further assume that the @code{input} sub-program's author
has his own symbol named @code{simp}, and he calls @code{macsyma:simp}
in various places to get the
one in the @code{macsyma} package.  Now, say someone wants to load an
experimental @code{macsyma} into the machine: he would name the new obarray
@code{test-macsyma} or something.  In order to assure that the reference to
@code{macsyma:simp} is properly resolved, the refname-alist of @code{test-macsyma}
must contain @code{test-macsyma} under the name @code{macsyma}.  This, finally,
is the reason why each package has a reference to itself on its refname-alist.

@chapter Maintaining Large Systems
@cindex system

When a program gets large, it is often desirable to split it up into
several files.  One reason for this is to help keep the parts of the
program organized, to make things easier to find.  It's also useful to
have the program broken into small pieces that are more convenient to
edit and compile.  It is particularly important to avoid the need to
recompile all of a large program every time any piece of it changes; if
the program is broken up into many files, only the files that have
changes in them need to be recompiled.

The apparent drawback to splitting up a program is that more commands
are needed to manipulate it.  To load the program, you now have to load
several files separately, instead of just loading one file.  To compile
it, you have to figure out which files need compilation, by seeing
which have been edited since they were last compiled, and then you have
to compile those files.

What's even more complicated is that files can have interdependencies.
You might have a file called @code{DEFS} that contains some macro
definitions (or flavor or structure definitions), and functions in
other files might use those macros.  This means that in order to
compile any of those other files, you must first load the file @code{DEFS}
into the Lisp environment so that the macros will be defined and can
be expanded at compile time.  You have to remember this whenever you
compile any of those files.  Furthermore, if @code{DEFS} has changed, other
files of the program may need to be recompiled because the macros
may have changed and need to be re-expanded.

This chapter describes the @i{system} facility, which takes care of all
these things for you.  The way it works is that you define a set of
files to be a @i{system}, using the @code{defsystem} special form,
described below.  This system definition says which files make up the
system, which ones depend on the presence of others, and so on.  You
put this system definition into its own little file, and then all you
have to do is load that file and the Lisp environment will know about
your system and what files are in it.  You can then use the
@code{make-system} function (see (make-system-fun)) to load in all the
files of the system, recompile all the files that need compiling,
and so on.

The system facility is very general and extensible.  This chapter
explains how to use it and how to extend it.  This chapter also
explains the @i{patch} facility, which lets you conveniently update a
large program with incremental changes.

@section  Defining a System

@defmac defsystem name (keyword args...)...
Defines a system named @i{name}.  The options
selected by the keywords are explained in detail later.  In general,
they fall into two categories: properties of the system and
@i{transformations}.  A transformation is an operation such as compiling
or loading that takes one or more files and does something to them.
The simplest system is a set of files and a transformation to be
performed on them.
@end defmac

@noindent
Here are a few examples.
@lisp
(defsystem mysys
  (:compile-load ("OZ:<GEORGE>PROG1.LISP" "OZ:<GEORGE2>PROG2.LISP")))

(defsystem zmail
  (:name "ZMail")
  (:pathname-default "SYS: ZMAIL;")
  (:package zwei)
  (:module defs "DEFS")
  (:module mult "MULT" :package tv)
  (:module main ("TOP" "COMNDS" "MAIL" "USER" "WINDOW"
		 "FILTER" mult "COMETH"))
  (:compile-load defs)
  (:compile-load main (:fasload defs)))

(defsystem bar
  (:module reader-macros "BAR:BAR;RDMAC")
  (:module other-macros "BAR:BAR;MACROS")
  (:module main-program "BAR:BAR;MAIN")
  (:compile-load reader-macros)
  (:compile-load other-macros (:fasload reader-macros))
  (:compile-load main-program (:fasload reader-macros
					other-macros)))
@end lisp

The first example defines a new @i{system} called @code{mysys}, which
consists of two files, stored on a Tops-20 host names OZ, both of which
are to be compiled and loaded.  The second example is somewhat more
complicated.  What all the options mean is described below, but the
primary difference is that there is a file @code{DEFS} which must be loaded
before the rest of the files (@code{main}) can be compiled.  Also, the files
are stored on logical host SYS and directory ZMAIL.

The last example has two levels of dependency.  @code{reader-macros} must be
compiled and loaded before @code{other-macros} can be compiled.  Both
@code{reader-macros} and @code{other-macros} must then be loaded before
@code{main-program} can be compiled.  All the source files are stored on
host BAR, presumably a logical host defined specifically for this system.
It is desirable to use a logical host for the files of a system
if there is a chance that people at more than one site will be using it;
the logical host allows the identical @code{defsystem} to be valid at all sites.
See (logical-pathnames) for more on logical hosts and logical pathnames.

Note that 
The @code{defsystem} options other than transformations are:
@table @code
@item :name
Specifies a ``pretty'' version of the name for the system, for use in printing.

@item :short-name
Specified an abbreviated name used in constructing disk label comments
and in patch file names for some file systems.

@item :component-systems
Specifies the names of other systems used to make up this system.
Performing an operation on a system with component systems is equivalent
to performing the same operation on all the individual systems.  The format
is @code{(:component-systems @i{names}...)}.

@item :package
Specifies the package in which transformations are performed.  A package
specified here overrides one in the 7-*-* line of the file in question.

@item :pathname-default
Gives a local default within the definition of the system for strings to be
parsed into pathnames.  Typically this specifies the directory, when all the
files of a system are on the same directory.

@item :warnings-pathname-default
Gives a default for the file to use to store compiler warnings in,
when @code{make-system} is used with the @code{:batch} option.

@item :patchable
Makes the system be a patchable system (see (patch-facility)).  An optional
argument specifies the directory to put patch files in.  The default is
the @code{:pathname-default} of the system.

@item :initial-status
Specifies what the status of the system should be when @code{make-system} is used
to create a new major version.  The default is @code{:experimental}.  See
(patch-system-status) for further details.

@item :not-in-disk-label
Make a patchable system not appear in the disk label comment.  This
should probably never be specified for a user system.  It is used by
patchable systems internal to the main Lisp system, to avoid cluttering up
the label.

@item :default-binary-file-type
Specifies the file type to use for compiled Lisp files.  The value you
specify should be a string.  If you do not specify this, the standard file
type @code{:qfasl} is used.

@item :module
@cindex module
Allows assigning a name to a set of files within the system.  This name
can then be used instead of repeating the filenames.  The format is
@code{(:module @i{name} @i{files} @i{options}...)}.  @i{files} is usually
a list of filenames (strings).  In general, it is a
@i{module-specification}, which can be any of the following:
@table @strong
@item a string    
This is a file name.

@item a symbol
This is a module name.  It stands for all of the files which are in that module
of this system.

@item an @i{external module component}
This is a list of the form @code{(@i{system-name} @i{module-names}...)},
to specify modules in another system.  It stands for all of the files which
are in all of those modules.

@item a list of @i{module components}
A module component is any of the above, or the following:

@item a list of file names
This is used in the case where the names of the input and output files
of a transformation are not related according to the standard naming
conventions, for example when a QFASL file has a different name or
resides on a different directory than the source file.  The file names
in the list are used from left to right, thus the first name is the
source file.  Each file name after the first in the list is defaulted
from the previous one in the list.

To avoid syntactic ambiguity, this is allowed as a module component but not
as a module specification.
@end table

The currently defined options for the @code{:module} clause are
@table @code
@item :package
Overrides any package specified for the whole system for transformations performed
on just this module.
@end table

In the second @code{defsystem} example above, there are three modules.  Each of the
first two has only one file, and the third one (@code{main}) is made
up both of files and another module.  To take examples of the other
possibilities,
@lisp
(:module prog (("SYS: GEORGE; PROG" "SYS: GEORG2; PROG")))
(:module foo (defs (zmail defs)))
@end lisp
The @code{prog} module consists of one file, but it lives in two
directories, @code{GEORGE} and @code{GEORG2}.  If this were a Lisp program,
that would mean that the file @code{SYS: GEORGE; PROG LISP} would be compiled
into @code{SYS: GEORG2; PROG QFASL}.  The @code{foo} module consists of two
other modules the @code{defs} module in the same system, and the @code{defs}
module in the @code{zmail} system.  It is not generally useful to
compile files that belong to other systems; thus this @code{foo} module
would not normally be the subject of a transformation.
However, @i{dependencies} (defined below) use modules and
need to be able to refer to (depend on) modules of other systems.
@end table

@defun si:set-system-source-file system-name filename
This function specifies which file contains the @code{defsystem} for the
system @i{system-name}.  @i{filename} can be a pathname object or a
string.

Sometimes it is useful to say where the definition of a system can be
found without taking time to load that file.  If @code{make-system}, or
@code{require} ((require-fun)), is ever used on that system, the file
whose name has been specified will be loaded automatically.
@end defun

@section  Transformations

@cindex transformation
Transformations are of two types, simple and complex.  A simple
transformation is a single operation on a file, such as compiling it or
loading it.  A complex transformation takes the output from one
transformation and performs another transformation on it, such as
loading the results of compilation.

The general format of a simple transformation is
@code{(@i{name} @i{input} @i{dependencies} @i{condition})}.
@i{input} is usually a module specification or another transformation whose output is used.
The transformation @i{name} is to be performed on all the files in the module, or
all the output files of the other transformation.

@i{dependencies} and @i{condition} are optional.

@cindex dependency
@i{dependencies} is a @i{transformation specification}, either a list
@code{(@i{transformation-name} @i{module-names}...)} or a list of such lists.
A @i{module-name} is either a symbol that is the name of a module in the current system,
or a list @code{(@i{system-name} @i{module-names}...)}.  A dependency declares that
all of the indicated transformations must be performed on the indicated modules
before the current transformation itself can take place.  Thus in
the zmail example above,  the @code{defs} module must have the @code{:fasload}
transformation performed on it before the @code{:compile} transformation
can be performed on @code{main}.

The dependency has to be a tranformation that is explicitly specified
as a transformation in the system definition, not just an action
that might be performed by anything.  That is, if you have
a dependency @code{(:fasload foo)}, it means that @code{(fasload foo)} is
a tranformation of your system and you depend on that tranformation;
it does not simply mean that you depend on @code{foo}'s being loaded.
Furthermore, it doesn't work if @code{(:fasload foo)} is an implicit
piece of another tranformation.  For example, the following works:
@lisp
(defsystem foo
  (:module foo "FOO")
  (:module bar "BAR")
  (:compile-load (foo bar)))
@end lisp
but this doesn't work:
@lisp
(defsystem foo
  (:module foo "FOO")
  (:module bar "BAR")
  (:module blort "BLORT")
  (:compile-load (foo bar))
  (:compile-load blort (:fasload foo)))
@end lisp
@noindent
because @code{foo}'s @code{:fasload} is not mentioned explicitly (i.e. at
top level) but is only implicit in the @code{(:compile-load (foo bar))}.  One
must instead write: 
@lisp
(defsystem foo
  (:module foo "FOO")
  (:module bar "BAR")
  (:module blort "BLORT")
  (:compile-load foo)
  (:compile-load bar)
  (:compile-load blort (:fasload foo)))
@end lisp

@i{condition} is a predicate which specifies when the transformation
should take place.  Generally it defaults according to the type of the
transformation.  Conditions are discussed further on
(transformation-condition-discussion).

The defined simple transformations are:
@table @code
@item :fasload
Calls the @code{fasload} function to load the indicated files, which must
be QFASL files whose pathnames have canonical type @code{:qfasl} (see
(canonical-types)).  The @i{condition} defaults to
@code{si:file-newer-than-installed-p}, which is @code{t} if a newer version of
the file exists on the file computer than was read into the current
environment.

@item :readfile
Calls the @code{readfile} function to read in the indicated files, whose
names must have canonical type @code{:lisp}.  Use this for files that are
not to be compiled.  @i{condition} defaults to
@code{si:file-newer-than-installed-p}.

@item :compile
Calls the @code{compile-file} function to compile the indicated files, whose names
must have canonical type @code{:lisp}.  @i{condition} defaults to
@code{si:file-newer-than-file-p}, which returns @code{t} if the source file
has been written more recently than the binary file.
@end table

A special simple transformation is
@table @code
@item :do-components
@code{(:do-components @i{dependencies})} inside a system with component
systems causes the @i{dependencies} to be done before anything in
the component systems.  This is useful when you have a module of macro
files used by all of the component systems.
@end table

The defined complex transformations are
@table @code
@item :compile-load
@code{(:compile-load @i{input} @i{compile-dependencies} @i{load-dependencies}
@i{compile-condition} @i{load-condition})} is the same as @code{(:fasload (:compile
@i{input} @i{compile-dependencies} @i{compile-condition}) @i{load-dependencies}
@i{load-condition})}.  This is the most commonly-used transformation.
Everything after @i{input} is optional.

@item :compile-load-init
See (compile-load-init-transformation).
@end table

As was explained above, each filename in an input specification can
in fact be a list of strings when the source file of a program
differs from the binary file in more than just the file type.  In fact, every
filename is treated as if it were an infinite list of filenames with
the last filename, or in the case of a single string the only filename,
repeated forever at the end.  Each simple transformation takes some
number of input filename arguments and some number of output filename
arguments.  As transformations are performed, these arguments are taken
from the front of the filename list.  The input arguments are actually
removed and the output arguments left as input arguments to the next
higher transformation.  To make this clearer, consider the @code{prog}
module above having the @code{:compile-load} transformation performed on
it.  This means that @code{prog} is given as the input to the @code{:compile}
transformation and the output from this transformation is given as the
input to the @code{:fasload} transformation.  The @code{:compile}
transformation takes one input filename argument, the name of a Lisp
source file, and one output filename argument, the name of the QFASL
file.  The @code{:fasload} transformation takes one input filename
argument, the name of a QFASL file, and no output filename arguments.
So, for the first and only file in the @code{prog} module, the filename
argument list looks like @code{("SYS: GEORGE; PROG" "SYS: GEORG2; PROG" "SYS:
GEORG2; PROG" ...)}.  The @code{:compile} transformation is given
arguments of @code{"SYS: GEORGE; PROG"} and @code{"SYS: GEORG2; PROG"} and the
filename argument list which it outputs as the input to the @code{:fasload}
transformation is @code{("SYS: GEORG2; PROG" "SYS: GEORG2; PROG" ...)}.  The @code{:fasload}
transformation then is given its one argument of @code{"SYS: GEORG2; PROG"}.

Note that dependencies are not transitive or inherited.  For example, if
module @code{a} depends on macros defined in module @code{b}, and therefore needs
@code{b} to be loaded in order to compile, and @code{b} has a similar dependency
on @code{c}, @code{c} need not be loaded for compilation of @code{a}.  Transformations
with these dependencies would be written
@lisp
(:compile-load a (:fasload b))
(:compile-load b (:fasload c))
@end lisp
To say that compilation of @code{a} depends on both @code{b} and @code{c}, you
would instead write
@lisp
(:compile-load a (:fasload b c))
(:compile-load b (:fasload c))
@end lisp
If in addition @code{a} depended on @code{c} (but not @code{b}) during loading
(perhaps @code{a} contains @code{defvar}s whose initial values depend on functions
or special variables defined in @code{c}) you would write the transformations
@lisp
(:compile-load a (:fasload b c) (:fasload c))
(:compile-load b (:fasload c))
@end lisp

@section  Making a System

@defun make-system name &rest keywords
The @code{make-system} function does the actual work of compiling and
loading.  In the example above, if @code{PROG1} and @code{PROG2} have both
been compiled recently, then
@lisp
(make-system 'mysys)
@end lisp
loads them as necessary.  If either one might also need to be compiled, then
@lisp
(make-system 'mysys :compile)
@end lisp
does that first as necessary.

The very first thing @code{make-system} does is check whether the file
which contains the @code{defsystem} for the specified system has changed
since it was loaded.  If so, it offers to load the latest version, so
that the remainder of the @code{make-system} can be done using the latest
system definition.  (This only happens if the filetype of that file is
@code{LISP}.)  After loading this file or not, @code{make-system} goes on to
process the files that compose the system.

If the system name is not recognized, @code{make-system} attempts to load the file
@code{SYS: SITE; @i{system-name} SYSTEM}, in the hope that that contains a system definition
or a call to @code{si:set-system-source-file}.

@code{make-system} lists what transformations it is going to perform on
what files, then asks the user for confirmation.  If the user types S when
confirmation is requested, then @code{make-system} asks about each file
individually so that the user can decide selectively which
transformations should be performed; then collective reconfirmation is
requested.  This is like what happens if the @code{:selective} keyword
is specified.  If the user types Y, the transformations are performed.
Before each transformation a message is printed listing the
transformation being performed, the file it is being done to, and the
package.  This behavior can be altered by @i{keywords}.

If the system being made is patchable, and if loading has not been inhibited,
then the system's patches are loaded afterward.  Loading of patches
is silent if the @code{make-system} is, and requires confirmation if the
@code{make-system} does.
@end defun

These are the keywords recognized by the @code{make-system} function and
what they do.
@table @code
@item :noconfirm make-system
Assumes a yes answer for all questions that would otherwise be asked of the user.

@item :selective make-system
Asks the user whether or not to perform each transformation that appears to
be needed for each file.

@item :silent make-system
Avoids printing out each transformation as it is performed.

@item :reload make-system
Bypasses the specified conditions for performing a transformation.  Thus files are
compiled even if they haven't changed and loaded even if they aren't newer than the
installed version.

@item :noload make-system
Does not load any files except those required by dependencies.  For use in
conjunction with the @code{:compile} option.

@item :compile make-system
Compiles files also if need be.  The default is to load but not compile.

@item :recompile make-system
This is equivalent to a combination of @code{:compile} and @code{:reload}:
it specifies compilation of all files, even those whose sources have
not changed since last compiled.

@item :no-increment-patch make-system
When given along with the @code{:compile} option, disables the automatic
incrementing of the major system version that would otherwise take
place.  See (patch-facility).

@item :increment-patch make-system
Increments a patchable system's major version without doing any
compilations.  See (patch-facility).

@item :no-reload-system-declaration make-system
Turns off the check for whether the file containing the @code{defsystem}
has been changed.  Then the file is loaded only if it has never been
loaded before.

@item :batch make-system
Allows a large compilation to be done unattended.  It acts
like @code{:noconfirm} with regard to questions, turns off more-processing and
fdefine-warnings (see @code{inhibit-fdefine-warnings},
(inhibit-fdefine-warnings-var)), and saves the compiler warnings in
an editor buffer and a file
(it asks you for the name).

@item :defaulted-batch make-system
This is like @code{:batch} except that it uses the default for the pathname
to store warnings in and does not ask the user to type a pathname.

@item :print-only make-system
Just prints out what transformations would be performed; does not actually do any
compiling or loading.

@item :noop make-system
Is ignored.  This is useful mainly for programs that call @code{make-system},
so that such programs can include forms like
@lisp
(make-system 'mysys (if compile-p :compile :noop))
@end lisp
@end table

@section  Adding New Keywords to make-system

@code{make-system} keywords are defined as functions on the
@code{si:make-system-keyword} property of the keyword.  The functions are
called with no arguments.  Some of the relevant variables they can use
are

@defvar si:*system-being-made*
The internal data structure that represents the system being made.
@end defvar

@defvar si:*make-system-forms-to-be-evaled-before*
A list of forms that are evaluated before the transformations are performed.
@end defvar

@defvar si:*make-system-forms-to-be-evaled-after*
A list of forms that are evaluated after the transformations have been performed.
Transformations can push entries here too.
@end defvar

@defvar si:*make-system-forms-to-be-evaled-finally*
A list of forms that are evaluated by an @code{unwind-protect} when the
body of @code{make-system} is exited, whether it is completed or not.
Closing the batch warnings file is done here.  Unlike the
@code{si:*make-system-forms-to-be-evaled-after*} forms, these forms are
evaluated outside of the ``compiler warnings context''.
@end defvar

@defvar si:*query-type*
Controls how questions are asked.  Its normal value is @code{:normal}.
@code{:noconfirm} means ask no questions and @code{:selective} means
asks a question for each individual file transformation.
@end defvar

@defvar si:*silent-p*
If @code{t}, no messages are printed out.
@end defvar

@defvar si:*batch-mode-p*
If @code{t}, @code{:batch} was specified.
@end defvar

@defvar si:*redo-all*
If @code{t}, all transformations are performed, regardless of the condition functions.
@end defvar

@defvar si:*top-level-transformations*
A list of the types of transformations that should be performed, such as
@code{(:fasload :readfile)}.  The contents of this list are controlled by
the keywords given to @code{make-system}.  This list then controls which
transformations are actually performed.
@end defvar

@defvar si:*file-transformation-function*
The actual function that gets called with the list of transformations that need to be
performed.  The default is @code{si:do-file-transformations}.
@end defvar

@defmac si:define-make-system-special-variable variable value [defvar-p]
Causes @i{variable} to be bound to @i{value} during the body of the call to @code{make-system}.
This allows you to define new variables similar to those listed above.
@i{value} is evaluated on entry to @code{make-system}.
If @i{defvar-p} is specified as (or defaulted to) @code{t}, @i{variable}
is defined with @code{defvar}.  It is not given an initial value.
If @i{defvar-p} is specified as @i{nil},
@i{variable} belongs to some other program and is not @code{defvar}'ed here.
@end defmac

The following simple example adds a new keyword to @code{make-system}
called @code{:just-warn}, which means that @code{fdefine} warnings (see
(fdefine-fun)) regarding  functions being overwritten should be printed
out, but the user should not be queried.
@lisp
(si:define-make-system-special-variable
   inhibit-fdefine-warnings inhibit-fdefine-warnings nil)

(defun (:just-warn si:make-system-keyword) ()
  (setq inhibit-fdefine-warnings :just-warn))
@end lisp
(See the description of the @code{inhibit-fdefine-warnings} variable, on
(inhibit-fdefine-warnings-var).)

@code{make-system} keywords can do something directly when called, or they
can have their effect by pushing a form to be evaluated onto
@code{si:*make-system-forms-to-be-evaled-after*} or one of the other two similar lists.
In general, the only
useful thing to do is to set some special variable defined by
@code{si:define-make-system-special-variable}.  In addition to the ones
mentioned above, user-defined transformations may have their behavior
controlled by new special variables, which can be set by new keywords.
If you want to get at the list of transformations to be performed, for
example, the right way is to set
@code{si:*file-transformation-function*} to a new function, which then
can call @code{si:do-file-transformations} with a possibly modified
list.  That is how the @code{:print-only} keyword works.

@section  Adding New Options for defsystem

Options to @code{defsystem} are defined as macros on the
@code{si:defsystem-macro} property of the option keyword.  Such a macro can
expand into an existing option or transformation, or it can have side effects
and return @code{nil}.  There are several variables they can use; the only one
of general interest is

@defvar si:*system-being-defined*
The internal data structure that represents the system that is currently being constructed.
@end defvar

@defmac si:define-defsystem-special-variable variable value
Causes @i{value} to be evaluated and @i{variable} to be bound to the
result during the expansion of the @code{defsystem} special form.  This
allows you to define new variables similar to the one listed above.
@end defmac

@defmac si:define-simple-transformation
This is the most convenient way to define a new simple transformation.
The form is
@lisp
(si:define-simple-transformation @i{name} @i{function}
	@i{default-condition} @i{input-file-types} @i{output-file-types}
        @i{pretty-names} @i{compile-like} @i{load-like})
@end lisp
For example,
@lisp
(si:define-simple-transformation :compile si:qc-file-1
	si:file-newer-than-file-p (:lisp) (:qfasl))
@end lisp
@i{input-file-types} and @i{output-file-types} are how a transformation
specifies how many input filenames and output filenames it should
receive as arguments, in this case one of each.  They also, obviously, specify
the default file type for these pathnames.
The @code{si:qc-file-1} function is mostly like @code{compile-file}, except for its interface to
packages.  It takes input-file and output-file arguments.

@i{pretty-names}, @i{compile-like}, and @i{load-like} are optional.

@i{pretty-names} specifies how messages printed for the user should print
the name of the transformation.  It can be a list of the
imperative (``Compile''), the present participle (``Compiling''), and
the past participle (``compiled'').  Note that the past participle is not
capitalized, because when used it does not come at the beginning of a sentence.
@i{pretty-names} can be just a string, which is taken to be the imperative,
and the system will conjugate the participles itself.  If @i{pretty-names}
is omitted or @code{nil} it defaults to the name of the transformation.

@i{compile-like} and @i{load-like} say when the transformation should be performed.
Compile-like transformations are performed when the @code{:compile}
keyword is given to @code{make-system}.
Load-like transformations are performed unless the @code{:noload}
keyword is given to @code{make-system}.
By default @i{compile-like} is @code{t} but @i{load-like} is @code{nil}.
@end defmac

Complex transformations are defined as normal macro expansions, for example,
@lisp
(defmacro (:compile-load si:defsystem-macro)
		(input &optional com-dep load-dep
				 com-cond load-cond)
  `(:fasload (:compile ,input ,com-dep ,com-cond)
	     ,load-dep ,load-cond))
@end lisp

@section  More Esoteric Transformations

It is sometimes useful to specify a transformation upon which something
else can depend, but which is performed not by default, but rather only
when requested because of that dependency.  The transformation
nevertheless occupies a specific place in the hierarchy.  The @code{:skip}
@code{defsystem} macro allows specifying a transformation of this type.
For example, suppose there is a special compiler for the read table
which is not ordinarily loaded into the system.  The compiled version
should still be kept up to date, and it needs to be loaded if ever the
read table needs to be recompiled.
@lisp
(defsystem reader
  (:pathname-default "SYS: IO;")
  (:package system-internals)
  (:module defs "RDDEFS")
  (:module reader "READ")
  (:module read-table-compiler "RTC")
  (:module read-table "RDTBL")
  (:compile-load defs)
  (:compile-load reader (:fasload defs))
  (:skip :fasload (:compile read-table-compiler))
  (:rtc-compile-load read-table (:fasload read-table-compiler)))
@end lisp
Assume that there is a complex transformation @code{:rtc-compile-load},
which is like @code{:compile-load} except that is is built on a
transformation called something like @code{:rtc-compile}, which uses the
read table compiler rather than the Lisp compiler.  In the above
system, then, if the @code{:rtc-compile} transformation is to be performed,
the @code{:fasload} transformation must be done on @code{read-table-compiler}
first, that is the read table compiler must be loaded if the read table
is to be recompiled.  If you say @code{(make-system 'reader :compile)},
then the @code{:compile} transformation is done on the
@code{read-table-compiler} module despite the @code{:skip}, compiling the read table compiler if
need be.  If you say @code{(make-system 'reader)}, the reader and the
read table are loaded, but the @code{:skip} keeps this from happening
to the read table compiler.

So far nothing has been said about what can be given as a @i{condition}
for a transformation except for the default functions, which check for
conditions such as a source file being newer than the binary.  In
general, any function that takes the same arguments as the
transformation function (e.g. @code{compile-file}) and returns @code{t} if the
transformation needs to be performed, can be in this place as a symbol,
including for example a closure.  To take an example, suppose there is a
file that contains @code{compile-flavor-methods} for a system and that
should therefore be recompiled if any of the flavor method definitions
change.  In this case, the condition function for compiling that file
should return @code{t} if either the source of that file itself or any of
the files that define the flavors have changed.  This is what the
@code{:compile-load-init} complex transformation is for.  It is defined
like this:
@lisp
(defmacro (:compile-load-init si:defsystem-macro)
		(input add-dep &optional com-dep load-dep
		 &aux function)
  (setq function (let-closed ((*additional-dependent-modules*
			       add-dep))
		   'compile-load-init-condition))
  `(:fasload (:compile ,input ,com-dep ,function) ,load-dep))

(defun compile-load-init-condition (source-file qfasl-file)
  (or (si:file-newer-than-file-p source-file qfasl-file)
      (local-declare ((special *additional-dependent-modules*))
	(si:other-files-newer-than-file-p
			*additional-dependent-modules*
			qfasl-file))))
@end lisp

The condition function generated when this macro is used
returns @code{t} either if @code{si:file-newer-than-file-p} would with those
arguments, or if any of the other files in @code{add-dep}, which presumably
is a @i{module specification}, are newer than the QFASL file.  Thus
the file (or module) to which the @code{:compile-load-init} transformation
applies will be compiled if it or any of the source files it depends on has
been changed, and will be loaded under the normal conditions.  In most
(but not all cases), @code{com-dep} is a @code{:fasload} transformation
of the same files as @code{add-dep} specifies, so that all the files this
one depends on will be loaded before compiling it.

@section  Common Lisp Modules
@cindex module

In Common Lisp, a @i{module} is a name given to a group of files of code.
Modules are not like systems because nothing records what the ``contents'' of any
particular module may be.  Instead, one of the files which defines the module
contains a @code{provide} form which says, when that file is loaded, ``Module @code{foo}
is now present.''  Other files may say, using @code{require}, ``I want to use module @code{foo}.''

Normally the @code{require} form also specifies the files to load if
@code{foo} has not been @code{provide}'d already.  This is where the
information of which files are in a module is stored.  If the
@code{require} does not have file names in it, the module name @code{foo} is
used in an implementation-dependent manner to find files to load.
The Lisp Machine does this by using it as a system name in @code{make-system}.

@defun provide module-name
Adds @i{module-name} to the list @code{*modules*} of modules already
loaded.  @i{module-name} should be a string; case is significant.
@end defun

@defun require module-name &rest files
If module @i{module-name} is not already loaded (on @code{*modules*}), @i{files} are
loaded in order to make the module available.
@i{module-name} should be a string; case is significant.
The elements of @i{files} should be pathnames or namestrings.
If @i{files} is @code{nil}, @code{(make-system @i{module-name} :noconfirm)} is done.
Note, however, that case is not significant in the argument to @code{make-system}.
@end defun

@defvar *modules*
A list of names (strings) of all modules @code{provide}'d so far.
@end defvar

@section  The Patch Facility
@cindex patch
@cindex system maintenance

The patch facility allows a system maintainer to manage new releases of a
large system and issue patches to correct bugs.  It is designed to be
used to maintain both the Lisp Machine system itself and applications
systems that are large enough to be loaded up and saved on a disk
partition.

When a system of programs is very large, it needs to be maintained.
Often problems are found and need to be fixed, or other little changes
need to be made.  However, it takes a long time to load up all of the
files that make up such a system, and so rather than having every user
load up all the files every time he wants to use the system, usually the
files just get loaded once into a Lisp world, which is then saved away
on a disk partition.  Users then use this disk partition, copies of
which may appear on many machines.  The problem is that since the users
don't load up the system every time they want to use it, they don't get
all the latest changes.

The purpose of the patch system is to solve this problem.  A @i{patch} file
is a little file that, when you load it, updates
the old version of the system into the new version of the system.  Most
often, patch files just contain new function definitions; old functions
are redefined to do their new thing.  When you want to use a system, you
first use the Lisp environment saved on the disk, and then you load all
the latest patches.  Patch files are very small, so loading them doesn't
take much time.  You can even load the saved environment, load up the
latest patches, and then save it away, to save future users the trouble
of even loading the patches.  (Of course, new patches may be made
later, and then these will have to be loaded if you want to get the
very latest version.)

For every system, there is a series of patches that have been made to
that system.  To get the latest version of the system, you load each
patch file in the series, in order.  Sooner or later, the maintainer of a
system wants to stop building more and more patches, and recompile
everything, starting afresh.  A complete recompilation is also necessary when
a system is changed in a far-reaching way, that can't be done with a
small patch; for example, if you completely reorganize a program, or
change a lot of names or conventions, you might need to completely
recompile it to make it work again.  After a complete recompilation has
been done, the old patch files are no longer suitable to use; loading
them in might even break things.

The way all this is kept track of is by labelling each version of a
system with a two-part number.  The two parts are called the @i{major
version number} and the @i{minor version number}.  The minor version
number is increased every time a new patch is made; the patch is
identified by the major and minor version number together.  The major
version number is increased when the program is completely recompiled,
and at that time the minor version number is reset to zero.  A complete
system version is identified by the major version number, followed by
a dot, followed by the minor version number.  Thus, patch @code{93.9}
is for major version 93 and minor version 9; it is followed by patch
@code{93.10}.

To clarify this, here is a typical scenario.  A new system is created;
its initial version number is @code{1.0}.  Then a patch file is created;
the version of the program that results from loading the first patch
file into version @code{1.0} is called @code{1.1}.  Then another patch file
might be created, and loading that patch file into system @code{1.1}
creates version @code{1.2}.  Then the entire system is recompiled, creating
version @code{2.0} from scratch.  Now the two patch files are irrelevant,
because they fix old software; the changes that they reflect are
integrated into system @code{2.0}.

Note that the second patch file should only be loaded into system
@code{1.1} in order to create system @code{1.2}; you shouldn't load it into
@code{1.0} or any other system besides @code{1.1}.  It is important that all
the patch files be loaded in the proper order, for two reasons.  First,
it is very useful that any system numbered @code{1.1} be exactly the same
software as any other system numbered @code{1.1}, so that if somebody
reports a bug in version @code{1.1}, it is clear just which software is
being complained about.  Secondly, one patch might patch another patch;
loading them in some other order might have the wrong effect.

The patch facility keeps track of all the patch
files that exist, remembering which version each one creates.  There
is a separate numbered sequence of patch files for each major version
of each system.  All of them are stored in the file system, and the
patch facility keeps track of where they all are.  In addition to the
patch files themselves, there are @i{patch directory} files that contain
the patch facility's data base by which it keeps track of what minor
versions exist for a major version, and what the last major version
of a system is.  These files and how to make them are described below.

In order to use the patch facility, you must define your system with
@code{defsystem} (see (system-system)) and declare it as patchable with the
@code{:patchable} option.  When you load your system (with @code{make-system},
see (make-system-fun)), it is added to the list of all systems present in
the world.  The patch facility keeps track of which version of each
patchable system is present and where the data about that system reside in
the file system.  This information can be used to update the Lisp world
automatically to the latest versions of all the systems it contains.  Once
a system is present, you can ask for the latest patches to be loaded, ask
which patches are already loaded, and add new patches.

You can also load in patches or whole new systems and then save the
entire Lisp environment away in a disk partition.  This is explained on
(disk-partition).

When a Lisp Machine is booted, it prints out a line of information
for each patchable system present in the booted Lisp world, saying
which major and minor versions are loaded.  This is done by
@code{print-herald} (see (print-herald-fun)).

@defun print-system-modifications &rest system-names
With no arguments, this lists all the systems present in this world and, for
each system, all the patches that have been loaded into this world.  For each patch
it shows the major version number (which is always the same since
a world can only contain one major version), the minor version number,
and an explanation of what the patch does, as typed in by the person who
made the patch.

If @code{print-system-modifications} is called with arguments, only the
modifications to the systems named are listed.
@end defun

@defun print-herald &optional format-dest
Prints the names and loaded version numbers of all patchable systems
loaded, and the microcode.  Also printed are the number of the band you
booted, the amount of physical and virtual memory you have, the host
name of the machine, and its associated machine name.  Example:
@lisp
MIT System, band 7 of CADR-1.
640K physical memory, 16127K virtual memory.
 System        98.43
 CADR          3.6
 ZMail         53.10
 MIT-Specific  22.0
 Microcode     309
MIT Lisp Machine One, with associated machine OZ.
@end lisp
@i{format-dest} defaults to @code{t}; if it is @code{nil} the answer is
returned as a string rather than printed out.  @i{format-dest} can also
be a stream to print on.
@end defun

@defun si:get-system-version &optional system
Returns two values, the major and minor version numbers of the version
of @i{system} currently loaded into the machine, or @code{nil} if that
system is not present.  @i{system} defaults to @code{"System"}.
@end defun

@defun si:system-version-info &optional (brief-p @code{nil})
Returns a string giving information about which systems and what
versions of the systems are loaded into the machine, and what microcode
version is running.  A typical string for it to produce is:
@lisp
"System 98.48, CADR 3.6, MIT-Specific 22.0, microcode 309"
@end lisp
If @i{brief-p} is @code{t}, it uses short names, suppresses the microcode
version, any systems which should not appear in the disk label comment,
the name @code{System}, and the commas:
@lisp
"98.48"
@end lisp
@end defun

@subsection Defining a System

In order to use the patch facility, you must declare your system as
patchable by giving the @code{:patchable} option to @code{defsystem} (see
(system-system)).  The major version of your system in the file system
is incremented whenever @code{make-system} is used to compile it.
Thus a major version is associated with a set of QFASL files.
The major version of your system that is remembered as having been loaded into the
Lisp environment is set to the major version in the file system
whenever @code{make-system} is used to load your system and the
major version in the file system is greater than what you had loaded before.

After loading your system, you can save it with the @code{disk-save}
function (see (disk-save-fun)).  @code{disk-save} asks you for any
additional information you want printed as part of the greeting when the
machine is booted.  This is in addition to the names and versions of all
the systems present in this world.  If the system version does not fit
in the partition comment field allocated in the disk label, @code{disk-save}
asks you to type in an abbreviated form.

@subsection Loading Patches

@defun load-patches &rest options
This function is used to bring the current world up to the latest minor
version of whichever major version it is, for all systems present, or
for certain specified systems.  If there are any patches
available, @code{load-patches} offers to read them in. 
With no arguments, @code{load-patches} updates all the systems present in
this world.  If you do not specify the systems to operate on, @code{load-patches} also reloads
the site files if they have changed ((site-files)), and reloads the files defining
logical host translations if they have changed ((fs:make-logical-pathname-host-fun)).

@i{options} is a list of keywords.  Some keywords are followed by an argument.
The following options are accepted:
@table @code
@item :systems @i{list}
'kindex :systems load-patches
@i{list} is a list of names of systems to be brought up to date.  If this
option is not specified, all patchable systems loaded are processed.

@item :unreleased
Loads unreleased patches with no special querying.  These patches
should be loaded for experimental use if you wish the benefit of the
latest bug fixes, but should not be loaded if you plan to save a band.

@item :site
Loads the latest site files if they have been changed since last loaded.
This is the default if you do not specify explicitly which systems to process.

@item :nosite
Prevents loading of site files.  This is the default when you specify the
systems to process.

@item :hosts
Reloads the files defining logical host translations if they have been
changed since last loaded.  This is the default if you do not specify
explicitly which systems to process.

@item :nohosts
Prevents loading of logical host translation files.  This is the default
when you specify the systems to process.

@item :verbose
Prints an explanation of what is being done.  This is the default.

@item :selective
For each patch, says what it is and then ask the user whether or not to
load it.  This is the default.  If the user answers @code{P} (for
`Proceed'), selective mode is turned off for any remaining patches to
the current system.

@item :noselective
Turns off @code{:selective}.

@item :silent
Turns off both @code{:selective} and @code{:verbose}.  In @code{:silent} mode all necessary
patches are loaded without printing anything and without querying the user.

@item :force-unfinished
Loads patches that have not been finished yet, if they have been
compiled.
@end table

@code{load-patches} returns @code{t} if any patches were loaded.
@end defun

When you load a patchable system with @code{make-system},
@code{load-patches} is called automatically on that system.

@defun si:patch-loaded-p major-version minor-version &optional (system-name @code{"SYSTEM"})
Returns @code{t} if the changes in patch
@i{major-version}.@i{minor-version} of system @i{system-name} are
loaded.  If @i{major-version} is the major version of that system which
is currently loaded, then the changes in that patch are loaded if the
current minor version is greater than or equal to @i{minor-version}.  If
the currently loaded major version is greater than @i{major-version}
then it is assumed that the newer system version contains all the
improvements patched into earlier versions, so the value is @code{t}.
@end defun

@subsection Making Patches

There are two editor commands that are used to create patch files.
During a typical maintenance session on a system you will make several
edits to its source files.  The patch system can be used to copy these
edits into a patch file so that they can be automatically incorporated
into the system to create a new minor version.  Edits in a patch file
can be modified function definitions, new functions, modified
@code{defvar}'s and @code{defconst}'s, or arbitrary forms to be evaluated, even including
@code{load}'s of new files.

The first step in making a patch is to @i{start} it.  At this stage you
must specify which patchable system you are making a patch for.  Then you @i{add}
one or more pieces of code from other source files to the patch.
Finally you @i{finish} the patch.  This is when you fill in the description
of what the patch does; this description is what @code{load-patches} prints
when it offers to load the patch.  If you have any doubts about whether
the patch will load and work properly, you finish it @i{unreleased};
then you can load it to test it but no bands can be saved containing the
patch until you explicitly release it later.

It is important that any change you patch should go in a patch for the
patchable system to which the changed source file belongs.  This makes
sure that nobody loads the change into a Lisp world which does not
contain the file you were changing--something that might cause trouble.
Also, it ensures that you never patch changes to the same piece of
code in two different patchable systems' patches.  This would lead to
disaster because there is no constraint on the order in which patches to
two different systems are loaded.

Starting a patch can be done with @code{Meta-X Start Patch}.  It reads the
name of the system to patch with the minibuffer.  @code{Meta-X Add Patch}
can also start a patch, so an explicit @code{Meta-X Start Patch} is needed
only infrequently.

@code{Meta-X Add Patch} adds the region (if there is one) or the current
``defun'' to the patch file currently being constructed.  If you change a
function, you should recompile it, test it, then once it works use @code{Add
Patch} to put it in the patch file.  If no patch is being constructed,
one is started for you; you must type in the name of the system to patch.

A convenient way to add all your changes to a patch file is to use
@code{Meta-X Add Patch Changed Sections} or @code{Meta-X Add Patch Buffer
Changed Sections}.  These commands ask you, for each changed function
(or each changed function in the current buffer), whether to add it to
the patch being constructed.  If you use these commands more than once,
a function which has been added to the patch and has not been changed
since is considered ``unchanged''.

The patch file being constructed is in an ordinary editor buffer.  If
you mistakenly @code{Add Patch} something that doesn't work, you can select
the buffer containing the patch file and delete it.  Then later you can
@code{Add Patch} the corrected version.

While you are making your patch file, the minor version number that has
been allocated for you is reserved so that nobody else can use it.  This
way if two people are patching a system at the same time, they do not
both get the same minor version number.

After testing and patching all of your changes, use @code{Meta-X Finish Patch} to
install the patch file so that other users can load it.  This compiles
the patch file if you have not done so yourself (patches are always compiled).
It also asks you for a comment describing the reason for the patch; @code{load-patches}
and @code{print-system-modifications} print these comments.  If the patch is
complex or it has a good chance of causing new problems, you should not use
@code{Meta-X Finish Patch}; instead, you should make an unreleased patch.

@cindex unreleased patches
A finished patch can be @i{released} or @i{unreleased}.  If a patch is
unreleased, it can be loaded in the usual manner if the user says `yes' to
a special query, but once it has been loaded the user will be strongly
discouraged from saving a band.  Therefore, you still have a chance to
edit the patch file and recompile it if there is something wrong with
it.  You can be sure that the old broken patch will not remain
permanently in saved bands.

To finish a patch without releasing it, use the command @code{Meta-X Finish
Patch Unreleased}.  Then the patch can be tested by loading it.
After a sufficient period for testing, you can release the patch with
@code{Meta-X Release Patch}.  If you discover a bug in the patch after this
point, it is not sufficient to correct it in this patch file; you must
put the fix in a new patch to correct any bands already saved with the
broken version of this patch.

It is a good principle not to add any new features or fix any additional
bugs in a patch once that patch is released; change it only to correct
problems with that patch.  New fixes to other bugs should go in new
patches.

You can only be constructing one patch at any time.  @code{Meta-X Add Patch}
automatically adds to the patch you are constructing.  But you can start
constructing a different patch without finishing the first.  If you use
the command @code{Meta-X Start Patch} while constructing a patch, you are
given the option of starting a new patch.  The old patch ceases to be
the one you are constructing but the patch file remains in its editor buffer.
Later, or in another session, you can go back to constructing the first
patch with the command @code{Meta-X Resume Patch}.  This commands asks for
both a patchable system name and the patch version to resume constructing.
You can simply save the editor buffer of a patch file and resume
constructing that patch in a later session.  You can even resume constructing a finished
patch; though it rarely makes sense to do this unless the patch is
unreleased.

If you start to make a patch and change your mind, use the command
@code{Meta-X Cancel Patch}.  This deletes the record that says that
this patch is being worked on.  It also tells the editor that you
are no longer constructing any patch.  You can undo a finished (but unreleased)
patch by using @code{Resume Patch} and then @code{Cancel Patch}.  If a patch
is released, you cannot remove it from saved bands, so it is not
reasonable to cancel it at that stage.

@subsection Private Patches

A private patch is a file of changes which is not installed to be loaded
automatically in sequence by all users.  It is loaded only by explicit
request (using the function @code{load}).  A private patch is not
associated with any particular patchable system, and has no version
number.

To make a private patch, use the editor command @code{Meta-X Start Private
Patch}.  Instead of a patchable system name, you must specify a
filename to use for the patch file; since the patch is not to be
installed, there is no standard naming convention for it to follow.  Add
text to the patch using @code{Meta-X Add Patch} and finish it using
@code{Meta-X Finish Patch}.  There is no concept of release for private
patches so there is no point in using @code{Meta-X Finish Patch
Unreleased}.  There is also no data base recording all private patches,
so @code{Meta-X Start Private Patch} will resume an existing patch, or even
a finished patch.  In fact, finishing a private patch is merely a way
to write a comment into it and compile it.

Once the private patch file is made, you can load it like any other file.

The private patch facility is just an easy way to copy code from various
files into one new file with @code{Patch-File: T} in its attribute list (to
prevent warnings about redefining functions defined in other files) and
compile that file.

@subsection System Status
@cindex status, of a patchable system

The patch system has the concept of the @i{status} of a major version of a
system.  A status keyword is recorded in the Lisp world for each
patchable system that is loaded.  There is also a current status for
each major version of each system, recorded in the patch directory file
for that major version.  Loading patches updates the status in the Lisp
world to match the current status stored in the patch directory.  The
status in the patch directory is changed with @code{si:set-system-status}.

The status is displayed when the system version is displayed, in places
such as the system greeting message (@code{print-herald}) and the disk
partition comment.

The status is one of the following keywords:
@table @code
@item :experimental
The system has been built but has not yet been fully debugged and released to users.
This is the default status when a new major version is created, unless it is
overridden with the @code{:initial-status} option to @code{defsystem}.

@item :released
The system is released for general use.  This status produces no extra text
in the system greeting and the disk partition comment.

@item :obsolete
The system is no longer supported.

@item :broken
This is like @code{:experimental}, but is used when the system was thought incorrectly
to have been debugged, and hence was @code{:released} for a while.

@item :inconsistent
Unreleased patches to this system have been loaded.
If any patchable system is in this status, @code{disk-save} demands extra
confirmation, and the resulting saved band is identified as ``Bad'' in its
disk partition comment.
@end table

@defun si:set-system-status system status &optional major-version
Changes the current status of a system, as recorded in the patch
directory file.  @i{system} is the name of the system.
@i{major-version} is the number of the major version to be changed; if
unsupplied it defaults to the version currently loaded into the Lisp
world.  @i{status} should be one of the keywords above.

Do not set the current system status to @code{:inconsistent}.  A status of
@code{:inconsistent} is set up in the Lisp world when an unreleased patch
is loaded, and once set that way it never changes in that Lisp world.
The status recorded in the system's patch directory file should describe
the situation where all currently released patches are loaded.
It should never be @code{:inconsistent}.
@end defun

@subsection Patch Files

The patch system maintains several different types of files in
the directory associated with your system.  This directory is specified
to @code{defsystem} via either the @code{:patchable} option or the @code{:pathname-default}
option.  These files are maintained automatically, but they are described here
so that you can know what they are and when they are obsolete and can be deleted. 

If the @code{:patchable} option to @code{defsystem} had no argument, then the
patch data files are stored on the host, device and directory specified as
the system's pathname default.  The names and types of the filenames
are all standard and do not include the name of the system in any way.

If the @code{:patchable} option to @code{defsystem} is given an argument, this
argument is a file namestring specifying the host, device and directory
to use for storing the patch data files.  In addition, the system's short name
is used in constructing the names of the files.  This allows you to store
the patch data files for several systems in the same directory.

There are three kinds of files that record patch information:
@table @strong
@item 7**  the system patch directory

This file records the current major version number,
so that when the system is recompiled a new number can be allocated.

On Tops-20, this file has, by default, a name like @code{OZ:PS:<MYDIR>PATCH.DIRECTORY},
where the host, device, and directory (@code{OZ:PS:<MYDIR>}) come
from the system's @code{:pathname-default} as explained above.

If @code{:patchable} is given an argument, this file for system @code{FOO} has
a name like @code{OZ:PS:<PATDIR>FOO.PATCH-DIRECTORY}, where the host, device and directory
come from @code{:patchable}'s argument.

@item 7**  the patch directory of a major version

There is a file of this kind for each major version of the system.
It records the patches that have been made for that major version:
the minor version, author, description and release status of each one.

The data in this file are in the form of a printed representation of a
Lisp list with two elements.  The first is the system status of this
major version (@code{:experimental}, @code{:released}, @code{:broken} or
@code{:obsolete}).  The second is another list with an element for each
patch.  The element for a patch is a list of length four: the minor
version, the patch description (a string) or @code{nil} for an unfinished
patch, the author's name (a string), and a flag that is @code{t} if the
patch is unreleased.

On a Tops-20, for major version 259, this file has, by default, a name like
@code{OZ:PS:<MYDIR>PATCH-259.DIRECTORY}.

If @code{:patchable} is given an argument, this file for system @code{FOO} has a name like
@code{OZ:PS:<PATDIR>FOO-259.PATCH-DIRECTORY}.

@item 7**  the individual patch

For each patch made, there is a Lisp source file and a QFASL file.

On a Tops-20, for version 259.12, these files have, by default, names like
@code{OZ:PS:<MYDIR>PATCH-259-12.LISP} and @code{OZ:PS:<MYDIR>PATCH-259-12.QFASL}.

If @code{:patchable} is given an argument, this file for system @code{FOO} has a name like
@code{OZ:PS:<PATDIR>FOO-259-12.PATCH-DIRECTORY}.
@end table

On certain types of file systems, slightly different naming conventions
are used to keep the names short enough to be legal.

@chapter Processes
@cindex process
@cindex multiprocessing
@cindex wait

The Lisp Machine supports @i{multi-processing};  several computations
can be executed concurrently by placing each in a separate
@i{process}.  A process is like a processor, simulated by software.
Each process has its own program counter, its own stack of function
calls and its own special-variable binding environment in which to
execute its computation.  (This is implemented with stack groups; see
(stack-group).)

If all the processes are simply trying to compute, the machine allows
them all to run an equal share of the time.  This is not a particularly
efficient mode of operation since dividing the finite memory and
processor power of the machine among several processes certainly cannot
increase the available power and in fact wastes some of it in overhead.
The typical use for processes is that at any time only one or two
are trying to run.  The rest are either @i{waiting} for some event to
occur or @i{stopped} and not allowed to compete for resources.

@cindex process wait function
A process waits for an event by means of the @code{process-wait} primitive,
which is given a predicate function which defines the event being waited
for.  A module of the system called the process scheduler periodically
calls that function.  If it returns @code{nil} the process continues to wait;
if it returns @code{t} the process is made runnable and its call to
@code{process-wait} returns, allowing the computation to proceed.

@cindex run reason
@cindex arrest reason
@cindex active process
A process may be @i{active} or @i{stopped}.  Stopped processes are
never allowed to run; they are not considered by the scheduler, and so
can never become the current process until they are made active again.
The scheduler continually tests the waiting functions of all the active
processes, and those which return non-@code{nil} values are allowed to run.
When you first create a process with @code{make-process}, it is inactive.

The activity of a process is controlled by two sets of Lisp objects
associated with it, called its @i{run reasons} and its @i{arrest
reasons}.  These sets are implemented as lists.  Any kind of object
can be in these sets; typically keyword symbols and active objects
such as windows and other processes are found.  A process is
considered active when it has at least one run reason and no
arrest reasons.

To get a computation to happen in another process, you must first create
a process, then say what computation you want to happen in that
process.  The computation to be executed by a process is specified as an
@i{initial function} and a list of arguments to that
function.  When the process starts up it applies the function to the
arguments.  In some cases the initial function is written so that it
never returns, while in other cases it performs a certain computation
and then returns, which stops the process.

To @i{reset} a process means to exit its entire computation nonlocally
using @code{*unwind-stack} (see (*unwind-stack-fun)).  Some processes are
temporary and die when reset.  The other, permanent functions start
their computations over again when reset.  Resetting a process clears
its waiting condition, so that if it is active it becomes runnable.  To
@i{preset} a function is to set up its initial function (and arguments)
and then reset it.  This is how you start up a computation in a process.

All processes in a Lisp Machine run in the same virtual address space,
sharing the same set of Lisp objects.  Unlike other systems that have
special restricted mechanisms for inter-process communication, the
Lisp Machine allows processes to communicate in arbitrary ways through
shared Lisp objects.  One process can inform another of an event simply
by changing the value of a global variable.  Buffers containing messages
from one process to another can be implemented as lists or arrays.
The usual mechanisms of atomic operations, critical sections, and
interlocks are provided
(see @code{store-conditional} [(store-conditional-fun)],
@code{without-interrupts} [(without-interrupts-fun)],
and @code{process-lock} [(process-lock-fun)]).

A process is a Lisp object, an instance of one of several flavors
of process (see (flavor)).  The remainder of this chapter describes
the operations defined on processes, the functions you can apply to
a process, and the functions and variables a program running in a process
can use to manipulate its process.

@section  The Scheduler

@cindex scheduler
	At any time there is a set of @i{active processes}; as described
above, these are all the processes that are not stopped.  Each active
process is either currently running, runnable (ready to run), or waiting for some
condition to become true.  The active processes are managed by a special
stack group called the @i{scheduler}, which repeatedly examines each active
process to determine whether it is waiting or ready to run.  The scheduler
then selects one process and starts it up.

The process chosen by the scheduler becomes the @i{current process},
that is, the one process that is running on the machine.  The scheduler
sets the variable @code{current-process} to it.  It remains the current
process and continues to run until either it decides to wait, or a
@i{sequence break} occurs.  In either case, the scheduler stack group is
resumed.  It then updates the process's run time meters and chooses a
new process to run next.  This way, each process that is ready to run
gets its share of time in which to execute.

@cindex priority (of a process)
Each process has a @i{priority} which is a number.  Most processes
have priority zero.  Larger numbers give a process more priority.
The scheduler only considers the highest priority runnable processes,
so if there is one runnable process with priority 20 then no process
with lesser priority can run.

@cindex wait function
The scheduler determines whether a process is runnable by applying the
process's @i{wait-function} to its @i{wait-argument-list}.  If the
wait-function returns a non-@code{nil} value, then the process is ready to
run; otherwise, it is waiting.

A process can wait for some condition to become true by calling
@code{process-wait} (see (process-wait-fun)).  This function sets the
process's wait-function and wait-argument-list as specified by the
caller, and resumes the scheduler stack group.  A process can also wait
for just a moment by calling @code{process-allow-schedule} (see
(process-allow-schedule-fun)), which resumes the scheduler stack group
but leaves the process runnable; it will run again as soon as all other
runnable processes have had a chance.

A sequence break is a kind of interrupt that is generated by the Lisp
system for any of a variety of reasons; when it occurs, the scheduler is
resumed.  The function @code{si:sb-on} (see (si:sb-on-fun)) can be used to
control when sequence breaks occur.  The default is to sequence break
once a second.  Thus even if a process never waits and is not stopped,
it is forced to return control to the scheduler once a second so that
any other runnable processes can get their turn.

The system does not generate a sequence break when a page fault occurs;
thus time spent waiting for a page to come in from the disk is ``charged''
to a process the same as time spent computing, and cannot be used by
other processes.  It is done this way for the sake of simplicity; this
allows the whole implementation of the process system to reside in
ordinary virtual memory, so that it does not have to worry specially
about paging.  The performance penalty is small since Lisp Machines are
personal computers, not multiplexed among a large number of processes.
Usually only one process at a time is runnable.

A process's wait function is free to touch any data structure it likes
and to perform any computation it likes.  Of course, wait functions
should be kept simple, using only a small amount of time and touching
only a small number of pages, or system performance will be impacted
since the wait function will consume resources even when its process is
not running.

If a wait function gets an error, the error occurs inside the scheduler.
If this enters the debugger, all scheduling comes to a halt until the
user proceeds or aborts.  Aborting in the debugger inside the scheduler
``blasts'' the current process by giving it a trivial wait function that
always returns @code{nil}; this prevents recurrence of the same problem.
It is best to write wait functions that cannot get errors, by keeping
them simple and by arranging for any problems to be detected before the
scheduler sees the wait function.  @code{process-wait} calls the wait
function once before giving it to the scheduler, and this often exposes
an error before it can interfere with scheduling.

Note well that a process's wait function is executed inside the
scheduler stack-group, @i{not} inside the process.  This means that a
wait function may not access special variables bound in the process.  It
is allowed to access global variables.  It can access variables bound by
a process through the closure mechanism ((closure)).  If the wait
function is defined lexically within the caller of @code{process-wait} then
it can access local variables through the lexical scoping mechanism.
Most commonly any values needed by the wait function are passed to it as
arguments.

@c [Here need to discuss quantum and priority.]

@defvar current-process
The value of @code{current-process} is the process that is currently
executing, or @code{nil} while the scheduler is running.  When the
scheduler calls a process's wait-function, it binds @code{current-process}
to the process so that the wait-function can access its process.
@end defvar

@defmac without-interrupts body...
The @i{body} forms are evaluated with
@code{inhibit-scheduling-flag} bound to @code{t}.  This is the recommended
way to lock out multi-processing over a small critical section of code
to prevent timing errors.  In other words the body is an
@i{atomic operation}.  The values of the last form in the body
are ultimately returned.

In this example, @code{list} is presumed to be a global variable
referred to from two places in the code which different
processes will execute.
@lisp
(without-interrupts
  (push item list))

(without-interrupts
  (cond ((memq item list)
	 (setq list (delq item list))
	 t)
	(t nil)))
@end lisp
@end defmac

@defvar inhibit-scheduling-flag
The value of @code{inhibit-scheduling-flag} is normally @code{nil}.
@code{without-interrupts} binds it to @code{t}, which prevents
process-switching until @code{inhibit-scheduling-flag} becomes @code{nil}
again.  It is cleaner to use @code{without-interrupts} than to refer
directly to this variable.
@end defvar

@defun process-wait whostate function &rest arguments
This is the primitive for waiting.  The current process waits until the
application of @i{function} to @i{arguments} returns non-@code{nil}
(at which time @code{process-wait} returns).  Note that @i{function} is applied
in the environment of the scheduler, not the environment of the @code{process-wait},
so special bindings in effect when @code{process-wait} was called are @i{not} be
in effect when @i{function} is applied.  Be careful when using any free
references in @i{function}.  @i{whostate} is a string containing a brief
description of the reason for waiting.  If the who-line at the bottom
of the screen is looking at this process, it will show @i{whostate}.
@lisp
@exdent Example:
(process-wait "Buffer"
	#'(lambda (b) (not (zerop (buffer-n-things b))))
	the-buffer)
@end lisp
@end defun

@defun process-sleep interval
Waits for @i{interval} sixtieths of a second, and then returns.
It uses @code{process-wait}.
@end defun

@defun sleep seconds
Waits @i{seconds} seconds and then returns.
@i{seconds} need not be an integer.  This also uses @code{process-wait}.
@end defun

@defun process-wait-with-timeout whostate interval function &rest arguments
This is like @code{process-wait} except that if @i{interval} sixtieths of a
second go by and the application of @i{function} to @i{arguments} is
still returning @code{nil}, then @code{process-wait-with-timeout} returns
anyway.  The value returned is the value of applying @i{function} to
@i{arguments}; thus, it is non-@code{nil} if the wait condition actually
occurred, @code{nil} for a time-out.

If @i{interval} is @code{nil}, there is no timeout, and this function is then
equivalent to @code{process-wait}.
@end defun

@defmac with-timeout (interval timeout-forms...) body...
@i{body} is executed with a timeout in effect for @i{interval} sixtieths of a second.  If
@i{body} finishes before that much time elapses, the
values of the last form in @i{body} are returned.

If after @i{interval} has elapsed @i{body} has not completed, its
execution is terminated with a @code{throw} caught by the @code{with-timeout}
form.  Then the @i{timeout-forms} are evaluated and the values of the
last one of them are returned.

@lisp
@exdent For example,
(with-timeout ((* 60. 60.) (format *query-io* " ... Yes.") t)
  (y-or-n-p "Really do it? (Yes after one minute) "))
@end lisp
is a convenient way to ask a question and assume an answer if the user does not
respond promptly.  This is a good thing to do for queries likely to occur when the
user has walked away from the terminal and expects an operation to finish without
his attention.
@end defmac

@defun process-allow-schedule
Resumes the scheduler momentarily; all other processes will get a
chance to run before the current process runs again.
@end defun

.defconst sys:scheduler-stack-group
This is the stack group in which the scheduler executes.
.end_defconst

@defvar sys:clock-function-list
This is a list of functions to be called by the scheduler 60 times a second.
Each function is passed one argument, the number of 60ths of a second
since the last time that the functions on this list were called.
These functions implement various
system overhead operations such as blinking the blinking cursor
on the screen.  Note that these functions are called inside the
scheduler, just as are the functions of simple processes (see (simple-process)).
The scheduler calls these functions as often as possible, but never
more often than 60 times a second.  That is, if there are no processes
ready to run, the scheduler calls the clock functions 60 times a second,
assuming that, all together, they take less than 1/60 second to run.
If there are processes continually ready to run, then the scheduler calls
the clock functions as often as it can; usually this is once a second, since
usually the scheduler gets control only once a second.
@end defvar

@defvar sys:active-processes
This is the scheduler's data-structure.  It is a list of lists, where
the car of each element is an active process or @code{nil} and the cdr is information
about that process.
@end defvar

@defvar sys:all-processes
This is a list of all the processes in existence.  It is mainly for
debugging.
@end defvar

.defconst si:initial-process
This is the process in which the system starts up when it is booted.
.end_defconst

@defun si:sb-on &optional when
Controls what events cause a sequence break, i.e. when
rescheduling occurs.  The following keywords are names of events
which can cause a sequence break.
@table @code
@item :clock
This event happens periodically based on a clock.  The default period
is one second.  See @code{sys:%tv-clock-rate}, (sys:%tv-clock-rate-meter).
@item :keyboard
Happens when a character is received from the keyboard.
@item :chaos
Happens when a packet is received from the Chaosnet,
or transmission of a packet to the Chaosnet is completed.
@end table

Since the keyboard and Chaosnet are heavily buffered, there is no
particular advantage to enabling the @code{:keyboard} and @code{:chaos} events,
unless the @code{:clock} event is disabled.

With no argument, @code{si:sb-on} returns a list
of keywords for the currently enabled events.

With an argument, the set of enabled events is changed.  The argument
can be a keyword, a list of keywords, @code{nil} (which disables sequence
breaks entirely since it is the empty list), or a number, which is the
internal mask, not documented here.
@end defun

@c with-real-time would be here except it's in the hacks package

@section  Locks
@cindex lock

	A @i{lock} is a software construct used for synchronization
of two processes.  A lock is either held by some process, or is free.
When a process tries to seize a lock, it waits until the lock is free,
and then it becomes the process holding the lock.  When it is finished,
it unlocks the lock, allowing some other process to seize it.
A lock protects some resource or data structure so that only one
process at a time can use it.

	In the Lisp Machine, a lock is a locative pointer to a cell.
If the lock is free, the cell contains @code{nil}; otherwise it contains
the process that holds the lock.  The @code{process-lock} and @code{process-unlock}
functions are written in such a way as to guarantee that two processes
can never both think that they hold a certain lock; only one process
can ever hold a lock at one time.

@defun process-lock locative &optional (lock-value @code{current-process}) (whostate @code{"Lock"}) timeout
This is used to seize the lock that @i{locative} points to.
If necessary, @code{process-lock} waits until the lock becomes free.
When @code{process-lock} returns, the lock has been seized.  @i{lock-value}
is the object to store into the cell specified by @i{locative}, and
@i{whostate} is passed on to @code{process-wait}.

If @i{timeout} is non-@code{nil}, it should be a fixnum representing a time
interval in 60ths of a second.  If it is necessary to wait more than that long,
an error with condition name @code{sys:lock-timeout} is signaled.
@end defun

@defun process-unlock locative &optional (lock-value @code{current-process})
This is used to unlock the lock that @i{locative} points to.
If the lock is free or was locked by some other process, an
error is signaled.  Otherwise the lock is unlocked.  @i{lock-value}
must have the same value as the @i{lock-value} parameter to the matching
call to @code{process-lock}, or else an error is signaled.
@end defun

.defcondition sys:lock-timeout (@code{error})
This condition is signaled when @code{process-lock} waits longer than the
specified timeout.
.end_defcondition

	It is a good idea to use @code{unwind-protect} to make sure that
you unlock any lock that you seize.  For example, if you write
@lisp
(unwind-protect
   (progn (process-lock lock-3)
	  (function-1)
	  (function-2))
   (process-unlock lock-3))
@end lisp
then even if @code{function-1} or @code{function-2} does a @code{throw},
@code{lock-3} will get unlocked correctly.  Particular programs that use
locks often define special forms that package this @code{unwind-protect}
up into a convenient stylistic device.

A higher level locking construct is @code{with-lock}:

@defmac with-lock (lock &key norecursive) body...
Executes the @i{body} with @i{lock} locked.
@i{lock} should actually be an expression whose value would be the
status of the lock; it is used inside @code{locf} to get a locative
pointer with which the locking and unlocking are done.

It is OK for one process to lock a lock multiple times, recursively,
using @code{with-lock}, provided @i{norecursive} is not @code{nil}.

@i{norecursive} should be literally @code{t} or @code{nil}; it is not
evaluated.  If it is @code{t}, this call to @code{with-lock} signals
an error if the lock is already locked by the running process.
@end defmac

A lower level construct which can be used to implement atomic
operations, and is used in the implementation of @code{process-lock},
is @code{store-conditional}.

@defun store-conditional location oldvalue newvalue
This stores @i{newvalue} into @i{location} iff @i{location} currently
contains @i{oldvalue}.  The value is @code{t} iff the cell was changed.

If @i{location} is a list, the cdr of the list is tested and stored
in.  This is in accord with the general principle of how to access the
contents of a locative properly, and makes 
@code{(store-conditional (locf (cdr x)) ...)} work.
@end defun

An even lower-level construct is the subprimitive
@code{%store-conditional}, which is like @code{store-conditional} with no
error checking, but is faster.

@subsection Process Queues

A process queue is a kind of lock which can record several processes
which are waiting for the lock and grant them the lock in the order that
they requested it.  The queue has a fixed size.  If the number of
processes waiting remains less than that size then they will all get the
lock in the order of requests.  If too many processes are waiting then
the order of requesting is not remembered for the extra ones, but proper
interlocking is still maintained.

@defun si:make-process-queue name size
Makes and returns a process queue object named @i{name}, able to record
@i{size} processes.  The count of @i{size} includes the process that
owns the lock.
@end defun

@defun si:process-enqueue process-queue &optional lock-value who-state
Attempts to lock @i{process-queue} on behalf of @i{lock-value}.  If
@i{lock-value} is @code{nil} then the locking is done on behalf of
@code{current-process}.

If the queue is locked, then @i{lock-value} or the current process is
put on the queue.  Then this function waits for that lock value to reach
the front of the queue.  When it does so, the lock has been granted, and
the function returns.  The lock is now locked in the name of @i{lock-value}
or the current process, until @code{si:process-dequeue} is used to unlock it.

@i{who-state} appears in the who line during the wait.  It defaults to
@code{"Lock"}.
@end defun

@defun si:process-deqeueue process-queue &optional lock-value
Unlocks @code{process-queue}.  @i{lock-value} (which defaults to the current process)
must be the value which now owns the lock on the queue, or an error occurs.
The next process or other object on the queue is granted the lock and its
call to @code{si:process-enqueue} will therefore return.
@end defun

@defun si:reset-process-queue process-queue
Unlocks the queue and clears out the list of things waiting to lock it.
@end defun

@defun si:process-queue-locker process-queue
Returns the object in whose name the queue is currently locked,
or @code{nil} if it is not now locked.
@end defun

@section  Creating a Process

There are two ways of creating a process.  One is to create a permanent
process which you will hold on to and manipulate as desired.  The other
way is to say simply, ``call this function on these arguments in another
process, and don't bother waiting for the result.''  In the latter case
you never actually use the process itself as an object.

@defun make-process name &key ...
Creates and returns a process named @i{name}.  The process is not
capable of running until it has been reset or preset in order to initialize
the state of its computation.

Usually you do not need to specify any of the keyword arguments.
The following keyword arguments are allowed:
@table @code
@item :simple-p
Specifying @code{t} here gives you a simple process (see (simple-process)).
@item :flavor
Specifies the flavor of process to be created.  See (process-flavors), for
a list of all the flavors of process supplied by the system.
@item :stack-group
Specifies the stack group the process is to use.  If this option is not specified,
a stack group is created according to the relevant options below.
@item :warm-boot-action
What to do with the process when the machine is booted.
See (si:process-warm-boot-action-method).
@item :quantum
See (si:process-quantum-method).
@item :priority
See (si:process-priority-method).
@item :run-reasons
Lets you supply an initial run reason.  The default is @code{nil}.
@item :arrest-reasons
Lets you supply an initial arrest reason.  The default is @code{nil}.
@item :sg-area
The area in which to create the stack group.  The default is
the value of @code{default-cons-area}.
@item :regular-pdl-area
@itemx :special-pdl-area make-process
@itemx :regular-pdl-size make-process
@itemx :special-pdl-size make-process
These are passed on to @code{make-stack-group}, (make-stack-group-fun).
@item :swap-sv-on-call-out
@itemx :swap-sv-of-sg-that-calls-me make-process
@itemx :trap-enable make-process
Specify those attributes of the stack group.  You don't want to use
these.
@end table

If you specify @code{:flavor}, there can be additional options provided
by that flavor.
@end defun

The following functions allow you to call a function and have its
execution happen asynchronously in another process.  This can be used
either as a simple way to start up a process that will run ``forever'', or
as a way to make something happen without having to wait for it
to complete.  When the function returns, the process is returned to a pool
of free processes for reuse.  The only difference between these three
functions is in what happens if the machine is booted while the process
is still active.

Normally the function to be run should not do any I/O to the terminal,
as it does not have a window and terminal I/O will cause it to make a
notification and wait for user attention.  Refer to
(sg-terminal-io-issues) for a discussion of the issues.

@defun process-run-function name-or-options function &rest args
Creates a process, presets it to apply
@i{function} to @i{args}, and starts it running.
The value returned is the new process.
The process is killed if @i{function} returns; by default,
it is also killed if it is reset.
Example:
@lisp
(defun background-print (file)
  (process-run-function "Print" 'hardcopy-file file))
@end lisp
creates a background process that prints the specified file.

@i{name-or-options} can be either a string specifying a name for
the process or a list of alternating keywords and values that can
specify the name and various other parameters.
@table @code
@item :name
This keyword should be followed by a string which specifies the name
of the process.  The default is @code{"Anonymous"}.
@item :restart-after-reset
This keyword says what to do to the process if it is reset.  @code{nil}
means the process should be killed; anything else means the process
should be restarted.  @code{nil} is the default.
@item :warm-boot-action
What to do with the process when the machine is booted.
See (si:process-warm-boot-action-method).
@item :restart-after-boot
This is a simpler way of saying what to do with the process when the
machine is booted.  If the @code{:warm-boot-action} keyword is not
supplied or its value is @code{nil}, then this keyword's value is used
instead.  @code{nil} means the process should
be killed; anything else means the process should be restarted.
@code{nil} is the default.
@item :quantum
See (si:process-quantum-method).
@item :priority
See (si:process-priority-method).
@end table
@end defun

@defun process-run-restartable-function name-or-keywords function &rest args
This is the same as @code{process-run-function} except that the default is that
the process will be restarted if reset or after a warm boot.
You can get the same effect by using @code{process-run-function} with
appropriate keywords.
@end defun

@section  Process Generic Operations

@noindent
These are the operations that are defined on all flavors of process.
Certain process flavors may define additional operations.  Not all possible
operations are listed here, only those of interest to the user.

@subsection Process Attributes

@defmethod si:process :name
Returns the name of the process, which was the first argument to @code{make-process}
or @code{process-run-function} when the process was created.  The name is
a string that appears in the printed-representation of the process, stands for
the process in the who-line and the @code{peek} display, etc.
@end defmethod

@defmethod si:process :stack-group
Returns the stack group currently executing on behalf of this process.
This can be different from the initial-stack-group if the process contains
several stack groups that coroutine among themselves,
or if the process is in the error-handler, which runs in its own stack group.

Note that the stack-group of a @i{simple} process (see (simple-process))
is not a stack group at all, but a function.
@end defmethod

@defmethod si:process :initial-stack-group
Returns the stack group the initial-function is called in when the process starts up
or is reset.
@end defmethod

@defmethod si:process :initial-form
Returns the initial ``form'' of the process.
This isn't really a Lisp form; it is a cons whose car is the initial-function
and whose cdr is the list of arguments to which that function is applied
when the process starts up or is reset.

In a simple process (see (simple-process)), the initial form is a list of one
element, the process's function.

To change the initial form, use the @code{:preset} operation (see (si:process-preset-method)).
@end defmethod

@defmethod si:process :wait-function
Returns the process's current wait-function, which is the predicate used
by the scheduler to determine if the process is runnable.  This is
@code{#'true} if the process is running, and @code{#'false} if the process has
no current computation (for instance, if it has just been created, its
initial function has returned) or if the program has decided to wait
indefinitely.  The wait-function of a flushed process is @code{si:flushed-process},
a function equivalent to @code{#'false} but recognizably distinct.
@end defmethod

@defmethod si:process :wait-argument-list
Returns the arguments to the process's current wait-function.  This is
frequently the @code{&rest} argument to @code{process-wait} in the
process's stack.  The system always uses it in
a safe manner, i.e. it forgets about it before @code{process-wait} returns.
@end defmethod

@defmethod si:process :whostate
Returns a string that is the state of the process to go in the who-line at
the bottom of the screen.  This is @code{"run"} if the process is running or
trying to run; otherwise, it is the reason why the process is waiting.  If the
process is stopped, then this whostate string is ignored and the who-line
displays @code{arrest} if the process is arrested or @code{stop} if the process has
no run reasons.
@end defmethod

@defmethod si:process :quantum
@defmethodx si:process :set-quantum 60ths
Respectively return and change the number of 60ths of a second this
process is allowed to run without waiting before the scheduler will run
someone else.  The quantum defaults to 1 second.
@c [This feature doesn't really work very well.]
@end defmethod

@defmethod si:process :quantum-remaining
Returns the amount of time remaining for this process to run, in 60ths of a second.
@end defmethod

@defmethod si:process :priority
@defmethodx si:process :set-priority priority-number
Respectively return and change the priority of this process.  The larger the number, the
more this process gets to run.  Within a priority level the scheduler runs all
runnable processes in a round-robin fashion.  Regardless of priority a process
will not run for more than its quantum.  The default priority is 0, and no
normal process uses other than 0.
@end defmethod

@defmethod si:process :warm-boot-action
@defmethodx si:process :set-warm-boot-action action
Respectively return and change the process's warm-boot-action, which controls what
happens if the machine is booted while this process is active.
(Contrary to the name, this applies to both cold and warm booting.) This
can be @code{nil} or @code{:flush}, which means to @i{flush} the process (see
(flushed-process)), or can be a function to call.  The default is
@code{si:process-warm-boot-delayed-restart}, which resets the process,
causing it to start over at its initial function.  You can also use
@code{si:process-warm-boot-reset}, which throws out of the process'
computation and kills the process, or @code{si:process-warm-boot-restart},
which is like the default but restarts the process at an earlier stage
of system reinitialization.  This is used for processes like the
keyboard process and chaos background process, which are needed for
reinitialization itself.

@end defmethod

@defmethod si:process :simple-p
Returns @code{nil} for a normal process, @code{t} for a simple process.
See (simple-process).
@end defmethod

@defmethod si:process :idle-time
Returns the time in seconds since this process last ran, or @code{nil} if it has never run.
@end defmethod

@defmethod si:process :total-run-time
Returns the amount of time this process has run, in 60ths of a second.
This includes cpu time and disk wait time.
@end defmethod

@defmethod si:process :disk-wait-time
Returns the amount of time this process has spent
waiting for disk I/O, in 60ths of a second.
@end defmethod

@defmethod si:process :cpu-time
Returns the amount of time this process has spent actually
executing instructions, in 60ths of a second.
@end defmethod

@defmethod si:process :percent-utilization
Returns the fraction of the machine's time this
process has been using recently, as a percentage
(a number between 0 and 100.0).  The value is a weighted
average giving more weight to more recent history.
@end defmethod

@defmethod si:process :reset-meters
Resets the run-time counters of the process to zero.
@end defmethod

@subsection Run and Arrest Reasons

@defmethod si:process :run-reasons
Returns the list of run reasons, which are the reasons why this process should
be active (allowed to run).
@end defmethod

@defmethod si:process :run-reason object
Adds @i{object} to the process's run reasons.  This can activate the process.
@end defmethod

@defmethod si:process :revoke-run-reason object
Removes @i{object} from the process's run reasons.  This can stop the process.
@end defmethod

@defmethod si:process :arrest-reasons
Returns the list of arrest reasons, which are the reasons why this process
should be inactive (forbidden to run).
@end defmethod

@defmethod si:process :arrest-reason object
Adds @i{object} to the process's arrest reasons.  This can stop the process.
@end defmethod

@defmethod si:process :revoke-arrest-reason object
Removes @i{object} from the process's arrest reasons.  This can activate
the process.
@end defmethod

@defmethod si:process :active-p
@defmethodx si:process :runnable-p
These two operations are the same.  @code{t} is returned if the process is
active, i.e. it can run if its wait-function allows.  @code{nil} is returned
if the process is stopped.
@end defmethod

@subsection Bashing the Process

@defmethod si:process :preset function &rest args
Sets the process's initial function to @i{function} and initial arguments
to @i{args}.  The process is then reset so that any computation occuring in it
is terminated and it begins anew by applying @i{function} to @i{args}.
A @code{:preset} operation on a stopped process
returns immediately, but does not activate the process; hence the
process will not really apply @i{function} to @i{args} until it is activated later.
@end defmethod

@defmethod si:process :reset &optional no-unwind kill
Forces the process to throw out of its present computation and apply its
initial function to its initial arguments, when it next runs.  The
throwing out is skipped if the process has no present computation (e.g.
it was just created), or if the @i{no-unwind} option so specifies.  The
possible values for @i{no-unwind} are:
@table @code
@item :unless-current
@itemx nil
Unwind unless the stack group to be unwound is the one currently
executing, or belongs to the current process.

@item :always
Unwind in all cases.  This may cause the operation to throw through its
caller instead of returning.

@item t
Never unwind.
@end table

If @i{kill} is @code{t}, the process is to be killed after unwinding it.
This is for internal use by the @code{:kill} operation only.

A @code{:reset} operation on a stopped process returns immediately, but
does not activate the process; hence the process will not really get
reset until it is activated later.
@end defmethod

@defmethod si:process :flush
Forces the process to wait forever.  A process may not @code{:flush} itself.
Flushing a process is different from stopping it, in that it is still active
and hence if it is reset or preset it will start running again.

A flushed process can be recognized because its wait-function is
@code{si:flushed-process}.
If a process belonging to a window is flushed, exposing or selecting the window
resets the process.
@end defmethod

@defmethod si:process :kill
Gets rid of the process.  It is reset, stopped,
and removed from @code{sys:all-processes}.
@end defmethod

@defmethod si:process :interrupt function &rest args
Forces the process to @code{apply} @i{function} to @i{args}.  When @i{function} returns,
the process continues the interrupted computation.  If the process is waiting,
it wakes up, calls @i{function}, then waits again when @i{function} returns.

If the process is stopped it does not @code{apply} @i{function} to @i{args} 
immediately, but will later when it is activated.  Normally the @code{:interrupt} operation
returns immediately, but if the process's stack group is in an unusual internal
state @code{:interrupt} may have to wait for it to get out of that state.
@end defmethod

@section  Process Flavors

These are the flavors of process provided by the system.  It is possible for users
to define additional flavors of their own.

.defflavor si:process
This is the standard default kind of process.
.end_defflavor

.defflavor si:simple-process
@cindex simple process
A simple process is not a process in the conventional sense.  It has no
stack group of its own; instead of having a stack group that gets
resumed when it is time for the process to run, it has a function that
gets called when it is time for the process to run.  When the
wait-function of a simple process becomes true, and the scheduler
notices it, the simple process's function is called in the scheduler's
own stack group.  Since a simple process does not have any stack group
of its own, it can't save control state in between calls; any state
that it saves must be saved in data structure.

The only advantage of simple processes over normal processes is that
they use up less system overhead, since they can be scheduled without
the cost of resuming stack-groups.  They are intended as a special,
efficient mechanism for certain purposes.  For example, packets received
from the Chaosnet are examined and distributed to the proper receiver by
a simple process that wakes up whenever there are any packets in the
input buffer.  However, they are harder to use, because you can't save
state information across scheduling.  That is, when the simple process
is ready to wait again, it must return; it can't call @code{process-wait}
and continue to do something else later.  In fact, it is an error to
call @code{process-wait} from inside a simple process.  Another drawback to
simple processes is that if the function signals an error, the scheduler
itself is broken and multiprocessing stops; this situation can be
repaired only by aborting, which blasts the process.  Also, when a
simple process is run, no other process is scheduled until it chooses to
return; so simple processes should never run for a long time without
returning.

Asking for the stack group of a simple process does not signal an error,
but returns the process's function instead.

Since a simple process cannot call @code{process-wait}, it needs some other
way to specify its wait-function.  To set the wait-function of a simple
process, use @code{si:set-process-wait} (see below).  So, when a simple
process wants to wait for a condition, it should call
@code{si:set-process-wait} to specify the condition, then return.
.end_defflavor

@defun si:set-process-wait simple-process wait-function wait-argument-list
Sets the @i{wait-function} and @i{wait-argument-list} of @i{simple-process}.
See the description of the @code{si:simple-process} flavor (above) for
more information.
@end defun

@c [si:coroutining-process not documented here because it doesn't seem of general
@c enough interest and what it does is too hard to explain.]

@section  Other Process Functions

@defun process-enable process
Activates @i{process} by revoking all its run and arrest reasons,
then giving it a run reason of @code{:enable}.
@end defun

@defun process-reset-and-enable process
Resets @i{process}, then enables it.
@end defun

@defun process-disable process
Stops @i{process} by revoking all its run reasons.  Also revokes
all its arrest reasons.
@end defun

@noindent
The remaining functions in this section are obsolete, since they simply
duplicate what can be done by sending a message.  They are documented here
because their names are in the @code{global} package.

@defun process-preset process function &rest args
Sends a @code{:preset} message.
@end defun

@defun process-reset process
Sends a @code{:reset} message.
@end defun

@defun process-name process
Gets the name of a process, like the @code{:name} operation.
@end defun

@defun process-stack-group process
Gets the current stack group of a process, like the @code{:stack-group} operation.
@end defun

@defun process-initial-stack-group process
Gets the initial stack group of a process, like the @code{:initial-stack-group} operation.
@end defun

@defun process-initial-form process
Gets the initial form of a process, like the @code{:initial-form} operation.
@end defun

@defun process-wait-function process
Gets the current wait-function of a process, like the @code{:wait-function} operation.
@end defun

@defun process-wait-argument-list p
Gets the arguments to the current wait-function of a process, like the
@code{:wait-argument-list} operation.
@end defun

@defun process-whostate p
Gets the current who-line state string of a process, like the @code{:whostate} operation.
@end defun

@chapter Errors and Debugging
@cindex error system
@cindex handling errors

The first portion of this chapter explains how programs
can handle errors, by means of condition handlers.  It also explains how
a program can signal an error if it detects something it doesn't like.

The second explains how users can handle errors, by means of an interactive debugger;
that is, it explains how to recover if you do something wrong.
A new user of the Lisp Machine, or someone who just wants to know how
to deal with errors and not how to cause them, should ignore the first
sections and skip ahead to (debugger).

	The remaining sections describe some other debugging facilities.
Anyone who is going to be writing programs for the Lisp Machine should
familiarize himself with these.

	The @i{trace} facility provides the ability to perform certain
actions at the time a function is called or at the time it returns.  The
actions may be simple typeout, or more sophisticated debugging functions.

	The @i{advise} facility is a somewhat similar facility for modifying
the behavior of a function.

	The @i{breakon} facility allows you to cause the debugger to be
entered when a certain function is called.  You can then use the debugger's
stepping commands to step to the next function call or return.

	The @i{step} facility allows the evaluation of a form to be
intercepted at every step so that the user may examine just what is happening
throughout the execution of the form.  Stepping works only on interpreted code.

	The @i{MAR} facility provides the ability to cause a trap
on any memory reference to a word (or a set of words) in memory.  If
something is getting clobbered by agents unknown, this can help track
down the source of the clobberage.

@section  Conditions
@cindex condition names
@cindex conditions
@cindex condition instances

	Programmers often want to control what action is taken by their programs
when errors or other exceptional situations occur.  Usually different situations
are handled in different ways, and in order to express what kind of handling
each situation should have, each situation must have an associated name.  In
Zetalisp, noteworthy events are represented by objects called @i{condition instances}.
When an event occurs, a condition instance is created; it is then @i{signaled}, and a
@i{handler} for that condition may be invoked.

When a condition is signaled, the system (essentially) searches
up the stack of nested function invocations looking for a handler
established to handle that condition.  The handler is a function that
gets called to deal with the condition.  The condition mechanism itself
is just a convenient way for finding an appropriate handler function
for a particular exceptional situation.

When a condition is signaled, a @i{condition instance} is created to represent the
event and hold information about it.  This information includes @i{condition
names} then classify the condition and any other data that is likely to be of
interest to condition handlers.  A condition instance is immutable once it has
been created.  Some conditions are @i{errors}, which means that the debugger is
invoked if they are signaled and not handled.

Condition instances are flavor instances.  The flavor @code{condition} is the
base flavor from which all flavors of condition are built.  Several
operations that are defined on condition instances are described below.
The flavor @code{error}, which is built on @code{condition}, is the base flavor for all kinds of
conditions which are errors. 

A @i{condition name} is a symbol then is used to identify a category of conditions.
Each condition instance possesses one or more condition names.  Each condition
handler specifies one or more condition names that it should apply to.  A
handler applies to a condition if they have any condition names in common.
This is the sole purpose of condition names: to match condition instances with
their handlers.  The meaning of every condition name signaled by the system is
described in this manual.  The condition name index is a directory for them.
Conditions that are errors possess the condition name @code{error}.

In PL/I, CLU, ADA and most other systems that provide named conditions, each
condition has only one name.  That is to say, the categories identified by
condition names are disjoint.  In Zetalisp, each condition instance can have
multiple condition names, which means that the categories identified by
condition names can overlap and be subdivided.

For example, among the condition names defined by the system are @code{condition},
@code{error}, @code{sys:arithmetic-error}, @code{sys:floating-exponent-underflow} and @code{sys:divide-by-zero}.
@code{condition} is a condition name that all condition instances possess.  @code{error}
identifies the category of conditions that are considered errors.
@code{sys:arithmetic-error} identifies the category of errors that pertain to arithmetic
operations.  @code{sys:floating-exponent-underflow} and @code{sys:divide-by-zero} are the most specific level
of categorization.  So, the condition signaled when you evaluate @code{(* 1s-30 1s-30 1s-30 1s-30)}
possesses condition names @code{sys:floating-exponent-underflow}, @code{sys:arithmetic-error}, @code{error} and
@code{condition}, while the one signaled if you evaluate @code{(// 1 0)} possesses condition
names @code{sys:divide-by-zero}, @code{sys:arithmetic-error}, @code{error} and @code{condition}.  In this
example, the categories fall into a strict hierarchy, but this does not need to be
the case.

Condition names are documented throughout the manual, with definitions like this:

.defcondition_no_index sys:divide-by-zero (@code{sys:arithmetic-error} @code{error})
The condition name @code{sys:divide-by-zero} is always accompanied by
@code{sys:arithmetic-error} and @code{error} (that is, it categorizes a subset of those categories).
The presence of @code{error} implies that all @code{sys:divide-by-zero} conditions are errors.
.end_defcondition

The condition instance also records additional information about the
event.  For example, the condition instance signaled by dividing by
zero handles the @code{:function} operation by returning the function
that did the division (it might be @code{truncate}, @code{floor},
@code{ceiling} or @code{round}, as well as @code{//}).  In general, for each
condition name there are conventions saying what additional
information is provided and what operations to use to obtain it.

The flavor of the condition instance is always one of the condition names, and so
are its component flavors (with a few exceptions; @code{si:vanilla-flavor} and some
other flavor components are omitted, since they are not useful categories for
condition handlers to specify).  In our example, the flavor of the condition is
@code{sys:arithmetic-error}, and its components include @code{error} and @code{condition}.
Condition names require new flavors only when they require significantly
different handling by the error system; you will understand in detail after
finishing this section.

@defun condition-typep condition-instance condition-name
Returns @code{t} if @i{condition-instance} possesses condition name @i{condition-name}.
@i{condition-name} can also be a combination of condition names using @code{and}, @code{or}
and @code{not}; then the condition tested for is a boolean combination of the
presence or absence of various condition names.  Example:
@lisp
(condition-typep error 'fs:file-not-found)
(condition-typep error 
   '(or fs:file-not-found fs:directory-not-found))
@end lisp
@end defun

@defun errorp object
Returns @code{t} if @i{object} is a condition instance and its flavor incorporates @code{error}.
This is normally equivalent to @code{(typep @i{object} 'error)}.  Some functions such as
@code{open} optionally return the condition instance rather than signaling it, if an error
occurs.  @code{errorp} is useful in testing the value returned.
@end defun

@defmethod condition :condition-names
Returns a list of all the condition names possesses by this condition instance.
@end defmethod

@section  Handling Conditions
@cindex condition handlers

A condition handler is a function that is associated with certain
condition names (categories of conditions).  The variable
@code{eh:condition-handlers} contains a list of the handlers that are current;
handlers are established using macros which bind this variable.  When a condition is
signaled, this list is scanned and all the handlers which apply are called,
one by one, until one of the handlers either throws or returns non-@code{nil}.

Since each new handler is pushed onto the front of @code{eh:condition-handlers}, the
innermost-established handler gets the first chance to handle the condition.
When the handler is run, @code{eh:condition-handlers} is bound so that the running
handler (and all the ones that were established farther in) are not in effect.  This
avoids the danger of infinite recursion due to an error in a handler invoking the
same handler.

One thing a handler can do is throw to a tag.  Often the @code{catch} for this
tag is right next to the place where the handler is established, but this
does not have to be so.  A simple handler that applies to all errors and just
throws to a tag is established using @code{ignore-errors}.

@defmac ignore-errors body...
An error within the execution of @i{body} causes control to return
from the @code{ignore-errors} form.  In this case, the values are
@code{nil}, @code{t}.  If there is no error inside @i{body}, the first value
is that of the last form in the @i{body} and the second is @code{nil}.

Errors whose condition instances return true for the @code{:dangerous-condition-p} operation
are not handled.  These include such things as running out of virtual memory.
@end defmac

A handler can also signal another condition.  For example, signaling @code{sys:abort}
has the effect of pretending that the user typed the @code{Abort} key.  The following
function creates a handler which signals @code{sys:abort}.

@defun si:eval-abort-trivial-errors form
Evaluates @i{form} with a condition handler for many common error conditions such as
@code{:wrong-type-argument}, @code{:unbound-variable} and @code{:unclaimed-message}.
The handler asks the user whether to allow the debugger to be entered.
If the user says `no', the handler signals the @code{sys:abort} condition.  If the user
says `yes', the handler does not handle the condition, allowing the debugger
to do so.

In some cases the handler attempts to determine whether the incorrect variable,
operation, or argument appeared in @i{form}; if it did not, the debugger is always
allowed to run.  The assumption is that @i{form} was typed in by the user, and
the intention is to distinguish trivial mistakes from program bugs.
@end defun

The handler can also ask to proceed from the condition.  This is done by
returning a non-@code{nil} value.  See the section on proceeding, (proceeding), for
more information.

The handler can also decline to handle the condition, by returning @code{nil}.
Then the next applicable handler is called, and so on until either some
handler does handle the condition or there are no more handlers.

The handler function is called in the environment where the condition
was signaled, and in the same stack group.  All special variables have the
values they had at the place where the signaling was done, and all catch
tags that were available at the point of signaling may be thrown to.

The handler receives the condition instance as its first argument.  When
establishing the handler, you can also provide additional arguments to
pass to the handler when it is called.  This allows the same function to
be used in varying circumstances.

The fundamental means of establishing a condition handler is the macro
@code{condition-bind}.

@defmac condition-bind (handlers...) body...
@defmacx condition-bind-default (handlers...) body...
A @code{condition-bind} form looks like this:
@lisp
(condition-bind ((@i{conditions} @i{handler-form} @i{additional-arg-forms}...)
                 (@i{conditions} @i{handler-form} @i{additional-arg-forms}...))
  @i{body}...)
@end lisp

The purpose is to execute @i{body} with one or more condition handlers
established.

Each list of conditions and handler-form establishes one handler.
@i{conditions} is a condition name or a list of condition names to which the
handler should apply.  It is @i{not} evaluated.  @i{handler-form} is evaluated to
produce the function that is the actual handler.  The
@i{additional-arg-forms} are evaluated, on entry to the @code{condition-bind}, to
produce additional arguments that are passed to the handler
function when it is called.  The arguments to the handler function are
the condition instance being signaled, followed by the values of any
@i{additional-arg-forms}.

@i{conditions} can be @code{nil}; then the handler applies to all conditions that
are signaled.  In this case it is up to the handler function to decide whether to
do anything.  It is important for the handler to refrain from handling
certain conditions that are used for debugging, such as @code{break} and
@code{eh:call-trap}.  The @code{:debugging-condition-p} operation on condition
instances returns non-@code{nil} for these conditions.  Certain other
conditions such as @code{sys:virtual-memory-overflow} should be handled only
with great care.  The @code{:dangerous-condition-p} operation returns non-@code{nil}
for these conditions.  Example:

@lisp
(condition-bind ((nil 'myhandler "it happened here" 45))
  (catch 'x
    ...))

(defun myhandler (condition string value)
  (unless (or (condition-typep condition 'fs:file-error)
              (send condition :dangerous-condition-p)
              (send condition :debugging-condition-p))
    (format error-output "~&~A:~%~A~%" string condition)
    (throw 'x value)))
@end lisp

@code{myhandler} declines to handle file errors, and all debugging conditions and
dangerous errors.  For all other conditions, it prints the string specified
in the condition bind and throws to the tag @code{x} the value specified there (45).

@code{condition-bind-default} is like @code{condition-bind} but establishes a @i{default} @i{handler}
instead of an ordinary handler.  Default handlers work like ordinary handlers, but
they are tried in a different order: first all the applicable ordinary handlers are
given a chance to handle the condition, and then the default handlers get their
chance.  A more flexible way of doing things like this is described under
@code{signal-condition} ((signal-condition-fun)).
@end defmac

Condition handlers that simply throw to the function that established
them are very common, so there are special constructs provided for
defining them.

@defmac condition-case (variables...) body-form clauses...
@lisp
(condition-case (@i{variable})
    @i{body-form}
  (@i{condition-names} @i{forms}...)
  (@i{condition-names} @i{forms}...)
  ...)
@end lisp
@i{body-form} is executed with a condition handler established that will
throw back to the @code{condition-case} if any of the specified condition names
is signaled.

Each list starting with some condition names is a @i{clause}, and specifies
what to do if one of those condition names is signaled.  @i{condition-names}
is either a condition name or a list of condition names; it is not
evaluated.

Once the handler per se has done the throw, the clauses are tested in
order until one is found that applies.  This is almost like a @code{selectq},
except that the signaled condition can have several condition names, so
the first clause that matches any of them gets to run.  The forms in the
clause are executed with @i{variable} bound to the condition instance that
was signaled.  The values of the last form in the clause are returned
from the @code{condition-case} form.

If none of the specified conditions is signaled during the execution of
@i{body-form} (or if other handlers, established within @i{body-form}, handle
them) then the values of @i{body-form} are returned from the
@code{condition-case} form.

@i{variable} may be omitted if it is not used.

It is also possible to have a clause starting with @code{:no-error} in place of a
condition name.  This clause is executed if @i{body-form} finishes normally.
Instead of just one @i{variable} there can be several variables; during the
execution of the @code{:no-error} clause, these are bound to the values returned
by @i{body-form}.  The values of the last form in the clause become the
values of the @code{condition-case} form.

Here is an example:
@lisp
(condition-case ()
    (print foo)
  (error (format t " <<Error in printing>>")))
@end lisp
@end defmac

@defmac condition-call (variables...) body-form clauses...
@code{condition-call} is an extension of @code{condition-case} that allows you to
give each clause an arbitrary conditional expression instead of just a list
of condition names.  It looks like this:
@lisp
(condition-call (@i{variables}...)
    @i{body-form}
  (@i{test} @i{forms}...)
  (@i{test} @i{forms}...)
  ...)
@end lisp
The difference between this and @code{condition-case} is the @i{test} in
each clause.  The clauses in a @code{condition-call} resemble the clauses of a
@code{cond} rather than those of a @code{selectq}.

When a condition is signaled, each @i{test} is executed while still within the
environment of the signaling (that is, within the actual handler function).  The
condition instance can be found in the first @i{variable}.  If any @i{test} returns
non-@code{nil}, then the handler throws to the @code{condition-call} and the corresponding
clause's @i{forms} are executed.  If every @i{test} returns @code{nil}, the condition is not
handled by this handler.

In fact, each @i{test} is computed a second time after the throw has
occurred in order to decide which clause to execute.  The code for the
@i{test} is copied in two different places, once into the handler
function to decide whether to throw, and once in a @code{cond} which follows
the catch.

The last clause can be a @code{:no-error} clause just as in @code{condition-case}.
It is executed if the body returns without error.
The values returned by the body are stored in the @i{variables}.
The values of the last form in the @code{:no-error} clause are returned by the
@code{condition-call}.

Only the first of @i{variables} is used if there is no @code{:no-error} clause.
The @i{variables} may be omitted entirely in the unlikely event that none is used.
Example:
@lisp
(condition-call (instance)
    (do-it)
  ((condition-typep instance
     '(and fs:file-error (not fs:no-more-room)))
   (compute-what-to-return)))
@end lisp
The condition name @code{fs:no-more-room} is a subcategory of
@code{fs:file-error}; therefore, this handles all file errors @i{except} for
@code{fs:no-more-room}.
@end defmac

Each of the four condition handler establishing constructs has a
conditional version that decides at run time whether to establish the
handlers.

@defmac condition-bind-if cond-form (handlers...) body...
@lisp
(condition-bind-if @i{cond-form}
                   ((@i{conditions} @i{handler-form} @i{additional-arg-forms}...)
                    (@i{conditions} @i{handler-form} @i{additional-arg-forms}...))
  @i{body}...)
@end lisp
begins by executing @i{cond-form}.  If it returns non-@code{nil}, then all proceeds
as for a regular @code{condition-bind}.  If @i{cond-form} returns @code{nil}, then the @i{body}
is still executed but without the condition handler.
@end defmac

@defmac condition-case-if cond-form (variables...) body-form clauses...
@lisp
(condition-case-if @i{cond-form} (@i{variables}...)
    @i{body-form}
  (@i{condition-names} @i{forms}...)
  (@i{condition-names} @i{forms}...)
  ...)
@end lisp
begins by executing @i{cond-form}.  If it returns non-@code{nil}, then all proceeds
as for a regular @code{condition-case}.  If @i{cond-form} returns @code{nil}, then the
@i{body-form} is still executed but without the condition handler.
@i{body-form}'s values are returned, or, if there is a @code{:no-error} clause, it is
executed and its values returned.
@end defmac

@defmac condition-call-if cond-form ([variable]) body-form clauses...
@lisp
(condition-call-if @i{cond-form} (@i{variables}...)
    @i{body-form}
  (@i{test} @i{forms}...)
  (@i{test} @i{forms}...)
  ...)
@end lisp
begins by executing @i{cond-form}.  If it returns non-@code{nil}, then everything proceeds
as for a regular @code{condition-call}.  If @i{cond-form} returns @code{nil}, then the
@i{body-form} is still executed but without the condition handler.
In that case, @i{body-form}'s values are returned, or, if there is a @code{:no-error} clause, it is
executed and its values returned.
@end defmac

@defmac condition-bind-default-if cond-form (handlers...) body...
This is used just like @code{condition-bind-if}, but establishes a default handler
instead of an ordinary handler.
@end defmac

@defvar eh:condition-handlers
This is the list of established condition handlers.  Each element looks
like this:
@lisp
(@i{condition-names} @i{function} @i{additional-arg-values}...)
@end lisp
@i{condition-names} is a condition name or a list of condition names, or @code{nil}
which means all conditions.

@i{function} is the actual handler function.

@i{additional-arg-values} are additional arguments to be passed to the
@i{function} when it is called.  @i{function}'s first argument is always the
condition instance.

Both the links of the value of @code{eh:condition-handlers} and the elements
are usually created with @code{with-stack-list}, so copy them if you want to
save them for any period of time.
@end defvar

@defvar eh:condition-default-handlers
This is the list of established default condition handlers.  The data
format is the same as that of @code{eh:condition-handlers}.
@end defvar

@section  Standard Condition Flavors

.defflavor condition
The flavor @code{condition} is the base flavor of all conditions, and provides default
definitions for all the operations described in this chapter.

@code{condition} incorporates @code{si:property-list-mixin}, which defines operations
@code{:get} and @code{:plist}.  Each property name on the property list is also an operation
name, so that sending the @code{:foo} message is equivalent to
@code{(send instance :get :foo)}.  In addition, @code{(send instance :set :foo @i{value})} is equivalent
to @code{(send instance :set :get :foo @i{value})}.

@code{condition} also provides two instance variables, @code{eh:format-string} and @code{eh:format-args}.
@code{condition}'s method for the the @code{:report} operation passes these to @code{format} to print
the error message.
.end_defflavor

.defflavor error
The flavor @code{error} makes a condition an error condition.  @code{errorp} returns @code{t} for such
conditions, and the debugger is entered if they are signaled and not otherwise
handled.
.end_defflavor

.defflavor sys:no-action-mixin
This mixin provides a definition of the proceed type @code{:no-action}.
.end_defflavor

.defflavor sys:proceed-with-value-mixin
This mixin provides a definition of the proceed type @code{:new-value}.
.end_defflavor

.defflavor ferror
This flavor is a mixture of @code{error}, @code{sys:no-action-mixin} and
@code{sys:proceed-with-value-mixin}.  It is the flavor used by default by the functions
@code{ferror} and @code{cerror}, and is often convenient for users to instantiate.
.end_defflavor

.defflavor sys:warning
This flavor is a mixture of @code{sys:no-action-mixin} and @code{condition}.
.end_defflavor

.defflavor sys:bad-array-mixin
This mixin provides a definition of the proceed type @code{:new-array}.
.end_defflavor

@section  Condition Operations

Every condition instance can be asked to print an @i{error message} which describes
the circumstances that led to the signaling of the condition.  The easiest way
to print one is to print the condition instance without escaping (@code{princ}, or
@code{format} operation @code{~A}).  This actually uses the @code{:report} operation, which
implements the printing of an error message.  When a condition instance is
printed with escaping, it uses the @code{#} syntax so that it can be read back in.
This is done using @code{si:print-readably-mixin}, (si:print-readably-mixin-flavor).

@defmethod condition :report stream
Prints on @i{stream} the condition's error message, a description of the circumstances
for which the condition instance was signaled.  The output should neither start
nor end with a carriage return.

If you are defining a new flavor of condition and wish to change the way the
error message is printed, this is the operation to redefine.  All others use this
one.
@end defmethod

@defmethod condition :report-string
Returns a string containing the text that the @code{:report} operation would
print.
@end defmethod

@noindent
Operations provided specifically for condition handlers to use:

@defmethod condition :dangerous-condition-p
Returns @code{t} if the condition instance is one of those that indicate events
that are considered extremely dangerous, such as running out of memory.
Handlers that normally handle all conditions might want to
make an exception for these.
@end defmethod

@defmethod condition :debugging-condition-p
Returns @code{t} if the condition instance is one of those that are signaled as
part of debugging, such as @code{break}, which is signaled when you type
@code{Meta-Break}.  Although these conditions normally enter the debugger,
they are not errors; this serves to prevent most condition
handlers from handling them.  But any condition handler which is
written to handle @i{all} conditions should probably make a specific
exception for these.
@end defmethod

See also the operations @code{:proceed-types} and @code{:proceed-type-p}, which have to do
with proceeding ((proceeding)).

@subsection Condition Operations for the Debugger

Some operations are intended for the debugger to use.  They are documented
because some flavors of condition redefine them so as to cause the debugger to
behave differently.  This section is of interest only to advanced users.

@defmethod condition :print-error-message stack-group brief-flag stream
This operation is used by the debugger to print a complete error message.  This
is done primarily using the @code{:report} operation.

Certain flavors of condition define a @code{:after} @code{:print-error-message} method which,
when @i{brief-flag} is @code{nil}, prints additional helpful information which is not part of
the error message per se.  Often this requires access to the stack group in
addition to the data in the condition instance.  The method can assume that if
@i{brief-flag} is @code{nil} then @i{stack-group} is not the one which is executing.

For example, the @code{:print-error-message} method of the condition signaled when you call
an undefined function checks for the case of calling a function such as @code{bind}
that is meaningful only in compiled code; if that is what happened, it searches
the stack to look for the name of the function in which the call appears.  This is
information that is not considered crucial to the error itself, and is therefore
not recorded in the condition instance.
@end defmethod

@defmethod condition :maybe-clear-input stream
This operation is used on entry to the debugger to discard input.
Certain condition flavors, used by stepping redefine this operation to do nothing,
so that input is not discarded.
@end defmethod

@defmethod condition :bug-report-recipient-system
The value returned by this operation is used to determine what address to mail
bug reports to, when the debugger @code{Control-M} command is used.
By default, it returns @code{"LISPM"}.  The value is passed to the function @code{bug}.
@end defmethod

@defmethod condition :bug-report-description stream &optional numeric-arg
This operation is used by the @code{Control-M} command to print on @i{stream} the
information that should go in the bug report.  @i{numeric-arg} is the numeric
argument, if any, that the user gave to the @code{Control-M} command.
@end defmethod

@defmethod condition :find-current-frame stack-group
Returns the stack indices of the stack frames that the debugger should operate
on.

The first value is the frame ``at which the error occurred.''  This is not the
innermost stack frame; it is outside the calls to such functions as @code{ferror} and
@code{signal-condition} which were used to signal the error.

The second value is the initial value for the debugger command loop's current
frame.

The third value is the innermost frame that the debugger should be willing to let the
user see.  By default this is the innermost active frame, but it is safe to use
an open but not active frame within it.

The fourth value, if non-@code{nil}, tells the debugger to consider the innermost frame
to be ``interesting''.  Normally, frames that are part of the interpreter (calls to
@code{si:eval1}, @code{si:apply-lambda}, @code{prog}, @code{cond}, etc.) are considered uninteresting.

This is a flavor operation so that certain flavors of condition can redefine it.
@end defmethod

@defmethod condition :debugger-command-loop stack-group &optional error-object
Enters the debugger command loop.  The initial error message and backtrace have
already been printed.  This message is sent in an error handler stack group;
@i{stack-group} is the stack group in which the condition was signaled.  @i{error-object}
is the condition object which was signaled; it defaults to the one the message is
sent to.

This operation uses @code{:or} method combination (see (method-combination)).
Some condition flavors add methods that perform some other sort of
processing or enter a different command loop.  For example, unbound variable
errors look for look-alike symbols in other packages at this point.  If the added
method returns @code{nil}, the original method that enters the usual debugger
command loop is called.
@end defmethod

@section  Signaling Conditions
@cindex signaling conditions

Signaling a condition has two steps, creating a condition instance and signaling
the instance.  There are convenience interface functions that combine the two
steps.  You can also do them separately.  If you just want to signal an error and
do not want to worry much about condition handling, the function @code{ferror} is all
you need to know.

@subsection Convenience Functions for Signaling

@defun ferror &rest make-condition-arguments
Creates a condition instance using @code{make-condition} and then signals it
with @code{signal-condition}, specifying no local proceed types, and with @code{t} as the
@i{use-debugger} argument so the debugger is always entered if the condition is not
otherwise handled.

The first argument to @code{ferror} is always a signal name (often @code{nil}).  The second
argument is usually a format string and the remaining arguments are additional
arguments for @code{format}; but this is under the control of the definition of the
signal name.  Example:
@lisp
(ferror 'math:singular-matrix
        "The matrix ~S cannot be inverted." matrix)
@end lisp
For compatibility with the Symbolics system, if the first argument to @code{ferror} is a
string, then a signal name of @code{nil} is assumed.  The arguments to @code{ferror} are passed
on to @code{make-condition} with an additional @code{nil} preceding them.

If you prefer, you can use the formatted output functions
((format:outfmt-fun)) to generate the error message.  Here is an example,
though in a simple case like this using @code{format} is easier:
@lisp
(ferror 'math:singular-matrix
  (format:outfmt
    "The matrix "
    (prin1 matrix)
    " cannot be inverted.")
  number)
@end lisp
In this case, arguments past the second one are not used for printing the error
message, but the signal name may still expect them to be present so it can put
them in the condition instance.
@end defun

@defun cerror proceed-type ignore signal-name &rest signal-name-arguments
Creates a condition instance, by passing the @i{signal-name} and
@i{signal-name-arguments} to @code{make-condition}, and then signals it.
If @i{proceed-type} is non-@code{nil} then it is provided to
@code{signal-condition} as a proceed type.  For compatibility with old
uses of @code{cerror}, if @i{proceed-type} is @code{t}, @code{:new-value} is
provided as the proceed type.  If @i{proceed-type} is @code{:yes},
@code{:no-action} is provided as the proceed type.

The second argument to @code{cerror} is not used and is present for historical
compatibility.  It may be given a new meaning in the future.

If a condition handler or the debugger decides to proceed, the second value it
returns becomes the value of @code{cerror}.

Common Lisp defines another calling sequence for this function:
@lisp
(cerror @i{continue-format-string} @i{error-format-string} @i{args}...)
@end lisp
This signals an error of flavor @code{eh:common-lisp-cerror}, which prints an
error message using @i{error-format-string} and @i{args}.  It allows one proceed type,
whose documentation is @i{continue-format-string}, and which proceeds silently,
returning @code{nil} from @code{cerror}.
@code{cerror} can tell which calling sequence has been used and behaves accordingly.
@end defun

@defun warn format-string &rest args
Prints a warning on @code{*error-output*} by passing the args to @code{format},
starting on a fresh line, and then returns.

If @code{*break-on-warnings*} is non-@code{nil}, however, @code{warn} signals a
procedable error, using the arguments to make an error message.
If the user proceeds, @code{warn} simply returns.
@end defun

@defun *break-on-warnings*
If non-@code{nil}, @code{warn} signals an error rather than just printing a message.
@end defun

@defmac check-type place type-spec [description]
@defmacx check-arg-type place type-spec [description]
@cindex argument checking
Signals a correctable error if the value of @i{place} does not
fit the type @i{type-spec}.  @i{place} is something that @code{setf} can store in.
@i{type-spec} is a type specifier, a suitable second argument to @code{typep},
and is not evaluated (see (type-specifiers)).  A simple example is:
@lisp
(check-type foo (integer 0 10))
@end lisp
This signals an error unless @code{(typep foo '(integer 0 10))}; that is, unless
@code{foo}'s value is an integer between zero and ten, inclusive.

If an error is signaled, the error message contains the name of the variable or
place where the erroneous value was found, and the erroneous value itself.  An
English description of the type of object that was wanted is computed
automatically from the type specifier for use in the error message.  For the
commonly used type specifiers this computed description is adequate.  If it is
unsatisfactory in a particular case, you can specify @i{description}, which is used
instead.  In order to make the error message grammatical, @i{description} should start
with an indefinite article.

The error signaled is of condition @code{sys:wrong-type-argument} (see
(sys:wrong-type-argument-condition)).  The proceed type @code{:argument-value} is
provided.  If a handler proceeds using this proceed type, it should specify one
additional argument; that value is stored into @i{place} with @code{setf}.  The new value is
then tested, and so on.  @code{check-type} returns when a value passes the test.

@code{check-arg-type} is an older name for this macro.
@end defmac

@defmac check-arg var-name predicate description [type-symbol]
@code{check-arg} is an obsolete variant of @code{check-type}.
@i{predicate} is either a symbol which is predicate (a function of one argument)
or a list which is a form.  If it is a predicate, it is applied to the
value of @i{var-name}, which is valid if the predicate returns non-@code{nil}.
If it is a form, it is evaluated, and the value is valid of the form
returns non-@code{nil}.  The form ought to make use of @i{var-name}, but
nothing checks this.

There is no way to compute an English description of valid values
from @i{predicate}, so a @i{description} string must always be supplied.

@i{type-symbol} is a symbol that is used by condition handlers to determine what type
of argument was expected.  If @i{predicate} is a symbol, you may omit @i{type-symbol}, and
@i{predicate} is used for that purpose as well.  The use of the @i{type-symbol} is not really
well-defined, and @code{check-type}, where a type specifier serves both purposes,
is superior to @code{check-arg} for this reason.

@lisp
@exdent Examples:

(check-arg foo stringp "a string")

(check-arg h
           (or (stringp h) (typep h 'fs:host))
           "a host name"
           fs:host)
@end lisp
@end defmac

Other functions that can be used to test for invalid values include
@code{ecase} and @code{ccase} ((ecase-fun)), which are error-checking versions of
@code{selectq}, and @code{etypecase} and @code{ctypecase} ((etypecase-fun)), error-checking
versions of @code{typecase}.

@defmac assert @i{test-form} [(@i{places}...) [@i{string} @i{args}...]]
Signals an error if @i{test-form} evaluates to @code{nil}.  The rest of the @code{assert} form is
relevant only if the error happens.

First of all, the @i{places} are forms that can be stored into with @code{setf}, and which are used
(presumably) in @i{test-form}.  The reason that the @i{places} are specified again
in the @code{assert} is so that the expanded code can arrange for the user to
be able to specify a new value to be stored into any one of them when
he proceeds from the error.  When the error is signaled, one proceed-type
is provided for each @i{place} that is given.  The condition object has flavor
@code{eh:failed-assertion}.

If the user does proceed with a new value in that fashion, the @i{test-form} is
evaluated again, and the error repeats until the @i{test-form} comes out non-@code{nil}.

The @i{string} and @i{args} are used to print the error message.  If they are omitted,
@code{"Failed assertion"} is used.  They are evaluated only when an error is signaled,
and are evaluated again each time an error is signaled.  @code{setf}'ing the @i{places} may
also involve evaluation, which happens each time the user proceeds and sets one.

@lisp
@exdent Example:
(assert (neq (car a) (car b)) ((car a) (car b))
	"The CARS of A and B are EQ: ~S and ~S" 
	(car a) (car b))
@end lisp
The @i{places} here are @code{(car a)} and @code{(car b)}.  The @i{args} happen to be the same
two forms, by not-exactly-coincidence; the current values of the @i{places} are
often useful in the error message.
@end defmac

@noindent
The remaining signaling functions are provided for compatibility only.

@defun error &rest make-condition-arguments
@code{error} exists for compatibility with Maclisp and the Symbolics version of Zetalisp.
It takes arguments in three patterns:
@lisp
(error @i{string} @i{object} [@i{interrupt}])
@end lisp
which is used in Maclisp, and
@lisp
(error @i{condition-instance})
(error @i{flavor-name} @i{init-options}...)
@end lisp
which are used by Symbolics.  (In fact, the arguments to @code{error} are simply passed
along to @code{make-condition} if they do not appear to fit the Maclisp pattern).

If the Maclisp argument pattern is not used then there is no difference between
@code{error} and @code{ferror}.
@end defun

@defun cli:error @i{format-string} &rest @i{args}
The Common Lisp version of @code{error}
signals an uncorrectable error whose error message is printed by passing
@i{format-string} and @i{args} to @code{format}.
@end defun

@defun fsignal format-string &rest format-args
This function is for Symbolics compatibility only, and is equivalent to
@lisp
(cerror :no-action nil nil @i{format-string} @i{format-args}...)
@end lisp
@end defun

@defun signal signal-name &rest remaining-make-condition-arguments
The @i{signal-name} and @i{remaining-make-condition-arguments} are passed to
@code{make-condition}, and the result is signaled with @code{signal-condition}.

If the @i{remaining-make-condition-arguments} are keyword arguments and
@code{:proceed-types} is one of the keywords, the associated value is used as the list of
proceed types.  In particular, if @i{signal-name} is actually a condition instance, so
that the remaining arguments will be ignored by @code{make-condition}, it works to
specify the proceed types this way.

If the proceed types are not specified, a list of all the proceed types that the
condition instance knows how to prompt the user about is used by default.
@end defun

@defmac errset form [flag]
Catches errors during the evaluation of @i{form}.  If an error occurs, the usual
error message is printed unless @i{flag} is @code{nil}.  Then control is thrown and the
errset-form returns @code{nil}.  @i{flag} is evaluated first and is optional, defaulting to @code{t}.  If
no error occurs, the value of the errset-form is a list of one element, the value
of @i{form}.

@code{errset} is an old, Maclisp construct, implemented much like @code{condition-case}.
Many uses of @code{errset} or @code{errset}-like constructs really ought to be checking for
more specific conditions instead.
@end defmac

@defmac catch-error form [flag]
@code{catch-error} is a variant of @code{errset}.  This construct catches errors during the
evaluation of @i{form} and returns two values.  If @i{form} returns normally, the first value is
@i{form}'s first value and the second value is @code{nil}.  If an error occurs, the usual error message
is printed unless @i{flag} is @code{nil}, and then control is thrown out of the @code{catch-error}
form, which returns two values, first @code{nil} and second a non-@code{nil} value that
indicates the occurrence of an error.  @i{flag} is evaluated before @i{form} and is optional,
defaulting to @code{t}.
@end defmac

@defvar errset
If this variable is non-@code{nil}, @code{errset} forms are not allowed to trap errors.
The debugger is entered just as if there were no @code{errset}.  This is intended mainly
for debugging.  The initial value of @code{errset} is @code{nil}.
@end defvar

@defmac err
This is for Maclisp compatibility only and should not be used.

@code{(err)} is a dumb way to cause an error.  If executed inside an @code{errset},
that @code{errset} returns @code{nil}, and no message is printed.
Otherwise an error is signaled with error message just @code{"ERROR>>"}.

@code{(err @i{form})} evaluates @i{form} and causes the containing @code{errset}
to return the result.  If executed when not inside an @code{errset}, an error
is signaled with @i{form}'s value printed as the error message.

@code{(err @i{form} @i{flag})}, which exists in Maclisp, is not supported.
@end defmac

@subsection Creating Condition Instances

You can create a condition instance quite satisfactorily with @code{make-instance} if
you know which instance variables to initialize.  For example,
@lisp
(make-instance 'ferror :condition-names '(foo)
               :format-string "~S loses."
               :format-args losing-object)
@end lisp
creates an instance of @code{ferror} just like the one that would be signaled if you do
@lisp
(ferror 'foo "~S loses." losing-object)
@end lisp

Note that the flavor name and its components' names are added in automatically
to whatever you specify for the @code{:condition-names} keyword.

@cindex signal names
Direct use of @code{make-instance} is cumbersome, however, and it is usually handier
to define a @i{signal} @i{name} with @code{defsignal} or @code{defsignal-explicit} and then create the
instance with @code{make-condition}.

A signal name is a sort of abbreviation for all the things that are always the same
for a certain sort of condition: the flavor to use, the condition names, and what
arguments are expected.  In addition, it allows you to use a positional syntax for
the arguments, which is usually more convenient than a keyword syntax in
simple use.

Here is a typical @code{defsignal}:
@lisp
(defsignal series-not-convergent sys:arithmetic-error (series)
  "Signaled by limit extractor when SERIES does not converge.")
@end lisp
This defines a signal name @code{series-not-convergent}, together with the name of the
flavor to use (@code{sys:arithmetic-error}, whose meaning is being stretched a little),
an interpretation for the arguments (@code{series}, which is explained below),
and a documentation string.  The documentation string is not used in printing
the error message; it is documentation for the signal name.  It becomes accessible
via @code{(documentation 'series-not-convergent 'signal)}.

@code{series-not-convergent} could then be used to signal an error, or just to create a
condition instance:

@lisp
(ferror 'series-not-convergent
        "The series ~S went to infinity." myseries)

(make-condition 'series-not-convergent
                "The series ~S went to infinity." myseries)
@end lisp

The list @code{(series)} in the @code{defsignal} is a list of implicit instance variable
names.  They are matched against arguments to @code{make-condition} following the
format string, and each implicit instance variable name becomes an operation
defined on the condition instance to return the corresponding argument.  (You
can imagine that @code{:gettable-instance-variables} is in effect for all the implicit
instance variables.)  In this example, sending a @code{:series} message to the condition
instance returns the value specified via @code{myseries} when the condition was
signaled.  The implicit instance variables are actually implemented using the
condition instance's property list.

Thus, @code{defsignal} spares you the need to create a new flavor merely in
order to remember a particular datum about the condition.

@defmac defsignal signal-name (flavor condition-names...) implicit-instance-variables documentation extra-init-keyword-forms
Defines @i{signal-name} to create an instance of @i{flavor} with condition names
@i{condition-names}, and implicit instance variable whose names are taken from the list
@i{implicit-instance-variables} and whose values are taken from the @code{make-condition} arguments
following the format string.

Instead of a list @code{(@i{flavor}} @i{condition-names@code{...)}} there may appear just a flavor name.
This is equivalent to using @i{signal-name} as the sole condition name.

The@i{ extra-init-keyword-forms} are forms to be evaluated to produce additional
keyword arguments to pass to @code{make-instance}.  These can be used to initialize
other instance variables that particular flavors may have.  These expressions can
refer to the @i{implicit-instance-variables}.

@i{documentation} is a string which is recorded so that it can be accessed via
the function @code{documentation}, as in @code{(documentation @i{signal-name} 'signal)}.
@end defmac

@defmac defsignal-explicit signal-name (flavor condition-names...) signal-arglist documentation init-keyword-forms...
Like @code{defsignal}, @code{defsignal-explicit} defines a signal name.  This signal name is
used the same way, but the way it goes about creating the condition instance is
different.

First of all, there is no list of implicit instance variables.  Instead, @i{signal-arglist} is
a lambda list which is matched up against all the arguments to @code{make-condition}
except for the signal-name itself.  The variables bound by the lambda list can
be used in the @i{init-keyword-forms}, which are evaluated to get arguments to pass
to @code{make-instance}.  For example:
@lisp
(defsignal-explicit mysignal-3 
           (my-error-flavor mysignal-3 my-signals-category)
           (format-string losing-object &rest format-args)
  "The third kind of thing I like to signal."
  :format-string format-string
  :format-args (cons losing-object (copylist format-args))
  :losing-object-name (send losing-object :name))
@end lisp
Since implicit instance variables are really just properties on the property list of
the instance, you can create them by using init keyword @code{:property-list}.  The
contents of the property list determines what implicit instance variables exist
and their values.
@end defmac

@defun make-condition signal-name &rest arguments
@code{make-condition} is the fundamental way that condition instances are created.
The @i{signal-name} says how to interpret the @i{arguments} and come up with a flavor
and values for its instance variables.  The handling of the @i{arguments} is
entirely determined by the @i{signal-name}.

If @i{signal-name} is a condition instance, @code{make-condition} returns it.
It is not useful to call @code{make-condition} this way explicitly, but this allows
condition instances to be passed to the convenience functions @code{error} and @code{signal}
which call @code{make-condition}.

If the @i{signal-name} was defined with @code{defsignal} or @code{defsignal-explicit}, then that
definition specifies exactly how to interpret the @i{arguments} and create the
instance.  In general, if the @i{signal-name} has an @code{eh:make-condition-function}
property (which is what @code{defsignal} defines), this property is a function to which
the @i{signal-name} and @i{arguments} are passed, and it does the work.

Alternatively, the @i{signal-name} can be the name of a flavor.  Then the @i{arguments}
are passed to @code{make-instance}, which interprets them as init keywords and values.
This mode is not really recommended and exists for compatibility with
Symbolics software.

If the @i{signal-name} has no @code{eh:make-condition-function} property and is not a
flavor name, then a trivial @code{defsignal} is assumed as a default.  It looks like this:
@lisp
(defsignal @i{signal-name} ferror ())
@end lisp
So the value is an instance of @code{ferror}, with the @i{signal-name} as a condition name,
and the @i{arguments} are interpreted as a format string and args for it.

The @i{signal-name} @code{nil} actually has a definition of this form.  @code{nil} is frequently used
as a signal name in the function @code{ferror} when there is no desire to use any
condition name in particular.
@end defun

@subsection Signaling a Condition Instance

Once you have a condition instance, you are ready to invoke the condition
handling mechanism by signaling it.  A condition instance can be signaled any number
of times, in any stack groups.

@defun signal-condition condition-instance &optional proceed-types invoke-debugger ucode-error-status inhibit-resume-handlers
Invoke the condition handling mechanism on @i{condition-instance}.
The list of @i{proceed-types} says which proceed types (among those conventionally
defined for the type of condition you have signaled) you are prepared to
implement, should a condition handler return one (see ``proceeding'').
These are in addition to any proceed types implemented nonlocally by
@code{condition-resume} forms.

@i{ucode-error-status} is used for internal purposes in signaling errors detected by
the microcode.
@end defun

@code{signal-condition} tries various possible handlers for the
condition.  First @code{eh:condition-handlers} is scanned for handlers
that are applicable (according to the condition names they specify) to
this condition instance.  After this list is exhausted,
@code{eh:condition-default-handlers} is scanned the same way.  Each
handler that is tried can terminate the act of signaling by throwing
out of @code{signal-condition}, or it can specify a way to proceed from
the signal.  The handler can also return @code{nil} to decline to handle the condition;
then the next possible handler is offered a chance.

If all handlers decline to handle the condition and
@i{invoke-debugger} is non-@code{nil}, the debugger is the handler of
last resort.  With the debugger, the user can ask to throw or to
proceed.  The default value of @i{invoke-debugger} is non-@code{nil} if
the @i{condition-instance} is an error.

If all handlers decline to act and @i{invoke-debugger} is @code{nil},
@code{signal-condition} proceeds using the first proceed type on the list
of available ones, provided it is a nonlocal proceed type.  If it is a
local proceed type, or if there are no proceed types,
@code{signal-condition} just returns @code{nil}.  (It would be slightly
simpler to proceed using the first proceed type whether it is local or
not.  But in the case of a local proceed type, this would just mean
returning the proceed type instead of @code{nil}.  It is considered
slightly more useful to return @code{nil}, allowing the signaler to
distinguish the case of a condition not handled.  The signaler knows
which proceed types it specified, and can if it wishes consider @code{nil} as
equivalent to the first of them.)

Otherwise, by this stage, a proceed type has been chosen from the available list.
If the proceed type was among those specified by the caller of @code{signal-condition},
then proceeding consists simply of returning to that caller.  The chosen proceed
type is the first value, and arguments (returned by the handler along with the
proceed type) may follow it.  If the proceed type was implemented nonlocally
with @code{condition-resume} (see (condition-resume-fun)), then the associated
proceed handler function on @code{eh:condition-resume-handlers} is called.

If @i{inhibit-resume-handlers} is non-@code{nil}, resume handlers are not invoked.  If a
handler returns a nonlocal proceed type, @code{signal-condition} just returns to its caller
as if the proceed type were local.  If the condition is not handled,
@code{signal-condition} returns @code{nil}.

The purpose of @code{condition-bind-default} is so that you can define a
handler that is allowed to handle a signal only if none of the callers' handlers handle it.
A more flexible technique for doing this sort of thing is to make an ordinary
handler signal the same condition instance recursively by calling
@code{signal-condition}, like this:
@lisp
(multiple-value-list 
  (signal-condition @i{condition-instance}
                    eh:condition-proceed-types nil nil t))
@end lisp
This passes along the same list of proceed types specified by the original
signaler, prevents the debugger from being called, and prevents resume handlers
from being run.  If the first value @code{signal-condition} returns is non-@code{nil}, one of
the outer handlers has handled the condition; your handler's simplest option is to
return those same values so that the other handler has its way (but it could
also examine them and return modified values).  Otherwise, you go on to handle
the condition in your default manner.

@defvar eh:trace-conditions
This variable may be set to a list of condition names to be
@i{traced}.  Whenever a condition possessing a traced condition name
is signaled, an error is signaled to report the fact.  (Tracing of
conditions is turned off while this error is signaled and handled).
Proceeding with proceed type @code{:no-action} causes the signaling of
the original condition to continue.

If @code{eh:trace-conditions} is @code{t}, all conditions are traced.
@end defvar

@section  Proceeding
@cindex proceed types

Both condition handlers and the user (through the debugger) have the
option of proceeding certain conditions.

Each condition name can define, as a convention, certain @i{proceed types}, which are
keywords that signify a certain conceptual way to proceed.  For example,
condition name @code{sys:wrong-type-argument} defines the proceed type
@code{:argument-value} which means, ``Here is a new value to use as the argument.''

Each signaler may or may not implement all the proceed types which are
meaningful in general for the condition names being signaled.  For example, it is
futile to proceed from a @code{sys:wrong-type-argument} error with @code{:argument-value}
unless the signaler knows how to take the associated value and store it into the
argument, or do something else that fits the conceptual specifications of
@code{:argument-value}.  For some signalers, it may not make sense to do this at all.
Therefore, one of the arguments to @code{signal-condition} is a list of the proceed
types that this particular signaler knows how to handle.

In addition to the proceed types specified by the individual signaler, other
proceed types can be provided nonlocally; they are implemented by a @i{resume
handler} which is in effect through a dynamic scope.  See below,
(nonlocal-proceed).

A condition handler can use the operations @code{:proceed-types} and @code{:proceed-type-p}
on the condition instance to find out which proceed types are available.  It can
request to proceed by returning one of the available proceed types as a value.
This value is returned from @code{signal-condition}, and the condition's signaler can
take action as appropriate.

If the handler returns more than one value, the remaining values are
considered @i{arguments} of the proceed type.  The meaning of the
arguments to a proceed type, and what sort of arguments are expected,
are part of the conventions associated with the condition name that
gives the proceed type its meaning.  For example, the @code{:argument-value}
proceed type for @code{sys:wrong-type-argument} errors conventionally takes
one argument, which is the new value to use.  All the values returned by
the handler are returned by @code{signal-condition} to the signaler.

Here is an example of a condition handler that proceeds from
@code{sys:wrong-type-argument} errors.  It makes any atom effectively equivalent to
@code{nil} when used in @code{car} or any other function that expects a list.  The handler uses
the @code{:description} operation, which on @code{sys:wrong-type-argument} condition
instances returns a keyword describing the data type that was desired.
@lisp
(condition-bind
    ((sys:wrong-type-argument
	 #'(lambda (condition)
	       (if (eq (send condition :description) 'cons)
		   (values :argument-value nil)))))
@i{  body}...)
@end lisp
@noindent
Here the argument to the @code{:argument-value} proceed type is @code{nil}.

@defmethod condition :proceed-types
Returns a list of the proceed types available for this condition instance.
This operation should be used only within the signaling of the condition
instance, as it refers to the special variable in which @code{signal-condition}
stores its second argument.
@end defmethod

@defmethod condition :proceed-type-p proceed-type
@code{t} if @i{proceed-type} is one of the proceed types available for this condition instance.
This operation should be used only within the signaling of the condition
instance, as it refers to the special variable in which @code{signal-condition}
stores its second argument.
@end defmethod

@subsection Proceeding and the Debugger

If the condition invokes the debugger, then the user has the
opportunity to proceed.  When the
debugger is entered, the available proceed types are assigned
command characters starting with @code{Super-A}.  Each character becomes a
command to proceed using the corresponding proceed type.

Three additional facilities are required to make it convenient for the
user to proceed using the debugger.  Each is provided by methods
defined on condition flavors.  When you define a new condition flavor,
you must provide methods to implement these facilities.
@table @strong
@item Documentation:
It must be possible to tell the user what each proceed type is @i{for}.
@item Prompting for arguments:
The user must be asked for the arguments for the proceed type.
Each proceed type may have different arguments to ask for.
@item Not always the same proceed types:
Usually the user can choose among the same set of proceed types that a
handler can, but sometimes it is useful to provide the user with a
few extra ones, or to suppress some of them for him.
@end table

These three facilities are provided by methods defined on condition
flavors.  Each proceed type that is provided by signalers should be
accompanied by suitable methods.  This means that you must normally
define a new flavor if you wish to use a new proceed type.

The @code{:document-proceed-type} operation is supposed to print
documentation of what a proceed type is for.  For example, when sent to
a condition instance describing an unbound variable error, if the
proceed type specified is @code{:new-value}, the text printed is something
like ``Proceed, reading a value to use instead.''

@defmethod condition :document-proceed-type proceed-type stream
Prints on @i{stream} a description of the purpose of proceed type @i{proceed-type}.  This
operation uses @code{:case} method combination (see (method-combination)), to
make it convenient to define the way to document an individual proceed type.
The string printed should start with an imperative verb form, capitalized,
and end with a period.  Example:

This example is an @code{:or} method so that it can consider any proceed type.
If it returns non-@code{nil}, the system considers that it has handled the proceed type
and no other methods get a chance.  @code{eh:places} is an instance variable of
the flavor @code{sys:failed-assertion}; its values are the proceed types this method
understands.

@lisp
(defmethod (sys:failed-assertion :or :document-proceed-type)
	   (proceed-type stream ignore)
  (when (memq proceed-type eh:places)
    (format stream
            "Try again, setting ~S.~
	     You type an expression for it."
            proceed-type)
    t))
@end lisp

As a last resort, if the condition instance has a @code{:case} method for
@code{:proceed-asking-user} with @i{proceed-type} as the suboperation, and this
method has a documentation string, it is printed.  This is in fact the
usual way that a proceed type is documented.
@end defmethod

The @code{:proceed-asking-user} operation is supposed to ask for suitable
arguments to pass with the proceed type.  Sending @code{:proceed-asking-user}
to an instance of @code{sys:unbound-variable} with argument @code{:new-value} would
read and evaluate one expression, prompting appropriately.

@defmethod condition :proceed-asking-user proceed-type continuation read-object-fn
The method for @code{:proceed-asking-user} embodies the knowledge of how to
prompt for and read the additional arguments that go with @i{proceed-type}.

@code{:case} method combination is used (see (method-combination)), making it
possible to define the handling of each proceed type individually in a separate
function.  The documentation string of the @code{:case} method for a proceed type is
also used as the default for @code{:document-proceed-type} on that proceed type.

The argument @i{continuation} is an internal function of the debugger which actually
proceeds from the signaled condition if the @code{:proceed-asking-user} method calls
it.  This is the only way to cause proceeding actually to happen.  Call @i{continuation} with
@code{funcall}, giving a proceed type and suitable arguments.  The proceed type passed
to @i{continuation} need not be the same as the one given to @code{:proceed-asking-user}; it should
be one of the proceed types available for handlers to use.

Alternatively, the @code{:prompt-and-read} method can return without calling @i{continuation}; then
the debugger continues to read commands.  The options which the
@code{fs:no-more-room} condition offers in the debugger, to run Dired or expunge a
directory, work this way.

The argument @i{read-object-fn} is another internal function of the debugger whose
purpose is to read arguments from the user or request confirmation.  If you wish
to do those things, you must @code{funcall} @i{read-object-function} to do it.  Use the calling
sequence documented for the function @code{prompt-and-read} (see
(prompt-and-read-fun)).  (The @i{read-object-fn} may or may not actually use
@code{prompt-and-read}.)
@end defmethod

Here is how @code{sys:proceed-with-value-mixin} provides for the proceed type
@code{:new-value}.  Note the documentation string, which is automatically
use by @code{:document-proceed-type} since no @code{:case} method for that operation
is provided.
@lisp
(defmethod (proceed-with-value-mixin 
		 :case :proceed-asking-user :new-value)
	   (continuation read-object-function)
  "Return a value; the value of an expression you type."
  (funcall continuation :new-value
	   (funcall read-object-function
		    :eval-read
		    "~&Form whose value to use instead: ")))
@end lisp

The @code{:user-proceed-types} operation is given the list of proceed types
actually available and is supposed to return the list of proceed types to
offer to the user.  By default, this operation returns its argument: all
proceed types are available to the user through the debugger.

For example, the condition name @code{sys:unbound-variable} conventionally
defines the proceed types @code{:new-value} and @code{:no-action}.  The first
specifies a new value; the second attempts to use the variable's current
value and gets another error if the variable is still unbound.  These are
clean operations for handlers to use.  But it is more convenient for the
user to be offered only one choice, which will use the variable's new
value if it is bound now, but otherwise ask for a new value.  This is
implemented with a @code{:user-proceed-types} method that replaces the two
proceed types with a single one.

Or, you might wish to offer the user two different proceed types
that differ only in how they ask the user for additional information.
For handlers, there would be only one proceed type.

Finally, there may be proceed types intended only for the debugger
which do not actually proceed; these should be inserted into the list
by the @code{:user-proceed-types} method.

@defmethod condition :user-proceed-types proceed-types
Assuming that @i{proceed-types} is the list of proceed types available for
condition handlers to return, this operation returns the list of
proceed types that the debugger should offer to the user.

Only the proceed types offered to the user need to be handled
by @code{:document-proceed-type} and @code{:proceed-asking-user}.

The flavor @code{condition} itself defines this to return its argument.
Other condition flavors may redefine this to filter the argument
in some appropriate fashion.

@code{:pass-on} method combination is used (see (method-combination)), so
that if multiple mixins define methods for @code{:user-proceed-types}, each method
gets a chance to add or remove proceed types.  The methods should not
actually modify the argument, but should cons up a new list in which certain
keywords are added or removed according to the other keywords that are there.

Elements should be removed only if they are specifically recognized.
This is to say, the method should make sure that any unfamiliar elements
present in the argument are also present in the value.  Arranging to omit
certain specific proceed types is legitimate; returning only
the intersection with a constant list is not legitimate.
@end defmethod

Here is an example of nontrivial use of @code{:user-proceed-types}:
@lisp
(defflavor my-error () (error))

(defmethod (my-error :user-proceed-types) (proceed-types)
  (if (memq :foo proceed-types)
      (cons :foo-two-args proceed-types)
    proceed-types))

(defmethod (my-error :case :proceed-asking-user :foo) 
	       (cont read-object-fn)
  "Proceeds, reading a value to foo with."
  (funcall cont :foo
	   (funcall read-object-fn :eval-read
		    "Value to foo with: ")))

(defmethod (my-error :case :proceed-asking-user :foo-two-args)
	       (cont read-object-fn)
  "Proceeds, reading two values to foo with."
  (funcall cont :foo
	   (funcall read-object-fn :eval-read
		    "Value to foo with: ")
	   (funcall read-object-fn :eval-read
		    "Value to foo some more with: ")))
@end lisp

In this example, if the signaler provides the proceed type @code{:foo}, then it is
described for the user as ``proceeds, reading a value to foo with''; and if
the user specifies that proceed type, he is asked for a single value,
which is used as the argument when proceeding.  In addition, the
user is offered the proceed type @code{:foo-two-args}, which has its own
documentation and which reads two values.  But for condition handlers
there is really only one proceed type, @code{:foo}.  @code{:foo-two-args} is just an
alternate interface for the user to proceed type @code{:foo}, and this is why the
@code{:user-proceed-types} method offers @code{:foo-two-args} only if the signaler
is willing to accept @code{:foo}.

@subsection How Signalers Provide Proceed Types

Each condition name defines a conceptual meaning for certain
proceed types, but this does not mean that all of those proceed types
may be used every time the condition is signaled.  The signaler must
specifically implement the proceed types in order to make them do what
they are conventionally supposed to do.  For some signalers it may be
difficult to do, or may not even make sense.  For example, it is no use
having a proceed type @code{:store-new-value} if the signaler does not have a
suitable place to store, permanently, the argument the handler supplies.

Therefore, we require each signaler to specify just which proceed types
it implements.  Unless the signaler explicitly specifies proceed types
one way or another, no proceed types are allowed (except for nonlocal ones,
described in the following section).

One way to specify the proceed types allowed is to call @code{signal-condition} and
pass the list of proceed types as the second argument.

Another way that is less general but more convenient is
@code{signal-proceed-case}.

@defmac signal-proceed-case ((variables...) make-condition-arguments...) clauses...
Signals a condition, providing proceed types and code to implement them.  Each
clause specifies a proceed type to provide, and also contains code to be run if a
handler should proceed with that proceed type.
@lisp
(signal-proceed-case ((@i{argument}-@i{vars...})
                     @i{signal-name} @i{signal-name-arguments}...)
  (@i{proceed-type} @i{forms}...)
  (@i{proceed-type} @i{forms}...)
  ...)
@end lisp

A condition-object is created with @code{make-condition} using the
@i{signal-name} and @i{signal-name-arguments}; then it is signaled giving a list
of the proceed types from all the clauses as the list of proceed types
allowed.

The variables @i{argument-vars} are bound to the values
returned by @code{signal-condition}, except for the first value, which is tested
against the @i{proceed-type} from each clause, using a @code{selectq}.  The clause that
matches is executed.
@end defmac

@lisp
@exdent Example:
(defsignal my-wrong-type-arg 
           (eh:wrong-type-argument-error sys:wrong-type-argument)
  (old-value arg-name description)
  "Wrong type argument from my own code.")

(signal-proceed-case
	 ((newarg)
	  'my-wrong-type-arg
	  "The argument ~A was ~S, which is not a cons."
	  'foo foo 'cons)
  (:argument-value (car newarg)))
@end lisp
@noindent
The signal name @code{my-wrong-type-arg} creates errors with condition name
@code{sys:wrong-type-argument}.  The @code{signal-proceed-case} shown signals such an
error, and handles the proceed type @code{:argument-value}.  If a handler proceeds
using that proceed type, the handler's value is put in @code{newarg}, and then its car is
returned from the @code{signal-proceed-case}.

@subsection Nonlocal Proceed Types
@cindex resume handlers
@cindex nonlocal proceed types

When the caller of @code{signal-condition} specifies proceed types, these are called
@i{local proceed types}.  They are implemented at the point of signaling.  There are
also @i{nonlocal proceed types}, which are in effect for all conditions (with appropriate
condition names) signaled during the execution of the body of the establishing
macro.  We say that the macro establishes a @i{resume handler} for the proceed type.

The most general construct for establishing a resume handler is @code{condition-resume}.
For example, in
@lisp
(condition-resume
    '(fs:file-error :retry-open t
		    ("Proceeds, opening the file again.")
		    (lambda (ignore) (throw 'tag nil)))
  (do-forever
    (catch 'tag (return (open pathname)))))
@end lisp
the proceed type @code{:retry-open} is available for all @code{fs:file-error} conditions signaled
within the call to @code{open}.

@defmac condition-resume handler-form &body body
@defmacx condition-resume-if cond-form handler-form &body body
Both execute @i{body} with a resume handler in effect for a nonlocal proceed type according to
the value of @i{handler-form}.  For @code{condition-resume-if}, the resume handler is in
effect only if @i{cond-form}'s value is non-@code{nil}.

@lisp
@exdent The value of the @i{handler-form} should be a list with at least five elements:
(@i{condition-names} @i{proceed-type} @i{predicate} @i{format-string-and-args} 
 @i{handler-function} @i{additional-args}...)
@end lisp

@i{condition-names} is a condition name or a list of them.  The resume handler
applies to these conditions only.

@i{proceed-type} is the proceed type implemented by this resume handler.

@i{predicate} is either @code{t} or a function that is applied to a condition instance and
determines whether the resume handler is in effect for that condition instance.

@i{format-string-and-args} is a list of a string and additional arguments that can be
passed to @code{format} to print a description of what this proceed type is for.
These are needed only for anonymous proceed types.

@i{handler-function} is the function called to do the work of proceeding, once this
proceed type has been returned by a condition handler or the debugger.
@end defmac

@code{catch-error-restart-explicit-if} makes it easy to establish a particular
simple kind of resume handler.

@defmac catch-error-restart-explicit-if cond-form (condition-names proceed-type format-string format-args...) body...
Executes @i{body} with (if @i{cond-form} produces a non-@code{nil} value) a resume handler for
proceed type @i{proceed-type} and condition(s) @i{condition-names}.  @i{condition-names}
should be a symbol or a list of symbols; it is not evaluated.  @i{proceed-type} should be
a symbol.

If proceeding is done using this resume handler, control returns from the
@code{catch-error-restart-explicit-if} form.  The first value is @code{nil} and the second is
non-@code{nil}.

@i{format-string} and the @i{format-args}, all of which are evaluated, are used by the
@code{:document-proceed-type} operation to describe the proceed type, if it is
anonymous.
@end defmac

For condition handlers there is no distinction between local and nonlocal
proceed types.  They are both included in the list of available proceed types
returned by the @code{:proceed-types} operation (all the local proceed types come
first), and the condition handler selects one by returning the proceed type and
any conventionally associated arguments.  The debugger's @code{:user-proceed-types},
@code{:document-proceed-type} and @code{:proceed-asking-user} operations are also make
no distinction.

The difference comes after the handler or the debugger returns
to @code{signal-condition}.  If the proceed type is a local one (one of those in the
second argument to @code{signal-condition}), @code{signal-condition} simply returns.
If the proceed type is not among those the caller handles, @code{signal-condition} looks for
a resume handler
associated with the proceed type, and calls its handler function.  The arguments to the handler
function are the condition instance, the @i{additional-args} specified in the resume
handler, and any arguments returned by the condition handler in addition to
the proceed type.  The handler function is supposed to do a throw.  If it returns
to @code{signal-condition}, an error is signaled.

You are allowed to use ``anonymous'' nonlocal proceed types, which have no
conventional meaning and are not specially known to the
@code{:document-proceed-type} and @code{:proceed-asking-user} operations.  The anonymous
proceed type may be any Lisp object.  The default definition of
@code{:proceed-asking-user} handles an anonymous proceed type by simply calling the
continuation passed to it, reading no arguments.  The default definition of
@code{:document-proceed-type} handles anonymous proceed types by passing @code{format}
the @i{format-string-and-args} list found in the resume handler (this is what that list
is for).

Anonymous proceed types are often lists.  Such proceed types are usually made by some variant
of @code{error-restart}, and they are treated a little bit specially.  For one
thing, they are all put at the end of the list returned by the @code{:proceed-types}
operation.  For another, the debugger command @code{Control-C} or @code{Resume} never uses
a proceed type which is a list.  If no atomic proceed type is available, @code{Resume} or
@code{Control-C} is not allowed.

@defmac error-restart (condition-names format-string format-args...) body...
@defmacx error-restart-loop
@defmacx catch-error-restart
@defmacx catch-error-restart-if cond-form (condition-names format-string format-args...) body...
All execute body with an anonymous resume handler for @i{condition-names}.
The proceed type for this resume handler is a list, so the @code{Resume} key will not use it.
@i{condition-names} is either a single condition name or a list of them, or @code{nil}
meaning all conditions; it is not evaluated.

@i{format-string} and the @i{format-args}, all of which are evaluated, are used by the
@code{:document-proceed-type} operation to describe the anonymous proceed type.

If the resume handler made by @code{error-restart} is invoked by proceeding from a
signal, the automatically generated resume handler function does a throw back to
the @code{error-restart} and the body is executed again from the beginning.  If body
returns, the values of the last form in it are returned from the @code{error-restart}
form.

@code{error-restart-loop} is like @code{error-restart} except that it loops to the beginning of
body even if body completes normally.  It is like enclosing an @code{error-restart} in an
iteration.

@code{catch-error-restart} is like @code{error-restart} except that it never loops back to the
beginning.  If the anonymous proceed type is used for proceeding, the
@code{catch-error-restart} form returns with @code{nil} as the first value and a non-@code{nil} second
value.

@code{catch-error-restart-if} is like @code{catch-error-restart} except that the resume
handler is only in effect if the value of the @i{cond-form} is non-@code{nil}.

All of these variants of @code{error-restart} can be written in terms of
@code{condition-resume-if}.
@end defmac

These forms are typically used by any sort of command loop, so that aborting
within the command loop returns to it and reads another command.
@code{error-restart-loop} is often right for simple command loops.  @code{catch-error-restart}
is useful when aborting should terminate execution rather than retry, or with an
explicit conditional to test whether a throw was done.

@code{error-restart} forms often specify @code{(error sys:abort)} as the @i{condition-names}.
The presence of @code{error} causes them to be listed (and assigned command
characters) by the debugger, for all errors, and the presence of @code{sys:abort} causes
the @code{Abort} key to use them.  If you would like a procede type to be offered as an option
by the debugger, but do not want the @code{Abort} key to use it, specify just @code{error}.

@defun eh:invoke-resume-handler condition-instance proceed-type &rest args
Invokes the innermost applicable resume handler for @i{proceed-type}.
Applicability of a resume handler is determined by matching its condition names
against those possessed by @i{condition-instance} and by applying its predicate, if not
@code{t}, to @i{condition-instance}.

If @i{proceed-type} is @code{nil}, the innermost applicable resume handler is invoked
regardless of its proceed type.  However, in this case, the scan stops if @code{t} is
encountered as an element of @code{eh:condition-resume-handlers}.
@end defun

@defvar eh:condition-resume-handlers
The current list of resume handlers for nonlocal proceed types.
@code{condition-resume} works by binding this variable.  Elements are usually lists
that have the format described above under @code{condition-resume}.  The symbol @code{t}
is also meaningful as an element of this list.  It terminates the scan for a resume
handler when it is made by @code{signal-condition} for a condition that was not
handled.  @code{t} is pushed onto the list by break loops and the debugger to shield the
evaluation of your type-in from automatic invocation of resume handlers
established outside the break loop or the error.

The links of this list, and its elements, are often created using @code{with-stack-list}.
so be careful if you try to save the value outside the context in which you
examine it.
@end defvar

.defcondition sys:abort (@code{condition})
This condition is signaled by the @code{Abort} key; it is how that key is implemented.
Most command loops use some version of @code{error-restart} to set up a resume
handler for @code{sys:abort} so that it will return to the innermost command loop if (as
is usually the case) no handler handles it.  These resume handlers usually apply
to @code{error} as well as @code{sys:abort}, so that the debugger will offer a specific command
to return to the command loop even if it is not the innermost one.
.end_defcondition

@section The Debugger
@cindex debugger

	When an error condition is signaled and no handlers decide to
handle the error, an interactive debugger is entered to allow the user to
look around and see what went wrong, and to help him continue the program
or abort it.  This section describes how to use the debugger.

@subsection Entering the Debugger

	There are two kinds of errors; those generated by the Lisp Machine's
microcode, and those generated by Lisp programs (by using @code{ferror} or
related functions).  When there
is a microcode error, the debugger prints out a message such as the following:

@lisp
>>TRAP 5543 (TRANS-TRAP)
The symbol FOOBAR is unbound.
While in the function LOSE-XCT  LOSE-COMMAND-LOOP  LOSE
@end lisp

	The first line of this error message indicates entry to
the debugger and contains some mysterious internal microcode information:
the micro program address, the microcode trap name and parameters, and a microcode backtrace.
Users can ignore this line in most cases.  The second line contains a description
of the error in English.  The third line indicates where the error
happened by printing a very abbreviated ``backtrace'' of the stack (see
below); in the example, it is saying that the error was signaled inside the
function @code{lose-xct}, which was called by @code{lose-command-loop}.

	Here is an example of an error from Lisp code:
@lisp
>>ERROR: The argument X was 1, which is not a symbol,
While in the function FOO  SI:EVAL1  SI:LISP-TOP-LEVEL1
@end lisp

	Here the first line contains the English description of the
error message, and the second line contains the abbreviated backtrace.
@code{foo} signaled the error by calling @code{ferror}; however, @code{ferror}
is censored out of the backtrace.

	After the debugger's initial message, it prints the function that
got the error and its arguments.  Then it prints a list of commands you
can use to proceed from the error, or to abort to various command loops.  The
possibilities depend on the kind of error and where it happened, so the
list is different each time; that is why the debugger prints it.  The
commands in the list all start with @code{Super-A}, @code{Super-B} and continue as far
as is necessary.

@defvar eh:*inhibit-debugger-proceed-prompt*
If this is non-@code{nil}, the list of @code{Super} commands is not printed
when the debugger is entered.  Type @code{Help P} to see the list.
@end defvar

The debugger normally uses the stream @code{*debug-io*} for all its input and output
(see (debug-io-var)).  By default it is a synonym for @code{*terminal-io*}.
The value of this variable in the stack group in which the error was
signaled is the one that counts.

@defvar eh:*debug-io-override*
If this is non-@code{nil}, it is used by the debugger instead of the value
of @code{*debug-io*}.  The value in the stack group where the error was signaled
is the one that counts.
@end defvar

	The debugger can be manually entered either by causing an error
(e.g. by typing a ridiculous symbol name such as @code{ahsdgf} at the Lisp
read-eval-print loop) or by typing the @code{Break} key with the @code{Meta} shift
held down while the program is reading from the terminal.  Typing the @code{Break}
key with both @code{Control} and @code{Meta} held down forces the program
into the debugger immediately, even if it is running.  If the @code{Break}
key is typed without @code{Meta}, it puts you into a read-eval-print loop
using the @code{break} function (see (break-fun)) rather than into the debugger.

@defun eh &optional process
Causes @i{process} to enter the debugger, and directs the debugger to
read its commands from the ambient value of @code{*terminal-io*}, current
when you call @code{eh}, rather than @i{process}'s own value of
@code{*terminal-io*} which is what would be used if @i{process} got an error
in the usual way.  The process in which you invoked @code{eh} waits while
you are in the debugger, so there is no ambiguity about which process will
handle your keyboard input.

If @i{process} had already signaled an error and was waiting for
exposure of a window, then it enters the debugger to handle that error.
Otherwise, the @code{break} condition is signaled in it (just like what
@code{Control-Meta-Break} does) to force it into the debugger.

The @code{Resume} command makes @i{process} resume execution.  You can also
use other debugger commands such as @code{Abort}, @code{Control-R}, @code{Control-Meta-R}
and @code{Control-T} to start it up again.  Exiting the debugger in any way
causes @code{eh} to return in its process.

@i{process} can also be a window, or any flavor instance which understands
the @code{:process} operation and returns a process.

If @i{process} is not a process but a stack group, the current state of
the stack group is examined.  In this case, the debugger runs in
``examine-only'' mode, and executes in the process in which you invoked
@code{eh}.  You cannot resume execution of the debugged stack group, but
@code{Resume} exits the debugger.  It is your responsibility to ensure that
no one tries to execute in the stack group being debugged while the
debugger is looking at it.

If @i{process} is @code{nil}, @code{eh} finds all the processes waiting to enter
the debugger and asks you which one to use.
@end defun

@subsection How to Use the Debugger

	Once inside the debugger, the user may give a wide variety
of commands.  This section describes how to give the commands, then
explains them in approximate order of usefulness.  A summary is provided
at the end of the listing.

	When the debugger is waiting for a command, it prompts
with an arrow:

@lisp
7 *
@end lisp

If the error took place in the evaluation of an expression that you
typed at the debugger, you are in a second level (or deeper) error.
The number of arrows in the prompt indicates the depth.

The debugger also warns you about certain unusual circumstances that may
cause paradoxical results.  For example, if @code{default-cons-area} is
anything except @code{working-storage-area}, a message to that effect is
printed.  If @code{*read-base*} and @code{*print-base*} are not the same, a
message is printed.

At this point, you may type either a Lisp expression or a
command; a @code{Control} or @code{Meta} character is interpreted as a command,
whereas most normal characters are interpreted as the first character of
an expression.  If you type the @code{Help} key or the @code{?} key, you can
get some introductory help with the debugger.

If you type a Lisp expression, it is interpreted as a Lisp form
and evaluated in the context of the current frame.
That is, all dynamic bindings used for the evaluation are those
in effect in the current frame, with certain
exceptions explained below.  The results of the evaluation are
printed, and the debugger prompts again with an arrow.  If, during
the typing of the form, you change your mind and want to get back to the
debugger's command level, type the @code{Abort} key or a @code{Control-G}; the debugger responds
with an arrow prompt.  In fact, at any time that input is expected from
you, while you are in the debugger, you may type @code{Abort} or @code{Control-G} to cancel
any debugger command that is in progress and get back to command level.
@code{Control-G} is useful because it can never exit from the debugger
as @code{Abort} can.

This @code{read-eval-print} loop maintains the values of @code{+}, @code{*}, and
@code{-} almost like the Lisp listen loop.  The difference is that some
single-character debugger commands such as @code{C-M-A} also set @code{*} and
@code{+} in their own way.

If an error occurs in the evaluation of the Lisp expression you type,
you may enter a second invocation of the debugger, looking at the new
error.  The prompt in this event is `7*' to make it clear which
level of error you are examining.  You can abort the computation and get
back to the first debugger level by typing the @code{Abort} key (see
below).

Various debugger commands ask for Lisp objects, such as an object to
return or the name of a catch-tag.  You must type a form to be
evaluated; its value is the object that is actually used.  This provides
greater generality, since there are objects to which you might want to
refer that cannot be typed in (such as arrays).  If the form you type is
non-trivial (not just a constant form), the debugger shows you the
result of the evaluation and asks for confirmation before proceeding.
If you answer negatively, or if you abort, the command is canceled and the debugger
returns to command level.  Once again, the special bindings in effect for
evaluation of the form are those of the current frame you have selected.

The @code{Meta-S} and @code{Control-Meta-S} commands allow you to look at the
bindings in effect at the current frame.  A few variables are rebound by
the debugger itself whenever a user-provided form is evaluated, so you
you must use @code{Meta-S} to find the values they actually had in the
erring computation.

@table @code
@item *terminal-io*
@code{*terminal-io*} is rebound to the stream the debugger is using.

@item *standard-input*
.item1 *standard-output*
@code{*standard-input*} and @code{*standard-output*} are rebound to be synonymous with
@code{*terminal-io*}.

@item 1@code{+}, @code{++}, @code{+++}*
.item1 1@code{*}, @code{**}, @code{***}*, @code{*values*}
@code{+} and @code{*} are rebound to the debugger's previous form and previous
value.  Commands for examining arguments and such, including @code{C-M-A},
@code{C-M-L} and @code{C-M-V}, leave @code{*} set to the value examined and @code{+}
set to a locative to where the value was found.  When the debugger is
first entered, @code{+} is the last form typed, which is typically the one
that caused the error, and @code{*} is the value of the @i{previous} form.

@item evalhook
.item1 applyhook
These variables (see (evalhook-var)) are rebound to @code{nil}, turning off
the @code{step} facility if it was in use when the error occurred.

@item eh:condition-handlers
.item1 eh:condition-default-handlers
These are rebound to @code{nil},
so that errors occurring within forms you type while in the debugger do not
magically resume execution of the erring program.

@item eh:condition-resume-handlers
To prevent resume handlers established outside the error from being invoked
automatically by deeper levels of error, this variable is rebound to a new value,
which has an element @code{t} added in the front.
@end table

@subsection "Debugger Commands"

All debugger commands are single characters, usually with the @code{Control} or
@code{Meta} bits.  The single most useful command is @code{Abort} (or @code{Control-Z}),
which exits from the debugger and throws out of the computation that got
the error.  (This is the @code{Abort} key, not a 5-letter command.)  Often you are not
interested in using the debugger at all and just want to get back to
Lisp top level; so you can do this in one keystroke.

If the error happened while you were innocently using a system utility
such as the editor, then it represents a bug in the system.  Report the
bug using the debugger command @code{Control-M}.  This gives you an editor
preinitialized with the error message and a backtrace.  You should type
in a @i{precise} description of what you did that led up to the problem,
then send the message by typing @code{End}.  Be as complete as possible,
and always give the exact commands you typed, exact filenames, etc.
rather then general descriptions, as much as possible.  The person who
investigates the bug report will have to try to make the problem happen
again; if he does not know where to find @i{your} file, he will have a
difficult time.

The @code{Abort} command signals the @code{sys:abort} condition, returning
control to the most recent command loop.
This can be Lisp top level, a @code{break}, or the debugger command loop
associated with another error.  Typing @code{Abort} multiple times throws
back to successively older read-eval-print or command loops until top level
is reached.  Typing @code{Meta-Abort}, on the other hand, always throws
to top level.  @code{Meta-Abort} is not a debugger command, but a system
command that is always available no matter what program you are in.

Note that typing @code{Abort} in the middle of typing a form to be evaluated
by the debugger aborts that form and returns to the debugger's command level,
while typing @code{Abort} as a debugger command returns out of the debugger
and the erring program, to the @i{previous} command level.
Typing @code{Abort} after entering a numeric argument just discards the argument.

Self-documentation is provided by the @code{Help} or @code{?} command,
which types out some documentation on the debugger commands, including any
special commands that apply to the particular error currently being handled.

Often you want to try to proceed from the error.  When the debugger is
entered, it prints a table of commands you can use to proceed, or abort
to various levels.  The commands are @code{Super-A}, @code{Super-B}, and so on.  How
many there are and what they do is different each time there is an
error, but the table says what each one is for.  If you want to see the
table again, type @code{Help} followed by @code{P}.

The @code{Resume} (or @code{Control-C}) command is often synonymous with
@code{Super-A}.  But @code{Resume} only proceeds, never aborts.  If there is no
way to proceed, just ways to abort, then @code{Resume} does not do anything.

The debugger knows about a current stack frame, and there
are several commands that use it.  The initially current stack frame
is the one which signaled the error, either the one which got the microcode-detected
error or the one which called @code{ferror}, @code{cerror}, or @code{error}.
When the debugger starts it up it shows you this frame in the following format:
@lisp
FOO:
   Arg 0 (X): 13
   Arg 1 (Y): 1
@end lisp
and so on.  This means that @code{foo} was called
with two arguments, whose names (in the Lisp source code) are @code{x} and @code{y}.
The current values of @code{x} and @code{y} are @code{13} and @code{1} respectively.  These
may not be the original arguments if @code{foo} happens to @code{setq} its argument variables.

The @code{Clear-Screen} (or @code{Control-L}) command clears the screen, retypes
the error message that was initially printed when the debugger was
entered, and prints out a description of the current frame, in the
above format.

Several commands are provided to allow you to examine the Lisp control
stack and to make frames current other than the one that got the error.
The control stack (or ``regular pdl'') keeps a record of all functions currently
active.  If you call @code{foo} at Lisp's top level, and it calls @code{bar},
which in turn calls @code{baz}, and @code{baz} gets an error, then a
backtrace (a backwards trace of the stack) would show all of this
information.  The debugger has two backtrace commands.  @code{Control-B}
simply prints out the names of the functions on the stack; in the above
example it would print
@lisp
BAZ  BAR  FOO  SI:*EVAL
  SI:LISP-TOP-LEVEL1  SI:LISP-TOP-LEVEL
@end lisp
The arrows indicate the direction of calling.  The @code{Meta-B} command prints
a more extensive backtrace, indicating the names of the arguments to the functions
and their current values; for the example above it might look like:
@lisp
BAZ:
   Arg 0 (X): 13
   Arg 1 (Y): 1

BAR:
   Arg 0 (ADDEND): 13

FOO:
   Arg 0 (FROB): (A B C . D)
@end lisp
and so on.  The backtrace commands all accept numeric arguments
which say how many frames to describe, the default being to describe
all the frames.

.need 1500
.nopara
Moving around in the stack:

The @code{Control-N} command makes the ``next'' older frame be current.
This is the frame which
called the one that was current at before.  The new current frame's
function and arguments are printed in the format shown immediately above.

@code{Control-P} moves the current frame in the reverse direction.
If you use it immediately after getting an error it selects frames
that are part of the act of signaling.

@code{Meta-<} selects the frame in which the error occurred, the same frame
that was selected when the debugger was entered.  @code{Meta->} selects the
outermost or initial stack frame.  @code{Control-S} asks you for a string
and searches down the stack (toward older frames) from the current frame
for a frame whose executing function's name contains that string.  That
frame becomes current and is printed out.  These commands are easy to
remember since they are analogous to editor commands.

The @code{Control-Meta-N}, @code{Control-Meta-P}, and @code{Control-Meta-B}
commands are like the corresponding @code{Control} commands but don't
censor the stack to omit ``uninteresting'' functions.  When looking at
interpreted code, the debugger usually tries to skip over frames that
belong to the functions composing the interpreter, such as @code{eval},
@code{prog}, and @code{cond}.  @code{Control-Meta-N}, @code{Control-Meta-P}, and
@code{Control-Meta-B} show everything.  They also show frames that are not
yet active; that is, frames whose arguments are still being computed for
functions that are going to be called.  The @code{Control-Meta-U} command
goes down the stack (to older frames) to the next interesting function
and makes that the current frame.

@code{Meta-L} prints out the current frame in ``full screen'' format, which shows
the arguments and their values, the local variables and their values,
and the machine code with an arrow pointing to the next instruction to
be executed.  Refer to (understanding-compiled-code) for help in reading
this machine code.

Commands such as @code{Control-N} and @code{Control-P}, which are useful to
issue repeatedly, take a prefix numeric argument and repeat that many types.
The numeric argument is typed by using @code{Control} or @code{Meta} and the number
keys, as in the editor.  Some other commands such as @code{Control-M} also
use the numeric argument; refer to the table at the end of the section
for detailed information.

.need 1500
.nopara
Resuming execution:

@code{Meta-C} is similar to @code{Control-C}, but in the case of an unbound
variable or undefined function, actually @code{setq}s the variable or
defines the function, so that the error will not happen again.
@code{Control-C} (or @code{Resume}) provides a replacement value but does not
actually change the variable.  @code{Meta-C} proceeds using the proceed type
@code{:store-new-value}, and is available only if that proceed type is
provided.

@code{Control-R} is used to return a value or values from the current frame; the frame
that called that frame continues running as if the function of the current frame
had returned.  This command prompts you for each value that the caller
expects; you can type either a form which evaluates to the desired value
or @code{End} if you wish to return no more values.

The @code{Control-T} command does a @code{throw} to a given tag with a given value; you
are prompted for the tag and the value.

@code{Control-Meta-R} @i{reinvokes} the current frame; it starts execution
at the beginning of the function, with the arguments currently present
in the stack frame.  These are the same arguments the function was
originally called with unless either the function itself has changed them
with @code{setq} or you have set them in the debugger.  If the
function has been redefined in the meantime (perhaps you edited it and
fixed its bug) the new definition is used.  @code{Control-Meta-R} asks for
confirmation before resuming execution.

@code{Meta-R} is similar to @code{Control-Meta-R} but allows you to change the
arguments if you wish.  You are prompted for the new arguments one by one;
you can type a form which evaluates to the desired argument, or @code{Space}
to leave that argument unchanged, or @code{End} if you do not want any more
arguments.  @code{Space} is allowed only if this argument was previously passed,
and @code{End} is not allowed for a required argument.  Once you have finished
specifying the arguments, you must confirm before execution resumes.

.need 1500
.nopara
Stepping through function calls and returns:

You can request a trap to the debugger on exit from a particular frame,
or the next time a function is called.

Each stack frame has a ``trap on exit'' bit.  The @code{Control-X} command
toggles this bit.  The @code{Meta-X} command sets the bit to cause a trap
for the current frame and all outer frames.  If a program is in an
infinite loop, this is a good way to find out how far back on the stack
the loop is taking place.  This also enables you to see what values
are being returned.  The @code{Control-Meta-X} command clears the
trap-on-exit bit for the current frame and outer frames.

The @code{Control-D} command proceeds like @code{Control-C} but requests a
trap the next time a function is called.  The @code{Meta-D} command toggles
the trap-on-next-call bit for the erring stack group.  It is useful if
you wish to set the bit and then resume execution with something other
than @code{Control-C}.  The function @code{breakon} may be used to request a trap
on calling a particular function.  Trapping on entry to a frame
automatically sets the trap-on-exit bit for that frame; use
@code{Control-X} to clear it if you do not want another trap.

.need 1500
.nopara
Transfering to other systems:

@code{Control-E} puts you into the editor, looking at the source code for the
function in the current frame.  This is useful when you have found the function
that caused the error and that needs to be fixed.  The editor command @code{Control-Z}
will return to the debugger, if it is still there.

@code{Control-M} puts you into the editor to mail a bug report.  The error message
and a backtrace are put into the editor buffer for you.  A numeric argument
says how many frames to include in the backtrace.

@code{Control-Meta-W} calls the window debugger, a display-oriented
debugger.  It is not documented in this manual, but should be usable
without further documentation.

.need 1500
.nopara
Examining and setting the arguments, local variables, and values:

@code{Control-Meta-A} takes a numeric argument, @i{n}, and prints out the
value of the @i{n}th argument of the current frame.  It leaves @code{*} set
to the value of the argument, so that you can use the Lisp
@code{read-eval-print} loop to examine it.  It also leaves @code{+} set to a
locative pointing to the argument on the stack, so that you can change
that argument (by calling @code{rplacd} on the locative).
@code{Control-Meta-L} is similar, but refers to the @i{n}th local variable
of the frame.  @code{Control-Meta-V} refers to the @i{n}th value this frame
has returned (in a trap-on-exit).  @code{Control-Meta-F} refers to the
function executing in the frame; it ignores its numeric argument and
doesn't allow you to change the function.

Another way to examine and set the arguments, locals and values of a
frame is with the functions @code{eh-arg}, @code{eh-loc}, @code{eh-val} and
@code{eh-fun}.  Use these functions in expressions you evaluate inside
the debugger, and they refer to the arguments, locals, values and
function, respectively, of the debugger's current frame.

The names @code{eh:arg}, @code{eh:val}, etc. are for compatibility with
the Symbolics system.

@defun eh-arg arg-number-or-name
@defunx eh:arg arg-number-or-name
When used in an expression evaluated in the debugger, @code{eh-arg}
returns the value of the specifed argument in the debugger's
current frame.  Argument names are compared ignoring packages; only
the pname of the symbol you supply is relevant.  @code{eh-arg} can appear
in @code{setf} and @code{locf} to set an argument or get its location.
@end defun

@defun eh-loc local-number-or-name
@defunx eh:loc local-number-or-name
Like @code{eh-arg} but accesses the current frame's
local variables instead of its arguments.
@end defun

@defun eh-val &optional value-number-or-name
@defunx eh:val &optional value-number-or-name
@code{eh-val} is used in an expression evaluated in the debugger
when the current frame is returning multiple values, to examine those
values.  This is only useful if the function has already begun to
return some values (as in a trap-on-exit), since otherwise they are
all @code{nil}.  If a name is specified, it is looked for in the function's
@code{values} or @code{return-list} declaration, if any.

@code{eh-val} can be used with @code{setf} and @code{locf}.  You can make a
frame return a specific sequence of values by setting all but the last
value with @code{eh-val} and doing @code{Control-R} to return the last value.

@code{eh-val} with no argument returns a list of all the
values this frame is returning.
@end defun

@defun eh-fun
@defunx eh:fun
@code{eh-fun} can be called in an expression being evalued inside the
debugger to return the function-object being called in the
current frame.  It can be used with @code{setf} and @code{locf}.
@end defun

@subsection "Summary of Commands"

@table @code
@item Control-A
Prints argument list of function in current frame.
@item Control-Meta-A
Sets @code{*} to the @i{n}th argument of the current frame.
@item Control-B
Prints brief backtrace.
@item Meta-B
Prints longer backtrace.
@item Control-Meta-B
Prints longer backtrace with no censoring of ``uninteresting'' functions.
@item Control-C 1or* Resume
Attempts to continue, using the first proceed type on the list
of available ones for this error.
@item Meta-C
Attempts to continue, @code{setq}'ing the unbound variable or otherwise
``permanently'' fixing the error.  This uses the proceed type
@code{:store-new-value}, and is available only if that proceed type is.
@item Control-D
Attempts to continue like @code{Control-C}, but trap on the next function call.
@item Meta-D
Toggles the flag that causes a trap on the next function call after
you continue or otherwise exit the debugger.
@item Control-E
Switches to Zmacs to edit the source code for the function in the current frame.
@item Control-Meta-F
Sets @code{*} to the function in the current frame.
@item Control-G 1or* Abort
Quits to command level.  This is not a command, but something you can type to escape from
typing in an argument of a command.
@item Control-Meta-H
Describes the condition handlers and resume handlers established by the
current frame.
@item Control-L 1or* Clear-Screen
Redisplays error message and current frame.
@item Meta-L
Displays the current frame, including local variables and compiled code.
@item Control-Meta-L
Sets @code{*} to the value of local variable @i{n} of the current frame.
@item Control-M
Sends a bug report containing the error message
and a backtrace of @i{n} frames (default is 3).
@item Control-N 1or* Line
Moves to the next (older) frame.  With argument, moves down @i{n} frames.
@item Meta-N
Moves to next frame and displays it like @code{Meta-L}.  With argument, move down @i{n} frames.
@item Control-Meta-N
Moves to next frame even if it is ``uninteresting'' or still accumulating
arguments.  With argument, moves down @i{n} frames.
@item Control-P 1or* Return
Moves up to previous (newer) frame.  With argument, moves up @i{n} frames.
@item Meta-P
Moves to previous frame and displays it like @code{Meta-L}.  With argument, moves up @i{n} frames.
@item Control-Meta-P
Moves to previous frame even if it is ``uninteresting'' or still
accumulating arguments.  With argument, moves up @i{n} frames.
@item Control-R
Returns a value or values from the current frame.
@item Meta-R
Reinvokes the function in the current frame (restart its execution at the beginning),
optionally changing the arguments.
@item Control-Meta-R
Reinvokes the function in the current frame with the same arguments.
@item Control-S
Searches for a frame containing a specified function.
@item Meta-S
Reads the name of a special variable and returns that variable's value
in the current frame.  Instance variables of @code{self} may also be
specified even if not special.
@item Control-Meta-S
Prints a list of special variables bound by the current frame and the
values they are bound to by the frame.  If the frame binds @code{self}, all
the instance variables of @code{self} are listed even if they are not special.
@item Control-T
Throws a value to a tag.
@item Control-Meta-U
Moves down the stack to the previous ``interesting'' frame.
@item Control-X
Toggles the flag in the current frame that causes a trap on exit or throw through
that frame.
@item Meta-X
Sets the flag causing a trap on exit or throw through the frame
for the current frame and all the frames outside of it.
@item Control-Meta-X
Clears the flag causing a trap on exit or throw through the frame
for the current frame and all the frames outside of it.
@item Control-Meta-V
Sets @code{*} to the @i{n}th value being returned from the current frame.
This is non-@code{nil} only in a trap on exit from the frame.
@item Control-Meta-W
Switches to the window-oriented debugger.
@item Control-Z 1or* Abort
Aborts the computation and throw back to the most recent
@code{break} or debugger, to the program's command level,
or to Lisp top level.
@item ? 1or* Help
Prints debugger command self-documentation.
@item Meta-<
Moves to the frame in which the error was signaled, and
makes it current once again.
@item Meta->
Moves to the outermost (oldest) stack frame.
@item Control-0 1through* Control-Meta-9
Numeric arguments to the following command are specified by typing a decimal number
with @code{Control} and/or @code{Meta} held down.
@item Super-A1, etc.*
The commands @code{Super-A}, @code{Super-B}, etc. are assigned to all the available
proceed types for this error.  The assignments are different each time
the debugger is entered, so it prints a list of them when it starts up.
@code{Help P} prints the list again.
@end table

@subsection Deexposed Windows and Background Processes

If the debugger is entered in a window that is not exposed, a
notification is used to inform you that it has happened.

In general, a
notification appears as a brief message printed inside square
brackets if the selected window can print it.  Otherwise,
blinking text appears in the mouse documentation line telling
you that a notification is waiting; to see the notification,
type @code{Terminal N} or select a window that can print it.
In either case, an audible beep is made.

In the case of a notification that the debugger is waiting to
use a deexposed window, you can select and expose the window
in which the error happened by typing @code{Terminal 0 S}.
You can do this even if the notification has not been printed yet
because the selected window cannot print it.  If you select
the waiting window, in this way or in any other way, the notification
is discarded since you already know what it was intended to tell you.

If the debugger is entered in a process that has no window or other suitable stream to
type out on, the window system assigns it a ``background window''.  Since this
window is initially not exposed, a notification is printed as above and you
must use @code{Terminal 0 S} to see the window.

If an error happens in the scheduler stack group or the first level
error handler stack group which are needed for processes to function, or
in the keyboard or mouse process (both needed for the window system to
function), the debugger uses the @i{cold load stream}, a primitive
facility for terminal I/O which bypasses the window system.

If an error happens in another process but the window system is locked
so that the notification mechanism cannot function, the cold load stream
is used to ask what to do.  You can tell the debugger to use the cold
load stream immediately, to forcibly clear the window system locks and
notify immediately as above, or to wait for the locks to become unlocked
and then notify as above.  If you tell it to wait, you can resume
operation of the machine.  Meanwhile, you can use the command @code{Terminal
Control-Clear-Input} to forcibly unlock the locks, or @code{Terminal Call}
to tell the debugger to use the cold load stream.  The latter command
normally enters a break-loop that uses the cold-load stream, but if
there are any background errors, it offers to enter the debugger to
handle them.  You can also handle the errors in a Lisp listen loop
of your choice by means of the function @code{eh} ((eh-fun)), assuming
you can select a functioning Lisp listen loop.

@subsection Debugging after a Warm Boot

After a warm boot, the process that was running at the time of
booting (or at the time the machine crashed prior to booting)
may be debugged if you answer `no' when the system asks whether
to reset that process.

@defun si:debug-warm-booted-process
Invoke the debugger, like the function @code{eh} ((eh-fun)),
on the process that was running as of the last warm boot
(assuming there was such a process).
@end defun

On the CADR, the state you see in the debugger is not correct;
some of the information dates from some period of time in advance
of the boot or the crash.

On the Lambda, the state you see in the debugger will, in some
system version, be accurate.

@section Tracing Function Execution
@cindex tracing function execution

	The trace facility allows the user to @i{trace} some functions.
When a function is traced, certain special actions are taken when it is
called and when it returns.  The default tracing action is to print a message when the
function is called, showing its name and arguments, and another message when
the function returns, showing its name and value(s).

	The trace facility is closely compatible with Maclisp.  You invoke
it through the @code{trace} and @code{untrace} special forms, whose syntax is described
below.  Alternatively, you can use the trace system by clicking @code{Trace}
in the system menu, or by using the @code{Meta-X Trace} command in the editor.
This allows you to select the trace options from a menu instead of having
to remember the following syntax.

.defspec trace
A @code{trace} form looks like:
@lisp
(trace @i{spec-1} @i{spec-2} ...)
@end lisp

Each @i{spec} can take any of the following forms:
@table @strong
@item a symbol
This is a function name, with no options.  The function is traced in the
default way, printing a message each time it is called and each time it returns.

@item a list @code{(@i{function-name} @i{option-1} @i{option-2} ...)}
@i{function-name} is a symbol and the @i{options} control how it is to be
traced.  The various options are listed below.  Some options take arguments,
which should be given immediately following the option name.

@item a list @code{(:function @i{function-spec} @i{option-1} @i{option-2} ...)}
This is like the previous form except that @i{function-spec} need not be a symbol
(see (function-spec)).
It exists because if @i{function-name} was a list in the previous form, it
would instead be interpreted as the following form:

@item a list @code{((@i{function-1} @i{function-2}...) @i{option-1} @i{option-2} ...)}
All of the functions are traced with the same options.  Each @i{function} can
be either a symbol or a general function-spec.
@end table
.end_defspec

	The following @code{trace} options exist:
@table @code
@item :break @i{pred}
'kindex :break trace
Causes a breakpoint to be entered after printing
the entry trace information but before applying the traced function to its
arguments, if and only if @i{pred} evaluates to non-@code{nil}.  During the
breakpoint, the symbol @code{arglist} is bound to a list of the arguments
of the function.

@item :exitbreak @i{pred}
'kindex :exitbreak trace
This is just like @code{break} except that the
breakpoint is entered after the function has been executed and the exit trace information
has been printed, but before control returns.    During the
breakpoint, the symbol @code{arglist} is bound to a list of the arguments
of the function, and the symbol @code{values} is bound to a list of
the values that the function is returning.

@item :error
'kindex :error trace
Causes the error handler to be called when the function is entered.  Use
@code{Resume} (or @code{Control-C}) to continue execution of the function.  If this option
is specified, there is no printed trace output other than the error message
printed by the error handler.  This is semi-obsolete, as @code{breakon} is
more convenient and does more exactly the right thing.

@item :step
'kindex :step trace
Causes the function to be single-stepped whenever it is called.
See the documentation on the step facility, (stepper-section).

@item :stepcond @i{pred}
'kindex :stepcond trace
Causes the function to be single-stepped
only if @i{pred} evaluates to non-@code{nil}.

@item :entrycond @i{pred}
'kindex :entrycond trace
Causes trace information to be printed on function
entry only if @i{pred} evaluates to non-@code{nil}.

@item :exitcond @i{pred}
'kindex :exitcond trace
Causes trace information to be printed on function
exit only if @i{pred} evaluates to non-@code{nil}.

@item :cond @i{pred}
'kindex :cond trace
This specifies both @code{:exitcond} and @code{:entrycond}
together.

@item :wherein @i{function}
'kindex :wherein trace
Causes the function to be traced only when called, directly or indirectly,
from the specified function @i{function}.  One can give several trace specs to
@code{trace}, all specifying the same function but with different @code{wherein}
options, so that the function is traced in different ways when called from
different functions.

This is different from @code{advise-within}, which only affects the function
being advised when it is called directly from the other function.  The @code{trace}
@code{:wherein} option means that when the traced function is called, the special
tracing actions occur if the other function is the caller of this function,
or its caller's caller, or its caller's caller's caller, etc.

@item :argpdl @i{pdl}
'kindex :argpdl trace
Specifies a symbol @i{pdl}, whose value is
initially set to @code{nil} by @code{trace}.  When the function is traced, a
list of the current recursion level for the function, the function's
name, and a list of arguments is consed onto the @i{pdl} when the
function is entered, and cdr'ed back off when the function is exited.
The @i{pdl} can be inspected from within a breakpoint, for example, and
used to determine the very recent history of the function. This option
can be used with or without printed trace output.  Each function can be
given its own pdl, or one pdl may serve several functions.

@item :entryprint @i{form}
'kindex :entryprint trace
The @i{form} is evaluated and the value is included in the trace message
for calls to the function.  You can give this option multiple times,
and all the @i{form}'s thus specified are evaluated and printed.
@code{\\} precedes the values to separate them from the arguments.

@item :exitprint @i{form}
'kindex :exitprint trace
The @i{form} is evaluated and the value is included in the trace message
for returns from the function.  You can give this option multiple times,
and all the @i{form}'s thus specified are evaluated and printed.
@code{\\} precedes the values to separate them from the returned values.

@item :print @i{form}
'kindex :print trace
The @i{form} is evaluated and the value is included in the trace messages
for both calls to and returns from the function.  Equivalent to
@code{:exitprint} and @code{:entryprint} at once.

@item :entry @i{list}
'kindex :entry trace
This specifies a list of arbitrary forms whose
values are to be printed along with the usual entry-trace.  The list of
resultant values, when printed, is preceded by @code{\\} to separate it
from the other information.

@item :exit @i{list}
'kindex :exit trace
This is similar to @code{entry}, but specifies expressions
whose values are printed with the exit-trace.  Again, the list of
values printed is preceded by @code{\\}.

@item :arg  :value  :both  nil
'kindex :arg trace
'kindex :value trace
'kindex :both trace
These specify which of the usual trace
printouts should be enabled.  If @code{:arg} is specified, then on function
entry the name of the function and the values of its arguments will be
printed.  If @code{:value} is specified, then on function exit the returned
value(s) of the function will be printed.  If @code{:both} is specified,
both of these will be printed.  If @code{nil} is specified, neither will
be printed.  If none of these four options are specified the default is
to @code{:both}.  If any further @i{options} appear after one of these,
they are not treated as options!  Rather, they are considered to
be arbitrary forms whose values are to be printed on entry and/or exit
to the function, along with the normal trace information. The values
printed will be preceded by a @code{//}, and follow any values specified
by @code{:entry} or @code{:exit}.

Note that since these options ``swallow'' all
following options, if one is given it should be the last option
specified.
@end table

@vindex arglist
In the evaluation of the expression arguments to various @code{trace} options
such as @code{:cond} and @code{:break}, the value of @code{arglist} is
a list of the arguments given to the traced function.  Thus
@lisp
(trace (foo :break (null (car arglist))))
@end lisp
would cause a break in @code{foo} if and only if the first argument to
@code{foo} is @code{nil}.  If the @code{:break} option is used, the variable
@code{arglist} is valid inside the break-loop.  If you @code{setq} @code{arglist}
before actual function execution, the arguments seen by the function
will change.

@vindex values
In the evaluation of the expression arguments to various @code{trace} options
such as @code{:cond} and @code{:break} on exit from the traced function,
the variable @code{values} is bound to a
list of the resulting values of the traced function.
If the @code{:exitbreak} option is used, the variables @code{values} and @code{arglist} 
are valid inside the break-loop.  If you @code{setq} @code{values}, the values returned
by the function will change.

The trace specifications may be ``factored'', as explained above.  For example,
@lisp
(trace ((foo bar) :break (bad-p arglist) :value))
1is equivalent to*
(trace (foo :break (bad-p arglist) :value)
       (bar :break (bad-p arglist) :value))
@end lisp
Since a list as a function name is interpreted as a list of
functions, non-atomic function names (see (function-spec))
are specified as follows:
@lisp
(trace (:function (:method flavor :message) :break t))
@end lisp

@code{trace} returns as its value a list of names of all functions it traced.  If
called with no arguments, as just @code{(trace)}, it returns a list of all the
functions currently being traced.

If you attempt to trace a function already being traced, @code{trace} calls
@code{untrace} before setting up the new trace.

Tracing is implemented with encapsulation (see (encapsulate)), so if the
function is redefined (e.g. with @code{defun} or by loading it from a QFASL file)
the tracing will be transferred from the old definition to the new definition.

Tracing output is printed on the stream that is the value of @code{*trace-output*}.
This is synonymous with @code{*terminal-io*} unless you change it.

.defspec untrace
Undoes the effects of @code{trace} and restores functions to
their normal, untraced state.  @code{untrace} accepts multiple specifications,
e.g. @code{(untrace foo quux fuphoo)}.  Calling @code{untrace} with no arguments
will untrace all functions currently being traced.
.end_defspec

@defvar trace-compile-flag
If the value of @code{trace-compile-flag} is non-@code{nil}, the functions
created by @code{trace} are compiled, allowing you to trace special
forms such as @code{cond} without interfering with the execution of the
tracing functions.  The default value of this flag is @code{nil}.

See also the function @code{compile-encapsulations}, (compile-encapsulations-fun).
@end defvar

@section Breakon

The function @code{breakon} allows you to request that the debugger be
entered whenever a certain function is called.

@defun breakon function-spec &optional condition-form
Encapsulates the definition of @i{function-spec} so that a trap-on-call
occurs when it is called.  This enters the debugger.  A
trap-on-exit will occur when the stack frame is exited.

If @i{condition-form} is non-@code{nil}, its value should be a form to be
evaluated each time @i{function-spec} is called. The trap occurs only if
@i{condition-form} evaluates to non-@code{nil}.  Omitting the
@i{condition-form} is equivalent to supplying @code{t}.  If @code{breakon} is
called more than once for the same @i{function-spec} and different
@i{condition-form}s, the trap occurs if any of the conditions are true.

@code{breakon} with no arguments returns a list of the functions that
are broken on.
@end defun

Conditional breakons are useful for causing the trap to occur only in a
certain stack group.  This sometimes allows debugging of functions
that are being used frequently in background processes.
@lisp
(breakon 'foo `(eq current-stack-group ',current-stack-group))
@end lisp

If you wish to trap on calls to @code{foo} when called from the execution of
@code{bar}, you can use @code{(si:function-active-p 'bar)} as the condition.
If you want to trap only calls made directly from @code{bar}, the thing to
do is
@lisp
(breakon '(:within bar foo))
@end lisp
rather than a conditional breakon.

To break only the @i{n}'th time @code{foo} is called, do
@lisp
(defvar i @i{n})
(breakon 'foo '(zerop (decf i)))
@end lisp

Another useful form of conditional breakon allows you to control
trapping from the keyboard:
@lisp
(breakon 'foo '(tv:key-state :mode-lock))
@end lisp
The trap occurs only when the @code{Mode-Lock} key is down.  This key
is not normally used for much else.  With this technique, you can
successfully trap on functions used by the debugger!

@defun unbreakon function-spec &optional conditional-form
Remove the @code{breakon} set on @i{function-spec}.  If
@i{conditional-form} is specified, remove only that condition.  Breakons
with other conditions are not removed.

With no arguments, @code{unbreakon} removes all breakons from all
functions.
@end defun

To cause the encapsulation which implements the breakon to be compiled,
call @code{compile-encapsulations} or set @code{compile-encapsulations-flag}
non-@code{nil}.  See (compile-encapsulations-fun).  This may eliminate
some of the problems that occur if you breakon a function such as
@code{prog} that is used by the evaluator.  (A conditional to trap only in
one stack group will help here also.)

@section Advising a Function
@cindex advice to functions

To advise a function is to tell it to do something extra in addition to its
actual definition.  It is done by means of the function @code{advise}.  The
something extra is called a piece of advice, and it can be done before, after,
or around the definition itself.  The advice and the definition are independent,
in that changing either one does not interfere with the other.  Each function
can be given any number of pieces of advice.

Advising is fairly similar to tracing, but its purpose is different.  Tracing is
intended for temporary changes to a function to give the user information about
when and how the function is called and when and with what value it returns.
Advising is intended for semi-permanent changes to what a function actually
does.  The differences between tracing and advising are motivated by this
difference in goals.

Advice can be used for testing out a change to a function in a way
that is easy to retract.  In this case, you would call @code{advise} from
the terminal.  It can also be used for customizing a
function that is part of a program written by someone else.  In this
case you would be likely to put a call to @code{advise} in one of your
source files or your login init file (see (login-fun)), rather than modifying the other
person's source code.

Advising is implemented with encapsulation (see (encapsulate)), so if the
function is redefined (e.g. with @code{defun} or by loading it from a QFASL file)
the advice will be transferred from the old definition to the new definition.

@defmac advise
A function is advised by the special form
@lisp
(advise @i{function} @i{class} @i{name} @i{position}
  @i{form1} @i{form2}...)
@end lisp
None of this is evaluated.  @i{function} is the function to put the advice on.
It is usually a symbol, but any function spec is allowed (see (function-spec)).
The @i{forms} are the advice; they get evaluated when the function is called.
@i{class} should be either @code{:before}, @code{:after}, or @code{:around}, and says
when to execute the advice (before, after, or around the execution of the
definition of the function).  The meaning of @code{:around} advice is explained a
couple of sections below.

@i{name} is used to keep track of multiple pieces of advice on the same
function.  @i{name} is an arbitrary symbol that is remembered as the
name of this particular piece of advice.  If you have no name in mind,
use @code{nil}; then we say the piece of advice is anonymous.  A given
function and class can have any number of pieces of anonymous advice,
but it can have only one piece of named advice for any one name.  If
you try to define a second one, it replaces the first.  Advice for
testing purposes is usually anonymous.  Advice used for customizing
someone else's program should usually be named so that multiple
customizations to one function have separate names.  Then, if you
reload a customization that is already loaded, it does not get put on
twice.

@i{position} says where to put this piece of advice in relation to
others of the same class already present on the same function.  If
@i{position} is @i{nil}, the new advice goes in the default position: it
usually goes at the beginning (where it is executed before the other
advice), but if it is replacing another piece of advice with the same
name, it goes in the same place that the old piece of advice was in.

If you wish to specify the position, @i{position} can be the numerical index of
which existing piece of advice to insert this one before.  Zero means
at the beginning; a very large number means at the end.  Or,
@i{position} can be the name of an existing piece of advice of the same
class on the same function; the new advice is inserted before that
one.

@lisp
@exdent 1For example,*
(advise factorial :before negative-arg-check nil
  (if (minusp (first arglist))
      (ferror nil "factorial of negative argument")))
@end lisp
This modifies the (hypothetical) factorial function so that if it is
called with a negative argument it signals an error instead of running
forever.

@code{advise} with no arguments returns a list of advised functions.
@end defmac

@defmac unadvise
@lisp
(unadvise @i{function} @i{class} @i{position})
@end lisp
removes pieces of advice.  None of its arguments are evaluated.  @i{function}
and @i{class} have the same meaning as they do in the function @code{advise}.
@i{position} specifies which piece of advice to remove.  It can be the numeric
index (zero means the first one) or it can be the name of the piece of advice.

If some of the arguments
are missing or @code{nil}, all pieces of advice which match the non-@code{nil} arguments
are removed.  Thus, if @i{function} is missing or @code{nil}, all advice on all
functions which match the specified @i{class} and @i{position} are removed.
If @i{position} is missing or @code{nil}, then all advice of the specified class
on the specified function is removed.  If only @i{function} is non-@code{nil},
all advice on that function is removed.
@end defmac

The following are the primitive functions for adding and removing advice.
Unlike the above special forms, these are functions and can be conveniently
used by programs.  @code{advise} and @code{unadvise} are actually macros that
expand into calls to these two.

@defun si:advise-1 function class name position forms
Adds advice.  The arguments have the same meaning as in @code{advise}.
Note that the @i{forms} argument is @i{not} a @code{&rest} argument.
@end defun

@defun si:unadvise-1  &optional function class position
Removes advice.  If @i{function} or @i{class} or @i{position} is @code{nil}
or unspecified, advice is removed from all functions or all classes of
advice or advice at all positions are removed.
@end defun

You can find out manually what advice a function has with @code{grindef}, which
grinds the advice on the function as forms that are calls to
@code{advise}.  These are in addition to the definition of the function.

To cause the advice to be compiled, call @code{compile-encapsulations} or
set @code{compile-encapsulations-flag} non-@code{nil}.  See
(compile-encapsulations-fun).

@subsection Designing the Advice

For advice to interact usefully with the definition and intended
purpose of the function, it must be able to interface to the data flow
and control flow through the function.  We provide conventions for
doing this.

The list of the arguments to the function can be found in the variable
@code{arglist}.  @code{:before} advice can replace this list, or an element of it, to
change the arguments passed to the definition itself.  If you replace
an element, it is wise to copy the whole list first with
@lisp
(setq arglist (copylist arglist))
@end lisp
After the function's definition has been executed, the list of the
values it returned can be found in the variable @code{values}.  @code{:after} advice
can set this variable or replace its elements to cause different
values to be returned.

All the advice is executed within a @code{block nil} so any piece of advice can
exit the entire function with @code{return}.  The arguments of the @code{return}
are returned as the values of the function and no further advice
is executed.  If a piece of @code{:before} advice does this then the
function's definition is not even called.

@subsection :around Advice

A piece of @code{:before} or @code{:after} advice is executed entirely before or
entirely after the definition of the function.  @code{:around} advice is wrapped
around the definition; that is, the call to the original definition of
the function is done at a specified place inside the piece of @code{:around}
advice.  You specify where by putting the symbol @code{:do-it} in that place.

For example, @code{(+ 5 :do-it)} as a piece of @code{:around} advice would add @code{5} to
the value returned by the function.  This could also be done by
@code{(setq values (list (+ 5 (car values))))} as @code{:after} advice.

When there is more than one piece of @code{:around} advice, the pieces are stored
in a sequence just like @code{:before} and @code{:after} advice.  Then, the first
piece of advice in the sequence is the one started first.  The second
piece is substituted for @code{:do-it} in the first one.  The third one is
substituted for @code{:do-it} in the second one.  The original definition is
substituted for @code{:do-it} in the last piece of advice.

@code{:around} advice can access @code{arglist}, but @code{values} is not set up until the
outermost @code{:around} advice returns.  At that time, it is set to the
value returned by the @code{:around} advice.  It is reasonable for the advice to
receive the values of the @code{:do-it} (e.g. with @code{multiple-value-list}) and
fool with them before returning them (e.g. with @code{values-list}).

@code{:around} advice can @code{return} from the @code{block} at any time, whether the
original definition has been executed yet or not.  It can also override
the original definition by failing to contain @code{:do-it}.  Containing two
instances of @code{:do-it} may be useful under peculiar circumstances.  If you
are careless, the original definition may be called twice, but
something like
@lisp
(if (foo) (+ 5 :do-it) (* 2 :do-it))
@end lisp
will work reasonably.

@subsection Advising One Function Within Another

It is possible to advise the function @code{foo} only for when it is called
directly from a specific other function @code{bar}.  You do this by
advising the function specifier @code{(:within bar foo)}.  That works by
finding all occurrences of @code{foo} in the definition of @code{bar} and
replacing them with @code{#:altered-foo-within-bar}.  (Note that this is an
uninterned symbol.)  This can be done even if @code{bar}'s definition is
compiled code.  The symbol @code{#:altered-foo-within-bar} starts off with
the symbol @code{foo} as its definition; then the symbol
@code{#:altered-foo-within-bar}, rather than @code{foo} itself, is advised.
The system remembers that @code{foo} has been replaced inside @code{bar}, so
that if you change the definition of @code{bar}, or advise it, then the
replacement is propagated to the new definition or to the advice.  If
you remove all the advice on @code{(:within bar foo)}, so that its
definition becomes the symbol @code{foo} again, then the replacement is
unmade and everything returns to its original state.

@code{(grindef bar)} prints @code{foo} where it originally appeared, rather than
@code{#:altered-foo-within-bar}, so the replacement is not seen.  Instead,
@code{grindef} prints calls to @code{advise} to describe all the advice that
has been put on @code{foo} or anything else within @code{bar}.

An alternate way of putting on this sort of advice is to use
@code{advise-within}.

@defmac advise-within
@lisp
(advise-within @i{within-function} @i{function-to-advise}
	       @i{class} @i{name} @i{position}
	@i{forms...})
@end lisp
advises @i{function-to-advise} only when called directly from the function
@i{within-function}.  The other arguments mean the same thing as with
@code{advise}.  None of them are evaluated.
@end defmac

To remove advice from @code{(:within bar foo)}, you can use @code{unadvise} on that
function specifier.  Alternatively, you can use @code{unadvise-within}.

@defmac unadvise-within
@lisp
(unadvise-within @i{within-function} @i{function-to-advise} @i{class} @i{position})
@end lisp
removes advice
that has been placed on @code{(:within @i{within-function} @i{function-to-advise})}.
Any of the four arguments may be missing or @code{nil}; then that argument is
unconstrained.  All advice matching whichever arguments are non-@code{nil} is
removed.  For example, @code{(unadvise-within foo nil :before)} removes
all @code{:before}-advice from anything within @code{foo}.  @code{(unadvise-within)}
removes all advice placed on anything within anything.  By contrast, @code{(unadvise)}
removes all advice, including advice placed on a function for all callers.
Advice placed
on a function not within another specific function is never removed by
@code{unadvise-within}.
@end defmac

The function versions of @code{advise-within} and @code{unadvise-within} are
called @code{si:advise-within-1} and @code{si:unadvise-within-1}.  @code{advise-within} and
@code{unadvise-within} are macros that expand into calls to the other two.


@section Stepping Through an Evaluation
@cindex stepping through evaluation

	The Step facility gives you the ability to follow every step of
the evaluation of a form, and examine what is going on.  It is
analogous to a single-step proceed facility often found in
machine-language debuggers.  If your program is doing something
strange, and it isn't obvious how it's getting into its strange state,
then the stepper is for you.

	There are two ways to enter the stepper.  One is by use of the
@code{step} function.

@defun step form
	This evaluates @i{form} with single stepping.  It returns
the value of @i{form}.
@end defun

	For example, if you have a function named @code{foo}, and typical arguments
to it might be @code{t} and @code{3}, you could say
@lisp
(step '(foo t 3))
@end lisp
to evaluate the form @code{(foo t 3)} with single stepping.

	The other way to get into the stepper is to use the @code{:step} option 
of @code{trace} (see (trace-fun)).  If a function is traced with the @code{:step} option, then
whenever that function is called it will be single stepped.

	Note that any function to be stepped must be interpreted; that is, it
must be a lambda-expression.  Compiled code cannot be stepped by the stepper.

	When evaluation is proceeding with single stepping, before any
form is evaluated, it is (partially) printed out, preceded by a forward
arrow (7*) character When a macro is expanded, the expansion is
printed out preceded by a double arrow (7*) character.  When a form
returns a value, the form and the values are printed out preceded by a
backwards arrow (7*) character; if there is more than one value
being returned, an and-sign (7*) character is printed between the
values.  When the stepper has evaluated the args to a form and is about
to apply the function, it prints a lambda (7*) because entering the
lambda is the next thing to be done.

	Since the forms may be very long, the stepper does not print all
of a form; it truncates the printed representation after a certain number
of characters.  Also, to show the recursion pattern of who calls whom in
a graphic fashion, it indents each form proportionally to its level
of recursion.

	After the stepper prints any of these things, it waits for a
command from the user.  There are several commands to tell the stepper
how to proceed, or to look at what is happening. The commands are:
@table @strong
@item @code{Control-N} (Next)
Steps to the Next event, then asks for another command.
Events include beginning to evaluate a form at any level
or finishing the evaluation of a form at any level.

@item @code{Space}
.br
Steps to the next event at this level.  In other words, continue to
evaluate at this level, but don't step anything at lower levels.  This is a good
way to skip over parts of the evaluation that don't interest you.

@item @code{Control-A} (Args)
Skips over the evaluation of the arguments of this form, but pauses in the stepper
before calling the function that is the car of the form.

@item @code{Control-U} (Up)
Continues evaluating until we go up one level.  This is like
the space command, only more so; it skips over anything on the current level
as well as lower levels.

@item @code{Control-X} (eXit)
Exits; finishes evaluation without any more stepping.

@item @code{Control-T} (Type)
Retypes the current form in full (without truncation).

@item @code{Control-G} (Grind)
Grinds (i.e. prettyprints) the current form.

@item @code{Control-E} (Editor)
Switches windows, to the editor.

@item @code{Control-B} (Breakpoint)
Enters a @code{break} loop from which you can examine the values of
variables and other aspects of the current environment.  From
within this loop, the following variables are available:
@table @code
@item step-form
the current form.
@item step-values
the list of returned values.
@item step-value
the first returned value.
@end table
If you change the values of these variables, you will affect execution.

@item @code{Control-L}
Clears the screen and redisplays the last 10. pending forms (forms
that are being evaluated).

@item @code{Meta-L}
Like Control-L, but doesn't clear the screen.

@item @code{Control-Meta-L}
Like Control-L, but redisplays all pending forms.

@item @code{?} or @code{Help}
Prints documentation on these commands.
@end table
	It is strongly suggested that you write some little function
and try the stepper on it.  If you get a feel for what the stepper does
and how it works, you will be able to tell when it is the right thing to use
to find bugs.

@section "Evalhook"

The @code{evalhook} facility provides a ``hook'' into the evaluator; it is a
way you can get a Lisp form of your choice to be executed whenever the
evaluator is called.  The stepper uses @code{evalhook}, and usually it is
the only thing that ever needs to.  However, if you want to write your
own stepper or something similar, this is the primitive facility that
you can use to do so.  The way this works is a bit hairy, but unless
you need to write your own stepper you don't have to worry about it.

@defvar evalhook
@defvarx *evalhook*
If the value of @code{evalhook} is non-@code{nil}, then special things happen
in the evaluator.  Its value is called the @i{hook function}.  When a
form (any form, even a number or a symbol) is to be evaluated, the hook
function is called instead.  Whatever values the hook function returns
are taken to be the results of the evaluation.  Both @code{evalhook} and
@code{applyhook} are bound to @code{nil} before the hook function is actually
called.

The hook function receives two arguments: the form that was to be
evaluated, and the lexical environment of evaluation.  These two
arguments allow the hook function to perform later, if it wishes,
the very same evaluation that the hook was called instead of.
@end defvar

@defvar applyhook
@defvarx *applyhook*
If the value of @code{applyhook} is non-@code{nil}, it is called the
next time the interpreter is about to apply a function to its
evaluated arguments.  Whatever values the apply hook function
returns are taken to be the results of calling the other function.
Both @code{evalhook} and @code{applyhook} are bound to @code{nil} before the
hook function is actually called.

The hook function receives three arguments: the function that was
going to be called, the list of arguments it was going to receive,
and the lexical environment of evaluation.  These
arguments allow the hook function to perform later, if it wishes,
the very same evaluation that the hook was called instead of.
@end defvar

When either the evalhook or the applyhook is called, both variables are
bound to @code{nil}.  They are also rebound to @code{nil} by @code{break} and by
the debugger, and @code{setq}'ed to @code{nil} when errors are dismissed
by throwing to the Lisp top level loop.  This provides the ability to
escape from this mode if something bad happens.

In order not to impair the efficiency of the Lisp interpreter,
several restrictions are imposed on the evalhook and applyhook.
They apply only to evaluation--whether in a read-eval-print loop,
internally in evaluating arguments in forms, or by explicit use
of the function @code{eval}.  They @i{do not} have any effect
on compiled function references, on use of the function @code{apply},
or on the mapping functions.

@defun evalhook form evalhook applyhook &optional environment
Evaluates @i{form} in the specified @i{environment}, with @i{evalhook} and @i{applyhook} in
effect for all recursive evaluations of subforms of @i{form}.  However, the
@i{evalhook} is not called for the evaluation of @i{form} itself.

@i{environment} is a list which represents the lexical environment
to be in effect for the evaluation of @i{form}.  @code{nil} means an
empty lexical environment, in which no lexical bindings exist.  This
is the environment used when @code{eval} itself is called.  Aside from
@code{nil}, the only reasonable way to get a value to pass for
@i{environment} is to use the last argument passed to a hook
function.  You must take care not to use it after the context in
which it was made is exited, because environments normally contain
stack lists which become garbage after their stack frames are
popped.

@i{environment} has no effect on the evaluation of a variable which
is regarded as special.  This is always done by examining the value
cell.  However, environment contains the record of the local special
declarations currently in effect, so it does enter in the decision
of whether a variable is special.

@lisp
@exdent Here is an example of the use of @code{evalhook}:
1;; This function evaluates a form while printing debugging information.*
(defun hook (x)
   (terpri)
   (evalhook x 'hook-function nil))

1;; Notice how this function calls @code{evalhook} to evaluate the form @code{f},*
1;; so as to hook the sub-forms.*
(defun hook-function (f env)
   (let ((v (multiple-value-list
	      (evalhook f 'hook-function nil env))))
     (format t "form: ~S~%values: ~S~%" f v)
     (values-list v)))
@end lisp

The following output might be seen from @code{(hook '(cons (car '(a . b)) 'c))}:
@lisp
form: (quote (a . b))
values: ((a . b))
form: (car (quote (a . b)))
values: (a)
form: (quote c)
values: (c)
(a . c)
@end lisp
@end defun

@defun applyhook function list-of-args evalhook applyhook &optional environment
Applies @i{function} to @i{list-of-args} in the specified @i{environment}, with @i{evalhook}
and @i{applyhook} in effect for all recursive evaluations of subforms of @i{function}'s body.
However, @i{applyhook} is not called for this application of function itself.
For more information, refer to the definition of @code{evalhook}, immediately above.
@end defun

@section "The MAR"
@cindex MAR

	The MAR facility allows any word or contiguous set of words to
be monitored constantly, and can cause an error if the words are
referenced in a specified manner.  The name MAR is from the similar
device on the ITS PDP-10's; it is an acronym for `Memory Address
Register'.  The MAR checking is done by the Lisp Machine's memory
management hardware, so the speed of general execution is not
significantly slowed down when the MAR is enabled.  However, the speed
of accessing pages of memory containing the locations being checked is
slowed down somewhat, since every reference involves a microcode trap.

	These are the functions that control the MAR:

@defun set-mar location cycle-type &optional n-words
Sets the MAR on @i{n-words} words, starting at @i{location}.
@i{location} may be any object.  Often it will be a locative pointer
to a cell, probably created with the @code{locf} special form.
@i{n-words} currently defaults to 1,
but eventually it may default to the size of the object.
@i{cycle-type} says under what conditions to trap.  @code{:read} means that
only reading the location should cause an error, @code{:write} means that
only writing the location should, @code{t} means that both should.
To set the MAR to detect @code{setq} (and binding) of the variable @code{foo}, use
@lisp
(set-mar (variable-location foo) :write)
@end lisp
@end defun

@defun clear-mar
Turns off the MAR.  Warm-booting the machine disables the
MAR but does not turn it off, i.e. references to the MARed pages
are still slowed down.  @code{clear-mar} does not currently speed
things back up until the next time the pages are swapped out;
this may be fixed some day.
@end defun

@defun mar-mode
@code{(mar-mode)} returns a symbol indicating the current state of
the MAR.  It returns one of:
@table @code
@item nil
The MAR is not set.
@item :read
The MAR will cause an error if there is a read.
@item :write
The MAR will cause an error if there is a write.
@item t
The MAR will cause an error if there is any reference.
@end table
@end defun

Note that using the MAR makes the pages on which it is set
somewhat slower to access, until the next time they are
swapped out and back in again after the MAR is shut off.
Also, use of the MAR currently breaks the read-only feature
if those pages were read-only.

Proceeding from a MAR break allows the memory reference that got an error
to take place, and continues the program with the MAR still effective.  When
proceeding from a write, you have the choice of whether to allow the
write to take place or to inhibit it, leaving the location with its old
contents.

.defcondition sys:mar-break (@code{condition})
This is the condition, not an error, signaled by a MAR break.

The condition instance supports these operations:
@table @code
@item :object
The object one of whose words was being referenced.

@item :offset
The offset within the object of the word being referenced.

@item :value
The value read, or to be written.

@item :direction
Either @code{:read} or @code{:write}.
@end table

The proceed type @code{:no-action} simply proceeds, continuing with the
interrupted program as if the MAR had not been set.  If the trap was due
to writing, the proceed type @code{:proceed-no-write} is also provided, and
causes the program to proceed but does not store the value in the memory
location.
.end_defcondition

Most--but not all--write operations first do a read.  @code{setq} and
@code{rplaca} both do.  This means that if the MAR is in @code{:read}
mode it catches writes as well as reads; however, they trap
during the reading phase, and consequently the data to be written are
not yet known.  This also means that setting the MAR to @code{t} mode
causes most writes to trap twice, first for a read and then again for a
write.  So when the MAR says that it trapped because of a read, this
means a read at the hardware level, which may not look like a read in
your program.


@chapter How to Read Assembly Language
@cindex compiled code

Sometimes it is useful to study the machine language code produced by
the Lisp Machine's compiler, usually in order to analyze an error, or
sometimes to check for a suspected compiler problem.  This chapter
explains how the Lisp Machine's instruction set works and how to
understand what code written in that instruction set is doing.
Fortunately, the translation between Lisp and this instruction set is
very simple; after you get the hang of it, you can move back and forth
between the two representations without much trouble.  The following
text does not assume any special knowledge about the Lisp Machine,
although it sometimes assumes some general computer science background
knowledge.

@section  Introduction

Nobody looks at machine language code by trying to interpret octal
numbers by hand.  Instead, there is a program called the Disassembler
which converts the numeric representation of the instruction set into a
more readable textual representation.  It is called the Disassembler
because it does the opposite of what an Assembler would do; however,
there isn't actually any assembler that accepts this input format, since
there is never any need to manually write assembly language for the Lisp
Machine.

The simplest way to invoke the Disassembler is with the Lisp function
@code{disassemble}.  Here is a simple example.  Suppose we type:

@lisp
(defun foo (x)
  (assq 'key (get x 'propname)))

(compile 'foo)

(disassemble 'foo)
@end lisp

This defines the function @code{foo}, compiles it, and invokes the Disassembler
to print out the textual representation of the result of the compilation.
Here is what it looks like:

@lisp
22 MOVE D-PDL FEF|6           ;'KEY
23 MOVE D-PDL ARG|0           ;X
24 MOVE D-PDL FEF|7           ;'PROPNAME
25 (MISC) GET D-PDL
26 (MISC) ASSQ D-RETURN
@end lisp

The Disassembler is also used by the Error Handler and the Inspector.
When you see stuff like the above while using one of these programs, it
is disassembled code, in the same format as the @code{disassemble} function
uses.  Inspecting a compiled code object shows the disassembled code.

Now, what does this mean?  Before we get started, there is just a little
bit of jargon to learn.

The acronym PDL stands for Push Down List, and means the same thing as
Stack: a last-in first-out memory.  The terms PDL and stack will be used
interchangeably.  The Lisp Machine's architecture is rather typical of
``stack machines''; there is a stack that most instructions deal with, and
it is used to hold values being computed, arguments, and local
variables, as well as flow-of-control information.  An important use of
the stack is to pass arguments to instructions, though not all
instructions take their arguments from the stack.

The acronym `FEF' stands for Function Entry Frame.  A FEF is a compiled
code object produced by the compiler.  After the @code{defun} form above
was evaluated, the function cell of the symbol @code{foo} contained a
lambda expression.  Then we compiled the function @code{foo}, and the
contents of the function cell were replaced by a FEF.  The
printed representation of the FEF for @code{foo} looks like this:

@lisp
#<DTP-FEF-POINTER 11464337 FOO>
@end lisp

The FEF has three parts (this is a simplified explanation): a header
with various fixed-format fields; a part holding constants and invisible
pointers, and the main body, holding the machine language instructions.
The first part of the FEF, the header, is not very interesting and is
not documented here (you can look at it with @code{describe} but it won't
be easy to understand).  The second part of the FEF holds various
constants referred to by the function; for example, our function @code{foo}
references two constants (the symbols @code{key} and @code{propname}), and so
(pointers to) those symbols are stored in the FEF.  This part of the FEF
also holds invisible pointers to the value cells of all symbols that the
function uses as variables, and invisible pointers to the function cells
of all symbols that the function calls as functions.  The third part of
the FEF holds the machine language code itself.

Now we can read the disassembled code.  The first instruction looked
like this:

@lisp
22 MOVE D-PDL FEF|6           ;'KEY
@end lisp

This instruction has several parts.  The @code{22} is the address of this
instruction.  The Disassembler prints out the address of each
instruction before it prints out the instruction, so that you can
interpret branching instructions when you see them (we haven't seen one
of these yet, but we will later).  The @code{MOVE} is an opcode: this is a
@code{MOVE} instruction, which moves a datum from one place to another.  The
@code{D-PDL} is a destination specification.  The @code{D} stands for
`Destination', and so @code{D-PDL} means `Destination-PDL': the destination
of the datum being moved is the PDL.  This means that the
result will be pushed onto the PDL, rather than just moved to the top;
this instruction is pushing a datum onto the stack.  The next field of
the instruction is @code{FEF|6}.  This is an @i{address}, and it specifies
where the datum is coming from.  The vertical bar serves to separate the
two parts of the address.  The part before the vertical bar can be
thought of as a @i{base register}, and the part after the bar can be
thought of as being an offset from that register.  @code{FEF} as a base
register means the address of the FEF that we are disassembling, and so
this address means the location six words into the FEF.  So what this
instruction does is to take the datum located six words into the FEF,
and push it onto the PDL.  The instruction is followed by a comment
field, which looks like @code{;'KEY}.  This is not a comment that any person
wrote; the disassembler produces these to explain what is going on.  The
semicolon just serves to start the comment, the way semicolons in Lisp
code do.  In this case, the body of the comment, @code{'KEY}, is telling us
that the address field (@code{FEF|6}) is addressing a constant (that is what
the single-quote in @code{'KEY} means), and that the printed representation
of that constant is @code{KEY}.  With the help of this comment we finally
get the real story about what this instruction is doing: it is pushing
(a pointer to) the symbol @code{key} onto the stack.

The next instruction looks like this:

@lisp
23 MOVE D-PDL ARG|0           ;X
@end lisp

This is a lot like the previous instruction; the only difference is that
a different ``base register'' is being used in the address.  The @code{ARG}
base register is used for addressing your arguments: @code{ARG|0} means
that the datum being addressed is the zeroth argument.  Again, the
comment field explains what that means: the value of X (which was the
zeroth argument) is being pushed onto the stack.

The third instruction is just like the first and second ones; it pushes
the symbol @code{propname} onto the stack.

The fourth instruction is something new:

@lisp
25 (MISC) GET D-PDL
@end lisp

The first thing we see here is @code{(MISC)}.  This means that this is one of
the so-called @i{miscellaneous} instructions.  There are quite a few of
these instructions.  With some exceptions, each miscellaneous
instruction corresponds to a Lisp function and has the same name as that
Lisp function.  If a Lisp function has a corresponding miscellaneous
instruction, then that function is hand-coded in Lisp Machine microcode.

Miscellaneous instructions only have a destination field; they don't
have any address field.  The inputs to the instruction come from the
stack: the top @i{n} elements on the stack are used as inputs to the
instruction and popped off the stack, where @i{n} is the number of arguments
taken by the function.  The result of the function is stored wherever
the destination field says.  In our case, the function being executed is
@code{get}, a Lisp function of two arguments.  The top two values will be
popped off the stack and used as the arguments to @code{get} (the value
pushed first is the first argument, the value pushed second is the
second argument, and so on).  The result of the call to @code{get} will be
sent to the destination @code{D-PDL}; that is, it will be pushed onto the stack.
(In case you were wondering about how we handle optional arguments and
multiple-value returns, the answer is very simple: functions that use
either of those features cannot be miscellaneous instructions!  If you
are curious as to what functions are hand-microcoded and thus available
as miscellaneous instructions, you can look at the @code{defmic} forms in the
file @code{SYS: SYS; DEFMIC LISP}.)

The fifth and last instruction is similar to the fourth:

@lisp
26 (MISC) ASSQ D-RETURN
@end lisp

What is new here is the new value of the destination field.  This one is
called @code{D-RETURN}, and it can be used anywhere destination
fields in general can be used (like in @code{MOVE} instructions).  Sending
something to ``Destination-Return'' means that this value should be the
returned value of the function, and that we should return from this
function.  This is a bit unusual in instruction sets; rather than having
a ``return'' instruction, we have a destination that, when stored into,
returns from the function.  What this instruction does, then, is to
invoke the Lisp function @code{assq} on the top two elements of the stack
and return the result of @code{assq} as the result of this function.

Now, let's look at the program as a whole and see what it did:

@lisp
22 MOVE D-PDL FEF|6           ;'KEY
23 MOVE D-PDL ARG|0           ;X
24 MOVE D-PDL FEF|7           ;'PROPNAME
25 (MISC) GET D-PDL
26 (MISC) ASSQ D-RETURN
@end lisp

First it pushes the symbol @code{key}.  Then it pushes the value of @code{x}.
Then it pushes the symbol @code{propname}.  Then it invokes @code{get}, which
pops the value of @code{x} and the symbol @code{propname} off the stack and
uses them as arguments, thus doing the equivalent of evaluating the form
@code{(get x 'propname)}.  The result is left on the stack; the stack now
contains the result of the @code{get} on top, and the symbol @code{key}
underneath that.  Next, it invokes @code{assq} on these two values, thus
doing the equivalent of evaluating @code{(assq 'key (get x 'propname))}.
Finally, it returns the value produced by @code{assq}.  Now, the original
Lisp program we compiled was:

@lisp
(defun foo (x)
  (assq 'key (get x 'propname)))
@end lisp

We can see that the code produced by the compiler is correct: it will do
the same thing as the function we defined will do.

In summary, we have seen two kinds of instructions so far: the @code{MOVE}
instruction, which takes a destination and an address, and two of the
large set of miscellaneous instructions, which take only a destination,
and implicitly get their inputs from the stack.  We have seen two
destinations (@code{D-PDL} and @code{D-RETURN}), and two forms of address (@code{FEF}
addressing and @code{ARG} addressing).

@section  A More Advanced Example

Here is a more complex Lisp function, demonstrating local variables,
function calling, conditional branching, and some other new
instructions.

@lisp
(defun bar (y)
  (let ((z (car y)))
    (cond ((atom z)
	   (setq z (cdr y))
	   (foo y))
	  (t
	   nil))))
@end lisp

The disassembled code looks like this:

@lisp
20 CAR D-PDL ARG|0            ;Y
21 POP LOCAL|0                ;Z
22 BR-NOT-ATOM 27
23 CDR D-PDL ARG|0            ;Y
24 POP LOCAL|0                ;Z
25 CALL D-RETURN FEF|6        ;#'FOO
26 MOVE D-LAST ARG|0          ;Y
27 MOVE D-RETURN 'NIL
@end lisp

The first instruction here is a @code{CAR} instruction.  It has the same
format as @code{MOVE}: there is a destination and an address.  The @code{CAR}
instruction reads the datum addressed by the address, takes the car of
it, and stores the result into the destination.   In our example, the
first instruction addresses the zeroth argument, and so it computes
@code{(car y)}; then it pushes the result onto the stack.

The next instruction is something new: the @code{POP} instruction.  It has an
address field, but it uses it as a destination rather than as a source.
The @code{POP} instruction pops the top value off the stack, and stores that
value into the address specified by the address field.  In our example,
the value on the top of the stack is popped off and stored into address
@code{LOCAL|0}.  This is a new form of address; it means the zeroth local
variable.  The ordering of the local variables is chosen by the
compiler, and so it is not fully predictable, although it tends to be
by order of appearance in the code; fortunately you never have to look
at these numbers, because the comment field explains what is going on.
In this case, the variable being addressed is @code{z}.  So this instruction
pops the top value on the stack into the variable @code{z}.  The first two
instructions work together to take the car of @code{y} and store it into
@code{z}, which is indeed the first thing the function @code{bar} ought to do.
(If you have two local variables with the same name, then the comment
field won't tell you which of the two you're talking about; you'll have
to figure that out yourself.  You can tell two local variables with
the same name apart by looking at the number in the address.)

The next instruction is a familiar @code{MOVE} instruction, but it uses a
new destination: @code{D-IGNORE}.  This means that the datum being
addressed isn't moved anywhere.  If so, then why bother doing this
instruction?  The reason is that there is conceptually a set of
@i{indicator} bits, as are found in most modern computers such as the
68000, the Vax, as well as in obsolete computers such as the 370.  Every
instruction that moves or produces a datum sets the indicator bits from
that datum so that following instructions can test them.  So the reason
that the @code{MOVE} instruction is being done is so that someone can test
the indicators set up by the value that was moved, namely the value of
@code{z}.

All instructions except the branch instructions set the indicator bits
from the result produced and/or stored by that instruction.
@c We needn't explain that the indicator bits in CADR actually hold the
@c entire datum, not just a summary of its atom/cons and nil/non-nil status.

The next instruction is a conditional branch; it changes the flow of
control, based on the values in the indicator bits, which in this case
reflect the value popped by the @code{POP} instruction 21.  The branch
instruction is @code{BR-NOT-ATOM 27}, which means ``Branch, if the quantity
was not an atom, to location 27; otherwise proceed with execution''.  If
@code{z} was an atom, the Lisp Machine branches to location 27, and
execution proceeds there.  (As you can see by skipping ahead, location
27 just contains a @code{MOVE} instruction, which will cause the function
to return @code{nil}.)

If @code{z} is not an atom, the program keeps going, and the @code{CDR}
instruction is next.  This is just like the @code{CAR} instruction except
that it takes the cdr; this instruction pushes the value of @code{(cdr y)}
onto the stack.  The next one pops that value off into the variable @code{z}.

There are just two more instructions left.  These two instructions are
our first example of how function calling is compiled.  It is the
only really tricky thing in the instruction set.  Here is how it works
in our example:

@lisp
25 CALL D-RETURN FEF|6        ;#'FOO
26 MOVE D-LAST ARG|0          ;Y
@end lisp

The form being compiled here is @code{(foo y)}.  This means we are applying
the function which is in the function cell of the symbol @code{foo}, and
passing it one argument, the value of @code{y}.  The way function calling
works is in the following three steps.  First of all, there is a @code{CALL}
instruction that specifies the function object being applied to
arguments.  This creates a new stack frame on the stack, and stores the
function object there.  Secondly, all the arguments being passed except
the last one are pushed onto the stack.  Thirdly and lastly, the last
argument is sent to a special destination, called @code{D-LAST},
meaning ``this is the last argument''.  Storing to this destination is
what actually calls the function, @i{not} the @code{CALL} instruction itself.

There are two things you might wonder about this.  First of all, when
the function returns, what happens to the returned value?  Well, this is
what we use the destination field of the @code{CALL} instruction for.  The
destination of the @code{CALL} is not stored into at the time the @code{CALL}
instruction is executed; instead, it is saved on the stack along with
the function operation (in the stack frame created by the @code{CALL}
instruction).  Then, when the function actually returns, its result is
stored into that destination.

The other question is what happens when there isn't any last argument;
that is, when there is a call with no arguments at all?  This is handled
by a special instruction called @code{CALL0}.  The address of @code{CALL0}
addresses the function object to be called; the call takes place
immediately and the result is stored into the destination specified by
the destination field of the @code{CALL0} instruction.

So, let's look at the two-instruction sequence above.  The first
instruction is a @code{CALL}; the function object it specifies is at @code{FEF|6},
which the comment tells us is the contents of the function cell of @code{foo}
(the FEF contains an invisible pointer to that function cell).  The
destination field of the @code{CALL} is @code{D-RETURN}, but we aren't going to
store into it yet; we will save it away in the stack frame and use it
later.  So the function doesn't return at this point, even though it
says @code{D-RETURN} in the instruction; this is the tricky part.

Next we have to push all the arguments except the last one.  Well,
there's only one argument, so nothing needs to be done here.  Finally,
we move the last argument (that is, the only argument: the value of @code{y})
to @code{D-LAST}, using the @code{MOVE} instruction.  Moving to @code{D-LAST} is what
actually invokes the function, so at this point the function @code{foo} is
invoked.  When it returns, its result is sent to the destination stored
in the stack frame: @code{D-RETURN}.  Therefore, the value returned by the
call to @code{foo} will be returned as the value of the function @code{bar}.  Sure
enough, this is what the original Lisp code says to do.

When the compiler pushes arguments to a function call, it sometimes does
it by sending the values to a destination called @code{D-NEXT} (meaning the
``next'' argument).  This is exactly the same as @code{D-PDL} when producing
a compiled function.  The distinction is important when the compiler
output is passed to the microcompiler to generate microcode.

Here is another example to illustrate function calling.  This Lisp
function calls one function on the results of another function.

@lisp
(defun a (x y)
  (b (c x y) y))
@end lisp

The disassembled code looks like this:

@lisp
22 CALL D-RETURN FEF|6        ;#'B
23 CALL D-PDL FEF|7           ;#'C
24 MOVE D-PDL ARG|0           ;X
25 MOVE D-LAST ARG|1          ;Y
26 MOVE D-LAST ARG|1          ;Y
@end lisp

The first instruction starts off the call to the function @code{b}.  The
destination field is saved for later: when this function returns, we
will return its result as @code{a}'s result.  Next, the call to @code{c} is
started.  Its destination field, too, is saved for later; when @code{c}
returns, its result should be pushed onto the stack, so that it will be
the next argument to @code{b}.  Next, the first and second arguments to
@code{c} are passed; the second one is sent to @code{D-LAST} and so the
function @code{c} is called.  Its result, as we said, will be pushed onto
the stack, and thus become the first argument to @code{b}.  Finally, the
second argument to @code{b} is passed, by storing in @code{D-LAST}; @code{b} gets
called, and its result is sent to @code{D-RETURN} and is returned from
@code{a}.

@section  The Rest of the Instructions

Now that we've gotten some of the feel for what is going on, I will
start enumerating the instructions in the instruction set.  The
instructions fall into four classes.  Class I instructions have both a
destination and an address.  Class II instructions have an address, but
no destination.  Class III instructions are the branch instructions,
which contain a branch address rather than a general base-and-offset
address.  Class IV instructions have a destination, but no address;
these are the miscellaneous instructions.

We have already seen just about all the Class I instructions.  There are
nine of them in all: @code{MOVE}, @code{CALL}, @code{CALL0}, @code{CAR}, @code{CDR}, @code{CAAR},
@code{CADR}, @code{CDAR}, and @code{CDDR}.  @code{MOVE} just moves a datum from an address
to a destination; the @code{CxR} and @code{CxxR} instructions are the same but
perform the function on the value before sending it to the destination;
@code{CALL} starts off a call to a function with some arguments; @code{CALL0}
performs a call to a function with no arguments.

We've seen most of the possible forms of address.  So far we have seen
the @code{FEF}, @code{ARG}, and @code{LOCAL} base registers.  There are two other
kinds of addresses.  One uses a ``constant'' base register, which
addresses a set of standard constants: @code{NIL}, @code{T}, @code{0}, @code{1}, and
@code{2}.  The disassembler doesn't even bother to print out
@code{CONSTANT|@i{n}}, since the number @i{n} would not be even slightly
interesting; it just prints out @code{'NIL} or @code{'1} or whatever.  The
other kind of address is a special one printed as @code{PDL-POP}, which
means that to read the value at this address, an object should be popped
off the top of the stack.

There are more Class II instructions.  The only one we've
seen so far is @code{POP}, which pops a value off the stack and stores it
into the specified address.  Another, called @code{MOVEM}
(from the PDP-10 opcode name, meaning MOVE to Memory), stores the
top element of the stack into the specified address, but doesn't pop it
off the stack.

Seven Class II instructions implement heavily-used
two-argument functions: @code{+}, @code{-}, @code{*}, @code{/}, @code{LOGAND}, @code{LOGXOR}, and
@code{LOGIOR}.  These instructions take the first argument from the top of
the stack (popping it off) and their second argument from the
specified address, and they push the result on the stack.  Thus the
stack level does not change due to these instructions.
Here is a small function that shows some of these new things:

@lisp
(defun foo (x y)
  (setq x (logxor y (- x 2))))
@end lisp

The disassembled code looks like this:

@lisp
16 MOVE D-PDL ARG|1           ;Y
17 MOVE D-PDL ARG|0           ;X
20 - '2
21 LOGXOR PDL-POP
22 MOVEM ARG|0                ;X
23 MOVE D-RETURN PDL-POP
@end lisp

Instructions 20 and 21 use two of the new Class II instructions: the @code{-}
and @code{LOGXOR} instructions.  Instructions 21 and 23 use the @code{PDL-POP}
address type, and instruction 20 uses the ``constant'' base register to
get to a fixnum @code{2}.  Finally, instruction 22 uses the @code{MOVEM}
instruction; the compiler wants to use the top value of the stack to
store it into the value of @code{x}, but it doesn't want to pop it off the
stack because it has another use for it: to return it from the function.

Another four Class II instructions implement some commonly used
predicates: @code{=}, @code{>}, @code{<}, and @code{EQ}.  The two arguments come from the
top of the stack and the specified address; the stack is popped, the
predicate is applied to the two objects, and the result is left in the
indicators so that a branch instruction can test it, and branch based
on the result of the comparison.  These instructions remove the top
item on the stack and don't put anything back, unlike the previous set,
which put their results back on the stack.

Next, there are four Class II instructions to read, modify, and write a
quantity in ways that are common in Lisp code.  These instructions are
called @code{SETE-CDR}, @code{SETE-CDDR}, @code{SETE-1+}, and @code{SETE-1-}.  The @code{SETE-}
means to set the addressed value to the result of applying the specified
one-argument function to the present value.  For example, @code{SETE-CDR}
means to read the value addressed, apply @code{cdr} to it, and store the
result back in the specified address.  This is used when compiling
@code{(setq x (cdr x))}, which commonly occurs in loops; the other functions
are used frequently in loops, too.

There are two instructions used to bind special variables.  The first is
@code{BIND-NIL}, which binds the cell addressed by the address field to
@code{nil}; the second is @code{BIND-POP}, which binds the cell to an object
popped off the stack rather than @code{nil}.  The latter instruction pops a
value off the stack; the former does not use the stack at all.

There are two instructions to store common values into addressed cells.
@code{SET-NIL} stores @code{nil} into the cell specified by the address field;
@code{SET-ZERO} stores @code{0}.  Neither instruction uses the stack at all.

Finally, the @code{PUSH-E} instruction creates a locative pointer to the cell
addressed by the specified address, and pushes it onto the stack.  This
is used in compiling @code{(value-cell-location 'z)} where @code{z} is an
argument or a local variable, rather than a symbol (special variable).

Those are all of the Class II instructions.  Here is a contrived
example that uses some of the ones we haven't seen, just to show
you what they look like:

@lisp
(defun weird (x y)
  (cond ((= x y)
	 (let ((*foo* nil) (*bar* 5))
	   (declare (special *foo* *bar*))
	   (setq x (cdr x)))
	 nil)
	(t
	 (setq x nil)
	 (caar (variable-location y)))))
@end lisp

The disassembled code looks like this:

@lisp
24 MOVE D-PDL ARG|0           ;X
25 = ARG|1                    ;Y
26 BR-NIL 35
27 BIND-NIL FEF|6             ;*FOO*
30 PUSH-NUMBER 5
31 BIND-POP FEF|7             ;*BAR*
32 SETE-CDR ARG|0             ;X
33 (MISC) UNBIND 2 bindings 
34 MOVE D-RETURN 'NIL
35 SET-NIL ARG|0              ;X
36 PUSH-E ARG|1               ;Y
37 CAAR D-RETURN PDL-POP
@end lisp

Instruction 25 is an @code{=} instruction; it numerically compares the top of the
stack, @code{x}, with the addressed quantity, @code{y}.  The @code{x} is
popped off the stack, and the indicators are set to the result of the
equality test.  Instruction 26 checks the indicators, branching to 35 if
the result of the call to @code{=} was @code{nil}; that is, the machine will
branch to 35 if the two values were not equal.  Instruction 27 binds
@code{*foo*} to @code{nil}; instructions 30 and 31 bind @code{*bar*} to @code{5}.
Instruction 30 is a peculiar class IV instruction called @code{PUSH-NUMBER}
which pushes a constant integer on the stack.  The integer must be in
the range of zero to 511 in order for @code{PUSH-NUMBER} to be used.
Instruction 32 demonstrates the use of @code{SETE-CDR} to compile @code{(setq x
(cdr x))}, and instruction 35 demonstrates the use of @code{SET-NIL} to
compile @code{(setq x nil)}.  Instruction 36 demonstrates the use of
@code{PUSH-E} to compile @code{(variable-location y)}.

The Class III instructions are for branching.  These have neither
addresses nor destinations of the usual sort.  Instead, they have
branch-addresses; they say where to branch, if the branch is going to
happen.  There are several instructions, differing in the conditions
under which they branch and whether they pop the stack.
Branch-addresses are stored internally as self-relative addresses, to
make Lisp Machine code relocatable, but the disassembler does the
addition for you and prints out FEF-relative addresses so that you can
easily see where the branch is going to.

The branch instructions we have seen so far decide whether to branch on
the basis of the @code{nil}-indicator, that is, whether the last value dealt
with was @code{nil} or non-@code{nil}.  @code{BR-NIL} branches if it was @code{nil}, and
@code{BR-NOT-NIL} branches if it was not @code{nil}.  There are two more
instructions that test the result of the @code{atom} predicate on the last
value dealt with.  @code{BR-ATOM} branches if the value was an atom (that is,
if it was anything besides a cons). and @code{BR-NOT-ATOM} branches if the
value was not an atom (that is, if it was a cons).  The @code{BR} instruction
is an unconditional branch (it always branches).

None of the above branching instructions deal with the stack.  There are
two more instructions called @code{BR-NIL-POP} and @code{BR-NOT-NIL-POP}, which
are the same as @code{BR-NIL} and @code{BR-NOT-NIL} except that if the branch is
not done, the top value on the stack is popped off the stack.  These are
used for compiling @code{and} and @code{or} special forms.

Finally, there are the Class IV instructions, most of which are
miscellaneous hand-microcoded Lisp functions. The file @code{SYS: SYS;
DEFMIC LISP} has a list of all the miscellaneous instructions.  Most
correspond to Lisp functions, including the subprimitives, although some
of these functions are very low level internals that may not be
documented anywhere (don't be disappointed if you don't understand all
of them).  Please do not look at this file in hopes of finding obscure
functions that you think you can use to speed up your programs; in fact,
the compiler automatically uses these things when it can, and directly
calling weird internal functions will only serve to make your code hard
to read, without making it any faster.  In fact, we don't guarantee that
calling undocumented functions will continue to work in the future.

The @code{DEFMIC} file can be useful for determining if a given function is in
microcode, although the only definitive way to tell is to compile some
code that uses it and look at the results, since sometimes the compiler
converts a documented function with one name into an undocumented one
with another name.

@section  Function Entry

When a function is first entered in the Lisp Machine, interesting things
can happen because of the features that are invoked by use of the
various lambda-list keywords.  The microcode performs various services when
a function is entered, even before the first instruction of the function
is executed.  These services are called for by various fields of the
header portion of the FEF, including a list called the @i{Argument
Descriptor List}, or @i{ADL}.  We won't go into the detailed format of
any of this, as it is complex and the details are not too interesting.
Disassembling a function that makes use of the ADL prints a summary of
what the ADL says to do, before the beginning of the code.

The function-entry services include the initialization of unsupplied
optional arguments and of @code{&AUX} variables.  The ADL
has a little instruction set of its own, and if the form that computes
the initial value is something simple, such as a constant or a
variable, then the ADL can handle things itself.  However, if things get
too complicated, instructions are needed, and the compiler generates
some instructions at the front of the function to initialize the
unsupplied variables.  In this case, the ADL specifies several different
starting addresses for the function, depending on which optional arguments
have been supplied and which have been omitted.  If all the optional
arguments are supplied, then the ADL starts the function off after all
the instructions that would have initialized the optional arguments;
since the arguments were supplied, their values should not be set, and
so all these instructions are skipped over.  Here's an example:

@lisp
(defvar *y*)

(defun foo (&optional (x (car *y*)) (z (* x 3)))
  (cons x z))
@end lisp

The disassembled code looks like this:

@lisp
Arg 0 (X) is optional, local,
  initialized by the code up to pc 32.
Arg 1 (Z) is optional, local,
  initialized by the code up to pc 35.

30 CAR D-PDL FEF|6            ;*Y*
31 POP ARG|0                  ;X
32 MOVE D-PDL ARG|0           ;X
33 * '3
34 POP ARG|1                  ;Z
35 MOVE D-PDL ARG|0           ;X
36 MOVE D-PDL ARG|1           ;Z
37 (MISC) CONS D-RETURN
@end lisp

If no arguments are supplied, the function will be started at
instruction 30; if only one argument is supplied, it will be started at
instruction 32; if both arguments are supplied, it will be started at
instruction 35.

The thing to keep in mind here is that when there is initialization of
variables, you may see it as code at the beginning of the function, or
you may not, depending upon whether it is too complex for the ADL to handle.
This is true of @code{&aux} variables as well as unsupplied @code{&optional}
arguments.

When there is a @code{&rest} argument, it is passed to the function as the
zeroth local variable, rather than as any of the arguments.  This is not
really so confusing as it might seem, since a @code{&rest} argument is not
an argument passed by the caller; rather it is a list of some of the
arguments, created by the function-entry microcode services.  In any case
the comment tells you what is going on.  In fact, one hardly ever
looks much at the address fields in disassembled code, since the
comment tells you the right thing anyway.  Here is a silly example of the
use of a @code{&rest} argument:

@lisp
(defun prod (&rest values)
  (apply #'* values))
@end lisp

The disassembled code looks like this:

@lisp
20 MOVE D-PDL FEF|6           ;#'*
21 MOVE D-PDL LOCAL|0         ;VALUES
22 (MISC) APPLY D-RETURN
@end lisp

As can be seen, @code{values} is referred to as @code{LOCAL|0}.

Another thing the microcode does at function entry is to bind the
values of any arguments or @code{&aux} variables that are special.
Thus, you won't see any @code{BIND} instructions for binding them.

@section  Special Class IV Instructions

We said earlier that most of the Class IV instructions are miscellaneous
hand-microcoded Lisp functions.  However, a few of them are not Lisp
functions at all.  There are two instructions that are printed as
@code{UNBIND 3 bindings} or @code{POP 7 values}; the number can be
anything up to 16 (these numbers are printed in decimal).  These
instructions just do what they say, unbinding the last @i{n} values that
were bound or popping the top @i{n} values off the stack.

Another Class IV instruction is @code{PUSH-NUMBER}.  It pushes a constant
integer, in the range zero to 511.  An example of it appeared on (push-number-use).

The array referencing functions--@code{aref}, @code{aset}, and @code{aloc}--take
a variable number of arguments, but they are handled differently
depending on how many there are.  For one-, two-, and three-dimensional
arrays, these functions are turned into internal functions with names
@code{ar-1}, @code{as-1}, and @code{ap-1} (with the number of dimensions
substituted for @code{1}).  Again, there is no point in using these
functions yourself; it would only make your code harder to understand
but not any faster at all.  When there are more than three dimensions,
the functions @code{aref}, @code{aset} and @code{aloc} are called in the ordinary
manner.

@lisp
(defun foo (y x i j &aux v)
  (setq v (aref x i j))
  (setf (aref y i) v))
@end lisp

@lisp
16 MOVE D-PDL ARG|1           ;X
17 MOVE D-PDL ARG|2           ;I
20 MOVE D-PDL ARG|3           ;J
21 (MISC) AR-2 D-PDL
22 POP LOCAL|0                ;V
23 MOVE D-PDL ARG|0           ;Y
24 MOVE D-PDL ARG|2           ;I
25 MOVE D-PDL LOCAL|0         ;V
26 (MISC) SET-AR-1 D-RETURN
@end lisp

Reference to one-dimensional arrays with constant subscripts
use special instructions which have the array index encoded instead
of an address.

@lisp
(defun foo (x)
  (+ (aref x 3) (array-leader x 2))
  (setf (aref x 5) t))
@end lisp

@lisp
FOO:
16 MOVE D-PDL ARG|0           ;X
17 AR-1 (3) D-IGNORE
20 MOVE D-PDL ARG|0           ;X
21 ARRAY-LEADER (2) D-IGNORE
22 MOVE D-PDL ARG|0           ;X
23 MOVE D-PDL 'T
24 SET-AR-1 (5) D-RETURN
@end lisp

The @code{AR-1} instruction is to be distinguished from the @code{MISC AR-1}
instruction.  @code{AR-1} pops an array off the stack and encodes the
subscript itself.  The 3 in @code{(3)} is the subscript.  @code{ARRAY-LEADER}
is similar but refers to an array leader slot.  @code{SET-AR-1} pops an
array and then pops a value to store into it at the specified slot.
@code{SET-AR-1} is analogous.  There also exist @code{%INSTANCE-REF} and
@code{SET-%INSTANCE-REF} instructions.

When you call a function and expect to get more than one value back,
a slightly different kind of function calling is used.  Here is an example
that uses @code{multiple-value} to get two values back from a function call:

@lisp
(defun foo (x)
  (let (y z)
    (multiple-value (y z)
      (bar 3))
    (+ x y z)))
@end lisp

The disassembled code looks like this:

@lisp
20 MOVE D-PDL FEF|6           ;#'BAR
21 MOVE D-PDL '2
22 (MISC) %CALL-MULT-VALUE D-IGNORE
23 MOVE D-LAST '3
24 POP LOCAL|1                ;Z
25 POP LOCAL|0                ;Y
26 MOVE D-PDL ARG|0           ;X
27 + LOCAL|0                  ;Y
30 + LOCAL|1                  ;Z
31 MOVE D-RETURN PDL-POP
@end lisp

A @code{%CALL-MULT-VALUE} instruction is used instead of a @code{CALL}
instruction.  The destination field of @code{%CALL-MULT-VALUE} is unused and
will always be @code{D-IGNORE}.  @code{%CALL-MULT-VALUE} takes two ``arguments'',
which it finds on the stack; it pops both of them.  The first one is the
function object to be applied; the second is the number of return values
that are expected.  The rest of the call proceeds as usual, but when the
call returns, the returned values are left on the stack.  The number of
objects left on the stack is always the same as the second ``argument'' to
@code{%CALL-MULT-VALUE}.  In our example, the two values returned are left
on the stack, and they are immediately popped off into @code{z} and @code{y}.
There is also a @code{%CALL0-MULT-VALUE} instruction, for the same
reason @code{CALL0} exists.

The @code{multiple-value-bind} form works similarly; here is an
example:

@lisp
(defun foo (x)
  (multiple-value-bind (y *foo* z)
      (bar 3)
    (declare (special *foo*))
    (+ x y z)))
@end lisp

The disassembled code looks like this:

@lisp
22 MOVE D-PDL FEF|7           ;#'BAR
23 MOVE D-PDL '3
24 (MISC) %CALL-MULT-VALUE D-IGNORE
25 MOVE D-LAST '3
26 POP LOCAL|1                ;Z
27 BIND-POP FEF|6             ;*FOO*
30 POP LOCAL|0                ;Y
31 MOVE D-PDL ARG|0           ;X
32 + LOCAL|0                  ;Y
33 + LOCAL|1                  ;Z
34 MOVE D-RETURN PDL-POP
@end lisp

The @code{%CALL-MULT-VALUE} instruction is still used, leaving the results
on the stack; these results are used to bind the variables.

Calls done with @code{multiple-value-list} work with the @code{%CALL-MULT-VALUE-LIST}
instruction.  It takes one ``argument'' on the stack: the function object
to apply.  When the function returns, the list of values is left on the
top of the stack.  Here is an example:

@lisp
(defun foo (x y)
  (multiple-value-list (bar -7 y x)))
@end lisp

The disassembled code looks like this:

@lisp
22 MOVE D-PDL FEF|6           ;#'BAR
23 (MISC) %CALL-MULT-VALUE-LIST D-IGNORE
24 MOVE D-PDL FEF|7           ;'-7
25 MOVE D-PDL ARG|1           ;Y
26 MOVE D-LAST ARG|0          ;X
27 MOVE D-RETURN PDL-POP
@end lisp

Returning of more than one value from a function is handled
by special miscellaneous instructions.  @code{%RETURN-2} and @code{%RETURN-3} are
used to return two or three values; these instructions take two
and three arguments, respectively, on the stack and return from the
current function just as storing to @code{D-RETURN} would.  If there are more
than three return values, they are all pushed, then the number
that there were is pushed, and then the @code{%RETURN-N} instruction is
executed.  None of these instructions use their destination field.
Note: the @code{return-list} function is just an ordinary miscellaneous
instruction; it takes the list of values to return as an argument on the
stack and returns those values from the current function.

The function @code{apply} is compiled using a special instruction called
@code{%SPREAD} to iterate over the elements of its last argument, which
should be a list.  @code{%SPREAD} takes one argument (on the stack), which
is a list of values to be passed as arguments (pushed on the stack).  If
the destination of @code{%SPREAD} is @code{D-PDL} (or @code{D-NEXT}), then the
values are just pushed; if it is @code{D-LAST}, then after the values are
pushed, the function is invoked.  @code{apply} with more than two arguments
will always compile using a @code{%SPREAD} whose destination is @code{D-LAST}.
Here is an example:

@lisp
(defun foo (a b &rest c)
  (apply #'format t a c)
  b)
@end lisp

The disassembled code looks like this:

@lisp
FOO:
20 CALL D-IGNORE FEF|6        ;#'FORMAT
21 MOVE D-PDL 'T
22 MOVE D-PDL ARG|0           ;A
23 MOVE D-PDL LOCAL|0         ;C
24 (MISC) %SPREAD D-LAST
25 MOVE D-RETURN ARG|1        ;B
@end lisp

Note that in instruction 23, the address @code{LOCAL|0} is used to
access the @code{&rest} argument.

The @code{catch} special form is also handled specially by the compiler.
Here is a simple example of @code{catch}:

@lisp
(defun a ()
  (catch 'foo (bar)))
@end lisp

The disassembled code looks like this:

@lisp
24 MOVE D-PDL FEF|6           ;'30
25 (MISC) %CATCH-OPEN D-RETURN
26 MOVE D-PDL FEF|7           ;'FOO
27 CALL0 D-RETURN FEF|8       ;#'BAR
@end lisp

The @code{%CATCH-OPEN} instruction is like the @code{CALL} instruction; it
starts a call to the @code{catch} function.  It takes one ``argument'' on
the stack, which is the location in the program that should be branched
to if this @code{catch} is @code{throw}n to.  In addition to saving that
program location, the instruction saves the state of the stack and
of special-variable binding so that they can be restored in the event
of a @code{throw}.  So instructions 24 and 25
start a @code{catch} block, and the rest of the function computes the
two arguments of the @code{catch}.  Note, however, that @code{catch}
is not actually called.  The last form inside the @code{catch}, in this case
@code{(bar)}, is compiled so as to return its values directly out of the
function @code{a}.  The only way that the inactive stack frame for @code{catch}
matters is if a @code{throw} is done during the execution of @code{bar}.
This searches for a pending call to @code{catch} and returns from that frame.
In this case, since the @code{%CATCH-OPEN} instruction specifies
@code{D-RETURN}, the values thrown are returned from @code{a}.

You may have wondered why instruction 24 is there at all.
If the destination of a @code{catch} is not @code{D-RETURN}, it is necessary
for @code{throw} to resume execution of the function containing the @code{catch}.
Then it is necessary to specify what instruction to resume at.
For example:

@lisp
(defun a ()
  (catch 'foo (bar))
  (print t))
@end lisp

The disassembled code looks like this:

@lisp
26 MOVE D-PDL FEF|6           ;'32
27 (MISC) %CATCH-OPEN D-IGNORE
30 MOVE D-PDL FEF|7           ;'(BAR)
31 MOVE D-LAST FEF|8          ;'FOO
32 CALL D-RETURN FEF|9        ;#'PRINT
33 MOVE D-LAST 'T
@end lisp

The instruction 26 pushes 32, which is the number of instruction
at which execution should resume if there is a @code{throw}.

To allow compilation of @code{(multiple-value (...) (catch ...))}, there
is a special instruction called @code{%CATCH-OPEN-MULT-VALUE}, which is a
cross between @code{%CATCH-OPEN} and @code{%CALL-MULT-VALUE}.

@chapter Querying the User
@cindex querying the user
@cindex yes-or-no

The following functions provide a convenient and consistent interface for
asking questions of the user.  Questions are printed and the answers are
read on the stream @code{*query-io*}, which normally is synonymous with
@code{*terminal-io*} but can be rebound to another stream for special applications.

The macro @code{with-timeout} (see (with-timeout-fun)) can be used with
the functions in this chapter to assume an answer if the user does
not respond in a fixed period of time.

We first describe two simple functions for yes-or-no questions, then
the more general function on which all querying is built.

@defun y-or-n-p &optional format-string &rest format-args
This is used for asking the user a question whose answer is either `y' for `yes'
or `n' for `no'.  It prints a message by passing @i{format-string} and
@i{format-args} to @code{format}, reads a one-character
answer, echoes it as `@code{Yes}' or `@code{No}', and returns @code{t} if the
answer is `yes' or @code{nil} if the answer is `no'.  The characters which
mean `yes' are `Y', `T', @code{Space}, and @code{Hand-up}.  The characters
which mean "no" are `N', @code{Rubout}, and @code{Hand-down}.  If any other
character is typed, the function beeps and demands a `Y or N' answer.

You should include a question mark and a space at the end of the message.
@code{y-or-n-p} does type `(Y or N)' for you.

@code{*query-io*} is used for all input and output.

@code{y-or-n-p} should be used only for questions that the user knows are
coming.  If the user is not going to be anticipating the question (e.g.
if the question is ``Do you really want to delete all of your files?'' out
of the blue) then @code{y-or-n-p} should not be used, because the user
might type ahead a `T', `Y', `N', @code{Space}, or @code{Rubout}, and
therefore accidentally answer the question.  In such cases, use
@code{yes-or-no-p}.
@end defun

@defun yes-or-no-p &optional format-string &rest format-args
This is used for asking the user a question whose answer is either
`yes' or `no'.  It prints a message by passing @i{format-string} and
@i{format-args} to @code{format}, beeps, and reads in a line
from @code{*query-io*}.  If the line is `yes', it returns @code{t}.
If the line is `no', it returns @code{nil}.  (Case is ignored, as are
leading and trailing spaces and tabs.)  If the input line is anything else,
@code{yes-or-no-p} beeps and demands a `yes or no' answer.

You should include a question mark and a space at the end of the message.
@code{yes-or-no-p} does type `(Yes or No)' for you.

@code{*query-io*} is used for all input and output.

To allow the user to answer a yes-or-no question with a single
character, use @code{y-or-n-p}.  @code{yes-or-no-p} should be
used for unanticipated or momentous questions; this is why it beeps
and why it requires several keystrokes to answer it.
@end defun

@defun fquery options format-string &rest format-args
Asks a question, printed by @code{(format *query-io* @i{format-string} @i{format-args}...)},
and returns the answer.  @code{fquery} takes care of checking for valid answers,
reprinting the question when the user clears the screen, giving help, and so
forth.

@i{options} is a list of alternating keywords and values, used to select among a variety
of features.  Most callers pass a constant list as the @i{options}
(rather than consing up a list whose contents varies).
The keywords allowed are:
@table @code
@item :type
What type of answer is expected.  The currently-defined types are
@code{:tyi} (a single character), @code{:readline} or
@code{:mini-buffer-or-readline} (a line terminated by a carriage return).
@code{:tyi} is the default.  @code{:mini-buffer-or-readline} is nearly
the same as @code{:readline}, the only difference being that the former
uses a minibuffer if used inside the editor. 

@item :choices
Defines the allowed answers.  The allowed forms of choices are complicated and
explained below.  The default is the same set of choices as the @code{y-or-n-p}
function (see above).  Note that the @code{:type} and @code{:choices} options should
be consistent with each other.

@item :list-choices
If @code{t}, the allowed choices are listed (in parentheses) after the question.
The default is @code{t}; supplying @code{nil} causes the choices not to be listed unless
the user tries to give an answer which is not one of the allowed choices.

@item :help-function
Specifies a function to be called if the user hits the @code{Help} key.
The default help-function simply lists the available choices.
Specifying @code{nil} disables special treatment of @code{Help}.
Specifying a function of three arguments--the stream, the list of choices,
and the type-function--allows smarter help processing.  The type-function
is the internal form of the @code{:type} option and can usually be ignored.

@item :condition
If non-@code{nil}, a signal name (see (signal-name)) to be signaled
before asking the question.  A condition handler may handle the
condition, specifying an answer for @code{fquery} to return, in which case
the user is not asked.  The details are given below.  The default
signal name is @code{:fquery}, which signals condition name @code{:fquery}.

@item :fresh-line
If @code{t}, @code{*query-io*} is advanced to a fresh line before asking the question.
If @code{nil}, the question is printed wherever the cursor was left by previous typeout.
The default is @code{t}.

@item :beep
If @code{t}, @code{fquery} beeps to attract the user's attention to the question.
The default is @code{nil}, which means not to beep unless the user tries to
give an answer which is not one of the allowed choices.

@item :stream
The value should be either an I/O stream or a symbol or expression
that will evaluate to one.  @code{fquery} uses the specified stream
instead of @code{*query-io*} for all its input and output.

@item :clear-input
If @code{t}, @code{fquery} throws away type-ahead before reading the user's response
to the question.  Use this for unexpected questions.  The default is @code{nil},
which means not to throw away type-ahead unless the user tries to
give an answer which is not one of the allowed choices.  In that case, type-ahead
is discarded since the user probably wasn't expecting the question.

@item :make-complete
If @code{t} and @code{*query-io*} is a typeout-window, the window is ``made complete''
after the question has been answered.  This tells the system that the contents
of the window are no longer useful.  Refer to the window system documentation
for further explanation.  The default is @code{t}.
@end table

The argument to the @code{:choices} option is a list each of whose elements is
a @i{choice}.  The cdr of a choice is a list of the user inputs which correspond
to that choice.  These should be characters for @code{:type :tyi} or strings
for @code{:type :readline}.  The car of a choice is either a symbol which @code{fquery}
should return if the user answers with that choice, or a list whose first element
is such a symbol and whose second element is the string to be echoed when the
user selects the choice.  In the former case nothing is echoed.
In most cases @code{:type :readline} would use the first
format, since the user's input has already been echoed, and @code{:type :tyi} would
use the second format, since the input has not been echoed and furthermore is
a single character, which would not be mnemonic to see on the display.

A choice can also be the symbol @code{:any}.  If used, it must be the
last choice.  It means that any input is allowed, and should simply be
returned as a string or character if it does not match any of the
other choices.

Perhaps this can be clarified by example.  The @code{yes-or-no-p} function uses
this list of choices:
@lisp
((t "Yes") (nil "No"))
@end lisp
and the @code{y-or-n-p} function uses this list:
@lisp
(((t "Yes.") #\y #\t #\space #\hand-up)
 ((nil "No.") #\n #\rubout #\hand-down))
@end lisp

If a signal name is specified (or allowed to default to @code{:fquery}),
before asking the question @code{fquery} will signal it.  (See (condition)
for information about conditions.)  @code{make-condition} will receive, in
addition to the signal name, all the arguments given to @code{fquery},
including the list of options, the format string, and all the format
arguments.  @code{fquery} provides one proceed type, @code{:new-value}, and if
a condition handler proceeds, the argument it proceeds with is returned
by @code{fquery}.

If you want to use the formatted output functions instead of @code{format} to produce the
promting message, write
@lisp
(fquery @i{options} (format:outfmt @i{exp-or-string} @i{exp-or-string} ...))
@end lisp
@code{format:outfmt} puts the output into a list of a string, which makes @code{format}
print it exactly as is.  There is no need to supply additional arguments to the
@code{fquery} unless it signals a condition.  In that case the arguments might be passed so
that the condition handler can see them.  The condition handler will receive a list
containing one string, the message, as its third argument instead of just a string.  If
this argument is passed along to @code{format}, all the right things happen.
@end defun

.defcondition fquery (@code{condition})
This condition is signaled, by default, by @code{fquery}.
The condition instance supports these operations:
@table @code
@item :options
Returns the list of options given to @code{fquery}.
@item :format-string
Returns the format string given to @code{fquery}.
@item :format-args
Returns the list of additional args for format, given to @code{fquery}.
@end table

One proceed type is provided, @code{:new-value}.  It should be used with a
single argument, which will be returned by @code{fquery} in lieue of asking
the user.
.end_defcondition

.defconst format:y-or-n-p-options
A suitable list to pass as the first argument to @code{fquery} to make
it behave like @code{y-or-n-p}.
.end_defconst

.defconst format:yes-or-no-p-options
A suitable list to pass as the first argument to @code{fquery} to make
it behave like @code{yes-or-no-p}.
.end_defconst

.defconst format:y-or-n-p-choices
A list which @code{y-or-n-p} uses as the value of the @code{:choices} option.
.end_defconst

@chapter Initializations
@cindex initialization

There are a number of programs and facilities in the Lisp Machine that require
that ``initialization routines'' be run either when the facility is first loaded, or when
the system is booted, or both.  These initialization routines may set up data structures,
start processes running, open network connections, and so on.

It is easy to perform an action when a file is loaded: simply place an expression
to perform the action in the file.  But this causes the action to be repeated
if the file is loaded a second time, and often that should not be done.
Also, this does not provide a way to cause actions to be taken at other times,
such as when the system is booted or when a garbage collection is started.

The @i{initialization list} facility serves these needs.  An
initialization list is a symbol whose value is a list of
@i{initializations}, put on by various programs, all to be performed
when a certain event (such as a cold boot) happens.  When the event
occurs, the system function in charge of handling the event
(@code{si:lisp-reinitialize}, for cold boot) executes all the
initializations on the appropriate list, in the order they are present
on the list.

Each initialization has a name, a form to be evaluated, a flag saying
whether the form has yet been evaluated, and the source file of the
initialization, if any.  The name is a string or a symbol and lies in
the car of an initialization; thus @code{assoc} may be used on
initialization lists to find particular initializations.

System and user files place initializations on initialization lists
using the function @code{add-initialization}.  The name of the
initialization is specified so that the system can distinguish between
adding a new initialization and repeating or changing the definition of
an initialization already known: if there is already an initialization
with the specified name, this is a new definition of the same
initialization.  One can specify that the initialization
be executed immediately if it is new but not if it is repeated.

User programs are free to create their own initialization lists to be run
at their own times.

@section  System Initialization Lists

There are several initialization lists built into the system.
Each one is invoked by the system at a specific time, such as
immediately after a cold boot, or during @code{disk-save}.
A user program can put initializations on these lists to cause
actions to be taken at those times as the program needs.
This avoids the need to modify system functions such as
@code{lisp-reinitialize} or @code{disk-save} in order to make them interact
properly with the user program.

The system initialization lists are generally identified by keywords
rather than by their actual names.  We name them here by their keywords.
In each case, the actual initialization list symbol is in the @code{si}
package, and its name is the conventional keyword followed by
`-initialization-list'.  Thus, for @code{:cold}, there is
@code{si:cold-initialization-list}.  This is just a convention.

Unless otherwise specified, an initialization added to a system list
is not run when it is added, only when the appropriate event happens.
A few system lists are exceptions and also run each initialization
when it is added.  Such exceptions are noted explicitly.

     The @code{:once} initialization list is used for initializations that
need to be done only once when the subsystem is loaded and must never be
done again.  For example, there are some databases that need to be
initialized the first time the subsystem is loaded, but should not be
reinitialized every time a new version of the software is loaded into a
currently running system.  This list is for that purpose.  When
a new initialization is added to this list, it is executed immediately;
but when an initialization is redefined, it is not executed again.

     The @code{:cold} initialization list is used for things that must be
run once at cold-boot time.  The initializations on this list are run
after the ones on @code{:system} but before the ones on the @code{:warm} list.

     The @code{:warm} initialization list is used for things which must be
run every time the machine is booted, including warm boots.  The
function that prints the greeting, for example, is on this list.  For cold
boots, the @code{:cold} initializations are done before the @code{:warm} ones.

     The @code{:system} initialization list is like the @code{:warm} list but
its initializations are run @i{before} those of the @code{:cold} list.
These are generally very fundamental system initializations that must be
done before the @code{:cold} or @code{:warm} initializations can work.
Initializing the process and window systems, the file system, and the
Chaosnet NCP falls in this category.  By default, a new initialization
added to this list is run immediately also.  In general, the system list
should not be touched by user subsystems, though there may be cases when
it is necessary to do so.

	The @code{:before-cold} initialization list is used for things to
be run by @code{disk-save}.  Thus they happen essentially at cold boot
time, but only once when the world is saved, not each time it is started
up.

	The @code{:site} initialization list is run every time a new site
table and host table are loaded by @code{update-site-configuration-info}.
By default, adding an initialization
to this list runs the initialization immediately, even if the
initialization is not new.

	The @code{:site-option} initialization list is run every time the
site options may have changed; that is, when a new site tables are
loaded or after a cold boot (to see the per-machine options of the
machine being booted on).  By default, adding an initialization
to this list runs the initialization immediately, even if the
initialization is not new.

	The @code{:full-gc} initialization list is run by the function
@code{si:full-gc} just before garbage collecting.  Initializations might be
put on this list to discard pointers to bulky objects, or to turn copy
lists into cdr-coded form so that they will remain permanently
localized.

	The @code{:after-flip} initialization list is run after every
garbage collection flip, at the beginning of scavenging.  These initializations
can force various objects to be copied into new space near each other
simply by referencing them all consecutively.

	The @code{:after-full-gc} initialization list is run by the function
@code{si:full-gc} just after a flip is done, but before scavenging.

	The @code{:login} and @code{:logout} lists are run by the @code{login} and
@code{logout} functions (see (login-fun)) respectively.  Note that @code{disk-save}
calls @code{logout}.  Also note that often people don't call @code{logout}; they
just cold-boot the machine.

@section  Programming Initializations

@defun add-initialization name form &optional list-of-keywords initialization-list-name
Adds an initialization called @i{name} with the form @i{form} to the initialization list
specified either by @i{initialization-list-name} or by keyword.  If the initialization
list already contains an initialization called @i{name},
it is redefined to execute @i{form}.

@i{initialization-list-name}, if specified, is a symbol that has as its
value the initialization list.  If it is void, it is initialized (!)
to @code{nil}, and is given a @code{si:initialization-list} property of @code{t}.
If a keyword specifies an initialization list,
@i{initialization-list-name} is ignored and should not be specified.

The keywords allowed in @i{list-of-keywords} are of two kinds.  Most
specify the initialization list to use; a list of such keywords makes up
most of the previous section.  Aside from them, four other keywords are
allowed, which specify when to evaluate @i{form}.  They are called
the @i{when-keywords}.  Here is what they mean:
@table @code
@item :normal
'kindex :normal add-initialization
Only place the form on the list.  Do not evaluate it until the time comes to do
this kind of initialization.  This is the default unless @code{:system}, @code{:once},
@code{:site} or @code{:site-option} is specified.
@item :first
'kindex :first add-initialization
Evaluate the form now if it is not flagged as having been evaluated before.
This is the default if @code{:system} or @code{:once} is specified.
@item :now
'kindex :now add-initialization
Evaluate the form now unconditionally as well as adding it to the list.
@item :redo
'kindex :redo add-initialization
Do not evaluate the form now, but set the flag to @code{nil} even if the initialization
is already in the list and flagged @code{t}.
@end table

Actually, the keywords are compared with @code{string-equal} and may be in any
package.  If both kinds of keywords are used, the list keyword should come
@i{before} the when-keyword in @i{list-of-keywords}; otherwise the list keyword
may override the when-keyword.

The @code{add-initialization} function keeps each list ordered so that
initializations added first are at the front of the list.  Therefore, by
controlling the order of execution of the additions, you can control
explicit dependencies on order of initialization.  Typically, the order
of additions is controlled by the loading order of files.  The system
list is the most critically ordered of the predefined
lists.
@end defun

The @code{add-initialization} keywords that specify an initialization list
are defined by a variable; you can add new keywords to it.

@defvar si:initialization-keywords
Each element on this list defines the keyword for one initialization
list.  Each element is a list of two or three elements.  The first is
the keyword symbol that names the initialization list.  The second is a
special variable, whose value is the initialization list itself.  The
third, if present, is a symbol defining the default ``time'' at which
initializations added to this list should be evaluated; it should be
@code{si:normal}, @code{si:now}, @code{si:first}, or @code{si:redo}.  This third
element just acts as a default; if the list of keywords passed to
@code{add-initialization} contains one of the keywords @code{normal}, @code{now},
@code{first}, or @code{redo}, it overrides this default.  If the third
element is not present, it is as if the third element were
@code{si:normal}.
@end defvar

@defun delete-initialization name &optional keywords initialization-list-name
Removes the specified initialization from the specified initialization list.
Keywords may be any of the list options allowed by @code{add-initialization}.
@end defun

@defun initializations initialization-list-name &optional redo-flag flag-value
Performs the initializations in the specified list.  @i{redo-flag} controls
whether initializations that have already been performed are re-performed;
@code{nil} means no, non-@code{nil} is yes, and the default is @code{nil}.  @i{flag-value} is the
value to be bashed into the flag slot of an entry.  If it is unspecified, it
defaults to @code{t}, meaning that the system should remember that the initialization
has been done.  The reason that there is no convenient way for you to
specify one of the specially-known-about lists is that you shouldn't
be calling @code{initializations} on them.  This is done by the system
when it is appropriate.
@end defun

@defun reset-initializations initialization-list-name
Bashes the flag of all entries in the specified list to @code{nil}, thereby causing
them to get rerun the next time the function @code{initializations} is called on
the initialization list.
@end defun

@chapter Dates and Times
@cindex dates and times
@cindex times and dates

The @code{time} package contains a set of functions for manipulating dates and
times: finding the current time, reading and printing dates and times,
converting between formats, and other miscellany regarding peculiarities
of the calendar system.  It also includes functions for accessing the
Lisp Machine's microsecond timer.

Times are represented in two different formats by the functions in the
@code{time} package.  One way is to represent a time by many numbers,
indicating a year, a month, a date, an hour, a minute, and a second
(plus, sometimes, a day of the week and timezone).  If a year less than
100 is specified, a multiple of 100 is added to it to bring it within
50 years of the present.  Year numbers returned by the
time functions are greater than 1900.  The month is 1 for January, 2 for
February, etc.  The date is 1 for the first day of a month.  The hour is
a number from 0 to 23.  The minute and second are numbers from 0 to 59.
Days of the week are fixnums, where 0 means Monday, 1 means Tuesday, and
so on.  A timezone is specified as the number of hours west of GMT; thus
in Massachusetts the timezone is 5.  Any adjustment for daylight savings
time is separate from this.

@cindex universal time

This ``decoded'' format is convenient for printing out times into a readable
notation, but it is inconvenient for programs to make sense of these numbers
and pass them around as arguments (since there are so many of them).  So there
is a second representation, called Universal Time, which measures a time as the
number of seconds since January 1, 1900, at midnight GMT.  This ``encoded'' format
is easy to deal with inside programs, although it doesn't make much sense to
look at (it looks like a huge integer).  So both formats are provided; there are
functions to convert between the two formats; and many functions exist in two
versions, one for each format.

The Lisp Machine hardware includes a timer that counts once every
microsecond.  It is controlled by a crystal and so is fairly accurate.
The absolute value of this timer doesn't mean anything useful, since it
is initialized randomly; what you do with the timer is to read it at the
beginning and end of an interval, and subtract the two values to get the
length of the interval in microseconds.  These relative times allow you to time
intervals of up to an hour (32 bits) with microsecond accuracy.

The Lisp Machine keeps track of the time of day by maintaining a
@i{timebase}, using the microsecond clock to count off the seconds.
On the CADR, when the machine first comes up, the timebase is
initialized by querying hosts on the Chaosnet to find out the
current time.  The Lambda has a calendar clock which never stops,
so it normally does not need to do this.  You can also set the
time base using @code{time:set-local-time}, described below.

There is a similar timer that counts in 60ths of a second rather than
microseconds; it is useful for measuring intervals of a few seconds or
minutes with less accuracy.  Periodic housekeeping functions of the system
are scheduled based on this timer.

@section  Getting and Setting the Time

@defun get-decoded-time
@defunx time:get-time
Gets the current time, in decoded form.  Return seconds, minutes, hours, date,
month, year, day-of-the-week, and daylight-savings-time-p, with the same
meanings as @code{decode-universal-time} (see (decode-universal-time-fun)).
If the current time is not known, @code{nil} is returned.

The name @code{time:get-time} is obsolete.
@end defun

@defun get-universal-time
Returns the current time in Universal Time form.
@end defun

@defun time:set-local-time &optional new-time
Sets the local time to @i{new-time}.  If @i{new-time} is
supplied, it must be either a universal time or a suitable
argument to @code{time:parse-universal-time} (see
(time:parse-universal-time-fun)).  If it is not supplied, or if
there is an error parsing the argument, you are prompted for the
new time.  Note that you will not normally need to call this
function; it is useful mainly when the timebase gets screwed up
for one reason or another.
@end defun

@subsection Elapsed Time in 60ths of a Second
@cindex 60ths of a second

The following functions deal with a different kind of time.  These are not
calendrical date/times, but simply elapsed time in 60ths of a second.  These
times are used for many internal purposes where the idea is to measure a small
interval accurately, not to depend on the time of day or day of month.

@defun time
Returns a number that increases by 1 every 60th of a second.  The value
wraps around roughly once a day.  Use the @code{time-lessp} and
@code{time-difference} functions to avoid getting in trouble due to the
wrap-around.  @code{time} is completely incompatible with the Maclisp
function of the same name.

Note that @code{time} with an argument measures the length of time
required to evaluate a form.  See (time-fun-2).
@end defun

@defun get-internal-run-time
@defunx get-internal-real-time
Returns the total time in 60ths of a second since the last boot.
This value does not wrap around.  Eventually it becomes a bignum.
The Lisp Machine does not distinguish between run time and real time.
@end defun

.defconst internal-time-units-per-second
According to Common Lisp, this is the ratio between a second and the
time unit used by values of @code{get-internal-real-time}.  On the Lisp
Machine, the value is 60.  The value may be different in other Common
Lisp implementations.
.end_defconst

@defun time-lessp time1 time2
@code{t} if @i{time1} is earlier than @i{time2}, compensating for
wrap-around, otherwise @code{nil}.
@end defun

@defun time-difference time1 time2
Assuming @i{time1} is later than @i{time2}, returns the number of 60ths
of a second difference between them, compensating for wrap-around.
@end defun

@defun time-increment time interval
Increments @i{time} by @i{interval}, wrapping around if appropriate.
@end defun

@subsection Elapsed Time in Microseconds
@cindex microseconds

@defun time:microsecond-time
Returns the value of the microsecond timer, as a bignum.  The values
returned by this function wrap around back to zero about once per hour.
@end defun

@defun time:fixnum-microsecond-time
Returns as a fixnum the value of the low 23 bits of the microsecond timer.
This is like @code{time:microsecond-time}, with the advantage that
it returns a value in the same format as the @code{time} function, except
in microseconds rather than 60ths of a second.  This means that you can
compare fixnum-microsecond-times with @code{time-lessp} and
@code{time-difference}.  @code{time:fixnum-microsecond-time} is also a bit
faster, but has the disadvantage that since you only see the low bits of
the clock, the value can wrap around more quickly (about every eight seconds).
Note that the Lisp Machine garbage collector is so designed that the
bignums produced by @code{time:microsecond-time} are garbage-collected
quickly and efficiently, so the overhead for creating the bignums is
really not high.
@end defun

@section  Printing Dates and Times

The functions in this section create printed representations of times and
dates in various formats and send the characters to a stream.  To any
of these functions, you may pass @code{nil} as the @i{stream} parameter
and the function will return a string containing the printed representation
of the time, instead of printing the characters to any stream.

The three functions @code{time:print-time},
@code{time:print-universal-time},
@code{time:print-brief-universal-time} and
@code{time:print-current-time} accept an argument called
@i{date-print-mode}, whose purpose is to control how the date is
printed.  It always defaults to the value of
@code{time:*default-date-print-mode*}.  Possible values include:
@table @code
@item :dd//mm//yy
Print the date as in `3/16/53'.
@item :mm//dd//yy
Print as in `16/3/53'.
@item :dd-mm-yy
Print as in `16-3-53'.
@item :dd-mmm-yy
Print as in `16-Mar-53'.
@item :|dd mmm yy|
Print as in `16 Mar 53'.
@item :ddmmmyy
Print as in `16Mar53'.
@item :yymmdd
Print as in `530316'.
@item :yymmmdd
Print as in `53Mar16'.
@end table

@defun time:print-current-time &optional (stream @code{*standard-output*})
Prints the current time, formatted as in @code{11/25/80 14:50:02}, to
the specified stream.  The date portion may be printed differently
according to the argument @i{date-print-mode}.
@end defun

@defun time:print-time seconds minutes hours date month year &optional (stream @code{*standard-output*}) date-print-mode
Prints the specified time, formatted as in @code{11/25/80 14:50:02}, to
the specified stream.  The date portion may be printed differently
according to the argument @i{date-print-mode}.
@end defun

@defun time:print-universal-time universal-time &optional (stream @code{*standard-output*}) (timezone @code{time:*timezone*}) date-print-mode
Prints the specified time, formatted as in @code{11/25/80 14:50:02}, to the specified stream.  The date portion may be printed differently
according to the argument @i{date-print-mode}.
@end defun

@defun time:print-brief-universal-time universal-time &optional (stream @code{*standard-output*}) reference-time date-print-mode
This is like @code{time:print-universal-time} except that it omits seconds and
only prints those parts of @i{universal-time} that differ from
@i{reference-time}, a universal time that defaults to the current time.
Thus the output is in one of the following three forms:
@lisp
02:59		;1the same day*
3/4 14:01	;1a different day in the same year*
8/17/74 15:30	;1a different year*
@end lisp

The date portion may be printed differently
according to the argument @i{date-print-mode}.
@end defun

@defvar time:*default-date-print-mode*
Holds the default for the @i{date-print-mode} argument to each
of the functions above.  Initially the value here is @code{:mm//dd/yy}.
@end defvar

@defun time:print-current-date &optional (stream @code{*standard-output*})
Prints the current time, formatted as in @code{Tuesday the twenty-fifth of
November, 1980; 3:50:41 pm}, to the specified stream. 
@end defun

@defun time:print-date seconds minutes hours date month year day-of-the-week &optional (stream @code{*standard-output*})
Prints the specified time, formatted as in @code{Tuesday the twenty-fifth of
November, 1980; 3:50:41 pm}, to the specified stream.
@end defun

@defun time:print-universal-date universal-time &optional (stream @code{*standard-output*}) (timezone @code{time:*timezone*})
Prints the specified time, formatted as in @code{Tuesday the twenty-fifth of
November, 1980; 3:50:41 pm}, to the specified stream.
@end defun

@section  Reading Dates and Times

These functions accept most reasonable printed representations of date and time
and convert them to the standard internal forms.  The following are
representative formats that are accepted by the parser.  Note that
slashes are escaped with additional slashes, as is necessary if
these strings are input in traditional syntax.

@lisp
"March 15, 1960"      "3//15//60"   "3//15//1960"
"15 March 1960"       "15//3//60"   "15//3//1960"
"March-15-60"         "3-15-60"     "3-15-1960"
"15-March-60"         "15-3-60"     "15-3-1960"
"15-Mar-60"           "3-15"        "15 March 60"
"Fifteen March 60"    "The Fifteenth of March, 1960;"
"Friday, March 15, 1980"

"1130."     "11:30"     "11:30:17"  "11:30 pm"
"11:30 AM"  "1130"      "113000"
"11.30"     "11.30.00"  "11.3"      "11 pm"

"12 noon"   "midnight"  "m"    "6:00 gmt"  "3:00 pdt"

   1any date format may be used with any time format*

"One minute after March 3, 1960"
   1meaning one minute after midnight*
"Two days after March 3, 1960"
"Three minutes after 23:59:59 Dec 31, 1959"

"Now"     "Today"     "Yesterday"   "five days ago"
"two days after tomorrow"   "the day after tomorrow"         
"one day before yesterday"  "BOB@@OZ's birthday"
@end lisp

@defun time:parse string &optional (start @code{0}) (end @code{nil}) (futurep @code{t}) base-time must-have-time date-must-have-year time-must-have-second (day-must-be-valid @code{t})
Interpret @i{string} as a date and/or time, and return seconds, minutes,
hours, date, month, year, day-of-the-week, daylight-savings-time-p, and relative-p.
@i{start} and @i{end} delimit a substring
of the string; if @i{end} is @code{nil}, the end of the string is used.
@i{must-have-time} means that @i{string} must not be empty.
@i{date-must-have-year} means that a year must be explicitly specified.
@i{time-must-have-second} means that the second must be specified.
@i{day-must-be-valid} means that if a day of the week is given, then it
must actually be the day that corresponds to the date.  @i{base-time} provides
the defaults for unspecified components; if it is @code{nil}, the current time
is used.  @i{futurep} means that the time should be interpreted as being
in the future; for example, if the base time is 5:00 and the string refers
to the time 3:00, that means the next day if @i{futurep} is non-@code{nil}, but
it means two hours ago if @i{futurep} is @code{nil}.  The @i{relative-p}
returned value is @code{t} if the string included a relative part, such
as `one minute after' or `two days before' or `tomorrow' or `now'; otherwise,
it is @code{nil}.

If the input is not valid, the error condition @code{sys:parse-error}
is signaled (see (sys:parse-error-condition)).
@end defun

@defun time:parse-universal-time string &optional (start @code{0}) (end @code{nil}) (futurep @code{t}) base-time must-have-time date-must-have-year time-must-have-second (day-must-be-valid @code{t})
This is the same as @code{time:parse} except that it returns two
values: an integer, representing the time in Universal Time, and
the @i{relative-p} value.
@end defun

@section  Reading and Printing Time Intervals

In addition to the functions for reading and printing instants of time,
there are other functions specifically for printing time intervals.  A
time interval is either a number (measured in seconds) or @code{nil},
meaning `never'.  The printed representations used look like `3 minutes
23 seconds' for actual intervals, or `Never' for @code{nil} (some other
synonyms and abbreviations for `never' are accepted as input).

@defun time:print-interval-or-never interval &optional (stream @code{*standard-output*})
@i{interval} should be a non-negative fixnum or @code{nil}.
Its printed representation as a time interval is written onto
@i{stream}.
@end defun

@defun time:parse-interval-or-never string &optional start end
Converts @i{string}, a printed representation for a time interval, into
a number or @i{nil}.  @i{start} and @i{end} may be used to specify a
portion of @i{string} to be used; the default is to use all of
@i{string}.  It is an error if the contents of string do not look like a
reasonable time interval.  Here are some examples of acceptable strings:

@lisp
"4 seconds"       "4 secs"          "4 s"
"5 mins 23 secs"  "5 m 23 s"        "23 SECONDS 5 M"
           "3 yrs 1 week 1 hr 2 mins 1 sec"
"never"           "not ever"        "no"              ""
@end lisp

Note that several abbreviations are understood, the components may be in
any order, and case (upper versus lower) is ignored.  Also, ``months'' are
not recognized, since various months have different lengths and there is
no way to know which month is being spoken of.  This function
always accepts anything that was produced by @code{time:print-interval-or-never};
furthermore, it returns exactly the same fixnum (or @code{nil}) that
was printed.
@end defun

@defun time:read-interval-or-never &optional (stream @code{*standard-input*})
Reads a line of input from @i{stream} (using @code{readline}) and
then calls @code{time:parse-interval-or-never} on the resulting string.
@end defun

@section  Time Conversions

@defun decode-universal-time universal-time &optional (timezone @code{time:*timezone*})
Converts @i{universal-time} into its decoded representation.  The
following values are returned: seconds, minutes, hours, date, month,
year, day-of-the-week, daylight-savings-time-p, and the timezone used.
@i{daylight-savings-time-p} tells you whether or not
daylight savings time is in effect; if so, the value of @i{hour} has been
adjusted accordingly.  You can specify @i{timezone} explicitly if you
want to know the equivalent representation for this time in other parts
of the world.
@end defun

@defun encode-universal-time seconds minutes hours date month year &optional timezone
Converts the decoded time into Universal Time format, and return the
Universal Time as an integer.  If you don't specify @i{timezone}, it
defaults to the current timezone adjusted for daylight savings time; if
you provide it explicitly, it is not adjusted for daylight savings time.
If @i{year} is less than 100, it is shifted by centuries until it is
within 50 years of the present.
@end defun

@defvar time:*timezone*
The value of @code{time:*timezone*} is the time zone in which this Lisp Machine
resides, expressed in terms of the number of hours west of GMT this time
zone is.  This value does not change to reflect daylight savings time; it
tells you about standard time in your part of the world.
@end defvar

@section  Internal Functions

These functions provide support for those listed above.  Some user programs
may need to call them directly, so they are documented here.

@defun time:initialize-timebase
Initializes the timebase by querying Chaosnet hosts to find out the
current time.  This is called automatically during system initialization.
You may want to call it yourself to correct the time if it appears to be
inaccurate or downright wrong.  See also @code{time:set-local-time},
(time:set-local-time-fun).
@end defun

@defun time:daylight-savings-time-p hours date month year
Returns @code{t} if daylight savings time is in effect for the specified
hour; otherwise, return @code{nil}. 
If @i{year} is less than 100, it is shifted by centuries until it is
within 50 years of the present.
@end defun

@defun time:daylight-savings-p
Returns @code{t} if daylight savings time is currently in effect; otherwise,
returns @code{nil}.
@end defun

@defun time:month-length month year
Returns the number of days in the specified @i{month}; you must supply
a @i{year} in case the month is February (which has a different length
during leap years).
If @i{year} is less than 100, it is shifted by centuries until it is
within 50 years of the present.
@end defun

@defun time:leap-year-p year
Returns @code{t} if @i{year} is a leap year; otherwise return @code{nil}.
If @i{year} is less than 100, it is shifted by centuries until it is
within 50 years of the present.
@end defun

@defun time:verify-date date month year day-of-the-week
If the day of the week of the date specified by @i{date}, @i{month}, and
@i{year} is the same as @i{day-of-the-week}, returns @code{nil}; otherwise,
returns a string that contains a suitable error message.
If @i{year} is less than 100, it is shifted by centuries until it is
within 50 years of the present.
@end defun

@defun time:day-of-the-week-string day-of-the-week &optional (mode @code{:long})
Returns a string representing the day of the week.  As usual, @code{0} means
Monday, @code{1} means Tuesday, and so on.  Possible values of @i{mode}
are:
@table @code
@item :long
Returns the full English name, such as @code{"Monday"}, @code{"Tuesday"}, etc.  This
is the default.
@item :short
Returns a three-letter abbreviation, such as @code{"Mon"}, @code{"Tue"}, etc.
@item :medium
Returns a longer abbreviation, such as @code{"Tues"} and @code{"Thurs"}.
@item :french
Returns the French name, such as @code{"Lundi"}, @code{"Mardi"}, etc.
@item :german
Returns the German name, such as @code{"Montag"}, @code{"Dienstag"}, etc.
@item :italian
Returns the Italian name, such as @code{"Lunedi"}, @code{"Martedi"}, etc.
@end table
@end defun

@defun time:month-string month &optional (mode @code{:long})
Returns a string representing the month of the year.  As usual, @code{1} means January,
@code{2} means February, etc.  Possible values of @i{mode} are:
@table @code
@item :long
Returns the full English name, such as @code{"January"}, @code{"February"}, etc.  This
is the default.
@item :short
Returns a three-letter abbreviation, such as @code{"Jan"}, @code{"Feb"}, etc.
@item :medium
Returns a longer abbreviation, such as @code{"Sept"}, @code{"Novem"}, and @code{"Decem"}.
@item :roman
Returns the Roman numeral for @i{month} (this convention is used in Europe).
@item :french
Returns the French name, such as @code{"Janvier"}, @code{"Fevrier"}, etc.
@item :german
Returns the German name, such as @code{"Januar"}, @code{"Februar"}, etc.
@item :italian
Returns the Italian name, such as @code{"Gennaio"}, @code{"Febbraio"}, etc.
@end table
@end defun

@defun time:timezone-string &optional (timezone @code{time:*timezone*}) (daylight-savings-p @code{(time:daylight-savings-p)})
Return the three-letter abbreviation for this time zone.  For example, if
@i{timezone} is @code{5}, then either @code{"EST"} (Eastern Standard Time) or @code{"CDT"}
(Central Daylight Time) is used, depending on @i{daylight-savings-p}.
@end defun

@chapter Miscellaneous Useful Functions

This chapter describes a number of functions that don't logically fit in anywhere else.
Most of these functions are not normally used in programs, but are ``commands'', i.e.
things that you type directly at Lisp.

@section  Documentation

@defun documentation name doc-type
Returns the documentation string of @i{name} in the role @i{doc-type}.
@i{doc-type} should be a symbol, but only its print-name matters.
@code{function} as @i{doc-type} requests the documentation of @i{name}
as a function, @code{variable} as @i{doc-type} requests the documentation of
@i{name} as a variable, and so on.

When @i{doc-type} is @code{function}, @i{name} can be any function spec,
and the documentation string of its function definition is returned.
Otherwise, @i{name} must be a symbol, and @i{doc-type} may be anything.
However, only these values of @i{doc-type} are standardly used:
@table @code
@item variable
Documentation of @i{name} as a special variable.  Such documentation is
recorded automatically by @code{defvar}, @code{defconst}, @code{defconstant},
@code{defparameter} ((defvar-fun)).
@item type
Documentation of @i{name} as a type for @code{typep}.  Recorded
automatically when a documentation string is given in a @code{deftype}
form ((deftype-fun)).
@item structure
Documentation of @i{name} as a @code{defstruct} type.
Recorded automatically by a @code{defstruct} for @i{name} ((defstruct)).
@item setf
Documentation on what it means to @code{setf} a form
that starts with @i{name}.
Recorded when there is a documentation string in a @code{defsetf} of @i{name}
((defsetf-fun)).
@item flavor
Documentation of the flavor named @i{name}.
Put on by the @code{:documentation} option in a @code{defflavor} for @i{name}
((defflavor-fun)).
@item resource
Documentation of the resource named @i{name}.
Put on when there is a documentation string in a @code{defresource} of @i{name}
((defresource-fun)).
@item signal
Documentation for @i{name} as a signal name.
Put on when there is a documentation string in a @code{defsignal} or @code{defsignal-explicit}
for @i{name} ((defsignal-fun)).
@end table

Documentation strings for any @i{doc-type} can be added to @i{name}
by doing @code{(setf (documentation @i{name} @i{doc-type}) @i{string})}.
@end defun

The command @code{Control-Shift-D} in Zmacs and the rubout handler, used
within a call to a function, prints the documentation of that function.
@code{Control-Shift-V}, within a symbol, prints the documentation of that
symbol as a variable.

@section  Hardcopy

The hardcopy functions allow you to specify the printer to use on each
call.  The default is set up by the site files for your site, but can be
overridden for a particular machine in the @code{LMLOCS} file or by a user
in his INIT file.  Any kind of printer can be used, no matter how it is
actually driven, if it is hooked into the software properly as described below.

A @i{printer-type} is a keyword that has appropriate properties;
a @i{printer} is either a printer-type or a list starting with one.
The rest of the list can specify @i{which} printer of that type you want
to use (perhaps with a host name or filename).

The printer types defined by the system are:
@table @strong
@item :dover printer-type
This printer type is used by itself as a printer, and refers to the
Dover at MIT.

@item :xgp printer-type
This printer type indicates a printer that is accessed by writing spool
files in MIT XGP format.  A printer would be specified as a list,
@code{(:xgp @i{filename})}, specifying where to write the spool file.

@item :press-file printer-type
This printer type is used in a list together with a file name, as in
@code{(:press-file "OZ:<RMS>FOO.PRESS")}.  Something is ``printed'' on such
a printer by being converted to a press file and written under that
name.
@end table

@defun hardcopy-file filename &rest options
Print the file @i{filename} in hard copy on the specified printer or the
default printer.  @i{options} is a list of keyword argument names and
values.  There are only two keywords that are always meaningful:
@code{:format} and @code{:printer}.  Everything else is up to the individual
printer to interpret.  The list here is only a paradigm or suggestion.

@table @code
@item :printer
The value is the printer to use.  The default is the value of
@code{si:*default-printer*}.

@item :format
The value is a keyword that specifies the format of file to be parsed.
The standard possibilities are @code{:text} (an ordinary file of text),
@code{:xgp} (a file of the sort once used by the XGP at MIT), @code{:press} (a
Xerox-style press file) and @code{:suds-plot} (a file produced by the
Stanford drawing program).  However, each kind of printer may define its
own format keywords.

@item :font
@item :font-list hardcopy-file
The value of @i{font} is the name of a font to print the file in (a
string).  Alternatively, you can give @code{:font-list} and specify a list
of such font names, for use if the file contains font-change commands.
The interpretation of a font name is dependent on the printer being
used.  There is no necessary relation to Lisp machine display fonts.
However, printers are encouraged to use, by default, fonts that are
similar in appearance to the Lisp machine fonts listed in the file's
attribute list, if it is a text file.

@item :heading-font
The value is the name of the font for use in page headers, if there are
any.

@item :vsp
The value is the extra spacing to use between lines, in over and beyond
the height of the fonts.

@item :page-headings
If the value is non-@code{nil}, a heading is added to each page.

@item :copies
The value is the number of copies to print.

@item :spool
If the printer provides optional spooling, this argument says whether to
spool (default is @code{nil}).  Some printers may intrinsically always
spool; others may have no way to spool.
@end table
@end defun

@defun set-printer-default-option printer-type option value
Sets a default for @i{option} for printers of type
@i{printer-type}.  Any use of the hardcopy functions
with a printer of that type and no value specified for @i{option}
will use the value @i{value}.  For example,
@lisp
(set-printer-default-option :dover :spool t)
@end lisp
causes output to Dover printers to be spooled unless the
@code{:spool} option is explicitly specified with value @code{nil}.

Currently defaultable options are @code{:font}, @code{:font-list},
@code{:heading-font}, @code{:page-headings}, @code{:vsp}, @code{:copies}, and
@code{:spool}.
@end defun

@defun hardcopy-stream stream &rest options
Like @code{hardcopy-file} but uses the text read from @i{stream} rather
than opening a file.  The @code{:format} option is not allowed (since
implementing it requires the ability to open the file with unusual
@code{open} options).
@end defun

@defun hardcopy-bit-array array left top right bottom &rest options
Print all or part of the bit-array @i{array} on the specified or default
printer.  @i{options} is a list of keyword argument names and values;
the only standard option is @code{:printer}, which specifies the printer to
use.  The default printer is @code{si:*default-bit-array-printer*}, or, if
that is @code{nil}, @code{si:*default-printer}.

@i{left}, @i{top}, @i{right} and @i{bottom} specify the subrectangle of
the array to be printed.  All four numbers measure from the top left
corner (which is element 0, 0).
@end defun

@defun hardcopy-status &optional printer (stream @code{*standard-output*})
Prints the status of @i{printer}, or the default printer.
This should include if possible such things as whether the printer has
paper and what is in the queue.
@end defun

@defvar si:*default-printer*
This is the default printer.  It is set from the @code{:default-printer}
site option.
@end defvar

@defvar si:*default-bit-array-printer*
If non-@code{nil}, this is the default printer for printing bit arrays,
overriding @code{si:*default-printer*}.  A separate default is provided for
bit arrays since some printers that can print files cannot print bit
arrays.  This variable is set initially from the
@code{:default-bit-array-printer} site option.
@end defvar

@noindent
Defining a printer type:

A printer type is any keyword that has suitable functions on the
appropriate properties.

To be used with the function @code{hardcopy-file}, the printer type must
have a @code{si:print-file} property.  To be used with @code{hardcopy-stream},
the printer type must have a @code{si:print-stream} property.
@code{hardcopy-bit-array} uses the @code{si:print-bit-array} property.
@code{hardcopy-status} uses the @code{si:print-status} property.
(The hardcopy functions' names are not themselves used simply to avoid
using a symbol in the global package as a property name of a symbol
that might be in the global package as well).

Each property, to be used, should be a function whose first argument
will be the printer and whose remaining arguments will fit the same
pattern as those of the hardcopy function the user called.  (They will
not necessarily be the same arguments, as some additional keywords may be
added to the list of keyword arguments; but they will fit the same
description.)

For example,
@lisp
(hardcopy-file "foo" :printer '(:press-file "bar.press"))
@end lisp
results in the execution of
@lisp
(funcall (get :press-file 'si:print-file)
         '(:press-file "bar.press")
	 "foo" :printer '(:press-file "bar.press"))
@end lisp

A printer type need not support operations that make no sense on it.
For example, there is no @code{si:print-status} property on
@code{:press-file}.

@section  Metering

The metering system is a way of finding out what parts of your program
use up the most time.  When you run your program with metering, every
function call and return is recorded, together with the time at which it
took place.  Page faults are also recorded.  Afterward, the metering
system analyzes the records and tells you how much time was spent
executing withain each function.  Because the records are stored in the disk
partition called @code{METR}, there is room for a lot of data.

Before you meter a program, you must enable metering in some or all
stack groups.  @code{meter:enable} is used for this.  Then you evaluate one
or more forms with metering, perhaps by using @code{meter:test} or
@code{meter:run}.  Finally, you use @code{meter:analyze} to summarize and
print the metering data.

There are two parameters that control whether metering data are
recorded.  First of all, the variable @code{sys:%meter-microcode-enables}
contains bits that enable recording of various kinds of events.  Secondly,
each stack group has a flag that controls whether events are recorded
while running in that stack group.

@defvar sys:%meter-microcode-enables
Enables recording of metering data.
Each bit controls recording of one kind of event.
@table @code
@item 1
This bit enables recording of page faults.
@item 2
This bit enables recording of consing.
@item 4
This bit enables recording of function entry and exit.
@item 8
This bit enables recording of stack group switching.
@end table

The value is normally zero, which turns off all recording.
@end defvar

@noindent
These are the functions used to control which stack groups do metering:

@defun meter:enable &rest things
Enables metering in the stack groups specified by @i{things}.
Each thing in @i{things} may be a stack group, a process (which
specifies the process's stack group), or a window (which specifies the
window's process's stack group).  @code{t} is also allowed.  It enables
metering in all stack groups.
@end defun

@defun meter:disable &rest things
Disables metering in the stack groups specified by @i{things}.
The arguments allowed are the same as for @code{meter:enable}.
@code{(meter:disable t)} turns off @code{(meter:enable t)}, but does not
disable stack groups enabled individually.  @code{(meter:disable)} disables
all stack groups no matter how you specified to enable them.
@end defun

@defvar meter:metered-objects
This is a list of all the @i{things} you have enabled with
@code{meter:enable} and not disabled.
@end defvar

@noindent
These are the functions to evaluate forms with metering:

@defun meter:run forms
Clears out the metering data and evaluates the @i{forms} with
@code{sys:%meter-microcode-enables} bound to 14 octal (record function
entry and exit, and stack group switching).  Any of the evaluation that
takes place in enabled stack groups will record metering data.
@end defun

@defun meter:test form (enables @code{#o14})
Clears out the metering data, enables metering for the current
stack group only, and evaluates @i{form} with
@code{sys:%meter-microcode-enables} bound to @i{enables}.
@end defun

@noindent
This is how you print the results:

@defun meter:analyze &key analyzer stream file buffer return info &allow-other-keys
Analyzes the data recorded by metering.
@i{analyzer} is a keyword specifies a kind of analysis.  @code{:tree}
is the default.  Another useful alternative is @code{:list-events}.
Particular analyzers handle other keyword arguments in addition
to those listed above.

The output is printed on @i{stream}, written to a file named
@i{file}, or put in an editor buffer named @i{buffer} (at most one of
these three arguments should be specified).  The default is to print on
@code{*standard-output*}.

Analyzing the metering data involves creating a large intermediate data
base.  Normally this is created afresh each time @code{meter:analyze} is
called.  If you specify a non-@code{nil} value for @i{return}, the
intermediate data structure is returned by @code{meter:analyze}, and can be
passed in on another call as the @i{info} argument.  This can save time.
But you can only do this if you use the same @i{analyzer} each time,
as different analyzers use different termporary data structures.
@end defun

The default analyzer @code{:tree} prints out the amount of run time and
real time spent executing each function that was called.  The real time
includes time spend waiting and time spent writing metering data to disk;
for computational tasks, the latter makes the real time less useful
than the run time.
@code{:tree} handles these additional keyword arguments to @code{meter:analyze}:
@table @code
@item :find-callers "meter:analyze"
The argument for this keyword is a function spec or a list of function specs.
A list of who called the specified functions,
and how often, is printed instead of the usual output.

@item :stack-group "meter:analyze"
The argument is a stack group or a list of them;
only the activities in those stack groups are printed.

@item :sort-function "meter:analyze"
The argument is the name of a suitable sorting function that is used to
sort the items for the various functions that were called.  Sorting
functions provided include @code{meter:max-page-faults},
@code{meter:max-calls}, @code{meter:max-run-time} (the default),
@code{meter:max-real-time}, and @code{meter:max-run-time-per-call}.

@item :summarize "meter:analyze"
The argument is a function spec or a list of function specs;
only those functions' statistics are printed.

@item :inclusive "meter:analyze"
If this is non-@code{nil}, the times for each function include
the time spent in executing subroutines called from the function.

Note: if a function is called recursively, the time spent in the inner
call(s) is counted twice (or more).
@end table

The analyzer @code{:list-events} prints out one line about each event
recorded.  The line contains the run time and real time (in
microseconds), the running count of page faults, the stack group name,
the function that was running, the stack depth, the type of event, and a
piece of data.  For example:

@lisp
   0   0    0 ZMACS-WINDOWS  METER:TEST   202 CALL SI:EVAL
 115  43    0 ZMACS-WINDOWS  METER:TEST   202 RET  SI:EVAL
 180  87    0 ZMACS-WINDOWS  METER:TEST   202 RET  CATCH

real run   pf  stack-group    function  stack event data
time time                               level type
@end lisp

@code{:list-events} is often useful with recording of page faults
(@code{sys:%meter-microcode-enables} set to 1).

@defun meter:reset
Clears out all metering data.
@end defun

Because metering records pointers to Lisp objects in a disk partition
which is not part of the Lisp address space, garbage collection is
inhibited (by arresting the gc process) when you turn on metering.

@defun meter:resume-gc-process
Allows garbage collection to continue (if it is already turned on) by
unarresting it.
@end defun

@section  Poking Around in the Lisp World

@defun who-calls x &optional package (inheritors @code{t}) (inherited @code{t})
@i{x} must be a symbol or a list of symbols.
@code{who-calls} tries
to find all of the functions in the Lisp world
that call @i{x} as a function, use @i{x} as a variable,
or use @i{x} as a constant.  (Constants which are lists
containing @i{x} are not found.)  It tries to find all of the functions
by searching all of the function cells of
all of the symbols in @i{package} and packages that inherit
from @i{package} (unless @i{inheritors} is @code{nil}) and packages
@i{package} inherits from (unless @i{inherited} is @code{nil}).
@i{package} defaults to the @code{global} package, which means that
all normal packages are checked.

If @code{who-calls} encounters an interpreted function definition, it
simply tells you if @i{x} appears anywhere in the interpreted code.
@code{who-calls} is smarter about compiled code, since it has been
nicely predigested by the compiler.  Macros expanded in the compilation
of the code can be found because they are recorded in the caller's
debugging info alist, even though they are not actually referred to
by the compiled code.

If @i{x} is a list of symbols, @code{who-calls} does them all simultaneously,
which is faster than doing them one at a time.

@code{who-uses} is an obsolete name for @code{who-calls}.

The editor has a command,@code{ Meta-X List Callers}, which is similar to @code{who-calls}.

The symbol @code{:unbound-function} is treated specially by @code{who-calls}.
@code{(who-calls :unbound-function)} searches all the compiled
code for any calls through a symbol that is not currently
defined as a function.  This is useful for finding errors such
as functions you misspelled the names of or forgot to write.

@code{who-calls} prints one line of information for each caller it finds.  It also
returns a list of the names of all the callers.
@end defun

@defun what-files-call x &optional package (inheritors @code{t}) (inherited @code{t})
Similar to @code{who-calls} but returns a list of the pathnames of all the files
that contain functions that @code{who-calls} would have printed out.  This is useful
if you need to recompile and/or edit all of those files.
@end defun

@defun apropos substring &optional package &key (inheritors @code{t}) inherited dont-print predicate boundp fboundp
@code{(apropos @i{substring})} tries to find all symbols whose print-names
contain @i{substring} as a substring.  Whenever it finds a symbol, it
prints out the symbol's name; if the symbol is defined as a function
and/or bound to a value, it tells you so and prints the names of the
arguments (if any) to the function.

If @i{predicate} is non-@code{nil}, it should be a function; only symbols
on which the function returns non-@code{nil} are counted.  In addition, @i{fboundp}
non-@code{nil} means only symbols with function definitions are considered,
and @i{boundp} non-@code{nil} means that only symbols with values are considered.

@code{apropos} looks for symbols on @i{package}, and all packages that use
@i{package} (unless @i{inheritors} is @code{nil}).  If @i{inherited} is
non-@code{nil}, all packages used by @i{package} are searched as well.
@i{package} can be a package or a symbol or string naming a package.  It
can also be a list of packages, symbols and strings; all of the packages
thus specified are searched.  @i{package} defaults to a list of all
packages except invisible ones.

@code{apropos} returns a list of all the symbols it finds.
If @i{dont-print} is non-@code{nil}, that is all it does.
@end defun

@defun sub-apropos substring starting-list &key predicate dont-print
Finds all symbols in @i{starting-list} whose names contain
@i{substring}, and that satisfy @i{predicate}.  If @i{predicate} is
@code{nil}, the substring is the only condition.  The symbols are printed
if @i{dont-print} is @code{nil}.  A list of the symbols found is returned,
in any case.

This function is most useful when applied to the value of 7**, after
@code{apropos} has returned a long list.
@end defun

@defun where-is pname &optional package
Prints the names of all packages that contain a symbol with the
print-name @i{pname}.  If @i{pname} is a string it gets upper-cased.
The package @i{package} and all packages that inherit from it are
searched.  @i{package} can be a package or the name of a package, or a
list of packages and names.  It defaults to a list of all packages
except invisible ones.  @code{where-is} returns a list of all the symbols
it finds.
@end defun

@defun describe x
@code{describe} tries to tell you all of the interesting information
about any object @i{x} (except for array contents).  @code{describe} knows
about arrays, symbols, floats, packages, stack groups, closures, and FEFs, and prints
out the attributes of each in human-readable form.  Sometimes
objects found inside @i{x} are described also;
such recursive descriptions are indented appropriately.  For instance,
@code{describe} of a symbol also describes the symbol's value,
its definition, and each of its properties.  @code{describe} of a float
(full-size or short) shows you its internal representation in a way
that is useful for tracking down roundoff errors and the like.

If @i{x} is a named-structure, @code{describe} invokes the @code{:describe}
operation to print the description, if that is supported.
To understand this, you should read the section on named structures
(see (named-structure)).  If the @code{:describe} operation is not
supported, @code{describe} looks on the named-structure symbol for information
that might have been left by @code{defstruct}; this information would
tell it what the symbolic names for the entries in the structure are,
and @code{describe} knows how to use the names to print out what each field's
name and contents is.

@code{describe} of an instance always invokes the @code{:describe} operation.
All flavors support it, since @code{si:vanilla-flavor} defines a method for it.

@code{describe} always returns its argument, in case you want to do something else to it.
@end defun

@defun inspect x
A window-oriented version of @code{describe}.  See the window system documentation
for details, or try it and type @code{Help}.
@end defun

@defun disassemble function
Prints out a human-readable version of the macro-instructions in
@i{function}.  @i{function} should be a FEF, or a function spec whose
definition is a FEF.  The macro-code instruction set is explained in
(macro-code).
@end defun

@noindent
The @code{grindef} function (see (grindef-fun)) may be used to display the definition
of a non-compiled function.

@defun room &rest areas
Prints a summary of memory usage.

The first line of output tells you the amount of physical memory on the
machine, the amount of available virtual memory not yet filled with data
(that is, the portion of the available virtual memory that has not yet
been allocated to any region of any area), and the amount of wired
physical memory (i.e. memory not available for paging). 

Following lines tell you how much room is left in some areas.  For each
area it tells you about, it prints out the name of the area, the number
of regions that currently make up the area, the current size of the area in kilowords,
and the amount of the area that has been allocated, also in kilowords.
If the area cannot grow, the percentage that is free is displayed.

@code{(room)} tells you about those areas that are in the list that is the value
of the variable @code{room}.  These are the most interesting ones.

@code{(room @i{area1} @i{area2}...)} tells you about those areas, which can
be either the names or the numbers.

@code{(room t)} tells you about all the areas.

@code{(room nil)} does not tell you about any areas; it only prints the
first line of output.
@end defun

@defvar room
The value of @code{room} is a list of area names and/or area numbers,
denoting the areas that the function @code{room} should describe if given
no arguments.  Its initial value is:
@lisp
(working-storage-area macro-compiled-program)
@end lisp
@end defvar

@section  Utility Programs

@defun ed &optional x
@code{ed} is the main function for getting into the editor, Zmacs.
The commands of Zmacs are very similar to those of Emacs.

@code{(ed)} or @code{(ed nil)} simply enters the editor, leaving you in the same
buffer as the last time you were in the editor.  It has the same effect
as typing @code{System E}.

@code{(ed t)} puts you in a fresh buffer with a generated name (like BUFFER-4).

@code{(ed @i{pathname})} edits that file.  @i{pathname} may be an actual pathname
or a string.

@code{(ed 'foo)} tries hard to edit the definition of the @code{foo} function.
It can find a buffer or file containing the source code for @code{foo}
and position the cursor at the beginning of the code.  In general, @code{foo}
can be any function-spec (see (function-spec)).

@code{(ed 'zwei:reload)} reinitializes the editor.  It forgets about all
existing buffers, so use this only as a last resort.
@end defun

@defun zwei:save-all-files
This function is useful in emergencies in which you have modified material
in Zmacs buffers that needs to be saved, but the editor is partially broken.
This function does what the editor's @code{Save All Files} command does, but
it stays away from redisplay and other advanced facilities so that
it might work if other things are broken.
@end defun

@defun dired &optional pathname
Puts up a window and edits the directory named by @i{pathname}, which
defaults to the last file opened.  While editing a directory you may
view, edit, compare, hardcopy, and delete the files and subdirectories
it contains.  While in the directory editor type the @code{Help} key for
further information.
@end defun

@defun mail &optional user text call-editor-anyway
Sends the string @i{text} as mail to @i{user}.  @i{user} should also be
a string, of the form @code{"@i{username7@@}hostname}"*.  Multiple
recipients separated by commas are also allowed.

If you do not provide two arguments, @code{mail} puts up an editor window
in which you may compose the mail.  Type the @code{End} key to send the
mail and return from the @code{mail} function.

The window is also used if @i{call-editor-anyway} is non-@code{nil}.
@end defun

@defun bug &optional topic text call-editor-anyway
Reports a bug.  @i{topic} is the name of the faulty program (a symbol or
a string).  It defaults to @code{lispm} (the Lisp Machine system itself).
@i{text} is a string which contains the information to report.  If you
do not provide two arguments, or if @i{call-editor-anyway} is
non-@code{nil}, a window is put up for you to compose the mail.

@code{bug} is like @code{mail} but includes information about the system version
and what machine you are on in the text of the message.  This information is
important to the maintainers of the faulty program; it aids them in reproducing
the bug and in determining whether it is one that is already being worked on
or has already been fixed.
@end defun

@defun print-notifications &optional (from @code{0}) to
Reprints any notifications that have been received.  @code{from}
and @code{to} are used to restrict which notifications are printed;
both count from the most recent notification as number 0.  Thus,
@code{(print-notifications 2 8)} prints six notifications after skipping
the two most recent.

The difference between notifications and sends is that sends come from
other users, while notifications are usually asynchronous messages from
the Lisp Machine system itself.  However, the default way for the system
to inform you about a send is to make a notification!  So
@code{print-notifications} @i{normally} includes all sends as well.

Typing @code{Terminal 1 N} pops up a window and calls @code{print-notifications}
to print on it.
@end defun

@defun si:print-disk-error-log
Prints information about the half dozen most recent disk errors (since the last cold boot).
@end defun

@defun peek &optional character
Selects the PEEK utility, which displays various information about the
system, periodically updating it.  PEEK has several modes, which are
entered by typing a single key which is the name of the mode or by
clicking on the menu at the top.  The initial mode is selected by the
argument, @i{character}.  If no argument is given, PEEK starts out
by explaining what its modes are.
@end defun

@defun time form
Evaluates @i{form} and prints the length of time that the evaluation
took.  The values of @i{form} are returned.

Note that @code{time} with no argument is a function to return
a time value counting in 60ths of a second; see (time-fun-1).  This unfortunate
collision is a consequence of Common Lisp.
@end defun

@section  The Lisp Listen Loop

	These functions constitute the Lisp top level read-eval-print
loop or @i{listen loop} and its associated functions.

@cindex lisp top level
@cindex read-eval-print loop
@cindex listen loop

@defun si:lisp-top-level
This is the first function called in the initial Lisp environment.
It calls @code{lisp-reinitialize}, clears the screen, and calls @code{si:lisp-top-level1}.
@end defun

@defun lisp-reinitialize
This function does a wide variety of things, such as resetting the values
of various global constants and initializing the error system.
@end defun

@defun si:lisp-top-level1 *terminal-io*
This is the actual listen loop.  Within it, @code{*terminal-io*} is bound
to the argument supplied.  This is the stream used for reading and printing
if @code{*standard-input*} and @code{*standard-output*} are synonyms for @code{*terminal-io*},
as they normally are.

The listen loop reads a form from @code{*standard-input*}, evaluates it,
prints the result (with escaping) to @code{*standard-output*}, and repeats
indefinitely.  If several values are returned by the form all of them
are printed.  Also the values of @code{*}, @code{+}, @code{-}, @code{//}, @code{++},
@code{**}, @code{+++}, @code{***} and @code{*values*} are maintained (see below).
@end defun

@cindex break loop

@defun break format-string &rest format-args
Enters a breakpoint loop, which is similar
to a Lisp top level loop.    @i{format-string} and the @i{format-args}
are passed to @code{format} to print a message.
@lisp
;Breakpoint @i{message}; Resume to continue, Abort to quit.
@end lisp
and then enters a loop reading, evaluating, and printing forms.  A
difference between a break loop and the top level loop is that when
reading a form, @code{break} checks for the following special cases: If the
@code{Abort} key is typed, control is returned to the previous break or
error-handler, or to top-level if there is none.  If the @code{Resume} key is
typed, @code{break} returns @code{nil}.  If the list @code{(return @i{form})} is typed,
@code{break} evaluates @i{form} and returns the result, without ever
calling the function @code{return}.

Inside the @code{break} loop, the streams @code{*standard-output*},
@code{*standard-input*}, and @code{query-io} are bound to be synonymous
to @code{*terminal-io*}; @code{*terminal-io*} itself is not rebound.  Several
other internal system variables are bound, and you can add your
own symbols to be bound by pushing elements onto the
value of the variable @code{sys:*break-bindings*}
(see (sys:*break-bindings*-var)).

@code{break} used to be a special form whose first argument was a string
or symbol which was simply printed @i{without evaluating it}.
In order to facilitate conversion, @code{break} really still is a special form.
If the call appears to use the old conventions, it behaves in the old way,
but the compiler issues a warning if it sees such code.
@end defun

@defvar prin1
The value of this variable is normally @code{nil}.  If it is non-@code{nil},
then the read-eval-print loop uses its value instead of the
definition of @code{prin1} to print the values returned by functions.
This hook lets you control how things are printed by all read-eval-print
loops--the Lisp top level, the @code{break} function, and any utility
programs that include a read-eval-print loop.  It does not affect output
from programs that call the @code{prin1} function or any of its relatives such
as @code{print} and @code{format}; if you want to do that, read about
customizing the printer, on (customizing-the-printer).  If you
set @code{prin1} to a new function, remember that the read-eval-print loop
expects the function to print the value but not to output a @code{return}
character or any other delimiters.
@end defvar

@defvar -
While a form is being evaluated by a read-eval-print loop,
@code{-} is bound to the form itself.
@end defvar

@defvar +
While a form is being evaluated by a read-eval-print loop,
@code{+} is bound to the previous form that was read by the loop.
@end defvar

@defvar *
@defvarx //
While a form is being evaluated by a read-eval-print loop,
@code{*} is set to the result printed the last time through
the loop.  If there were several values printed (because
of a multiple-value return), @code{*} is bound to the first
value.  @code{//} is bound to a list of all the values of the
previous form.

If evaluation of a form is aborted, @code{*} and @code{//} remain set to
the results of the last successfully completed form.  If evaluation
is successful but printing is aborted, @code{*} and @code{//} are already
set for the following form.

Note that when using Common Lisp syntax you would type just @code{/}.
@end defvar

@defvar ++
@code{++} holds the previous value of @code{+}, that is, the form evaluated
two interactions ago.
@end defvar

@defvar +++
@code{+++} holds the previous value of @code{++}.
@end defvar

@defvar **
@defvarx ////
Hold the previous values of @code{*} and @code{//}, that is, the results of
the form evaluated two interactions ago.  Only forms whose evaluation
is successful cause the values of @code{*} and @code{//} to move into
@code{**} and @code{////}.

Note that when using Common Lisp syntax you would type just @code{//}.
@end defvar

@defvar ***
@defvarx //////
Hold the previous values of @code{**} and @code{////}, that is, the results of
the form evaluated three interactions ago.
Note that when using Common Lisp syntax you would type just @code{///}.
@end defvar

@defvar *values*
@code{*values*} holds a list of all lists of values produced by evaluation
in this Lisp listener.  @code{(car *values*)} is nearly equivalent to @code{//},
@code{(cadr *values*)} to @code{////}, and so on.  The difference is that
an element is pushed on @code{*values*} for each form whose evaluation
is started.  If evaluation is aborted, the element of @code{*values*} is @code{nil}.
@end defvar

@defvar sys:*break-bindings*
When @code{break} is called, it binds some special variables under control of
the list which is the value of @code{sys:*break-bindings*}.  Each element of the
list is a list of two elements: a variable and a form that is evaluated to
produce the value to bind it to.  The bindings happen sequentially.  Users may
@code{push} things on this list (adding to the front of it), but should not replace
the list wholesale since several of the variable bindings on this list are
essential to the operation of @code{break}.
@end defvar

@defvar lisp-crash-list
The value of @code{lisp-crash-list} is a list of forms.
@code{lisp-reinitialize} sequentially evaluates these
forms, and then sets @code{lisp-crash-list} to @code{nil}.

In most cases, the @i{initialization} facility should be used rather than
@code{lisp-crash-list}.  Refer to (initialization).
@end defvar

@section  The Garbage Collector
@cindex garbage collector

@defun gc-on
Turns automatic garbage collection on.  Garbage collection will happen when
and as needed.  Automatic garbage collection is off by default.

Since garbage collection works by copying, you are asked for
confirmation if there may not be enough space to complete a garbage
collection even if it is started immediately.
@end defun

@defun gc-off
Turns automatic garbage collection off.
@end defun

@defvar gc-on
@code{t} when garbage collection is on, @code{nil} when it is not.
You cannot control garbage collection by setting this variable;
it exists so you can examine it.  In particular, you can tell
if the system found it necessary to turn off garbage collection
because it was close to running out of virtual memory.
@end defvar

Normally, automatic garbage collection happens in incremental mode; that
is, scavenging happens in parallel with computation.  Each consing
operation scavenges or copies four words per word consed.  In addition,
scavenging goes on whenever the machine appears idle.

@defvar si:inhibit-idle-scavenging-flag
If this is non-@code{nil}, scavenging is not done during idle time.
@end defvar

If you are running a noninteractive crunching program, the incremental
nature of garbage collection may not be helpful.  Then you can make
garbage collection more efficient by making it a batch process.

@defvar si:gc-reclaim-immediately
If this variable is non-@code{nil},
automatic garbage collection is done as a batch operation:
when the garbage collection process decides that the time has come,
it copies all the useful data and discards the old address space,
running full blast.  (It is still possible to use the machine while this is
going on, but it is slow.)  More specifically, the
garbage collection process scavenges and reclaims oldspace immediately
right after a flip happens, using all of the machine's
physical memory.  This variable is only relevant if you have turned on
automatic garbage collection with @code{(gc-on)}.

A batch garbage collection requires less free space than an incremental
one.  If there is not enough space to complete an incremental garbage
collection, you may be able to win by selecting batch garbage collection
instead.
@end defvar

@defvar si:gc-reclaim-immediately-if-necessary
If this variable is non-@code{nil}, then automatic garbage collection is
done in batch mode if, when the flip is done, there does not seem to
be enough space left to do it incrementally.  This variable's value is
relevant only if @code{si:gc-reclaim-immediately} is @code{nil}.
@end defvar

@defvar si:gc-flip-ratio
This variable tells the garbage collector what fraction of the data it
should expect to have to copy, after each flip.  It should be a positive
number no larger than one.  By default, it is one.  But if your program
is consing considerable amounts of garbage, a value less than one may be
safe.  The garbage collector uses this variable to figure how much space
it will need to copy all the living data, and therefore indirectly how often
garbage collection must be done.
@end defvar

@defvar si:gc-flip-minimum-ratio
This value is used, when non-@code{nil}, to control warnings about having
too little space to garbage collect.  Its value is a positive number
no greater than one, just like that of @code{si:gc-flip-ratio}.  The
difference between the two is that @code{si:gc-flip-ratio} controls when
garbage collection is @i{recommended}, whereas
@code{si:gc-flip-minimum-ratio} controls when the system considers the
last possible time to do so.  If @code{si:gc-flip-minimum-ratio} is
@code{nil}, @code{si:gc-flip-ratio} serves both purposes.
@end defvar

Garbage collection is turned off if it appears to be about to run out of
memory.  You get a notification if this happens.  You also get a
notification when you are nearly at the point of not having enough space
to guarantee garbage collecting successfully.

In addition to turning on automatic garbage collection, you can also
manually request one immediate complete collection with the function
@code{si:full-gc}.  The usual reason for doing this is to make a band smaller
before saving it.  @code{si:full-gc} also resets all temporary areas (see
@code{si:reset-temporary-area}, (si:reset-temporary-area-fun)).

@defun si:full-gc
Performs a complete garbage collection immediately.
This does not turn automatic garbage collection on or off;
it performs the garbage collection in the process you call it in.
A full gc of the standard system takes about 7 minutes, currently.
@end defun

@defun si:clean-up-static-area area-number
This is a more selective way of causing static areas to be garbage
collected once.  The argument is the area number of a static area; that
particular area will be garbage collected the next time a garbage
collection is done (more precisely, it will be copied and discarded after the next
flip).  If you then call @code{si:full-gc}, it will happen then.
@end defun

@defun gc-status
The function @code{gc-status} prints information related to garbage
collection.  When scavenging is in progress, it tells you how the task is
progressing.  While scavenging is not in progress and
oldspace does not exist, it prints information about how soon a new flip
will be required.
@end defun

While a garbage collection is not in progress, the output from
@code{gc-status} looks like this:
@lisp
Dynamic (new+copy) space 557,417, Old space 0, Static 3,707,242,
Free space 10,453,032, with 10,055,355 needed for garbage collection
 assuming 100% live data (SI:GC-FLIP-RATIO = 1).
If GC is turned on, a flip will happen in 397,677 words.
Scavenging during cons Off, Idle scavenging On,
Automatic garbage collection Off.
GC Flip Ratio 1, GC Reclaim Immediately Off
@end lisp
@lisp
@exdent or
Dynamic (new+copy) space 561,395, Old space 0, Static 3,707,242,
Free space 10,453,032, with 10,058,670 needed for garbage collection
 assuming 100% live data (SI:GC-FLIP-RATIO = 1).
A flip will happen in 394,362 words.
Scavenging during cons On, Idle scavenging On,
Automatic garbage collection On.
GC Flip Ratio 1, GC Reclaim Immediately Off
@end lisp

The ``dynamic space'' figure is the amount of garbage collectable space
and the ``static'' figure is the amount of static space used.
There is no old space since an old space only exists during garbage collection.

The amount of space needed for garbage collection represents an estimate
of how much space user programs will use up while scavenging is in
progress.  It includes a certain amount of padding.  The difference
between the free space and that amount is how much consing you can do
before a garbage collection will begin (if automatic garbage collection
is on).

The amount needed for a garbage collection depends on the value of
@code{si:*gc-reclaim-immediately*}; more if it is @code{nil}.

While a garbage collection is in progress, the output looks like this:
@lisp
Incremental garbage collection now in progress.
Dynamic (new+copy) space 45,137, Old space 972,514, Static 3,707,498,
Between 3,701,440 and 4,629,998 words of scavenging left to do.
Free space 9,289,795 (of which 928,558 might be needed for copying).
Ratio scavenging work/free space = 0.55.
Scavenging during cons On, Idle scavenging On,
Automatic garbage collection On.
GC Flip Ratio 1, GC Reclaim Immediately Off
@end lisp

Notice that most of the dynamic space has become old space and new
space is small.  Not much has been copied since the flip took place.
The maximum and minimum estimates for the amount of scavenging are based
on different limits for how much of old space may need to be copied; as
scavenging progresses, the maximum decreases steadily, but the
minimum may increase.  The free space is smaller now, but it will get
larger when scavenging is finished and old space is freed up.  (The total
amounts are not the same now because unused parts of regions may not be
included in any of the figures.)

@defun si:set-scavenger-ws number-of-pages
Incremental scavenging is restricted to a fixed
amount of physical memory to reduce its interference with your other
activities.

This function specifies the number of pages of memory that incremental garbage
collection can use.  256 is a good value for a 256k machine.  If
the garbage collector gets very poor paging performance, use of this
function may fix it.
@end defun

@section  Logging In

	Logging in tells the Lisp Machine who you are, so that
other users can see who is logged in, you can receive messages,
and your INIT file can be run.  An INIT file is a Lisp program
which gets loaded when you log in; it can be used to set up
a personalized environment.

	When you log out, it should be possible to undo any
personalizations you have made so that they do not affect the next user
of the machine.  Therefore, anything done by an INIT file should be
undoable.  In order to do this, for every form in the INIT file, a Lisp
form to undo its effects should be added to the list that is the value
of @code{logout-list}.  The @code{login-forms} construct
helps make this easy; see below.

@defvar user-id
The value of @code{user-id} is either the name of the logged in user, as a string,
or else an empty string if there is no user logged in.
It appears in the who-line.
@end defvar

@defvar logout-list
The value of @code{logout-list} is a list of forms to be evaluated
when the user logs out.
@end defvar

@defun login name &optional host inhibit-init-file
Sets your name (the variable @code{user-id}) to @i{name} and logs in a file
server on @i{host}.  @i{host} also becomes your default file host.  The default
value of @i{host} depends on which Lisp Machine you use using; it is
called the associated machine (see (si:associated-machine-var)).
@code{login} also runs the @code{:login} initialization list (see
(login-init-list)).

If @i{host} requires passwords for logging in you are asked for a
password.  Adding an asterisk at the front of your password enables any
special capabilities you may be authorized to use, by calling
@code{fs:enable-capabilities} ((fs:enable-capabilities-fun)).

Unless @i{inhibit-init-file} is specified as non-@code{nil}, @code{login} loads
your init file if it exists.  On ITS, your init file is @i{name} @code{LISPM}
on your home directory.  On TOPS-20 your init file is @code{LISPM.INIT} on your
directory.  On VMS, it is @code{LISPM.INI}.  On Unix, it is @code{lispm.init}.

If anyone is logged into the machine already, @code{login} logs him out
before logging in @i{name}.  (See @code{logout}.)  Init files should be
written using the @code{login-forms} construct so that @code{logout} can undo
them.  Usually, however, you cold-boot the machine before logging in, to
remove any traces of the previous user.  @code{login} returns @code{t}.
@end defun

@defun log1 &rest options
Like @code{login} but the arguments are specified differently.
@i{options} is a list of keywords and values; the keywords
@code{:host} and @code{:init} specify the host to log in on and whether
to load the init file if any.  Any other keywords are also allowed.
@code{log1} itself ignores them, but the init file can act on them.
The purpose of @code{log1}, as opposed to @code{login}, is to enable you
to specify other keywords for your init file's sake.
@end defun

@defvar si:user-init-options
During the execution of the user's init file, inside @code{log1},
this variable contains the arguments given to @code{log1}.
Options not meaningful to @code{log1} itself can be specified, so that
the init file can find them here and act on them.
@end defvar

@defun logout
First, @code{logout} evaluates the forms on @code{logout-list}.
Then it sets @code{user-id} to an empty string and @code{logout-list}
to @code{nil}.  Then it runs the @code{:logout} initialization list
(see (login-init-list)), and returns @code{t}.
@end defun

@defmac login-forms undoable-forms...
The body of a @code{login-forms} is composed of forms to be evaluated,
whose effects are to be undone if you log out.  For example,
@lisp
(login-forms
  (setq fs:*defaults-are-per-host* t))
@end lisp
would set the variable immediately but arrange for its previous value
to be restored if you log out.

@code{login-forms} is not an AI program; it must be told how to undo each
function that will be used immediately inside it.  This is done by
giving the function name (such as @code{setq}) a @code{:undo-function}
property which is a function that takes a form as an argument and
returns a form to undo the original form.  For @code{setq}, this is done as
follows:
@lisp
(defun (setq :undo-function) (form &aux results)
  (do ((l (cdr form) (cddr l)))
      ((null l))
    (cond ((boundp (car l))
	   (push `(setq ,(car l) ',(symeval (car l))) results))
	  (t (push `(makunbound ',(car l)) results))))
  `(progn . ,results))
@end lisp

Undo functions are standardly provided for the functions @code{setq},
@code{pkg-goto-globally}, @code{setq-globally}, @code{add-initialization},
@code{deff}, @code{defun}, @code{defsubst}, @code{macro}, @code{advise} and
@code{zwei:set-comtab}.  Constructs which macroexpand into uses of those
functions are also supported.

Note that setting @code{*read-base*} and @code{*print-base*} should be done with @code{setq-globally}
rather than @code{setq}, since those variables are likely to be bound by the
@code{load} function while the init file is executed.
@end defmac

@defmac login-setq @{variable value@}...
@code{login-setq} is like @code{setq} except that it puts
a @code{setq} form on @code{logout-list} to set the variables
to their previous values.  @code{login-setq} is obsolete; use @code{login-forms}
around a @code{setq} instead.
@end defmac

@defun login-eval x
@code{login-eval} is used for functions that are ``meant to be called''
from INIT files, such as @code{zwei:set-comtab-return-undo}, which conveniently
return a form to undo what they did.  @code{login-eval} pushes
the result of the form @i{x} onto @code{logout-list}.  It is obsolete now
because @code{login-forms} is a cleaner interface.
@end defun

@defun si:undoable-forms-1 undo-list-name forms &optional complaint-string
This is what @code{login-forms} uses.
@i{forms} is a list of forms; they are evaluated and forms for
undoing their effects are pushed onto the value of the symbol
@i{undo-list-name}.  If an element of @i{forms} has no known
way to be undone, a message is printed using the string @i{complaint-string}.
For @code{login-forms}, the string supplied is @code{"at logout"}.
@end defun

@section  Dribble Files
@cindex dribble file

@defun dribble &optional filename
With an argument, @code{dribble} opens @i{filename} as a `dribble file' (also
known as a `wallpaper file') and then enters a Lisp listen loop
in which @code{*standard-input*}
and @code{*standard-output*} are rebound to direct all the output and
echoing they do to the file as well as to the terminal.

Dribble output can be sent to an editor buffer by using a suitable
pathname; see (editor-hosts).

Calling @code{dribble} with no arguments terminates dribbling; it throws to
the original call to @code{dribble}, which closes the file and returns.
@end defun

@defun dribble-all &optional filename
Like @code{dribble} except that all input and
output goes to the dribble file, including break loops, queries,
warnings and sessions in the debugger.  This works by binding
@code{*terminal-io*} instead of @code{*standard-output*} and @code{*standard-input*}.
@end defun

@section  Version Information

Common Lisp defines several standard ways of inquiring about
the identity and capabilities of the Lisp system you are using.

@defvar *features*
A list of atoms which describe the software and hardware features
of the Lisp implementation.  By default, this is
@lisp
(:loop :defstruct :lispm :cadr :mit :chaos :sort :fasload :string
 :newio :roman :trace :grindef :grind :common)
@end lisp
Most important is the symbol @code{:lispm}; this indicates that the program
is executing on the Lisp Machine.  @code{:cadr} indicates the type of
hardware, @code{:mit} which version of the Lisp Machine operating system,
and @code{:chaos} that the Chaosnet protocol is available.  @code{:common}
indicates that Common Lisp is supported.

Most of the other elements are for Maclisp compatibility.  Common Lisp
defines the variable @code{*features*} but does not define what should
appear in the list.  The order of elements in the list has no
significance.  Membership checks should use @code{string-equal} so that
packages are not significant

The 7#+* and 7#-* read constructs ((sharp-plus)) check for the
presence of an element in this list.  Thus, 7#+*@code{lispm} when read by
a Lisp Machine causes the following expression to be significant,
because @code{:lispm} is present in the features list.
@end defvar

The remaining standard means of inquiry are specified by Common Lisp to
be functions rather than variables, for reasons that seem poorly thought
out.

@defun lisp-implementation-type
Returns a string saying what kind of Lisp implementation you are using.
On the Lisp Machine it is always @code{"Zetalisp"}.
@end defun

@defun lisp-implementation-version
Returns a string saying the version numbers of the Lisp implementation.
On the Lisp Machine it looks something like
@lisp
@code{"System 98.3, CADR 3.0, ZMAIL 52.2"}.
@end lisp
@end defun

@defun machine-type
Returns a string describing the kind of hardware in use.
It is @code{"CADR"} or @code{"LAMBDA"}.
@end defun

@defun machine-version
Returns a string describing the kind of hardware and microcode version.
It starts with the value of @code{machine-type}.
It might be @code{"CADR Microcode 309"}.
@end defun

@defun machine-instance
Returns a string giving the name of this machine.  Do not be confused;
the value is a string, not an instance.  Example:  @code{"CADR-18"}.
@end defun

@defun software-type
Returns a string describing the type of operating system software that Lisp
is working with.  On the Lisp Machine, it is always @code{"Zetalisp"}, since the
Lisp Machine Lisp software is the operating system.
@end defun

@defun software-version
Returns a string describing the version numbers of the operating system software
in use.  This is the same as @code{lisp-implementation-version} on the Lisp Machine
since the same software is being described.
@end defun

@defun short-site-name
Returns a string giving briefly the name of the site you are at.
A site is an institution which has a group of Lisp Machines.
The string you get is the value of the @code{:short-site-name} site option
as given in @code{SYS: SITE; SITE LISP}.  See (site-files) for more
information.  Example: @code{"MIT AI Lab"}.
@end defun

@defun long-site-name
Returns a string giving a verbose name for the site you are at.  This
string is specified by the site option @code{:long-site-name}.  Example:
@code{"Massachusetts Institute of Technology, Artificial Intelligence
Laboratory"}.
@end defun

@section  Booting and Disk Partitions
@cindex band
@cindex partition
@cindex booting

A Lisp Machine disk is divided into several named @i{partitions} (also
called @i{bands} sometimes).  Partitions can be used for many things.
Every disk has a partition named @code{PAGE}, which is used to implement
the virtual memory of the Lisp Machine.  When you run Lisp, this is
where the Lisp world actually resides.  There are also partitions that
hold saved images of the Lisp Machine microcode, conventionally named
@code{MCR@i{n}} (where @i{n} is a digit), and partitions that hold saved
images of Lisp worlds, conventionally named @code{LOD@i{n}}.  A saved image
of a Lisp world is also called a @i{virtual memory load} or @i{system load}.
The microcode and system load are stored separately so that the
microcode can be changed without going through the time-consuming
process of generating a new system load.

The directory of partitions is in a special block on the disk called the
label.  The label names one of the partitions as the current microcode
and one as the current system load.  When you cold-boot, the contents
of the current microcode band are loaded into the microcode memory, and
then the contents of the current saved image of the Lisp world is copied
into the @code{PAGE} partition.  Then Lisp starts running.  When you
warm-boot, the contents of the current microcode band are loaded, but
Lisp starts running using the data already in the @code{PAGE} partition.

For each partition, the directory of partitions contains a brief textual
description of the contents of the partition.  For microcode partitions,
a typical description might be @code{"UCADR 310"}; this means that version
@code{310} of the microcode is in the partition.  For saved Lisp images, it
is a little more complicated.  Ideally, the description would say which
versions of which systems are loaded into the band.  Unfortunately,
there isn't enough room for that in most cases.  A typical description
is @code{"99.4 Daed 5.1"}, meaning that this band contains version
@code{99.4} of @code{System} and version @code{5.1} of @code{Daedalus}.  The description
is created when a Lisp world is saved away by @code{disk-save} (see below).

@subsection Manipulating the Label

@defun print-disk-label &optional (unit @code{0}) (stream @code{*standard-output*})
Prints a description of the label of the disk specified by @i{unit} onto
@i{stream}.  The description starts with the name of the disk pack,
various information about the disk that is generally uninteresting, and
the names of the two current load partitions (microcode and saved Lisp
image).  This is followed by one line of description for each
partition.  Each one has a name, disk address, size, and textual
comment.  The current microcode partition and the current system
load partition are marked with asterisks, each at the beginning of the line.

@i{unit} may be the unit number of the disk (most Lisp machines just
have one unit, number 0), or the host name of another Lisp Machine on
the Chaosnet, as a string (in which case the label of unit @code{0} on that
machine is printed, and the user of that machine is notified that you
are looking at his label), or, for CADRs only, the string @code{"CC"}
(which prints the label of unit 0 of the machine connected to this
machine's debugging hardware).

Use of @code{"CC"} as the @i{unit} is the way to examine or fix up
the label of a machine which cannot work because of problems with the
label.  On a Lambda, this must be done through the SDU.
@end defun

@defun set-current-band partition-name &optional (unit @code{0})
Sets the current saved Lisp image partition to be @i{partition-name}.
If @i{partition-name} is a number, the name @code{LOD@i{n}} is used.

@i{unit} can be a disk drive number, the host name of another Lisp
Machine, or the string @code{"CC"}.  See the comments under
@code{print-disk-label}, above.

If the partition you specify goes with a version of microcode different
from the one that is current, this function offers to select the
an appropriate microcode partition as well.  Normally you should
answer @code{Y}.
@end defun

@defun set-current-microload partition-name &optional (unit @code{0})
Sets the current microcode partition to be @i{partition-name}.
If @i{partition-name} is a number, the name @code{MCR@i{n}} is used.

@i{unit} can be a disk drive number, the host name of another Lisp
Machine, or the string @code{"CC"}.  See the comments under
@code{print-disk-label}, above.
@end defun

@defun si:current-band &optional (unit @code{0})
@defunx si:current-microload &optional (unit @code{0})
Return, respectively, the name of the current band and the current microload on the
specified unit.
@end defun

When using the functions to set the current load partitions, be extra
sure that you are specifying the correct partition.  Having done it,
cold-booting the machine will reload from those partitions.  Some
versions of the microcode will not work with some versions of the Lisp
system, and if you set the two current partitions incompatibly,
cold-booting the machine will fail.  To fix this, on a CADR, use
another CADR's debugging hardware, running
@code{print-disk-label} and @code{set-current-band} on the other CADR and
giving @code{"CC"} as the @i{unit} argument.  On a Lambda, this is done
via the SDU.

@defun si:edit-disk-label unit &optional init-p
Runs an interactive label editor on the specified unit.
This editor allows you to change any field in the label.  The
@code{Help} key documents the commands.  You have to be an expert
to need this and to understand what it does, so the commands
are not documented here.  Ask someone if you need help.
You can screw yourself very badly with this function.
@end defun

@defun disk-restore &optional partition
Allows booting from a band other than the current one.  @i{partition}
may be the name or the number of a disk partition containing a
virtual-memory load, or @code{nil} or omitted, meaning to use the current
partition.  The specified partition is copied into the paging area of
the disk and then started.

Although you can use this to boot a different Lisp image than the installed
one, this does not provide a way to boot a different microcode image.
@code{disk-restore} brings up the new band with the currently running microcode.

@code{disk-restore} asks the user for confirmation before doing it.
@end defun

@defun describe-partition partition &optional unit
Tells you various useful things about a partition; including where on
disk the partition begins, and how long it is.

If you specify a saved Lisp system partition, such as @code{LOD3}, it also
tells you important information about the contents of the partition: the
microcode version which the partition goes with, the size of the data in
the partition and the highest virtual address used.  The size of the partition
tells how large a partition you need to make a copy of this one, and the
highest virtual address used (which is measured in units of disk
blocks) tells you how large a @code{PAGE} partition you need in order to run
this partition.
@end defun

@subsection Updating Software

Of all the procedures described in this section, the most common one is
to take a partition containing a Lisp image, update it to have all the
latest patches (see (patch-facility)), and save it away in a disk
partition.  The function @code{load-and-save-patches} does it all
conveniently for you.

@defun load-and-save-patches
Loads patches and saves a band, with a simple user interface.  Run this
function immediately after cold booting, without logging in first; it
logs in automatically as @code{LISPM} (or whatever is specified in the site files).
The first thing it does is print the list of disk partitions and ask you
which one to save in.  Answer @code{LOD@i{n}}, using the name of a partition
from the printed list.  You must then confirm.  Then the patches are loaded
and the resulting world is saved with no further user interaction, as long
as no problem arises.

It is convenient to use this function just before you depart, allowing
it to finish unattended.
@end defun

If you wish to do something other than loading all and only the latest
patches, you must perform the steps by hand.  Start by cold-booting the
machine, to get a fresh, empty system.  Next, you must log in as
something whose INIT file does not affect the Lisp world noticably (so
that when you save away the Lisp image, the side-effects of the INIT
file won't get saved too); on MIT-OZ, for example, you can log in as
@code{LISPM} with password @code{LISPM}.  Now you can load in any new software
you want; usually you should also do @code{(load-patches)} for good
measure.  You may also want to call @code{si:set-system-status} to change
the release status of the system.

When you're done loading everything, do @code{(print-disk-label)} to find
a band in which to save your new Lisp world.  It is best not to reuse
the current band, since if something goes wrong during the saving of
the partition, while you have written, say, half of the band that is
current, it may be impossible to cold-boot the machine.  Once you have
found the partition, you use the @code{disk-save} function to save
everything into that partition.

@defun disk-save partition-name &optional no-query incremental
Saves the current Lisp world in the designated partition.
@i{partition-name} may be a partition name (a string), or it may be a
number in which case the name @code{LOD@i{n}} is used.

The user is first asked for yes-or-no confirmation that he really wants to
reuse the named partition.  A non-@code{nil} value for @i{no-query} prevents
this question.  This is only for callers that have already asked.

Next it is necessary to figure out what to put into the textual
description of the band, for the disk label.  This starts with the brief
version of @code{si:system-version-info} (see
(si:system-version-info-fun)).  Then comes a string of additional
information; if @i{no-query} is @code{nil}, the user is offered the chance
to provide a new string.  The current value of this string is returned
by @code{si:system-version-info} and printed by booting.  The version info
and the string both go in the comment field of the disk label for this
band.  If they don't together fit into the fixed size available, the
user is asked to retype the whole thing (the version info as well as
your comment) in a compressed form that does fit.

The Lisp environment is then saved away into the designated partition,
and then the equivalent of a cold-boot from that partition is done.
@end defun

Once the patched system has been successfully saved and the system
comes back up, you can make it current with @code{set-current-band}.

When you do a @code{disk-save}, it may tell you that the band you wish to save
in is not big enough to hold all the data in your current world.  It may be
possible for you to reduce the size of the data so that it will fit in that
band, by garbage collecting.  Simply do @code{(si:full-gc)}.

Try to avoid saving patched systems after running the editor or the
compiler.  This works, but it makes the saved system a lot bigger.  In
order to produce a clean saved environment, you should try to do as
little as possible between the time you cold-boot and the time you save
the partition.

@defvar si:login-history
The value of @code{si:login-history} is a list of entries, one for each person who
has logged into this world since it was created.  This makes it possible to
tell who @code{disk-saved} a band with something broken in it.  Each entry is
a list of the user ID, the host logged into, the Lisp Machine on which the
world was being executed, and the date and time.
@end defvar

@subsection Saving Personal Software

If you have a large application system which takes a while to load,
you may wish to save a band containing it.

To do this, boot a fresh band, log in without running your init file,
do @code{make-system} to load the application system, and then invoke
@code{disk-save}.  When @code{disk-save} asks for an additional comment,
give your name or the name of the application system you loaded,
and a date.  This will tell other people who to ask whether the
band is still in use if they would like to save other things.

You can greatly reduce the amount of disk space needed for the saved
band by making it an @i{incremental} band; that is, a band which
contains the differences between the Lisp world you want to save and the
system band you originally loaded.  Since all the pages of the system
which your application program did not change do not have to be saved,
an incremental band is generally much smaller--perhaps by a factor of ten.

To make an incremental band, give a non-@code{nil} third argument to
@code{disk-save}, as in
@lisp
(disk-save "lod4" nil t)
@end lisp
Figuring out which pages need to be saved in the incremental band
takes a couple of extra minutes.

You can restore the incremental band with @code{disk-restore} or boot it like
any other band.  This works by first booting the original band and then
copying in the differences that the incremental band records.  It takes
only a little longer than booting the original system band.

The original band to which an incremental band refers must be a complete load.
When you update a standard system band (loading patches, for instance) you
should always make a complete load, so that the previous system band is not
needed for the new one to function.

The incremental band records the partition name of the original system
band.  That original band must still exist, with the same contents, in
order for the incremental band to work properly.  The incremental band
contains some error check data which is used to verify this.  The error checking is
done by the microcode when the incremental band is booted, but it is
also done by @code{set-current-band}, so that you are not permitted to select
an incremental band if it is not going to work.

When using incremental bands, it is important to preserve the system bands
that they depend on.  Therefore, system bands should not be updated too
frequently.  @code{describe-partition} on an incremental band says which
full band it depends on; you can use this to determine which bands should
be kept for the sake of incremental bands that depend on them.

In order to realize the maximum savings in disk space possible because
of incremental bands, you must make the partition you saved in smaller
once the save is finished and you know how much space was actually used.
This is done with @code{si:edit-disk-label}.
The excess space at the end of the partition can be used to make another
partition which is used for the next incremental band saved.  Eventually
when some of the incremental bands are no longer needed the rest must
be shuffled so that the free space can be put together into larger partitions.
This can be done with @code{si:copy-disk-partition}.

An easier technique is to divide a couple of the initial partitions into
several equal-sized partitions of about 4000 pages, and use these for
all incremental saving.  You can easily provide room for 12 incremental
bands this way in addition to a few system bands and file system.

You must not do a garbage collection to reduce the size of the world
before you make an an incremental band.  This is because garbage
collection alters so many pages that an incremental band would be as big
as a complete band.

@subsection Copying Bands

The normal way to install new software on a machine is
to copy the microcode and world load bands from another machine.

The first step is to find a machine that is not in use and has the
desired system.  Let us call this the source machine.  The machine
where the new system is to be installed is the target machine.  You
can use @code{finger} to see which machines are free, and use
@code{print-disk-label} with an argument to examine the label of that
machine's disk and see if it has the system you want.

Then you should do a @code{(print-disk-label)} to find suitable
partitions to copy them into.  It is advisable not to copy them
into the selected partitions; if you did that, and the machine
crashed in the middle, you would be unable to boot it.

Before copying a band from another machine, double-check the partition
names by printing the labels of both machines, and make sure no one is
using the other machine.  Also double-check with
@code{describe-partition} that the world load and microcode go together.
Then use this function:

@defun si:receive-band source-host source-band target-band &optional subset-start subset-size
Copies the partition on @i{source-host}'s partition named
@i{source-band} onto the local machine's partition named
@i{target-band}.  This takes about ten minutes.  It types out the size
of the partition in pages, and types a number every 100 pages telling
how far it has gotten.  It displays an entry in the who line on the
remote machine saying what's going on.

The @i{subset-start} and @i{subset-size} arguments can be used to
transfer only part of a partition.  They are measured in blocks.
The default for the first is zero, and the default for the second is
to continue to the end of the data in the band.  These arguments are useful for
restarting a transfer that was aborted due to network problems or a crash,
based on the count of hundreds of blocks that was printed out before
the crash.
@end defun

To go the other direction, use @code{si:transmit-band}.

@defun si:transmit-band source-band target-host target-band &optional subset-start subset-size
This is just like @code{si:receive-band}, except you use it on
the source machine instead of the target machine.  It copies
the local machine's partition named @i{source-band} onto
@i{target-machine}'s partition named @i{target-band}.

It is preferable to use @code{si:receive-band} so that you are present
at the machine being written on. 
@end defun

After transferring the band, it is good practice to make sure that it really
was copied successfully by comparing the original and the copy.  All of the
known reasons for errors during band transfer have (of course) been corrected,
but peace of mind is valuable.  If the copy was not perfectly faithful, you
might not find out about it until a long time later, when you use whatever part
of the system that had not been copied properly.

@defun si:compare-band source-host source-band target-band &optional subset-start subset-size
This is like @code{si:receive-band}, except that it does not change anything.
It compares the two bands and complains about any differences.
@end defun

Having gotten the current microcode load and system load copied into
partitions on your machine, you can make them current for booting using
@code{set-current-band}.

@section  Site Options and Host Table
@cindex site options

The Lisp Machine system has options that are set at each site.  These
include the network addresses of other hosts, which hosts have file
servers, which host to find the system source files and patch files on,
where to send bug reports, what timezone the site is located in, and many
other things.

The per-site information is defined by three files: @code{SYS: SITE; SITE LISP},
@code{SYS: SITE; LMLOCS LISP}, and @code{SYS: CHAOS; HOSTS TXT}.
@cindex host table

@code{SYS: CHAOS; HOSTS TXT} is the network host table.  It gives the names
and addresses of all hosts that are to be known to the Lisp Machine for any
purposes.  It also says what type of machine the host is, and what operating
system runs on it.

@code{SYS: SITE; LMLOCS LISP} specifies various information about the Lisp
Machines at your site, including its name, where it is physically located,
and what the default machine for logging in should be.

@code{SYS: SITE; SITE LISP} specifies all other site-specific information.
Primarily, this is contained in a call to the special form @code{defsite}.

@defmac defsite site-name (site-option value)...
This special form defines the values of site-specific options, and also
gives the name of the site.  Each @i{site-option} is a symbol, normally in
the keyword package, which is the name of some site option.  @i{value} is
the value for that option; it is evaluated.  Here is a list of
standardly defined site options:

@table @code
@item :sys-host
The value is a string, the name of the host on which the system source
files are stored.  This host becomes the translation of logical host @code{SYS}.

@item :sys-host-translation-alist
The value is an alist mapping host names into translation-list variables.
Each translation list variable's value should be an alist suitable for being
the third argument to @code{fs:add-logical-pathname-host} (see
(fs:add-logical-pathname-host-fun)).  The car of an element may be @code{nil}
instead of a host name; then this element applies to all hosts not
mentioned.

The normal place to find the system sources is on the host specified by the
@code{:sys-host} keyword, in the directories specified by the translation list
variable found by looking that host up in the value of the
@code{:sys-host-translation-alist} keyword.  If you specify a different host
as the system host with @code{si:set-sys-host}, that host is also looked
up in this alist to find out what directories to use there.

@lisp
@exdent Here is what is used at MIT:

(defsite :mit
  ...
  (:sys-host-translation-alist
    '(("AI" . its-sys-pathname-translations)
      ("OZ" . oz-sys-pathname-translations)
      ("FS" . its-sys-pathname-translations)
      ("LM" . its-sys-pathname-translations)
      (nil . its-sys-pathname-translations)))
  ...)
@end lisp
@lisp
(defconst oz-sys-pathname-translations
  '(("CC;" "<L.CC>")
    ("CHAOS;" "<L.CHAOS>")
    ("DEMO;" "<L.DEMO>")
    ...
    ("SITE;" "<L.SITE>")
    ("SYS;" "<L.SYS>")
    ("SYS2;" "<L.SYS2>")
    ...
    ("ZMAIL;" "<L.ZMAIL>")
    ("ZWEI;" "<L.ZWEI>")
    ))
@end lisp

@item :sys-login-name
@itemx :sys-login-password defsite
These specify the username and password to use to log in automatically to read system
patch files, microcode symbol tables and error tables.
The values should be strings.

@item :chaos
@code{nil} if the site has no Chaosnet; otherwise, a string,
the name of the Chaosnet that the site is on.  Names for Chaosnets
will eventually be used to permit communication between Chaosnets,
probably through special gateway servers.  Except when multiple
sites are on a single Chaosnet, normally the Chaosnet name
should be the same as the site name (but as a string, not a symbol).

@item :standalone
The value should be @code{t} for a Lisp Machine that is operated without
a network connection.  This causes the Lisp Machine to not to try to
use the Chaosnet for getting the time.  On the Lambda, the time will
obtained from the SDU's clock.  On the CADR, the time will be obtained
from the user.

@item :default-associated-machine
This should be a string which is the name of a host to use as the
associated host for any Lisp Machine not mentioned in the LMLOCS file.

@item :usual-lm-name-prefix
This should be a string which is the typical beginning of host names of
Lisp Machines at your site.  At MIT, it is @code{"CADR-"}.

@item :chaos-file-server-hosts
This should be a list of names of hosts that have file servers, including
Lisp Machines which other Lisp Machines should know about.

@item :lmfile-server-hosts
This should be a list of names of Lisp Machines that provide servers for
the LMFILE file system.  The entry for such a machine should be one of
the nicknames of that machine.  By virtue of its presence in this list,
it becomes the name by which the LMFILE file system there can be
accessed remotely.

@item :chaos-time-server-hosts
This should be a list of names of hosts that support TIME servers.
These are hosts that the Lisp Machine can ask the time of day from
when you boot.

@item :chaos-host-table-server-hosts
This should be a list of names of hosts that support host-table servers,
which can be used to inquire about hosts on networks that the Lisp Machine
does not know about in its own host table.

@item :chaos-mail-server-hosts
This should be a list of names of hosts that support mail servers which are
capable of forwarding mail to any known host.

@item :timezone
This should be a number, the number of hours earlier than GMT of standard
time in the timezone where this site is located.

@item :host-for-bug-reports
This should be a string, the name of the host at which bug-report mailboxes
are located.

@item :local-mail-hosts
This should be a list of names of hosts that ZMail should consider ``local''
and omit from its summary display.

@item :spell-server-hosts
This should be a list of hosts that have spelling corrector servers.

@item :comsat
This should be @code{t} if mail can be sent through the COMSAT mail demon.
This is true only at MIT.

@item :default-mail-mode
This should be the default mode for use in sending mail.
The options are @code{:file} (use COMSAT), @code{:chaos} (use one of the
@code{:chaos-mail-server-hosts}), or @code{:chaos-direct} (like @code{:chaos}, but
go direct to the host that the mail is addressed to whenever possible).

@item :gmsgs
This should be @code{t} if GMSGS servers are available.

@item :arpa-gateways
This should be a list of names of hosts that can be used as gateways to the
Arpanet.  These hosts must provide a suitable Chaosnet server which will
make Arpanet connections.  It should be @code{nil} if your site does not have
an Arpanet connection.

@item :arpa-contact-name
If you have Arpanet gateways, this is the Chaosnet contact name to use.
Nowadays, it should be @code{"TCP"}.

@item :dover
This should be @code{t} if your site has a Dover printer.

@item :default-printer
This should be a keyword which describes
the default printer for hardcopy
commands and functions to use.  Possible values include @code{:dover},
@code{nil}, or any other printer type that you define (see (hardcopy)).

@item :default-bit-array-printer
Like @code{:default-printer}, but this is the default for only @code{hardcopy-bit-array} to use.

@item :esc-f-arg-alist
This says what various numeric arguments to the @code{Terminal F} command
mean.  It is a list of elements, one for each possible argument.
The car of an element is either a number or @code{nil} (which applies to
@code{Terminal F} with no argument).  The cdr is either @code{:login}
(finger the login host), @code{:lisp-machines} (finger all Lisp Machines at
this site), @code{:read} (read some hosts from the keyboard), or a list of
host names.

@item :verify-lm-dumps
If the value is @code{t}, Lisp Machine file system dump tapes are
verified.
@end table

Other site options are allowed, and your own software can look for them.
@end defmac

@subsection Updating Site Information

To update the site files, you must first recompile the sources.
Do this by
@lisp
(make-system 'site 'compile)
@end lisp
This also loads the site files.

To just load the site files, assuming they are compiled, do
@lisp
(make-system 'site)
@end lisp

@code{load-patches} does that automatically.

You should never load any site file directly.  All the files must be loaded
in the proper fashion and sequence, or the machine may stop working.

@subsection Accessing Site Options

Programs examine the site options using these variables and functions:

@defvar site-name
The value of this variable is the name of the site you are running at, as
defined in the @code{defsite} in the @code{SITE} file.  You can use this in run-time
conditionals for various sites.
@end defvar

@defun get-site-option keyword
Returns the value of the site option @i{keyword}.
The value is @code{nil} if @i{keyword} is not mentioned in the @code{SITE} file.
@end defun

@defmac define-site-variable variable keyword [documentation]
Defines a variable named @i{variable} whose value is always the same as
that of the site option @i{keyword}.  When new site files are loaded,
the variable's value is updated.  @i{documentation} is the variable's
documentation string, as in @code{defvar}.
@end defmac

@defmac define-site-host-list variable keyword [documentation]
Defines a variable named @i{variable} whose value is a list of host objects
specified by the site option @i{keyword}.  The value actually specified in
the @code{SITE} file should be a list of host names.  When new site files are
loaded, the variable's value is updated.  @i{documentation} is the
variable's documentation string, as in @code{defvar}.
@end defmac

@subsection The LMLOCS File

The @code{LMLOCS} file contains an entry for each Lisp Machine at your
site, and tells the system whatever it needs to know about the
particular machine it is running on.  It contains one form, a
@code{defconst} for the variable @code{machine-location-alist}.  The value
should have an element for each Lisp Machine, of this form:

@lisp
("MIT-LISPM-1"  "Lisp Machine One"
 "907 [Son of CONS] CADR1's Room x6765"
 (MIT-NE43 9) "OZ" ((:default-printer :dover)))

@exdent The general pattern is

(@i{host-full-name} @i{pretty-name}
 @i{location-string}
 (@i{building} @i{floor}) @i{associated-machine} @i{site-options}) 
@end lisp

The @i{host-full-name} is the same as in the host table.

The @i{pretty-name} is simply for printing out for users on certain occasions.

The @i{location-string} should say where to find the machine's console,
preferably with a telephone number.  This is for the @code{FINGER} server
to provide to other hosts.

The @i{building} and @i{floor} are a somewhat machine-understandable
version of the location.

The @i{associated-machine} is the default file server host name for
login on this Lisp Machine.

@i{site-options} is a list of site options, just like what goes in the
@code{defsite}.  These site options apply only to the particular machine,
overriding what is present in the @code{SITE} file.  In our example, the
site option @code{:default-printer} is specified as being @code{:dover}, on
this machine only.

@defvar si:associated-machine
The host object for the associated machine of this Lisp Machine.
@end defvar

@bye
