\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename chinual4th.info
@settitle Lisp Machine Manual
@c %**end of header

@ifnottex
@node Top
@top Lisp Machine Manual
@end ifnottex

@titlepage
@center @titlefont{Lisp Machine Manual}

@sp 4
@center Fourth Edition

@sp 1
@center July 1981

@sp 5
@center Daniel Weinreb
@center David Moon

@sp 12
This report describes research done at the Artificial Intelligence
Laboratory of the Massachusetts Institute of Technology.  Support for the
laboratory's artificial intelligence research is provided in part by the
Advanced Research Projects Agency of the Department of Defense under Office
of Naval Research Contract number N00014-80-C-0505.
@page

@vskip 0pt plus 1filll
@copyright{} Copyright by the Massachusetts Institute of Technology; Cambridge, Mass. 02139

All rights reserved.
@page

@sp 2
@center @titlefont{Preface}

The Lisp Machine manual describes both the language and the "operating system"
of the Lisp Machine.  The language, a dialect of Lisp called Zetalisp,
is completely documented
by this manual.  The software environment and operating-system-like parts of
the system contain many things which are still in a state of flux.
This manual confines itself primarily to the stabler parts of the
system, and does not address the window system and user interface at all.
That documentation will be released as a separate volume at a later time.

Any comments, suggestions, or criticisms will be welcomed.  Please send
Arpa network mail to BUG-LMMAN@@MIT-AI.

Those not on the Arpanet may send U.S. mail to

@sp 1
@verbatim
Daniel L. Weinreb or David A. Moon
Room 926
545 Technology Square
Cambridge, Mass. 02139*
@end verbatim

@sp 2
@center @titlefont{Note}

The Lisp Machine is a product of the efforts of many people too numerous to list here
and of the unique environment of the M.I.T. Artificial Intelligence Laboratory.

Portions of this manual were written by Richard Stallman, Mike McMahon, and
Alan Bawden.  The chapter on the LOOP iteration macro is a reprint of Laboratory for
Computer Science memo TM-169, by Glenn Burke.
@end titlepage

@chapter "Introduction"

@section "General Information"

	The Lisp Machine is a new computer system designed to provide a
high performance and economical implementation of the Lisp language.  It
is a personal computation system, which means that processors and main
memories are not time-multiplexed: when using a Lisp Machine, you get
your own processor and memory system for the duration of the session.
It is designed this way to relieve the problems of the running of large
Lisp programs on time-sharing systems.  Everything on the Lisp Machine
is written in Lisp, including all system programs; there is never any
need to program in machine language.  The system is highly interactive.

	The Lisp Machine executes a new dialect of Lisp called
Zetalisp, developed at the M.I.T. Artificial Intelligence
Laboratory for use in artificial intelligence research and related
fields.  It is closely related to the Maclisp dialect, and attempts to
maintain a good degree of compatibility with Maclisp, while also
providing many improvements and new features.  Maclisp, in turn, is
based on Lisp 1.5. 

	This document is the reference manual for the Zetalisp
language.  This document is not a tutorial, and it sometimes refers to
functions and concepts that are not explained until later in the manual.
It is assumed that you have a basic working knowledge of some Lisp
dialect; you will be able to figure out the rest of the language from
this manual.

	There are also facilities explained in this manual that are not
really part of the Lisp language.  Some of these are subroutine packages
of general use, and others are tools used in writing programs.  However,
the Lisp Machine window system, and the major utility programs, are not
documented here.

@section "Structure of the Manual"

The manual starts out with an explanation of the language.  Chapter
(object-chapter) explains the different primitive types of Lisp object,
and presents some basic 2predicate* functions for testing types.
Chapter (evaluator-chapter) explains the process of evaluation, which
is the heart of the Lisp language.  Chapter (flow-chapter) introduces
the basic Lisp control structures.

	The next several chapters explain the details of the various
primitive data-types of the language, and the functions that deal with
them.  Chapter (cons-chapter) deals with conses and the higher-level
structures that can be built out of them, such as trees, lists,
association lists, and property lists.  Chapter (symbol-chapter) deals
with symbols, chapter (number-chapter) with the various kinds of
numbers, and chapter (array-chapter) with arrays.  Chapter
(string-chapter) explains character strings, which are a special kind
of array.

	After this there are some chapters that explain more about functions,
function-calling, and related matters.  Chapter (function-chapter) presents
all the kinds of functions in the language, explains function-specs, and
tells how to manipulate definitions of functions.  Chapters (closure-chapter)
and (stack-group-chapter) discuss closures and stack-groups, two facilities
useful for creating coroutines and other advanced control and access structures.

	Next, a few lower-level issues are dealt with.  Chapter
(locative-chapter) explains locatives, which are a kind of pointer to
memory cells.  Chapter (subprimitive-chapter) explains the "subprimitive"
functions, which are primarily useful for implementation of the Lisp
language itself and the Lisp Machine's "operating system".  Chapter
(area-chapter) discusses areas, which give you control over storage
allocation and locality of reference.

	Chapter (compiler-chapter) discusses the Lisp compiler, which
converts Lisp programs into "machine language".  Chapter
(macros-chapter) explains the Lisp macro facility, which allows users
to write their own extensions to Lisp, extending both the interpreter
and the compiler.  The next two chapters go into detail about two such
extensions, one that provides a powerful iteration control structure
(chapter (loop-chapter)), and one that provides a powerful data
structure facility (chapter (defstruct-chapter)).

	Chapter (flavor-chapter) documents flavors, a language facility
to provide generic functions using the paradigm used in Smalltalk and the
Actor families of languages, called "object-oriented programming" or
"message passing".  Flavors are widely used by the system programs of
the Lisp Machine, as well as being available to the user as a language
feature.

	Chapter (io-chapter) explains the Lisp Machine's Input/Output system, including
2streams* and the 2printed representation* of Lisp objects.  Chapter
(pathname-chapter) documents how to deal with pathnames (the names of
files).

Chapter (package-chapter)
describes the 2package* system, which allows many name spaces within
a single Lisp environment.  Chapter (system-chapter) documents the
"system" facility, which helps you create and maintain programs
that reside in many files.

	Chapter (process-chapter) discusses the facilities for
multiple processes and how to write programs that use concurrent
computation.  Chapter (error-chapter) explains how exceptional
conditions (errors) can be handled by programs, handled by users, and
debugged.  Chapter (code-chapter) explains the instruction set of the
Lisp Machine, and tells you how to examine the output of the compiler.
Chapter (query-chapter) documents some functions for querying the
user, chapter (time-chapter) explains some functions for manipulating
dates and times, and chapter (misc-chapter) contains other
miscellaneous functions and facilities.


@section "Notational Conventions and Helpful Notes"

	There are several conventions of notation, and various points
that should be understood before reading the manual to avoid confusion.
This section explains those conventions.

	The symbol "=>" will be used to indicate evaluation in
examples.  Thus, when you see "3foo* => 3nil*", this means the
same thing as "the result of evaluating 3foo* is (or would have
been) 3nil*". 

	The symbol "==>" will be used to indicate macro expansion
in examples.  This, when you see "3(foo bar)* ==> 3(aref bar 0)*",
this means the same thing as "the result of macro-expanding 3(foo bar)*
is (or would have been) 3(aref bar 0)*".

	A typical description of a Lisp function looks like this:

.defun_no_index function-name arg1 arg2 &optional arg3 (arg4 3(foo 3)*)
The 3function-name* function adds together 2arg1* and 2arg2*,
and then multiplies the result by 2arg3*.  If 2arg3* is not provided,
the multiplication isn't done.  3function-name* then returns a list
whose first element is this result and whose second element is 2arg4*.
Examples:
.lisp
(function-name 3 4) => (7 4)
(function-name 1 2 2 'bar) => (6 bar)
.end_lisp
.end_defun

	Note the use of fonts (typefaces).  The name of the function is
in bold-face in the first line of the description, and the arguments are
in italics.  Within the text, printed representations of Lisp objects
are in a different bold-face font, such as 3(+ foo 56)*, and argument
references are italicized, such as 2arg1* and 2arg2*.  A different,
fixed-width font, such as 7function-name*, is used for Lisp examples
that are set off from the text.

	The word "3&optional*" in the list of arguments tells you that all
of the arguments past this point are optional.  The default value can be
specified explicitly, as with 2arg4* whose default value is the result
of evaluating the form 3(foo 3)*.  If no default value is specified,
it is the symbol 3nil*.  This syntax is used in lambda-lists in the
language, which are explained in (lambda-list).  Argument lists may
also contain "3&rest*", which is part of the same syntax.

The descriptions of special forms and macros look like this:

.defspec_no_index do-three-times form
This evaluates 2form* three times and returns the result of the third
evaluation.
.end_defspec

.defmac_no_index with-foo-bound-to-nil form...
This evaluates the 2forms* with the symbol 3foo* bound to 3nil*.
It expands as follows:
.lisp
(with-foo-bound-to-nil
    2form1*
    2form2* ...) ==>
(let ((foo nil))
    2form1*
    2form2* ...)
.end_lisp
.end_defmac

Since special forms and macros are the mechanism by which the syntax of Lisp
is extended, their descriptions must describe both their syntax and their
semantics; functions follow a simple consistent set of rules, but each
special form is idiosyncratic.  The syntax is displayed on the first line
of the description using the following conventions.  Italicized words are
names of parts of the form which are referred to in the descriptive text.
They are not arguments, even though they resemble the italicized words in
the first line of a function description.  Parentheses ("3( )*") stand for themselves.
Square brackets ("3[ ]*") indicate that what they enclose is optional.  
Ellipses ("3...*") indicate that the subform (italicized word or parenthesized
list) which precedes them may be repeated any number of times (possibly no times at all).
Curly brackets followed by ellipses ("3@{ @}...*") indicate that what they
enclose may be repeated any number of times.  Thus the first line of the
description of a special form is a "template" for what an instance of that
special form would look like, with the surrounding parentheses removed.
The syntax of some special forms is sufficiently complicated
that it does not fit comfortably into this style; the first line of the
description of such a special form contains only the name, and the syntax is
given by example in the body of the description.

The semantics of a special form includes not only what it "does for a living",
but also which subforms are evaluated and what the returned value is.  Usually
this will be clarified with one or more examples.

A convention used by many special forms is that all of their subforms after
the first few are described as "2body*3...*".  This means that the remaining
subforms constitute the "body" of this special form; they are Lisp forms which
are evaluated one after another in some environment established by the special
form.

This ridiculous special form exhibits all of the syntactic features:

.defspec_no_index twiddle-frob [(frob option...)] @{parameter value@}...
This twiddles the parameters of 2frob*, which defaults to 3default-frob*
if not specified.  Each 2parameter* is the name of one of the adjustable parameters of
a frob; each 2value* is what value to set that parameter to.  Any number
of 2parameter/value* pairs may be specified.  If any 2options* are specified,
they are keywords which select which safety checks to override while twiddling
the parameters.  If neither 2frob* nor any 2options* are specified, the
list of them may be omitted and the form may begin directly with the first
2parameter* name.

2frob* and the 2values* are evaluated; the 2parameters* and 2options*
are syntactic keywords and not evaluated.  The returned value is the frob
whose parameters were adjusted.  An error is signalled if any safety checks
are violated.
.end_defspec

Methods, the message-passing equivalent of ordinary Lisp's functions,
are described in this style:

.defmethod_no_index flavor-name message-name arg1 arg2 &optional arg3
This is the documentation of the effect of sending a message
named 3message-name*, with arguments 2arg1*, 2arg2*, and 2arg3*,
to an instance of flavor 3flavor-name*.
.end_defmethod

	Descriptions of variables ("special" or "global" variables) look like this:

.defvar_no_index typical-variable
The variable 3typical-variable* has a typical value....
.end_defvar

	Most numbers shown are in octal radix (base eight).  Spelled out
numbers and numbers followed by a decimal point are in decimal.  This is
because, by default, Zetalisp types out numbers in base 8; don't
be surprised by this.  If you wish to change it, see the documentation on the variables
3ibase* and 3base* ((ibase-var)).

	All uses of the phrase "Lisp reader", unless further qualified,
refer to the part of Lisp which reads characters from I/O streams
(the 3read* function), and not the person reading this manual.

	There are several terms which are used widely in other
references on Lisp, but are not used much in this document since they have become
largely obsolete and misleading.  For the benefit of those who may
have seen them before, they are: "S-expression", which means a Lisp
object;  "Dotted pair", which means a cons; and "Atom", which means,
roughly, symbols and numbers and sometimes other things, but not
conses.   The terms "list" and "tree" are defined in (list-and-tree).
'cindex "S-expression"
'cindex "dotted pair"
'cindex "atom"

	The characters acute accent (3'*) (also called "single quote") and
semicolon (3;*) have special meanings when typed to Lisp; they are
examples of what are called 2macro characters*.  Though the
mechanism of macro characters is not of immediate interest to the new
user, it is important to understand the effect of these two, which are
used in the examples.
	When the Lisp reader encounters a "3'*", it reads in the next
Lisp object and encloses it in a 3quote* special form.  That
is, 3'foo-symbol* turns into 3(quote foo-symbol)*, and 3'(cons 'a 'b)*
turns into 3(quote (cons (quote a) (quote b)))*.  The reason
for this is that "3quote*" would otherwise have to be typed in very
frequently, and would look ugly.
	The semicolon is used as a commenting character.  When the
Lisp reader sees one, the remainder of the line is
discarded.
	The character "3/*" is used for quoting strange characters so
that they are not interpreted in their usual way by the Lisp reader,
but rather are treated the way normal alphabetic characters are treated.
So, for example, in order to give a "3/*" to the reader, you must type "3//*",
the first "3/*" quoting the second one.  When a character
is preceeded by a "3/*" it is said to be 2slashified*.  Slashifying
also turns off the effects of macro characters such as "3'*" and "3;*".
	The following characters also have special meanings,
and may not be used in symbols without slashification.  These characters
are explained in detail in the section on printed-representation
((reader)).
.table 3 500 500
.item "
Double-quote delimits character strings.
.item #
Number-sign introduces miscellaneous reader macros.
.item `
Backquote is used to construct list structure.
.item ,
Comma is used in conjunction with backquote.
.item :
Colon is the package prefix.
.item |
Characters between pairs of vertical-bars are quoted.
.item 
Circle-cross lets you type in characters using their octal codes.
.end_table

	All Lisp code in this manual is written in lower case.
In fact, the reader turns all symbols into upper-case, and consequently
everything prints out in upper case.  You may write programs in whichever
case you prefer.

	You will see various symbols that have the colon (3:*)
character in their names.  By convention, all "keyword" symbols in the
Lisp Machine system have names starting with a colon.  The colon
character is not actually part of the print name, but is a package
prefix indicating that the symbol belongs to the package with a null
name, which means the 3user* package.  So, when you print such a
symbol, you won't see the colon if the current package is 3user*.
However, you should always type in the colons where the manual tells you
to.  This is all explained in chapter (package-chapter); until you read
that, just make believe that the colons are part of the names of the
symbols, and don't worry that they sometimes don't get printed out for keyword
symbols.

	This manual documents a number of internal functions and variables,
which can be identified by the "3si:*" prefix in their names.  The "si"
stands for "system internals".  These functions and variables are documented
here because they are things you sometimes need to know about.  However,
they are considered internal to the system and their behavior is not as
guaranteed as that of everything else.  They may be changed in the future.

	Zetalisp is descended from Maclisp, and a good deal
of effort was expended to try to allow Maclisp programs to run
in Zetalisp.  Throughout the manual, there are notes about
differences between the dialects.  For the new user, it is important
to note that many functions herein exist solely for Maclisp compatibility;
they should 2not* be used in new programs.  Such functions are
clearly marked in the text.

	The Lisp Machine character set is not quite the same as that used
on I.T.S. nor on Multics; it is described in full detail elsewhere
in the manual.  The important thing to note for now is that the
character "newline" is the same as "return", and is represented by
the number 215 octal.  (This number should 2not* be built into any programs.)

	When the text speaks of "typing Control-Q" (for example),
this means to hold down the CTRL key on the keyboard (either of
the two), and, while holding it down, to strike the "Q" key.
Similarly, to type "Meta-P", hold down either of the META keys
and strike "P".  To type "Control-Meta-T" hold down both CTRL
and META.  Unlike ASCII, there are no "control characters"
in the character set; Control and Meta are merely things
that can be typed on the keyboard.

	Many of the functions refer to "areas".  The 2area* feature
is only of interest to writers of large systems, and can be safely
disregarded by the casual user.  It is described in chapter (area-chapter).

@chapter Primitive Object Types
.setq predicate-chapter chapter-number
.setq object-chapter chapter-number

@section "Data Types"

This section enumerates some of the various different primitive types of
objects in Zetalisp.  The types explained below include
symbols, conses, various types of numbers, two kinds of compiled code
objects, locatives, arrays, stack groups, and closures.  With each is
given the associated symbolic name, which is returned by the function
3data-type* ((data-type-fun)).
'cindex "symbol"
'cindex "print name"
'cindex "binding"
'cindex "definition"
'cindex "property list"

	A 2symbol* (these are sometimes called "atoms" or "atomic
symbols" by other texts) has a 2print name*, a 2binding*, a
2definition*, a 2property list*, and a 2package*.

	The print name is a string, which may be obtained by the
function 3get-pname* ((get-pname-fun)).  This string serves as the
2printed representation* (see (printer)) of the symbol.  Each symbol
has a 2binding* (sometimes also called the "value"), which may be any
Lisp object.  It is also referred to sometimes as the "contents of the
value cell", since internally every symbol has a cell called the 2value
cell* which holds the binding.  It is accessed by the 3symeval*
function ((symeval-fun)), and updated by the 3set* function
((set-fun)).  (That is, given a symbol, you use 3symeval* to find out
what its binding is, and use 3set* to change its binding.)  Each
symbol has a 2definition*, which may also be any Lisp object.  It is
also referred to as the "contents of the function cell", since
internally every symbol has a cell called the 2function cell* which
holds the definition.  The definition can be accessed by the
3fsymeval* function ((fsymeval-fun)), and updated with 3fset*
((fset-fun)), although usually the functions 3fdefinition* and
3fdefine* are employed ((fdefine-fun)).
The property list is a list of an even number of
elements; it can be accessed directly by 3plist* ((plist-fun)), and
updated directly by 3setplist* ((setplist-fun)), although usually the
functions 3get*, 3putprop*, and 3remprop* ((get-fun)) are used.
The property list is used to associate any number of additional
attributes with a symbol--attributes not used frequently enough to
deserve their own cells as the value and definition do.  Symbols also have a
package cell, which indicates which "package" of names the symbol
belongs to.  This is explained further in the section on packages
(chapter (package-chapter)) and can be disregarded by the casual user.

	The primitive function for creating symbols is
3make-symbol* ((make-symbol-fun)), although most symbols
are created by 3read*, 3intern*, or
3fasload* (which call 3make-symbol* themselves.)

	A 2cons* is an object that cares about two
other objects, arbitrarily named the 2car* and the 2cdr*.
These objects can be accessed with 3car* and 3cdr* ((car-fun)), and updated
with 3rplaca* and 3rplacd* ((rplaca-fun)).  The primitive function for creating
conses is 3cons* ((cons-fun)).

	There are several kinds of numbers in Zetalisp.
2Fixnums* represent integers in the range of -2^23 to 2^23-1.
2Bignums* represent integers of arbitrary size, but they are more expensive
to use than fixnums because they occupy storage and are slower.
The system automatically converts between fixnums and bignums as required.
2Flonums* are floating-point numbers.  2Small-flonums* are another
kind of floating-point numbers, with less range and precision, but less 
computational overhead.
Other types of numbers are likely to be added in the future.
See (number) for full details of these types and the conversions
between them.

'cindex "FEF"
	The usual form of compiled, executable code is a Lisp object
called a "Function Entry Frame" or "FEF".  A FEF contains the code
for one function.  This is analogous to what Maclisp calls a "subr pointer".
FEFs are produced by the Lisp Compiler ((compiler)), and are usually found
as the definitions of symbols.  The printed representation of a FEF
includes its name, so that it can be identified.
	Another Lisp object which represents executable code is
a "micro-code entry".
These are the microcoded primitive functions of the Lisp system,
and user functions compiled into microcode.

	About the only useful thing to do with any of these compiled code objects
is to 2apply* it to arguments.  However, some functions are
provided for examining such objects, for user convenience.  See
3arglist* ((arglist-fun)),
3args-info* ((args-info-fun)),
3describe* ((describe-fun)),
and 3disassemble* ((disassemble-fun)).

	A 2locative* (see (locative)) is a kind of a pointer to a single memory cell
anywhere in the system.  The contents of this cell can be accessed by 3cdr*
(see (cdr-fun)) and updated by 3rplacd* (see (rplacd-fun)).

	An 2array* (see (array))
is a set of cells indexed by a tuple of integer subscripts.
The contents of the cells may be accessed and changed individually.  There are several
types of arrays.  Some have cells which may contain any object, while others (numeric
arrays) may only contain small positive numbers.  Strings are a type of array;
the elements are 8-bit unsigned numbers which encode characters.

	A 2list* is not a primitive data type, but rather a data structure
made up out of conses and the symbol 3nil*.  See (list-and-tree).

@section Predicates
'cindex "predicate"
	A 2predicate* is a function which tests for some condition involving
its arguments and returns the symbol 3t* if the condition is true, or
the symbol 3nil* if it is not true.  Most of the following predicates are for
testing what data type an object has; some other general-purpose predicates
are also explained.

	By convention, the names of predicates usually end in the letter "p" (which
stands for "predicate").
'c (See [section on naming conventions]).
'cindex "naming convention"

	The following predicates are for testing data types.  These predicates
return 3t* if the argument is of the type indicated by the name of the function,
3nil* if it is of some other type.
'cindex "data type"

.defun symbolp arg
'cindex "symbol"
3symbolp* returns 3t* if its argument is a symbol, otherwise 3nil*.
.end_defun

.defun nsymbolp arg
3nsymbolp* returns 3nil* if its argument is a symbol, otherwise 3t*.
.end_defun

.defun listp arg
'cindex "cons"
3listp* returns 3t* if its argument is a cons, otherwise 3nil*.
Note that this means 3(listp nil)* is 3nil* even though 3nil* is the empty list.
[This may be changed in the future.]
.end_defun

.defun nlistp arg
3nlistp* returns 3t* if its argument is anything besides a cons,
otherwise 3nil*.
3nlistp* is identical to 3atom*, and so 3(nlistp nil)*
returns 3t*.
[This may be changed in the future, if and when 3listp* is changed.]
.end_defun

.defun atom arg
'cindex "atom"
The predicate 3atom* returns 3t* if its argument is not a cons,
otherwise 3nil*.
.end_defun

.defun numberp arg
'cindex "number"
3numberp* returns 3t* if its argument is any kind of number,
otherwise 3nil*.
.end_defun

.defun fixp arg
3fixp* returns 3t* if its argument is a fixed-point number, i.e. a
fixnum or a bignum, otherwise 3nil*.
.end_defun

.defun floatp arg
3floatp* returns 3t* if its argument is a floating-point number,
i.e. a flonum or a small flonum, otherwise 3nil*.
.end_defun

.defun fixnump arg
3fixnump* returns 3t* if its argument is a fixnum, otherwise 3nil*.
.end_defun

.defun bigp arg
3bigp* returns 3t* if 2arg* is a bignum, otherwise 3nil*.
.end_defun

.defun flonump arg
3flonump* returns 3t* if 2arg* is a (large) flonum, otherwise 3nil*.
.end_defun

.defun small-floatp arg
3small-floatp* returns 3t* if 2arg* is a small flonum, otherwise 3nil*.
.end_defun

.defun stringp arg
'cindex "string"
3stringp* returns 3t* if its argument is a string, otherwise 3nil*.
.end_defun

.defun arrayp arg
'cindex "array"
3arrayp* returns 3t* if its argument is an array, otherwise 3nil*.
Note that strings are arrays.
.end_defun

.defun functionp arg &optional allow-special-forms
'cindex "function"
'cindex "applicable function"
3functionp* returns 3t* if its argument is a function (essentially, something
that is acceptable as the first argument to 3apply*), otherwise it returns 3nil*.
In addition to interpreted, compiled, and microcoded functions, 3functionp*
is true of closures, select-methods (see (select-method)), and symbols whose function
definition is 3functionp*.  3functionp* is not true of objects which can be called
as functions but are not normally thought of as functions: arrays, stack groups, entities,
and instances.  If 2allow-special-forms* is specified and non-3nil*, then 3functionp*
will be true of macros and special-form functions (those with quoted arguments).  Normally
3functionp* returns 3nil* for these since they do not behave like functions.
As a special case, 3functionp* of a symbol whose function definition is an array
returns 3t*, because in this case the array is being used as a function rather than
as an object.
.end_defun

.defun subrp arg
3subrp* returns 3t* if its argument is any compiled code object,
otherwise 3nil*.  The Lisp Machine system doesn't use the term "subr",
but the name of this function comes from Maclisp.
.end_defun

.defun closurep arg
'cindex "closure"
3closurep* returns 3t* if its argument is a closure, otherwise 3nil*.
.end_defun

.defun entityp arg
'cindex "entity"
3entityp* returns 3t* if its argument is an entity, otherwise 3nil*.
See (entity) for information about "entities".
.end_defun

.defun locativep arg
'cindex "locative"
3locativep* returns 3t* if its argument is a locative, otherwise 3nil*.
.end_defun

.defun typep arg &optional type
3typep* is really two different functions.  With one argument,
3typep* is not really a predicate; it returns a symbol describing the
type of its argument.  With two arguments, 3typep* is a predicate which
returns 3t* if 2arg* is of type 2type*, and 3nil* otherwise.
Note that an object can be "of" more than one type, since one type can
be a subset of another.

The symbols that can be returned by 3typep* of one argument are:
.table 3
.item :symbol
2arg* is a symbol.
.item :fixnum
2arg* is a fixnum (not a bignum).
.item :bignum
2arg* is a bignum.
.item :flonum
2arg* is a flonum (not a small-flonum).
.item :small-flonum
2arg* is a small flonum.
.item :list
2arg* is a cons.
.item :locative
2arg* is a locative pointer (see (locative)).
.item :compiled-function
2arg* is the machine code for a compiled function (sometimes called a FEF).
.item :microcode-function
2arg* is a function written in microcode.
.item :closure
2arg* is a closure (see (closure)).
.item :select-method
2arg* is a select-method table (see (select-method)).
.item :stack-group
2arg* is a stack-group (see (stack-group)).
.item :string
2arg* is a string.
.item :array
2arg* is an array that is not a string.
.item :random
Returned for any built-in data type that does not fit into one of the above categories.
.item 2foo*
An object of user-defined data type 2foo* (any symbol).  The primitive type
of the object could be array, instance, or entity.
See Named Structures, (named-structure), and Flavors, (flavor).
.end_table

The 2type* argument to 3typep* of two arguments can be any of the above
keyword symbols (except for 3:random*), the name of a user-defined data type
(either a named structure or a flavor), or one of the following additional
symbols:
.table 3
.item :atom
Any atom (as determined by the 3atom* predicate).
.item :fix
Any kind of fixed-point number (fixnum or bignum).
.item :float
Any kind of floating-point number (flonum or small-flonum).
.item :number
Any kind of number.
.item :instance
An instance of any flavor.  See (flavor).
.item :entity
An entity.  3typep* of one argument returns the name of the particular
user-defined type of the entity, rather than 3:entity*.
.end_table

See also 3data-type*, (data-type-fun).

Note that 3(typep nil) => :symbol*, and 3(typep nil ':list) => nil*; the
latter may be changed.
.end_defun

.nopara
The following functions are some other general purpose predicates.

.defun eq x y
3(eq 2x y*) => t* if and only if 2x* and 2y* are the same object.
It should be noted that things that print the same are not necessarily 3eq* to each other.
In particular, numbers with the same value
need not be 3eq*, and two similar lists are usually not 3eq*.
'cindex "eq versus equal"
.lisp
.exdent 96 Examples:
(eq 'a 'b) => nil
(eq 'a 'a) => t
(eq (cons 'a 'b) (cons 'a 'b)) => nil
(setq x (cons 'a 'b)) (eq x x) => t
.end_lisp
Note that in Zetalisp equal fixnums are 3eq*; this is not true in Maclisp.
Equality does not imply 3eq*-ness for other types of numbers.  To compare numbers,
use 3=*; see (=-fun).
.end_defun

.defun neq x y
3(neq 2x y*)* = 3(not (eq 2x y*))*.  This is provided
simply as an abbreviation for typing convenience.
.end_defun

.defun equal x y
The 3equal* predicate returns 3t* if its arguments are similar
(isomorphic) objects. (cf. 3eq*)
'cindex "eq versus equal"
'cindex "equal versus ="
Two numbers are 3equal* if they have the same value and type (for
example, a flonum is never 3equal* to a fixnum, even if 3=* is true of them).
For conses, 3equal* is defined
recursively as the two 3car*'s being 3equal* and the two 3cdr*'s
being equal.  Two strings are 3equal* if they have the same length,
and the characters composing them are the same; see 3string-equal*,
(string-equal-fun).  Alphabetic case is ignored (but see
3alphabetic-case-affects-string-comparison*,
(alphabetic-case-affects-string-comparison-var)).  All other objects
are 3equal* if and only if they are 3eq*.  Thus 3equal* could have
been defined by:
.lisp
(defun equal (x y)
  (cond ((eq x y) t)
	((neq (typep x) (typep y)) nil)
	((numberp x) (= x y))
	((stringp x) (string-equal x y))
	((listp x) (and (equal (car x) (car y))
			(equal (cdr x) (cdr y))))))
.end_lisp

As a consequence of the above definition, it can be seen that
3equal* may compute forever when applied to looped list structure. 
In addition, 3eq* always implies 3equal*; that is, if 3(eq a b)*
then 3(equal a b)*.  An intuitive definition of 3equal* (which is
not quite correct) is that two objects are 3equal* if they look the
same when printed out.  For example:
.lisp
(setq a '(1 2 3))
(setq b '(1 2 3))
(eq a b) => nil
(equal a b) => t
(equal "Foo" "foo") => t
.end_lisp
.end_defun

.defun not x
.defun1 null x
	3not* returns 3t* if 2x* is 3nil*, else 3nil*.
3null* is the same as 3not*; both functions are included for the sake
of clarity.  Use 3null* to check whether something is 3nil*; use 3not*
to invert the sense of a logical value.  Even though Lisp uses the symbol
3nil* to represent falseness, you shouldn't make understanding of your program
depend on this fortuitously.  For example, one often writes:
.lisp
(cond ((not (null lst)) ... )
      ( ... ))
1rather than*
(cond (lst ... )
      ( ... ))
.end_lisp
	There is no loss of efficiency, since these will compile into exactly
the same instructions.
.end_defun

@chapter "Evaluation"
.setq evaluator-chapter chapter-number
'cindex "evaluation"
.setq description-of-evaluation page

@c Somewhere we should explain why sstatus uuolinks isn't needed.

	The following is a complete description of the actions taken by the
evaluator, given a 2form* to evaluate.

	If 2form* is a number, the result is 2form*.

	If 2form* is a string, the result is 2form*.

	If 2form* is a symbol, the result is the binding of 2form*.
If 2form* is unbound, an error is signalled.  The way symbols are
bound is explained in (variable-section) below.

	If 2form* is not any of the above types, and is not a list,
an error is signalled.

	In all remaining cases, 2form* is a list.  The evaluator
examines the 3car* of the list to figure out what to do next.  There
are three possibilities: this form may be a 2special form*, a 2macro
form*, or a plain-old 2function form*.  Conceptually, the evaluator
knows specially about all the symbols whose appearance in the 3car* of a
form make that form a special form, but the way the evaluator actually
works is as follows.  If the 3car* of the form is a symbol, the evaluator
finds the object in the function cell of the symbol (see (symbol)) and
starts all over as if that object had been the 3car* of the list.  If the
3car* isn't a symbol, then if it's a cons whose 3car* is the symbol
3macro*, then this is a macro form; if it is a "special function" (see
(special-function)) then this is a special form; otherwise, it should
be a regular function, and this is a function form.

	If 2form* is a special form, then it is handled accordingly;
each special form works differently.  All of them are documented in this
manual.  The internal workings of special forms are explained in more
detail on (special-function), but this hardly ever affects you.

	If 2form* is a macro form, then the macro is expanded as
explained in chapter (macros-chapter).

	If 2form* is a function form, it calls for the 2application*
of a function to 2arguments*.  The 3car* of the form is a function
or the name of a function.  The 3cdr* of the form is a list of
subforms.  Each subform is evaluated, sequentially.  The values produced
by evaluating the subforms are called the "arguments" to the function.
The function is then applied to those arguments.  Whatever results the
function 2returns* are the values of the original 2form*.

	There is a lot more to be said about evaluation.  The way variables
work and the ways in which they are manipulated, including the binding of
arguments, is explained in (variable-section).  A basic explanation of
functions is in (function-section).  The way functions can return more
than one value is explained in (multiple-value).  The description of all
of the kinds of functions, and the means by which they are manipulated, is
in chapter (function-chapter).  Macros are explained in chapter
(macros-chapter).  The 3evalhook* facility, which lets you do something
arbitrary whenever the evaluator is invoked, is explained in
(evalhook-section).  Special forms are described all over the manual; each
special form is in the section on the facility it is part of.


@section Variables
.setq variable-section section-page

In Zetalisp, variables are implemented using symbols.  Symbols
are used for many things in the language, such as naming functions,
naming special forms, and being keywords; they are also useful to
programs written in Lisp, as parts of data structures.  But when the
evaluator is given a symbol, it treats it as a variable, using the value
cell to hold the value of the variable.  If you evaluate a symbol, you
get back the contents of the symbol's value cell.

There are two different ways of changing the value of a variable.  One
is to 2set* the variable.  Setting a variable changes its value to a
new Lisp object, and the previous value of the variable is forgotten.
Setting of variables is usually done with the 3setq* special form.

The other way to change the value of a variable is with 2binding*
(also called "lambda-binding").  When a variable is bound, its old value
is first saved away, and then the value of the variable is made to be
the new Lisp object.  When the binding is undone, the saved value is
restored to be the value of the variable.  Bindings are always followed
by unbindings.  The way this is enforced is that binding is only done by
special forms that are defined to bind some variables, then evaluate some
subforms, and then unbind those variables.  So the variables are all
unbound when the form is finished.  This means that the evaluation of
the form doesn't disturb the values of the variables that are bound;
whatever their old value was, before the evaluation of the form, gets
restored when the evaluation of the form is completed.  If such a form
is exited by a non-local exit of any kind, such as 3*throw* (see
(*throw-fun)) or 3return* (see (return-fun)), the bindings are
undone whenever the form is exited.

The simplest construct for binding variables is the 3let* special
form.  The 3do* and 3prog* special forms can also bind variables, in
the same way 3let* does, but they also control the flow of the program
and so are explained elsewhere (see (do-fun)).  3let** is just a
sequential version of 3let*; the other special forms below are only
used for esoteric purposes.

Binding is an important part of the process of applying interpreted
functions to arguments.  This is explained in the next section.

'cindex local variable
When a Lisp function is compiled, the compiler understands the use of
symbols as variables.  However, the compiled code generated by the
compiler does not actually use symbols to represent variables.  Rather,
the compiler converts the references to variables within the program
into more efficient references, that do not involve symbols at all.  A
variable that has been changed by the compiler so that it is not
implemented as a symbol is called a "local" variable.  When a local
variable is bound, a memory cell is allocated in a hidden, internal
place (the Lisp control stack) and the value of the variable is
stored in this cell.  You cannot use a local variable without first
binding it; you can only use a local variable inside of a special form
that binds that variable.  Local variables do not have any "top level"
value; they do not even exist outside of the form that binds them.

'cindex special variable
The variables which are associated with symbols (the kind which
are used by non-compiled programs) are called "special" variables.

Local variables and special variables do not behave quite the same way,
because "binding" means different things for the two of them.  Binding a
special variable saves the old value away and then uses the value
cell of the symbol to hold the new value, as explained above.  Binding
a local variable, however, does not do anything to the symbol.  In fact,
it creates a new memory cell to hold the value, i.e. a new local variable.

Thus, if you compile a function, it may do different things after it has
been compiled.  Here is an example:

.lisp
(setq a 2)	      ;1Set the variable 3a* to the value 32*.*

(defun foo ()	      ;1Define a function named 3foo*.*
  (let ((a 5))	      ;1Bind the symbol 3a* to the value 35*.*
    (bar)))	      ;1Call the function 3bar*.*

(defun bar ()	      ;1Define a function named 3bar*.*
  a)		      ;1It just returns the value of the variable 3a*.*

(foo) => 5	      ;1Calling 3foo* returns 35*.*

(compile 'foo)	      ;1Now compile 3foo*.*

(foo) => 2	      ;1This time, calling 3foo* returns 32*.*
.end_lisp

This is a very bad thing, because the compiler is only supposed to speed
things up, without changing what the function does.  Why did the function
3foo* do something different when it was compiled?  Because 3a* was
converted from a special variable into a local variable.  After 3foo* was
compiled, it no longer had any effect on the value cell of the symbol 3a*,
and so the symbol retained its old contents, namely 32*.

In most uses of variables in Lisp programs, this problem doesn't come
up.  The reason it happened here is because the function 3bar* refers
to the symbol 3a* without first binding 3a* to anything.  A
reference to a variable that you didn't bind yourself is called a 2free
reference*; in this example, 3bar* makes a free reference to 3a*.

We mentioned above that you can't use a local variable without first
binding it.  Another way to say this is that you can't ever have a free
reference to a local variable.  If you try to do so, the compiler will
complain.  In order for our functions to work, the compiler must be told
2not* to convert 3a* into a local variable; 3a* must remain a
special variable.  Normally, when a function is compiled, all variables
in it are made to be "local".  You can stop the compiler from making a
variable local by "declaring" to the compiler that the variable is
"special".  When the compiler sees references to a variable that has
been declared special, it uses the symbol itself as the variable instead
of making a local variable.

Variables can be declared by the special forms 3defvar* and
3defconst* (see below), or by explicit compiler declarations (see
(special-fun)).  The most common use of special variables is as
"global" variables: variables used by many different functions
throughout a program, that have top-level values.

Had 3bar* been compiled, the compiler would have seen the free
reference and printed a warning message: 3Warning: a declared
special.*  It would have automatically declared 3a* to be special and
proceeded with the compilation.  It knows that free references mean that
special declarations are needed.  But when a function is compiled that
binds a variable that you want to be treated as a special variable but
that you have not explicitly declared, there is, in general, no way for
the compiler to automatically detect what has happened, and it will
produce incorrect output.  So you must always provide declarations for
all variables that you want to be treated as special variables.

When you declare a variable to be special using 3declare* rather than
3local-declare*, the declaration is "global"; that is, it applies
wherever that variable name is seen.  After 3fuzz* has been declared
special using 3declare*, all following uses of 3fuzz* will be
treated by the compiler as references to the same special variable.
Such variables are called "global variables", because any function can
use them; their scope is not limited to one function.  The special forms
3defvar* and 3defconst* are useful for creating global variables;
not only do they declare the variable special, but they also provide a
place to specify its initial value, and a place to add documentation.
In addition, since the names of these special forms start with "3def*" and
since they are used at the top-level of files, the Lisp Machine editor
can find them easily.

Here are the special forms used for setting variables.

.defspec setq @{variable value@}...
The 3setq* special form is used to set the value of a variable or of
many variables.  The first 2value* is evaluated, and the first
2variable* is set to the result.  Then the second 2value* is
evaluated, the second 2variable* is set to the result, and so on for
all the variable/value pairs.  3setq* returns the last value, i.e.
the result of the evaluation of its last subform.
.lisp
.exdent 96 Example:
(setq x (+ 3 2 1) y (cons x nil))
.end_lisp
3x* is set to 36*, 3y* is set to 3(6)*, and the 3setq* form
returns 3(6)*.  Note that the first variable was set before
the second value form was evaluated, allowing that form to use the new value of 3x*.
.end_defspec

.defspec psetq @{variable value@}...
A 3psetq* form is just like a 3setq* form, except
that the variables are set "in parallel"; first all of the 2value* forms
are evaluated, and then the 2variables* are set to the resulting
values.
.lisp
.exdent 96 Example:
(setq a 1)
(setq b 2)
(psetq a b b a)
a => 2
b => 1
.end_lisp
.end_defspec

Here are the special forms used for binding variables.

.defspec let ((var value)...) body...
3let* is used to bind some variables to some objects, and evaluate some forms
(the "body") in the context of those bindings.
A 3let* form looks like
.lisp
(let ((2var1* 2vform1*)
      (2var2* 2vform2*)
      ...)
  2bform1*
  2bform2*
  ...)
.end_lisp
When this form is evaluated, first the 2vforms* (the values) are evaluated.
Then the 2vars* are bound to the values returned by the
corresponding 2vforms*.  Thus the bindings happen in parallel;
all the 2vforms* are evaluated before any of the 2vars* are bound.
Finally, the 2bforms* (the body) are evaluated sequentially, the old values
of the variables are restored, and the result of the last 2bform* is returned.

You may omit the 2vform* from a 3let* clause, in which case it is as
if the 2vform* were 3nil*: the variable is bound to 3nil*.
Furthermore, you may replace the entire clause (the list of the variable
and form) with just the variable, which also means that the variable
gets bound to 3nil*.  Example:
.lisp
(let ((a (+ 3 3))
      (b 'foo)
      (c)
      d)
  ...)
.end_lisp
Within the body, 3a* is bound to 36*, 3b* is bound to 3foo*, 3c* is
bound to 3nil*, and 3d* is bound to 3nil*.
.end_defspec

.defspec let* ((var value)...) body...
3let** is the same as 3let* except that the binding is sequential.  Each
2var* is bound to the value of its 2vform* before the next 2vform*
is evaluated.  This is useful when the computation of a 2vform* depends on
the value of a variable bound in an earlier 2vform*.  Example:
.lisp
(let* ((a (+ 1 2))
       (b (+ a a)))
 ...)
.end_lisp
Within the body, 3a* is bound to 33* and 3b* is bound to 36*.
.end_defspec

.defspec let-if condition ((var value)...) body...
3let-if* is a variant of 3let* in which the binding of variables is conditional.
The variables must all be special variables.
The 3let-if* special form, typically written as
.lisp
(let-if 2cond*
	((2var-1* 2val-1*) (2var-2* 2val-2*)...)
  2body-form1* 2body-form2*...)
.end_lisp
first evaluates the predicate form 2cond*.  If the result is non-3nil*, the value forms
2val-1*, 2val-2*, etc. are evaluated and then the variables 2var-1*, 2var-2*,
etc. are bound to them.  If the result is 3nil*, the
2vars* and 2vals* are ignored.  Finally the body forms are evaluated.
.end_defspec

.defspec let-globally ((var value)...) body...
3let-globally* is similar in form to 3let* (see (let-fun)).
The difference is that 3let-globally* does not 2bind* the
variables; instead, it saves the old values and 2sets* the variables,
and sets up an 3unwind-protect*
(see (unwind-protect-fun)) to set them back.  The important
difference between 3let-globally* and 3let* is that when
the current stack group (see (stack-group)) co-calls some other stack
group, the old values of the variables are 2not* restored.  Thus
3let-globally* makes the new values visible in all stack groups and
processes that don't bind the variables themselves, not just the current stack group.
.end_defspec

.defspec progv symbol-list value-list body...
3progv* is a special form to provide the user with extra control
over binding.  It binds a list of special variables to a list of values,
and then evaluates some forms.  The lists of special variables and values
are computed quantities; this is what makes 3progv* different from
3let*, 3prog*, and 3do*.

3progv* first evaluates 2symbol-list* and 2value-list*, and then binds each
symbol to the corresponding value.  If too few values are supplied, the
remaining symbols are bound to 3nil*.  If too many values are
supplied, the excess values are ignored.

After the symbols have been bound to the values, the 2body* forms are
evaluated, and finally the symbols' bindings are undone.
The result returned is the value of the last form in the body.
.lisp
.exdent 96 Example:
(setq a 'foo b 'bar)

(progv (list a b 'b) (list b)
  (list a b foo bar))
    => (foo nil bar nil)
.end_lisp
During the evaluation of the body of this 3progv*, 3foo*
is bound to 3bar*, 3bar* is bound to 3nil*, 3b* is
bound to 3nil*, and 3a* retains its top-level value 3foo*.
.end_defspec

.defspec progw vars-and-vals-form body...
3progw* is a somewhat modified kind of 3progv*.  Like 3progv*, it
only works for special variables.
First, 2vars-and-val-forms-form* is evaluated.  Its value should be a list
that looks like the first subform of a 3let*:
.lisp
  ((2var1* 2val-form-1*)
   (2var2* 2val-form-2*)
   ...)
.end_lisp
Each element of this list is processed in turn, by evaluating the 2val-form*,
and binding the 2var* to the resulting value.  Finally, the 2body* forms are
evaluated sequentially, the bindings are undone, and the result of the last
form is returned.  Note that the bindings are sequential, not parallel.

This is a very unusual special form because of the way the evaluator is
called on the result of an evaluation.  Thus 3progw* is mainly
useful for implementing special forms and for functions part of whose
contract is that they call the interpreter.  For an example of the latter,
see 3sys:*break-bindings** ((sys:*break-bindings*-var)); 3break* implements
this by using 3progw*.
.end_defspec

.nopara
Here are the special forms for defining special variables.

.defspec defvar variable [initial-value] [documentation]
3defvar* is the recommended way to declare the use of a global variable in a
program.  Placed at top level in a file,
.lisp
(defvar 2variable*)
.end_lisp
declares 2variable* special for the sake of compilation, and records
its location for the sake of the editor so that you can ask to see where
the variable is defined.  If a second subform is supplied,
.lisp
(defvar 2variable* 2initial-value*)
.end_lisp
2variable* is initialized to the result of evaluating the form
2initial-value* unless it already has a value, in which case it
keeps that value.  2initial-value*
is not evaluated unless it is used; this is useful if it does something
expensive like creating a large data structure.

3defvar* should be used only at top level, never in function
definitions, and only for global variables (those used by more than one
function).  3(defvar foo 'bar)* is roughly equivalent to
.lisp
(declare (special foo))
(if (not (boundp 'foo))
    (setq foo 'bar))
.end_lisp

.lisp
(defvar 2variable* 2initial-value* 2documentation*)
.end_lisp
allows you to include a documentation string which describes what the
variable is for or how it is to be used.   Using such a documentation
string is even better than commenting the use of the variable, because
the documentation string is accessible to system programs that can
show the documentation to you while you are using the machine.

If 3defvar* is used in a patch file (see (patch-facility))
or is a single form (not a region) evaluated with the editor's
compile/evaluate from buffer commands,
if there is an initial-value the variable is always set to it
regardless of whether it is already bound.
.end_defspec

.defspec defconst variable [initial-value] [documentation]
3defconst* is the same as 3defvar* except that if an initial value
is given the variable is always set to it regardless of whether it is
already bound.  The rationale for this is that 3defvar* declares a
global variable, whose value is initialized to something but will then
be changed by the functions that use it to maintain some state.  On the
other hand, 3defconst* declares a constant, whose value will never be
changed by the normal operation of the program, only by changes 2to* the program.
3defconst* always sets the variable to the specified value
so that if, while developing or debugging the program, you change your
mind about what the constant value should be, and then you evaluate the
3defconst* form again, the variable will get the new value.
It is 2not* the intent of 3defconst* to declare that the value of
2variable* will never change; for example, 3defconst* is 2not* license to the compiler
to build assumptions about the value of 2variable* into programs being compiled.
.end_defspec

@section Functions
.setq function-section section-page
.setq lambda-list section-page
.cindex lambda list

In the description of evaluation on (description-of-evaluation), we
said that evaluation of a function form works by applying the function
to the results of evaluating the argument subforms.  What is a function,
and what does it mean to apply it?  In Zetalisp there are many
kinds of functions, and applying them may do many different kinds of
things.  For full details, see (function-functions).  Here we will
explain the most basic kinds of functions and how they work.  In
particular, this section explains 2lambda lists* and all their
important features.

The simplest kind of user-defined function is the 2lambda-expression*,
which is a list that looks like:
.lisp
(lambda 2lambda-list* 2body1* 2body2*...)
.end_lisp
The first element of the lambda-expression is the symbol 3lambda*; the
second element is a list called the 2lambda list*, and the rest of the
elements are called the 2body*.  The lambda list, in its simplest
form, is just a list of variables.  Assuming that this simple form
is being used, here is what happens when a lambda expression is applied
to some arguments.  First, the number of arguments and the number of
variables in the lambda list must be the same, or else an error is signalled.
Each variable is bound to the corresponding argument value.  Then
the forms of the body are evaluated sequentially.  After this, the
bindings are all undone, and the value of the last form in the body is
returned.

This may sound something like the description of 3let*, above.  The
most important difference is that the lambda-expression is not a form at
all; if you try to evaluate a lambda-expression, you will get told that
3lambda* is not a defined function.  The lambda-expression is a
2function*, not a form.   A 3let* form gets evaluated, and the
values to which the variables are bound come from the evaluation of some
subforms inside the 3let* form; a lambda-expression gets applied, and
the values are the arguments to which it is applied.

.cindex parameters

The variables in the lambda list are sometimes called 2parameters*,
by analogy with other languages.  Some other terminologies would refer
to these as 2formal parameters*, and to arguments as 2actual parameters*.

Lambda lists can have more complex structure than simply being a list of
variables.  There are additional features accessible by using certain
keywords (which start with 3&*) and/or lists as elements of the
lambda list.

The principal weakness of the simple lambda lists is that any
function written with one must only take a certain, fixed number of
arguments.  As we know, many very useful functions, such as 3list*,
3append*, 3+*, and so on, accept a varying number of arguments.
Maclisp solved this problem by the use of 2lexprs* and 2lsubrs*,
which were somewhat inelegant since the parameters had to be referred to
by numbers instead of names (e.g. 3(arg 3)*).  (For compatibility
reasons, Zetalisp supports 2lexpr*s, but they should not be
used in new programs).  Simple lambda lists also require that
arguments be matched with parameters by their position in the
sequence.  This makes calls hard to read when there are a great many
arguments.  Keyword parameters enable the use of other styles of call
which are more readable.

.cindex "keyword parameters"
.cindex "positional parameters"
.cindex "optional parameters"
.cindex "required parameters"
.cindex "rest parameters"

	In general, a function in Zetalisp has zero or more
2positional* parameters, followed if desired by a single 2rest*
parameter, followed by zero or more 2keyword* parameters.  The
positional and keyword parameters may be 2required* or 2optional*,
but all the optional parameters must follow all the required ones.
The required/optional distinction does not apply to the rest
parameter.

The caller must provide enough arguments so that each of the required
parameters gets bound, but he may provide extra arguments, for some of
the optional parameters.  Also, if there is a rest parameter, he can
provide as many extra arguments as he wants, and the rest parameter
will be bound to a list of all these extras.  Optional parameters may
have a 2default-form*, which is a form to be evaluated to produce
the default value for the parameter if no argument is supplied.

Positional parameters are matched with arguments by the position of
the arguments in the argument list.  Keyword parameters are matched
with their arguments by matching the keyword name; the arguments need
not appear in the same order as the parameters.  If an optional
positional argument is omitted, then no further arguments can be
present.  Keyword parameters allow the caller to decide independently
for each one whether to specify it.
	Here is the exact explanation of how this all works.  When
3apply* (the primitive function that applies functions
to arguments) matches up the arguments with the parameters, it follows the
following algorithm: 
	The positional parameters are dealt with first.
	The first required positional parameter is bound to the first
argument.  3apply* continues to bind successive required
positional parameters
to the successive arguments.  If, during this process, there are no
arguments left but there are still some required parameters
(positional or keyword) which have
not been bound yet, it is an error ("too few arguments").
	Next, after all required parameters are handled, 3apply*
continues with the optional positional parameters, if any.  It binds
successive parameter to the next argument.  If, during this process, there are no arguments
left, each remaining optional parameter's default-form is evaluated,
and the parameter is bound to it.  This is done one parameter at a time;
that is, first one default-form is evaluated, and then the parameter is
bound to it, then the next default-form is evaluated, and so on.
This allows the default for an argument to depend on the previous argument.
	Now, if there are no remaining parameters (rest or keyword), and there are no
remaining arguments, we are finished.  If there are no more parameters
but there are still some arguments remaining, an error is caused ("too
many arguments").  If parameters remain, all the remaining arguments
are used for 2both* the rest parameter, if any, and the keyword
parameters.

	First, if there is a rest parameter, it is bound to a list of all
the remaining arguments.  If there are no
remaining arguments, it gets bound to 3nil*.
	If there are keyword parameters, the same remaining arguments are
used to bind them, as follows.
	The arguments for the keyword parameters are treated as a list
of alternating keyword symbols and associated values.  Each symbol is
matched with the keyword parameter names, and the matching keyword
paramater is bound to the value which follows the symbol.  All the
remaining arguments are treated in this way.  Since the arguments are
usually obtained by evaluation, those arguments which are keyword
symbols are typically quoted in the call; but they do not have to be.
The keyword symbols are compared by means of 3eq*, which means they
must be specified in the correct package.  The keyword symbol for a
parameter has the same print name as the parameter, but resides in the
keyword package regardless of what package the parameter name itself
resides in.  (You can specify the keyword symbol explicitly in the
lambda list if you must; see below).
	If any keyword parameter has not received a value when all the
arguments have been processed, this is an error if the parameter is
required.  If it is optional, the default-form for the parameter is
evaluated and the parameter is bound to its value.
	There may be a keyword symbol among the arguments which does not match any
keyword parameter name.  The function itself specifies whether this is
an error.  If it is not an error, then the non-matching symbols and
their associated values are ignored.  The function can access these
symbols and values through the rest parameter, if there is one.
It is common for a function to check only for certain keywords, and
pass its rest parameter to another function using 3lexpr-funcall*;
then that function will check for the keywords that concern it.
	The way you express which parameters are required, optional,
and rest is by means of specially recognized symbols, which are called
3&-2keywords**, in the lambda list.  All such symbols' print names
begin with the character "3&*".  A list of all such symbols is the value of
the symbol 3lambda-list-keywords*. 
.setq &rest page
.setq &key page
	The keywords used here are 3&key*, 3&optional* and 3&rest*.
The way they are used is best explained by means of examples;
the following are typical lambda lists, followed by descriptions
of which parameters are positional, rest or keyword; and required or optional.
.table 7
.item (a b c)
3a*, 3b*, and 3c* are all required and positional.  The function must be
passed three arguments.
.item (a b &optional c)
3a* and 3b* are required, 3c* is optional.  All three are
positional.  The function may be passed either two or three arguments.
.item (&optional a b c)
3a*, 3b*, and 3c* are all optional and positional.  The function may
be passed any number of arguments between zero and three, inclusive.
.item (&rest a)
3a* is a rest parameter.  The function may be passed any number of arguments.
.item (a b &optional c d &rest e)
3a* and 3b* are required positional, 3c* and 3d* are optional
positional, and 3e* is rest.  The function may be passed two or more
arguments.
.item (&key a b)
3a* and 3b* are both required keyword parameters.  A typical
call would look like
.lisp
(foo ':b 69 ':a '(some elements))
.end_lisp
This illustrates that the parameters can be matched in either order.
.item (&key a &optional b)
3a* is required keyword, and 3b* is optional keyword.
The sample call above would be legal for this function also; so would
.lisp
(foo ':a '(some elements))
.end_lisp
which doesn't specify 3b*.
.item (x &optional y &rest z &key a b)
3x* is required positional, 3y* is optional positional,
3z* is rest, and 3a* and 3b* are optional keyword.
One or more arguments are allowed.  One or two arguments specify only
the positional parameters.  Arguments beyond the second specify both
the rest parameter and the keyword parameters, so that
.lisp
(foo 1 2 ':b '(a list))
.end_lisp
specifies 31* for 3x*, 32* for 3y*, 3(:b (a
list))* for 3z*, and 3(a list)* for 3b*.  It does not
specify 3a*.
.item (&rest z &key a b c &allow-other-keys)
3z* is rest, and 3a*, 3b* and 3c* are optional keyword
parameters.  3&allow-other-keys* says that absolutely any keyword
symbols may appear among the arguments; these symbols and the values
that follow them have no effect on the keyword parameters, but do
become part of the value of 3z*.
.item (&rest z &key &allow-other-keys)
This is equivalent to 3(&rest z)*.  So, for that matter, is the
previous example, if the function does not use the values of 3a*,
3b* and 3c*.
.end_table
	In all of the cases above, the 2default-form* for each
optional parameter is 3nil*.  To specify your own default forms,
instead of putting a symbol as the element of a lambda list, put in a
list whose first element is the symbol (the parameter itself) and whose
second element is the default-form.  Only optional parameters may have
default forms; required parameters are never defaulted, and rest
parameters always default to 3nil*.  For example:
.table 7
.item (a &optional (b 3))
The default-form for 3b* is 33*.  3a* is a required parameter, and
so it doesn't have a default form.
.item (&optional (a 'foo) &rest d &key b (c (symeval a)))
3a*'s default-form is 3'foo*, 3b*'s is 3nil*, and 3c*'s is
3(symeval a)*.  Note that if
the function whose lambda list this is were called on no arguments,
3a* would be bound to the symbol 3foo*, and 3c* would be bound
to the binding of the symbol 3foo*; this illustrates the fact
that each variable is bound immediately after its default-form is evaluated,
and so later default-forms may take advantage of earlier parameters
in the lambda list.  3b* and 3d* would be bound to 3nil*.
.end_table
	For a keyword parameter, you normally specify the variable name,
and the keyword proper is usually computed from it.  You can specify the
keyword symbol independently if you need to.  To do this, use a
two-level list instead of a symbol: 3((keyword variable))*.  The top
level of list can also contain an default value and supplied-p variable,
for optional arguments.
.table 7
.item (&key ((foo:a a)) ((foo:b b)))
The function with this argument list will accept two keywords
3foo:a* and 3foo:b*, which will set variables 3a* and 3b*.
.end_table

.cindex supplied-p variable

	Occasionally it is important to know whether a certain optional
parameter was defaulted or not.  You can't tell from just examining its
value, since if the value is the default value, there's no way to tell
whether the caller passed that value explicitly, or whether the caller
didn't pass any value and the parameter was defaulted.  The way to tell
for sure is to put a third element into the list: the third element
should be a variable (a symbol), and that variable is bound to 3nil*
if the parameter was not passed by the caller (and so was defaulted), or
3t* if the parameter was passed.  The new variable is called a "supplied-p"
variable; it is bound to 3t* if the parameter is supplied.
For example:
.table 7
.item (a &optional (b 3 c))
The default-form for 3b* is 33*, and the "supplied-p" variable for 3b*
is 3c*.  If the function is called with one argument, 3b* will be bound
to 33* and 3c* will be bound to 3nil*.  If the function is called
with two arguments, 3b* will be bound to the value that was passed
by the caller (which might be 33*), and 3c* will be bound to 3t*.
.end_table

It is possible to specify a keyword parameter's symbol independently
of its parameter name.  To do this, use 2two* nested lists to
specify the parameter.  The outer list is the one which can contain
the default-form and supplied-p variable, if the parameter is
optional.  The first element of this list, instead of a symbol, is
again a list, whose elements are the keyword symbol and the parameter
variable name.
For example:
.table 7
.item (&key ((:a a)) &optional ((:b b) t))
This is equivalent to 3(&key a &optional (b t)).
.item (&key ((:base base-value)))
This allows a keyword which the user will know under the name
3:base*, without making the parameter shadow the value of
3base*, which is used for printing numbers.
.end_table

	It is also possible to include, in the lambda list, some other
symbols, which are bound to the values of their default-forms upon
entry to the function.  These are 2not* parameters, and they are
never bound to arguments; they just get bound, as if they appeared
in a 3let* form.  (Whether you use these aux-variables or bind the
variables with 3let* is a stylistic decision.)
	To include such symbols, put them after any parameters, preceeded
by the 3&*-keyword 3&aux*.  Examples:
.table 7
.item (a &optional b &rest c &aux d (e 5) (f (cons a e)))
3d*, 3e*, and 3f* are bound, when the function is
called, to 3nil*, 35*, and a cons of the first argument and 5.
.end_table

	Note that aux-variables are bound sequentially rather than
in parallel.

	It is important to realize that the list of arguments to which a
rest-parameter is bound is set up in whatever way is most efficiently
implemented, rather than in the way that is most convenient for the
function receiving the arguments.  It is not guaranteed to be a
"real" list.  Sometimes the rest-args list is stored in the
function-calling stack, and loses its validity when the function
returns.  If a rest-argument is to be returned or made part of permanent
list-structure, it must first be copied (see 3copylist*, page
(copylist-fun)), as you must always assume that it is one of these
special lists.  The system will not detect the error of omitting to copy
a rest-argument; you will simply find that you have a value which seems
to change behind your back.  At other times the rest-args list will be
an argument that was given to 3apply*; therefore it is not safe to
3rplaca* this list as you may modify permanent data structure.  An
attempt to 3rplacd* a rest-args list will be unsafe in this case,
while in the first case it would cause an error, since lists in the stack
are impossible to 3rplacd*.

	There are some other keywords in addition to those mentioned
here.  See (lambda-list-keywords) for a complete list.  You only need
to know about 3&optional* and 3&rest* in order to understand this
manual.

	Lambda lists provide "positional" arguments: the meaning of an
argument comes from its position in the lambda list.  For example, the
first argument to 3cons* is the object that will be the 3car* of the new
cons.  Sometimes it is desirable to use "keyword" arguments, in which
the meaning of an argument comes from a "keyword" symbol that tells the
callee which argument this is.  While lambda lists do not provide
keyword arguments directly, there is a convention for functions that
want arguments passed to them in the keyword fashion.  The convention is
that the function takes a rest-argument, whose value is a list of
alternating keyword symbols and argument values.  If 3cons* were
written as a keyword-style function, then instead of saying
.lisp
(cons 4 (foo))
.end_lisp
you could say either of
.lisp
(cons ':car 4 ':cdr (foo))
1or*
(cons ':cdr (foo) ':car 4)
.end_lisp
assuming the keyword symbols were 3:car* and 3:cdr*.  Keyword symbols
are always in the keyword package,
and so their printed representations always start with a colon; the reason
for this is given in chapter (package-chapter).

This use of keyword arguments is only a convention; it is not built into
the function-calling mechanism of the language.  Your function must
contain Lisp programming to take apart the rest parameter and make sense
of the keywords and values.  The special form 3keyword-extract* (see
(keyword-extract-fun)) may be useful for this.

@section "Some Functions and Special Forms"

This section describes some functions and special forms.  Some are parts
of the evaluator, or closely related to it.  Some have to do
specifically with issues discussed above such as keyword arguments.
Some are just fundamental Lisp forms that are very important.

.defun eval x
3(eval 2x*)* evaluates 2x*, and returns the result.
.lisp
.exdent 96 Example:
(setq x 43 foo 'bar)
(eval (list 'cons x 'foo))
    => (43 . bar)
.end_lisp
	It is unusual to explicitly call 3eval*, since usually
evaluation is done implicitly.  If you are writing a simple Lisp program and
explicitly calling 3eval*, you are probably doing something wrong.
3eval* is primarily useful in programs which deal with Lisp itself,
rather than programs about knowledge or mathematics or games.
	Also, if you are only interested in getting at the value of a
symbol (that is, the contents of the symbol's value cell), then you
should use the primitive function 3symeval* (see (symeval-fun)).
	Note: the actual name of the compiled code for 3eval* is "3si:*eval*";
this is because use of the 2evalhook* feature binds the function cell of 3eval*.
If you don't understand this, you can safely ignore it.
'cindex "evalhook"
	Note: unlike Maclisp, 3eval* never takes a second argument; there
are no "binding context pointers" in Zetalisp.
They are replaced by Closures (see (closure)).
.end_defun

.defun apply f arglist
3(apply 2f* 2arglist*)* applies the function 2f* to the list of
arguments 2arglist*.  2arglist* should be a list; 2f* can be any function.
.lisp
.exdent 96 Examples:
(setq fred '+) (apply fred '(1 2)) => 3
(setq fred '-) (apply fred '(1 2)) => -1
(apply 'cons '((+ 2 3) 4)) =>
	((+ 2 3) . 4)	2not* (5 . 4)
.end_lisp
	Of course, 2arglist* may be 3nil*.
	Note: unlike Maclisp, 3apply* never takes a third argument; there
are no "binding context pointers" in Zetalisp.

	Compare 3apply* with 3funcall* and 3eval*.
.end_defun

.defun funcall f &rest args
3(funcall 2f* 2a1* 2a2* ... 2an*)* applies the
function 2f* to the arguments 2a1*, 2a2*, ..., 2an*.
2f* may not
be a special form nor a macro; this would not be meaningful.
.lisp
.exdent 96 Example:
(cons 1 2) => (1 . 2)
(setq cons 'plus)
(funcall cons 1 2) => 3
.end_lisp
This shows that the use of the symbol 3cons* as the name of a function
and the use of that symbol as the name of a variable do not interact.
The 3cons* form invokes the function named 3cons*.
The 3funcall* form evaluates the variable and gets the symbol 3plus*,
which is the name of a different function.
.end_defun

.defun lexpr-funcall f &rest args
3lexpr-funcall* is like a cross between 3apply* and 3funcall*.
3(lexpr-funcall 2f* 2a1* 2a2* ... 2an* 2l*)* applies the
function 2f*
to the arguments 2a1* through 2an* followed by the elements of
the list 2l*.  Note that since it treats its last argument specially,
3lexpr-funcall* requires at least two arguments.
.lisp
.exdent 96 Examples:
(lexpr-funcall 'plus 1 1 1 '(1 1 1)) => 6

(defun report-error (&rest args)
   (lexpr-funcall (function format) error-output args))
.end_lisp

3lexpr-funcall* with two arguments does the same thing as 3apply*.
.end_defun

Note:  the Maclisp functions 3subrcall*, 3lsubrcall*, and 3arraycall*
are not needed on the Lisp Machine; 3funcall* is just as efficient.
3arraycall* is provided for compatibility; it ignores its first
subform (the Maclisp array type) and is otherwise identical to 3aref*.
3subrcall* and 3lsubrcall* are not provided.
'findex "subrcall"
'findex "lsubrcall"
@c 'findex "arraycall"  -- commented out since it does exist after all

.defun call function &rest argument-specifications
3call* offers a very general way of controlling what arguments you
pass to a function.  You can provide either individual arguments a la
3funcall* or lists of arguments a la 3apply*, in any order.  In
addition, you can make some of the arguments 2optional*.  If the
function is not prepared to accept all the arguments you specify, no
error occurs if the excess arguments are optional ones.  Instead, the
excess arguments are simply not passed to the function.

The 2argument-specs* are alternating keywords (or lists of keywords)
and values.  Each keyword or list of keywords says what to do with the
value that follows.  If a value happens to require no keywords,
provide 3()* as a list of keywords for it.

Two keywords are presently defined: 3:optional* and 3:spread*.
3:spread* says that the following value is a list of arguments.
Otherwise it is a single argument.  3:optional* says that all the
following arguments are optional.  It is not necessary to specify
3:optional* with all the following 2argument-specs*, because it is
sticky.

Example:
.lisp
(call #'foo () x ':spread y '(:optional :spread) z () w)
.end_lisp
The arguments passed to 3foo* are the value of 3x*, the
elements of the value of 3y*, the elements of the value of
3z*, and the value of 3w*.  The function 3foo* must be
prepared to accept all the arguments which come from 3x* and
3y*, but if it does not want the rest, they are ignored.
.end_defun

.defspec quote object
'cindex "quote"
3(quote 2x*)* simply returns 2x*.  It is useful specifically
because 2x* is not evaluated; the 3quote* is how you make a form
that returns an arbitrary Lisp object.  3quote* is used to include
constants in a form.
.lisp
.exdent 96 Examples:
(quote x) => x
(setq x (quote (some list)))   x => (some list)
.end_lisp
	Since 3quote* is so useful but somewhat cumbersome to type, the reader normally
converts any form preceded by a single quote (3'*) character into a 3quote* form.
.lisp
1For example,*
(setq x '(some list))
1is converted by read into*
(setq x (quote (some list)))
.end_lisp
.end_defspec

.defspec function f
This means different things depending on whether 2f* is a function
or the name of a function.  (Note that in neither case is 2f* evaluated.)
The name of a function is a symbol or a function-spec list
(see (function-spec)).  A function is typically a list whose car
is the symbol 3lambda*, however there are several other kinds
of functions available (see (kinds-of-functions)).

If you want to pass an anonymous function as an argument to a function,
you could just use 3quote*; for example:
.lisp
(mapc (quote (lambda (x) (car x))) some-list)
.end_lisp
This works fine as far as the evaluator is concerned.  However, the
compiler cannot tell that the first argument is going to be used as a
function; for all it knows, 3mapc* will treat its first argument as a
piece of list structure, asking for its 3car* and 3cdr* and so forth.  So
the compiler cannot compile the function; it must pass the
lambda-expression unmodified.  This means that the function will not get
compiled, which will make it execute more slowly than it might
otherwise.

The 3function* special form is one way to tell the compiler that
it can go ahead and compile the lambda-expression.  You just use
the symbol 3function* instead of 3quote*:
.lisp
(mapc (function (lambda (x) (car x))) some-list)
.end_lisp
This will cause the compiler to generate code such that 3mapc* will be
passed a compiled-code object as its first argument.

That's what the compiler does with a 3function* special form whose
subform 2f* is a function.  The evaluator, when given such a form,
just returns 2f*; that is, it treats 3function* just like 3quote*.

To ease typing, the reader converts 3#'2thing** into 3(function 2thing*)*.
So 3#'* is similar to 3'* except that it produces a
3function* form instead of a 3quote* form.  So the above form
could be written as 
.lisp
(mapc #'(lambda (x) (car x)) some-list)
.end_lisp

If 2f* is not a function but the name of a function
(typically a symbol, but in general any kind of function spec), then
3function* returns the definition of 2f*; it is like 3fdefinition*
except that it is a special form instead of a function, and so
.lisp
(function fred)  1is like*  (fdefinition 'fred)
                 1which is like* (fsymeval 'fred)
.end_lisp
since 3fred* is a symbol.
3function* is the same for the compiler and the interpreter when
2f* is the name of a function.

Another way of explaining 3function* is that it causes 2f* to be
treated the same way as it would as the car of a form.  Evaluating
the form 3(2f* 2arg1* 2arg2*...)* uses the function definition
of 2f* if it is a symbol, and otherwise expects 2f* to be a list
which is a lambda-expression.  Note that the car of a form may not be
a non-symbol function spec, to avoid difficult-to-read code.  This can be
written as
.lisp
(funcall (function 2spec*) 2args*...)
.end_lisp

You should be careful about whether you use 3#'* or 3'*.  Suppose
you have a program with a variable 3x* whose value is assumed to
contain a function that gets called on some arguments.  If you want that
variable to be the 3car* function, there are two things you could say:
.lisp
(setq x 'car)
1or*
(setq x #'car)
.end_lisp
The former causes the value of 3x* to be the symbol 3car*, whereas
the latter causes the value of 3x* to be the function object found in
the function cell of 3car*.  When the time comes to call the function
(the program does 3(funcall x ...)*), either of these two will work
(because if you use a symbol as a function, the contents of the symbol's
function cell is used as the function, as explained in the beginning of
this chapter).  The former case is a bit slower, because the function
call has to indirect through the symbol, but it allows the function
to be redefined, traced (see (trace-fun)), or advised (see (advise-fun)).
The latter case, while faster, picks up the function definition out of
the symbol 3car* and does not see any later changes to it.

The other way to tell the compiler that an argument that is a lambda
expression should be compiled is for the function that takes the
function as an argument to use the 3&functional* keyword in its
lambda list; see (lambda-list-keywords).  The basic system functions that
take functions as arguments, such as 3map* and 3sort*, have
this 3&functional* keyword and hence quoted lambda-expressions
given to them will be recognized as functions by the compiler.

In fact, 3mapc* uses 3&functional* and so the example given above
is bogus; in the particular case of the first argument to the function 3mapc*,
3quote* and 3function* are synonymous.  It is good style to use 3function*
(or 3#'*) anyway, to make the intent of the program completely clear.
.end_defspec

.defun false
Takes no arguments and returns 3nil*.
.end_defun

.defun true
Takes no arguments and returns 3t*.
.end_defun

.defun ignore &rest ignore
Takes any number of arguments and returns 3nil*.  This is often useful
as a "dummy" function; if you are calling a function that takes a function
as an argument, and you want to pass one that doesn't do anything and
won't mind being called with any argument pattern, use this.
.end_defun

.defspec comment
3comment* ignores its form and returns the symbol 3comment*.
.lisp
.exdent 96 Example:
(defun foo (x)
    (cond ((null x) 0)
          (t (comment x has something in it)
             (1+ (foo (cdr x))))))
.end_lisp
	Usually it is preferable to comment code using the
semicolon-macro feature of the standard input syntax.  This allows the
user to add comments to his code which are ignored by the lisp reader. 
.lisp
.exdent 96 Example:
(defun foo (x)
    (cond ((null x) 0)
          (t (1+ (foo (cdr x))))     ;x has something in it
      ))
.end_lisp

A problem with such comments is that they are discarded when the form
is read into Lisp.  If the function is read into Lisp, modified, and printed
out again, the comment will be lost.  However, this style of operation is hardly
ever used; usually the source of a function is kept in an editor buffer and
any changes are made to the buffer, rather than the actual list structure
of the function.  Thus, this is not a real problem.
.end_defspec

.defspec progn body...
The 2body* forms are evaluated in order from left to right and the value
of the last one is returned.
3progn* is the primitive control structure construct for "compound
statements".  Although lambda-expressions, 3cond* forms, 3do* forms, and
many other control structure forms use 3progn* implicitly, that is,
they allow multiple forms in their bodies, there are occasions when
one needs to evaluate a number of forms for their side-effects and
make them appear to be a single form.
.lisp
.exdent 96 Example:
(foo (cdr a)
     (progn (setq b (extract frob))
	    (car b))
     (cadr b))
.end_lisp

(When 2form1* is 3'compile*, the 3progn* form has a special meaning
to the compiler.  This is discussed on (progn-quote-compile-discussion).)
.end_defspec

.defspec prog1 first-form body...
3prog1* is similar to 3progn*, but it returns the value of its 2first* form rather
than its last.
It is most commonly used to evaluate an expression with side effects, and return
a value which must be computed 2before* the side effects happen.
.lisp
.exdent 96 Example:
(setq x (prog1 y (setq y x)))
.end_lisp
interchanges the values of the variables 2x* and 2y*.  3prog1* never
returns multiple values.
.end_defspec

.defspec prog2 first-form second-form body...
3prog2* is similar to 3progn* and 3prog1*, but it returns its
2second* form.  It is included largely for compatibility with old programs.
.end_defspec

See also 3bind* ((bind-fun)), which is a
subprimitive that gives you maximal control over binding.

The following three functions (3arg*, 3setarg*, and 3listify*)
exist only for compatibility with Maclisp 2lexprs*.  To write functions
that can accept variable numbers of arguments, use the 3&optional* and
3&rest* keywords (see (function-section)).
'cindex "lexpr"

.defun arg x
3(arg nil)*, when evaluated during the application of
a lexpr, gives the number of arguments supplied to that
lexpr.
This is primarily a debugging aid, since lexprs also receive their number of arguments
as the value of their 3lambda*-variable.

3(arg 2i*)*, when evaluated during the application of a lexpr, gives the value of the
2i*'th argument to the lexpr.  2i* must be a fixnum in this case. It is an error if 2i* is less than 1 or greater than the number
of arguments supplied to the lexpr.
.lisp
.exdent 96 Example:
(defun foo nargs            ;1define a lexpr *foo.
    (print (arg 2))         ;1print the second argument.*
    (+ (arg 1)              ;1return the sum of the first*
       (arg (- nargs 1))))  ;1and next to last arguments.*
.end_lisp
.end_defun

.defun setarg i x
3setarg* is used only during the application of a lexpr.
3(setarg 2i x*)* sets the
lexpr's 2i*'th argument to 2x*.
2i* must be greater than zero
and not greater than the number of arguments passed to the lexpr.
After 3(setarg 2i x*)* has been done, 3(arg 2i*)* will return 2x*.
.end_defun

.defun listify n
3(listify 2n*)* manufactures a list of 2n* of the
arguments of a lexpr.  With a positive argument 2n*, it returns a
list of the first 2n* arguments of the lexpr.  With a negative
argument 2n*, it returns a list of the last 3(abs 2n*)*
arguments of the lexpr.  Basically, it works as if defined as follows: 
.lisp
(defun listify (n)
     (cond ((minusp n)
	    (listify1 (arg nil) (+ (arg nil) n 1)))
	   (t
	    (listify1 n 1)) ))

(defun listify1 (n m)      ;1 auxiliary function.*
     (do ((i n (1- i))
	  (result nil (cons (arg i) result)))
	 ((< i m) result) ))
.end_lisp
.end_defun

@section Multiple Values
.cindex multiple values
.cindex returning multiple values
.setq multiple-value section-page

The Lisp Machine includes a facility by which the evaluation of a form
can produce more than one value.  When a function needs to return more
than one result to its caller, multiple values are a cleaner way of
doing this than returning a list of the values or 3setq*'ing special
variables to the extra values.  In most Lisp function calls, multiple
values are not used.  Special syntax is required both to 2produce*
multiple values and to 2receive* them.

The primitive for producing multiple values is 3values*, which takes
any number of arguments and returns that many values.  If the last form
in the body of a function is a 3values* with three arguments, then
a call to that function will return three values.
The other primitive for producing multiple values is 3return*, which when
given more than one argument returns all its arguments as the values of
the 3prog* or 3do* from which it is returning.  The variant
3return-from* also can produce multiple values.  Many system functions
produce multiple values, but they all do it via the 3values*
and 3return* primitives.

The special forms for receiving multiple values are 3multiple-value*,
3multiple-value-bind*, and 3multiple-value-list*.  These consist of
a form and an indication of where to put the values returned by that form.
With the first two of these, the caller requests a certain number of
returned values.  If fewer values are returned than the number requested,
then it is exactly as if the rest of the values were present and had the
value 3nil*.  If too many values are returned, the rest of the values
are ignored.  This has the advantage that you don't have to pay attention
to extra values if you don't care about them, but it has the disadvantage
that error-checking similar to that done for function calling is not present.

.defun values &rest args
Returns multiple values, its arguments.  This is the primitive
function for producing multiple values.  It is legal to call 3values* with
no arguments; it returns no values in that case.
.end_defun

.defun values-list list
Returns multiple values, the elements of the 2list*.  3(values-list '(a b c))*
is the same as 3(values 'a 'b 'c)*.
2list* may be 3nil*, the empty list, which causes no values to be returned.
.end_defun

3return* and its variants can only be used within the 3do* and
3prog* special forms and their variants, and so they are explained on
(return-fun).

.defspec multiple-value (variable...) form
3multiple-value* is a special
form used for calling a function which
is expected to return more than one value.
2form* is evaluated, and the 2variables*
are 2set* (not lambda-bound) to the values returned by 2form*.  If more values
are returned than there are variables, then the extra values
are ignored.  If there are more variables than values returned,
extra values of 3nil* are supplied.  If 3nil* appears in the 2var-list*,
then the corresponding value is ignored (you can't use 3nil* as a variable.)
.lisp
.exdent 96 Example:
(multiple-value (symbol already-there-p)
	(intern "goo"))
.end_lisp
In addition to its first value (the symbol), 3intern* returns a second
value, which is 3t* if the symbol returned as the first value was
already interned, or else 3nil* if 3intern* had to create it.  So if
the symbol 3goo* was already known, the variable 3already-there-p*
will be set to 3t*, otherwise it will be set to 3nil*.  The third value
returned by 3intern* will be ignored.

3multiple-value* is usually used for effect rather than for value; however,
its value is defined to be the first of the values returned by 2form*.
.end_defspec

.defspec multiple-value-bind (variable...) form body...
This is similar to 3multiple-value*, but locally binds the variables which
receive the values, rather than setting them, and has a body--a set of forms
which are evaluated with these local bindings in effect.
First 2form* is evaluated.  Then the 2variables* are
bound to the values returned by 2form*.  Then the 2body* forms
are evaluated sequentially, the bindings are undone, and the result
of the last 2body* form is returned.
.end_defspec

.defspec multiple-value-list form
3multiple-value-list* evaluates 2form*, and returns a list of
the values it returned.  This is useful for when you don't know how many values
to expect.
.lisp
.exdent 96 Example:
(setq a (multiple-value-list (intern "goo")))
a => (goo nil #<Package User>)
.end_lisp
This is similar to the example of 3multiple-value* above; 3a* will be set
to a list of three elements, the three values returned by 3intern*.
.end_defspec

Due to the syntactic structure of Lisp, it is often the case that the value
of a certain form is the value of a sub-form of it.  For example, the
value of a 3cond* is the value of the last form in the selected clause.
In most such cases, if the sub-form produces multiple values, the original
form will also produce all of those values.  This 2passing-back* of
multiple values of course has no effect unless eventually one of the
special forms for receiving multiple values is reached.
The exact rule governing passing-back of multiple values is as follows:

If 2X* is a form, and 2Y* is a sub-form of 2X*, then if the value
of 2Y* is unconditionally returned as the value of 2X*, with no
intervening computation, then all the multiple values returned by 2Y*
are returned by 2X*.  In all other cases, multiple values or only
single values may be returned at the discretion of the implementation;
users should not depend on whatever way it happens to work, as it
may change in the future or in other implementations.  The reason we don't guarantee
non-transmission of multiple values is because such a guarantee would
not be very useful and the efficiency cost of enforcing it would be
high.  Even 3setq*'ing a variable to the result of a form, then
returning the value of that variable might be made to pass multiple
values by an optimizing compiler which realized that the 3setq*ing of
the variable was unnecessary.

Note that use of a form as an argument to a function never receives
multiple values from that form.  That is, if the form 3(foo (bar))*
is evaluated and the call to 3bar* returns many values, 3foo* will
still only be called on one argument (namely, the first value returned),
rather than being called on all the values returned.  We choose not to
generate several separate arguments from the several values, because
this would make the source code obscure; it would not be syntactically
obvious that a single form does not correspond to a single argument.
Instead, the first value of a form is used as the argument and the
remaining values are discarded.  Receiving of multiple values is done
only with the above-mentioned special forms.

For clarity, descriptions of the interaction of several common special
forms with multiple values follow.  This can all be deduced from the
rule given above.  Note well that when it says that multiple values
are not returned, it really means that they may or may not be returned,
and you should not write any programs that depend on which way it works.

The body of a 3defun* or a 3lambda*, and variations such as the
body of a function, the body of a 3let*, etc., pass back multiple
values from the last form in the body.

3eval*, 3apply*, 3funcall*, and 3lexpr-funcall*
pass back multiple values from the function called.

3progn* passes back multiple values from its last form.  3progv* and
3progw* do so also.  3prog1* and 3prog2*, however, do not pass
back multiple values.

Multiple values are passed back from the last subform of an 3and* or 3or* form,
but not from previous forms since the return is conditional.  Remember
that multiple values are only passed back when the value of a sub-form
is unconditionally returned from the containing form.  For example,
consider the form 3(or (foo) (bar))*.  If 3foo* returns a non-3nil*
first value, then only that value will be returned as the value of the
form.  But if it returns 3nil* (as its first value), then 3or*
returns whatever values the call to 3bar* returns.

3cond* passes back multiple values from the last form in the
selected clause, but not if the clause is only one long (i.e. the
returned value is the value of the predicate) since the return is
conditional.  This rule applies even to the last clause, where the return
is not really conditional (the implementation is allowed to pass
or not to pass multiple values in this case, and so you shouldn't
depend on what it does).  3t* should be used as the predicate of the
last clause if multiple values are desired, to make it clear to the
compiler (and any human readers of the code!) that the return is not
conditional.

The variants of 3cond* such as 3if*, 3select*, 3selectq*, and
3dispatch* pass back multiple values from the last form in the
selected clause.

The number of values returned by 3prog* depends on the 3return* form
used to return from the 3prog*.  (If a 3prog* drops off the end it
just returns a single 3nil*.)  If 3return* is given two or more
subforms, then 3prog* will return as many values as the 3return* has
subforms.  However, if the 3return* has only one subform, then the
3prog* will return all of the values returned by that one subform.

3do* behaves like 3prog* with respect to 3return*.
All the values of the last 2exit-form* are returned.

3unwind-protect* passes back multiple values from its protected form.

3*catch* does not pass back multiple values from the last form
in its body, because it is defined to return its
own second value (see (*catch-fun)) to tell you whether the 3*catch*
form was exited normally or abnormally.  This is sometimes inconvenient
when you want to propagate back multiple values but you also want to wrap
a 3*catch* around some forms.  Usually people get around this problem
by enclosing the 3*catch* in a 3prog* and using 3return* to pass
out the multiple values, 3return*ing through the 3*catch*.  This is
inelegant, but we don't know anything that's much better.

@chapter Flow of Control
.setq flow-chapter chapter-number
.cindex control structure
.cindex flow of control
	Lisp provides a variety of structures for flow of control.

	Function application is the basic method for construction of
programs.  Operations are written as the application of a function
to its arguments.  Usually, Lisp programs are written as a large collection
of small functions, each of which implements a simple operation.
These functions operate by calling one another, and so larger
operations are defined in terms of smaller ones.

'cindex "recursion"
	A function may always call itself in Lisp.  The calling of
a function by itself is known as 2recursion*; it is analogous
to mathematical induction.

'cindex "iteration"
	The performing of an action repeatedly (usually with some
changes between repetitions) is called 2iteration*, and is provided as
a basic control structure in most languages.  The 2do* statement of
PL/I, the 2for* statement of ALGOL/60, and so on are examples of
iteration primitives.  Lisp provides two general iteration facilities:
3do* and 3loop*, as well as a variety of special-purpose iteration
facilities.  (3loop* is sufficiently complex that it is explained
in its own chapter later in the manual; see (loop-fun).)  There is also
a very general construct to allow the traditional "goto" control structure,
called 3prog*.

'cindex "conditional"
	A 2conditional* construct is one which allows a program
to make a decision, and do one thing or another based on some logical
condition.  Lisp provides the simple one-way conditionals 3and* and 3or*,
the simple two-way conditional 3if*, and more general multi-way
conditionals such as 3cond* and 3selectq*.
The choice of which form to use in any particular situation is a matter
of personal taste and style.

'cindex "non-local exit"
'cindex "exit"
	There are some 2non-local exit* control structures, analogous
to the 2leave*, 2exit*, and 2escape* constructs in many modern
languages.
'c French, Italian, ...
The general ones are 3*catch* and 3*throw*; there is also 3return*
and its variants, used for exiting iteration the constructs 3do*, 3loop*,
and 3prog*.

	Zetalisp also provides a coroutine capability,
explained in the section on 2stack-groups* ((stack-group)), and
a multiple-process facility (see (process)).  There is also a facility
for generic function calling using message passing; see (flavor).

@section "Conditionals"

.defspec if
3if* is the simplest conditional form.  The "if-then" form looks like:
.lisp
(if 2predicate-form* 2then-form*)
.end_lisp
2predicate-form* is evaluated, and if the result is non-3nil*, the
2then-form* is evaluated and its result is returned.  Otherwise, 3nil*
is returned.

In the "if-then-else" form, it looks like
.lisp
(if 2predicate-form* 2then-form* 2else-form*)
.end_lisp
2predicate-form* is evaluated, and if the result is non-3nil*, the
2then-form* is evaluated and its result is returned.  Otherwise, the
2else-form* is evaluated and its result is returned.

If there are more than three subforms, 3if* assumes you want more than
one 2else-form*; they are evaluated sequentially and the result of the
last one is returned, if the predicate returns 3nil*.  There is
disagreement as to whether this consistutes good programming style or
not.
.end_defspec

.defspec cond
The 3cond* special form consists of the symbol 3cond* followed by
several 2clauses*.  Each clause consists of a predicate form, called
the 2antecedent*, followed by zero or more 2consequent* forms.

.lisp
(cond (2antecedent consequent consequent*...)
      (2antecedent*)
      (2antecedent consequent* ...)
      ... )
.end_lisp

The idea is that each clause represents a case which
is selected if its antecedent is satisfied and the antecedents
of all preceding clauses were not satisfied.  When a clause
is selected, its consequent forms are evaluated.

3cond* processes its clauses in order from left to right.  First,
the antecedent of the current clause is evaluated.  If the result is
3nil*, 3cond* advances to the next clause.  Otherwise, the cdr of
the clause is treated as a list consequent forms which are
evaluated in order from left to right.  After evaluating the
consequents, 3cond* returns without inspecting any remaining
clauses.  The value of the 3cond* special form is the value of the
last consequent evaluated, or the value of the antecedent if there
were no consequents in the clause.  If 3cond* runs out of clauses,
that is, if every antecedent evaluates to 3nil*, and thus no case is
selected, the value of the 3cond* is 3nil*. 
.lisp
.exdent 96 Example:
    (cond ((zerop x)    ;1First clause:*
           (+ y 3))     ; (zerop x)1 is the antecedent.*
                        ; (+ y 3)1 is the consequent.*
          ((null y)     ;1A clause with 2 consequents:*
           (setq y 4)   ;1 this*
           (cons x z))  ;1 and this.*
          (z)           ;1A clause with no consequents: the antecedent is *
			;1 just 3z*.  If 3z* is non-3nil*, it will be returned.*
	  (t		;1An antecedent of *t
	   105)		;1 is always satisfied.*
       )		;1This is the end of the cond.*
.end_lisp
.end_defspec

.defspec cond-every
3cond-every* has the same syntax as 3cond*, but executes every clause whose
predicate is satisfied, not just the first.  If a predicate is the symbol
3otherwise*, it is satisfied if and only if no preceding predicate is
satisfied.  The value returned
is the value of the last consequent form in the last clause whose predicate
is satisfied.  Multiple values are not returned.
.end_defspec


.defspec and form...
3and* evaluates the 2form*s one at a time,
from left to right.  If any 2form* evaluates to 3nil*, 3and*
immediately returns 3nil* without evaluating the remaining
2forms*.  If all the 2forms* evaluate to non-3nil* values, 3and* returns
the value of the last 2form*.

3and* can be used in two different ways.  You can use it as a logical
3and* function, because it returns a true value only if all of its
arguments are true.  So you can use it as a predicate:
.lisp
(if (and socrates-is-a-person
         all-people-are-mortal)
    (setq socrates-is-mortal t))
.end_lisp

Because the order of evaluation is well-defined, you can do
.lisp
(if (and (boundp 'x)
         (eq x 'foo))
    (setq y 'bar))
.end_lisp
knowing that the 3x* in the 3eq* form will not be evaluated if 3x*
is found to be unbound.

You can also use 3and* as a simple conditional form:
.lisp
(and (setq temp (assq x y))
     (rplacd temp z))
.end_lisp
.lisp
(and bright-day
     glorious-day
     (princ "It is a bright and glorious day."))
.end_lisp

Note: 3(and) => t*, which is the identity for the 3and* operation.
.end_defspec

.defspec or form...
3or* evaluates the 2form*s one by one from left to right.
If a 2form* evaluates to 3nil*, 3or* proceeds to evaluate the
next 2form*.  If there are no more 2form*s, 3or* returns 3nil*.
But if a 2form* evaluates to a non-3nil* value, 3or* immediately returns
that value without evaluating any remaining 2form*s.

As with 3and*, 3or* can be used either as a logical 3or* function,
or as a conditional.
.lisp
(or it-is-fish
    it-is-fowl
    (print "It is neither fish nor fowl."))
.end_lisp
.cindex fish

Note:  3(or) => nil*, the identity for this operation.
.end_defspec

.defspec selectq
3selectq* is a conditional which chooses one of its clauses to execute
by comparing the value of a form against various constants, which are
typically keyword symbols.
Its form is as follows:
.lisp
(selectq 2key-form*
  (2test consequent consequent* ...)
  (2test consequent consequent* ...)
  (2test consequent consequent* ...)
  ...)
.end_lisp
The first thing 3selectq* does is to evaluate 2key-form*; call the resulting
value 2key*.  Then 3selectq* considers
each of the clauses in turn.  If 2key* matches the clause's
2test*, the consequents of this
clause are evaluated, and 3selectq* returns the value of the last
consequent.  If there are no matches, 3selectq* returns 3nil*.

A 2test* may be any of:
.table 1 500 1500 0 80 1
.item 1) A symbol
If the 2key* is 3eq* to the symbol, it matches.
.item 2) A number
If the 2key* is 3eq* to the number, it matches.
Only small numbers (2fixnums*) will work.
.item 3) A list
If the 2key* is 3eq* to one of the elements of the list,
then it matches.  The elements of the list should be symbols
or fixnums.
.item 4) 3t* or 3otherwise*
The symbols 3t* and 3otherwise* are special keywords which match anything.  
Either symbol may be used, it makes no difference;
3t* is mainly for compatibility with Maclisp's 3caseq* construct.
To be useful, this should be the last clause in the 3selectq*.
.end_table

Note that the 2tests* are 2not* evaluated; if you want them to
be evaluated use 3select* rather than 3selectq*.
.lisp
.exdent 96 Example:
(selectq x
  (foo (do-this))
  (bar (do-that))
  ((baz quux mum) (do-the-other-thing))
  (otherwise (ferror nil "Never heard of ~S" x)))
.end_lisp
is equivalent to
.lisp
(cond ((eq x 'foo) (do-this))
      ((eq x 'bar) (do-that))
      ((memq x '(baz quux mum)) (do-the-other-thing))
      (t (ferror nil "Never heard of ~S" x)))
.end_lisp
.end_defspec

.nopara
Also see 3defselect* ((defselect-fun)), a special form for defining a function
whose body is like a 3selectq*.

.defspec select
3select* is the same as 3selectq*, except that the elements of the
2tests* are evaluated before they are used.

This creates a syntactic ambiguity: if 3(bar baz)* is seen the
first element of a clause, is it a list of two forms, or is it one
form?  3select* interprets it as a list of two forms.  If you
want to have a clause whose test is a single form, and that form
is a list, you have to write it as a list of one form.
.lisp
.exdent 96 Example:
(select (frob x)
   (foo 1)
   ((bar baz) 2)
   (((current-frob)) 4)
   (otherwise 3))
.end_lisp
is equivalent to
.lisp
(let ((var (frob x)))
  (cond ((eq var foo) 1)
	((or (eq var bar) (eq var baz)) 2)
	((eq var (current-frob)) 4)
	(t 3)))
.end_lisp
.end_defspec

.defspec selector
3selector* is the same as 3select*, except that you get to specify the function
used for the comparison instead of 3eq*.  For example,
.lisp
(selector (frob x) equal
   (('(one . two)) (frob-one x))
   (('(three . four)) (frob-three x))
   (otherwise (frob-any x)))
.end_lisp
is equivalent to
.lisp
(let ((var (frob x)))
  (cond ((equal var '(one . two)) (frob-one x))
	((equal var '(three . four)) (frob-three x))
	(t (frob-any x))))
.end_lisp
.end_defspec

.defspec dispatch
3(dispatch 2byte-specifier* 2number* 2clauses...*)* is the same
as 3select* (not 3selectq*), but the key is obtained by evaluating
3(ldb 2byte-specifier number*)*.
2byte-specifier* and 2number* are both evaluated.  Byte specifiers
and 3ldb* are explained on (ldb-fun).
.lisp
.exdent 96 Example:
(princ (dispatch 0202 cat-type
	   (0 "Siamese.")
	   (1 "Persian.")
	   (2 "Alley.")
	   (3 (ferror nil
		      "~S is not a known cat type."
		      cat-type))))
.end_lisp
@c This example borrowed from DuMouchel.CatData
.cindex kitty
It is not necessary to include all possible values of the byte which
will be dispatched on.
.end_defmac

.defspec selectq-every
3selectq-every* has the same syntax as 3selectq*, but, like
3cond-every*, executes every selected clause instead of just the first
one.  If an 3otherwise* clause is present, it is selected if and only
if no preceding clause is selected.  The value returned is the value of
the last form in the last selected clause.  Multiple values are not
returned.  Example:
.lisp
(selectq-every animal
  ((cat dog) (setq legs 4))
  ((bird man) (setq legs 2))
  ((cat bird) (put-in-oven animal))
  ((cat dog man) (beware-of animal)))
.end_lisp
.end_defspec

.defspec caseq
The 3caseq* special form is provided for Maclisp compatibility.  It
is exactly the same as 3selectq*.  This is not perfectly compatible
with Maclisp, because 3selectq* accepts 3otherwise* as well as 3t*
where 3caseq* would not accept 3otherwise*, and because Maclisp
does some error-checking that 3selectq* does not.  Maclisp programs
that use 3caseq* will work correctly so long as they don't use the
symbol 3otherwise* as the key.
.end_defspec

@section "Iteration"
'cindex "iteration"

.defspec do
The 3do* special form provides a simple generalized iteration facility,
with an arbitrary number of "index variables" whose values are saved
when the 3do* is entered and restored when it is left, i.e. they are
bound by the 3do*.  The index variables are used in the iteration
performed by 3do*.  At the beginning, they are initialized to
specified values, and then at the end of each trip around the loop the
values of the index variables are changed according to specified
rules.  3do* allows the programmer to specify a predicate which
determines when the iteration will terminate.  The value to be
returned as the result of the form may, optionally, be specified. 

3do* comes in two varieties.

The more general, so-called "new-style" 3do* looks like:
.lisp
(do ((2var init repeat*) ...)
  (2end-test exit-form* ...)
  2body*...)
.end_lisp

The first item in the form is a list of zero or more index variable
specifiers.  Each index variable specifier is a list of the name of a
variable 2var*, an initial value form 2init*, which defaults to 3nil*
if it is omitted, and a repeat value form 2repeat*.  If 2repeat* is
omitted, the 2var* is not changed between repetitions.  If 2init* is
omitted, the 2var* is initialized to 3nil*.

An index variable specifier can also be just the name of a variable,
rather than a list.  In this case, the variable has an initial value of
3nil*, and is not changed between repetitions.

All assignment to the index variables is done in parallel.  At the
beginning of the first iteration, all the 2init* forms are evaluated,
then the 2vars* are bound to the values of the 2init* forms, their
old values being saved in the usual way.  Note that the 2init* forms
are evaluated 2before* the 2vars* are bound, i.e.  lexically
2outside* of the 3do*.  At the beginning of each succeeding
iteration those 2vars* that have 2repeat* forms get set to the
values of their respective 2repeat* forms.  Note that all the
2repeat* forms are evaluated before any of the 2vars* is set.

The second element of the 3do*-form is a list of an end-testing
predicate form 2end-test*, and zero or more forms, called the
2exit-forms*.  This resembles a 3cond* clause.  At the beginning of
each iteration, after processing of the variable specifiers, the
2end-test* is evaluated.  If the result is 3nil*, execution proceeds
with the body of the 3do*.  If the result is not 3nil*, the
2exit-forms* are evaluated from left to right and then 3do* returns.
The value of the 3do* is the value of the last 2exit-form*, or
3nil* if there were no 2exit-forms* (2not* the value of the
2end-test* as you might expect by analogy with 3cond*).

Note that the 2end-test* gets evaluated before the first time the body
is evaluated.  3do* first initializes the variables from the 2init*
forms, then it checks the 2end-test*, then it processes the body, then
it deals with the 2repeat* forms, then it tests the 2end-test*
again, and so on.  If the 3end-test* returns a non-3nil* value the
first time, then the body will never be processed.

If the second element of the form is 3nil*, there is no 2end-test*
nor 2exit-forms*, and the 2body* of the 3do* is executed only
once.  In this type of 3do* it is an error to have 2repeats*.  This
type of 3do* is no more powerful than 3let*; it is obsolete
and provided only for Maclisp compatibility.

If the second element of the form is 3(nil)*, the 2end-test* is
never true and there are no 2exit-forms*.  The 2body* of the 3do*
is executed over and over.  The infinite loop can be terminated by use
of 3return* or 3*throw*.

If a 3return* special form is evaluated inside the body of a 3do*,
then the 3do* immediately stops, unbinds its variables, and returns
the values given to 3return*.  See (return-fun) for more details
about 3return* and its variants.  3go* special forms (see (go-fun))
and 3prog*-tags can also be used inside the body of a 3do* and they mean the same
thing that they do inside 3prog* forms, but we
discourage their use since they complicate the control structure in
a hard-to-understand way.

The other, so-called "old-style" 3do* looks like:
.lisp
(do 2var* 2init* 2repeat* 2end-test* 2body*...)
.end_lisp
The first time through the loop 2var* gets the value of the 2init* form; 
the remaining times through the loop it gets the value of the 2repeat* form,
which is re-evaluated each time.  Note that the 2init* form is evaluated
before 2var* is bound, i.e. lexically 2outside* of the 3do*.
Each time around the loop, after 2var* is set,
2end-test* is evaluated.  If it is non-3nil*, the 3do* finishes
and returns 3nil*.  If the 2end-test* evaluated to 3nil*, the 2body* of
the loop is executed. As with the new-style do, 3return* and 3go*
may be used in the body, and they have the same meaning.

.lisp
.exdent 96 Examples of the older variety of 3do*:
(setq n (array-length foo-array))
(do i 0 (1+ i) (= i n)
  (aset 0 foo-array i))		1;zeroes out the array foo-array*

(do zz x (cdr zz) (or (null zz)
		      (zerop (f (car zz)))))1
                   ; this applies f to each element of x
                   ; continuously until f returns zero.
		   ; Note that the 3do* has no body.*

13return* forms are often useful to do simple searches:*
.end_lisp
.lisp
(do i 0 (1+ i) (= i n)	1; Iterate over the length of 3foo-array*.*
  (and (= (aref foo-array i) 5)	1; If we find an element which*
				1; equals 35*,*
       (return i)))             1;  then return its index.*

.end_lisp
.lisp
.exdent 96 Examples of the new form of 3do*:
(do ((i 0 (1+ i))	1; This is just the same as the above example,*
     (n (array-length foo-array)))
    ((= i n))		1; but written as a new-style 3do*.*
  (aset 0 foo-array i))	1; Note how the 3setq* is avoided.*
.end_lisp
.lisp

(do ((z list (cdr z)) 1; z starts as 3list* and is 2cdr*'ed each time.*
     (y other-list)   1; y starts as 3other-list*, and is unchanged by the do.*
     (x)	      1; x starts as 3nil* and is not changed by the 3do*.*
     w) 	      1; w starts as 3nil* and is not changed by the 3do*.*
    (nil)	      1; The end-test is 3nil*, so this is an infinite loop.*
  2body*)           1; Presumably the 2body* uses 3return* somewhere.*
.end_lisp

The construction
.lisp
(do ((x e (cdr x))
     (oldx x x))
    ((null x))
  2body*)
.end_lisp
exploits parallel assignment to index variables.  On the first
iteration, the value of 3oldx* is whatever value 3x* had before
the 3do* was entered.  On succeeding iterations, 3oldx* contains
the value that 3x* had on the previous iteration. 

In either form of 3do*, the 2body* may contain no forms at all.
Very often an iterative algorithm can be most clearly expressed entirely
in the 2repeats* and 2exit-forms* of a new-style 3do*,
and the 2body* is empty.

.lisp
(do ((x x (cdr x))
     (y y (cdr y))
     (z nil (cons (f x y) z))) ;1exploits parallel assignment.*
    ((or (null x) (null y))
     (nreverse z))             ;1typical use of *nreverse.
    )                          ;1no 3do*-body required.*

1is like* (maplist 'f x y) 1(see (maplist-fun))*.
.end_lisp
.end_defspec

.nopara
Also see 3loop* ((loop-fun)), a general iteration facility based on a keyword
syntax rather than a list-structure syntax.

.defspec do-named
Sometimes one 3do* is contained inside the body of an outer 3do*.
The 3return* function always returns from the innermost surrounding
3do*, but sometimes you want to return from an outer 3do* while
within an inner 3do*.  You can do this by giving the outer 3do* a
name.  You use 3do-named* instead of 3do* for the outer 3do*, and
use 3return-from* (see (return-from-fun)), specifying that name, to
return from the 3do-named*.

The syntax of 3do-named* is like 3do* except that the symbol 3do* is
immediately followed by the name, which should be a symbol.
.lisp
.exdent 96 Example:
(do-named george ((a 1 (1+ a))
		  (d 'foo))
		 ((> a 4) 7)
  (do ((c b (cdr c)))
      ((null c))
    ...
    (return-from george (cons b d))
    ...))
.end_lisp

	If the symbol 3t* is used as the name, then it will be made
"invisible" to 3return*s; that is, 3return*s inside that 3do-named*
will return to the next outermost level whose name is not 3t*.
3(return-from t ...)* will return from a 3do-named* named 3t*.  This
feature is not intended to be used by user-written code; it is for
macros to expand into.

If the symbol 3nil* is used as the name, it is as if this were a
regular 3do*.  Not having a name is the same as being named 3nil*.

3prog*s and 3loop*s can have names just as 3do*s can.  Since the
same functions are used to return from all of these forms, all of these
names are in the same name-space; a 3return* returns from the
innermost enclosing iteration form, no matter which of these it is, and
so you need to use names if you nest any of them within any other and
want to return to an outer one from inside an inner one.
.end_defspec

.defspec dotimes (index count) body...
3dotimes* is a convenient abbreviation for the most common integer iteration.
3dotimes* performs 2body*
the number of times given by the value of 2count*, with 2index* bound
to 30*, 31*, etc. on successive iterations.
.lisp
.exdent 96 Example:
(dotimes (i (// m n))
  (frob i))
.end_lisp
is equivalent to:
.lisp
(do ((i 0 (1+ i))
     (count (// m n)))
    (( i count))
  (frob i))
.end_lisp
except that the name 3count* is not used.  Note that 3i* takes on
values starting at zero rather than one, and that it stops before taking
the value 3(// m n)* rather than after.  You can use 3return* and
3go* and 3prog*-tags inside the body, as with 3do*.  3dotimes*
forms return 3nil* unless returned from explicitly with 3return*.
For example:
.lisp
(dotimes (i 5)
  (if (eq (aref a i) 'foo)
      (return i)))
.end_lisp
This form searches the array that is the value of 3a*, looking for
the symbol 3foo*.  It returns the fixnum index of the first element
of 3a* that is 3foo*, or else 3nil* if none of the elements
are 3foo*.
.end_defspec

.defspec dolist (item list) body...
3dolist* is a convenient abbreviation for the most common list iteration.
3dolist* performs 2body*
once for each element in the list which is the value of 2list*, with
2item* bound to the successive elements.
.lisp
.exdent 96 Example:
(dolist (item (frobs foo))
  (mung item))
.end_lisp
is equivalent to:
.lisp
(do ((lst (frobs foo) (cdr lst))
     (item))
    ((null lst))
  (setq item (car lst))
  (mung item))
.end_lisp
except that the name 3lst* is not used.
You can use 3return* and 3go* and 3prog*-tags inside the body, as with 3do*.
3dolist* forms return 3nil* unless returned from explicitly with 3return*.
.end_defspec

.cindex keywords in argument lists

.defspec keyword-extract
3keyword-extract* is an aid to writing functions which take keyword arguments
in the standard fashion.  The form
.lisp
(keyword-extract 2key-list* 2iteration-var*
	2keywords* 2flags* 2other-clauses*...)
.end_lisp
will parse the keywords out into local variables of the function.  2key-list*
is a form which evaluates to the list of keyword arguments; it is generally the
function's 3&rest* argument.  2iteration-var* is a variable used to iterate
over the list; sometimes 2other-clauses* will use the form
.lisp
(car (setq 2iteration-var* (cdr 2iteration-var*)))
.end_lisp
to extract the next element of the list.  (Note that this is not the same as 3pop*,
because it does the 3car* after the 3cdr*, not before.)

2keywords* defines the symbols which are keywords to be followed by an argument.
Each element of 2keywords* is either the name of a local variable which receives
the argument and is also the keyword, or a list of the keyword and the variable, for
use when they are different or the keyword is not to go in the keyword package.
Thus if 2keywords* is 3(foo (ugh bletch) bar)* then the keywords recognized
will be 3:foo*, 3ugh*, and 3:bar*.  If 3:foo* is specified its argument
will be stored into 3foo*.  If 3:bar* is specified its argument will be stored
into 3bar*.  If 3ugh* is specified its argument will be stored into 3bletch*.

Note that 3keyword-extract* does not bind these local variables; it assumes you
will have done that somewhere else in the code that contains the 3keyword-extract* form.

2flags* defines the symbols which are keywords not followed by an argument.
If a flag is seen its corresponding variable is set to 3t*.  (You are assumed to
have initialized it to 3nil* when you bound it with 3let* or 3&aux*.)
As in 2keywords*, an element of 2flags* may be either a variable from
which the keyword is deduced, or a list of the keyword and the variable.

If there are any 2other-clauses*, they are 3selectq* clauses selecting on the
keyword being processed.  These clauses are for handling any keywords that
are not handled by the 2keywords* and 2flags* elements.
These can be used to do special processing of certain keywords
for which simply storing the argument into a variable is not good enough.  After the
2other-clauses* there will be an 3otherwise* clause to complain about any
undefined keywords found in 2key-list*.

You can also use the 3&key* lambda-list keyword to create functions that take
keyword arguments; see (&key).
.end_defspec

.defspec prog
3prog* is a special form which provides temporary variables,
sequential evaluation of forms, and a "goto" facility.  A typical 3prog*
looks like:
.lisp
(prog (2var1 var2* (2var3 init3*) 2var4* (2var5 init5*))
 2tag1*
     2statement1*
     2statement2*
 2tag2*
     2statement3*
     . . .
    )
.end_lisp
The first subform of a 3prog* is a list of variables, each of which
may optionally have an initialization form.  The first thing evaluation
of a 3prog* form does is to evaluate all of the 2init* forms.  Then
each variable that had an 2init* form is bound to its value, and the
variables that did not have an 2init* form are bound to 3nil*.
.lisp
.exdent 96 Example:
(prog ((a t)  b  (c 5)  (d (car '(zz . pp))))
  2<body>*
  )
.end_lisp
The initial value of 3a* is 3t*, that of 3b* is 3nil*, that of
3c* is the fixnum 5, and that of 3d* is the symbol 3zz*.  The
binding and initialization of the variables is done in 2parallel*;
that is, all the initial values are computed before any of the variables
are changed.  3prog** (see (prog*-fun)) is the same as 3prog*
except that this initialization is sequential rather than parallel.

	The part of a 3prog* after the variable list is called the
2body*.  Each element of the body is either a symbol, in which case it
is called a 2tag*, or anything else (almost always a list), in which
case it is called a 2statement*.

	After 3prog* binds the  variables, it processes each form in
its body sequentially.  2tags* are skipped over.  2statements* are
evaluated, and their returned values discarded.  If the end of the body
is reached, the 3prog* returns 3nil*.  However, two special forms
may be used in 3prog* bodies to alter the flow of control.  If
3(return 2x*)* is evaluated, 3prog* stops processing its body,
evaluates 2x*, and returns the result.  If 3(go 2tag*)* is
evaluated, 3prog* jumps to the part of the body labelled with the
2tag*, where processing of the body is continued.  2tag* is not
evaluated.  3return* and 3go* and their variants are explained
fully below.

	The compiler requires that 3go* and 3return* forms be
2lexically* within the scope of the 3prog*; it is not possible for a
function called from inside a 3prog* body to 3return* to the
3prog*.  That is, the 3return* or 3go* must be inside the 3prog*
itself, not inside a function called by the 3prog*.  (This restriction
happens not to be enforced in the interpreter, but since all programs
are eventually compiled, the convention should be adhered to.  The
restriction will be imposed in future implementations of the
interpreter.)

See also the 3do* special form, which uses a body similar to
3prog*. The 3do*, 3*catch*, and 3*throw* special forms are
included in Zetalisp as an attempt to encourage goto-less programming
style, which often leads to more readable, more easily maintained code.  The
programmer is recommended to use these forms instead of 3prog*
wherever reasonable. 

If the first subform of a 3prog* is a non-3nil* symbol (rather than
a variable list), it is the name of the 3prog*, and 3return-from*
(see (return-from-fun)) can be used to return from it.  See
3do-named*, (do-named-fun).

.lisp
.exdent 96 Example:
(prog (x y z)  ;x, y, z1 are prog variables  - temporaries.*
   (setq y (car w) z (cdr w))     ;w1 is a free variable.*
loop
   (cond ((null y) (return x))
         ((null z) (go err)))
rejoin
   (setq x (cons (cons (car y) (car z))
                 x))
   (setq y (cdr y)
         z (cdr z))
   (go loop)
err
   (break are-you-sure? t)
   (setq z y)
   (go rejoin))
.end_lisp
.end_defspec

.defspec prog*
The 3prog** special form is almost the same as 3prog*.  The only
difference is that the binding and initialization of the temporary
variables is done 2sequentially*, so each one can depend on the
previous ones.  For example,
.lisp
(prog* ((y z) (x (car y)))
  (return x))
.end_lisp
returns the car of the value of 3z*.
.end_defspec

.defspec go tag
The 3go* special form is used to do a "go-to" within the
body of a 3do* or a 3prog*.  The 2tag* must be a symbol.
It is not evaluated. 3go* transfers control to the point in the body labelled by a
tag 3eq* to the one given.  If there is no such tag in the body, the
bodies of lexically containing 3prog*s and 3do*s (if any) are examined as well.
If no tag is found, an error is signalled.

.lisp
.exdent 96 Example:
(prog (x y z)
  (setq x 2some frob*)
loop
  2do something*
  (if 2some predicate* (go endtag))
  2do something more*
  (if (minusp x) (go loop))
endtag
  (return z))
.end_lisp
.end_defspec

.defspec return value...
3return* is used to exit from a 3prog*-like special form (3prog*,
3prog**, 3do*, 3do-named*, 3dotimes*, 3dolist*, 3loop*,
etc.) The 2value* forms are evaluated, and the resulting values are
returned by the 3prog* as its values.

In addition, 3break* (see (break-fun)) recognizes the typed-in form
3(return 2value*)* specially.  If this form is typed at a
3break*, 2value* will be evaluated and returned as the value of
3break*.  If not specially recognized by 3break*,
and not inside a 3prog*-like form, 3return* will cause an
error. 
.lisp
.exdent 96 Example:
(do ((x x (cdr x))
     (n 0 (* n 2)))
    ((null x) n)
 (cond ((atom (car x))
        (setq n (1+ n)))
       ((memq (caar x) '(sys boom bleah))
        (return n))))
.end_lisp
	Note that the 3return* form is very unusual: it does not ever
return a value itself, in the conventional sense.  It isn't useful to
write 3(setq a (return 3))*, because when the 3return* form is
evaluated, the containing 3do* or 3prog* is immediately exited,
and the 3setq* never happens.
A 3return* form may not appear as an argument to a
regular function, but only at the top level of a 3prog* or 3do*, or
within certain special forms such as conditionals which are within a
3prog* or 3do*.  A 3return* as an argument to a regular function would
be not only useless but possibly meaningless.  The compiler does not
bother to know how to compile it correctly in all cases.  The same is true of
3go*.

3return* can also be used with multiple arguments, to return multiple values
from a 3prog* or 3do*.  For example,
.lisp
(defun assqn (x table)
  (do ((l table (cdr l))
       (n 0 (1+ n)))
      ((null l) nil)
    (if (eq (caar l) x)
	(return (car l) n))))
.end_lisp
This function is like 3assq*, but it returns an additional value
which is the index in the table of the entry it found.

However, if you use 3return* with only one subform, then the 3prog*
or 3do* will return all of the values returned by that subform.  That
is, if you do
.lisp
(prog ()
   ...
   (return (foo 2)))
.end_lisp
and the function 3foo* returns many values, then the 3prog* will return
all of those values.  In fact, this means that
.lisp
(return (values 2form1 form2 form3*))
1is the same as*
(return 2form1 form2 form3*)
.end_lisp

It is legal to write simply 3(return)*, which will return from the 3prog*
without returning any values.

See (multiple-value) for more information.
.end_defspec

.defspec return-from name value...
The 2value* forms are evaluated, and then are
returned from the innermost containing 3prog*-like special form whose
name is 2name*.  See the description of 3do-named* ((do-named-fun))
in which named 3do*s and 3prog*s are explained.
.end_defspec

.defun return-list list
This function is like 3return* except
that the 3prog* returns all of the elements of 2list*; if
2list* has more than one element, the 3prog* does a multiple-value
return.
	To direct the returned values to a 3prog* or 3do-named* of a specific
name, use
.lisp
3(return-from 2name* (values-list 2list*))*.
.end_lisp
.end_defun

.nopara
Also see 3defunp* ((defunp-fun)), a variant of 3defun* that incorporates a 3prog*
into the function body.

@section "Non-Local Exits"
'cindex "non-local exit"
'cindex catch
'cindex throw

.defspec *catch tag body...
3*catch* is a special form used with the 3*throw* function to do
non-local exits.  First 2tag* is evaluated; the result is called the "tag"
of the 3*catch*.  Then the 2body* forms are evaluated sequentially,
and the value of the last form is returned.  However, if,
during the evaluation of the body, the
function 3*throw* is called with the same tag as the tag of the
3*catch*, then the evaluation of the body is aborted, and the
3*catch* form immediately returns the value that was the second
argument to 3*throw* without further evaluating the current 2body* form or
the rest of the body.

The 2tag*'s are used to match up 3*throw*'s with 3*catch*'s. 
3(*catch 'foo 2form*)* will catch a 3(*throw 'foo 2form*)* but
not a 3(*throw 'bar 2form*)*.  It is an error if 3*throw* is done
when there is no suitable 3*catch* (or 3catch-all*; see below).

The values 3t* and 3nil* for 2tag* are special: a 3*catch* whose
tag is one of these values will catch throws to any tag.  These are only
for internal use by 3unwind-protect* and 3catch-all* respectively.
The only difference between 3t* and 3nil* is in the error checking;
3t* implies that after a "cleanup handler" is executed control will be
thrown again to the same tag, therefore it is an error if a specific
catch for this tag does not exist higher up in the stack.  With 3nil*,
the error check isn't done.

3*catch* returns up to four values; trailing null values are not
returned for reasons of microcode simplicity, but the values not
returned will default to 3nil* if they are received with the
3multiple-value* or 3multiple-value-bind* special forms.
If the catch completes normally,
the first value is the value of 2form* and the second is 3nil*.
If a 3*throw* occurs, the first value is the second argument to
3*throw*, and the second value is the first argument to 3*throw*,
the tag thrown to.  The third and fourth values are the third and fourth
arguments to 3*unwind-stack* (see (*unwind-stack-fun))
if that was used in place of 3*throw*; otherwise these values are 3nil*.
To summarize, the four values returned by 3*catch* are the value,
the tag, the active-frame-count, and the action.
.lisp
.exdent 96 Example
(*catch 'negative
	(mapcar (function (lambda (x) 
                            (cond ((minusp x)
				   (*throw 'negative x))
				  (t (f x)) )))
               y))
.end_lisp
which returns a list of 3f* of each element of 3y* if they are all
positive, otherwise the first negative member of 3y*. 

Note that 3*catch* returns its own extra values, and so it does 2not*
propagate multiple values back from the last form.
.end_defun

.defun *throw tag value
3*throw* is used with 3*catch* as a structured non-local exit mechanism.

3(*throw 2tag x*)* throws the value of 2x* back to the most recent 3*catch*
labelled with 2tag* or 3t* or 3nil*.  Other 3*catches* are skipped over.
Both 2x* and 2tag* are evaluated, unlike the Maclisp 3throw* function.

The values 3t*, 3nil*, and 30* for 2tag* are reserved and used
for internal purposes.  3nil* may not be used, because it would cause
an ambiguity in the returned values of 3*catch*.  3t* may only be
used with 3*unwind-stack*.  30* and 3nil* are used internally when
returning out of an 3unwind-protect*.

See the description of 3*catch* for further details.
.end_defun

.defmac catch form tag
.defmac1 throw form tag
3catch* and 3throw* are provided only for Maclisp compatibility.
3(catch 2form* tag)* is the same as 3(*catch 'tag 2form*)*,
and 3(throw 2form* tag)* is the same as 3(*throw 'tag 2form*)*.
The forms of 3catch* and 3throw* without tags are not supported.
.end_defmac

'cindex unwinding a stack
.defun *unwind-stack tag value active-frame-count action
This is a generalization of 3*throw* provided for program-manipulating
programs such as the error handler.

2tag* and 2value* are the same as the corresponding arguments to
3*throw*.

A 2tag* of 3t* invokes a special feature whereby the entire stack is
unwound, and then the function 2action* is called (see below).  During
this process 3unwind-protect*s receive control, but 3catch-all*s do
not.  This feature is provided for the benefit of system programs which
want to unwind a stack completely.

2active-frame-count*, if non-3nil*, is the number of frames
to be unwound.  The definition of a "frame" is implementation-dependent.
If this counts down to zero before a suitable 3*catch*
is found, the 3*unwind-stack* terminates and
2that frame* returns 2value* to whoever called it.
This is similar to Maclisp's 3freturn* function.
'findex "freturn"

If 2action* is non-3nil*, whenever the 3*unwind-stack* would be
ready to terminate (either due to 2active-frame-count* or due to
2tag* being caught as in 3*throw*), instead 2action* is called
with one argument, 2value*.  If 2tag* is 3t*, meaning throw out
the whole way, then the function 2action* is not allowed to return.
Otherwise the function 2action* may return and its value will be
returned instead of 2value* from the 3*catch*--or from an arbitrary
function if 2active-frame-count* is in use.  In this case the
3*catch* does not return multiple values as it normally does when
thrown to.  Note that it is often useful for 2action* to be a
stack-group.

Note that if both 2active-frame-count* and 2action* are 3nil*,
3*unwind-stack* is identical to 3*throw*.
.end_defun

'cindex unwind protection
'cindex cleanup handler
.defspec unwind-protect protected-form cleanup-form...
Sometimes it is necessary to evaluate a form and make sure that
certain side-effects take place after the form is evaluated;
a typical example is:
.lisp
(progn
   (turn-on-water-faucet)
   (hairy-function 3 nil 'foo)
   (turn-off-water-faucet))
.end_lisp
The non-local exit facility of Lisp creates a situation in which
the above code won't work, however: if 3hairy-function* should
do a 3*throw* to a 3*catch* which is outside of the 3progn*
form, then 3(turn-off-water-faucet)* will never be evaluated
(and the faucet will presumably be left running).
This is particularly likely if 3hairy-function* gets an error
and the user tells the error-handler to give up and flush the computation.

In order to allow the above program to work, it can
be rewritten using 3unwind-protect* as follows:
.lisp
(unwind-protect
  (progn (turn-on-water-faucet)
	 (hairy-function 3 nil 'foo))
  (turn-off-water-faucet))
.end_lisp
If 3hairy-function* does a 3*throw* which attempts to quit
out of the evaluation of the 3unwind-protect*, the
3(turn-off-water-faucet)* form will be evaluated in between
the time of the 3*throw* and the time at which the 3*catch* returns.
If the 3progn* returns normally, then the 3(turn-off-water-faucet)*
is evaluated, and the 3unwind-protect* returns the result of the 3progn*.


The general form of 3unwind-protect* looks like
.lisp
(unwind-protect 2protected-form*
    2cleanup-form1*
    2cleanup-form2*
    ...)
.end_lisp
2protected-form* is evaluated, and when it returns or when it
attempts to quit out of the 3unwind-protect*, the 2cleanup-forms*
are evaluated.  The value of the 3unwind-protect* is the value of
2protected-form*.
Multiple values returned by the 2protected-form* are propagated back
through the 3unwind-protect*.

The cleanup forms are run in the variable-binding environment that you
would expect: that is, variables bound outside the scope of the
3unwind-protect* special form can be accessed, but variables bound
inside the 2protected-form* can't be.  In other words, the stack is
unwound to the point just outside the 2protected-form*, then the
cleanup handler is run, and then the stack is unwound some more.
.end_defspec

.defmac catch-all body...
3(catch-all 2form*)* is like 3(*catch 2some-tag form*)*
except that it will catch a
3*throw* to any tag at all.  Since the tag thrown to
is the second returned value, the caller of 3catch-all* may continue 
throwing to that tag if he wants.  The one thing that 3catch-all*
will not catch is a 3*unwind-stack* with a tag of 3t*.
3catch-all* is a macro which expands into 3*catch* with a 2tag* of 3nil*.

If you think you want this, most likely you are mistaken and you really
want 3unwind-protect*.
.end_defmac

@section "Mapping"
'cindex "mapping"

.defun map fcn &rest lists
.defun1 mapc fcn &rest lists
.defun1 maplist fcn &rest lists
.defun1 mapcar fcn &rest lists
.defun1 mapcon fcn &rest lists
.defun1 mapcan fcn &rest lists

Mapping is a type of iteration in which a function is 
successively applied to pieces of a list.
There are several options for the way in which the pieces of the list are
chosen and for what is done with the results returned by the applications of
the function.

For example, 3mapcar* operates on successive 2elements* of the list. 
As it goes down the list, it calls the function giving it an element
of the list as its one argument:  first the 3car*, then the
3cadr*, then the 3caddr*, etc., continuing until the end of the
list is reached.  The value returned by 3mapcar* is a list of the
results of the successive calls to the function.  An example of the
use of 3mapcar* would be 3mapcar*'ing the function 3abs* over
the list 3(1 -2 -4.5 6.0e15 -4.2)*, which would be written as
3(mapcar (function abs) '(1 -2 -4.5 6.0e15 -4.2))*.
The result is 3(1 2 4.5 6.0e15
4.2)*.  

In general, the mapping functions take any number of arguments.  For example,
.lisp
(mapcar 2f* 2x1* 2x2* ... 2xn*)
.end_lisp
In this case 2f* must be a function of 2n* arguments.
3mapcar* will proceed
down the lists 2x1, x2, ..., xn* in parallel.
The first argument to 2f* will
come from 2x1*, the second from 2x2*, etc.
The iteration stops as soon as any of the lists is exhausted.
(If there are no lists at all, then there are no lists to be exhausted,
so the function will be called repeatedly over and over.  This is an
obscure way to write an infinite loop.  It is supported for
consistency.)  If you want to call a function of many arguments
where one of the arguments successively takes on the values of the elements
of a list and the other arguments are constant, you can use a circular
list for the other arguments to 3mapcar*.  The function 3circular-list*
is useful for creating such lists; see (circular-list).

There are five other mapping functions besides 3mapcar*.  3maplist*
is like 3mapcar* except that the function is applied to the list and
successive cdr's of that list rather than to successive elements of the
list.  3map* and 3mapc* are like 3maplist* and 3mapcar*
respectively, except that they don't return any useful value.  These
functions are used when the function is being called merely for its
side-effects, rather than its returned values.  3mapcan* and
3mapcon* are like 3mapcar* and 3maplist* respectively, except
that they combine the results of the function using 3nconc* instead
of 3list*.  That is, 3mapcon* could have been defined by
.lisp
(defun mapcon (f x y)
    (apply 'nconc (maplist f x y)))
.end_lisp
Of course, this definition is less general than the real one.

Sometimes a 3do* or a straightforward recursion is preferable to a
map;  however, the mapping functions should be used wherever they
naturally apply because this increases the clarity of the code. 

Often 2f* will be a lambda-expression, rather than a symbol;
for example,
.lisp
(mapcar (function (lambda (x) (cons x something)))
	some-list)
.end_lisp

The functional argument to a mapping function must be a function, acceptable
to 3apply*--it cannot be a macro or the name of a special form.

.group
Here is a table showing the relations between
the six map functions.
.nofill
7
                              applies function to

                         |  successive  |   successive  |
                         |   sublists   |    elements   |
          ---------------+--------------+---------------+
              its own    |              |               | 
              second     |     map      |     mapc      |
             argument    |              |               |
          ---------------+--------------+---------------+
            list of the  |              |               |
returns      function    |    maplist   |    mapcar     |
              results    |              |               |
          ---------------+--------------+---------------+
            nconc of the |              |               |
              function   |    mapcon    |    mapcan     |
              results    |              |               |
          ---------------+--------------+---------------+*
.fill
	There are also functions (3mapatoms* and 3mapatoms-all*)
for mapping over all symbols in certain
packages.  See the explanation of packages ((package)).

You can also do what the mapping functions do in a different way by using
3loop*.  See (loop-fun).
.apart
.end_defun

@chapter "Manipulating List Structure"
.setq cons-chapter chapter-number
'cindex "cons"
'cindex "list"
'cindex "tree"
'cindex "circular list"
'cindex "elements (of a list)"
'cindex "dotted list"
.setq list-and-tree section-page

This chapter discusses functions that manipulate conses, and
higher-level structures made up of conses such as lists and trees.
It also discusses hash tables and resources, which are related
facilities.

A cons is a primitive Lisp data object that is extremely simple: it
knows about two other objects, called its car and its cdr.

A list is recursively defined to be the symbol 3nil*, or a cons whose
cdr is a list.  A typical list is a chain of conses: the cdr of each is
the next cons in the chain, and the cdr of the last one is the symbol
3nil*.  The cars of each of these conses are called the 2elements*
of the list.  A list has one element for each cons; the empty list,
3nil*, has no elements at all.  Here are the printed representations
of some typical lists:
.lisp
(foo bar)		  ;This list has two elements.
(a (b c d) e)		  ;This list has three elements.
.end_lisp
Note that the second list has three elements: 3a*, 3(b c d)*, and 3e*.
The symbols 3b*, 3c*, and 3d* are 2not* elements of the list itself.
(They are elements of the list which is the second element of the original
list.)

A "dotted list" is like a list except that the cdr of the last cons does
not have to be 3nil*.  This name comes from the printed
representation, which includes a "dot" character.  Here is an example:
.lisp
(a b . c)
.end_lisp
This "dotted list" is made of two conses.  The car of the first cons is the
symbol 3a*, and the cdr of the first cons is the second cons.  The car of
the second cons is the symbol 3b*, and the cdr of the second cons is
the symbol 3c*.

A tree is any data structure made up of conses whose cars and cdrs are
other conses.  The following are all printed representations of trees:
.lisp
(foo . bar)
((a . b) (c . d))
((a . b) (c d e f (g . 5) s) (7 . 4))
.end_lisp

These definitions are not mutually exclusive.  Consider a cons whose
car is 3a* and whose cdr is 3(b (c d) e)*.  Its printed
representation is
.lisp
(a b (c d) e)
.end_lisp
It can be thought of and treated as a cons, or as a list of four
elements, or as a tree containing six conses.  You can even think of it
as a "dotted list" whose last cons just happens to have 3nil* as a
cdr.  Thus, lists and "dotted lists" and trees are not fundamental data
types; they are just ways of thinking about structures of conses.

A circular list is like a list except that the cdr of the last cons,
instead of being 3nil*, is the first cons of the list.  This means that
the conses are all hooked together in a ring, with the cdr of each cons
being the next cons in the ring.  While these are perfectly good Lisp
objects, and there are functions to deal with them, many other functions
will have trouble with them.  Functions that expect lists as their
arguments often iterate down the chain of conses waiting to see a
3nil*, and when handed a circular list this can cause them to compute
forever.  The printer (see (print-fun)) is one of these functions; if
you try to print a circular list the printer will never stop producing
text.  You have to be careful what you do with circular lists.

The Lisp Machine internally uses a storage scheme called "cdr coding" to
represent conses.  This scheme is intended to reduce the amount of storage
used in lists.  The use of cdr-coding is invisible to programs except in
terms of storage efficiency; programs will work the same way whether or not
lists are cdr-coded or not.  Several of the functions below mention how
they deal with cdr-coding.  You can completely ignore all this if you want.
However, if you are writing a program that allocates a lot of conses and
you are concerned with storage efficiency, you may want to learn about the
cdr-coded representation and how to control it.  The cdr-coding scheme is
discussed in (cdr-code).

@section "Conses"

.defun car x
Returns the 2car* of 2x*.
.lisp
.exdent 96 Example:
(car '(a b c)) => a
.end_lisp
.end_defun

.defun cdr x
Returns the 2cdr* of 2x*.
.lisp
.exdent 96 Example:
(cdr '(a b c)) => (b c)
.end_lisp
.end_defun

	Officially 3car* and 3cdr* are only applicable to conses and locatives.
However, as a matter of convenience, 3car* and 3cdr* of 3nil* return 3nil*.

.defun c...r x
'findex caaaar
'findex caaadr
'findex caaar
'findex caadar
'findex caaddr
'findex caadr
'findex caar
'findex cadaar
'findex cadadr
'findex cadar
'findex caddar
'findex cadddr
'findex caddr
'findex cadr
'findex cdaaar
'findex cdaadr
'findex cdaar
'findex cdadar
'findex cdaddr
'findex cdadr
'findex cdar
'findex cddaar
'findex cddadr
'findex cddar
'findex cdddar
'findex cddddr
'findex cdddr
'findex cddr
All of the compositions of up to four 2car*'s and 2cdr*'s are defined as
functions in their own right.  The names of these functions begin with "3c*" and end
with "3r*", and in between is a sequence of "3a*"'s and "3d*"'s corresponding to
the composition performed by the function. 
.lisp
.exdent 96 Example:
(cddadr x) 1is the same as* (cdr (cdr (car (cdr x))))
.end_lisp
The error checking for these functions is exactly the same as for 3car* and 3cdr*
above.
.end_defun
	
.defun cons x y
3cons* is the primitive function to create a new 2cons*, whose
2car* is 2x* and whose 2cdr* is 2y*.
.lisp
.exdent 96 Examples:
(cons 'a 'b) => (a . b)
(cons 'a (cons 'b (cons 'c nil))) => (a b c)
(cons 'a '(b c d)) => (a b c d)
.end_lisp
.end_defun

.defun ncons x
3(ncons 2x*)* is the same as 3(cons 2x* nil)*.
The name of the function is from "nil-cons".
.end_defun

.defun xcons x y
3xcons* ("exchanged cons") is like 3cons* except that the order of
the arguments is reversed.
.lisp
.exdent 96 Example:
(xcons 'a 'b) => (b . a)
.end_lisp
.end_defun

.defun cons-in-area x y area-number
'cindex "area"
This function creates a 2cons* in a specific 2area*.  (Areas are
an advanced feature of storage management, explained in chapter
(area-chapter); if you aren't interested in them, you can safely skip
all this stuff).  The first two arguments are the same as the two
arguments to 3cons*,  and the third is the number of the area in which
to create the 2cons*.
.lisp
.exdent 96 Example:
(cons-in-area 'a 'b my-area) => (a . b)
.end_lisp
.end_defun

.defun ncons-in-area x area-number
3(ncons-in-area 2x area-number*)* = 3(cons-in-area 2x* nil 2area-number*)*
.end_defun

.defun xcons-in-area x y area-number
3(xcons-in-area 2x y area-number*) = (cons-in-area 2y x area-number*)*
.end_defun

	The backquote reader macro facility is also generally useful
for creating list structure, especially mostly-constant list structure,
or forms constructed by plugging variables into a template.
It is documented in the chapter on macros; see (macro).

.defun car-location cons
3car-location* returns a locative pointer to the cell containing
the car of 2cons*.
.end_defun

Note: there is no 3cdr-location* function; it is difficult
because of the cdr-coding scheme (see (cdr-code)).

@section "Lists"

.defun length list
3length* returns the length of 2list*.  The length of a list
is the number of elements in it.
.lisp
.exdent 96 Examples:
(length nil) => 0
(length '(a b c d)) => 4
(length '(a (b c) d)) => 3
.end_lisp
3length* could have been defined by:
.lisp
(defun length (x)
    (cond ((atom x) 0)
          ((1+ (length (cdr x)))) ))
.end_lisp
or by:
.lisp
(defun length (x)
    (do ((n 0 (1+ n))
         (y x (cdr y)))
        ((atom y) n) ))
.end_lisp
except that it is an error to take 3length* of a non-3nil* atom.
.end_defun

.defun first list
.defun1 second list
.defun1 third list
.defun1 fourth list
.defun1 fifth list
.defun1 sixth list
.defun1 seventh list
These functions take a list as an argument, and return the first,
second, etc. element of the list.  3first* is identical to 3car*,
3second* is identical to 3cadr*, and so on.  The reason these names
are provided is that they make more sense when you are thinking of the
argument as a list rather than just as a cons.
.end_defun

.defun rest1 list
.defun1 rest2 list
.defun1 rest3 list
.defun1 rest4 list
3rest2n** returns the rest of the elements of a list, starting with
element 2n* (counting the first element as the zeroth).  Thus
3rest1* is identical to 3cdr*, 3rest2* is identical to 3cddr*,
and so on.  The reason these names are provided is that they make more
sense when you are thinking of the argument as a list rather than just
as a cons.
.end_defun

.defun nth n list
3(nth 2n* 2list*)* returns the 2n*'th element of 2list*, where
the zeroth element is the car of the list.
.lisp
.exdent 96 Examples:
(nth 1 '(foo bar gack)) => bar
(nth 3 '(foo bar gack)) => nil
.end_lisp
If 2n* is greater than the length of the list, 3nil* is returned.

Note: this is not the same as the InterLisp function called 3nth*,
which is similar to but not exactly the same as the Lisp Machine function
3nthcdr*.
Also, some people have used macros and functions called 3nth* of their own in
their Maclisp programs, which may not work the same way; be careful.

.lisp
.exdent 96 3nth* could have been defined by:
(defun nth (n list)
  (do ((i n (1- i))
       (l list (cdr l)))
      ((zerop i) (car l))))
.end_lisp
.end_defun

.defun nthcdr n list
3(nthcdr 2n* 2list*)* cdrs 2list* 2n* times,
and returns the result.
.lisp
.exdent 96 Examples:
(nthcdr 0 '(a b c)) => (a b c)
(nthcdr 2 '(a b c)) => (c)
.end_lisp
In other words, it returns the 2n*'th cdr of the list.
If 2n* is greater than the length of the list, 3nil* is returned.

This is similar to InterLisp's function 3nth*, except that the
InterLisp function is one-based instead of zero-based; see the
InterLisp manual for details.
3nthcdr* could have been defined by:
.lisp
(defun nthcdr (n list)
    (do ((i 0 (1+ i))
	 (list list (cdr list)))
	((= i n) list)))
.end_lisp
.end_defun

.defun last list
3last* returns the last cons of 2list*.  If 2list* is 3nil*, it
returns 3nil*.  Note that 3last* is unfortunately 2not* analogous
to 3first* (3first* returns the first element of a list, but
3last* doesn't return the last element of a list); this is a
historical artifact.
.lisp
.exdent 96 Example:
(setq x '(a b c d))
(last x) => (d)
(rplacd (last x) '(e f))
x => '(a b c d e f)
.end_lisp
3last* could have been defined by:
.lisp
(defun last (x)
    (cond ((atom x) x)
          ((atom (cdr x)) x)
          ((last (cdr x))) ))
.end_lisp
.end_defun

.defun list &rest args
3list* constructs and returns a list of its arguments.
.lisp
.exdent 96 Example:
(list 3 4 'a (car '(b . c)) (+ 6 -2)) => (3 4 a b 4)
.end_lisp

.lisp
.exdent 96 3list* could have been defined by:
(defun list (&rest args)
    (let ((list (make-list (length args))))
      (do ((l list (cdr l))
	   (a args (cdr a)))
	  ((null a) list)
	(rplaca l (car a)))))
.end_lisp
.end_defun

.defun list* &rest args
3list** is like 3list* except that the last cons
of the constructed list is "dotted".  It must be given at least
one argument.
.lisp
.exdent 96 Example:
(list* 'a 'b 'c 'd) => (a b c . d)
.end_lisp
This is like
.lisp
(cons 'a (cons 'b (cons 'c 'd)))
.end_lisp

.lisp
.exdent 96 More examples:
(list* 'a 'b) => (a . b)
(list* 'a) => a
.end_lisp
.end_defun

.defun list-in-area area-number &rest args
3list-in-area* is exactly the same as 3list* except that it takes
an extra argument, an area number, and creates the list in that area.
.end_defun

.defun list*-in-area area-number &rest args
3list*-in-area* is exactly the same as 3list** except that it takes
an extra argument, an area number, and creates the list in that area.
.end_defun

.defun make-list length &rest options
This creates and returns a list containing 2length* elements.
2length* should be a fixnum.  2options* are alternating
keywords and values.  The keywords may be either of the following:
.table 3
.kitem :area
The value specifies in which area (see (area)) the list should be created.
It should be either an area number (a fixnum), or 3nil* to mean the
default area.
.kitem :initial-value
The elements of the list will all be this value.  It defaults to 3nil*.
.end_table

3make-list* always creates a 2cdr-coded* list (see (cdr-code)).
.lisp
.exdent 96 Examples:
(make-list 3) => (nil nil nil)
(make-list 4 ':initial-value 7) => (7 7 7 7)
.end_lisp

When 3make-list* was originally implemented, it took exactly two
arguments: the area and the length.  This obsolete form is still
supported so that old programs will continue to work, but the new
keyword-argument form is preferred.
.end_defun

.defun circular-list &rest args
3circular-list* constructs a circular list whose elements are 3args*, repeated
infinitely.  3circular-list* is the same as 3list* except that the list itself
is used as the last cdr, instead of 3nil*.
3circular-list* is especially useful with 3mapcar*, as in the expression
.lisp
(mapcar (function +) foo (circular-list 5))
.end_lisp
which adds each element of 3foo* to 5.

.lisp
.exdent 96 3circular-list* could have been defined by:
(defun circular-list (&rest elements)
  (setq elements (copylist* elements))
  (rplacd (last elements) elements)
  elements)
.end_lisp
.end_defun

.defun copylist list &optional area
Returns a list which is 3equal* to 2list*, but not 3eq*.
3copylist* does not copy any elements of the list: only the conses of the list itself.
The returned list is fully cdr-coded (see (cdr-code)) to minimize storage.
If the list is "dotted", that is, 3(cdr (last 2list*))*
is a non-3nil* atom, this will be true of the returned list also.
You may optionally specify the area in which to create the new copy.
.end_defun

.defun copylist* list &optional area
This is the same as 3copylist* except that the last cons of the
resulting list is never cdr-coded (see (cdr-code)).  This makes for
increased efficiency if you 3nconc* something onto the list later.
.end_defun

.defun copyalist list &optional area
3copyalist* is for copying association lists (see
(assoc-lists-section)).  The 2list* is copied, as in 3copylist*.
In addition, each element of 2list* which is a cons is replaced in the
copy by a new cons with the same car and cdr.  You may optionally
specify the area in which to create the new copy.
.end_defun

.defun copytree tree
3copytree* copies all the conses of a tree and makes a new tree
with the same fringe.
.end_defun

.defun reverse list
3reverse* creates a new list whose elements
are the elements of 2list* taken in reverse order.
3reverse* does not modify its argument, unlike 3nreverse* which is faster
but does modify its argument.  The list created by 3reverse* is not cdr-coded.
.lisp
.exdent 96 Example:
(reverse '(a b (c d) e)) => (e (c d) b a)
.end_lisp
3reverse* could have been defined by:
.lisp
(defun reverse (x)
    (do ((l x (cdr l))         ;1 scan down argument,*
         (r nil                ;1 putting each element*
            (cons (car l) r))) ;1 into list, until*
        ((null l) r)))         ;1 no more elements.*
.end_lisp
.end_defun

.defun nreverse list
3nreverse* reverses its argument, which should be a list.  The argument
is destroyed by 3rplacd*'s all through the list (cf. 3reverse*).
.lisp
.exdent 96 Example:
(nreverse '(a b c)) => (c b a)
.end_lisp
3nreverse* could have been defined by:
.lisp
(defun nreverse  (x)
    (cond ((null x) nil)
          ((nreverse1 x nil))))

(defun nreverse1 (x y)		;1auxiliary function*
    (cond ((null (cdr x)) (rplacd x y))
          ((nreverse1 (cdr x) (rplacd x y)))))
          ;;1 this last call depends on order of argument evaluation.*
.end_lisp

Currently, 3nreverse* does something inefficient with cdr-coded (see
(cdr-code)) lists, because it just uses 3rplacd* in the
straightforward way.  This may be fixed someday.  In the meantime
3reverse* might be preferable in some cases.
.end_defun

.defun append &rest lists
The arguments to 3append* are lists.  The result is a list which is the
concatenation of the arguments.
The arguments are not changed (cf. 3nconc*).
.lisp
.exdent 96 Example:
(append '(a b c) '(d e f) nil '(g)) => (a b c d e f g)
.end_lisp
3append* makes copies of the conses of all the lists it is given,
except for the last one.  So the new list will share the conses
of the last argument to append, but all of the other conses will be newly
created.  Only the lists are copied, not the elements of the lists.

A version of 3append* which only accepts two arguments could have been defined by:
.lisp
(defun append2 (x y)
    (cond ((null x) y)
          ((cons (car x) (append2 (cdr x) y)) )))
.end_lisp

The generalization to any number of arguments could then be made (relying on
3car* of 3nil* being 3nil*):
.lisp
(defun append (&rest args)
  (if (< (length args) 2) (car args)
      (append2 (car args)
	       (apply (function append) (cdr args)))))
.end_lisp

These definitions do not express the full functionality of 3append*;
the real definition minimizes storage utilization by cdr-coding (see
(cdr-code)) the list it produces, using 2cdr-next* except at the end
where a full node is used to link to the last argument, unless the last
argument is 3nil* in which case 2cdr-nil* is used.

To copy a list, use 3copylist* (see (copylist-fun)); the old practice
of using 3append* to copy lists is unclear and obsolete.
.end_defun

.defun nconc &rest lists
3nconc* takes lists as arguments.  It returns a list which is the arguments
concatenated together.  The arguments are changed, rather than copied.
(cf. 3append*, (append-fun))
.lisp
.exdent 96 Example:
(setq x '(a b c))
(setq y '(d e f))
(nconc x y) => (a b c d e f)
x => (a b c d e f)
.end_lisp
Note that the value of 3x* is now different, since its last cons has been 3rplacd*'d to
the value of 3y*.
If the nconc form is evaluated again, it would yield a piece of "circular" list
structure, whose printed representation would be
3(a b c d e f d e f d e f ...)*, repeating forever.

3nconc* could have been defined by:
.lisp
(defun nconc (x y)		 ;1for simplicity, this definition*
    (cond ((null x) y)		 ;1only works for 2 arguments.*
          (t (rplacd (last x) y) ;1hook 3y* onto *x
	     x)))		 ;1and return the modified 3x*.*
.end_lisp
.end_defun

.defun nreconc x y
3(nreconc 2x y*)* is exactly the same as 
3(nconc (nreverse 2x*) 2y*)* except that it is more 
efficient.  Both 2x* and 2y* should be lists.

3nreconc* could have been defined by:
.lisp
(defun nreconc (x y)
    (cond ((null x) y)
          ((nreverse1 x y)) ))
.end_lisp
using the same 3nreverse1* as above.
.end_defun

.defun butlast list
This creates and returns a list with the same elements as 2list*,
excepting the last element.
.lisp
.exdent 96 Examples:
(butlast '(a b c d)) => (a b c)
(butlast '((a b) (c d))) => ((a b))
(butlast '(a)) => nil
(butlast nil) => nil
.end_lisp
The name is from the phrase "all elements but the last".
.end_defun

.defun nbutlast list
This is the destructive version of 3butlast*; it changes the cdr of
the second-to-last cons of the list to nil.  If there is no
second-to-last cons (that is, if the list has fewer than two elements)
it returns 3nil*. 
.lisp
.exdent 96 Examples:
(setq foo '(a b c d))
(nbutlast foo) => (a b c)
foo => (a b c)
(nbutlast '(a)) => nil
.end_lisp
.end_defun

.defun firstn n list
3firstn* returns a list of length 2n*, whose elements are the
first 2n* elements of 3list*.  If 2list* is fewer than
2n* elements long, the remaining elements of the returned list
will be 3nil*.
.lisp
.exdent 96 Example:
(firstn 2 '(a b c d)) => (a b)
(firstn 0 '(a b c d)) => nil
(firstn 6 '(a b c d)) => (a b c d nil nil)
.end_lisp
.end_defun

.defun nleft n list &optional tail
Returns a "tail" of 2list*, i.e. one of the conses that makes up 2list*, or 3nil*.
3(nleft 2n* 2list*)* returns the last 2n* elements of 2list*.
If 2n* is too large, 3nleft* will return 2list*.

3(nleft 2n* 2list* 2tail*)* takes cdr of 2list* enough times
that taking 2n* more cdrs would yield 2tail*, and returns that.
You can see that when 2tail* is 3nil* this is the same as the two-argument case.
If 2tail* is not 3eq* to any tail of 2list*, 3nleft* will return 3nil*.
.end_defun

.defun ldiff list sublist
2list* should be a list, and 2sublist* should be one of the conses
that make up 2list*.  3ldiff* (meaning "list difference") will return
a new list, whose elements are those elements of 2list* that appear
before 2sublist*.
.lisp
.exdent 96 Examples:
(setq x '(a b c d e))
(setq y (cdddr x)) => (d e)
(ldiff x y) => (a b c)
1but*
(ldiff '(a b c d) '(c d)) => (a b c d)
1since the sublist was not 3eq* to any part of the list.*
.end_lisp
.end_defun

@section "Alteration of List Structure"

The functions 3rplaca* and 3rplacd*
are used to make alterations in already-existing
list structure; that is, to change the cars and cdrs of existing conses.

The structure is not copied but is physically altered; hence caution
should be exercised when using these functions, as strange side-effects
can occur if portions of list structure become shared unbeknownst to the
programmer.  The 3nconc*, 3nreverse*, 3nreconc*, and 3nbutlast*
functions already described, and the 3delq* family described later,
have the same property.

.defun rplaca x y
3(rplaca 2x y*)* changes the car of 2x* to 2y* and returns
(the modified) 2x*.  2x* must be a cons or a locative.  2y* may be any Lisp object.
.lisp
.exdent 96 Example:
(setq g '(a b c))
(rplaca (cdr g) 'd) => (d c)
1Now* g => (a d c)
.end_lisp
.end_defun

.defun rplacd x y
3(rplacd 2x y*)* changes the cdr of 2x* to 2y* and returns
(the modified) 2x*.  2x* must be a cons or a locative.  2y* may be any Lisp object.
.lisp
.exdent 96 Example:
(setq x '(a b c))
(rplacd x 'd) => (a . d)
1Now* x => (a . d)
.end_lisp
.end_defun

'cindex "substitution"
.defun subst new old tree
3(subst 2new old tree*)* substitutes 2new* for all occurrences of 2old*
in 2tree*, and returns the modified copy of 2tree*.  The original 2tree*
is unchanged, as 3subst* recursively copies all of 2tree* replacing
elements 3equal* to 2old* as it goes.
.lisp
.exdent 96 Example:
(subst 'Tempest 'Hurricane
       '(Shakespeare wrote (The Hurricane)))
    => (Shakespeare wrote (The Tempest))
.end_lisp

3subst* could have been defined by:

.lisp
(defun subst (new old tree)
    (cond ((equal tree old) new) ;1if item equal to old, replace.*
          ((atom tree) tree)     ;1if no substructure, return arg.*
          ((cons (subst new old (car tree))  ;1otherwise recurse.*
                 (subst new old (cdr tree))))))
.end_lisp
Note that this function is not "destructive"; that is, it does not change
the 2car* or 2cdr* of any already-existing list structure.

To copy a tree, use 3copytree* (see (copytree-fun)); the old practice
of using 3subst* to copy trees is unclear and obsolete.

@c *************
Note: certain details of 3subst* may be changed in the future.  It may
possibly be changed to use 3eq* rather than 3equal* for the comparison,
and possibly may substitute only in cars, not in cdrs.  This is still being
discussed.
@c *************
.end_defun

.defun nsubst new old tree
3nsubst* is a destructive version of 3subst*.  The list structure of
2tree* is altered by replacing each occurrence of 2old* with
2new*.  3nsubst* could have been defined as
.lisp
(defun nsubst (new old tree)
    (cond ((eq tree old) new)	  ;1If item eq to old, replace.*
          ((atom tree) tree)      ;1If no substructure, return arg.*
	  (t                      ;1Otherwise, recurse.*
	     (rplaca tree (nsubst new old (car tree)))
	     (rplacd tree (nsubst new old (cdr tree)))
	     tree)))
.end_lisp
.end_defun

.defun sublis alist tree
3sublis* makes substitutions for symbols in a tree.  The first
argument to 3sublis* is an association list (see
(assoc-lists-section)).  The second argument is the tree in which
substitutions are to be made.  3sublis* looks at all symbols in the
fringe of the tree; if a symbol appears in the association list
occurrences of it are replaced by the object it is associated with.  The
argument is not modified; new conses are created where necessary and
only where necessary, so the newly created tree shares as much of its
substructure as possible with the old.  For example, if no substitutions
are made, the result is just the old tree.
.lisp
.exdent 96 Example:
(sublis '((x . 100) (z . zprime))
        '(plus x (minus g z x p) 4))
   => (plus 100 (minus g zprime 100 p) 4)
.end_lisp

.lisp
.exdent 96 3sublis* could have been defined by:
(defun sublis (alist sexp)
  (cond ((atom sexp)
	 (let ((tem (assq sexp alist)))
	   (if tem (cdr tem) sexp)))
	((let ((car (sublis alist (car sexp)))
	       (cdr (sublis alist (cdr sexp))))
	   (if (and (eq (car sexp) car) (eq (cdr sexp) cdr))
	       sexp
	       (cons car cdr))))))
.end_lisp
.end_defun

.defun nsublis alist tree
3nsublis* is like 3sublis* but changes the original tree
instead of creating new.

.lisp
.exdent 96 3nsublis* could have been defined by:
(defun nsublis (alist tree)
  (cond ((atom tree)
	 (let ((tem (assq tree alist)))
	   (if tem (cdr tem) tree)))
	(t (rplaca tree (nsublis alist (car tree)))
	   (rplacd tree (nsublis alist (cdr tree)))
	   tree)))
.end_lisp
.end_defun

@section "Cdr-Coding"
.setq cdr-code section-page

This section explains the internal data format used to store conses
inside the Lisp Machine.  Casual users don't have to worry about this;
you can skip this section if you want.  It is only important to read
this section if you require extra storage efficiency in your program.

The usual and obvious internal representation of conses in any
implementation of Lisp is as a pair of pointers, contiguous in memory.
If we call the amount of storage that it takes to store a Lisp pointer a
"word", then conses normally occupy two words.  One word (say it's the
first) holds the car, and the other word (say it's the second) holds the
cdr.  To get the car or cdr of a list, you just reference this memory
location, and to change the car or cdr, you just store into this memory
location.

Very often, conses are used to store lists.  If the above representation
is used, a list of 2n* elements requires two times 2n* words of
memory: 2n* to hold the pointers to the elements of the list, and
2n* to point to the next cons or to 3nil*.  To optimize this
particular case of using conses, the Lisp Machine uses a storage
representation called "cdr coding" to store lists.  The basic goal is to
allow a list of 2n* elements to be stored in only 2n* locations,
while allowing conses that are not parts of lists to be stored in the
usual way.

The way it works is that there is an extra two-bit field in every word
of memory, called the "cdr-code" field.  There are three meaningful
values that this field can have, which are called cdr-normal, cdr-next,
and cdr-nil.  The regular, non-compact way to store a cons is by two
contiguous words, the first of which holds the car and the second of
which holds the cdr.  In this case, the cdr code of the first word is
cdr-normal.  (The cdr code of the second word doesn't matter; as we will
see, it is never looked at.)  The cons is represented by a pointer to
the first of the two words.  When a list of 2n* elements is stored in
the most compact way, pointers to the 2n* elements occupy 2n*
contiguous memory locations.  The cdr codes of all these locations are
cdr-next, except the last location whose cdr code is cdr-nil.  The
list is represented as a pointer to the first of the 2n* words.

Now, how are the basic operations on conses defined to work based on
this data structure?  Finding the car is easy: you just read the
contents of the location addressed by the pointer.  Finding the cdr is
more complex.  First you must read the contents of the location
addressed by the pointer, and inspect the cdr-code you find there.  If
the code is cdr-normal, then you add one to the pointer, read the
location it addresses, and return the contents of that location; that
is, you read the second of the two words.  If the code is cdr-next, you
add one to the pointer, and simply return that pointer without doing any
more reading; that is, you return a pointer to the next word in the
2n*-word block.  If the code is cdr-nil, you simply return 3nil*.

If you examine these rules, you will find that they work fine even if
you mix the two kinds of storage representation within the same list.
There's no problem with doing that.

How about changing the structure?  Like car, rplaca is very easy; you
just store into the location addressed by the pointer.  To do an rplacd
you must read the location addressed by the pointer and examine the cdr
code.  If the code is cdr-normal, you just store into the location one
greater than that addressed by the pointer; that is, you store into the
second word of the two words.  But if the cdr-code is cdr-next or
cdr-nil, there is a problem: there is no memory cell that is storing the
cdr of the cons.  That is the cell that has been optimized out; it just
doesn't exist.

This problem is dealt with by the use of "invisible pointers".  An
invisible pointer is a special kind of pointer, recognized by its data
type (Lisp Machine pointers include a data type field as well as an
address field).  The way they work is that when the Lisp Machine reads a
word from memory, if that word is an invisible pointer then it proceeds
to read the word pointed to by the invisible pointer and use that word
instead of the invisible pointer itself.  Similarly, when it writes to a
location, it first reads the location, and if it contains an invisible
pointer then it writes to the location addressed by the invisible
pointer instead.  (This is a somewhat simplified explanation; actually
there are several kinds of invisible pointer that are interpreted in
different ways at different times, used for things other than the cdr coding
scheme.)

Here's how to do an rplacd when the cdr code is cdr-next or cdr-nil.  Call
the location addressed by the first argument to rplacd 2l*.  First,
you allocate two contiguous words (in the same area that 2l* points to).
Then you store the old contents of 2l* (the car of the cons) and
the second argument to rplacd (the new cdr of the cons) into these two
words.  You set the cdr-code of the first of the two words to cdr-normal.
Then you write an invisible pointer, pointing at the first of the two
words, into location 2l*.  (It doesn't matter what the cdr-code of
this word is, since the invisible pointer data type is checked first,
as we will see.)

Now, whenever any operation is done to the cons (car, cdr, rplaca, or
rplacd), the initial reading of the word pointed to by the Lisp pointer
that represents the cons will find an invisible pointer in the addressed
cell.  When the invisible pointer is seen, the address it contains is
used in place of the original address.  So the newly-allocated two-word
cons will be used for any operation done on the original object.

Why is any of this important to users?  In fact, it is all invisible to
you; everything works the same way whether or not compact representation
is used, from the point of view of the semantics of the language.  That
is, the only difference that any of this makes is a difference in
efficiency.  The compact representation is more efficient in most cases.
However, if the conses are going to get rplacd'ed, then invisible
pointers will be created, extra memory will be allocated, and the
compact representation will be seen to degrade storage efficiency rather
than improve it.  Also, accesses that go through invisible pointers are
somewhat slower, since more memory references are needed.  So if you
care a lot about storage efficiency, you should be careful about which
lists get stored in which representations.

You should try to use the normal representation for those data
structures that will be subject to rplacding operations, including
3nconc* and 3nreverse*, and the compact representation for other
structures.  The functions 3cons*, 3xcons*, 3ncons*, and their
area variants make conses in the normal representation.  The functions
3list*, 3list**, 3list-in-area*, 3make-list*, and 3append* use
the compact representation.  The other list-creating functions,
including 3read*, currently make normal lists, although this might get
changed.  Some functions, such as 3sort*, take special care to operate
efficiently on compact lists (3sort* effectively treats them as
arrays).  3nreverse* is rather slow on compact lists, currently, since
it simple-mindedly uses 3rplacd*, but this will be changed.

3(copylist 2x*)* is a suitable way to copy a
list, converting it into compact form (see (copylist-fun)).

@section "Tables"

Zetalisp includes functions which simplify the maintenance
of tabular data structures of several varieties.  The simplest is
a plain list of items, which models (approximately) the concept of a 2set*.
'cindex "set"
There are functions to add (3cons*), remove (3delete*, 3delq*,
3del*, 3del-if*, 3del-if-not*, 3remove*, 3remq*, 3rem*,
3rem-if*, 3rem-if-not*),
and search for (3member*, 3memq*, 3mem*) items in a list.
Set union, intersection, and difference functions can be easily written using these.

.setq assoc-lists-section section-page
'cindex "association list"
'cindex alist
2Association lists* are very commonly used.  An association list
is a list of conses.  The car of each cons is a "key" and the cdr
is a "datum", or a list of associated data.  The functions
3assoc*, 3assq*, 3ass*, 3memass*, and 3rassoc*
may be used to retrieve the data, given the key.  For example,
.lisp
((tweety . bird) (sylvester . cat))
.end_lisp
is an association list with two elements.  Given a symbol representing
the name of an animal, it can retrieve what kind of animal this is.

2Structured records* can be stored as association lists or as
stereotyped cons-structures where each element of the structure has a certain
car-cdr path associated with it.  However, these are better implemented
using structure macros (see (defstruct)).

Simple list-structure is very convenient, but may not be efficient enough
for large data bases because it takes a long time to search a long list.
Zetalisp includes hash table facilities for more efficient
but more complex tables (see (hash-table)), and
a hashing function (3sxhash*) to aid users in constructing their own facilities.

@section Lists as Tables

.defun memq item list
3(memq 2item list*)* returns 3nil* if 2item* is not one of the
elements of 2list*.  Otherwise, it returns the sublist of 2list*
beginning with the first occurrence of 2item*; that is, it returns the
first cons of the list whose car is 2item*.  The comparison is made by
3eq*.  Because 3memq* returns 3nil* if it doesn't find anything,
and something non-3nil* if it finds something, it is often used as a
predicate.
.lisp
.exdent 96 Examples:
(memq 'a '(1 2 3 4)) => nil
(memq 'a '(g (x a y) c a d e a f)) => (a d e a f)
.end_lisp
Note that the value returned by 3memq* is 3eq* to the portion of the list
beginning with 3a*.
Thus 3rplaca* on the result of 3memq* may be used,
if you first check to make sure 3memq* did not return 3nil*.
.lisp
.exdent 96 Example:
(let ((sublist (memq x z)))	;1Search for 3x* in the list 3z*.*
  (if (not (null sublist))      ;1If it is found,*
      (rplaca sublist y)))	;1Replace it with 3y*.*
.end_lisp

.lisp
.exdent 96 3memq* could have been defined by:
(defun memq (item list)
    (cond ((null list) nil)
          ((eq item (car list)) list)
          (t (memq item (cdr list))) ))
.end_lisp

3memq* is hand-coded in microcode and therefore especially fast.
.end_defun

.defun member item list
3member* is like 3memq*, except 3equal* is used for the comparison,
instead of 3eq*.

3member* could have been defined by:
.lisp
(defun member (item list)
    (cond ((null list) nil)
          ((equal item (car list)) list)
          (t (member item (cdr list))) ))
.end_lisp
.end_defun


.defun mem predicate item list
3mem* is the same as 3memq* except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of 3eq*.  3(mem 'eq a b)* is the same as
3(memq a b)*.  3(mem 'equal a b)* is the same as 3(member a b)*.
	3mem* is usually used with equality predicates other than
3eq* and 3equal*, such as 3=*, 3char-equal* or 3string-equal*.
It can also be used with non-commutative predicates.  The predicate
is called with 2item* as its first argument and the element of 2list*
as its second argument, so
.lisp
(mem #'< 4 list)
.end_lisp
finds the first element in 2list* for which 3(< 4 2x*)* is true;
that is, it finds the first element greater than 34*.
.end_defun

.defun find-position-in-list item list
3find-position-in-list* looks down 2list* for an element which
is 3eq* to 2item*, like 3memq.*  However, it returns the numeric index
in the list at which it found the first occurence of 2item*, or
3nil* if it did not find it at all.  This function is sort of
the complement of 3nth* (see (nth-fun)); like 3nth*, it is zero-based.
.lisp
.exdent 96 Examples:
(find-position-in-list 'a '(a b c)) => 0
(find-position-in-list 'c '(a b c)) => 2
(find-position-in-list 'e '(a b c)) => nil
.end_lisp
.end_defun

.defun find-position-in-list-equal item list
3find-position-in-list-equal* is exactly the same as
3find-position-in-list*, except that the comparison is done
with 3equal* instead of 3eq*.
.end_defun

.defun tailp sublist list
Returns 3t* if 2sublist* is a sublist of 2list* (i.e.
one of the conses that makes up 2list*).  Otherwise returns 3nil*.
Another way to look at this is that 3tailp* returns 3t* if
3(nthcdr 2n* 2list*)* is 2sublist*, for some value of 2n*.
3tailp* could have been defined by:
.lisp
(defun tailp (sublist list)
    (do list list (cdr list) (null list)
      (if (eq sublist list)
	  (return t))))
.end_lisp
.end_defun

.defun delq item list &optional n
3(delq 2item list*)* returns the 2list* with all
occurrences of 2item* removed.  3eq* is used for the comparison. 
The argument 2list* is actually modified (3rplacd*'ed) when instances
of 2item* are spliced out.  3delq* should be used for value, not
for effect.  That is, use
.lisp
(setq a (delq 'b a))
.end_lisp
rather than
.lisp
(delq 'b a)
.end_lisp
These two are 2not* equivalent when the first element
of the value of 3a* is 3b*.

3(delq 2item list n*)* is like 3(delq 2item list*)* except only the first
2n* instances of 2item* are deleted.  2n* is allowed to be zero. 
If 2n* is greater than or equal to the number of occurrences of 2item* in the
list, all occurrences of 2item* in the list will be deleted. 
.lisp
.exdent 96 Example:
(delq 'a '(b a c (a b) d a e)) => (b c (a b) d e)
.end_lisp

3delq* could have been defined by:
.lisp
(defun delq (item list &optional (n -1))
    (cond ((or (atom list) (zerop n)) list)
          ((eq item (car list))
	   (delq item (cdr list) (1- n)))
          (t (rplacd list (delq item (cdr list) n)))))
.end_lisp
If the third argument (2n*) is not supplied, it defaults to 3-1* which
is effectively infinity since it can be decremented any number of times without
reaching zero.
.end_defun

.defun delete item list &optional n
3delete* is the same as 3delq* except that 3equal* is used for the comparison
instead of 3eq*.
.end_defun

.defun del predicate item list &optional n
3del* is the same as 3delq* except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of 3eq*.  3(del 'eq a b)* is the same as
3(delq a b)*. (cf. 3mem*, (mem-fun))
.end_defun

.defun remq item list &optional n
3remq* is similar to 3delq*, except that the list is not altered;
rather, a new list is returned.
.lisp
.exdent 96 Examples:
(setq x '(a b c d e f))
(remq 'b x) => (a c d e f)
x => (a b c d e f)
(remq 'b '(a b c b a b) 2) => (a c a b)
.end_lisp
.end_defun

.defun remove item list &optional n
3remove* is the same as 3remq* except that 3equal* is used for the
comparison instead of 3eq*.
.end_defun

.defun rem predicate item list &optional n
3rem* is the same as 3remq* except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of 3eq*.  3(rem 'eq a b)* is the same as
3(remq a b)*. (cf. 3mem*, (mem-fun))
.end_defun

.defun subset predicate list
.defun1 rem-if-not predicate list
2predicate* should be a function of one argument.
A new list is made by applying 2predicate* to
all of the elements of 2list* and removing the ones for which the predicate 
returns 3nil*.  One of this function's names (3rem-if-not*)
means "remove if this condition is not true"; i.e. it keeps the elements
for which 2predicate* is true.  The other name (3subset*) refers to
the function's action if 2list* is considered to represent a mathematical set.
.end_defun

.defun subset-not predicate list
.defun1 rem-if predicate list
2predicate* should be a function of one argument.
A new list is made by applying 2predicate* to
all of the elements of 2list* and removing the ones for which the predicate 
returns non-3nil*.  One of this function's names (3rem-if*)
means "remove if this condition is true".  The other name (3subset-not*)
refers to the function's action if 2list* is considered to represent
a mathematical set.
.end_defun

.defun del-if predicate list
3del-if* is just like 3rem-if* except that it modifies 2list*
rather than creating a new list.
.end_defun

.defun del-if-not predicate list
3del-if-not* is just like 3rem-if-not* except that it modifies 2list*
rather than creating a new list.
.end_defun

.defun every list predicate &optional step-function
3every* returns 3t* if 2predicate* returns
non-3nil* when applied to every element of 2list*,
or 3nil* if 2predicate* returns 3nil* for some element.
If 2step-function* is present, it replaces 3cdr*
as the function used to get to the next element of the list;
3cddr* is a typical function to use here.
.end_defun

.defun some list predicate &optional step-function
3some* returns a tail of 2list* such that the car
of the tail is the first element that the 2predicate* returns
non-3nil* when applied to,
or 3nil* if 2predicate* returns 3nil* for every element.
If 2step-function* is present, it replaces 3cdr*
as the function used to get to the next element of the list;
3cddr* is a typical function to use here.
.end_defun

@section Association Lists

.defun assq item alist
'cindex "association list"
.setq alist page
3(assq 2item alist*)* looks up 2item* in the association list
(list of conses) 2alist*.  The value is the first cons whose 3car*
is 3eq* to 2x*, or 3nil* if there is none such. 
.lisp
.exdent 96 Examples:
(assq 'r '((a . b) (c . d) (r . x) (s . y) (r . z)))
	=>  (r . x)

(assq 'fooo '((foo . bar) (zoo . goo))) => nil

(assq 'b '((a b c) (b c d) (x y z))) => (b c d)
.end_lisp

It is okay to 3rplacd* the result of 3assq* as long as it is not 3nil*,
if your intention is to "update" the "table" that was 3assq*'s second argument.
.lisp
.exdent 96 Example:
(setq values '((x . 100) (y . 200) (z . 50)))
(assq 'y values) => (y . 200)
(rplacd (assq 'y values) 201)
(assq 'y values) => (y . 201) 1now*
.end_lisp

A typical trick is to say
3(cdr (assq x y))*.
Since the cdr of 3nil* is guaranteed to be 3nil*,
this yields 3nil* if no pair is found (or if a pair is
found whose cdr is 3nil*.)

3assq* could have been defined by:
.lisp
(defun assq (item list)
    (cond ((null list) nil)
          ((eq item (caar list)) (car list))
          ((assq item (cdr list))) ))
.end_lisp
.end_defun

.defun assoc item alist
3assoc* is like 3assq* except that the comparison uses 3equal* instead of 3eq*.
.lisp
.exdent 96 Example:
(assoc '(a b) '((x . y) ((a b) . 7) ((c . d) .e)))
	=> ((a b) . 7)
.end_lisp
3assoc* could have been defined by:
.lisp
(defun assoc (item list)
    (cond ((null list) nil)
          ((equal item (caar list)) (car list))
          ((assoc item (cdr list))) ))
.end_lisp
.end_defun

.defun ass predicate item alist
3ass* is the same as 3assq* except that it takes an extra argument
which should be a predicate of two arguments, which is used for the
comparison instead of 3eq*.  3(ass 'eq a b)* is the same as
3(assq a b)*. (cf. 3mem*, (mem-fun))  As with 3mem*, you may
use non-commutative predicates; the first argument to the predicate
is 2item* and the second is the key of the element of 2alist*.
.end_defun

.defun memass predicate item alist
3memass* searches 2alist* just like 3ass*, but returns
the portion of the list beginning with the pair containing 2item*,
rather than the pair itself.  3(car (memass 2x y z*)) =
(ass 2x y z*)*.  (cf. 3mem*, (mem-fun))  As with 3mem*, you may
use non-commutative predicates; the first argument to the predicate
is 2item* and the second is the key of the element of 2alist*.
.end_defun

.defun rassq item alist
3rassq* means "reverse assq".  It is like 3assq*, but
it tries to find an element of 2alist* whose 2cdr* (not car)
is 2eq* to 2item*.  3rassq* could have been defined by:
.lisp
(defun rassq (item in-list) 
    (do l in-list (cdr l) (null l) 
      (and (eq item (cdar l)) 
	   (return (car l)))))
.end_lisp
.end_defun

.defun rassoc item alist
3rassoc* is to 3rassq* as 3assoc* is to 3assq*.  That is, it
finds an element whose cdr is 3equal* to 2item*.
.end_defun

.defun rass predicate item alist
3rass* is to 3rassq* as 3ass* is to 3assq*.  That is, it takes
a predicate to be used instead of 3eq*.
(cf. 3mem*, (mem-fun))  As with 3mem*, you may
use non-commutative predicates; the first argument to the predicate
is 2item* and the second is the cdr of the element of 2alist*.
.end_defun

.defun sassq item alist fcn
3(sassq 2item alist fcn*)* is like 3(assq 2item alist*)* except
that if 2item* is not found in 2alist*, instead of returning 3nil*,
3sassq* calls the function 2fcn* with no arguments.  3sassq* could
have been defined by: 
.lisp
(defun sassq (item alist fcn)
    (or (assq item alist)
        (apply fcn nil)))
.end_lisp

3sassq* and 3sassoc* (see below) are of limited use.
These are primarily leftovers from Lisp 1.5.
.end_defun

.defun sassoc item alist fcn
3(sassoc 2item alist fcn*)* is like 3(assoc 2item alist*)* except that if
2item* is not found in 2alist*, instead of returning 3nil*, 3sassoc* calls
the function 2fcn* with no arguments.  3sassoc* could have been
defined by: 
.lisp
(defun sassoc (item alist fcn)
    (or (assoc item alist)
        (apply fcn nil)))
.end_lisp
.end_defun

.defun pairlis cars cdrs
3pairlis* takes two lists and makes an association list which associates
elements of the first list with corresponding elements of the second
list.
.lisp
.exdent 96 Example:
(pairlis '(beef clams kitty) '(roast fried yu-shiang))
   => ((beef . roast) (clams . fried) (kitty . yu-shiang))
.end_lisp
'cindex kitty, yu-shiang
.end_defun


@section Property Lists
.setq plist section-page
.cindex "property list"
.cindex "plist"
.cindex "indicator"
.cindex "attribute"

From time immemorial, Lisp has had a kind of tabular data structure
called a 2property list* (plist for short).  A property list contains
zero or more entries; each entry associates from a keyword symbol
(called the 2indicator*) to a Lisp object (called the 2value* or,
sometimes, the 2property*).
There are no duplications among the indicators; a property-list can only
have one property at a time with a given name.

This is very similar to an association list.  The difference is that a
property list is an object with a unique identity; the operations for
adding and removing property-list entries are side-effecting operations
which alter the property-list rather than making a new one.  An
association list with no entries would be the empty list 3()*, i.e.
the symbol 3nil*.  There is only one empty list, so all empty
association lists are the same object.  Each empty property-list is a
separate and distinct object.

The implementation of a property list is a memory cell containing a list
with an even number (possibly zero) of elements.  Each pair of elements constitutes a
2property*; the first of the pair is the indicator and the second is the
value.  The memory cell is there to give the property list a unique identity
and to provide for side-effecting operations.

The term "property list" is sometimes incorrectly used to refer to the
list of entries inside the property list, rather than the property list
itself.  This is regrettable and confusing.

How do we deal with "memory cells" in Lisp; i.e. what kind of Lisp object
is a property list?  Rather than being a distinct primitive data type,
a property list can exist in one of three forms:

1. A property list can be a cons whose cdr is the list of entries and
whose car is not used and available to the user to store something.

2. The system associates a property list with every symbol (see (symbol-plist-section)).
A symbol can be used where a property list is expected; the property-list
primitives will automatically find the symbol's property list and use it.

3. A property list can be a memory cell in the middle of some data structure,
such as a list, an array, an instance, or a defstruct.  An arbitrary memory
cell of this kind is named by a locative (see (locative)).  Such locatives
are typically created with the 3locf* special form (see (locf-fun)).

.cindex "disembodied property list"
.setq disembodied-property-list page
Property lists of the first kind
are called "disembodied" property lists because they are not associated with
a symbol or other data structure.
The way to create a disembodied property list is 3(ncons nil)*,
or 3(ncons 2data*)* to store 2data* in the car of the property list.

Here is an example of the list of entries inside the property list of a
symbol named 3b1* which is being used by a program which deals with
blocks:
'cindex "blocks"
.lisp
	(color blue on b6 associated-with (b2 b3 b4))
.end_lisp
	There are three properties, and so the list has six elements.
The first property's indicator is the symbol 3color*, and its value
is the symbol 3blue*.  One says that "the value of 3b1*'s 3color*
property is 3blue*", or, informally, that "3b1*'s 3color* property
is 3blue*."  The program is probably representing the information that
the block represented by 3b1* is painted blue.  Similarly, it is probably
representing in the rest of the property list that block 3b1* is on
top of block 3b6*, and that 3b1* is associated with blocks
3b2*, 3b3*, and 3b4*.

.defun get plist indicator
3get* looks up 2plist*'s 2indicator* property.  If it finds such a property,
it returns the value; otherwise, it returns 3nil*.  If 2plist* is a symbol,
the symbol's associated property list is used.  For example, if the property
list of 3foo* is 3(baz 3)*, then
.lisp
(get 'foo 'baz) => 3
(get 'foo 'zoo) => nil
.end_lisp
.end_defun

.defun getl plist indicator-list
3getl* is like 3get*, except that the second argument is a list
of indicators.  3getl* searches down 2plist* for any
of the indicators in 2indicator-list*, until it finds a property whose
indicator is one of the elements of 2indicator-list*.
If 2plist* is a symbol, the symbol's associated property list is used.
	3getl* returns the portion of the list inside 2plist* beginning
with the first such property that it found.  So the 3car* of the returned
list is an indicator, and the 3cadr* is the property value.  If none
of the indicators on 2indicator-list* are on the property list, 3getl*
returns 3nil*.  For example, if the property list of 3foo* were
.lisp
(bar (1 2 3) baz (3 2 1) color blue height six-two)
.end_lisp
then
.lisp
(getl 'foo '(baz height))
  => (baz (3 2 1) color blue height six-two)
.end_lisp

When more than one of the indicators in 2indicator-list* is present in
2plist*, which one 3getl* returns depends on the order of the properties.
This is the only thing that depends on that order.  The order maintained
by 3putprop* and 3defprop* is not defined (their behavior with respect
to order is not guaranteed and may be changed without notice).
.end_defun

.defun putprop plist x indicator
This gives 2plist* an 2indicator*-property of 2x*.
After this is done, 3(get 2plist indicator*)* will return 2x*.
If 2plist* is a symbol, the symbol's associated property list is used.
.lisp
.exdent 96 Example:
(putprop 'Nixon 'not 'crook)
.end_lisp
.end_defun

.defspec defprop symbol x indicator
3defprop* is a form of 3putprop* with "unevaluated arguments",
which is sometimes more convenient for typing.  Normally it doesn't
make sense to use a property list rather than a symbol as the first (or 2plist*) argument.
.lisp
.exdent 96 Example:
(defprop foo bar next-to)
.end_lisp
is the same as
.lisp
(putprop 'foo 'bar 'next-to)
.end_lisp
.end_defspec

.defun remprop plist indicator
This removes 2plist*'s 2indicator* property, by splicing it out of the property
list.  It returns that portion of the list inside 2plist* of which the
former 2indicator*-property was the 3car*.  3car* of what 3remprop*
returns is what 3get* would have returned with the same arguments.
If 2plist* is a symbol, the symbol's associated property list is used.
For example, if the property list of 3foo* was
.lisp
(color blue height six-three near-to bar)
.end_lisp
then
.lisp
(remprop 'foo 'height) => (six-three near-to bar)
.end_lisp
and 3foo*'s property list would be
.lisp
(color blue near-to bar)
.end_lisp
If 2plist* has no 2indicator*-property, then 3remprop* has no side-effect
and returns 3nil*.
.end_defun

There is a mixin flavor, called 3si:property-list-mixin*, that
provides messages that do things analogous to what the above functions
do.  [Currently, the above functions do not work on flavor instances,
but this will be fixed.]

@section Hash Tables
.cindex hash table
.setq hash-table section-page

A hash table is a Lisp object that works something like a property
list.  Each hash table has a set of 2entries*, each of which
associates a particular 2key* with a particular 2value* (or
sequence of 2value*s).  The basic functions that deal with hash tables
can create entries, delete entries, and find the value that is
associated with a given key.  Finding the value is very fast even if
there are many entries, because hashing is used; this is an important
advantage of hash tables over property lists.  Hashing is explained in
(hash-section).

A given hash table stores a fixed number of values for each key;
by default, there is only one value.  Each time you specify a new
value or sequence of values, the old one(s) are lost.

Hash tables come in two kinds, the difference being whether the keys
are compared using 3eq* or using 3equal*.  In other words, there
are hash tables which hash on Lisp 2objects* (using 3eq*) and there 
are hash tables which hash on trees (using 3equal*).  The following
discussion refers to the 3eq* kind of hash table; the other kind
is described later, and works analogously.

Hash tables of the first kind are created with the function 3make-hash-table*, which
takes various options.  New entries are added to hash tables with the
3puthash* function.  To look up a key and find the associated value(s),
the 3gethash* function is used.  To remove an entry, use 3remhash*.
Here is a simple example.

.lisp
(setq a (make-hash-table))

(puthash 'color 'brown a)

(puthash 'name 'fred a)

(gethash 'color a) => brown

(gethash 'name a) => fred
.end_lisp

In this example, the symbols 3color* and 3name* are being used as
keys, and the symbols 3brown* and 3fred* are being used as the
associated values.  The hash table remembers one value for each key,
since we did not specify otherwise, and has two items in it, one of
which associates from 3color* to 3brown*, and the other of which
associates from 3name* to 3fred*.

Keys do not have to be symbols; they can be any Lisp object.  Likewise
values can be any Lisp object.  The Lisp function 3eq* is used to
compare keys, rather than 3equal*.  This means that keys are really
objects, but it means that it is not reasonable to use numbers other
than fixnums as keys.

When a hash table is first created, it has a 2size*, which is the
maximum number of entries it can hold.  Usually the actual capacity of
the table is somewhat less, since the hashing is not perfectly
collision-free.  With the maximum possible bad luck, the capacity could
be very much less, but this rarely happens.  If so many entries are
added that the capacity is exceeded, the hash table will automatically
grow, and the entries will be 2rehashed* (new hash values will be
recomputed, and everything will be rearranged so that the fast hash
lookup still works).  This is transparent to the caller; it all happens
automatically.

The 3describe* function (see (describe-fun)) prints a variety of
useful information when applied to a hash table.

This hash table facility is similar to the hasharray facility of Interlisp,
and some of the function names are the same.  However, it is 2not* compatible.
The exact details and the order of arguments are designed to be consistent
with the rest of Zetalisp rather than with Interlisp.  For instance,
the order of arguments to 3maphash* is different, we do not have the Interlisp
"system hash table", and we do not have the
Interlisp restriction that keys and values may not be 3nil*.  
Note, however, that the order of arguments to 3gethash*, 3puthash*, and 3remhash*
is not consistent with the Zetalisp's 3get*, 3putprop*, and 3remprop*,
either.  This is an unfortunate result of the haphazard historical development of Lisp.

If the calling program is using multiprocessing, it must be careful to make
sure that there are never two processes both referencing the hash table at
the same time.  There is no locking built into hash tables; if you have two
processes that both want to reference the same hash table, you must arrange
mutual exclusion yourself by using a lock or some other means.  Even two
processes just doing 3gethash* on the same hash table must synchronize
themselves, because 3gethash* may be forced by garbage collection to
rehash the table.  Don't worry about this if you don't use multiprocessing;
but if you do use multiprocessing, you will have a lot of trouble if you
don't understand this.

Hash tables are implemented with a special kind of array.  3arrayp*
of a hash table will return 3t*.  However, it is not recommended to
use ordinary array operations on a hash table.
Hash tables should be manipulated only with the functions described below.

@subsection Hashing on Eq

This section documents the functions for 3eq* hash tables, which
use 2objects* as keys and associate other objects with them.

.defun make-hash-table &rest options
This creates a new hash table.  Valid option keywords are:
.table 3
.kitem :size
Sets the initial size of the hash table, in entries, as a fixnum.  The
default is 100 (octal).  The actual size is rounded up from the size
you specify to the next size that is "good" for the hashing algorithm.
You won't necessarily be able to store this many entries into the
table before the max-search-distance criterion (see below) is reached;
but except in the case of extreme bad luck you will be able to store
almost this many.

.kitem :number-of-values
Specifies how many values to associate with each key.
The default is one.

.kitem :area
Specifies the area in which the hash table should be created.  This is
just like the 3:area* option to 3make-array* (see (make-array-fun)).
Defaults to 3nil* (i.e. 3default-cons-area*).

.kitem :rehash-function
Specifies the function to be used for rehashing when the table becomes
full.  Defaults to the internal rehashing function that does the usual
thing.  If you want to write your own rehashing function, you will
have to understand all the internals of how hash tables work.  These
internals are not documented here, as the best way to learn them is
to read the source code.

.kitem :rehash-size
Specifies how much to increase the size of the hash table when it becomes
full.  This can be a fixnum which is the number of entries to add, or
it can be a flonum which is the ratio of the new size to the old size.
The default is 31.3*, which causes the table to be made 30% bigger
each time it has to grow.

.kitem :max-search-distance
Sets a maximum for how long a search you are willing to accept, to
find an entry.  The default is 8.  If you add an entry and it turns
out to be necessary to search more than this far for a place to put
it, the hash table is enlarged and rehashed.  With any luck, the
search will not be as long then.

.kitem :actual-size
Specifies exactly the size for the hash table.  Hash tables used by
the microcode for flavor method lookup must be a power of two in size.
This differs from 3:size* in that 3:size* is rounded up to a
nearly prime number, but 3:actual-size* is used exactly as
specified.  3:actual-size* overrides 3:size.*

.end_table
.end_defun

.defun gethash key hash-table
Find the entry in 2hash-table* whose key is 2key*, and return the
associated value.  If there is no such entry, return 3nil*.
Returns a second value, which is 3t* if an entry was found or 3nil* if there
is no entry for 2key* in this table.

Returns also a third value, a list which overlays the hash table
entry.  Its car is the key; the remaining elements are the values in
the entry.  This is how you can access values other than the first, if
the hash table contains more than one value per entry.
.end_defun

.defun puthash key value hash-table &rest extra-values
Create an entry associating 2key* to 2value*; if there is already an
entry for 2key*, then replace the value of that entry with 2value*.
Returns 2value*.  The hash table automatically grows if necessary.

If the hash table associates more than one value with each key, the
remaining values in the entry are taken from 2extra-values*.
.end_defun

.defun remhash key hash-table
Remove any entry for 2key* in 2hash-table*.  Returns 3t* if there was an
entry or 3nil* if there was not.
.end_defun

.defun swaphash key value hash-table &rest extra-values
This specifies new value(s) for 2key* like 3puthash*, but returns
values describing the previous state of the entry, just like
3gethash*.  In particular, it returns the previous (replaced)
associated value as the first value, and returns T as the second value
if the entry existed previously.
.end_defun

.defun maphash function hash-table
For each entry in 2hash-table*, call 2function* on two arguments:
the key of the entry and the value of the entry.

If the hash table has more than one value per key, all the values, in
order, are supplied as arguments, with the corresponding key.
.end_defun

.defun clrhash hash-table
Remove all the entries from 2hash-table*.  Returns the hash table itself.
.end_defun

@subsection Hashing on Equal

This section documents the functions for 3equal* hash tables, which
use trees as keys and associate objects with them.  The function to
make one is slightly different from 3make-hash-table* because the
implementations of the two kinds of hash table differ, but analogous
operations are provided.

.defun make-equal-hash-table &rest options
This creates a new hash table of the 3equal* kind.  Valid option keywords are:
.table 3
.kitem :size
Sets the initial size of the hash table, in entries, as a fixnum.  The
default is 100 (octal).  The actual size is rounded up from the size
you specify to the next "good" size.
You won't necessarily be able to store this many entries into the table
before it overflows and becomes bigger; but except in the case of extreme
bad luck you will be able to store almost this many.

.kitem :area
Specifies the area in which the hash table should be created.  This is
just like the 3:area* option to 3make-array* (see (make-array-fun)).
Defaults to 3nil* (i.e. 3default-cons-area*).

.kitem :rehash-threshold
Specifies how full the table can be before it must grow.  This is typically
a flonum.  The default is 30.8*, i.e. 80%.

.kitem :growth-factor
Specifies how much to increase the size of the hash table when it becomes
full.  This is a flonum which is the ratio of the new size to the old size.
The default is 31.3*, which causes the table to be made 30% bigger
each time it has to grow.
.end_table
.end_defun

.defun gethash-equal key hash-table
Find the entry in 2hash-table* whose key is 3equal* to 2key*, and return the
associated value.  If there is no such entry, return 3nil*.
Returns a second value, which is 3t* if an entry was found or 3nil* if there
is no entry for 2key* in this table.
.end_defun

.defun puthash-equal key value hash-table
Create an entry associating 2key* to 2value*; if there is already an
entry for 2key*, then replace the value of that entry with 2value*.
Returns 2value*.  If adding an entry to the hash table exceeds its
rehash threshold, it is grown and rehashed so that searching does not become too slow.
.end_defun

.defun remhash-equal key hash-table
Remove any entry for 2key* in 2hash-table*.  Returns 3t* if there was an
entry or 3nil* if there was not.
.end_defun

.defun swaphash-equal key value hash-table
This does the same thing as 3puthash-equal*, but returns different values.  If
there was already an entry in 2hash-table* whose key was 2key*, then
it returns the old associated value as its first returned value, and
3t* as its second returned value.  Otherwise it returns two values,
3nil* and 3nil*.
.end_defun

.defun maphash-equal function hash-table
For each entry in 2hash-table*, call 2function* on two arguments:
the key of the entry and the value of the entry.
.end_defun

.defun clrhash-equal hash-table
Remove all the entries from 2hash-table*.  Returns the hash table itself.
.end_defun

@subsection Hash Tables and the Garbage Collector

The 3eq* type hash tables actually hash on the address of the representation
of the object.  When the copying garbage collector changes the addresses of
object, it lets the hash facility know so that 3gethash* will rehash
the table based on the new object addresses.

There will eventually be an option to 3make-hash-table* which tells it
to make a "non-GC-protecting" hash table.  This is a special kind of hash table
with the property that if one of its keys becomes "garbage", i.e. is an object
not known about by anything other than the hash table, then the entry for that
key will be silently removed from the table.  When these exist they will be
documented in this section.

@subsection Hash Primitive
.setq hash-section section-page

2Hashing* is a technique used in algorithms to provide fast retrieval
of data in large tables.  A function, known as a "hash function", is
created, which takes an object that might be used as a key, and produces
a number associated with that key.  This number, or some function of it,
can be used to specify where in a table to look for the datum associated
with the key.  It is always possible for two different objects to "hash
to the same value"; that is, for the hash function to return the same
number for two distinct objects.  Good hash functions are designed to minimize
this by evenly distributing their results over the range of possible numbers.
However, hash table algorithms must still deal with
this problem by providing a secondary search, sometimes known as a
2rehash*.  For more information, consult a
textbook on computer algorithms.

.defun sxhash tree
'cindex "hash table"
3sxhash* computes a hash code of a tree, and returns it as a fixnum.
A property of 3sxhash* is that 3(equal 2x y*)* always implies
3(= (sxhash 2x*) (sxhash 2y*))*.  The number returned by 3sxhash* is
always a non-negative fixnum, possibly a large one.  3sxhash* tries to
compute its hash code in such a way that common permutations of an object,
such as interchanging two elements of a list or changing one character in
a string, will always change the hash code.

Here is an example of how to use 3sxhash* in maintaining
hash tables of trees:
.lisp
(defun knownp (x &aux i bkt)    ;1look up 3x* in the table*
    (setq i (abs (remainder (sxhash x) 176)))
      ;The remainder should be reasonably randomized.
    (setq bkt (aref table i))
      ;bkt is thus a list of all those expressions that
      ;hash into the same number as does x.
    (memq x bkt))
.end_lisp

To write an "intern" for trees, one could
.lisp
(defun sintern (x &aux bkt i tem)
    (setq i (abs (remainder (sxhash x) 2n-1)))
	;2n-1 stands for a power of 2 minus one.
	;This is a good choice to randomize the
	;result of the remainder operation.
    (setq bkt (aref table i))
    (cond ((setq tem (memq x bkt))
	   (car tem))
	  (t (aset (cons x bkt) table i)
	     x)))
.end_lisp
.end_defun

3sxhash* provides what is called "hashing on 3equal*"; that is, two
objects that are 3equal* are considered to be "the same" by
3sxhash*.  In particular, if two strings differ only in alphabetic case,
3sxhash* will return the same thing for both of them because
they are 3equal*.  The value returned by 3sxhash* does not depend
on the value of 3alphabetic-case-affects-string-comparison*
(see (alphabetic-case-affects-string-comparison-var)).

Therefore, 3sxhash* is useful for retrieving data when
two keys that are not the same object but are 3equal* are considered
the same.  If you consider two such keys to be different, then you need
"hashing on 3eq*", where two different objects are always considered
different.  In some Lisp implementations, there is an easy way to create
a hash function that hashes on 3eq*, namely, by returning the virtual
address of the storage associated with the object.  But in other
implementations, of which Zetalisp is one, this doesn't work,
because the address associated with an object can be changed by the
relocating garbage collector.  The hash tables created by 3make-hash-table*
deal with this problem by using the appropriate subprimitives so that they
interface correctly with the garbage collector.  If you need a hash table
that hashes on 3eq*, it is already provided; if you need an
3eq* hash function for some other reason, you must build it yourself,
either using the provided 3eq* hash table facility or carefully using
subprimitives.

@section "Sorting"
'cindex "sorting"

Several functions are provided for sorting arrays and lists.  These
functions use algorithms which always terminate no matter what sorting
predicate is used, provided only that the predicate always terminates. 
The main sorting functions are not 2stable*; that is, equal items may
not stay in their original order.  If you want a stable sort, use the
stable versions.  But if you don't care about stability, don't use them
since stable algorithms are significantly slower.

After sorting, the argument (be it list or array) has been rearranged
internally so as to be completely ordered.  In the case of an array
argument, this is accomplished by permuting the elements of the array,
while in the list case, the list is reordered by 3rplacd*'s in the
same manner as 3nreverse*.  Thus if the argument should not be
clobbered, the user must sort a copy of the argument, obtainable by
3fillarray* or 3copylist*, as appropriate.  Furthermore, 3sort*
of a list is like 3delq* in that it should not be used for effect;
the result is conceptually the same as the argument but in fact is a
different Lisp object.

Should the comparison predicate cause an error, such as a wrong type
argument error, the state of the list or array being sorted is
undefined.  However, if the error is corrected the sort will, of
course, proceed correctly. 

The sorting package is smart about compact lists; it sorts compact
sublists as if they were arrays.  See (cdr-code) for an explanation of
compact lists, and A. I. Memo 587 by Guy L. Steele Jr. for an
explanation of the sorting algorithm.

.defun sort table predicate
The first argument to 3sort* is an array or a list.  The second
is a predicate, which must be applicable to
all the objects in the array or list.  The predicate should take two
arguments, and return non-3nil* if and only if the first argument is
strictly less than the second (in some appropriate sense). 

The 3sort* function proceeds to sort the contents of the array or list
under the ordering imposed by the predicate, and returns the array or
list modified into sorted order.  Note that since sorting requires many
comparisons, and thus many calls to the predicate, sorting will be much
faster if the predicate is a compiled function rather than interpreted. 
.lisp
.exdent 96 Example:
(defun mostcar (x)
    (cond ((symbolp x) x)
          ((mostcar (car x)))))

(sort 'fooarray
      (function (lambda (x y)
	  (alphalessp (mostcar x) (mostcar y)))))
.end_lisp
If 3fooarray* contained these items before the sort:
.lisp
(Tokens (The lion sleeps tonight))
(Carpenters (Close to you))
((Rolling Stones) (Brown sugar))
((Beach Boys) (I get around))
(Beatles (I want to hold your hand))
.end_lisp
then after the sort 3fooarray* would contain:
.lisp
((Beach Boys) (I get around))
(Beatles (I want to hold your hand))
(Carpenters (Close to you))
((Rolling Stones) (Brown sugar))
(Tokens (The lion sleeps tonight))
.end_lisp

When 3sort* is given a list, it may change the order of the
conses of the list (using 3rplacd*), and so it cannot be used merely
for side-effect; only the 2returned value* of 3sort* will be the
sorted list.  This will mess up the original list; if you need both
the original list and the sorted list, you must copy the original
and sort the copy (see 3copylist*, (copylist-fun)).

Sorting an array just moves the elements of the array into different
places, and so sorting an array for side-effect only is all right.

If the argument to 3sort* is an array with a fill pointer, note that,
like most functions, 3sort* considers the active length of the array
to be the length, and so only the active part of the array will be
sorted (see 3array-active-length*, (array-active-length-fun)).
.end_defun

.defun sortcar x predicate
3sortcar* is the same as 3sort* except that the predicate is applied
to the cars of the elements of 2x*, instead of directly to the
elements of 2x*.  Example:
.lisp
(sortcar '((3 . dog) (1 . cat) (2 . bird)) #'<)
                   =>   ((1 . cat) (2 . bird) (3 . dog))
.end_lisp

Remember that 3sortcar*, when given a list, may change the order of the
conses of the list (using 3rplacd*), and so it cannot be used merely
for side-effect; only the 2returned value* of 3sortcar* will be the
sorted list.
.end_defun

.defun stable-sort x predicate
3stable-sort* is like 3sort*, but if two elements of 2x* are equal,
i.e. 2predicate* returns 3nil* when applied to them in either order,
then those two elements will remain in their original order.
.end_defun

.defun stable-sortcar x predicate
3stable-sortcar* is like 3sortcar*, but if two elements of 2x* are equal,
i.e. 2predicate* returns 3nil* when applied to their cars in either order,
then those two elements will remain in their original order.
.end_defun

.defun sort-grouped-array array group-size predicate
3sort-grouped-array* considers its array argument to
be composed of records of 2group-size* elements each.
These records are considered as units, and are sorted with respect
to one another.  The 2predicate* is applied to the first element
of each record; so the first elements act as the keys on which
the records are sorted.
.end_defun

.defun sort-grouped-array-group-key array group-size predicate
This is like 3sort-grouped-array* except that the
2predicate* is applied to four arguments:  an array,
an index into that array, a second array, and an index into
the second array.  2predicate* should consider each index
as the subscript of the first element of a record in the corresponding
array, and compare the two records.  This is more general
than 3sort-grouped-array* since the function can get at
all of the elements of the relevant records, instead of only the first element.
.end_defun

@section Resources
.cindex resource
.cindex allocation of storage
.cindex storage allocation

Storage allocation is handled differently by different computer systems.
In many languages, the programmer must spend a lot of time thinking
about when variables and storage units are allocated and deallocated.
In Lisp, freeing of allocated storage is normally done automatically by
the Lisp system; when an object is no longer accessible to the Lisp
environment, it is garbage collected.  This relieves the programmer of a
great burden, and makes writing programs much easier.

However, automatic freeing of storage incurs an expense: more computer
resources must be devoted to the garbage collector.  If a program is
designed to allocate temporary storage, which is then left as garbage,
more of the computer must be devoted to the collection of garbage; this
expense can be high.  In some cases, the programmer may decide that it
is worth putting up with the inconvenience of having to free storage
under program control, rather than letting the system do it
automatically, in order to prevent a great deal of overhead from the
garbage collector.

It usually is not worth worrying about freeing of storage when the units
of storage are very small things such as conses or small arrays.
Numbers are not a problem, either; fixnums and small flonums do not occupy
storage, and the system has a special way of garbage-collecting the
other kinds of numbers with low overhead.  But when a program allocates and
then gives up very large objects at a high rate (or large objects at a
very high rate), it can be very worthwhile to keep track of that one
kind of object manually.  Within the Lisp Machine system, there
are several programs that are in this position.  The Chaosnet software
allocates and frees "packets", which are moderately large, at a very
high rate.  The window system allocates and frees certain kinds of
windows, which are very large, moderately often.  Both of these programs
manage their objects manually, keeping track of when they are no longer
used.

When we say that a program "manually frees" storage, it does not really
mean that the storage is freed in the same sense that the garbage
collector frees storage.  Instead, a list of unused objects is kept.
When a new object is desired, the program first looks on the list to see
if there is one around already, and if there is it uses it.  Only if the
list is empty does it actually allocate a new one.  When the program is
finished with the object, it returns it to this list.

The functions and special forms in this section perform the above
function.  The set of objects forming each such list is called a
"resource"; for example, there might be a Chaosnet packet resource.
3defresource* defines a new resource; 3allocate-resource* allocates
one of the objects; 3deallocate-resource* frees one of the objects
(putting it back on the list); and 3using-resource* temporarily
allocates an object and then frees it.

.defspec defresource
The 3defresource* special form is used to define a new resource.  The
form looks like this:
.lisp
(defresource 2name* 2parameters*
   2keyword* 2value*
   2keyword* 2value*
   ...)
.end_lisp

2name* should be a symbol; it is the name of the resource and gets a
3defresource* property of the internal data structure representing the resource.

2parameters* is a lambda-list giving names and default values (if 3&optional*
is used) of parameters to an object of this type.  For example, if one had a resource
of two-dimensional arrays to be used as temporary storage in a calculation, the
resource would typically have two parameters, the number of rows and the number of
columns.  In the simplest case 2parameters* is 3()*.

The keyword options control how the objects of the resource are made and kept
track of.  The following keywords are allowed:
.table 3
.kitem :constructor
The 2value* is either a form or the name of a function.  It is
responsible for making an object, and will be used when someone tries to
allocate an object from the resource and no suitable free objects exist.
If the 2value* is a form, it may access the parameters as variables.
If it is a function, it is given the internal data structure for the resource
and any supplied parameters as its arguments; it will need to default any
unsupplied optional parameters.  This keyword is required.

.kitem :initial-copies
The 2value* is a number (or 3nil* which means 0).  This many objects will
be made as part of the evaluation of the 3defresource*; thus is useful to
set up a pool of free objects during loading of a program.  The default is
to make no initial copies.

If initial copies are made and there are 2parameters*, all the parameters must
be 3&optional* and the initial copies will have the default values of the
parameters.

.kitem :finder
The 2value* is a form or a function as with 3:constructor* and sees the
same arguments.  If this option is specified, the resource system does not keep
track of the objects.  Instead, the finder must do so.  It will be called
inside a 3without-interrupts* and must find a usable object somehow and return it.

.kitem :matcher
The 2value* is a form or a function as with 3:constructor*.  In addition to
the parameters, a form here may access the variable 3object* (in the current package).
A function gets the object as its second argument, after the data structure and
before the parameters.  The job of the matcher is to make sure that the object
matches the specified parameters.  If no matcher is supplied, the system will remember
the values of the parameters (including optional ones that defaulted) that were used
to construct the object, and will assume that it matches those particular values for
all time.  The comparison is done with 3equal* (not 3eq*).  The matcher is
called inside a 3without-interrupts*.

.kitem :checker
The 2value* is a form or a function, as above.  In addition to the parameters,
a form here may access the variables 3object* and 3in-use-p* (in the current
package).  A function receives these as its second and third arguments, after the
data structure and before the parameters.  The job of the checker is to determine
whether the object is safe to allocate.  If no checker is supplied, the default
checker looks only at 3in-use-p*; if the object has been allocated and not freed
it is not safe to allocate, otherwise it is.  The checker is
called inside a 3without-interrupts*.

.end_table
If these options are used with forms (rather than functions), the forms get
compiled into functions as part of the expansion of 3defresource*.  These
functions are given names like 3(:property 2resource-name* si:resource-constructor)*;
these names are not guaranteed not to change in the future.

Most of the options are not used in typical cases.  Here is an example:
.lisp
(defresource two-dimensional-array (rows columns)
	:constructor (make-array (list rows columns)))
.end_lisp

Suppose the array was usually going to be 100 by 100, and you wanted to preallocate
one during loading of the program so that the first time you needed an array you
wouldn't have to spend the time to create one.  You might simply put
.lisp
(using-resource (foo two-dimensional-array 100 100)
	)
.end_lisp
after your 3defresource*, which would allocate a 100 by 100 array and then
immediately free it.  Alternatively you could:
.lisp
(defresource two-dimensional-array
			(&optional (rows 100) (columns 100))
	:constructor (make-array (list rows columns))
	:initial-copies 1)
.end_lisp

Here is an example of how you might use the 3:matcher* option.  Suppose you wanted
to have a resource of two-dimensional arrays, as above, except that when you allocate
one you don't care about the exact size, as long as it is big enough.  Furthermore
you realize that you are going to have a lot of different sizes and if you always
allocated one of exactly the right size, you would allocate a lot of different arrays
and would not reuse a pre-existing array very often.  So you might:
.lisp
(defresource sloppy-two-dimensional-array (rows columns)
    :constructor (make-array (list rows columns))
    :matcher (and ( (array-dimension-n 1 object) rows)
		  ( (array-dimension-n 2 object) columns)))
.end_lisp
.end_defspec

.defun allocate-resource name &rest parameters
Allocate an object from the resource specified by 2name*.  The various forms
and/or functions given as options to 3defresource*, together with any
2parameters* given to 3allocate-resource*, control how a suitable object
is found and whether a new one has to be constructed or an old one can be reused.

Note that the 3using-resource* special form is usually what you want to
use, rather than 3allocate-resource* itself; see below.
.end_defun

.defun deallocate-resource name resource
Free the object 2resource*, returning it to the free-object list of the resource
specified by 2name*.
.end_defun

.defun clear-resource name
Forget all of the objects being remembered by the resource specified by 2name*.
Future calls to 3allocate-resource* will create new objects.  This function is
useful if something about the resource has been changed incompatibly, such that the
old objects are no longer usable.  If an object of the resource is in use when
3clear-resource* is called, an error will be signalled when that object is
deallocated.
.end_defun

.defspec using-resource (variable resource parameters...) body...
The 2body* forms are evaluated sequentially with 2variable* bound to an
object allocated from the resource named 2resource*, using the given 2parameters*.
The 2parameters* (if any) are evaluated, but 2resource* is not.

3using-resource* is often more convenient than calling
3allocate-resource* and 3deallocate-resource*.
Furthermore it is careful to free the object when the body is exited,
whether it returns normally or via 3*throw*.  This is done by using
3unwind-protect*; see (unwind-protect-fun).
.end_defspec

.lisp
.exdent 96 Here is an example of the use of resources:
(defresource huge-16b-array (&optional (size 1000))
  :constructor (make-array size ':type 'art-16b))

(defun do-complex-computation (x y)
  (using-resource (temp-array huge-16b-array)
    ...                               ;1Within the body, the array can be used.*
    (aset 5 temp-array i)
    ...))                             ;1The array is returned at the end.*
.end_lisp

@c Remember to go back and try to figure out INTERN and REMOB.
@chapter "Symbols"
.cindex "symbol"
.setq symbol section-page
.setq symbol-chapter chapter-number
@section "The Value Cell"
'cindex "value cell"
	Each symbol has associated with it a 2value cell*, which refers
to one Lisp object.  This object is called the symbol's 2binding* or 2value*,
since it is what you get when you evaluate the symbol.  The binding of symbols to values
allows symbols to be used as the implementation of 2variables* in programs.

	The value cell can also be 2empty*, referring to 2no* Lisp
object, in which case the symbol is said to be 2unbound*.  This is the initial
state of a symbol when it is created.  An attempt to evaluate an unbound symbol
causes an error.

	Symbols are often used as special variables.  Variables and how
they work are described in (variable-section).	The symbols 3nil* and
3t* are always bound to themselves; they may not be assigned, bound,
or otherwise used as variables.  Attempting to change the value of
3nil* or 3t* (usually) causes an error.

	The functions described here work on 2symbols*, not 2variables*
in general.  This means that the functions below won't work if you try to
use them on local variables.

.defun set symbol value
3set* is the primitive for assignment of symbols.  The 2symbol*'s value
is changed to 2value*; 2value* may be any Lisp object.  3set* returns
2value*.
.lisp
.exdent 96 Example:
(set (cond ((eq a b) 'c)
           (t 'd))
     'foo)
.end_lisp
will either set 3c* to 3foo* or set 3d* to 3foo*.
.end_defun

.defun symeval sym
3symeval* is the basic primitive for retrieving a symbol's value.
3(symeval 2sym*)* returns 2sym*'s current binding.
This is the function called by 3eval* when it is given a symbol
to evaluate.  If the symbol is unbound, then 3symeval* causes 
an error.
.end_defun

.defun boundp sym
3boundp* returns 3t* if 2sym* is bound; otherwise, it returns 3nil*.
.end_defun

.defun makunbound sym
3makunbound* causes 2sym* to become unbound.
.lisp
.exdent 96 Example:
(setq a 1)
a => 1
(makunbound 'a)
a => 1causes an error.*
.end_lisp
3makunbound* returns its argument.
.end_defun

.defun value-cell-location sym
3value-cell-location* returns a locative pointer to 2sym*'s value cell.
See the section on locatives ((locative)).  It is preferable to write
.lisp
(locf (symeval 2sym*))
.end_lisp
instead of calling this function explicitly.

This is actually the internal value cell; there can also be an external
value cell.  For details, see the section on closures ((closure)).

Note: the function 3value-cell-location* works on symbols that
get converted to local variables (see (variable-section)); the compiler
knows about it specially when its argument is a quoted symbol which is
the name of a local variable.  It returns a pointer to the cell that holds
the value of the local variable.
.end_defun

@section "The Function Cell"
'cindex "function cell"
	Every symbol also has associated with it a 2function cell*.  The 2function*
cell is similar to the 2value* cell; it refers to a Lisp object.
When a function is referred to by name, that is, when a symbol is 2applied*
or appears as the car of a form to be evaluated, that symbol's function cell
is used to find its 2definition*, the functional object which is to be applied.
For example, when evaluating 3(+ 5 6)*, 
the evaluator looks in 3+*'s function cell to find the definition of 3+*,
in this case a 2FEF* containing a compiled program, to apply to 5 and 6.
	Maclisp does not have function cells; instead, it looks for special
properties on the property list.  This is one of the major incompatibilities
between the two dialects.
	Like the value cell, a function cell can be empty, and it can be bound
or assigned.  (However, to bind a function cell you must use the
3bind* subprimitive; see (bind-fun).)
The following functions are analogous to the value-cell-related
functions in the previous section.

.defun fsymeval sym
3fsymeval* returns 2sym*'s definition, the contents of its function cell.
If the function cell is empty, 3fsymeval* causes an error.
.end_defun

.defun fset sym definition
3fset* stores 2definition*, which may be any Lisp object, into 2sym*'s
function cell.  It returns 2definition*.
.end_defun

.defun fboundp sym
3fboundp* returns 3nil* if 2sym*'s function cell is empty,
i.e. 2sym* is undefined.
Otherwise it returns 3t*.
.end_defun

.defun fmakunbound sym
3fmakunbound* causes 2sym* to be undefined, i.e. its
function cell to be empty.
It returns 2sym*.
.end_defun

.defun function-cell-location sym
3function-cell-location* returns a locative pointer to 2sym*'s
function cell.  See the section on locatives ((locative)).  It is
preferable to write
.lisp
(locf (fsymeval 2sym*))
.end_lisp
rather than calling this function explicitly.
.end_defun

Since functions are the basic building block of Lisp programs,
the system provides a variety of facilities for dealing with functions.
Refer to chapter (function-chapter) for details.

@section "The Property List"
.setq symbol-plist-section section-page

Every symbol has an associated property list.  See (plist) for
documentation of property lists.  When a symbol is created, its property
list is initially empty.

The Lisp language itself does not use a symbol's property list for
anything.  (This was not true in older Lisp implementations, where the
print-name, value-cell, and function-cell of a symbol were kept on its
property list.)  However, various system programs use the property list to
associate information with the symbol.  For instance, the editor uses
the property list of a symbol which is the name of a function to
remember where it has the source code for that function, and the
compiler uses the property list of a symbol which is the name of a
special form to remember how to compile that special form.

Because of the existence of print-name, value, function, and package cells,
none of the Maclisp system property names (3expr*, 3fexpr*, 3macro*, 3array*,
3subr*, 3lsubr*, 3fsubr*, and in former times 3value* and
3pname*) exist in Zetalisp.

.defun plist sym
This returns the list which represents the property list of 2sym*.  Note that
this is not the property list itself; you cannot do 3get* on it.
.end_defun

.defun setplist sym list
This sets the list which represents the property list of 2sym* to 2list*.
3setplist* is to be used with caution (or not at all),
since property lists sometimes contain internal system properties, which
are used by many useful system functions.  Also it is inadvisable to have the property
lists of two different symbols be 3eq*, since the shared list structure will
cause unexpected effects on one symbol if 3putprop* or 3remprop* is done to the other.
.end_defun

.defun property-cell-location sym
This returns a locative pointer to the location of 2sym*'s property-list
cell.  This locative pointer is equally valid as 2sym* itself, as a handle
on 2sym*'s property list.
.end_defun

@section "The Print Name"
'cindex "print name"
Every symbol has an associated string called the 2print-name*, or 2pname*
for short.  This string is used as the external representation of the symbol:
if the string is typed in to 3read*, it is read as a reference to that symbol
(if it is interned), and if the symbol is printed, 3print* types out the
print-name.
For more information, see the sections on the 2reader*
(see (reader)) and 2printer* (see (printer)).

.defun get-pname sym
This returns the print-name of the symbol 2sym*.
.lisp
.exdent 96 Example:
(get-pname 'xyz) => "xyz"
.end_lisp
.end_defun

.defun samepnamep sym1 sym2
This predicate returns 3t* if the two symbols 2sym1* and 2sym2* have
3equal* print-names; that is, if their printed representation is the same.
Upper and lower case letters are normally considered the same.
If either or both of the arguments is a string instead of a symbol, then that
string is used in place of the print-name.
3samepnamep* is useful for determining if two symbols would be the same
except that they are in different packages (see (package)).
.lisp
.exdent 96 Examples:
(samepnamep 'xyz (maknam '(x y z)) => t

(samepnamep 'xyz (maknam '(w x y)) => nil

(samepnamep 'xyz "xyz") => t
.end_lisp

This is the same function as 3string-equal* (see (string-equal-fun)).
3samepnamep* is provided mainly so that you can write programs that
will work in Maclisp as well as Zetalisp; in new programs,
you should just use 3string-equal*.
.end_defun

@section The Package Cell

Every symbol has a 2package cell* which is used, for interned
symbols, to point to the package which the symbol belongs to.  For an
uninterned symbol, the package cell contains 3nil*.  For
information about packages in general, see the chapter on packages, (package).
For information about package cells, see (symbol-package-cell-discussion).

@section Creating Symbols

The functions in this section are primitives for creating symbols.
However, before discussing them, it is important to point out that most
symbols are created by a higher-level mechanism, namely the reader and
the 3intern* function.  Nearly all symbols in Lisp are created
by virtue of the reader's having seen a sequence of input characters that
looked like the printed representation of a symbol.  When the
reader sees such a p.r., it calls 3intern* (see (intern-fun)),
which looks up the sequence of characters in a big table and sees whether any symbol
with this print-name already exists.  If it does, 3read* uses the
already-existing symbol.  If it does not, then 3intern* creates a new
symbol and puts it into the table, and 3read* uses that new symbol.

A symbol that has been put into such a table is called an 2interned*
symbol.  Interned symbols are normally created automatically; the first time
someone (such as the reader) asks for a symbol with a given print-name
that symbol is automatically created.

These tables are called 2packages*.
In Zetalisp, interned symbols are the province of the
2package* system.  Although interned symbols are the most commonly
used, they will not be discussed further here.  For more information,
turn to the chapter on packages ((package)).

An 2uninterned* symbol is a symbol used simply as a data object,
with no special cataloging.  An uninterned symbol prints the same
as an interned symbol with the same print-name, but cannot be read back in.

The following functions can be used to create uninterned symbols
explicitly.

.defun make-symbol pname &optional permanent-p
This creates a new uninterned symbol, whose print-name is the string
2pname*.  The value and function bindings will be unbound and the
property list will be empty.  If 2permanent-p* is specified, it is
assumed that the symbol is going to be interned and probably kept around
forever; in this case it and its pname will be put in the proper areas.
If 2permanent-p* is 3nil* (the default), the symbol goes in the
default area and the pname is not copied.  2permanent-p* is mostly
for the use of 3intern* itself.
.lisp
.exdent 96 Examples:
(setq a (make-symbol "foo")) => foo
(symeval a) => ERROR!
.end_lisp
Note that the symbol is 2not* interned; it is simply created and returned.
.end_defun

.defun copysymbol sym copy-props
This returns a new uninterned symbol with the same print-name
as 2sym*.  If 2copy-props* is non-3nil*, then the
value and function-definition of the new symbol will
be the same as those of 2sym*, and the property list of
the new symbol will be a copy of 2sym*'s.  If 2copy-props*
is 3nil*, then the new symbol will be unbound and undefined, and
its property list will be empty.
.end_defun

.defun gensym &optional x
3gensym* invents a print-name, and creates a new symbol with that print-name.
It returns the new, uninterned symbol.

	The invented print-name is a character prefix (the value of 3si:*gensym-prefix*)
followed by the decimal representation of a number (the value of 3si:*gensym-counter*),
e.g. "g0001".  The number is increased by one every time 3gensym* is called.

	If the argument 2x* is present and is a fixnum, then 3si:*gensym-counter* is
set to 2x*.  If 2x* is a string or a symbol, then 3si:*gensym-prefix* is set to
the first character of the string or of the symbol's print-name.
After handling the argument, 3gensym* creates a symbol as it would with no argument.
.lisp
.exdent 96 Examples:
1if*	(gensym) => g0007
1then*	(gensym 'foo) => f0008
	(gensym 32.) => f0032
	(gensym) => f0033
.end_lisp
	Note that the number is in decimal and always has four digits, and the prefix is
always one character.

	3gensym* is usually used to create a symbol which should not normally
be seen by the user, and whose print-name is unimportant, except to
allow easy distinction by eye between two such symbols.
The optional argument is rarely supplied.
The name comes from "generate symbol", and the symbols produced by it
are often called "gensyms".
.end_defun

@c Missing explanation of the random number algorithm. 
@c Not documented because they are crocks: list-product, list-sum
.c
@chapter "Numbers"
.setq number section-page
.setq number-chapter chapter-number
.cindex number
Zetalisp includes several types of numbers, with different
characteristics.  Most numeric functions will accept any type of numbers as
arguments and do the right thing.  That is to say, they are 2generic*.
In Maclisp, there are generic numeric functions (like 3plus*) and there
are specific numeric functions (like 3+*) which only operate on a certain
type, and are much more efficient.
In Zetalisp, this distinction does not exist; both function
names exist for compatibility but they are identical.  The microprogrammed
structure of the machine makes it possible to have only the generic
functions without loss of efficiency. 

The types of numbers in Zetalisp are:
.table 1
.item fixnum
Fixnums are 24-bit 2's complement binary integers.  These are the "preferred,
most efficient" type of number.
.item bignum
Bignums are arbitrary-precision binary integers.
.item flonum
Flonums are floating-point numbers.  They have a mantissa of 32 bits and an exponent
of 11 bits, providing a precision of about 9 digits and a range of about 10^300.
Stable rounding is employed.
.item small-flonum
Small flonums are another form of floating-point number, with a mantissa of
18 bits and an exponent of 7 bits, providing a precision of about 5 digits
and a range of about 10^19.  Stable rounding is employed.
Small flonums are useful because, like fixnums,
and unlike flonums, they don't require any storage.  Computing with small flonums is
more efficient than with regular flonums because the operations are faster
and consing overhead is eliminated.
.end_table

Generally, Lisp objects have a unique identity; each exists, independent
of any other, and you can use the 3eq* predicate to determine whether
two references are to the same object or not.  Numbers are the exception
to this rule; they don't work this way.  The following function may return
either 3t* or 3nil*.  Its behavior is considered undefined, but
as this manual is written it returns 3t* when interpreted but 3nil* when compiled.
.lisp
(defun foo ()
   (let ((x (float 5)))
     (eq x (car (cons x nil)))))
.end_lisp
This is very strange from the point of view of Lisp's usual object
semantics, but the implementation works this way, in order to gain
efficiency, and on the grounds that identity testing of numbers is not
really an interesting thing to do.  So, the rule is that the result
of applying 3eq* to numbers is undefined, and may return either
3t* or 3nil* at will.  If you want to compare the values of
two numbers, use 3=* (see (=-fun)).

Fixnums and small flonums are exceptions to this rule; some system code
knows that 3eq* works on fixnums used to represent characters or small
integers, and uses 3memq* or 3assq* on them.  3eq* works as well
as 3=* as an equality test for fixnums.  Small flonums that are 3=*
tend to be 3eq* also, but it is unwise to depend on this.

The distinction between fixnums and bignums is largely transparent to
the user.  The user simply computes with integers, and the system
represents some as fixnums and the rest (less efficiently) as bignums.
The system automatically converts back and forth between fixnums and
bignums based solely on the size of the integer.  There are a few "low
level" functions which only work on fixnums; this fact is noted in
their documentation.  Also when using 3eq* on numbers the user
needs to be aware of the fixnum/bignum distinction.

Integer computations cannot "overflow", except for division by zero,
since bignums can be of arbitrary size.  Floating-point computations
can get exponent overflow or underflow, if the result is too large or small
to be represented.  Exponent overflow always signals an error.
Exponent underflow normally signals an error, and assumes 30.0* as the answer
if the user says to proceed from the error.  However, if the value of the
variable 3zunderflow* is non-3nil*, the error is skipped
and computation proceeds with 30.0* in place of the result that was too small.

When an arithmetic function of more than one argument is given
arguments of different numeric types, uniform 2coercion rules* are
followed to convert the arguments to a common type, which is also the
type of the result (for functions which return a number).  When an
integer meets a small flonum or a flonum, the result is a small flonum
or a flonum (respectively).  When a small flonum meets a regular
flonum, the result is a regular flonum.

Thus if the constants in a numerical algorithm are written as
small flonums (assuming this provides adequate precision), and if the input
is a small flonum, the computation will be done in small-flonum mode and
the result will a small flonum, while if the input is a large flonum
the computations will be done in full precision and the result will
be a flonum.

Zetalisp never automatically converts between flonums and small
flonums, in the way it automatically converts between fixnums and
bignums, since this would lead either to inefficiency or to unexpected
numerical inaccuracies.  (When a small flonum meets a flonum, the result
is a flonum, but if you use only one type, all the results will be of
the same type too.)  This means that a small-flonum computation can get
an exponent overflow error even when the result could have been
represented as a large flonum.

Floating-point numbers retain only a certain number of bits of precision;
therefore, the results of computations are only approximate.  Large flonums
have 31 bits and small flonums have 17 bits, not counting the sign.
The method of approximation is "stable rounding".  The result of an
arithmetic operation will be the flonum which is closest to the exact
value.  If the exact result falls precisely halfway between two flonums,
the result will be rounded down if the least-significant bit is 0,
or up if the least-significant bit is 1.  This choice is arbitrary
but insures that no systematic bias is introduced.

.setq division-rule page
Integer addition, subtraction, and multiplication always produce an
exact result.  Integer division, on the other hand, returns an integer
rather than the exact rational-number result.  The quotient is
truncated towards zero rather than rounded.  The exact rule is that if
2A* is divided by 2B*, yielding a quotient of 2C* and a remainder
of 2D*, then 2A* = 2B* * 2C* + 2D* exactly.
2D* is either
zero or the same sign as 2A*.  Thus the absolute value of 2C* is
less than or equal to the true quotient of the absolute values
of 2A* and 2B*.  This is compatible with Maclisp and most
computer hardware.  However, it has the serious problem that
it does 2not* obey the rule that if 2A* divided by 2B*
yields a quotient of 2C* and a remainder of 2D*, then dividing
2A* + 2k* * 2B* by 2B* will yield a quotient of 2C* + 2k* and
a remainder of 2D* for all integer 2k*.  The lack of this property
sometimes makes regular integer division hard to use.  New functions
that implement a different kind of division, that obeys this rule,
will be implemented in the future.

@c When the div and mod functions exist, document them here.  D
@c is zero or the same sign as B, and C is the greatest integer
@c less than or equal to the true result, provided B is positive.

Unlike Maclisp, Zetalisp does not have number declarations in
the compiler.  Note that because fixnums and small flonums require no
associated storage they are as efficient as declared numbers in Maclisp.
Bignums and (large) flonums are less efficient, however bignum and
flonum intermediate results are garbage collected in a special way that
avoids the overhead of the full garbage collector.

The different types of numbers can be distinguished by their printed
representations.  A leading or embedded (but 2not* trailing) decimal
point, and/or an exponent separated by "e", indicates a flonum.  If a
number has an exponent separated by "s", it is a small flonum.  Small
flonums require a special indicator so that naive users will not
accidentally compute with the lesser precision.  Fixnums
and bignums have similar printed representations since there is no
numerical value that has a choice of whether to be a fixnum or a bignum;
an integer is a bignum if and only if its magnitude too big for a
fixnum.  See the examples on (flonum-examples), in the description
of what the reader understands.

@section "Numeric Predicates"
.defun zerop x
Returns 3t* if 2x* is zero.  Otherwise it returns 3nil*.
If 2x* is not a number, 3zerop* causes an error.  For flonums,
this only returns 3t* for exactly 30.0* or 30.0s0*; there
is no "fuzz".
.end_defun

.defun plusp x
Returns 3t* if its argument is a positive number, strictly greater
than zero.  Otherwise it returns 3nil*.
If 2x* is not a number, 3plusp* causes an error.
.end_defun

.defun minusp x
Returns 3t* if its argument is a negative number, strictly
less than zero.  Otherwise it returns 3nil*.
If 2x* is not a number, 3minusp* causes an error.
.end_defun

.defun oddp number
Returns 3t* if 2number* is odd, otherwise 3nil*.
If 2number* is not a fixnum or a bignum, 3oddp* causes an error.
.end_defun

.defun evenp number
Returns 3t* if 2number* is even, otherwise 3nil*.
If 2number* is not a fixnum or a bignum, 3evenp* causes an error.
.end_defun

.defspec signp test x
2signp* is used to test the sign of a number.  It is present only for
Maclisp compatibility, and is not recommended for use in new programs.
3signp* returns 3t* if 2x* is a number which
satisfies the 2test*, 3nil* if it is not a number or does not meet
the test.  2test* is not evaluated, but 2x* is.  2test* can be
one of the following:
.table 3 500 250 0 0
.item l
x < 0
.item le
x 3* 0
.item e
x = 0
.item n
x 3* 0
.item ge
x 3* 0
.item g
x > 0
.end_table
.lisp
.exdent 96 Examples:
(signp ge 12) => t
(signp le 12) => nil
(signp n 0) => nil
(signp g 'foo) => nil
.end_lisp
.end_defspec

.nopara
See also the data-type predicates 3fixp*, 3floatp*, 3bigp*,
3small-floatp*, and 3numberp* ((fixp-fun)).

@section Numeric Comparisons

All of these functions require that their arguments be numbers, and signal
an error if given a non-number.  They work on all types of numbers,
automatically performing any required coercions (as opposed to
Maclisp in which generally only the spelled-out names work for
all kinds of numbers).

.defun = x y
Returns 3t* if 2x* and 2y* are numerically equal.  An integer can
be 3=* to a flonum.
.end_defun

.defun greaterp x y &rest more-args
.defun1 > x y &rest more-args
3greaterp* compares its arguments from left to right.  If any argument
is not greater than the next, 3greaterp* returns 3nil*.  But if the
arguments are monotonically strictly decreasing, the result is 3t*.
.lisp
.exdent 96 Examples:
(greaterp 4 3) => t
(greaterp 4 3 2 1 0) => t
(greaterp 4 3 1 2 0) => nil
.end_lisp
.end_defun

.defun >= x y &rest more-args
.defun1  x y &rest more-args
3* compares its arguments from left to right.  If any argument
is less than the next, 3* returns 3nil*.  But if the
arguments are monotonically decreasing or equal, the result is 3t*.
.end_defun

.defun lessp x y &rest more-args
.defun1 < x y &rest more-args
3lessp* compares its arguments from left to right.  If any argument
is not less than the next, 3lessp* returns 3nil*.  But if the
arguments are monotonically strictly increasing, the result is 3t*.
.lisp
.exdent 96 Examples:
(lessp 3 4) => t
(lessp 1 1) => nil
(lessp 0 1 2 3 4) => t
(lessp 0 1 3 2 4) => nil
.end_lisp
.end_defun

.defun <= x y &rest more-args
.defun1  x y &rest more-args
3* compares its arguments from left to right.  If any argument
is greater than the next, 3* returns 3nil*.  But if the
arguments are monotonically increasing or equal, the result is 3t*.
.end_defun

.defun  x y
Returns 3t* if 2x* is not numerically equal to 2y*, and 3nil* otherwise.
.end_defun

.defun max &rest args
3max* returns the largest of its arguments.
.lisp
.exdent 96 Example:
(max 1 3 2) => 3
.end_lisp
3max* requires at least one argument.
.end_defun

.defun min &rest args
3min* returns the smallest of its arguments.
.lisp
.exdent 96 Example:
(min 1 3 2) => 1
.end_lisp
3min* requires at least one argument.
.end_defun

@section "Arithmetic"

All of these functions require that their arguments be numbers, and signal
an error if given a non-number.  They work on all types of numbers,
automatically performing any required coercions (as opposed to Maclisp,
in which generally only the spelled-out versions work for all kinds
of numbers, and the "$" versions are needed for flonums).

.defun plus &rest args
.defun1 + &rest args
.defun1 +$ &rest args
Returns the sum of its arguments.  If there are no arguments, it returns
30*, which is the identity for this operation.
.end_defun

.defun difference arg &rest args
Returns its first argument minus all of the rest of its arguments.
.end_defun

.defun minus x
Returns the negative of 2x*.
.lisp
.exdent 96 Examples:
(minus 1) => -1
(minus -3.0) => 3.0
.end_lisp
.end_defun

.defun - arg &rest args
.defun1 -$ arg &rest args
With only one argument, 3-* is the same as 3minus*; it
returns the negative of its argument.
With more than one argument, 3-* is the same as 3difference*;
it returns its first argument minus all of the rest of its arguments.
.end_defun

.defun abs x
Returns 3|2x*|*, the absolute value of the number 2x*.
3abs* could have been defined by:
.lisp
(defun abs (x)
    (cond ((minusp x) (minus x))
	  (t x)))
.end_lisp
.end_defun

.defun times &rest args
.defun1 * &rest args
.defun1 *$ &rest args
Returns the product of its arguments.  If there are no arguments, it
returns 31*, which is the identity for this operation.
.end_defun

.defun quotient arg &rest args
Returns the first argument divided by all of the rest of its arguments.
.end_defun

.defun // arg &rest args
.defun1 //$ arg &rest args
The name of this function is written 3//* rather than 3/* because
3/* is the quoting character in Lisp syntax and must be doubled.
With more than one argument, 3//* is the same as 3quotient*;
it returns the first argument divided by all of the rest of its arguments.
With only one argument, 3(// 2x*)* is the same as 3(// 1 2x*)*.
The exact rules for the meaning of the quotient and remainder of two
integers are given on (division-rule); this explains why the rules used for
integer division are not correct for all applications.
.lisp
.exdent 96 Examples:
(// 3 2) => 1       1;Fixnum division truncates.*
(// 3 -2) => -1
(// -3 2) => -1
(// -3 -2) => 1
(// 3 2.0) => 1.5
(// 3 2.0s0) => 1.5s0
(// 4 2) => 2
(// 12. 2. 3.) => 2
(// 4.0) => .25
.end_lisp
.end_defun

.defun remainder x y
.defun1 \ x y
Returns the remainder of 2x* divided by 2y*.
2x* and 2y* must be integers (fixnums or bignums).
The exact rules for the meaning of the quotient and remainder of two
integers are given on (division-rule).
.lisp
(\ 3 2) => 1
(\ -3 2) => -1
(\ 3 -2) => 1
(\ -3 -2) => -1
.end_lisp
.end_defun

.defun add1 x
.defun1 1+ x
.defun1 1+$ x
3(add1 x)* is the same as 3(plus x 1)*.
.end_defun

.defun sub1 x
.defun1 1- x
.defun1 1-$ x
3(sub1 x)* is the same as 3(difference x 1)*.  Note that the
short name may be confusing: 3(1- x)* does 2not* mean 1-x;
rather, it means x-1.
.end_defun

.defun gcd x y &rest args
.defun1 \\ x y &rest args
Returns the greatest common divisor of all its arguments.
The arguments must be integers (fixnums or bignums).
.end_defun

.defun expt x y
.defun1 ^ x y
.defun1 ^$ x y
Returns 2x* raised to the 2y*'th power.
The result is an integer if both arguments are integers (even if 2y* is negative!)
and floating-point if either 2x* or 2y* or both is floating-point.
If the exponent is an integer a repeated-squaring algorithm is used, while
if the exponent is floating the result is 3(exp (* 2y* (log 2x*)))*.
.end_defun

.defun sqrt x
Returns the square root of 2x*.
.end_defun

.defun isqrt x
Integer square-root.  2x* must be an integer; the result is the greatest
integer less than or equal to the exact square root of 2x*.
.end_defun

.defun *dif x y
.defun1 *plus x y
.defun1 *quo x y
.defun1 *times x y
These are the internal micro-coded arithmetic functions.  There is no
reason why anyone should need to write code with these explicitly, since the
compiler knows how to generate the appropriate code for 3plus*,
3+*, etc.  These names are only here for Maclisp compatibility.
.end_defun

@section Transcendental Functions

These functions are only for floating-point arguments; if given an integer
they will convert it to a flonum.  If given a small-flonum, they will return a
small-flonum [currently this is not true of most of them, but it will
be fixed in the future].

.defun exp x
Returns 2e* raised to the 2x*'th power, where 2e* is the base of natural logarithms.
.end_defun

.defun log x
Returns the natural logarithm of 2x*.
.end_defun

.defun sin x
Returns the sine of 2x*, where 2x* is expressed in radians.
.end_defun

@c bletch, do we want these in here?
.defun sind x
Returns the sine of 2x*, where 2x* is expressed in degrees.
.end_defun

.defun cos x
Returns the cosine of 2x*, where 2x* is expressed in radians.
.end_defun

@c bletch do we want these in here?
.defun cosd x
Returns the cosine of 2x*, where 2x* is expressed in degrees.
.end_defun

.defun atan y x
Returns the angle, in radians, whose tangent is 2y/x*.  3atan* always returns a
non-negative number between zero and 32*.
.end_defun

.defun atan2 y x
Returns the angle, in radians, whose tangent is 2y/x*.  3atan2* always returns a
number between 3-* and 3*.
.end_defun

@section Numeric Type Conversions

These functions are provided to allow specific conversions of data
types to be forced, when desired.

.defun fix x
Converts 2x* from a flonum (or small-flonum) to an integer, truncating towards
negative infinity.
The result is a fixnum or a bignum as appropriate.  If 2x* is already
a fixnum or a bignum, it is returned unchanged.
.end_defun

.defun fixr x
Converts 2x* from a flonum (or small-flonum) to an integer, rounding to the
nearest integer.  If 2x* is exactly halfway between two integers,
this rounds up (towards positive infinity).  3fixr* could have been defined by:
.lisp
(defun fixr (x)
  (if (fixp x) x (fix (+ x 0.5))))
.end_lisp
.end_defun

.defun float x
Converts any kind of number to a flonum.
.end_defun

.defun small-float x
Converts any kind of number to a small flonum.
.end_defun

@section "Logical Operations on Numbers"

Except for 3lsh* and 3rot*, these functions operate on both
fixnums and bignums.  3lsh* and 3rot* have an inherent word-length
limitation and hence only operate on 24-bit fixnums.  Negative numbers
are operated on in their 2's-complement representation.

.defun logior &rest args
Returns the bit-wise logical 2inclusive or* of its arguments.
At least one argument is required.
.lisp
.exdent 96 Example:
(logior 4002 67) => 4067
.end_lisp
.end_defun

.defun logxor &rest args
Returns the bit-wise logical 2exclusive or* of its arguments.
At least one argument is required.
.lisp
.exdent 96 Example:
(logxor 2531 7777) => 5246
.end_lisp
.end_defun

.defun logand &rest args
Returns the bit-wise logical 2and* of its arguments.
At least one argument is required.
.lisp
.exdent 96 Examples:
(logand 3456 707) => 406
(logand 3456 -100) => 3400
.end_lisp
.end_defun

.defun lognot number
Returns the logical complement of 2number*.  This is the same as
3logxor*'ing 2number* with -1.
.lisp
.exdent 96 Example:
(lognot 3456) => -3457
.end_lisp
.end_defun

.defun boole fn &rest args
3boole* is the generalization of 3logand*, 3logior*, and 3logxor*.
2fn* should be a fixnum between 0 and 17 octal inclusive;
it controls the function which is computed.  If the binary representation
of 2fn* is 2abcd* (2a* is the most significant bit, 2d* the least)
then the truth table for the Boolean operation is as follows:
.sp
.lisp
       y
   | 0  1
---------
  0| a  c
x  |
  1| b  d
.end_lisp

If 3boole* has more than three arguments, it is associated left
to right; thus,
.lisp
(boole fn x y z) = (boole fn (boole fn x y) z)
.end_lisp
With two arguments, the result of 3boole* is simply its second argument.
At least two arguments are required.

.lisp
.exdent 96 Examples:
(boole 1 x y) = (logand x y)
(boole 6 x y) = (logxor x y)
(boole 2 x y) = (logand (lognot x) y)
.end_lisp

3logand*, 3logior*, and 3logxor* are usually preferred over the equivalent
forms of 3boole*, to avoid putting magic numbers in the program.
.end_defun

.defun bit-test x y
3bit-test* is a predicate which returns 3t* if any of
the bits designated by the 1's in 2x* are 1's in 2y*.
3bit-test* is implemented as a macro which expands as follows:
.lisp
(bit-test 2x* 2y*) ==> (not (zerop (logand 2x* 2y*)))
.end_lisp
.end_defun

.defun lsh x y
Returns 2x* shifted left 2y* bits if 2y* is positive or zero,
or 2x* shifted right 3|2y*|* bits if 2y* is negative.
Zero bits are shifted in (at either end) to fill unused positions.
2x* and 2y* must be fixnums.  (In some applications you may
find 3ash* useful for shifting bignums; see below.)
.lisp
.exdent 96 Examples:
(lsh 4 1) => 10    1;(octal)*
(lsh 14 -2) => 3
(lsh -1 1) => -2
.end_lisp
.end_defun

.defun ash x y
Shifts 2x* arithmetically left 2y* bits if 2y* is positive,
or right 2-y* bits if 2y* is negative.
Unused positions are filled by zeroes from the right, and
by copies of the sign bit from the left.  Thus, unlike 3lsh*,
the sign of the result is always the same as the sign of 2x*.
If 2x* is a fixnum or a bignum, this is a shifting operation.
If 2x* is a flonum, this does scaling (multiplication by a power of two),
rather than actually shifting any bits.
.end_defun

.defun rot x y
Returns 2x* rotated left 2y* bits if 2y* is positive or zero,
or 2x* rotated right 3|2y*|* bits if 2y* is negative.
The rotation considers 2x* as a 24-bit number (unlike Maclisp,
which considers 2x* to be a 36-bit number in both the pdp-10
and Multics implementations).
2x* and 2y* must be fixnums.  (There is no function for
rotating bignums.)
.lisp
.exdent 96 Examples:
(rot 1 2) => 4
(rot 1 -2) => 20000000
(rot -1 7) => -1
(rot 15 24.) => 15
.end_lisp
.end_defun

.defun haulong x
This returns the number of significant bits in 3|2x*|*.
2x* may be a fixnum or a bignum.  Its sign is ignored.
The result is the least integer strictly greater than the base-2
logarithm of 3|2x*|*.
.lisp
.exdent 96 Examples:
(haulong 0) => 0
(haulong 3) => 2
(haulong -7) => 3
.end_lisp
.end_defun

.defun haipart x n
Returns the high 2n* bits of the binary representation of 3|2x*|*,
or the low 3-2n** bits if 2n* is negative.
2x* may be a fixnum or a bignum; its sign is ignored.
3haipart* could have been defined by:
.lisp
(defun haipart (x n)
  (setq x (abs x))
  (if (minusp n)
      (logand x (1- (ash 1 (- n))))
      (ash x (min (- n (haulong x))
		  0))))
.end_lisp
.end_defun


@section "Byte Manipulation Functions"
.setq byte-manipulation-functions section-page
'cindex "byte"
Several functions are provided for dealing with an arbitrary-width field of
contiguous bits appearing anywhere in an integer (a fixnum or a bignum).
Such a contiguous set of bits is called a 2byte*.  Note that
we are not using the term 2byte* to mean eight bits, but rather
any number of bits within a number.
These functions use numbers called 2byte specifiers* to
'cindex "byte specifiers"
designate a specific byte position within any word.  Byte specifiers are fixnums
whose two lowest octal digits represent the 2size* of the
byte, and whose higher (usually two, but sometimes more)
octal digits represent the 2position*
of the byte within a number, counting from the right in bits.  A position
of zero means that the byte is at the right end of the number.
For example, the byte-specifier 0010 (i.e. 10 octal) refers to the lowest 
eight bits of a word, and the byte-specifier 1010 refers to the next eight
bits.  These byte-specifiers will be stylized below as 2ppss*.
'cindex "ppss"
The maximum value of the 2ss* digits is 27 (octal), since a byte must
fit in a fixnum although bytes can be loaded from and deposited into bignums.
(Bytes are always positive numbers.)
The format of byte-specifiers is taken from the pdp-10 byte instructions.

.defun ldb ppss num 
2ppss* specifies a byte of 2num* to be extracted.
The 2ss* bits of the byte starting at bit 2pp*
are the lowest 2ss* bits in the returned value, and the rest of the
bits in the returned value are zero.  The name of the function,
3ldb*, means "load byte".  2num* may be a fixnum or a bignum.
The returned value is always a fixnum.
.lisp
.exdent 96 Example:
(ldb 0306 4567) => 56
.end_lisp
.end_defun

.defun load-byte num position size
This is like 3ldb* except that instead of using a byte specifier,
the 2position* and 2size* are passed as separate arguments.
The argument order is not analogous to that of 3ldb* so that
3load-byte* can be compatible with Maclisp.
.end_defun

.defun ldb-test ppss y
3ldb-test* is a predicate which returns 3t* if any of
the bits designated by the byte specifier 2ppss* are 1's in 2y*.
That is, it returns 3t* if the designated field is non-zero.
3ldb-test* is implemented as a macro which expands as follows:
.lisp
(ldb-test 2ppss* 2y*) ==> (not (zerop (ldb 2ppss* 2y*)))
.end_lisp
.end_defun

.defun mask-field ppss num
This is similar to 3ldb*; however, the specified byte
of 2num* is returned as a number in position 2pp* of
the returned word, instead of position 0 as with 3ldb*.
2num* must be a fixnum.
.lisp
.exdent 96 Example:
(mask-field 0306 4567) => 560
.end_lisp
.end_defun

.defun dpb byte ppss num
Returns a number which is the same as 2num* except in the
bits specified by 2ppss*.  The low
2ss* bits of 2byte* are placed in those bits.  2byte* is interpreted as
being right-justified, as if it were the result of 3ldb*.
2num* may be a fixnum or a bignum.  The name means "deposit byte".
.lisp
.exdent 96 Example:
(dpb 23 0306 4567) => 4237
.end_lisp
.end_defun

.defun deposit-byte num position size byte
This is like 3dpb* except that instead of using a byte specifier,
the 2position* and 2size* are passed as separate arguments.
The argument order is not analogous to that of 3dpb* so that
3deposit-byte* can be compatible with Maclisp.
.end_defun

.defun deposit-field byte ppss num
This is like 3dpb*, except that 2byte* is not taken to
be left-justified; the 2ppss* bits of 2byte* are used
for the 2ppss* bits of the result, with the rest of the
bits taken from 2num*.  2num* must be a fixnum.
.lisp
.exdent 96 Example:
(deposit-field 230 0306 4567) => 4237
.end_lisp
.end_defun

The behavior of the following two functions depends on the size of
fixnums, and so functions using them may not work the same way
on future implementations of Zetalisp.  Their names start
with "%" because they are more like machine-level subprimitives
than the previous functions.

.defun %logldb ppss fixnum
3%logldb* is like 3ldb* except that it only loads out of fixnums and
allows a byte size of 30 (octal), i.e. all 24. bits of the fixnum
including the sign bit.
.end_defun

.defun %logdpb byte ppss fixnum
3%logdpb* is like 3dpb* except that it only deposits into fixnums.
Using this to change the sign-bit will leave the result as a fixnum,
while 3dpb* would produce a bignum result for arithmetic correctness.
3%logdpb* is good for manipulating fixnum bit-masks such as are used
in some internal system tables and data-structures.
.end_defun

@section "Random Numbers"

The functions in this section provide a pseudo-random number generator
facility.  The basic function you use is 3random*, which returns a new
pseudo-random number each time it is called.  Between calls, its state
is saved in a data object called a 2random-array*.  Usually there is
only one random-array; however, if you want to create a reproducible
series of pseudo-random numbers, and be able to reset the state to
control when the series starts over, then you need some of the other
functions here.

.defun random &optional arg random-array
3(random)* returns a random fixnum, positive or negative.  If 2arg*
is present, a fixnum between 0 and 2arg* minus 1 inclusive is
returned.  If 2random-array* is present, the given array is used
instead of the default one (see below).  Otherwise, the default
random-array is used (and is created if it doesn't already exist).
The algorithm is executed inside a 3without-interrupts*
(see (without-interrupts-fun)) so two processes can use the
same random-array without colliding.
.end_defun

A random-array consists of an array of numbers, and two pointers into
the array.  The pointers circulate around the array; each time a random
number is requested, both pointers are advanced by one, wrapping around
at the end of the array.  Thus, the distance forward from the first
pointer to the second pointer, allowing for wraparound, stays the same.
Let the length of the array be 2length* and the distance between the
pointers be 2offset*.  To generate a new random number, each pointer is set
to its old value plus one, modulo 2length*.  Then the two elements of the
array addressed by the pointers are added together; the sum is stored
back into the array at the location where the second pointer points, and
is returned as the random number after being normalized into the right
range.

This algorithm produces well-distributed random numbers if 2length*
and 2offset* are chosen carefully, so that the polynomial 2x^length+x^offset+1*
is irreducible over the mod-2 integers.  The system uses 71. and 35.

The contents of the array of numbers should be initialized to anything
moderately random, to make the algorithm work.  The contents get
initialized by a simple random number generator, based on a
number called the 2seed*.  The initial value of the seed is set when
the random-array is created, and it can be changed.  To have several
different controllable resettable sources of random numbers, you
can create your own random-arrays.  If you don't care about reproducibility
of sequences, just use 3random* without the 2random-array* argument.

.defun si:random-create-array length offset seed &optional (area 3nil*)
Creates, initializes, and returns a random-array.  2length* is the
length of the array.  2offset* is the distance between the pointers
and should be an integer less than 2length*.  2seed* is the initial
value of the seed, and should be a fixnum.  This calls
3si:random-initialize* on the random array before returning it.
.end_defun

.defun si:random-initialize array &optional new-seed
2array* must be a random-array, such as is created by
3si:random-create-array*.  If 2new-seed* is provided, it should be a
fixnum, and the seed is set to it.  3si:random-initialize* reinitializes the
contents of the array from the seed (calling 3random* changes the
contents of the array and the pointers, but not the seed).
.end_defun

@section "24-Bit Numbers"
Sometimes it is desirable to have a form of arithmetic which has no
overflow checking (which would produce bignums),
and truncates results to the word size of the machine.
In Zetalisp, this is provided by the following set of functions.
Their answers are only correct modulo 2^24.
	These functions should 2not* be used for "efficiency";
they are probably less efficient than the functions which 2do* check for
overflow.  They are intended for algorithms which require this sort of
arithmetic, such as hash functions and pseudo-random number generation.

.defun %24-bit-plus x y
Returns the sum of 2x* and 2y* modulo 2^24.  Both arguments must
be fixnums.
.end_defun

.defun %24-bit-difference x y
Returns the difference of 2x* and 2y* modulo 2^24.  Both arguments must
be fixnums.
.end_defun

.defun %24-bit-times x y
Returns the product of 2x* and 2y* modulo 2^24.  Both arguments must
be fixnums.
.end_defun

@section "Double-Precision Arithmetic"

These peculiar functions are useful in programs that don't want to use
bignums for one reason or another.  They should usually be avoided,
as they are difficult to use and understand, and they depend on special
numbers of bits and on the use of two's-complement notation.

.defun %multiply-fractions num1 num2
Returns bits 24 through 46 (the most significant half) of the product of
2num1* and 2num2*.  If you call this and 3%24-bit-times* on the
same arguments 2num1* and 2num2*, regarding them as integers, you
can combine the results into a double-precision product.  If 2num1*
and 2num2* are regarded as two's-complement fractions, 3-1 3*
2num* < 1*, 3%multiply-fractions* returns 1/2 of their correct
product as a fraction.  (The name of this function isn't too great.)
.end_defun

.defun %divide-double dividend[24:46] dividend[0:23] divisor
Divides the double-precision number given by the first two
arguments by the third argument, and returns the single-precision
quotient.  Causes an error if division by zero or if the quotient won't
fit in single precision.
.end_defun

.defun %remainder-double dividend[24:46] dividend[0:23] divisor
Divides the double-precision number given by the first two
arguments by the third argument, and returns the
remainder.  Causes an error if division by zero.
.end_defun

.defun %float-double high24 low24
2high24* and 2low24*, which must be fixnums, are concatenated
to produce a 48-bit unsigned positive integer.  A flonum containing the
same value is constructed and returned.  Note that only the 31 most-significant
bits are retained (after removal of leading zeroes.)  This function is
mainly for the benefit of 3read*.
.end_defun

@chapter "Arrays"
.setq array section-page
.setq array-chapter chapter-number
.cindex array

	An 2array* is a Lisp object that consists of a group of cells,
each of which may contain an object.  The individual cells are
selected by numerical 2subscripts*.
'cindex "subscript"

	The 2dimensionality* of an array (or, the number of dimensions
which the array has) is the number of subscripts used to
refer to one of the elements of the array.  The dimensionality
may be any integer from one to seven, inclusively.
@c How about zero?

	The lowest value for any subscript is zero; the highest value
is a property of the array.  Each dimension has a size, which is
the lowest number which is too great to be used as a subscript.
For example, in a one-dimensional array of five elements, the size
of the one and only dimension is five, and the acceptable
values of the subscript are zero, one, two, three, and four.

	The most basic primitive functions for handling arrays are:
3make-array*, which is used for the creation of arrays, 3aref*,
which is used for examining the
contents of arrays, and 3aset*, which
is used for storing into arrays.

	An array is a regular Lisp object, and it is common for an
array to be the binding of a symbol, or the car or cdr of a cons,
or, in fact, an element of an array.  There are many functions,
described in this chapter, which take arrays as arguments and
perform useful operations on them.

Another way of handling arrays, inherited from Maclisp, is to treat them
as functions.  In this case each array has a name, which is a symbol
whose function definition is the array.  Zetalisp supports this
style by allowing an array to be 2applied* to arguments, as if it were
a function.  The arguments are treated as subscripts and the array is
referenced appropriately.  The 3store* special form (see (store-fun))
is also supported.  This kind of array referencing is considered to be
obsolete, and is slower than the usual kind.  It should not be used in
new programs.

.setq array-type page
.cindex types of arrays
	There are many types of arrays.  Some types of arrays can hold
Lisp objects of any type; the other types of arrays can only hold
fixnums or flonums.  The array types are known by a set of symbols whose names
begin with "3art-*" (for ARray Type).

.vindex art-q
	The most commonly used type is called 3art-q*.  An 3art-q*
array simply holds Lisp objects of any type.

.vindex art-q-list
.setq art-q-list-var page
	Similar to the 3art-q* type is the 3art-q-list*.  Like the
3art-q*, its elements may be any Lisp object.  The difference is that
the 3art-q-list* array "doubles" as a list; the function 3g-l-p*
will take an 3art-q-list* array and return a list whose
elements are those of the array, and whose actual substance is that of
the array.  If you 3rplaca* elements of the list, the corresponding
element of the array will change, and if you store into the array, the
corresponding element of the list will change the same way.
An attempt to 3rplacd* the list will cause an error, since arrays
cannot implement that operation.

.vindex art-1b
.vindex art-2b
.vindex art-4b
.vindex art-8b
.vindex art-16b
	There is a set of types called 3art-1b, art-2b, art-4b, art-8b*, 
and 3art-16b*;
these names are short for "1 bit", "2 bits", and so on.  Each element
of an 3art-2n*b* array is a non-negative fixnum, and only the
least significant 2n* bits are remembered in the array; all of the others are discarded.  Thus 3art-1b* arrays store only 0 and 1, and
if you store a 5 into an 3art-2b* array and look at it
later, you will find a 1 rather than a 5.
	These arrays are used when it is known beforehand that the
fixnums which will be stored are non-negative and limited in size to a
certain number of bits.  Their advantage over the 3art-q* array is
that they occupy less storage, because more than one element of the
array is kept in a single machine word.  (For example, 32 elements
of an 3art-1b* array or 2 elements of an 3art-16b* array
will fit into one word).

.vindex art-32b
	There are also 3art-32b* arrays which have 32 bits per element.
Since fixnums only have 24 bits anyway, these are the same as 3art-q*
arrays except that they only hold fixnums.  They do not behave consistently
with the other "bit" array types, and generally they should not be used.

.vindex art-string
	Character strings are implemented by the 3art-string* array
type.  This type acts similarly to the 3art-8b*; its elements must be
fixnums, of which only the least significant eight bits are stored.
However, many important system functions, including 3read*,
3print*, and 3eval*, treat 3art-string* arrays very differently
from the other kinds of arrays.  These arrays are usually called
2string*s, and chapter (string-chapter) of this manual deals with functions
that manipulate them.

.vindex art-fat-string
	An 3art-fat-string* array is a character string with wider characters, containing
16 bits rather than 8 bits.  The extra bits are ignored by string operations,
such as comparison, on these strings; typically they are used to hold font
information.

.vindex art-half-fix
	An 3art-half-fix* array contains half-size fixnums.  Each element
of the array is a signed 16-bit integer; the range is from -32768 to 32767
inclusive.

.vindex art-float
	The 3art-float* array type is a special-purpose type whose
elements are flonums.  When storing into such an array the value (any
kind of number) will be converted to a flonum, using the 3float*
function (see (float-fun)).  The advantage of
storing flonums in an 3art-float* array rather than an 3art-q*
array is that the numbers in an 3art-float* array are not true Lisp
objects.  Instead the array remembers the numerical value, and when it
is 3aref*'ed creates a Lisp object (a flonum) to hold the value.
Because the system does special storage management for bignums and
flonums that are intermediate results, the use of 3art-float* arrays
can save a lot of work for the garbage-collector and hence greatly
increase performance.  An intermediate result is a Lisp object passed
as an argument, stored in a local variable, or returned as the value of
a function, but not stored into a global variable, a non-3art-float*
array, or list structure.  3art-float* arrays also provide a locality
of reference advantage over 3art-q* arrays containing flonums, since
the flonums are contained in the array rather than being separate objects
probably on different pages of memory.

.vindex art-fps-float
	The 3art-fps-float* array type is another special-purpose type
whose elements are flonums.  The internal format of this array is compatible
with the pdp11/VAX single-precision floating-point format.  The primary purpose
of this array type is to interface with the FPS array processor, which can
transfer data directly in and out of such an array.
	When storing into an 3art-fps-float* array any kind of number may
be stored.  It will be rounded off to the 24-bit precision of the pdp11.  If
the magnitude of the number is too large, the largest valid floating-point
number will be stored.  If the magnitude is too small, zero will be stored.
	When reading from an 3art-fps-float* array, a new flonum is created
containing the value, just as with an 3art-float* array.

.vindex art-stack-group-head
.vindex art-reg-pdl
.vindex art-special-pdl
	There are three types of arrays which exist only for the
implementation of 2stack groups*; these types are called
3art-stack-group-head, art-special-pdl*, and 3art-reg-pdl*.  Their elements
may be any Lisp object; their use is explained in the section on
stack groups (see (stack-group)).
'cindex "stack group"

.setq column-major section-page
Currently, multi-dimensional arrays are stored in column-major order
rather than row-major order as in Maclisp.   Row-major order means that
successive memory locations differ in the last subscript, while
column-major order means that successive memory locations differ in the
first subscript.  This has an effect on paging performance when using
large arrays; if you want to reference every element in a
multi-dimensional array and move linearly through memory to improve
locality of reference, you must vary the first subscript fastest rather
than the last.

.defvar array-types
The value of 3array-types* is a list of all of the array type symbols
such as 3art-q*, 3art-4b*, 3art-string* and so on.  The values
of these symbols are internal array type code numbers for the corresponding
type.
.end_defvar

.defun array-types array-type-code
Given an internal numeric array-type code, returns the symbolic name
of that type.
.end_defun

.defvar array-elements-per-q
3array-elements-per-q* is an association list (see (alist)) which
associates each array type symbol with the number of array elements
stored in one word, for an array of that type.  If the value is negative,
it is instead the number of words per array element, for arrays whose
elements are more than one word long.
.end_defvar

.defun array-elements-per-q array-type-code
Given the internal array-type code number, returns the number of array
elements stored in one word, for an array of that type.  If the value
is negative, it is instead the number of words per array element, for
arrays whose elements are more than one word long.
.end_defun

.defvar array-bits-per-element
The value of 3array-bits-per-element* is an association list (see (alist))
which associates each array type symbol with the number of
bits of unsigned number it can hold, or 3nil* if it can
hold Lisp objects.  This can be used to tell whether an array
can hold Lisp objects or not.
.end_defvar

.defun array-bits-per-element array-type-code
Given the internal array-type code numbers, returns the number of bits
per cell for unsigned numeric arrays, or 3nil* for a type of array
that can contain Lisp objects.
.end_defun

.defun array-element-size array
Given an array, returns the number of bits that fit in an element of
that array.  For arrays that can hold general Lisp objects, the result is
24., assuming you will be storing unsigned fixnums in the array.
.end_defun

@section "Extra Features of Arrays"
'cindex "array leader"
	Any array may have an 2array leader*.  An array leader is
like a one-dimensional 3art-q* array which is attached to the main
array.  So an array which has a leader acts like two arrays joined
together.  The leader can be stored into and examined by a special set
of functions, different from those used for the main array:
3array-leader* and 3store-array-leader*.  The leader is always
one-dimensional, and always can hold any kind of Lisp object,
regardless of the type or dimensionality of the main part of the array.

Very often the main part of an array will be a homogeneous set of objects,
while the leader will be used to remember a few associated non-homogeneous pieces of data.
In this case the leader is not used like an array; each slot is used
differently from the others.  Explicit numeric subscripts should not be
used for the leader elements of such an array; instead the leader should be described
by a 3defstruct* (see (defstruct-fun)).

	By convention, element 0 of the array leader of
an array is used to hold the number of elements in the array
that are "active" in some sense.  When the zeroth element is used
this way, it is called a 2fill pointer*.
'cindex "fill pointer"
'setq fill-pointer page
Many array-processing functions recognize the fill pointer.
For instance, if a string (an array of type 3art-string*) has
seven elements, but its fill pointer contains the value five, then only elements
zero through four of the string are considered to be "active"; the string's
printed representation will be five characters long, string-searching
functions will stop after the fifth element, etc.

	The system does not provide a way to turn off the fill-pointer
convention; any array that has a leader must reserve element 0 for the
fill pointer or avoid using many of the array functions.

	Leader element 1 is used in conjunction with the "named
structure" feature to associate a "data type" with the array; see
(named-structure).  Element 1 is only treated specially if the array
is flagged as a named structure.

'cindex "displaced array"
	The following explanation of 2displaced arrays*
is probably not of interest to a beginner; the section may
be passed over without losing the continuity of the manual.

	Normally, an array is represented as a small amount of header
information, followed by the contents of the array.  However, sometimes
it is desirable to have the header information removed from the actual
contents.  One such occasion is when the contents of the array must be
located in a special part of the Lisp Machine's address space, such as
the area used for the control of input/output devices, or the bitmap
memory which generates the TV image.  Displaced arrays are also used to
reference certain special system tables, which are at fixed addresses
so the microcode can access them easily.

	If you give 3make-array* a fixnum or a locative
as the value of the 3:displaced-to* option,
it will create a displaced array referring to that location of virtual memory
and its successors.
References to elements of the displaced array will access that part
of storage, and return the contents; the regular 3aref* and
3aset* functions are used.  If the array is one whose elements
are Lisp objects, caution should be used: if the region of address
space does not contain typed Lisp objects, the integrity of the storage
system and the garbage collector could be damaged.  If the array is one
whose elements are bytes (such as an 3art-4b* type), then there
is no problem.  It is important to know, in this case, that the elements
of such arrays are allocated from the right to the left within the 32-bit
words.

'cindex "indirect array"
.setq indirect-array page
	It is also possible to have an array whose contents, instead
of being located at a fixed place in virtual memory, are defined
to be those of another array.  Such an array is called an 2indirect array*,
and is created by giving 3make-array* an array as
the value of the 3:displaced-to* option.
The effects of this are simple if both arrays have the same type; the two
arrays share all elements.  An object stored in a certain element
of one can be retrieved from the corresponding element of the other.
This, by itself, is not very useful.  However, if the arrays have
different dimensionality, the manner of accessing the elements differs.
Thus, by creating a one-dimensional array of nine elements which was
indirected to a second, two-dimensional array of three elements by three,
then the elements could be accessed in either a one-dimensional or
a two-dimensional manner.  Weird effects can be produced if
the new array is of a different type than the old array; this is not
generally recommended.  Indirecting an 3art-2m*b* array to
an 3art-2n*b* array will do the "obvious" thing.  For instance,
if 2m* is 4 and 2n* is 1, each element of the first array
will contain four bits from the second array, in right-to-left order.

.cindex "index offset"
.setq index-offset page
	It is also possible to create an indirect array in such a way
that when an attempt is made to reference it or store into it, a
constant number is added to the subscript given.  This number is called
the 2index-offset*, and is specified at the time the indirect array
is created, by giving a fixnum to 3make-array*
as the value of the 3:displaced-index-offset* option.
Similarly, the length of the indirect array need not be the full length of
the array it indirects to; it can be smaller.
The 3nsubstring* function (see (nsubstring-fun)) creates such
arrays.  When using index offsets with multi-dimensional arrays, there
is only one index offset; it is added in to the "linearized" subscript
which is the result of multiplying each subscript by an appropriate
coefficient and adding them together.

@section "Basic Array Functions"

.defun make-array dimensions &rest options.
This is the primitive function for making arrays.  2dimensions*
should be a list of fixnums which are the dimensions of the array; the
length of the list will be the dimensionality of the array.  For
convenience when making a one-dimensional array, the single dimension
may be provided as a fixnum rather than a list of one fixnum.

2options* are alternating keywords and values.  The keywords may be
any of the following:
.table 3
.kitem :area
The value specifies in which area (see (area)) the list should be created.
It should be either an area number (a fixnum), or 3nil* to mean the
default area.

.kitem :type
The value should be a symbolic name of an array type; the most
common of these is 3art-q*, which is the default.  The elements of the array are
initialized according to the type:  if the array is of a type whose
elements may only be fixnums or flonums, then every element of the array will
initially be 30* or 30.0*; otherwise, every element will initially be
3nil*.  See the description of array types on (array-type).
The value of the option may also be the value of a symbol which is an array type name
(that is, an internal numeric array type code).
'cindex "array initialization"

.kitem :displaced-to
If this is not 3nil*, then the array will be a 2displaced* array.
If the value is a fixnum or a locative, 3make-array* will create a
regular displaced array which refers to the specified section of virtual
address space.
If the value is an array, 3make-array* will create
an indirect array (see (indirect-array)).
'cindex "displaced array"
'cindex "indirect array"

.kitem :leader-length
The value should be a fixnum.  The array will have a leader with that
many elements.  The elements of the leader will be initialized to 3nil*
unless the 3:leader-list* option is given (see below).

.kitem :leader-list
The value should be a list.  Call the number of elements in the list 2n*.
The first 2n* elements of the leader will be initialized from successive
elements of this list.  If the 3:leader-length* option is not specified,
then the length of the leader will be 2n*.  If the 3:leader-length*
option is given, and its value is greater than 2n*, then the 2n*th
and following leader elements will be initialized to 3nil*.  If its value
is less than 2n*, an error is signalled.  The leader elements are
filled in forward order; that is, the 3car* of the list will be stored
in leader element 30*, the 3cadr* in element 31*, and so on.

.kitem :displaced-index-offset
If this is present, the value of the 3:displaced-to* option should be an
array, and the value should be a non-negative fixnum; it is made to be the
index-offset of the created indirect array. (See (index-offset).)
'cindex "index offset"

.kitem :named-structure-symbol
If this is not 3nil*, it is a symbol to
be stored in the named-structure cell of the array.  The array
will be tagged as a named structure (see (named-structure).)  If
the array has a leader, then this symbol will be stored in leader element
31* regardless of the value of the 3:leader-list* option.  If the array
does not have a leader, then this symbol will be stored in array element zero.
.end_table

.lisp
.exdent 96 Examples:
1;; Create a one-dimensional array of five elements.*
(make-array 5)
1;; Create a two-dimensional array,*
1;; three by four, with four-bit elements.*
(make-array '(3 4) ':type 'art-4b)
1;; Create an array with a three-element leader.*
(make-array 5 ':leader-length 3)
1;; Create an array with a leader, providing*
1;; initial values for the leader elements.*
(setq a (make-array 100 ':type 'art-1b
			':leader-list '(t nil)))
(array-leader a 0) => t
(array-leader a 1) => nil
.end_lisp
.lisp
1;; Create a named-structure with five leader*
1;; elements, initializing some of them.*
(setq b (make-array 20 ':leader-length 5 
		       ':leader-list '(0 nil foo)
		       ':named-structure-symbol 'bar))
(array-leader b 0) => 0
(array-leader b 1) => bar
(array-leader b 2) => foo
(array-leader b 3) => nil
(array-leader b 4) => nil
'cindex "array leader"
.end_lisp

	3make-array* returns the newly-created array, and also
returns, as a second value, the number of words allocated in the process
of creating the array, i.e. the 3%structure-total-size* of the array.

When 3make-array* was originally implemented, it took its arguments
in the following fixed pattern:
.lisp
   (make-array 2area* 2type* 2dimensions*
               &optional 2displaced-to* 2leader*
			 2displaced-index-offset*
			 2named-structure-symbol*)
.end_lisp
2leader* was a combination of the 3:leader-length* and 3:leader-list*
options, and the list was in reverse order.
This obsolete form is still supported so that old programs will continue
to work, but the new keyword-argument form is preferred.
.end_defun

.defun aref array &rest subscripts
Returns the element of 2array* selected by the 2subscripts*.
The 2subscripts* must be fixnums and their number must match the
dimensionality of 2array*.
.end_defun

.defun ar-1 array i
.defun1 ar-2 array i j
.defun1 ar-3 array i j k
These are obsolete versions of 3aref* that only work for one, two, or three
dimensional arrays, respectively.  There is no reason ever to use them.
.end_defun

.defun aset x array &rest subscripts
Stores 2x* into the element of 2array* selected by the 2subscripts*.
The 2subscripts* must be fixnums and their number must match the
dimensionality of 2array*.  The returned value is 2x*.
.end_defun

.defun as-1 x array i
.defun1 as-2 x array i j
.defun1 as-3 x array i j k
These are obsolete versions of 3aset* that only work for one, two, or three
dimensional arrays, respectively.  There is no reason ever to use them.
.end_defun

.defun aloc array &rest subscripts
Returns a locative pointer to the element-cell of 2array* selected by
the 2subscripts*.  The 2subscripts* must be fixnums and their
number must match the dimensionality of 2array*.
See the explanation of locatives in (locative).
.end_defun

.defun ap-1 array i
.defun1 ap-2 array i j
.defun1 ap-3 array i j k
These are obsolete versions of 3aloc* that only work for one, two, or three
dimensional arrays, respectively.  There is no reason ever to use them.
.end_defun

The compiler turns 3aref* into 3ar-1*, 3ar-2*, etc. according
to the number of subscripts specified, turns 3aset* into 3as-1*,
3as-2*, etc., and turns 3aloc* into 3ap-1*, 3ap-2*, etc.
For arrays with more than 3 dimensions the compiler uses the slightly less
efficient form since the special routines only exist for 1, 2, and 3 dimensions.
There is no reason for any program to call 3ar-1*, 3as-1*, 3ar-2*, etc.
explicitly; they are documented because there used to be such a reason, and
many old programs use these functions.  New programs should use 3aref*,
3aset*, and 3aloc*.

A related function, provided only for Maclisp compatibility, is
3arraycall* ((arraycall-fun)).


.defun array-leader array i
2array* should be an array with a leader, and 2i* should be a
fixnum.  This returns the 2i*'th element of 2array*'s leader.
This is analogous to 3aref*.
.end_defun

.defun store-array-leader x array i
2array* should be an array with a leader, and 2i* should be a
fixnum.  2x* may be any object.  2x* is stored in the 2i*'th element
of 2array*'s leader.  3store-array-leader* returns 2x*.
This is analogous to 3aset*.
.end_defun

.defun ap-leader array i
2array* should be an array with a leader, and 2i* should be a
fixnum.  This returns a locative pointer to the 2i*'th element of
2array*'s leader.  See the explanation of locatives, (locative).
This is analogous to 3aloc*.
.end_defun


@section Getting Information About an Array

.defun array-type array
Returns the symbolic type of 2array*.
.lisp
.exdent 96 Example:
(setq a (make-array '(3 5)))
(array-type a) => art-q
.end_lisp
.end_defun

.defun array-length array
2array* may be any array.  This returns the total number
of elements in 2array*.  For a one-dimensional array,
this is one greater than the maximum allowable subscript.
(But if fill pointers are being used, you may want to use
3array-active-length*.)
.lisp
.exdent 96 Example:
(array-length (make-array 3)) => 3
(array-length (make-array '(3 5)))
		=> 17  1;octal, which is 15. decimal*
.end_lisp
.end_defun

.defun array-active-length array
If 2array* does not have a fill pointer, then this returns whatever
3(array-length 2array*)* would have.  If 2array* does have a
fill pointer, 3array-active-length* returns it.  See the general
explanation of the use of fill pointers, on (fill-pointer).
.end_defun

.defun array-#-dims array
Returns the dimensionality of 2array*.  Note that the name of the
function includes a "#", which must be slashified if you want to be
able to read your program in Maclisp.  (It doesn't need to be slashified
for the Zetalisp reader, which is smarter.)
.lisp
.exdent 96 Example:
(array-#-dims (make-array '(3 5))) => 2
.end_lisp
.end_defun

.defun array-dimension-n n array
2array* may be any kind of array, and 2n* should be a fixnum.
If 2n* is between 1 and the dimensionality of 2array*,
this returns the 2n*'th dimension of 2array*.  If 2n* is 30*,
this returns the length of the leader of 2array*; if 2array* has no
leader it returns 3nil*.  If 2n* is any other value, this
returns 3nil*.
.lisp
.exdent 96 Examples:
(setq a (make-array '(3 5) ':leader-length 7))
(array-dimension-n 1 a) => 3
(array-dimension-n 2 a) => 5
(array-dimension-n 3 a) => nil
(array-dimension-n 0 a) => 7
.end_lisp
.end_defun

.defun array-dimensions array
3array-dimensions* returns a list whose elements are the dimensions
of 2array*.
.lisp
.exdent 96 Example:
(setq a (make-array '(3 5)))
(array-dimensions a) => (3 5)
.end_lisp
Note: the list returned by 3(array-dimensions 2x*)* is
equal to the cdr of the list returned by 3(arraydims 2x*)*.
.end_defun

.defun arraydims array
2array* may be any array; it also may be a symbol whose
function cell contains an array, for Maclisp compatibility (see (maclisp-array)).
3arraydims* returns a list whose first element is the symbolic name of
the type of 2array*, and whose remaining elements are its dimensions.
.lisp
.exdent 96 Example:
(setq a (make-array '(3 5)))
(arraydims a) => (art-q 3 5)
.end_lisp
.end_defun

.defun array-in-bounds-p array &rest subscripts
This function checks whether 2subscripts* is a legal
set of subscripts for 2array*, and returns 3t* if they
are; otherwise it returns 3nil*.
.end_defun

.defun array-displaced-p array
2array* may be any kind of array.
This predicate returns 3t* if 2array* is any kind of displaced array
(including an indirect array).  Otherwise it returns 3nil*.
.end_defun

.defun array-indirect-p array
2array* may be any kind of array.
This predicate returns 3t* if 2array* is an indirect array.
Otherwise it returns 3nil*.
.end_defun

.defun array-indexed-p array
2array* may be any kind of array.
This predicate returns 3t* if 2array* is an indirect array with an index-offset.
Otherwise it returns 3nil*.
.end_defun

.defun array-has-leader-p array
2array* may be any array.  This predicate returns 3t* if 2array*
has a leader; otherwise it returns 3nil*.
.end_defun

.defun array-leader-length array
2array* may be any array.  This returns the length of 2array*'s leader
if it has one, or 3nil* if it does not.
.end_defun


@section Changing the Size of an Array

.defun adjust-array-size array new-size
If 2array* is a one-dimensional array, its size is
changed to be 2new-size*.  If 2array* has more than one
dimension, its size (3array-length*) is changed to 2new-size*
by changing only the last dimension.

If 2array* is made smaller, the extra elements are lost; if 2array*
is made bigger, the new elements are initialized in the same fashion as
3make-array* (see (make-array-fun)) would initialize them: either to 3nil* or 30*,
depending on the type of array.
.lisp
.exdent 96 Example:
(setq a (make-array 5))
(aset 'foo a 4)
(aref a 4) => foo
(adjust-array-size a 2)
(aref a 4) => 1an error occurs*
.end_lisp
	If the size of the array is being increased,
3adjust-array-size* may have to allocate a new array somewhere.  In
that case, it alters 2array* so that references to it will be made to
the new array instead, by means of "invisible pointers" (see
3structure-forward*, (structure-forward-fun)).
3adjust-array-size* will return this new array if it creates one, and
otherwise it will return 2array*.  Be careful to be consistent about
using the returned result of 3adjust-array-size*, because you may end
up holding two arrays which are not the same (i.e. not 3eq*), but
which share the same contents.
.end_defun

.defun array-grow array &rest dimensions
3array-grow* creates a new array of the same type as 2array*,
with the specified dimensions.  Those elements of 2array* that
are still in bounds are copied into the new array.  The elements of
the new array that are not in the bounds of 2array* are initialized
to 3nil* or 30* as appropriate.  If 2array* has a leader, the new
array will have a copy of it.  3array-grow* returns the new array
and also forwards 2array* to it, like 3adjust-array-size*.

Unlike 3adjust-array-size*, 3array-grow* always creates a new array
rather than growing or shrinking the array in place.  But 3array-grow*
of a multi-dimensional array can change all the subscripts and move
the elements around in memory to keep each element at the same logical
place in the array.
.end_defun

.defun return-array array
This peculiar function attempts to return 2array* to free storage.
If it is displaced, this returns the displaced array itself, not the
data that the array points to.  Currently 3return-array* does nothing if the array is
not at the end of its region, i.e. if it was not the most recently allocated
non-list object in its area.  This will eventually be renamed to
3reclaim*, when it works for other objects than arrays.

If you still have any references to 2array* anywhere in the Lisp world
after this function returns, the garbage collector can get a fatal error
if it sees them.  Since the form that calls this function must get the
array from somewhere, it may not be clear how to legally call 3return-array*.
One of the only ways to do it is as follows:
.lisp
(defun func ()
   (let ((array (make-array 100)))
      ...
      (return-array (prog1 array (setq array nil)))))
.end_lisp
so that the variable 3array* does not refer to the array when 3return-array*
is called.  You should only call this function if you know what you are doing;
otherwise the garbage collector can get fatal errors.  Be careful.
.end_defun

@section Arrays Overlaid With Lists

These functions manipulate 3art-q-list* arrays, which were
introduced on (art-q-list-var).

.defun g-l-p array
@c This will probably be renamed, if anyone can think of a better name
2array* should be an 3art-q-list* array.  This returns
a list which shares the storage of 2array*.
.lisp
.exdent 96 Example:
(setq a (make-array 4 ':type 'art-q-list))
(aref a 0) => nil
(setq b (g-l-p a)) => (nil nil nil nil)
(rplaca b t)
b => (t nil nil nil)
(aref a 0) => t
(aset 30 a 2)
b => (t nil 30 nil)
.end_lisp
.end_defun

.nopara
The following two functions work strangely, in the same way that 3store*
does, and should not be used in new programs.

.defun get-list-pointer-into-array array-ref
@c This will probably be renamed, if anyone can think of a better name
The argument 2array-ref* is ignored, but should be a reference
to an 3art-q-list* array by applying the array to subscripts (rather
than by 3aref*).  This returns a list object which
is a portion of the "list" of the array, beginning with the last
element of the last array which has been called as a function.
.end_defun

.defun get-locative-pointer-into-array array-ref
@c This will probably be flushed?
3get-locative-pointer-into-array* is
similar to 3get-list-pointer-into-array*, except that it returns a
locative, and doesn't require the array to be 3art-q-list*.
Use 3aloc* instead of this function in new programs.
.end_defun

@section Adding to the End of an Array

.defun array-push array x
2array* must be a one-dimensional array which has a fill pointer, and 2x* may
be any object.  3array-push* attempts to store 2x* in the element
of the array designated by the fill pointer, and increase the fill pointer
by one.  If the fill pointer does not designate an element of the array (specifically,
when it gets too big), it is unaffected and 3array-push* returns 3nil*;
otherwise, the two actions (storing and incrementing) happen uninterruptibly,
and 3array-push* returns the 2former* value of the fill pointer,
i.e. the array index in which it stored 2x*.  If the array is of type
3art-q-list*, an operation similar to 3nconc* has taken place,
in that the element has been added to the list by changing the cdr of
the formerly last element.  The cdr coding is updated to ensure this.
.end_defun

.defun array-push-extend array x &optional extension
3array-push-extend* is just like 3array-push* except
that if the fill pointer gets too large, the array is grown
to fit the new element; i.e. it never "fails" the way 3array-push* does,
and so never returns 3nil*.  2extension* is the number of
elements to be added to the array if it needs to be grown.  It defaults
to something reasonable, based on the size of the array.
.end_defun

.defun array-pop array
2array* must be a one-dimensional array which has a fill pointer.
The fill pointer is decreased by one, and the array element
designated by the new value of the fill pointer is returned.
If the new value does not designate any element of the array
(specifically, if it had already reached zero), an error is caused.
The two operations (decrementing and array referencing) happen
uninterruptibly.  If the array is of type 3art-q-list*, an operation
similar to 3nbutlast* has taken place.  The cdr coding is
updated to ensure this.
.end_defun


@section Copying an Array

.defun fillarray array x
	2array* may be any type of array, or, for Maclisp
compatibility, a symbol whose function cell contains an array.  There
are two forms of this function, depending on the type of 2x*. 
	If 2x* is a list, then 3fillarray* fills up 2array* with
the elements of 2list*.  If 2x* is too short to fill up all of
2array*, then the last element of 2x* is used to fill the
remaining elements of 2array*.  If 2x* is too long, the extra
elements are ignored.  If 2x* is 3nil* (the empty list), 2array*
is filled with the default initial value for its array type (3nil* or 30*).
	If 2x* is an array (or, for Maclisp compatibility, a symbol
whose function cell contains an array), then the elements of 2array* are
filled up from the elements of 2x*.  If 2x* is too small, then
the extra elements of 2array* are not affected.
	If 2array* is multi-dimensional, the elements are accessed
in row-major order: the last subscript varies the most quickly.
The same is true of 2x* if it is an array.
	3fillarray* returns 2array*.
.end_defun

.defun listarray array &optional limit
	2array* may be any type of array, or, for Maclisp
compatibility, a symbol whose function cell contains an array.  
3listarray* creates and returns a list whose elements are those of
2array*.  If 2limit* is present, it should be a fixnum, and only
the first 2limit* (if there are more than that many) elements of
2array* are used, and so the maximum length of the returned list is
2limit*. 
	If 2array* is multi-dimensional, the elements are accessed
in row-major order: the last subscript varies the most quickly.
.end_defun

.defun list-array-leader array &optional limit
2array* may be any type of array, or, for Maclisp
compatibility, a symbol whose function cell contains an array.  
3list-array-leader* creates and returns a list whose elements are those of
2array*'s leader.  If 2limit* is present, it should be a fixnum, and only
the first 2limit* (if there are more than that many) elements of
2array*'s leader are used, and so the maximum length of the returned list is
2limit*. If 2array* has no leader, 3nil* is returned.
.end_defun

.defun copy-array-contents from to
2from* and 2to* must be arrays.  The contents of 2from*
is copied into the contents of 2to*, element by element.
If 2to* is shorter than 2from*,
the rest of 2from* is ignored.  If 2from* is shorter than
2to*, the rest of 2to* is filled with 3nil* if it
is a q-type array, or 0 if it is a numeric array or a string,
or 0.0 if it is a flonum array.
This function always returns 3t*.

Note that even if 2from* or 2to* has a leader, the whole array
is used; the convention that leader element 0 is the "active" length
of the array is not used by this function.  The leader itself is not
copied.

3copy-array-contents* works on multi-dimensional arrays.  2from*
and 2to* are "linearized" subscripts, and column-major order is used,
2i.e. the first subscript varies fastest (opposite from 3fillarray*).*
.end_defun

.defun copy-array-contents-and-leader from to
This is just like 3copy-array-contents*, but the leader of 2from*
(if any) is also copied into 2to*.  3copy-array-contents* copies only
the main part of the array.
.end_defun

.defun copy-array-portion from-array from-start from-end to-array to-start to-end
The portion of the array 2from-array* with indices greater than or
equal to 2from-start* and less than 2from-end* is copied into
the portion of the array 2to-array* with indices greater than or
equal to 2to-start* and less than 2to-end*, element by element.
If there are more elements in the selected portion of 2to-array*
than in the selected portion of 2from-array*, the extra elements
are filled with the default value as by 3copy-array-contents*.
If there are more elements in the selected portion of 2from-array*,
the extra ones are ignored.  Multi-dimensional arrays are treated
the same way as 3copy-array-contents* treats them.
This function always returns 3t*.
.end_defun

.defun bitblt alu width height from-array from-x from-y to-array to-x to-y
2from-array* and 2to-array* must be two-dimensional arrays
of bits or bytes (3art-1b*, 3art-2b*, 3art-4b*, 3art-8b*,
3art-16b*, or 3art-32b*).  3bitblt* copies a rectangular portion of 2from-array*
into a rectangular portion of 2to-array*.  The value stored
can be a Boolean function of the new value and the value already there,
under the control of 2alu* (see below).  This function is most commonly used
in connection with raster images for TV displays.

The top-left corner of the source rectangle is 3(aref 2from-array*
2from-x* 2from-y*)*.  The top-left corner of the destination
rectangle is 3(aref 2to-array* 2to-x* 2to-y*)*.  2width*
and 2height* are the dimensions of both rectangles.  If 2width*
or 2height* is zero, 3bitblt* does nothing.

2from-array* and 2to-array* are allowed to be the same array.
3bitblt* normally traverses the arrays in increasing order of 2x*
and 2y* subscripts.  If 2width* is negative, then 3(abs 2width*)*
is used as the width, but the processing of the 2x* direction is done
backwards, starting with the highest value of 2x* and working down.
If 2height* is negative it is treated analogously.  When
3bitblt*'ing an array to itself, when the two rectangles overlap, it
may be necessary to work backwards to achieve the desired effect, such
as shifting the entire array upwards by a certain number of rows.  Note
that negativity of 2width* or 2height* does not affect the
2(x,y)* coordinates specified by the arguments, which are still the
top-left corner even if 3bitblt* starts at some other corner.

If the two arrays are of different types, 3bitblt* works bit-wise
and not element-wise.  That is, if you 3bitblt* from an 3art-2b*
array into an 3art-4b* array, then two elements of the 2from-array*
will correspond to one element of the 2to-array*.

If 3bitblt* goes outside the bounds of the source array, it wraps
around.  This allows such operations as the replication of a small
stipple pattern through a large array.  If 3bitblt* goes outside
the bounds of the destination array, it signals an error.

If 2src* is an element of the source rectangle, and 2dst*
is the corresponding element of the destination rectangle, then
3bitblt* changes the value of 2dst* to
3(boole 2alu* 2src* 2dst*)*.  See the 3boole*
function ((boole-fun)).  There are symbolic names for some of the
most useful 2alu* functions; they are 3tv:alu-seta* (plain
copy), 3tv:alu-ior* (inclusive or), 3tv:alu-xor* (exclusive
or), and 3tv:alu-andca* (and with complement of source).

3bitblt* is written in highly-optimized microcode and goes very much
faster than the same thing written with ordinary 3aref* and 3aset*
operations would.  Unfortunately this causes 3bitblt* to have a couple
of strange restrictions.  Wrap-around does not work correctly if
2from-array* is an indirect array with an index-offset.  3bitblt*
will signal an error if the first dimensions of 2from-array*
and 2to-array* are not both integral multiples of the machine word
length.  For 3art-1b* arrays, the first dimension must be a multiple
of 32., for 3art-2b* arrays it must be a multiple of 16., etc.
.end_defun


@section Matrices and Systems of Linear Equations

The functions in this section perform some useful matrix operations.
The matrices are represented as two-dimensional Lisp arrays.
These functions are part of the mathematics package rather than
the kernel array system, hence the "3math:*" in the names.

.defun math:multiply-matrices matrix-1 matrix-2 &optional matrix-3
Multiplies 2matrix-1* by 2matrix-2*.  If 2matrix-3* is supplied,
3multiply-matrices* stores the results into 2matrix-3* and returns
2matrix-3*; otherwise it creates an array to contain the answer and
returns that.  All matrices must be two-dimensional arrays, and the first
dimension of 2matrix-2* must equal the second dimension of 2matrix-1*.
.end_defun

.defun math:invert-matrix matrix &optional into-matrix
Computes the inverse of 2matrix*.  If 2into-matrix* is supplied,
stores the result into it and returns it; otherwise it creates an array
to hold the result, and returns that.  2matrix* must be two-dimensional
and square.  The Gauss-Jordan algorithm with partial pivoting is used.
Note: if you want to solve a set of simultaneous equations, you should
not use this function; use 3math:decompose* and 3math:solve* (see below).
.end_defun

.defun math:transpose-matrix matrix &optional into-matrix
Transposes 2matrix*.  If 2into-matrix* is supplied, stores the
result into it and returns it; otherwise it creates an array to hold the
result, and returns that.  2matrix* must be a two-dimensional array.
2into-matrix*, if provided, must be two-dimensional and have sufficient
dimensions to hold the transpose of 2matrix*.
.end_defun

.defun math:determinant matrix
Returns the determinant of 2matrix*.  2matrix* must be a two-dimensional
square matrix.
.end_defun

The next two functions are used to solve sets of simultaneous linear
equations.  3math:decompose* takes a matrix holding the coefficients of the
equations and produces the LU decomposition; this decomposition can then
be passed to 3math:solve* along with a vector of right-hand sides
to get the values of the variables.  If you want to solve the same
equations for many different sets of right-hand side values, you only need to call
3math:decompose* once.  In terms of the argument names used below, these
two functions exist to solve the vector equation 2A* 2x* = 2b*
for 2x*.  2A* is a matrix.  2b* and 2x* are vectors.

.defun math:decompose a &optional lu ps
Computes the LU decomposition of matrix 2a*.  If 2lu* is non-3nil*,
stores the result into it and returns it; otherwise it creates an array
to hold the result, and returns that.  The lower triangle of 2lu*, with
ones added along the diagonal, is L, and the upper triangle of 2lu* is
U, such that the product of L and U is 2a*.  Gaussian elimination with
partial pivoting is used.  The 2lu* array is permuted by rows according
to the permutation array 2ps*, which is also produced by this function;
if the argument 2ps* is supplied, the permutation array is stored into it;
otherwise, an array is created to hold it.  This function returns two values:
the LU decomposition and the permutation array.
.end_defun

.defun math:solve lu ps b &optional x
This function takes the LU decomposition and associated permutation
array produced by 3math:decompose*, and solves the set of simultaneous
equations defined by the original matrix 2a* and the right-hand sides
in the vector 2b*.  If 2x* is supplied, the solutions
are stored into it and it is returned; otherwise, an array is
created to hold the solutions and that is returned.  2b* must
be a one-dimensional array.
.end_defun

.defun math:list-2d-array array
Returns a list of lists containing the values in 2array*, which must
be a two-dimensional array.  There is one element for each row; each
element is a list of the values in that row.
.end_defun

.defun math:fill-2d-array array list
This is the opposite of 3math:list-2d-array*.  2list* should be a
list of lists, with each element being a list corresponding to a row.
2array*'s elements are stored from the list.  Unlike 3fillarray*
(see (fillarray-fun)), if 2list* is not long enough,
3math:fill-2d-array* "wraps around", starting over at the beginning.
The lists which are elements of 2list* also work this way.
.end_defun

@section Planes
.cindex plane

A 2plane* is an array whose bounds, in each dimension,
are plus-infinity and minus-infinity; all integers are legal as indices.
Planes are distinguished not by size and shape, but by number of dimensions alone.
When a plane is created, a default value must be specified.
At that moment, every component of the plane has that value.
As you can't ever change more than a finite number of components,
only a finite region of the plane need actually be stored.

The regular array accessing functions don't work on planes.
You can use 3make-plane* to create a plane,
3plane-aref* or 3plane-ref* to get the value of a component, and
3plane-aset* or 3plane-store* to store into a component.
3array-#-dims* will work on a plane.

A plane is actually stored as an array with a leader.
The array corresponds to a rectangular, aligned region of the plane,
containing all the components in which a 3plane-store* has been done
(and others, in general, which have never been altered).
The lowest-coordinate corner of that rectangular region is
given by the 3plane-origin* in the array leader.
The highest coordinate corner can be found by adding the 3plane-origin*
to the 3array-dimensions* of the array.
The 3plane-default* is the contents of all the
elements of the plane which are not actually stored in the array.
The 3plane-extension* is the amount to extend a plane by in any direction
when the plane needs to be extended.  The default is 32.

If you never use any negative indices, then the 3plane-origin* will
be all zeroes and you can use regular array functions, such as 3aref* and 3aset*,
to access the portion of the plane which is actually stored.  This can be
useful to speed up certain algorithms.  In this case you can even use the
3bitblt* function on a two-dimensional plane of bits or bytes,
provided you don't change the 3plane-extension* to a number that is not
a multiple of 32.

.defun make-plane rank &rest options
Creates and returns a plane. 2rank* is the number of dimensions.  2options*
is a list of alternating keyword symbols and values.  The allowed keywords are:
.table 3
.kitem :type
The array type symbol (e.g. 3art-1b*) specifying the type of the array
out of which the plane is made.
.kitem :default-value
The default component value as explained above.
.kitem :extension
The amount by which to extend the plane, as explained above.
.end_table
Example:
.lisp
(make-plane 2 ':type 'art-4b ':default-value 3)
.end_lisp
creates a two-dimensional plane of type 3art-4b*, with default value 33*.
.end_defun

.defun plane-origin plane
A list of numbers, giving the lowest coordinate values actually stored.
.end_defun

.defun plane-default plane
This is the contents of the infinite number of plane elements which are
not actually stored.
.end_defun

.defun plane-extension plane
The amount to extend the plane by in any direction when 3plane-store* is done
outside of the currently-stored portion.
.end_defun

.defun plane-aref plane &rest subscripts
.defun1 plane-ref plane subscripts
These two functions return the contents of a specified element of a plane.
They differ only in the way they take their arguments; 3plane-aref* wants
the subscripts as arguments, while 3plane-ref* wants a list of subscripts.
.end_defun

.defun plane-aset datum plane &rest subscripts
.defun1 plane-store datum plane subscripts
These two functions store 2datum* into the specified element of a plane,
extending it if necessary, and return 2datum*.
They differ only in the way they take their arguments; 3plane-aset* wants
the subscripts as arguments, while 3plane-store* wants a list of subscripts.
.end_defun


@section "Maclisp Array Compatibility"
.setq maclisp-array section-page

The functions in this section are provided only for Maclisp compatibility,
and should not be used in new programs.

	Fixnum arrays do not exist (however, see Zetalisp's
small-positive-integer arrays).  Flonum arrays exist but you do not use
them in the same way; no declarations are required or allowed.
"Un-garbage-collected" arrays do not exist.
'c yet??? --weak links
Readtables and obarrays are represented as arrays, but unlike Maclisp special
array types are not used.  See the descriptions
of 3read* ((read-fun)) and 3intern* ((intern-fun)) for
information about readtables and obarrays (packages).
There are no "dead" arrays, nor are Multics "external" arrays provided.

The 3arraycall* function exists for compatibility
but should not be used (see 3aref*, (aref-fun).)

Subscripts are always checked for validity, regardless of the value
of 3*rset* and whether the code is compiled or not. 
However, in a multi-dimensional array, an error is only caused
if the subscripts would have resulted in a reference to storage
outside of the array. For example, if you have a 2 by 7 array and refer
to an element with subscripts 3 and 1, no error will
be caused despite the fact that the reference is invalid;
but if you refer to element 1 by 100, an error will be caused.
In other words, subscript errors will be caught if and only if
they refer to storage outside the array; some errors are undetected,
but they will only clobber some other element of the same array
rather than clobbering something completely unpredictable.

Currently, multi-dimensional arrays are stored in column-major order
rather than row-major order as in Maclisp.  See (column-major)
for further discussion of this issue.

3loadarrays* and 3dumparrays* are not provided.  However,
arrays can be put into "QFASL" files; see (fasdump).

	The 3*rearray* function is not provided, since not all
of its functionality is available in Zetalisp.
The most common uses can be replaced by 3adjust-array-size*.

	In Maclisp, arrays are usually kept on the 3array* property
of symbols, and the symbols are used instead of the arrays.  In order
to provide some degree of compatibility for this manner of using
arrays, the 3array*, 3*array*, and 3store* functions are
provided, and when arrays are applied to arguments, the arguments are
treated as subscripts and 3apply* returns the corresponding element
of the array.

.defun array &quote symbol type &eval &rest dims
	This creates an 3art-q* type array in 3default-array-area*
with the given dimensions.  (That is, 2dims* is given
to 3make-array* as its first argument.)  2type* is ignored.
If 2symbol* is 3nil*, the array is returned; otherwise,
the array is put in the function cell of 2symbol*, and 2symbol*
is returned.
.end_defun

.defun *array symbol type &rest dims
	This is just like 3array*, except that all of the arguments
are evaluated.
.end_defun

.defspec store array-ref x
3store* stores 2x* into the
specified array element.  2array-ref* should be a form which
references an array by calling it as a function (3aref* forms are not
acceptable).  First 2x* is evaluated, then 2array-ref* is
evaluated, and then the value of 2x* is stored into the array cell
last referenced by a function call, presumably the one in 2array-ref*.
.end_defspec

.defun xstore x array-ref
	This is just like 3store*, but it is not
a special form; this is because the arguments are in the other
order.  This function only exists for the compiler to compile the
3store* special form into, and should never be used by programs.
.end_defun

.defun arraycall ignored array &rest subscripts
3(arraycall t 2array* 2sub1* 2sub2*...)* is the same
as 3(aref 2array* 2sub1* 2sub2*...)*.  It exists for
Maclisp compatibility.
.end_defun

@chapter "Strings"
.setq string-chapter chapter-number
.cindex string
	Strings are a type of array which represent a sequence of
characters.  The printed representation of a string is its characters
enclosed in quotation marks, for example 3"foo bar"*.  Strings are
constants, that is, evaluating a string returns that string.  Strings
are the right data type to use for text-processing.

	 Strings are arrays of type 3art-string*, where each element
holds an eight-bit unsigned fixnum.  This is because characters are
represented as fixnums, and for fundamental characters only eight bits are
used.  A string can also be an array of type 3art-fat-string*, where each
element holds a sixteen-bit unsigned fixnum; the extra bits allow for
multiple fonts or an expanded character set.

	The way characters work, including
multiple fonts and the extra bits from the keyboard, is explained
in (character-set).  Note that you can type in the fixnums
that represent characters using "3#/*" and "3#\*"; for example,
3#/f* reads in as the fixnum that represents the character "f",
and 3#\return* reads in as the fixnum that represents the special "return"
character.  See (sharp-slash) for details of this syntax.

	The functions described in this section provide a variety of useful
operations on strings.  In place of a string, most of these functions will
accept a symbol or a fixnum as an argument, and will coerce it into a
string.  Given a symbol, its print name, which is a string, will be used.
Given a fixnum, a one-character string containing the character designated
by that fixnum will be used.  Several of the functions actually work on any
type of one-dimensional array and may be useful for other than string
processing; these are the functions such as 3substring* and 3string-length*
which do not depend on the elements of the string being characters.

	Since strings are arrays, the usual array-referencing function 3aref*
is used to extract the characters of the string as fixnums.  For example,
.lisp
(aref "frob" 1) => 162  1;lower-case r*
.end_lisp
Note that the character at the beginning of the string is element zero
of the array (rather than one); as usual in Zetalisp, everything
is zero-based.

It is also legal to store into strings (using 3aset*).
As with 3rplaca* on lists, this changes the actual object; one must be careful
to understand where side-effects will propagate to.
When you are making strings that you intend to change later, you probably
want to create an array with a fill-pointer (see (fill-pointer)) so that
you can change the length of the string as well as the contents.
The length of a string is always computed using 3array-active-length*,
so that if a string has a fill-pointer, its value will be used
as the length.

@section "Characters"

.defun character x
	3character* coerces 2x* to a single character,
represented as a fixnum.  If 2x* is a number, it is returned.  If
2x* is a string or an array, its first element is returned.  If
2x* is a symbol, the first character of its pname is returned.
Otherwise, an error occurs.  The way characters are represented
as fixnums is explained in (character-set).
.end_defun

.defun char-equal ch1 ch2
	This is the primitive for comparing characters for equality;
many of the string functions call it.  2ch1* and 2ch2*
must be fixnums.  The result is 3t* if the characters are equal ignoring
case and font, otherwise 3nil*.
3%%ch-char* is the byte-specifier for the portion of a character
which excludes the font information.
.end_defun

.defun char-lessp ch1 ch2
	This is the primitive for comparing characters for order;
many of the string functions call it.  2ch1* and 2ch2*
must be fixnums.  The result is 3t* if 2ch1* comes before 2ch2*
ignoring case and font, otherwise 3nil*.  Details of the ordering
of characters are in (character-set).
.end_defun

@section Upper and Lower Case Letters
.cindex alphabetic case
.cindex upper case letter
.cindex lower case letter

.defvar alphabetic-case-affects-string-comparison
This variable is normally 3nil*.  If it is 3t*, 3char-equal*,
3char-lessp*, and the string searching and comparison functions will
distinguish between upper-case and lower-case letters.  If it is 3nil*,
lower-case characters behave as if they were the same character but
in upper-case.  It is all right
to bind this to 3t* around a string operation, but changing its
global value to 3t* will break many system functions and user
interfaces and so is not recommended.
.end_defvar

.defun char-upcase ch
	If 2ch*, which must be a fixnum, is a lower-case alphabetic
character its upper-case form is returned; otherwise, 2ch* itself is
returned.  If font information is present it is preserved.
.end_defun

.defun char-downcase ch
	If 2ch*, which must be a fixnum, is a upper-case alphabetic
character its lower-case form is returned; otherwise, 2ch* itself is
returned.  If font information is present it is preserved.
.end_defun

.defun string-upcase string
	Returns a copy of 2string*, with all lower case alphabetic
characters replaced by the corresponding upper case characters.
.end_defun

.defun string-downcase string
	Returns a copy of 2string*, with all upper case alphabetic
characters replaced by the corresponding lower case characters.
.end_defun

@section Basic String Operations

.defun string x
	3string* coerces 2x* into a string.  Most of the string
functions apply this to their string arguments.
If 2x* is a string (or any array), it is returned.  If 2x* is
a symbol, its pname is returned.  If 2x* is a non-negative
fixnum less than 3400* octal, a one-character-long string containing
it is created and returned.  If 2x* is a pathname (see (pathname)),
the "string for printing" is returned.  Otherwise, an error is signalled.

If you want to get the printed representation of an object into the
form of a string, this function is 2not* what you should use.
You can use 3format*, passing a first argument of 3nil* (see (format-fun)).
You might also want to use 3with-output-to-string* (see
(with-output-to-string-fun)).
.end_defun

.defun string-length string
	3string-length* returns the number of characters in 2string*.  This is 1
if 2string* is a number, the 3array-active-length*
(see (array-active-length-fun))
if 2string*
is an array, or the 3array-active-length* of the pname if 2string* is a symbol.
.end_defun

.defun string-equal string1 string2 &optional (idx1 0) (idx2 0) lim1 lim2
	3string-equal* compares two strings, returning 3t* if
they are equal and 3nil* if they are not.  The comparison ignores
the extra "font" bits in 16-bit strings
and ignores alphabetic case.  3equal* calls 3string-equal* if
applied to two strings.
	The optional arguments 2idx1* and 2idx2* are the starting
indices into the strings.  The optional arguments 2lim1* and 2lim2*
are the final indices; the comparison stops just 2before* the final index.
2lim1* and 2lim2* default to the lengths of the strings.  These arguments are provided
so that you can efficiently compare substrings.
.lisp
.exdent 96 Examples:
(string-equal "Foo" "foo") => t
(string-equal "foo" "bar") => nil
(string-equal "element" "select" 0 1 3 4) => t
.end_lisp
.end_defun

.defun %string-equal string1 idx1 string2 idx2 count
3%string-equal* is the microcode primitive which 3string-equal* calls.
It returns 3t* if the 2count* characters of 2string1* starting
at 2idx1* are 3char-equal* to the 2count* characters of 2string2*
starting at 2idx2*, or 3nil* if the characters are not equal or
if 2count* runs off the length of either array.

Instead of a fixnum, 2count* may also be 3nil*.  In this case,
3%string-equal* compares
the substring from 2idx1* to 3(string-length 2string1*)*
against the substring from 2idx2* to 3(string-length 2string2*)*.
If the lengths of these substrings differ, then they are not equal and
3nil* is returned.

Note that 2string1* and 2string2* must really be strings; the
usual coercion of symbols and fixnums to strings is not performed.
This function is documented because certain programs which require
high efficiency and are willing to pay the price of less generality
may want to use 3%string-equal* in place of 3string-equal*.

.lisp
.exdent 96 Examples:
1To compare the two strings 2foo* and 2bar*:*
(%string-equal 2foo* 0 2bar* 0 nil)
1To see if the string 2foo* starts with the characters 3"bar"*:*
(%string-equal 2foo* 0 "bar" 0 3)
.end_lisp
.end_defun

.defun string-lessp string1 string2
	3string-lessp* compares two strings using dictionary order
(as defined by 3char-lessp*).
The result is 3t* if 2string1* is the lesser, or 3nil*
if they are equal or 2string2* is the lesser.
.end_defun

.defun string-compare string1 string2 &optional (idx1 0) (idx2 0) lim1 lim2
3string-compare* compares two strings using dictionary order (as defined
by 3char-lessp*).  The arguments are interpreted as in 3string-equal*.
The result is 30* if the strings are equal, a negative number if 2string1*
is less than 2string2*, or a positive number if 2string1* is greater than
2string2*.  If the strings are not equal, the absolute value of the
number returned is one greater than the index (in 2string1*) where the first
difference occurred.
.end_defun

.defun substring string start &optional end area
	This extracts a substring of 2string*, starting at the
character specified by 2start* and going up to but not including
the character specified by 2end*.  2start* and 2end* are
0-origin indices.  The length of the returned string is 2end* minus
2start*.  If 2end* is not specified it defaults to the length
of 2string*.  The area in which the result is to be consed may be
optionally specified.
.lisp
.exdent 96 Example:
(substring "Nebuchadnezzar" 4 8) => "chad"
.end_lisp
.end_defun

.defun nsubstring string start &optional end area
3nsubstring* is the same as 3substring* except that the substring
is not copied; instead an indirect array (see (indirect-array)) is created which shares part
of the argument 2string*.  Modifying one string will modify the other.

Note that 3nsubstring* does not necessarily use less storage than
3substring*; an 3nsubstring* of any length uses at least as much
storage as a 3substring* 12 characters long.  So you shouldn't use
this just "for efficiency"; it is intended for uses in which it is important
to have a substring which, if modified, will cause the original string
to be modified too.
.end_defun

.defun string-append &rest strings
Any number of strings are copied and concatenated into a single string.
With a single argument, 3string-append* simply copies it.
If the first argument is an array, the result will be an array of the same type.
Thus 3string-append* can be
used to copy and concatenate any type of 1-dimensional array.
.lisp
.exdent 96 Example:
(string-append #/! "foo" #/!) => "!foo!"
.end_lisp
.end_defun

.defun string-nconc modified-string &rest strings
3string-nconc* is like 3string-append* except that instead
of making a new string containing the concatenation of its arguments,
3string-nconc* modifies its first argument.  2modified-string*
must have a fill-pointer so that additional characters can be tacked
onto it.  Compare this with 3array-push-extend*
((array-push-extend-fun)).  The value of 3string-nconc* is
2modified-string* or a new, longer copy of it; in the latter case
the original copy is forwarded to the new copy (see 3adjust-array-size*,
(adjust-array-size-fun)).  Unlike 3nconc*, 3string-nconc*
with more than two arguments modifies only its first argument, not
every argument but the last.
.end_defun

.defun string-trim char-set string
	This returns a 3substring* of 2string*, with all characters
in 2char-set* stripped off of the beginning and end.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.lisp
.exdent 96 Example:
(string-trim '(#\sp) "  Dr. No  ") => "Dr. No"
(string-trim "ab" "abbafooabb") => "foo"
.end_lisp
.end_defun

.defun string-left-trim char-set string
	This returns a 3substring* of 2string*, with all characters
in 2char-set* stripped off of the beginning.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.end_defun

.defun string-right-trim char-set string
	This returns a 3substring* of 2string*, with all characters
in 2char-set* stripped off of the end.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.end_defun

.defun string-reverse string
	Returns a copy of 2string* with the order of characters reversed.
This will reverse a 1-dimensional array of any type.
.end_defun

.defun string-nreverse string
	Returns 2string* with the order of characters reversed,
smashing the original string, rather than creating a new one.
If 2string* is a number, it is simply
returned without consing up a string.
This will reverse a 1-dimensional array of any type.
.end_defun

.defun string-pluralize string
3string-pluralize* returns a string containing the plural of the
word in the argument 2string*.  Any added characters go in the same
case as the last character of 2string*.
.lisp
.exdent 96 Example:
(string-pluralize "event") => "events"
(string-pluralize "Man") => "Men"
(string-pluralize "Can") => "Cans"
(string-pluralize "key") => "keys"
(string-pluralize "TRY") => "TRIES"
.end_lisp
For words with multiple plural forms depending on the
meaning, 3string-pluralize* cannot always do the right thing.
.end_defun

@section "String Searching"

.defun string-search-char char string &optional (from 0) to
3string-search-char* searches through 2string* starting at the index 2from*,
which defaults to the beginning, and returns the index of the first
character which is 3char-equal* to 2char*, or 3nil* if none is found.
If the 2to* argument is supplied, it is used in place of 3(string-length 2string*)*
to limit the extent of the search.
.lisp
.exdent 96 Example:
(string-search-char #/a "banana") => 1
.end_lisp
.end_defun

.defun %string-search-char char string from to
3%string-search-char* is the microcode primitive which 3string-search-char*
and other functions call.  2string* must be an array and 2char*, 2from*,
and 2to* must be fixnums.  Except for this lack of type-coercion, and the fact
that none of the arguments is optional, 3%string-search-char* is the same as
3string-search-char*.  This function is documented for the benefit of
those who require the maximum possible efficiency in string searching.
.end_defun

.defun string-search-not-char char string &optional (from 0) to
3string-search-not-char* searches through 2string* starting at the index 2from*,
which defaults to the beginning, and returns the index of the first
character which is 2not* 3char-equal* to 2char*, or 3nil* if none is found.
If the 2to* argument is supplied, it is used in place of 3(string-length 2string*)*
to limit the extent of the search.
.lisp
.exdent 96 Example:
(string-search-not-char #/b "banana") => 1
.end_lisp
.end_defun

.defun string-search key string &optional (from 0) to
3string-search* searches for the string 2key* in the string
2string*.  The search begins at 2from*, which defaults to the
beginning of 2string*.  The value returned is the index of the first
character of the first instance of 2key*, or 3nil* if none is
found.
If the 2to* argument is supplied, it is used in place of 3(string-length 2string*)*
to limit the extent of the search.
.lisp
.exdent 96 Example:
(string-search "an" "banana") => 1
(string-search "an" "banana" 2) => 3
.end_lisp
.end_defun

.defun string-search-set char-set string &optional (from 0) to
3string-search-set* searches through 2string* looking for
a character which is in 2char-set*.  The search begins at the index 2from*,
which defaults to the beginning.  It returns the index of the first
character which is 3char-equal* to some element of 2char-set*,
or 3nil* if none is found.
If the 2to* argument is supplied, it is used in place of 3(string-length 2string*)*
to limit the extent of the search.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.lisp
.exdent 96 Example:
(string-search-set '(#/n #/o) "banana") => 2
(string-search-set "no" "banana") => 2
.end_lisp
.end_defun

.defun string-search-not-set char-set string &optional (from 0) to
3string-search-not-set* searches through 2string* looking for
a character which is not in 2char-set*.  The search begins at the index 2from*,
which defaults to the beginning.  It returns the index of the first
character which is not 3char-equal* to any element of 2char-set*,
or 3nil* if none is found.
If the 2to* argument is supplied, it is used in place of 3(string-length 2string*)*
to limit the extent of the search.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.lisp
.exdent 96 Example:
(string-search-not-set '(#/a #/b) "banana") => 2
.end_lisp
.end_defun

.defun string-reverse-search-char char string &optional from (to 0)
3string-reverse-search-char* searches through 2string* in reverse order, starting
from the index one less than 2from*, which defaults to the length of 2string*,
and returns the index of the first character which is 3char-equal*
to 2char*, or 3nil* if none is found.  Note that the index returned
is from the beginning of the string, although the search starts from the end.
If the 2to* argument is supplied, it limits the extent of the search.
.lisp
.exdent 96 Example:
(string-reverse-search-char #/n "banana") => 4
.end_lisp
.end_defun

.defun string-reverse-search-not-char char string &optional from (to 0)
3string-reverse-search-not-char* searches through 2string* in reverse order, starting
from the index one less than 2from*, which defaults to the length of 2string*,
and returns the index of the first character which is 2not* 3char-equal*
to 2char*, or 3nil* if none is found.  Note that the index returned
is from the beginning of the string, although the search starts from the end.
If the 2to* argument is supplied, it limits the extent of the search.
.lisp
.exdent 96 Example:
(string-reverse-search-not-char #/a "banana") => 4
.end_lisp
.end_defun

.defun string-reverse-search key string &optional from (to 0)
3string-reverse-search* searches for the string 2key* in the string 2string*.
The search proceeds in reverse order, starting
from the index one less than 2from*, which defaults to the length of 2string*,
and returns the index of the first (leftmost) character of the first instance found,
or 3nil* if none is found.  Note that the index returned
is from the beginning of the string, although the search starts from the end.
The 2from* condition, restated, is that the instance of 2key* found
is the rightmost one whose rightmost character is before the 2from*'th character
of 2string*.
If the 2to* argument is supplied, it limits the extent of the search.
.lisp
.exdent 96 Example:
(string-reverse-search "na" "banana") => 4
.end_lisp
.end_defun

.defun string-reverse-search-set char-set string &optional from (to 0)
3string-reverse-search-set* searches through 2string* in reverse order, starting
from the index one less than 2from*, which defaults to the length of 2string*,
and returns the index of the first character which is 3char-equal*
to some element of 2char-set*, or 3nil* if none is found.
Note that the index returned
is from the beginning of the string, although the search starts from the end.
If the 2to* argument is supplied, it limits the extent of the search.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.lisp
(string-reverse-search-set "ab" "banana") => 5
.end_lisp
.end_defun

.defun string-reverse-search-not-set char-set string &optional from (to 0)
3string-reverse-search-not-set* searches through 2string* in reverse order, starting
from the index one less than 2from*, which defaults to the length of 2string*,
and returns the index of the first character which is not 3char-equal*
to any element of 2char-set*, or 3nil* if none is found.
Note that the index returned
is from the beginning of the string, although the search starts from the end.
If the 2to* argument is supplied, it limits the extent of the search.
2char-set* is a set of characters, which can be represented as a list
of characters or a string of characters.
.lisp
(string-reverse-search-not-set '(#/a #/n) "banana") => 0
.end_lisp
.end_defun

See also 3intern* ((intern-fun)), which given a string will return "the" symbol
with that print name.

@section I/O to Strings

The special forms in this section allow you to create I/O streams which
input from or output to a string rather than a real I/O device.
See (streams) for documentation of I/O streams.

.defspec with-input-from-string (var string [index] [limit]) body...
The form
.lisp
(with-input-from-string (2var* 2string*)
    2body*)
.end_lisp
evaluates the forms in 2body* with the variable 2var* bound to a stream
which reads characters from the string which is the value of the form
2string*.  The value of the special form is the value of the last
form in its body.

The stream is a function that only works inside the 3with-input-from-string*
special form, so be careful what you do with it.
You cannot use it after control leaves the body, and you cannot nest
two 3with-input-from-string* special forms and use both streams
since the special-variable bindings associated with the streams will
conflict.  It is done this way to avoid any allocation of memory.

After 2string* you may optionally specify two additional "arguments".
The first is 2index*:
.lisp
(with-input-from-string (2var* 2string* 2index*)
    2body*)
.end_lisp
uses 2index* as the starting index into the string, and sets 2index*
to the index of the first character not read when 3with-input-from-string*
returns.  If the whole string is read, it will be set to the
length of the string.  Since 2index* is
updated it may not be a general expression; it must be a variable
or a 3setf*-able reference.  The 2index* is not updated
in the event of an abnormal exit from the body, such as a 3*throw*.
The value of 2index* is not updated until 3with-input-from-string*
returns, so you can't use its value within the body to see how far
the reading has gotten.

Use of the 2index* feature prevents multiple values from being
returned out of the body, currently.

.lisp
(with-input-from-string (2var* 2string* 2index* 2limit*)
    2body*)
.end_lisp
uses the value of the form 2limit*, if the value is not 3nil*, in
place of the length of the string.  If you want to specify a 2limit*
but not an 2index*, write 3nil* for 2index*.
.end_defspec

.defspec with-output-to-string (var [string] [index]) body...
This special form provides a variety of ways to send output to a string
through an I/O stream.

.lisp
(with-output-to-string (2var*)
  2body*)
.end_lisp
evaluates the forms in 2body* with 2var* bound to a stream
which saves the characters output to it in a string.  The value of
the special form is the string.

.lisp
(with-output-to-string (2var* 2string*)
  2body*)
.end_lisp
will append its output to the string which is the value of the form 2string*.
(This is like the 3string-nconc* function; see (string-nconc-fun).)
The value returned is the value of the last form in the body, rather than the string.
Multiple values are not returned.  2string* must have an array-leader;
element 0 of the array-leader will be used as the fill-pointer.
If 2string*
is too small to contain all the output, 3adjust-array-size* will be used to
make it bigger.

.lisp
(with-output-to-string (2var* 2string* 2index*)
  2body*)
.end_lisp
is similar to the above except that 2index* is a variable or 3setf*-able
reference which contains the index of the next character to be stored into.
It must be initialized outside the 3with-output-to-string* and will be updated
upon normal exit.
The value of 2index* is not updated until 3with-output-to-string*
returns, so you can't use its value within the body to see how far
the writing has gotten.  The presence of 2index* means that 2string*
is not required to have a fill-pointer; if it does have one it will be updated.

The stream is a "downward closure" simulated with special variables,
so be careful what you do with it.
You cannot use it after control leaves the body, and you cannot nest
two 3with-output-to-string* special forms and use both streams
since the special-variable bindings associated with the streams will
conflict.  It is done this way to avoid any allocation of memory.
.end_defspec

It is OK to use a 3with-input-from-string* and 3with-output-to-string*
nested within one another, so long as there is only one of each.

Another way of doing output to a string is to use the 3format* facility
(see (format-fun)).

@section "Maclisp-Compatible Functions"

The following functions are provided primarily for Maclisp compatibility.

.defun alphalessp string1 string2
3(alphalessp 2string1 string2*)* is equivalent to
3(string-lessp 2string1 string2*)*.
.end_defun

.defun getchar string index
	Returns the 2index*'th character of 2string*
as a symbol.  Note that 1-origin indexing is used.  This function
is mainly for Maclisp compatibility; 3aref* should be used
to index into strings (however, 3aref* will not coerce symbols
or numbers into strings).
.end_defun

.defun getcharn string index
	Returns the 2index*'th character of 2string*
as a fixnum.  Note that 1-origin indexing is used.  This function
is mainly for Maclisp compatibility; 3aref* should be used
to index into strings (however, 3aref* will not coerce symbols
or numbers into strings).
.end_defun

.defun ascii x
	3ascii* is like 3character*, but returns a symbol
whose printname is the character instead of returning a fixnum.
.lisp
.exdent 96 Examples:
(ascii 101) => A
(ascii 56) => /.
.end_lisp
The symbol returned is interned in the current package (see (package)).
.end_defun

.defun maknam char-list
	3maknam* returns
an uninterned symbol whose print-name is a string made up of the characters in 2char-list*.
.lisp
.exdent 96 Example:
(maknam '(a b #/0 d)) => ab0d
.end_lisp
.end_defun

.defun implode char-list
	3implode* is like 3maknam* except that the returned symbol
is interned in the current package.
.end_defun

.nopara
The 3samepnamep* function is also provided; see (samepnamep-fun).

@chapter Functions
.cindex function
.cindex definition
.setq function-functions section-page
.setq function-chapter chapter-number

Functions are the basic building blocks of Lisp programs.  This chapter
describes the functions in Zetalisp that are used to manipulate
functions.  It also explains how to manipulate special forms and macros.

This chapter contains internal details intended for those writing programs
to manipulate programs as well as material suitable for the beginner.
Feel free to skip sections that look complicated or uninteresting
when reading this for the first time.

@section What Is a Function?

There are many different kinds of functions in Zetalisp.  Here
are the printed representations of examples of some of them:
.lisp
foo
(lambda (x) (car (last x)))
(named-lambda foo (x) (car (last (x))))
(subst (x) (car (last x)))
#<dtp-fef-pointer append 1424771>
#<dtp-u-entry last 270>
#<dtp-closure 1477464>
.end_lisp
We will examine these and other types of functions in detail later in this chapter.
There is one thing they all have in common:  a function is a Lisp object
that can be applied to arguments.  All of the above objects may be
applied to some arguments and will return a value.  Functions are Lisp
objects and so can be manipulated in all the usual ways; you can pass
them as arguments, return them as values, and make other Lisp objects
refer to them.

@section Function Specs
.setq function-spec section-page
.cindex function spec

The name of a function does not have to be a symbol.  Various kinds of
lists describe other places where a function can be found.  A Lisp
object which describes a place to find a function is called a 2function spec*.
("Spec" is short for "specification".)
Here are the printed representations of some typical function specs:
.lisp
foo
(:property foo bar)
(:method tv:graphics-mixin :draw-line)
(:internal foo 1)
(:within foo bar)
(:location #<dtp-locative 7435216>)
.end_lisp

Function specs have two purposes: they specify a place to 2remember* a
function, and they serve to 2name* functions.  The most common kind of
function spec is a symbol, which specifies that the function cell
of the symbol is the place to remember the function.  We will see all the
kinds of function spec, and what they mean, shortly.  Function specs are
not the same thing as functions.  You cannot, in general, apply a
function spec to arguments.  The time to use a function spec is when
you want to 2do* something to the function, such as define it,
look at its definition, or compile it.

Some kinds of functions remember their own names, and some don't.  The
"name" remembered by a function can be any kind of function spec,
although it is usually a symbol.  In the examples of functions in the
previous section, the one starting with the symbol 3named-lambda*, the
one whose printed representation included 3dtp-fef-pointer*, and the
3dtp-u-entry* remembered names (the function specs 3foo*,
3append*, and 3last* respectively).  The others didn't remember
their names.

To 2define a function spec* means to make that function spec remember
a given function.  This is done with the 3fdefine* function; you give
3fdefine* a function spec and a function, and 3fdefine* remembers
the function in the place specified by the function spec.  The function
associated with a function spec is called the 2definition* of the
function spec.  A single function can be
the definition of more than one function spec at the same time, or of no
function specs.

To 2define a function* means to create a new function, and define a
given function spec as that new function.  This is what the 3defun*
special form does.  Several other special forms, such as 3defmethod*
((defmethod-fun)) and 3defselect* ((defselect-fun)) do this too.

These special forms that define functions usually take a function spec,
create a function whose name is that function spec, and then define that
function spec to be the newly-created function.  Most function
definitions are done this way, and so usually if you go to a function
spec and see what function is there, the function's name will be the
same as the function spec.  However, if you define a function named
3foo* with 3defun*, and then define the symbol 3bar* to be this
same function, the name of the function is unaffected; both 3foo* and
3bar* are defined to be the same function, and the name of that
function is 3foo*, not 3bar*.

'cindex basic definition
'cindex encapsulation
A function spec's definition in general consists of a 2basic
definition* surrounded by 2encapsulations*.  Both the basic
definition and the encapsulations are functions, but of recognizably
different kinds.  What 3defun* creates is a basic definition, and
usually that is all there is.  Encapsulations are made by
function-altering functions such as 3trace* and 3advise*.  When the
function is called, the entire definition, which includes the tracing
and advice, is used.  If the function is "redefined" with 3defun*,
only the basic definition is changed; the encapsulations are left in
place.  See the section on encapsulations, (encapsulate).

A function spec is a Lisp object of one of the following types:
.table 3 0 500
.item 2a symbol*
The function is remembered in the function cell of the symbol. See
(fsymeval-fun) for an explanation of function cells and the primitive
functions to manipulate them. 

.item (:property 2symbol* 2property*)
The function is remembered on the property list of the symbol; doing
3(get 2symbol* 2property*)* would return the function.  Storing
functions on property lists is a frequently-used technique for
dispatching (that is, deciding at run-time which function to call, on
the basis of input data).

.setq method-function-spec section-page
.item (:method 2flavor-name* 2message*)
.item1 (:method 2flavor-name* 2method-type* 2message*)
The function is remembered inside internal data structures of the flavor
system.  See the chapter on flavors ((flavor)) for details. 

.item (:handler 2flavor-name* 2message*)
This is a name for the function actually called when a 2message* message
is sent to an instance of the flavor 2flavor-name*.  The difference
between 3:handler* and 3:method* is that the handler may be a method
inherited from some other flavor or a 2combined method* automatically
written by the flavor system.  Methods are what you define in source files;
handlers are not.  Note that redefining or encapsulating a handler affects
only the named flavor, not any other flavors built out of it.  Thus
3:handler* function specs are often used with 3trace3
(see (trace-fun)) and 3advise* (see (advise-fun)).

.item (:location 2pointer*)
The function is stored in the cdr of 2pointer*, which may be a locative
or a list.  This is for pointing at an arbitrary place
which there is no other way to describe.  This form of function spec
isn't useful in 3defun* (and related special forms) because the
reader has no printed representation for locative pointers and always
creates new lists; these function specs are intended for programs
that manipulate functions (see (programs-that-manipulate-functions)).

.item (:within 2within-function* 2function-to-affect*)
This refers to the meaning of the symbol 2function-to-affect*, but
only where it occurs in the text of the definition of
2within-function*.  If you define this function spec as anything
but the symbol 2function-to-affect* itself, then that symbol is
replaced throughout the definition of 2within-function* by a new
symbol which is then defined as you specify.  See the section on
function encapsulation ((encapsulate)) for more
information.

.item (:internal 2function-spec* 2number*)
Some Lisp functions contain internal functions, created by
3(function (lambda ...))* forms.  These internal functions need names when compiled,
but they do not have symbols as names; instead they are named by
3:internal* function-specs.  2function-spec* is the containing function.
2number* is a sequence number; the first internal function the compiler comes
across in a given function will be numbered 0, the next 1, etc.  Internal
functions are remembered inside the FEF of their containing function.
.end_table

Here is an example of the use of a function spec which is not a symbol:
.lisp
(defun (:property foo bar-maker) (thing &optional kind)
  (set-the 'bar thing (make-bar 'foo thing kind)))
.end_lisp
This puts a function on 3foo*'s 3bar-maker* property.  Now you can
say
.lisp
(funcall (get 'foo 'bar-maker) 'baz)
.end_lisp

Unlike the other kinds of function spec, a symbol 2can* be used as a
function.  If you apply a symbol to arguments, the symbol's function
definition is used instead.  If the definition of the first symbol is
another symbol, the definition of the second symbol is used, and so on,
any number of times.  But this is an exception; in general, you can't
apply function specs to arguments.

A keyword symbol which identifies function specs (may appear in the car of
a list which is a function spec) is identified by a
3sys:function-spec-handler* property whose value is a function which
implements the various manipulations on function specs of that type.  The
interface to this function is internal and not documented in this manual.

For compatibility with Maclisp, the function-defining special forms
3defun*, 3macro*, and 3defselect* (and other defining
forms built out of them, such as 3defunp* and 3defmacro*)
will also accept a list
.lisp
(2symbol* 2property*)
.end_lisp
as a function name.  This is translated into
.lisp
(:property 2symbol* 2property*)
.end_lisp
2symbol* must not be one of the keyword symbols which
identifies a function spec, since that would be ambiguous.

@section Simple Function Definitions

.defspec defun
3defun* is the usual way of defining a function which is part of a
program. A 3defun* form looks like:

.lisp
(defun 2name* 2lambda-list*
  2body*...)
.end_lisp
2name* is the function spec you wish to define as a function.
The 2lambda-list* is a list of the names to give to the arguments of
the function.  Actually, it is a little more general than that; it can
contain 2lambda-list keywords* such as 3&optional* and 3&rest*.
(These keywords are explained in (lambda-list) and other
keywords are explained in (lambda-list-keywords).)
See (additional-defun-explanation) for some additional syntactic features of 3defun*.

3defun* creates a list which looks like
.lisp
(named-lambda 2name* 2lambda-list body*...)
.end_lisp
and puts it in the function cell of 2name*.
2name* is now defined as a function and can be called by other forms.

.lisp
.exdent 96 Examples:
(defun addone (x)
  (1+ x))

(defun foo (a &optional (b 5) c &rest e &aux j)
  (setq j (+ (addone a) b))
  (cond ((not (null c))
	 (cons j e))
	(t j))) 
.end_lisp

3addone* is a function which expects a number as an argument, and
returns a number one larger.  3foo* is a complicated function which
takes one required argument, two optional arguments, and any number of
additional arguments which are given to the function as a list named 
3e*.

A declaration (a list starting with 3declare*) can appear as the first
element of the body.  It is equivalent to a 3local-declare* (see
(local-declare-fun)) surrounding the entire 3defun* form.  For
example,
.lisp
(defun foo (x)
  (declare (special x))
  (bar))             ;bar1 uses 3x* free.*
.end_lisp
is equivalent to and preferable to
.lisp
(local-declare ((special x))
  (defun foo (x)
    (bar)))
.end_lisp
(It is preferable because the editor expects the open parenthesis of a
top-level function definition to be the first character on a line, which
isn't possible in the second form without incorrect indentation.)

A documentation string can also appear as the first element of the body
(following the declaration, if there is one).  (It shouldn't be the only
thing in the body; otherwise it is the value returned by the function
and so is not interpreted as documentation.  A string as an element of a
body other than the last element is only evaluated for side-effect, and
since evaluation of strings has no side effects, they aren't useful in
this position to do any computation, so they are interpreted as
documentation.)  This documentation string becomes part of the
function's debugging info and can be obtained with the function
3documentation* (see (documentation-fun)).  The first line of the
string should be a complete sentence which makes sense read by itself,
since there are two editor commands to get at the documentation, one of
which is "brief" and prints only the first line.  Example:
.lisp
(defun my-append (&rest lists)
   "Like append but copies all the lists.
This is like the Lisp function append, except that
append copies all lists except the last, whereas
this function copies all of its arguments
including the last one."
   ...)
.end_lisp
.end_defspec

.defmac defunp
Usually when a function uses 3prog*, the 3prog* form is
the entire body of the function; the definition of such a function
looks like 3(defun 2name* 2arglist* (prog 2varlist* ...))*.
Although the use of 3prog* is generally discouraged, 3prog* fans
may want to use this special form.
For convenience, the 3defunp* macro can be used to produce such definitions.
A 3defunp* form such as
.lisp
(defunp fctn (args)
    form1
    form2
    ...
    formn)
.end_lisp
expands into
.lisp
(defun fctn (args)
  (prog ()
	form1
	form2
	...
	(return formn)))
.end_lisp

You can think of 3defunp* as being like 3defun* except that you can
3return* out of the middle of the function's body.
.end_defmac

For more information on defining functions, and other ways of doing so,
see (function-defining).

@section Operations the User Can Perform on Functions

Here is a list of the various things a user (as opposed to a program) is
likely to want to do to a function.  In all cases, you specify a
function spec to say where to find the function.

To print out the definition of the function spec with indentation to
make it legible, use 3grindef* (see (grindef-fun)).  This works only
for interpreted functions.  If the definition is a compiled function, it
can't be printed out as Lisp code, but its compiled code can be printed
by the 3disassemble* function (see (disassemble-fun)).

To find out about how to call the function, you can ask to see its
documentation, or its argument names.  (The argument names are usually
chosen to have mnemonic significance for the caller).  Use 3arglist*
((arglist-fun)) to see the argument names and 3documentation*
((documentation-fun)) to see the documentation string.
There are also editor commands for doing these things: the 3CTRL/SHIFT/D*
and 3META/SHIFT/D* commands are for looking at a function's
documentation, and 3CTRL/SHIFT/A* is for looking at an argument
list.  3CTRL/SHIFT/A* does not ask for the function name; it acts on
the function which is called by the innermost expression which the
cursor is inside.  Usually this is the function which will be called
by the form you are in the process of writing.

You can see the function's debugging info alist by means of the function
3debugging-info* (see (debugging-info-fun)).

When you are debugging, you can use 3trace* (see (trace-fun)) to
obtain a printout or a break loop whenever the function is called.  You
can use 3breakon* (see (breakon-fun)) to cause the error handler to
be entered whenever the function is called; from there, you can step
through further function calls and returns.  You can customize the
definition of the function, either temporarily or permanently, using
3advise* (see (advise-fun)).

@section Kinds of Functions
.setq kinds-of-functions section-page

There are many kinds of functions in Zetalisp.  This section
briefly describes each kind of function.  Note that a function is also a
piece of data and can be passed as an argument, returned, put in a list,
and so forth.

.cindex special forms

Before we start classifying the functions, we'll first discuss something
about how the evaluator works.  As we said in the basic description of
evaluation on (description-of-evaluation), when the evaluator is given
a list whose first element is a symbol, the form may be a function form,
a special form, or a macro form.  If the definition of the symbol is a
function, then the function is just applied to the result of evaluating
the rest of the subforms.  If the definition is a cons whose car is
3macro*, then it is a macro form; these are explained in (macro).
What about special forms?

.setq special-function page
Conceptually, the evaluator knows specially about all special forms
(that's why they're called that).  However, the Zetalisp
implementation actually uses the definition of symbols that name special
forms as places to hold pieces of the evaluator.  The definitions of
such symbols as 3prog*, 3do*, 3and*, and 3or* actually hold Lisp
objects, which we will call 2special functions*.  Each of these
functions is the part of the Lisp interpreter that knows how to deal
with that special form.  Normally you don't have to know about this;
it's just part of the hidden internals of how the evaluator works.
However, if you try to add encapsulations to 3and* or something
like that, knowing this will help you understand the behavior you will
get.

Special functions are written like regular functions except that the
keywords 3&quote* and 3&eval* (see (lambda-list-keywords)) are used
to make some of the arguments be "quoted" arguments.  The evaluator
looks at the pattern in which arguments to the special function are
"quoted" or not, and it calls the special function in a special way: for
each regular argument, it passes the result of evaluating the
corresponding subform, but for each "quoted" argument, it passes the
subform itself without evaluating it first.  For example, 3cond*
works by having a special function that takes a "quoted" 3&rest* argument;
when this function is called it is passed a list of 3cond* clauses
as its argument.

If you apply or funcall a special function yourself, you have to understand
what the special form is going to do with its arguments; it is likely
to call 3eval* on parts of them.  This is different from applying
a regular function, which is passed argument values rather than Lisp
expressions.

.setq special-form-caveat page

Defining your own special form, by using 3&quote* yourself, can be
done; it is a way to extend the Lisp language.  Macros are another way
of extending the Lisp language.  It is preferable to implement language
extensions as macros rather than special forms, because macros directly
define a Lisp-to-Lisp translation and therefore can be understood by
both the interpreter and the compiler.  Special forms, on the other
hand, only extend the interpreter.  The compiler has to be modified in
an 2ad hoc* way to understand each new special form so that code using
it can be compiled.  Since all real programs are eventually compiled,
writing your own special functions is strongly discouraged.

(In fact, many of the special forms in Zetalisp are actually implemented
as macros, rather than as special functions.  They're implemented this
way because it's easier to write a macro than to write both a new
special function and a new 2ad hoc* module in the compiler.  However,
they're sometimes documented in this manual as special forms, rather
than macros, because you should not in any way 2depend* on the way
they are implemented; they might get changed in the future to be special
functions, if there was some reason to do so.)

There are four kinds of functions, classified by how they work.

First, there are 2interpreted* functions: you define them with
3defun*, they are represented as list structure, and they are
interpreted by the Lisp evaluator.

Secondly, there are 2compiled* functions: they are defined
by 3compile* or by loading a qfasl file, they are represented by a
special Lisp data type, and they are executed directly by the microcode.
Similar to compiled functions are microcode functions, which are written
in microcode (either by hand or by the micro-compiler) and executed directly
by the hardware.

Thirdly, there are various types of Lisp object which can be applied to
arguments, but when they are applied they dig up another function
somewhere and apply it instead.  These include 3dtp-select-method*,
closures, instances, and entities.

Finally, there are various types of Lisp object which, when used as
functions, do something special related to the specific data type.
These include arrays and stack-groups.

@subsection "Interpreted Functions"

An interpreted function is a piece of list structure which represents a
program according to the rules of the Lisp interpreter.  Unlike other
kinds of functions, an interpreted function can be printed out and read
back in (it has a printed representation that the reader understands),
can be pretty-printed (see (grindef-fun)), and can be opened up and
examined with the usual functions for list-structure manipulation.

There are four kinds of interpreted functions: 3lambda*s,
3named-lambda*s, 3subst*s, and 3named-subst*s.  A 3lambda* function is the
simplest kind.  It is a list that looks like this:
.lisp
(lambda 2lambda-list* 2form1* 2form2*...)
.end_lisp
The symbol 3lambda* identifies this list as a 3lambda*
function.  2lambda-list* is a description of what arguments the
function takes; see (lambda-list) for details.  The 2forms*
make up the body of the function.  When the function is called,
the argument variables are bound to the values of the arguments
as described by 2lambda-list*, and then the forms in the body are
evaluated, one by one.  The value of the function is the value of its
last form.

A 3named-lambda* is like a 3lambda* but contains an extra element in
which the system remembers the function's name, documentation, and other
information.  Having the function's name there allows the error handler
and other tools to give the user more information.  This is the kind of
function that 3defun* creates.  A 3named-lambda* function looks
like this:
.lisp
(named-lambda 2name* 2lambda-list* 2body forms*...)
.end_lisp
If the 2name* slot contains a symbol, it is the function's name.
Otherwise it is a list whose car is the name and whose cdr is the
function's debugging information alist.  See 3debugging-info*,
(debugging-info-fun).  Note that the name need not be a symbol;
it can be any function spec.  For example,
.lisp
(defun (foo bar) (x)
  (car (reverse x)))
.end_lisp
will give 3foo* a 3bar* property whose value is
.lisp
(named-lambda ((:property foo bar)) (x) (car (reverse x)))
.end_lisp

.setq subst section-page
.cindex subst
A 3subst* is just like a 3lambda* as far as the interpreter is concerned.
It is a list that looks like this:
.lisp
(subst 2lambda-list* 2form1* 2form2*...)
.end_lisp
The difference between a 3subst* and a 3lambda* is the way they are
handled by the compiler.  A call to a normal function is compiled as a
2closed subroutine*; the compiler generates code to compute the
values of the arguments and then apply the function to those values.  A
call to a 3subst* is compiled as an 2open subroutine*; the compiler
incorporates the body forms of the 3subst* into the function being
compiled, substituting the argument forms for references to the
variables in the 3subst*'s 2lambda-list*.  This is a simple-minded
but useful facility for 2open* or 2in-line coded* functions.
It is simple-minded because the argument forms can be evaluated multiple
times or out of order, and so the semantics of a 3subst* may not be the
same in the interpreter and the compiler.  3subst*s are described more fully on
(defsubst-fun), with the explanation of 3defsubst*.

.cindex named-subst
A 3named-subst* is the same as a 3subst* except that it has a name
just as a 3named-lambda* does.  It looks like
.lisp
(named-subst 2name* 2lambda-list* 2form1* 2form2* ...)
.end_lisp
where 2name* is interpreted the same way as in a 3named-lambda*.

@subsection "Compiled Functions"
.cindex function entry frame
.cindex FEF

There are two kinds of compiled functions: 2macrocoded* functions
and 2microcoded* functions.  The Lisp compiler converts 3lambda*
and 3named-lambda* functions into macrocoded functions.  A
macrocoded function's printed representation looks like:
.lisp
#<dtp-fef-pointer append 1424771>
.end_lisp
This type of Lisp object is also called a "Function Entry Frame", or
"FEF" for short.  Like "car" and "cdr", the name is historical in origin
and doesn't really mean anything.  The object contains Lisp Machine
machine code that does the computation expressed by the function; it
also contains a description of the arguments accepted, any constants
required, the name, documentation, and other things.  Unlike Maclisp
"subr-objects", macrocoded functions are full-fledged objects and
can be passed as arguments, stored in data structure, and applied to arguments.

The printed representation of a microcoded function looks like:
.lisp
#<dtp-u-entry last 270>
.end_lisp
Most microcompiled functions are basic Lisp primitives or subprimitives
written in Lisp Machine microcode.  You can also convert your own
macrocode functions into microcode functions in some circumstances,
using the micro-compiler.

@subsection "Other Kinds of Functions"

A closure is a kind of function which contains another function and a
set of special variable bindings.  When the closure is applied, it
puts the bindings into effect and then applies the other function.  When
that returns, the closure bindings are removed.  Closures are made with
the function 3closure*.  See (closure) for more information.
Entities are slightly different from closures; see (entity).

.setq select-method page
A select-method (3dtp-select-method*) is an a-list of symbols and
functions.  When one is called the first argument is looked up in the
a-list to find the particular function to be called.  This function is
applied to the rest of the arguments.  The a-list may have a list of
symbols in place of a symbol, in which case the associated function is
called if the first argument is any of the symbols on the list.  If
3cdr* of 3last* of the a-list is not 3nil*, it is a 2default
handler* function, which gets called if the message key is not found in
the a-list.  Select-methods can be created with the 3defselect*
special form (see (defselect-fun)).

An instance is a message-receiving object which has some state and a table
of message-handling functions (called 2methods*).  Refer to the chapter
on flavors ((flavor)) for further information.

An array can be used as a function.  The arguments to the array are
the indices and the value is the contents of the element of the
array.  This works this way for Maclisp compatibility and is not recommended usage.
Use 3aref* ((aref-fun)) instead.

A stack group can be called as a function.  This is one way to pass control
to another stack group.  See (stack-group).

@section Function-Defining Special Forms
.setq function-defining section-page

3defun* is a special form which is put in a program to define a
function.  3defsubst* and 3macro* are others.
This section explains how these special forms work, how
they relate to the different kinds of functions, and how they interface to the
rest of the function-manipulation system.

Function-defining special forms typically take as arguments a function
spec and a description of the function to be made, usually in the form
of a list of argument names and some forms which constitute the body of
the function.  They construct a function, give it the function spec as
its name, and define the function spec to be the new function.
Different special forms make different kinds of functions.  3defun*
makes a 3named-lambda* function, and 3defsubst* makes a 3named-subst*
function.  3macro* makes a macro; though the macro definition is not
really a function, it is like a function as far as definition handling
is concerned.

These special forms are used in writing programs because the function
names and bodies are constants.  Programs that define functions usually
want to compute the functions and their names, so they use 3fdefine*.
See (fdefine-fun).

All of these function-defining special forms alter only the basic
definition of the function spec.  Encapsulations are preserved.
See (encapsulate).

The special forms only create interpreted functions.  There is no
special way of defining a compiled function.  Compiled functions are
made by compiling interpreted ones.  The same special form which defines
the interpreted function, when processed by the compiler, yields the
compiled function.  See (compiler) for details.

Note that the editor understands these and other "defining" special forms
(e.g. 3defmethod*, 3defvar*, 3defmacro*, 3defstruct*, etc.)
to some extent, so that when you ask for the definition of something, the editor
can find it in its source file and show it to you.  The general convention
is that anything which is used at top level (not inside a function)
and starts with 3def* should be a special form for defining things
and should be understood by the editor.  3defprop* is an exception.

@c [Explain how a user can create his own, or point to an explanation]

.setq additional-defun-explanation page
The 3defun* special form (and the 3defunp* macro which expands into a
3defun*) are used for creating ordinary interpreted functions (see (defun-fun)).

For Maclisp compatibility, a 2type* symbol may be inserted between
2name* and 2lambda-list* in the 3defun* form.  The following types
are understood:
.table 3
.item expr
The same as no type.
.item fexpr
3&quote* and 3&rest* are prefixed to the lambda list.
.item macro
A macro is defined instead of a normal function.
.end_table

If 2lambda-list* is a non-3nil* symbol instead of a list,
the function is recognized as a Maclisp 2lexpr* and it is converted
in such a way that the 3arg*, 3setarg*, and 3listify* functions
can be used to access its arguments (see (arg-fun)).

The 3defsubst* special form is used to create substitutible functions.  It
is used just like 3defun* but produces a list starting with 3named-subst*
instead of one starting with 3named-lambda*.  The 3named-subst* function
acts just like the corresponding 3named-lambda* function when applied,
but it can also be open-coded (incorporated into its callers) by the compiler.
See (defsubst-fun) for full information.

The 3macro* special form is the primitive means of creating a macro.
It gives a function spec a definition which is a macro definition rather
than a actual function.  A macro is not a function because it cannot be
applied, but it 2can* appear as the car of a form to be evaluated.
Most macros are created with the more powerful 3defmacro* special form.
See (macro).

The 3defselect* special form defines a select-method function.  See (defselect-fun).

.nopara
Unlike the above special forms, the next two (3deff* and 3def*)
do not create new functions.  They simply serve as hints to the editor
that a function is being stored into a function spec here, and therefore
if someone asks for the source code of the definition of that function spec,
this is the place to look for it.

.defspec def
If a function is created in some strange way, wrapping a 3def* special
form around the code that creates it informs the editor of the connection.
The form
.lisp
(def 2function-spec*
  2form1* 2form2*...)
.end_lisp
simply evaluates the forms 2form1*, 2form2*, etc.  It is assumed
that these forms will create or obtain a function somehow, and make
it the definition of 2function-spec*.

Alternatively, you could put 3(def 2function-spec*)* in
front of or anywhere near the forms which define the function.  The
editor only uses it to tell which line to put the cursor on.
.end_defspec

.defspec deff function-spec definition-creator
3deff* is a simplified version of 3def*.  It
evaluates the form 2definition-creator*, which should produce a function,
and makes that function the definition of 2function-spec*, which is not
evaluated.  3deff*
is used for giving a function spec a definition which is not obtainable
with the specific defining forms such as 3defun* and 3macro*.
For example,
.lisp
(deff foo 'bar)
.end_lisp
will make 3foo* equivalent to 3bar*, with an indirection so that if
3bar* changes 3foo* will likewise change;
.lisp
(deff foo (function bar))
.end_lisp
copies the definition of 3bar* into 3foo* with no indirection, so that
further changes to 3bar* will have no effect on 3foo*.
.end_defspec

.defmac @@define
This macro turns into 3nil*, doing nothing.  It exists for the sake of the
@ listing generation program, which uses it to declare names of special forms
which define objects (such as functions) that @ should cross-reference.
.end_defmac

.defun defun-compatibility x
This function is used by 3defun* and the compiler to convert
Maclisp-style lexpr, fexpr, and macro 3defun*s to Zetalisp
definitions.  2x* should be the cdr of a 3(defun ...)* form.
3defun-compatibility* will return a corresponding 3(defun ...)* or
3(macro ...)* form, in the usual Zetalisp format.  You shouldn't
ever need to call this yourself.
.end_defun

.defspec defselect
3defselect* defines a function which is a select-method.  This
function contains a table of subfunctions; when it is called, the first
argument, a symbol on the keyword package called the 2message name*,
is looked up in the table to determine which subfunction to call.  Each
subfunction can take a different number of arguments, and have a
different pattern of 3&optional* and 3&rest* arguments.
3defselect* is useful for a variety of "dispatching" jobs.  By analogy
with the more general message passing facilities described in (flavor),
the subfunctions are sometimes called 2methods* and the first argument
is sometimes called a 2message*.

The special form looks like
.lisp
(defselect (2function-spec* 2default-handler* 2no-which-operations*)
  (2message-name* (2args...*)
        2body...*)
  (2message-name* (2args...*)
        2body...*)
  ...)
.end_lisp

2function-spec* is the name of the function to be defined.
2default-handler* is optional; it must be a symbol and is a function which
gets called if the select-method is called with an unknown message.  If
2default-handler* is unsupplied or 3nil*, then an error occurs if an unknown
message is sent.  If 2no-which-operations* is non-3nil*, the
3:which-operations* method which would normally be supplied automatically is
suppressed.  The 3:which-operations* method takes no arguments and returns a
list of all the message names in the 3defselect*.

If 2function-spec* is a symbol, and 2default-handler* and 2no-which-operations*
are not supplied, then the first subform of the 3defselect* may be just 2function-spec*
by itself, not enclosed in a list.

The remaining subforms in a 3defselect* define methods.  2message-name* is the
message name, or a list of several message names if several messages are to be handled
by the same subfunction.  2args* is a lambda-list; it should not include the first
argument, which is the message name.  2body* is the body of the
function.

A method subform can instead look like:
.lisp
  (2message-name* . 2symbol*)
.end_lisp
In this case, 2symbol* is the name of a function which is to be called when the
2message-name* message is received.  It will be called with the same arguments
as the select-method, including the message symbol itself.
.end_defspec


@section Lambda-List Keywords
.cindex lambda-list keywords
.cindex "&" keywords
.setq lambda-list-keywords section-page

This section documents all the keywords that may appear in the
"lambda-list" (argument list) (see (lambda-list)) of a function, a
macro, or a special form.  Some of them are allowed everywhere, while
others are only allowed in one of these contexts; those are so
indicated.

.defvar lambda-list-keywords
The value of this variable is a list of all of the allowed "&" keywords.
Some of these are obsolete and don't do anything; the remaining ones
are listed below.
.end_defvar

.table 3
.item &optional
Separates the required arguments of a function from the optional arguments.
See (lambda-list).

.item &rest
Separates the required and optional arguments of a function from the rest argument.
There may be only one rest argument.  See (&rest) for full information about
rest arguments.  See (lambda-list).

.item &key
Separates the positional arguments and rest argument of a function from the keyword
arguments.  See (lambda-list).

.item &allow-other-keys
In a function which accepts keyword arguments, says that keywords
which are not recognized are allowed.  They and the corresponding values are
ignored, as far as keyword arguments are concerned, but they do become
part of the rest argument, if there is one.

.item &aux
Separates the arguments of a function from the auxiliary variables.
Following 3&aux* you can put entries of the form
.lisp
(2variable* 2initial-value-form*)
.end_lisp
or just 2variable* if you want it initialized to 3nil* or don't care what the initial
value is.

.item &special
Declares the following arguments and/or auxiliary variables to be special within
the scope of this function.

.item &local
Turns off a preceding 3&special* for the variables which follow.

.item &functional
Preceding an argument, tells the compiler that the value of this argument will be
a function.  When a caller of this function is compiled, if it passes a quoted
constant argument which looks like a function (a list beginning with the symbol
3lambda*) the compiler will know that it is intended to be a function rather
than a list that happens to start with that symbol, and will compile it.

.item &quote
Declares that the following arguments are not to be evaluated.  This is how you create
a special function.  See the caveats about special forms, on (special-form-caveat).

.item &eval
Turns off a preceding 3&quote* for the arguments which follow.

.item &list-of
This is for macros defined by 3defmacro* only.  Refer to (&list-of).

.item &body
This is for macros defined by 3defmacro* only.  It is similar to 3&rest*,
but declares to 3grindef* and the code-formatting module of the editor that
the body forms of a special form follow and should be indented accordingly.
Refer to (&body).
.end_table


@section How Programs Manipulate Definitions

.setq programs-that-manipulate-functions section-page

.defun fdefine function-spec definition &optional (carefully 3nil*) (no-query 3nil*)
This is the primitive which 3defun* and everything else in the system
uses to change the definition of a function spec.  If 2carefully* is
non-3nil*, which it usually should be, then only the basic definition
is changed, the previous basic definition is saved if possible (see
3undefun*, (undefun-fun)), and any encapsulations of the function such
as tracing and advice are carried over from the old definition to the
new definition.  2carefully* also causes the user to be queried if the
function spec is being redefined by a file different from the one that
defined it originally.  However, this warnings is suppressed if either the
argument 2no-query* is non-3nil*, or if the global variable
3inhibit-fdefine-warnings* is 3t*.

If 3fdefine* is called while a file is being loaded, it records what
file the function definition came from so that the editor can find the
source code.

If 2function-spec* was already defined as a
function, and 2carefully* is non-3nil*, the function-spec's
3:previous-definition* property is used to save the previous
definition.  If the previous definition is an interpreted function, it
is also saved on the 3:previous-expr-definition* property.  These
properties are used by the 3undefun* function ((undefun-fun)), which
restores the previous definition, and the 3uncompile* function
((uncompile-fun)), which restores the previous interpreted definition.
The properties for different kinds of function specs are stored in
different places; when a function spec is a symbol its properties are
stored on the symbol's property list.

3defun* and the other function-defining special forms all supply 3t*
for 2carefully* and 3nil* or nothing for 2no-query*.  Operations
which construct encapsulations, such as 3trace*, are the only ones
which use 3nil* for 2carefully*.
.end_defun

.defvar inhibit-fdefine-warnings
This variable is normally 3nil*.  Setting it to 3t* prevents
3fdefine* from warning you and asking about questionable function definitions such as
a function being redefined by a different file than defined it originally,
or a symbol that belongs to one package being defined by a file that
belongs to a different package.  Setting it to 3:just-warn* allows
the warnings to be printed out, but prevents the queries from happening;
it assumes that your answer is "yes", i.e. that it is all right to
redefine the function.
.end_defvar

.defvar sys:fdefine-file-pathname
While loading a file, this is the generic-pathname for the file.
The rest of the time it is 3nil*.  3fdefine* uses this to
remember what file defines each function.
.end_defvar

.defun fset-carefully symbol definition &optional force-flag
This function is obsolete.  It is equivalent to
.lisp
(fdefine 2symbol* 2definition* t 2force-flag*)
.end_lisp
.end_defun

.defun fdefinedp function-spec
This returns 3t* if 2function-spec* has a definition, or 3nil* if
it does not.
.end_defun

.defun fdefinition function-spec
This returns 2function-spec*'s definition.  If it has none, an error
occurs.
.end_defun

.defun fdefinition-location function-spec
This returns a locative pointing at the cell which contains
2function-spec*'s definition.  For some kinds of function specs,
though not for symbols, this can cause data structure to be created to
hold a definition.  For example, if 2function-spec* is of the
3:property* kind, then an entry may have to be added to the property
list if it isn't already there.  In practice, you should write 3(locf
(fdefinition 2function-spec*))* instead of calling this function
explicitly.
.end_defun

.defun fundefine function-spec
Removes the definition of 2function-spec*.  For symbols this
is equivalent to 3fmakunbound*.
If the function is encapsulated, 3fundefine* removes both the
basic definition and the encapsulations.  Some types of function specs
(3:location* for example) do not implement 3fundefine*.
3fundefine* on a 3:within* function spec removes the replacement
of 2function-to-affect*, putting the definition of 2within-function*
back to its normal state.  3fundefine* on a 3:method* function spec
removes the method completely, so that future messages will be handled
by some other method (see the flavor chapter).
.end_defun

.defun si:function-spec-get function-spec indicator
Returns the value of the 2indicator* property of 2function-spec*,
or 3nil* if it doesn't have such a property.
.end_defun

.defun si:function-spec-putprop function-spec value indicator
Gives 2function-spec* an 2indicator* property whose value is 2value*.
.end_defun

.defun undefun function-spec
If 2function-spec* has a saved previous basic definition, this
interchanges the current and previous basic definitions,
leaving the encapsulations alone.
This undoes the effect of a 3defun*, 3compile*, etc.
See also 3uncompile* ((uncompile-fun)).
.end_defun


@section How Programs Examine Functions

These functions take a function as argument and return information about
that function.  Some also accept a function spec and operate on its
definition.  The others do not accept function specs in general but do
accept a symbol as standing for its definition.  (Note that a symbol is
a function as well as a function spec).

.defun documentation function
Given a function or a function spec, this finds its documentation
string, which is stored in various different places depending on the
kind of function.  If there is no documentation, 3nil* is returned.
.end_defun

.defun debugging-info function
This returns the debugging info alist of 2function*, or 3nil* if it has none.
.end_defun

.defun arglist function &optional real-flag
3arglist* is given a function or a function spec, and returns its best
guess at the nature of the function's 3lambda*-list.  It can also
return a second value which is a list of descriptive names for the
values returned by the function.
	If 2function* is a symbol, 3arglist*
of its function definition is used.
	If the 2function* is an actual 3lambda*-expression,
its cadr, the lambda-list, is returned.  But if 2function*
is compiled, 3arglist* attempts to reconstruct the lambda-list of the original
definition, using whatever debugging information was saved by the compiler.
Sometimes the actual names of the bound variables are not available, and
3arglist* uses the symbol 3si:*unknown** for these.  Also, sometimes
the initialization of an optional parameter is too complicated
for 3arglist* to reconstruct; for these it returns the symbol
3si:*hairy**.
	Some functions' real argument lists are not what would be most
descriptive to a user.  A function may take a &rest argument for
technical reasons even though there are standard meanings for the first
element of that argument.  For such cases, the definition of the
function can specify, with a local declaration, a value to be returned
when the user asks about the argument list.  Example:
.lisp
(defun foo (&rest rest-arg)
  (declare (arglist x y &rest z))
  .....)
.end_lisp
2real-flag* allows the caller of 3arglist* to say that
the real argument list should be used even if a declared argument list exists.
Note that while normally 3declare*s are only for the compiler's benefit,
this kind of 3declare* affects all functions, including interpreted functions.

	3arglist* cannot be relied upon to return the exactly
correct answer, since some of the information may have been lost.
Programs interested in how many and what kind of arguments there are
should use 3args-info* instead.  In general 3arglist*
is to be used for documentation purposes, not for reconstructing
the original source code of the function.
	When a function returns multiple values, it is useful to give
the values names so that the caller can be reminded which value is
which.  By means of a 3return-list* declaration in the function's
definition, entirely analogous to the 3arglist* declaration above,
you can specify a list of mnemonic names for the returned values.  This
list will be returned by 3arglist* as the second value.
.lisp
(arglist 'arglist)
  => (function &optional real-flag) 1and* (arglist return-list)
.end_lisp
.end_defun

.defun args-info function
3args-info* returns a fixnum called the "numeric argument descriptor"
of the 2function*, which describes the way the function takes arguments.
This descriptor is used internally by the microcode, the evaluator, and
the compiler.  2function* can be a function or a function spec.

The information is stored in various bits and byte fields in the
fixnum, which are referenced by the symbolic names shown below.
By the usual Lisp Machine convention, those starting with a single "%"
are bit-masks (meant to be 3logand*'ed or 3bit-test*'ed with the number), and those
starting with "%%" are byte descriptors (meant to be used with 3ldb*
or 3ldb-test*).
	Here are the fields:
.table 3 0 500
.item %%arg-desc-min-args
'vindex %%arg-desc-min-args
This is the minimum number of arguments which may be passed
to this function, i.e. the number of "required" parameters.

.item %%arg-desc-max-args
'vindex %%arg-desc-max-args
This is the maximum number of arguments which may be passed
to this function, i.e. the sum of the number of "required"
parameters and the number of "optional" paramaters.
If there is a rest argument, this is not really the maximum
number of arguments which may be passed; an arbitrarily-large
number of arguments is permitted, subject to limitations on
the maximum size of a stack frame (about 200 words).

.item %arg-desc-evaled-rest
'vindex %arg-desc-evaled-rest
If this bit is set, the function has a "rest" argument, and it is not "quoted".

.item %arg-desc-quoted-rest
'vindex %arg-desc-quoted-rest
If this bit is set, the function has a "rest" argument, and it is "quoted".
Most special forms have this bit.

.item %arg-desc-fef-quote-hair
'vindex %arg-desc-fef-quote-hair
If this bit is set, there are some quoted arguments other
than the "rest" argument (if any), and the pattern of quoting is too complicated
to describe here.  The ADL (Argument Description List) in the FEF should be consulted.
This is only for special forms.

.item %arg-desc-interpreted
'vindex %arg-desc-interpreted
This function is not a compiled-code object, and a numeric argument descriptor
cannot be computed.
Usually 3args-info* will not return this bit, although 3%args-info* will.

.item %arg-desc-fef-bind-hair
'vindex %arg-desc-fef-bind-hair
There is argument initialization, or something else too
complicated to describe here.
The ADL (Argument Description List) in the FEF should be consulted.
.end_table

Note that 3%arg-desc-quoted-rest* and 3%arg-desc-evaled-rest* cannot both be set.
.end_defun

.defun %args-info function
This is an internal function; it is like 3args-info*
but does not work for interpreted functions.  Also, 2function*
must be a function, not a function spec.  It exists because it has
to be in the microcode anyway, for 3apply* and the basic
function-calling mechanism.
.end_defun

@c [This section could document a variety of other function-analysis
@c functions which are not on the global package, including the ones in eh
@c for getting arg names and so forth.]


@section "Encapsulations"
.cindex encapsulation
.cindex basic definition
.setq encapsulate section-page

The definition of a function spec actually has two parts: the 2basic
definition*, and 2encapsulations*.  The basic definition is what
functions like 3defun* create, and encapsulations are additions made by
3trace* or 3advise* to the basic definition.  The purpose of making
the encapsulation a separate object is to keep track of what was made by
3defun* and what was made by 3trace*.  If 3defun* is done a second
time, it replaces the old basic definition with a new one while leaving
the encapsulations alone.

Only advanced users should ever need to use encapsulations directly via
the primitives explained in this section.  The most common things to do
with encapsulations are provided as higher-level, easier-to-use features:
3trace* (see (trace-fun)) and 3advise* (see (advise-fun)).

The way the basic definition and the encapsulations are defined is that
the actual definition of the function spec is the outermost
encapsulation; this contains the next encapsulation, and so on.  The
innermost encapsulation contains the basic definition.  The way
this containing is done is as follows.
An encapsulation is actually a function whose debugging info alist
contains an element of the form
.lisp
(si:encapsulated-definition 2uninterned-symbol* 2encapsulation-type*)
.end_lisp
The presence of such an element in the debugging info alist
is how you recognize a function to be an encapsulation.  An encapsulation
is usually an interpreted function (a list starting with 3named-lambda*) but
it can be a compiled function also, if the application which created it
wants to compile it.

2uninterned-symbol*'s function definition is the thing that the
encapsulation contains, usually the basic definition of the function spec.  Or it
can be another encapsulation, which has in it another debugging info
item containing another uninterned symbol.  Eventually you get to a
function which is not an encapsulation; it does not have the sort of
debugging info item which encapsulations all have.  That function is the basic
definition of the function spec.

Literally speaking, the definition of the function spec is the
outermost encapsulation, period.  The basic definition is not the
definition.  If you are asking for the definition of the function spec
because you want to apply it, the outermost encapsulation is exactly
what you want.  But the basic definition can be found mechanically
from the definition, by following the debugging info alists.  So it
makes sense to think of it as a part of the definition.  In regard to
the function-defining special forms such as 3defun*, it is
convenient to think of the encapsulations as connecting between the
function spec and its basic definition.

An encapsulation is created with the macro 3si:encapsulate*.

.defmac si:encapsulate
A call to 3si:encapsulate* looks like
.lisp
(si:encapsulate 2function-spec* 2outer-function* 2type*
	     2body-form*
	     2extra-debugging-info*)
.end_lisp
All the subforms of this macro are evaluated.  In fact, the macro could
almost be replaced with an ordinary function, except for the way
2body-form* is handled.

2function-spec* evaluates to the function spec whose definition the
new encapsulation should become.  2outer-function* is another function
spec, which should often be the same one.  Its only purpose is to be
used in any error messages from 3si:encapsulate*.

2type* evaluates to a symbol which identifies the purpose of the
encapsulation; it says what the application is.  For example, it could
be 3advise* or 3trace*.  The list of possible types is defined by
the system because encapsulations are supposed to be kept in an order
according to their type (see 3si:encapsulation-standard-order*,
(si:encapsulation-standard-order-var)).  2type* should have an
3si:encapsulation-grind-function* property which tells 3grindef* what to
do with an encapsulation of this type.

2body-form* is a form which evaluates to the body of the
encapsulation-definition, the code to be executed when it is called.
Backquote is typically used for this expression; see (backquote).
3si:encapsulate* is a macro because, while 2body* is
being evaluated, the variable 3si:encapsulated-function* is bound to a
list of the form 3(function 2uninterned-symbol*)*, referring to the
uninterned symbol used to hold the prior definition of
2function-spec*.  If 3si:encapsulate* were a function, 2body-form*
would just get evaluated normally by the evaluator before 3si:encapsulate*
ever got invoked, and so there would be no opportunity to bind 3si:encapsulated-function*.
The form 2body-form* should contain 3(apply ,si:encapsulated-function arglist)*
somewhere if the encapsulation is
to live up to its name and truly serve to encapsulate the original
definition.  (The variable 3arglist* is bound by some of the code
which the 3si:encapsulate* macro produces automatically.  When the
body of the encapsulation is run 3arglist*'s value will be the list of
the arguments which the encapsulation received.)

2extra-debugging-info* evaluates to a list of extra items to put into
the debugging info alist of the encapsulation function (besides the one
starting with 3si:encapsulated-definition* which every encapsulation
must have).  Some applications find this useful for recording
information about the encapsulation for their own later use.

When a special function is encapsulated, the encapsulation is itself a
special function with the same argument quoting pattern.  (Not all quoting
patterns can be handled; if a particular special form's quoting pattern
cannot be handled, 3si:encapsulate* signals an error.)  Therefore,
when the outermost encapsulation is started, each argument has been
evaluated or not as appropriate.  Because each encapsulation calls the
prior definition with 3apply*, no further evaluation takes place, and the
basic definition of the special form also finds the arguments evaluated
or not as appropriate.  The basic definition may call 3eval* on some
of these arguments or parts of them; the encapsulations should not.

Macros cannot be encapsulated, but their expander functions can be; if
the definition of 2function-spec* is a macro, then 3si:encapsulate*
automatically encapsulates the expander function instead.  In this case,
the definition of the uninterned symbol is the original macro
definition, not just the original expander function.
It would not work for the encapsulation to apply the macro definition.
So during the evaluation of 2body-form*, 3si:encapsulated-function* is bound
to the form 3(cdr (function 2uninterned-symbol*))*, which extracts the
expander function from the prior definition of the macro.

Because only the expander function is actually encapsulated, the
encapsulation does not see the evaluation or compilation of the
expansion itself.  The value returned by the encapsulation is the
expansion of the macro call, not the value computed by the expansion.
.end_defspec

It is possible for one function to have multiple encapsulations,
created by different subsystems.  In this case, the order of
encapsulations is independent of the order in which they were made.
It depends instead on their types.  All possible encapsulation types
have a total order and a new encapsulation is put in the right place
among the existing encapsulations according to its type and their types.

.defvar si:encapsulation-standard-order
The value of this variable is a list of the allowed encapsulation types,
in the order that the encapsulations are supposed to be kept in
(innermost encapsulations first).  If you want to add new kinds
of encapsulations, you should add another symbol to this list.
Initially its value is
.lisp
(advise breakon trace si:rename-within)
.end_lisp
3advise* encapsulations are used to hold advice (see (advise-fun)).
3breakon* encapsulations are used for implementing 3breakon* (see (breakon-fun)).
3trace*
encapsulations are used for implementing tracing (see (trace-fun)).
3si:rename-within* encapsulations are used to record the fact that
function specs of the form 3(:within 2within-function*
2altered-function*)* have been defined.  The encapsulation goes on
2within-function* (see (rename-within-section) for more information).
.end_defvar

Every symbol used as an encapsulation type must be on the list
3si:encapsulation-standard-order*.  In addition, it should have an
3si:encapsulation-grind-function* property whose value is a function that
3grindef* will call to process encapsulations of that type.  This
function need not take care of printing the encapsulated function
because 3grindef* will do that itself.  But it should print any
information about the encapsulation itself which the user ought to see.
Refer to the code for the grind function for 3advise* to see how to
write one.

To find the right place in the ordering to insert a new encapsulation,
it is necessary to parse existing ones.  This is done with the function
3si:unencapsulate-function-spec*.

.defun si:unencapsulate-function-spec function-spec &optional encapsulation-types
This takes one function spec and returns another.  If the original
function spec is undefined, or has only a basic definition (that is,
its definition is not an encapsulation), then the original function
spec is returned unchanged.

If the definition of 2function-spec* is an encapsulation, then
its debugging info is examined to find the uninterned symbol which
holds the encapsulated definition, and also the encapsulation type.
If the encapsulation is of a type which is to be skipped over, the
uninterned symbol replaces the original function spec and the process
repeats.

The value returned is the uninterned symbol from inside the last
encapsulation skipped.  This uninterned symbol is the first one which
does not have a definition which is an encapsulation that should be
skipped.  Or the value can be 2function-spec* if 2function-spec*'s
definition is not an encapsulation which should be skipped.

The types of encapsulations to be skipped over are specified by
2encapsulation-types*.  This can be a list of the types to be
skipped, or 3nil* meaning skip all encapsulations (this is the default).  Skipping all
encapsulations means returning the uninterned symbol which holds the basic
definition of 2function-spec*.  That is, the 2definition* of
the function spec returned is the 2basic definition* of the function spec
supplied.  Thus,
.lisp
(fdefinition (si:unencapsulate-function-spec 'foo))
.end_lisp
returns the basic definition of 3foo*, and
.lisp
(fdefine (si:unencapsulate-function-spec 'foo) 'bar)
.end_lisp
sets the basic definition (just like using 3fdefine* with
2carefully* supplied as 3t*).

2encapsulation-types* can also be a symbol, which should be an
encapsulation type; then we skip all types which are supposed to come
outside of the specified type.  For example, if
2encapsulation-types* is 3trace*, then we skip all types of
encapsulations that come outside of 3trace* encapsulations, but we
do not skip 3trace* encapsulations themselves.  The result is a
function spec which is where the 3trace* encapsulation ought to
be, if there is one.  Either the definition of this function spec is a
3trace* encapsulation, or there is no 3trace* encapsulation
anywhere in the definition of 2function-spec*, and this function
spec is where it would belong if there were one.  For example,
.lisp
(let ((tem (si:unencapsulate-function-spec spec 'trace)))
  (and (eq tem (si:unencapsulate-function-spec tem '(trace)))
       (si:encapsulate tem spec 'trace `(...2body*...))))
.end_lisp
finds the place where a 3trace* encapsulation ought to go, and
makes one unless there is already one there.

.lisp
(let ((tem (si:unencapsulate-function-spec spec 'trace)))
  (fdefine tem (fdefinition (si:unencapsulate-function-spec
				tem '(trace)))))
.end_lisp
eliminates any 3trace* encapsulation by replacing it by whatever it
encapsulates.  (If there is no 3trace* encapsulation, this code
changes nothing.)

These examples show how a subsystem can insert its own type of
encapsulation in the proper sequence without knowing the names of any
other types of encapsulations.  Only the variable
3si:encapsulation-standard-order*, which is used by
3si:unencapsulate-function-spec*, knows the order.
.end_defun

@subsection "Rename-Within Encapsulations"
.cindex rename-within
.cindex function renaming
.setq rename-within-section section-page

One special kind of encapsulation is the type 3si:rename-within*.  This
encapsulation goes around a definition in which renamings of functions
have been done.

How is this used?

If you define, advise, or trace 3(:within foo bar)*, then 3bar*
gets renamed to 3altered-bar-within-foo* wherever it is called from
3foo*, and 3foo* gets a 3si:rename-within* encapsulation to
record the fact.  The purpose of the encapsulation is to enable
various parts of the system to do what seems natural to the user.
For example, 3grindef* (see (grindef-fun)) notices the
encapsulation, and so knows to print 3bar* instead of
3altered-bar-within-foo*, when grinding the definition of 3foo*.

Also, if you redefine 3foo*, or trace or advise it, the new
definition gets the same renaming done (3bar* replaced by
3altered-bar-within-foo*).  To make this work, everyone who alters
part of a function definition should pass the new part of the
definition through the function 3si:rename-within-new-definition-maybe*.

.defun si:rename-within-new-definition-maybe function-spec new-structure
Given 2new-structure* which is going to become a part of the
definition of 2function-spec*, perform on it the replacements
described by the 3si:rename-within* encapsulation in the
definition of 2function-spec*, if there is one.  The altered
(copied) list structure is returned.

It is not necessary to call this function yourself when you replace
the basic definition because 3fdefine* with 2carefully*
supplied as 3t* does it for you.  3si:encapsulate* does this
to the body of the new encapsulation.  So you only need to call 
3si:rename-within-new-definition-maybe* yourself if you are rplac'ing
part of the definition.

For proper results, 2function-spec* must be the outer-level function
spec.  That is, the value returned by 3si:unencapsulate-function-spec*
is 2not* the right thing to use.  It will have had one or more
encapsulations stripped off, including the 3si:rename-within*
encapsulation if any, and so no renamings will be done.
.end_defun

@chapter "Closures"
'cindex "closure"
.setq closure section-page
.setq closure-chapter chapter-number
'cindex coroutine

	A 2closure* is a type of Lisp functional object useful
for implementing certain advanced access and control structures.
Closures give you more explicit control over the
environment, by allowing you to save the environment created
by the entering of a dynamic contour (i.e. a 3lambda*, 3do*,
3prog*, 3progv*, 3let*, or any of several other special
forms), and then use that environment
elsewhere, even after the contour has been exited.

@section "What a Closure Is"

	There is a view of lambda-binding which we will use in this
section because it makes it easier to explain what closures do.  In
this view, when a variable is bound, a new value cell is created for it.
The old value cell is saved away somewhere and is inaccessible.  Any
references to the variable will get the contents of the new value cell,
and any 3setq*'s will change the contents of the new value cell.
When the binding is undone, the new value cell goes away, and the old
value cell, along with its contents, is restored.

	For example, consider the following sequence of Lisp forms:
.lisp
(setq a 3)

(let ((a 10))
  (print (+ a 6)))

(print a)
.end_lisp
Initially there is a value cell for 3a*, and the 3setq* form makes
the contents of that value cell be 33*.  Then the
3lambda*-combination is evaluated.  3a* is bound to 310*: the old
value cell, which still contains a 33*, is saved away, and a new
value cell is created with 310* as its contents.  The reference to
3a* inside the 3lambda* expression evaluates to the current binding
of 3a*, which is the contents of its current value cell, namely
310*.  So 316* is printed.  Then the binding is undone, discarding
the new value cell, and restoring the old value cell which still
contains a 33*.  The final 3print* prints out a 33*.

	The form 3(closure 2var-list* 2function*)*, where
2var-list* is a list of variables and 2function* is any function,
creates and returns a closure.  When this closure is applied to some
arguments, all of the value cells of the variables on 2var-list* are
saved away, and the value cells that those variables had 2at the time
3closure* was called* (that is, at the time the closure was created)
are made to be the value cells of the symbols.  Then 2function* is
applied to the argument.  (This paragraph is somewhat complex, but it
completely describes the operation of closures; if you don't understand
it, come back and read it again after reading the next two paragraphs.)

	Here is another, lower level explanation.  The closure object
stores several things inside of it.  First, it saves the 2function*.
Secondly, for each variable in 2var-list*, it remembers what that
variable's value cell was when the closure was created.
Then when the closure is called as a function, it first temporarily restores
the value cells it has remembered inside the closure, and then applies 2function* to the
same arguments to which the closure itself was applied.  When the function
returns, the value cells are restored to be as they were before the closure
was called.

	Now, if we evaluate the form
.lisp
(setq a 
      (let ((x 3))
	(closure '(x) 'frob)))
.end_lisp
what happens is that a new value cell is created for 3x*, and its
contents is a fixnum 33*.  Then a closure is created, which remembers
the function 3frob*, the symbol 3x*, and that value cell.
Finally the old value cell of 3x* is restored, and the closure is
returned.  Notice that the new value cell is still around, because
it is still known about by the closure.  When the closure is applied,
say by doing 3(funcall a 7)*,
this value cell will be restored and the value of 3x* will be 33*
again.  If 3frob* uses 3x* as a free variable, it will see 33*
as the value.

	A closure can be made around any function, using any form
which evaluates to a function.  The form could evaluate to a
lambda expression, as in 3'(lambda () x)*, or to a compiled function,
as would 3(function (lambda () x))*.  In the example above, the
form is 3'frob* and it evaluates to the symbol 3frob*.  A
symbol is also a good function.  It is usually better to close around
a symbol which is the name of the desired function, so that the
closure points to the symbol.  Then, if the symbol is redefined, the
closure will use the new definition.  If you actually prefer that the
closure continue to use the old definition which was current when the
closure was made, then close around the definition of the symbol rather
than the symbol itself.  In the above example, that would be done by
.lisp
(closure '(x) (function frob))
.end_lisp

	Because of the way closures are implemented, the variables to be
closed over must not get turned into "local variables" by the compiler.
Therefore, all such variables must be declared special.  This can be
done with an explicit 3declare* (see (declare-fun)), with a special form
such as 3defvar* ((defvar-fun)), or with 3let-closed*
((let-closed-fun)).  In simple cases, a 3local-declare* around the
binding will do the job.  Usually the compiler can tell when a special
declaration is missing, but in the case of making a closure the compiler
detects this after already acting on the assumption that the variable is
local, by which time it is too late to fix things.  The compiler will
warn you if this happens.

	In Zetalisp's implementation of closures,
lambda-binding never really allocates any storage to create new value
cells.  Value cells are only created by the 3closure* function
itself, when they are needed.  Thus, implementors of large systems need
not worry about storage allocation overhead from this mechanism if they
are not using closures.

	Zetalisp closures are not closures in the true sense,
as they do not save the whole variable-binding environment; however,
most of that environment is irrelevant, and the explicit
declaration of which variables are to be closed allows the
implementation to have high efficiency.
They also allow the programmer to explicitly choose for each variable
whether it is to be bound at the point of call or
bound at the point of definition (e.g. creation of the closure), a choice
which is not conveniently available in other languages.  In addition the
program is clearer because the intended effect of the closure is made
manifest by listing the variables to be affected. 

.cindex internal value cell
.cindex external value cell
The implementation of closures (which it not usually necessary for you
to understand) involves two kinds of value cells.  Every symbol has an
2internal value cell*, which is where its value is normally stored.
When a variable is closed over by a closure, the variable gets an
2external value cell* to hold its value.  The external value cells
behave according to the lambda-binding model used earlier in this
section.  The value in the external value cell is found through the
usual access mechanisms (such as evaluating the symbol, calling
3symeval*, etc.), because the internal value cell is made to contain
an invisible pointer to the external value cell currently in effect.
A symbol will use such an invisible pointer whenever its current value
cell is a value cell that some closure is remembering; at other times,
there won't be an invisible pointer, and the value will just reside in the
internal value cell.

@section "Examples of the Use of Closures"

One thing we can do with closures is to implement a 2generator*, which
is a kind of function which is called successively to obtain successive elements
of a sequence.
We will implement a function 3make-list-generator*, which takes a list,
and returns a generator which will return successive
elements of the list.  When it gets to the end it should return 3nil*.

	The problem is that in between calls to the generator, the generator
must somehow remember where it is up to in the list.  Since all of its
bindings are undone when it is exited, it cannot save this information in
a bound variable.  It could save it in a global variable, but the problem
is that if we want to have more than one list generator at a time, they
will all try to use the same global variable and get in each other's way.

	Here is how we can use closures to solve the problem:
.lisp
(defun make-list-generator (l)
    (declare (special l))
    (closure '(l)
	     (function (lambda ()
			  (prog1 (car l)
				 (setq l (cdr l)))))))
.end_lisp
Now we can make as many list generators as we like; they won't get
in each other's way because each has its own (external) value cell for 3l*.
Each of these value cells was created when the 3make-list-generator*
function was entered, and the value cells are remembered by the closures.

The following form uses closures to create an advanced accessing environment:
.lisp
(declare (special a b))

(defun foo ()
   (setq a 5))

(defun bar ()
   (cons a b))

(let ((a 1)
      (b 1))
   (setq x (closure '(a b) 'foo))
   (setq y (closure '(a b) 'bar)))
.end_lisp
When the 3let* is entered, new value cells are created for the symbols
3a* and 3b*, and two closures are created that both point to those
value cells.  If we do 3(funcall x)*, the function 3foo* will
be run, and it will change the contents of the remembered value cell
of 3a* to 35*.  If we then do 3(funcall y)*, the function 3bar*
will return 3(5 . 1)*.  This shows that the value cell of 3a* seen
by the closure 3y* is the same value cell seen by the closure 3x*.  The
top-level value cell of 3a* is unaffected.

@section Closure-Manipulating Functions

.defun closure var-list function
This creates and returns a closure of 2function* over the variables
in 2var-list*.  Note that all variables on 2var-list*
must be declared special if the function is to compile correctly.
.end_defun

To test whether an object is a closure, use the 3closurep* predicate
(see (closurep-fun)).  The 3typep* function will return the symbol
3closure* if given a closure.  3(typep 2x* 'closure)* is equivalent
to 3(closurep 2x*)*.

.defun symeval-in-closure closure symbol
This returns the binding of 2symbol* in the environment of 2closure*;
that is, it returns what you would get if you restored the value cells
known about by 2closure* and then evaluated 2symbol*.
This allows you to "look around inside" a closure.
If 2symbol* is not closed over by 2closure*, this is just like 3symeval*.
.end_defun

.defun set-in-closure closure symbol x
This sets the binding of 2symbol* in the environment of 2closure*
to 2x*; that is, it does what would happen if you restored the value cells
known about by 2closure* and then set 2symbol* to 2x*.
This allows you to change the contents of the value cells known about
by a closure.
If 2symbol* is not closed over by 2closure*, this is just like 3set*.
.end_defun

.defun locate-in-closure closure symbol
This returns the location of the place in 2closure* where the saved
value of 2symbol* is stored.  An equivalent form is
3(locf (symeval-in-closure 2closure* 2symbol*))*.
.end_defun

.defun closure-alist closure
Returns an alist of 3(2symbol* . 2value*)* pairs describing the
bindings which the closure performs when it is called.  This list is not
the same one that is actually stored in the closure; that one contains
pointers to value cells rather than symbols, and 3closure-alist*
translates them back to symbols so you can understand them.  As a result,
clobbering part of this list will not change the closure.
.end_defun

.defun closure-function closure
Returns the closed function from 2closure*.  This is the function
which was the second argument to 3closure* when the closure was
created.
.end_defun

.defspec let-closed ((variable value)...) function
When using closures, it is very common to bind a set of variables with
initial values, and then make a closure over those variables.  Furthermore
the variables must be declared as "special" for the compiler.  3let-closed*
is a special form which does all of this.  It is best described by example:
.lisp
(let-closed ((a 5) b (c 'x))
   (function (lambda () ...)))

1macro-expands into*

(local-declare ((special a b c))
   (let ((a 5) b (c 'x))
      (closure '(a b c)
         (function (lambda () ...)))))
.end_lisp
.end_defspec

@section "Entities"
.setq entity section-page
.cindex entity
An entity is almost the same thing as a closure; the data type is
nominally different but an entity behaves just like a closure when
applied.  The difference is that some system functions, such as
3print*, operate on them differently.  When 3print* sees a closure,
it prints the closure in a standard way.  When 3print* sees an entity,
it calls the entity to ask the entity to print itself.

To some degree, entities are made obsolete by flavors (see (flavor)).
The use of entities as message-receiving objects is explained in (flavor-entity).

.defun entity variable-list function
Returns a newly constructed entity.  This function is just like the
function 3closure* except that it returns an entity instead of a
closure.
.end_defun

To test whether an object is an entity, use the 3entityp* predicate
(see (entityp-fun)).  The functions 3symeval-in-closure*,
3closure-alist*, 3closure-function*, etc. also operate on entities.

@c Need examples!

@chapter "Stack Groups"
'cindex "stack group"
.setq stack-group section-page
.setq stack-group-chapter chapter-number
'cindex coroutine

	A 2stack group* (usually abbreviated "SG") is a type of Lisp
object useful for implementation of certain advanced control structures
such as coroutines and generators.  Processes, which are a kind of
coroutine, are built on top of stack groups (see (process)).  A stack
group represents a computation and its internal state, including the
Lisp stack.

	At any time, the computation being performed by the Lisp
Machine is associated with one stack group, called the 2current* or
2running* stack group.  The operation of making some stack group be
the current stack group is called a 2resumption* or a 2stack group
switch*; the previously running stack group is said to have 2resumed* the new
stack group.  The 2resume* operation has two parts: first, the state
of the running computation is saved away inside the current stack group,
and secondly the state saved in the new stack group is restored, and the
new stack group is made current.  Then the computation of the new stack
group resumes its course.

	The stack group itself holds a great deal of state information.
It contains the control stack, or "regular PDL".  The control stack is
what you are shown by the backtracing commands of the error handler
(Control-B, Meta-B, and Control-Meta-B); it remembers the function which
is running, its caller, its caller's caller, etc., and
the point of execution of each function (the "return addresses" of each
function).  A stack group also contains the environment stack, or
"special PDL".  This contains all of the values saved by
3lambda*-binding.  The name "stack group" derives from the existence
of these two stacks.  Finally, the stack group contains various internal state
information (contents of machine registers and so on).

	When the state of the current
stack group is saved away, all of its bindings are undone,
and when the state is restored, the bindings are put back.
Note that although bindings are temporarily undone, unwind-protect
handlers are 2not* run by a stack-group switch (see 3let-globally*,
(let-globally-fun)).

	Each stack group is a separate environment for purposes of function
calling, throwing, dynamic variable binding, and condition signalling.  All
stack groups run in the same address space, thus they share the same Lisp
data and the same global (not lambda-bound) variables.

When a new stack group is created, it is empty: it doen't contain the state
of any computation, so it can't be resumed.  In order to get things going,
the stack group must be set to an initial state.  This is done by "presetting"
the stack group.  To preset a stack group, you supply a function and a set
of arguments.  The stack group is placed in such a state that when it is
first resumed, this function will call those arguments.  The function is
called the "initial" function of the stack group.

@section Resuming of Stack Groups

The interesting thing that happens to stack groups is that they resume
each other.  When one stack group resumes a second stack group, the
current state of Lisp execution is saved away in the first stack group,
and is restored from the second stack group.  Resuming is also called
"switching stack groups".

At any time, there is one
stack group associated with the current computation; it is called the
current stack group.  The computations associated with other stack
groups have their states saved away in memory, and they are not
computing.  So the only stack group that can do anything at all, in
particular resuming other stack groups, is the current one.

You can look at things from the point of view of one computation.  Suppose
it is running along, and it resumes some stack group.  Its state is saved
away into the current stack group, and the computation associated with the
one it called starts up.  The original computation lies dormant in the
original stack group, while other computations go around resuming each other,
until finally the original stack group is resumed by someone.  Then the
computation is restored from the stack group and gets to run again.

There are several ways that the current stack group can resume other
stack groups.  This section describes all of them.

.cindex resumer
Associated with each stack group is a 2resumer*.  The resumer is 3nil*
or another stack group.  Some forms of resuming examine and alter the
resumer of some stack groups.

Resuming has another ability: it can transmit a Lisp object from the
old stack group to the new stack group.  Each stack group specifies
a value to transmit whenever it resumes another stack group; whenever
a stack group is resumed, it receives a value.

In the descriptions below, let 2c* stand for the current stack group,
2s* stand for some other stack group, and 2x* stand for any
arbitrary Lisp object.

Stack groups can be used as functions.  They accept one argument.  If
2c* calls 2s* as a function with one argument 2x*, then 2s* is
resumed, and the object transmitted is 2x*.  When 2c* is resumed
(usually--but not necessarily--by 2s*), the object transmitted by that
resumption will be returned as the value of the call to 2s*.  This is
one of the simple ways to resume a stack group: call it as a function.
The value you transmit is the argument to the function, and the value
you receive is the value returned from the function.  Furthermore, this
form of resuming sets 2s*'s resumer to be 2c*.

Another way to resume a stack group is to use 3stack-group-return*.
Rather than allowing you to specify which stack group to resume,
this function always resumes the resumer of the current stack group.
Thus, this is a good way to resume whoever it was who resumed 2you*,
assuming he did it by function-calling.  3stack-group-return* takes
one argument which is the object to transmit.  It returns when someone
resumes the current stack group, and returns one value, the object
that was transmitted by that resumption.  3stack-group-return* does
not affect the resumer of any stack group.

The most fundamental way to do resuming is with 3stack-group-resume*,
which takes two arguments: the stack group, and a value to transmit.
It returns when someone resumes the current stack group, returning
the value that was transmitted by that resumption,
and does not affect any stack group's resumer.

If the initial function of 2c* attempts to return a value 2x*, the
regular kind of Lisp function return cannot take place, since the
function did not have any caller (it got there when the stack group was
initialized).  So instead of normal function returning, a "stack group
return" happens.  2c*'s resumer is resumed, and the value transmitted
is 2x*.  2c* is left in a state ("exhausted") from which it cannot
be resumed again; any attempt to resume it will signal an error.  Presetting
it will make it work again.

Those are the "voluntary" forms of stack group switch; a resumption
happens because the computation said it should.  There are also two
"involuntary" forms, in which another stack group is resumed without the
explicit request of the running program.

If an error occurs, the current stack group resumes the error handler stack
group.  The value transmitted is partially descriptive of the error, and
the error handler looks inside the saved state of the erring stack group
to get the rest of the information.  The error handler recovers from the
error by changing the saved state of the erring stack group and then
resuming it.

When certain events occur, typically a 1-second clock tick, a 2sequence
break* occurs.  This forces the current stack group to resume a special
stack group called the 2scheduler* (see (scheduler)).  The scheduler
implements processes by resuming, one after another, the stack group of each
process that is ready to run.

.defvar sys:%current-stack-group-previous-stack-group
The binding of this variable is the resumer of the current stack group.
.end_defvar

.defvar sys:%current-stack-group
The value of 3sys:%current-stack-group* is the stack group which is
currently running.  A program can use this variable to get its hands
on its own stack group.
.end_defvar

@section Stack Group States

A stack group has a 2state*, which controls what it will do when it
is resumed.  The code number for the state is returned by the function
3sys:sg-current-state*.  This number will be the value of one of
the following symbols.  Only the states actually used by the current
system are documented here; some other codes are defined but not used.

.table 3 500
.item sys:sg-state-active
The stack group is the current one.

.item sys:sg-state-resumable
The stack group is waiting to be resumed, at which time it will pick up
its saved machine state and continue doing what it was doing before.

.item sys:sg-state-awaiting-return
The stack group called some other stack group as a function.  When it is
resumed, it will return from that function call.

.item sys:sg-state-awaiting-initial-call
The stack group has been preset (see below) but has never been called.
When it is resumed, it will call its initial function with the preset arguments.

.item sys:sg-state-exhausted
The stack group's initial function has returned.  It cannot be resumed.

.item sys:sg-state-awaiting-error-recovery
When a stack group gets an error it goes into this state, which prevents
anything from happening to it until the error handler has looked at it.
In the meantime it cannot be resumed.

.item sys:sg-state-invoke-call-on-return
When the stack group is resumed, it will call a function.  The function
and arguments are already set up on the stack.  The debugger uses this
to force the stack group being debugged to do things.
.end_table

@section Stack Group Functions

.defun make-stack-group name &optional options
This creates and returns a new stack group.  2name* may be any symbol
or string; it is used in the stack group's printed representation.
2options* is a list of alternating keywords and values.  The options
are not too useful; most calls to 3make-stack-group* don't need any
options at all.  The options are:
.table 3
.kitem :sg-area
The area in which to create the stack group structure itself.
Defaults to the default area (the value of 3default-cons-area*).

.kitem :regular-pdl-area
The area in which to create the regular PDL.  Note that this
may not be any area; only certain areas will do, because regular PDLs
are cached in a hardware device called the 2pdl buffer*.
The default is 3sys:pdl-area*.

.kitem :special-pdl-area
The area in which to create the special PDL.
Defaults to the default area (the value of 3default-cons-area*).

.kitem :regular-pdl-size
Length of the regular PDL to be created.  Defaults to 3000.

.kitem :special-pdl-size
Length of the special PDL to be created.  Defaults to 2000.

.kitem :swap-sv-on-call-out
.item1 :swap-sv-of-sg-that-calls-me
'kindex :swap-sv-of-sg-that-calls-me make-stack-group
These flags default to 1.  If these are 0, the system does not maintain
separate binding environments for each stack group.  You do not want
to use this feature.

.kitem :trap-enable
This determines what to do if a microcode error occurs.
If it is 31* the system tries to handle the error;
if it is 30* the machine halts.  Defaults to 1.

.kitem :safe
If this flag is 31* (the default), a strict call-return discipline among
stack-groups is enforced.  If 30*, no restriction on stack-group
switching is imposed.
@c I could explain this a lot better if I understood it.
.end_table
.end_defun

.defun stack-group-preset stack-group function &rest arguments
This sets up 2stack-group* so that when it is resumed,
2function* will be applied to 2arguments* within the stack group.
Both stacks are made empty; all saved state in the stack group is destroyed.
3stack-group-preset* is typically used to initialize a stack group just after it is made,
but it may be done to any stack group at any time.  Doing this to a stack
group which is not exhausted will destroy its present state without
properly cleaning up by running 3unwind-protect*s.
.end_defun

.defun stack-group-resume s x
Resumes 2s*, transmitting the value 2x*.
No stack group's resumer is affected.
.end_defun

.defun stack-group-return x
Resumes the current stack group's resumer, transmitting the value 2x*.
No stack group's resumer is affected.
.end_defun

.defun symeval-in-stack-group symbol sg &optional frame as-if-current
Evaluates the variable 2symbol* in the binding environment of
2sg*.  If 2frame* is not 3nil*, if evaluates 2symbol* in the
binding environment of execution in that frame.  (A frame is an index
in the stack group's regular pdl).

Two values are returned: the symbol's value, and a locative to where
the value is stored.  If 2as-if-current* is not 3nil*, the
locative points to where the value 2would* be stored if 2sg* were
running.  This may be different from where the value is stored now;
for example, the current binding in stack group 2sg* is stored in
2symbol*'s value cell when 2sg* is running, but is probably
stored in 2sg*'s special pdl when 2sg* is not running.
2as-if-current* makes no difference if 2sg* actually 2is*
the current stack group.

If 2symbol* is unbound in the specified stack group and frame,
this will get an unbound-variable error.
.end_defun

There are a large number of functions in the 3sys:* and 3eh:* packages
for manipulating the internal details of stack groups.  These are not
documented here as they are not necessary for most users or even system
programmers to know about.  Refer to the file SYS: LMWIN; EH LISP for them.

@c If eh:unwind-sg was global it might be documented here
@c If there was a way to "interrupt" a stack group (force it to call a function)
@c it would be documented here.  There is only force-break currently.


@section Input/Output in Stack Groups
.setq sg-terminal-io-issues section-page

	Because each stack group has its own set of dynamic bindings, a
stack group will not inherit its creator's value of 3terminal-io*
(see (terminal-io-var)), nor its caller's, unless you make special
provision for this.  The 3terminal-io* a stack group gets by default
is a "background" stream which does not normally expect to be used.  If
it is used, it will turn into a "background window" which will request
the user's attention.  Usually this is because an error printout is
trying to be printed on the stream.  [This will all be explained
in the window system documentation.]

	If you write a program that uses multiple stack groups, and you want
them all to do input and output to the terminal, you should pass the
value of 3terminal-io* to the top-level function of each stack group
as part of the 3stack-group-preset*, and that function should bind
the variable 3terminal-io*.

	Another technique is to use a closure as the top-level function
of a stack group.  This closure can bind 3terminal-io* and any other
variables that are desired to be shared between the stack group and its
creator.


@section An Example of Stack Groups

The canonical coroutine example is the so-called samefringe problem:
Given two trees, determine whether they contain the same
atoms in the same order, ignoring parenthesis structure.  A better
way of saying this is, given two binary trees built out of conses,
determine whether the sequence of atoms on the fringes of the trees
is the same, ignoring differences in the arrangement of the
internal skeletons of the two trees.  Following the usual rule
for trees, 3nil* in the cdr of a cons is to be ignored.

One way of solving this problem is to use 2generator* coroutines.
We make a generator for each tree.  Each time the generator is called
it returns the next element of the fringe of its tree.  After the
generator has examined the entire tree, it returns a special "exhausted"
flag.  The generator is most naturally written as a recursive function.
The use of coroutines, i.e. stack groups, allows the two generators to
recurse separately on two different control stacks without having to
coordinate with each other.

The program is very simple.  Constructing it in the usual bottom-up style,
we first write a recursive function which takes a tree and 3stack-group-return*s
each element of its fringe.  The 3stack-group-return* is how the generator
coroutine delivers its output.  We could easily test this function by changing
3stack-group-return* to 3print* and trying it on some examples.
.lisp
(defun fringe (tree)
  (cond ((atom tree) (stack-group-return tree))
	(t (fringe (car tree))
	   (if (not (null (cdr tree)))
	       (fringe (cdr tree))))))
.end_lisp

Now we package this function inside another, which takes care of
returning the special "exhausted" flag.
.lisp
(defun fringe1 (tree exhausted)
  (fringe tree)
  exhausted)
.end_lisp

The 3samefringe* function takes the two trees as arguments and returns
3t* or 3nil*.  It creates two stack groups to act as the two
generator coroutines, presets them to run the 3fringe1* function, then
goes into a loop comparing the two fringes.  The value is 3nil* if a difference
is discovered, or 3t* if they are still the same when the end is reached.
.lisp
(defun samefringe (tree1 tree2)
  (let ((sg1 (make-stack-group "samefringe1"))
	(sg2 (make-stack-group "samefringe2"))
	(exhausted (ncons nil)))
    (stack-group-preset sg1 #'fringe1 tree1 exhausted)
    (stack-group-preset sg2 #'fringe1 tree2 exhausted)
    (do ((v1) (v2)) (nil)
      (setq v1 (funcall sg1 nil)
	    v2 (funcall sg2 nil))
      (cond ((neq v1 v2) (return nil))
	    ((eq v1 exhausted) (return t))))))
.end_lisp

Now we test it on a couple of examples.
.lisp
(samefringe '(a b c) '(a (b c))) => t
(samefringe '(a b c) '(a b c d)) => nil
.end_lisp

The problem with this is that a stack group is quite a large object, and
we make two of them every time we compare two fringes.  This is a lot of
unnecessary overhead.  It can easily be eliminated with a modest amount
of explicit storage allocation, using the resource facility (see
(defresource-fun)).  While we're at it, we can avoid making the
exhausted flag fresh each time; its only important property is that it
not be an atom.
.lisp
(defresource samefringe-coroutine ()
   :constructor (make-stack-group "for-samefringe"))

(defvar exhausted-flag (ncons nil))

(defun samefringe (tree1 tree2)
  (using-resource (sg1 samefringe-coroutine)
    (using-resource (sg2 samefringe-coroutine)
      (stack-group-preset sg1 #'fringe1 tree1 exhausted-flag)
      (stack-group-preset sg2 #'fringe1 tree2 exhausted-flag)
      (do ((v1) (v2)) (nil)
	(setq v1 (funcall sg1 nil)
	      v2 (funcall sg2 nil))
	(cond ((neq v1 v2) (return nil))
	      ((eq v1 exhausted-flag) (return t)))))))
.end_lisp

Now we can compare the fringes of two trees with no allocation of memory whatsoever.

@chapter "Locatives"
'cindex locative
.setq locative section-page

@section "Cells and Locatives"
'cindex cell
.setq locative-chapter chapter-number

	A 2locative* is a type of Lisp object used as a 2pointer*
to a 2cell*.  Locatives are inherently a more "low level" construct
than most Lisp objects; they require some knowledge of the nature of
the Lisp implementation.  Most programmers will never need them.

	A 2cell* is a machine word that can hold a (pointer to a)
Lisp object.  For example, a symbol has five cells: the print name cell,
the value cell, the function cell, the property list cell, and the
package cell.  The value cell holds (a pointer to) the binding of the
symbol, and so on.  Also, an array leader of length 2n* has 2n*
cells, and an 3art-q* array of 2n* elements has 2n* cells.
(Numeric arrays do not have cells in this sense.)  A locative is
an object that points to a cell; it lets you refer to a cell, so that
you can examine or alter its contents.

	There are a set of functions that create locatives to 
cells; the functions are documented with the kind of object to
which they create a pointer.  See 3ap-1*, 3ap-leader*,
3car-location*, 3value-cell-location*, etc.  The macro 3locf*
(see (locf-fun))
can be used to convert a form that accesses a cell to one that
creates a locative pointer to that cell: for example,
.lisp
(locf (fsymeval x)) ==> (function-cell-location x)
.end_lisp
3locf* is very convenient because it saves the writer and reader of
a program from having to remember the names of all the functions
that create locatives.

@section "Functions That Operate on Locatives"

	Either of the functions 3car* and 3cdr* 
(see (car-fun))
may be given a locative, and will return the contents of the cell at
which the locative points.
.lisp
1For example,*
(car (value-cell-location x))
1is the same as*
(symeval x)
.end_lisp

	Similarly, either of the functions 3rplaca* and 3rplacd* may
be used to store an object into the cell at which a locative
points.
.lisp
1For example,*
(rplaca (value-cell-location x) y)
1is the same as*
(set x y)
.end_lisp

If you mix locatives and lists, then it matters whether you use 3car*
and 3rplaca* or 3cdr* and 3rplacd*,
and care is required.  For example, the following function takes
advantage of 3value-cell-location* to cons up a list in forward
order without special-case code.  The first time through the loop,
the 3rplacd* is equivalent to 3(setq res ...)*; on later times
through the loop the 3rplacd* tacks an additional cons onto the end of the list.
.lisp
(defun simplified-version-of-mapcar (fcn lst)
  (do ((lst lst (cdr lst))
       (res nil)
       (loc (value-cell-location 'res)))
      ((null lst) res)
    (rplacd loc
	    (setq loc (ncons (funcall fcn (car lst)))))))
.end_lisp
You might expect this not to work if it was compiled and 3res*
was not declared special, since non-special compiled variables are
not represented as symbols.  However, the compiler arranges for
it to work anyway, by recognizing 3value-cell-location* of the name
of a local variable, and compiling it as something other than a call
to the 3value-cell-location* function.

@chapter "Subprimitives"
.setq subprimitive-chapter chapter-number
.cindex subprimitive
	Subprimitives are functions which are not intended to be used by
the average program, only by "system programs".  They allow one to
manipulate the environment at a level lower than normal Lisp.
They are described in this chapter.
Subprimitives usually have names which start with a 3%* character.
The "primitives" described in other sections of the manual typically
use subprimitives to accomplish their work.  The subprimitives take
the place of machine language in other systems, to some extent.
Subprimitives are normally hand-coded in microcode.
	There is plenty of stuff in this chapter that is not fully
explained; there are terms that are undefined, there are forward references,
and so on.  Furthermore, most of what is in here is considered subject
to change without notice.  In fact, this chapter does not exactly belong
in this manual, but in some other more low-level manual.  Since the latter
manual does not exist, it is here for the interim.
	Subprimitives by their very nature cannot do full checking.
Improper use of subprimitives can destroy the environment.
Subprimitives come in varying degrees of dangerousness.  Those without
a 3%* sign in their name cannot destroy the environment, but are
dependent on "internal" details of the Lisp implementation.  The ones
whose names start with a 3%* sign can
violate system conventions if used improperly.  The subprimitives are documented here
since they need to be documented somewhere, but this manual does not
document all the things you need to know in order to use them.  Still other
subprimitives are not documented here because they are very specialized.
Most of these are never used explicitly by a programmer; the compiler
inserts them into the program to perform operations which are expressed
differently in the source code.
	The most common problem you can cause using subprimitives, though
by no means the only one, is to create illegal pointers: pointers
that are, for one reason or another, according to storage conventions,
not allowed to exist.  The storage conventions are not documented;
as we said, you have to be an expert to correctly use a lot of the functions
in this chapter.  If you create such an illegal pointer, it probably will
not be detected immediately, but later on parts of the system may see it,
notice that it is illegal, and (probably) halt the Lisp Machine.
	In a certain sense 3car*, 3cdr*, 3rplaca*, and 3rplacd* are
subprimitives.  If these are given a locative instead of a list, they will
access or modify the cell addressed by the locative without regard to what
object the cell is inside.  Subprimitives can be used to create locatives
to strange places.

@section Data Types

.defun data-type arg
3data-type* returns a symbol which is the name
for the internal data-type of the "pointer" which represents 2arg*.
Note that some types as seen by the user are not distinguished from each other
at this level, and some user types may be represented by more than one
internal type.  For example, 3dtp-extended-number* is the symbol that
3data-type* would return for either a flonum or a bignum, even though
those two types are quite different.
The 3typep* function ((typep-fun)) is a higher-level
primitive which is more useful in most cases; normal programs
should always use 3typep* rather than 3data-type*.
Some of these type codes are internal tag fields that are never
used in pointers that represent Lisp objects at all, but they are
documented here anyway.
.table 3 0 1600
.item dtp-symbol
The object is a symbol.
.item dtp-fix
The object is a fixnum; the numeric value is contained in the address field of
the pointer.
.item dtp-small-flonum
The object is a small flonum; the numeric value is contained in the address field of
the pointer.
.item dtp-extended-number
The object is a flonum or a bignum.  This value will also be used for future numeric
types.
.item dtp-list
The object is a cons.
.item dtp-locative
The object is a locative pointer.
.item dtp-array-pointer
The object is an array.
.item dtp-fef-pointer
The object is a compiled function.
.item dtp-u-entry
The object is a microcode entry.
.item dtp-closure
The object is a closure; see (closure).
.item dtp-stack-group
The object is a stack-group; see (stack-group).
.item dtp-instance
The object is an instance of a flavor, i.e. an "active object".  See (flavor).
.item dtp-entity
The object is an entity; see (entity).
.item dtp-select-method
The object is a "select-method"; see (select-method).
.item dtp-header
An internal type used to mark the first word of a multi-word structure.
.item dtp-array-header
An internal type used in arrays.
.item dtp-symbol-header
An internal type used to mark the first word of a symbol.
.item dtp-instance-header
An internal type used to mark the first word of an instance.
.item dtp-null
Nothing to do with 3nil*.  This is used in unbound value and function cells.
.item dtp-trap
The zero data-type, which is not used.  This hopes to detect microcode bugs.
.item dtp-free
This type is used to fill free storage, to catch wild references.
.item dtp-external-value-cell-pointer
An "invisible pointer" used for external value cells,
which are part of the closure mechanism (see (closure)),
and used by compiled code to address value and function cells.
.item dtp-header-forward
An "invisible pointer" used to indicate that the structure containing
it has been moved elsewhere.  The "header word" of the structure is
replaced by one of these invisible pointers.  See the function 3structure-forward*
((structure-forward-fun)).
.item dtp-body-forward
An "invisible pointer" used to indicate that the structure containing
it has been moved elsewhere.  This points to the word containing
the header-forward, which points to the new copy of the structure.
.item dtp-one-q-forward
An "invisible pointer" used to indicate that the single cell containing
it has been moved elsewhere.
.item dtp-gc-forward
This is used by the copying garbage collector to flag the obsolete copy
of an object; it points to the new copy.
.end_table
.end_defun

.defvar q-data-types
The value of 3q-data-types* is a list of all of the symbolic
names for data types described above under 3data-type*.
These are the symbols whose print names begin
with "3dtp-*".  The values of these symbols are the internal numeric data-type codes
for the various types.
.end_defvar

.defun q-data-types type-code
Given the internal numeric data-type code, returns the corresponding symbolic name.
This "function" is actually an array.
.end_defun

@section Forwarding
.cindex invisible-pointer

An 2invisible pointer* is a kind of pointer that does not represent a
Lisp object, but just resides in memory.  There are several kinds of
invisible pointer, and there are various rules about where
they may or may not appear.  The basic property of an invisible pointer
is that if the Lisp Machine reads a word of memory and finds an
invisible pointer there, instead of seeing the invisible pointer as the
result of the read, it does a second read, at the location addressed by
the invisible pointer, and returns that as the result instead.  Writing behaves
in a similar fashion.  When the Lisp Machine writes a word of memory it first
checks to see if that word contains an invisible pointer; if so it goes to
the location pointed to by the invisible pointer and tries to write there instead.
Many subprimitives that read and write memory do not do this checking.

The simplest kind of invisible pointer has the data type code
3dtp-one-q-forward*.  It is used to forward a single word of memory to
someplace else.  The invisible pointers with data types
3dtp-header-forward* and 3dtp-body-forward* are used for moving
whole Lisp objects (such as cons cells or arrays) somewhere else.  The
3dtp-external-value-cell-pointer* is very similar to the
3dtp-one-q-forward*; the difference is that it is not "invisible" to
the operation of binding.  If the (internal) value cell of a symbol
contains a 3dtp-external-value-cell-pointer* that points to some other
word (the external value cell), then 3symeval* or 3set* operations on
the symbol will consider the pointer to be invisible and use the
external value cell, but binding the symbol will save away the
3dtp-external-value-cell-pointer* itself, and store the new value into
the internal value cell of the symbol.  This is how closures are implemented.

3dtp-gc-forward* is not an invisible pointer at all; it only appears in
"old space" and will never be seen by any program other than the garbage
collector.  When an object is found not to be garbage, and the garbage collector 
moves it from "old space" to "new space", a 3dtp-gc-forward* is left behind
to point to the new copy of the object.  This ensures that other references
to the same object get the same new copy.

.defun structure-forward old-object new-object
This causes references to 2old-object* to actually reference
2new-object*, by storing invisible pointers in 2old-object*.
It returns 2old-object*.

An example of the use of 3structure-forward* is 3adjust-array-size*.
If the array is being made bigger and cannot be expanded in place, a new
array is allocated, the contents are copied, and the old array is
structure-forwarded to the new one.  This forwarding ensures that pointers
to the old array, or to cells within it, continue to work.  When the garbage
collector goes to copy the old array, it notices the forwarding and uses
the new array as the copy; thus the overhead of forwarding disappears
eventually if garbage collection is in use.
.end_defun

.defun follow-structure-forwarding object
Normally returns 2object*, but if 2object* has been 3structure-forward*'ed,
returns the object at the end of the chain of forwardings.  If 2object*
is not exactly an object, but a locative to a cell in the middle of an object,
a locative to the corresponding cell in the latest copy of the object will be
returned.
.end_defun

.defun forward-value-cell from-symbol to-symbol
This alters 2from-symbol* so that it always has the same value
as 2to-symbol*, by sharing its value cell.  A 3dtp-one-q-forward*
invisible pointer is stored into 2from-symbol*'s value cell.
Do not do this while 2from-symbol* is 3lambda*-bound, as
the microcode does not bother to check for that case and something
bad will happen when 2from-symbol* gets unbound.  The microcode check
is omitted to speed up binding and unbinding.

To forward one arbitrary cell to another (rather than specifically
one value cell to another), given two locatives do
.lisp
(%p-store-tag-and-pointer 2locative1* dtp-one-q-forward 2locative2*)
.end_lisp
.end_defun

.defun follow-cell-forwarding loc evcp-p
2loc* is a locative to a cell.  Normally 2loc* is returned, but if the
cell has been forwarded, this follows the chain of forwardings and returns
a locative to the final cell.  If the cell is part of a structure which has
been forwarded, the chain of structure forwardings is followed, too.
If 2evcp-p* is 3t*, external value cell pointers are followed; if
it is 3nil* they are not.
.end_defun

@section Pointer Manipulation

It should again be emphasized that improper use of these functions
can damage or destroy the Lisp environment.  It is possible to create
pointers with illegal data-type, pointers to non-existent objects, and
pointers to untyped storage which will completely confuse the garbage
collector.

@c Narrative description of Q format, and data types, or pointer thereto.

.defun %data-type x
Returns the data-type field of 2x*, as a fixnum.
.end_defun

.defun %pointer x
Returns the pointer field of 2x*, as a fixnum.  For most
types, this is dangerous since the garbage collector can copy the object
and change its address.
.end_defun

.defun %make-pointer data-type pointer
This makes up a pointer, with 2data-type* in the data-type
field and 2pointer* in the pointer field, and returns it.  2data-type*
should be an internal numeric data-type code; these are the values of
the symbols that start with 3dtp-*.  2pointer* may be any object;
its pointer field is used.  This is
most commonly used for changing the type of a pointer.  Do not use this
to make pointers which are not allowed to be in the machine, such as
3dtp-null*, invisible pointers, etc.
.end_defun

.defun %make-pointer-offset data-type pointer offset
This returns a pointer with 2data-type* in the data-type
field, and 2pointer* plus 2offset* in the pointer field.  The
2data-type* and 2pointer* arguments are like those of 3%make-pointer*;
2offset* may be any object but is usually a fixnum.  The
types of the arguments are not checked; their pointer fields are simply
added together.  This is useful for constructing locative pointers
into the middle of an object.  However, note that it is illegal to
have a pointer to untyped data, such as the inside of a FEF or
a numeric array.
.end_defun

.defun %pointer-difference pointer-1 pointer-2
Returns a fixnum which is 2pointer-1* minus 2pointer-2*.
No type checks are made.  For the result to be meaningful, the two pointers
must point into the same object, so that their difference cannot change
as a result of garbage collection.
.end_defun

@section Analyzing Structures

.defun %find-structure-header pointer
This subprimitive finds the structure into which 
2pointer* points, by searching backward for a header.
It is a basic low-level function used by such things as the
garbage collector.
2pointer* is normally a locative, but its data-type is ignored.
Note that it is illegal to point into an "unboxed" portion of
a structure, for instance the middle of a numeric array.

In structure space, the "containing structure" of a pointer
is well-defined by system storage conventions.  In list space,
it is considered to be the contiguous, cdr-coded segment of
list surrounding the location pointed to.  If a cons of the list
has been copied out by 3rplacd*, the contiguous list includes
that pair and ends at that point.
.end_defun

.defun %find-structure-leader pointer
This is identical to 3%find-structure-header*, except that if the
structure is an array with a leader, this returns a locative pointer
to the leader-header, rather than returning the array-pointer itself.
Thus the result of 3%find-structure-leader* is always the lowest
address in the structure.  This is the one used internally by the garbage collector.
.end_defun

.defun %structure-boxed-size object
Returns the number of "boxed Q's" in 2object*.  This is the number
of words at the front of the structure which contain normal Lisp objects.
Some structures, for example FEFs and numeric arrays, contain additional
"unboxed Q's" following their "boxed Q's".
Note that the boxed size of a PDL (either regular or special) does not
include Q's above the current top of the PDL.  Those locations are boxed
but their contents is considered garbage, and is not protected by the
garbage collector.
.end_defun

.defun %structure-total-size object
Returns the total number of words occupied by the representation
of 2object*, including boxed Q's, unboxed Q's, and garbage Q's off
the ends of PDLs.
.end_defun

@section Creating Objects

.defun %allocate-and-initialize data-type header-type header second-word area size
	This is the subprimitive for creating most structured-type objects.
2area* is the area in which it is to be created, as a fixnum or a symbol.
2size* is the number of words to be allocated.  The value returned
points to the first word allocated, and has data-type 2data-type*.
Uninterruptibly, the words allocated are initialized so that storage
conventions are preserved at all times.  The first word, the header,
is initialized to have 2header-type* in its data-type field 
and 2header* in its pointer field.  The second word is initialized
to 2second-word*.  The remaining words are initialized to 3nil*.
The flag bits of all words are set to 0.  The cdr codes of all words
except the last are set to 3cdr-next*; the cdr code of the last word
is set to 3cdr-nil*.  It is probably a bad idea to rely on this.
.end_defun

The basic functions for creating list-type objects are 3cons* and
3make-list*; no special subprimitive is needed.  Closures, entities,
and select-methods are based on lists, but there is no primitive
for creating them.  To create one, create a list and then use 3%make-pointer*
to change the data type from 3dtp-list* to the desired type.

.defun %allocate-and-initialize-array header data-length leader-length area size
	This is the subprimitive for creating arrays, called only by 3make-array*.
It is different from 3%allocate-and-initialize* because arrays have
a more complicated header structure.
.end_defun

@section Locking Subprimitive

.defun %store-conditional pointer old new
This is the basic locking primitive.  2pointer* is a locative to
a cell which is uninterruptibly read and written.  If the contents of
the cell is 3eq* to 2old*, then it is replaced by 2new* and
3t* is returned.  Otherwise, 3nil* is returned and the contents
of the cell is not changed.
.end_defun

@section I/O Device Subprimitives

.defun %unibus-read address
Returns the contents of the register at the specified Unibus
address, as a fixnum.  You must specify a full 18-bit address.  This
is guaranteed to read the location only once.  Since the Lisp
Machine Unibus does not support byte operations, this always references
a 16-bit word, and so 2address* will normally be an even number.
.end_defun

.defun %unibus-write address data
Writes the 16-bit number 2data* at the specified Unibus
address, exactly once.
.end_defun

.defun %xbus-read io-offset
Returns the contents
of the register at the specified Xbus address.  2io-offset* is
an offset into the I/O portion of Xbus physical address space.
This is guaranteed to read the location exactly once.
The returned value can be either a fixnum or a bignum.
.end_defun

.defun %xbus-write io-offset data
Writes 2data*, which can be a fixnum or a bignum, into the register at
the specified Xbus address.  2io-offset* is an offset into the I/O
portion of Xbus physical address space.  This is guaranteed to write the
location exactly once.
.end_defun

.defun sys:%xbus-write-sync w-loc w-data delay sync-loc sync-mask sync-value
Does 3(%xbus-write 2w-loc* 2w-data*)*, but first synchronizes to
within about one microsecond of a certain condition.  The synchronization
is achieved by looping until
.lisp
(= (logand (%xbus-read 2sync-loc*) 2sync-mask*) 2sync-value*)
.end_lisp
is false, then looping until it is true, then looping 2delay* times.
Thus the write happens a specified delay after the leading edge of the
synchronization condition.
The number of microseconds of delay is roughly one third of 2delay*.
.end_defun

.defun sys:%halt
Stops the machine.
.end_defun

@section Special Memory Referencing

.defun %p-contents-offset base-pointer offset
This checks the cell pointed to by 2base-pointer* for
a forwarding pointer.  Having followed forwarding pointers to the
real structure pointed to, it adds 2offset* to the resulting
forwarded 2base-pointer* and returns the contents of that location.
.end_defun

.nopara
There is no 3%p-contents*, since 3car* performs that operation.

.defun %p-contents-as-locative pointer
Given a pointer to a memory location containing a pointer which isn't
allowed to be "in the machine" (typically an invisible pointer)
this function returns the contents of the location as a 3dtp-locative*.
It changes the disallowed data type to 3dtp-locative* so that you can safely
look at it and see what it points to.
.end_defun

.defun %p-contents-as-locative-offset base-pointer offset
This checks the cell pointed to by 2base-pointer* for
a forwarding pointer.  Having followed forwarding pointers to the
real structure pointed to, it adds 2offset* to the resulting
forwarded 2base-pointer*, fetches the contents of that location,
and returns it with the data type changed to 3dtp-locative* in case
it was a type which isn't allowed to be "in the machine" (typically
an invisible pointer).  This can be used, for example, to analyze the
3dtp-external-value-cell-pointer* pointers in a FEF, which are
used by the compiled code to reference value cells and function cells
of symbols.
.end_defun

.defun %p-store-contents pointer value
2value* is stored into the data-type and pointer
fields of the location addressed by 2pointer*.  The cdr-code
and flag-bit fields remain unchanged.  2value* is returned.
.end_defun

.defun %p-store-contents-offset value base-pointer offset
This checks the cell pointed to by 2base-pointer* for
a forwarding pointer.  Having followed forwarding pointers to the
real structure pointed to, it adds 2offset* to the resulting
forwarded 2base-pointer*, and stores 2value* into the data-type and pointer
fields of that location.  The cdr-code
and flag-bit fields remain unchanged.  2value* is returned.
.end_defun

.defun %p-store-tag-and-pointer pointer miscfields pntrfield
Creates a 2Q* by taking 8 bits from 2miscfields*
and 24 bits from 2pntrfield*, and stores that into the
location addressed by 2pointer*.  The low 5 bits of 2miscfields*
become the data-type, the next bit becomes the flag-bit, and the
top two bits become the cdr-code.  This is a good
way to store a forwarding pointer from one structure
to another (for example).
.end_defun

.defun %p-ldb ppss pointer
This is like 3ldb* but gets a byte from the location
addressed by 2pointer*.  Note that
you can load bytes out of the data type etc. bits, not just
the pointer field, and that the word loaded out of need not
be a fixnum.  The result returned is always a fixnum.
.end_defun

.defun %p-ldb-offset ppss base-pointer offset
This checks the cell pointed to by 2base-pointer* for
a forwarding pointer.  Having followed forwarding pointers to the
real structure pointed to, the byte specified by 2ppss* is
loaded from the contents of the location addressed by the forwarded
2base-pointer* plus 2offset*, and returned as a fixnum.
This is the way to reference byte fields within a structure
without violating system storage conventions.
.end_defun

.defun %p-dpb value ppss pointer
The 2value*, a fixnum, is stored into the byte selected
by 2ppss* in the word addressed by 2pointer*.  3nil* is returned.
You can use this to alter data types, cdr codes, etc.
.end_defun

.defun %p-dpb-offset value ppss base-pointer offset
This checks the cell pointed to by 2base-pointer* for
a forwarding pointer.  Having followed forwarding pointers to the
real structure pointed to, the 2value* is stored into the byte specified by 2ppss* in
the location addressed by the forwarded
2base-pointer* plus 2offset*.  3nil* is returned.
This is the way to alter unboxed data within a structure
without violating system storage conventions.
.end_defun

.defun %p-mask-field ppss pointer
This is similar to 3%p-ldb*, except that the selected
byte is returned in its original position within the word instead
of right-aligned.
.end_defun

.defun %p-mask-field-offset ppss base-pointer offset
This is similar to 3%p-ldb-offset*, except that the selected
byte is returned in its original position within the word instead
of right-aligned.
.end_defun

.defun %p-deposit-field value ppss pointer
This is similar to 3%p-dpb*, except that the selected
byte is stored from the corresponding bits of 2value* rather than
the right-aligned bits.
.end_defun

.defun %p-deposit-field-offset value ppss base-pointer offset
This is similar to 3%p-dpb-offset*, except that the selected
byte is stored from the corresponding bits of 2value* rather than
the right-aligned bits.
.end_defun

.defun %p-pointer pointer
Extracts the pointer field of the contents of the
location addressed by 2pointer* and returns
it as a fixnum.
.end_defun

.defun %p-data-type pointer
Extracts the data-type field of the contents of the
location addressed by 2pointer* and returns
it as a fixnum.
.end_defun

.defun %p-cdr-code pointer
Extracts the cdr-code field of the contents of the
location addressed by 2pointer* and returns
it as a fixnum.
.end_defun

.defun %p-flag-bit pointer
Extracts the flag-bit field of the contents of the
location addressed by 2pointer* and returns
it as a fixnum.
.end_defun

.defun %p-store-pointer pointer value
Clobbers the pointer field of the location
addressed by 2pointer* to 2value*, and returns 2value*.
.end_defun

.defun %p-store-data-type pointer value
Clobbers the data-type field of the location
addressed by 2pointer* to 2value*, and returns 2value*.
.end_defun

.defun %p-store-cdr-code pointer value
Clobbers the cdr-code field of the location
addressed by 2pointer* to 2value*, and returns 2value*.
.end_defun

.defun %p-store-flag-bit pointer value
Clobbers the flag-bit field of the location
addressed by 2pointer* to 2value*, and returns 2value*.
.end_defun

.defun %stack-frame-pointer
Returns a locative pointer to its caller's stack frame.  This
function is not defined in the interpreted Lisp environment; it only works
in compiled code.  Since it turns into a "misc" instruction,
the "caller's stack frame" really means "the frame for the FEF
that executed the 3%stack-frame-pointer* instruction".
.end_defun

@section Storage Layout Definitions

The following special variables have values which define the most important attributes
of the way Lisp data structures are laid out in storage.  In addition to the variables
documented here, there are many others which are more specialized.  They are not
documented in this manual since they are in the 3system* package rather than
the 3global* package.  The variables whose names start with 3%%* are
byte specifiers, intended to be used with subprimitives such as 3%p-ldb*.
If you change the value of any of these variables, you will probably bring the
machine to a crashing halt.

.defvar %%q-cdr-code
The field of a memory word which contains the cdr-code.  See (cdr-code).
.end_defvar

.defvar %%q-flag-bit
The field of a memory word which contains the flag-bit.  In most data structures
this bit is not used by the system and is available for the user.
.end_defvar

.defvar %%q-data-type
The field of a memory word which contains the data-type code.  See (data-type-fun).
.end_defvar

.defvar %%q-pointer
The field of a memory which contains the pointer address, or immediate data.
.end_defvar

.defvar %%q-pointer-within-page
The field of a memory word which contains the part of the address that lies
within a single page.
.end_defvar

.defvar %%q-typed-pointer
The concatenation of the 3%%q-data-type* and 3%%q-pointer* fields.
.end_defvar

.defvar %%q-all-but-typed-pointer
The field of a memory word which contains the tag fields, 3%%q-cdr-code*
and 3%%q-flag-bit*.
.end_defvar

.defvar %%q-all-but-pointer
The concatenation of all fields of a memory word except for 3%%q-pointer*.
.end_defvar

.defvar %%q-all-but-cdr-code
The concatenation of all fields of a memory word except for 3%%q-cdr-code*.
.end_defvar

.defvar %%q-high-half
.defvar1 %%q-low-half
The two halves of a memory word.  These fields are only used in storing compiled code.
.end_defvar

.defvar cdr-normal
.defvar1 cdr-next
.defvar1 cdr-nil
.defvar1 cdr-error
The values of these four variables are the numeric values which go in the cdr-code
field of a memory word.  See (cdr-code) for the details of cdr-coding.
.end_defvar

@section Function-Calling Subprimitives

These subprimitives can be used (carefully!) to call a function with the
number of arguments variable at run time.  They only work in compiled code
and are not defined in the interpreted Lisp environment.
The preferred higher-level primitive is 3lexpr-funcall* ((lexpr-funcall-fun)).  

.defun %open-call-block function n-adi-pairs destination
Starts a call to 2function*.  2n-adi-pairs* is the number of
pairs of additional information words already 3%push*'ed; normally
this should be 0.  2destination* is where to put the result;
the useful values are 30* for the value to be ignored, 31*
for the value to go onto the stack, 33* for the value to be
the last argument to the previous open call block, and 34*
for the value to be returned from this frame.
.end_defun

.defun %push value
Pushes 2value* onto the stack.  Use this to push the arguments.
.end_defun

.defun %activate-open-call-block
Causes the call to happen.
.end_defun

.defun %pop
Pops the top value off of the stack and returns it as its value.
Use this to recover the result from a call made by 3%open-call-block*
with a destination of 1.
.end_defun

.defun %assure-pdl-room n-words
Call this before doing a sequence of 3%push*'s or 3%open-call-block*s
which will add 2n-words* to the current frame.  This subprimitive checks
that the frame will not exceed the maximum legal frame size, which is 255 words
including all overhead.  This limit is dictated by the way stack frames are linked together.
If the frame is going to exceed the legal limit, 3%assure-pdl-room* will signal
an error.
.end_defun

@c sys:%make-stack-list could be documented here I suppose

@section Lambda-Binding Subprimitive

.defun bind locative value
Binds the cell pointed to by 2locative* to 2x*, in the caller's
environment. This function is not defined in the interpreted Lisp
environment; it only works from compiled code.  Since it turns into an
instruction, the "caller's environment" really means "the binding block
for the stack frame that executed the 3bind* instruction".  The preferred
higher-level primitives which turn into this are 3let* ((let-fun)),
3let-if* ((let-if-fun)), and 3progv* ((progv-fun)).
.br
[This will be renamed to 3%bind* in the future.]
.end_defun

@section The Paging System

@c Insert narrative description of the page hash table, etc.

[Someday this may discuss how it works.]

.defvar sys:%disk-switches
This variable contains bits which control various disk usage features.

Bit 0 (the least significant bit) enables read-compares after disk read
operations.  This causes a considerable slowdown, so it is rarely used.

Bit 1 enables read-compares after disk write operations.

Bit 2 enables the
multiple page swap-out feature.  When this is enabled, as it is by
default, each time a page is swapped out, up to 20 contiguous pages will
also be written out to the disk if they have been modified.  This
greatly improves swapping performance.

Bit 3 controls the multiple page swap-in feature, which is also on by
default.  This feature causes pages to be swapped in in groups; each
time a page is needed, several contiguous pages are swapped in in the
same disk operation.  The number of pages swapped in can be specified
for each area using 3si:set-swap-recommendations-of-area*.
.end_defvar

.defun si:set-swap-recommendations-of-area area-number recommendation
Specifies that pages of area 2area-number* should be swapped in in
groups of 2recommendation* at a time.  This recommendation is used
only if the multiple page swap-in feature is enabled.

Generally, the more memory a machine has, the higher the swap
recommendations should be to get optimum performance.
.end_defun

.defun si:set-all-swap-recommendations recommendation
Specifies the swap-in recommendation of all areas at once.
.end_defun


.defun si:wire-page address &optional (wire-p 3t*)
If 2wire-p* is 3t*, the page containing 2address* is 2wired-down*; that is,
it cannot be paged-out.  If 2wire-p* is 3nil*, the page ceases to be wired-down.
.end_defun

.defun si:unwire-page address
3(si:unwire-page 2address*)* is the same as
3(si:wire-page 2address* 3nil*)*.
.end_defun

.defun sys:page-in-structure object
Makes sure that the storage which represents 2object* is in main
memory.  Any pages which have been swapped out to disk are read in,
using as few disk operations as possible.  Consecutive disk pages are
transferred together, taking advantage of the full speed of the disk.
If 2object* is large, this will be much faster than bringing the pages
in one at a time on demand.  The storage occupied by 2object* is defined
by the 3%find-structure-leader* and 3%structure-total-size* subprimitives.
.end_defun

.defun sys:page-in-array array &optional from to
This is a version of 3sys:page-in-structure* which can bring in a portion
of an array.  2from* and 2to* are lists of subscripts; if they are shorter
than the dimensionality of 2array*, the remaining subscripts are assumed to
be zero.
.end_defun

.defun sys:page-in-words address n-words
Any pages in the range of address space starting at 2address* and
continuing for 2n-words* which have been swapped out to disk are read
in with as few disk operations as possible.
.end_defun

.defun sys:page-in-area area-number
.defun1 sys:page-in-region region-number
All swapped-out pages of the specified region or area are brought into main memory.
.end_defun

.defun sys:page-out-structure object
.defun1 sys:page-out-array array &optional from to
.defun1 sys:page-out-words address n-words
.defun1 sys:page-out-area area-number
.defun1 sys:page-out-region region-number
These are similar to the above, except that take pages out of main
memory rather than bringing them in.  Actually, they only mark the pages
as having priority for replacement by others.  Use these operations when
you are done with a large object, to make the virtual memory system
prefer reclaiming that object's memory over swapping something else out.
.end_defun

.defun sys:%change-page-status virtual-address swap-status access-status-and-meta-bits
The page hash table entry for the page containing 2virtual-address*
is found and altered as specified.  3t* is returned if it was found,
3nil* if it was not (presumably the page is swapped out.)  2swap-status*
and 2access-status-and-meta-bits* can be 3nil* if those fields are not
to be changed.  This doesn't make any error checks; you can really
screw things up if you call it with the wrong arguments.
.end_defun

.defun sys:%compute-page-hash virtual-address
This makes the hashing function for the page hash table
available to the user.
.end_defun

.defun sys:%create-physical-page physical-address
This is used when adjusting the size of real memory available
to the machine.  It adds an entry for the page frame at 2physical-address*
to the page hash table, with virtual address -1, swap status flushable,
and map status 120 (read only).  This doesn't make error checks; you
can really screw things up if you call it with the wrong arguments.
.end_defun

.defun sys:%delete-physical-page physical-address
If there is a page in the page frame at 2physical-address*,
it is swapped out and its entry is deleted from the page hash table,
making that page frame unavailable for swapping in of pages in the
future.  This doesn't make error checks; you
can really screw things up if you call it with the wrong arguments.
.end_defun

.defun sys:%disk-restore high-16-bits low-16-bits
Loads virtual memory from the partition named by the concatenation of
the two 16-bit arguments, and starts executing it.  The name 30*
refers to the default load (the one the machine loads when it is
started up).  This is the primitive used by 3disk-restore* (see (disk-restore-fun)).
.end_defun

.defun sys:%disk-save physical-mem-size high-16-bits low-16-bits
Copies virtual memory into the partition named by the concatenation
of the two 16-bit arguments (30* means the default), then restarts
the world, as if it had just been restored.  The 2physical-mem-size*
argument should come from 3%sys-com-memory-size* in 3system-communication-area*.
This is the primitive used by 3disk-save* (see (disk-save-fun)).
.end_defun

@section Closure Subprimitives

These functions deal with things like what closures deal with: the distinction
between internal and external value cells and control over how they work.

.defun sys:%binding-instances list-of-symbols
This is the primitive that could be used by 3closure*.
First, if any of the symbols in 2list-of-symbols* has no external
value cell, a new external value cell is created for it, with
the contents of the internal value cell.  Then a list of locatives,
twice as long as 2list-of-symbols*, is created and returned.
The elements are grouped in pairs: pointers to the internal
and external value cells, respectively, of each of the symbols.
3closure* could have been defined by:
.lisp
(defun closure (variables function)
  (%make-pointer dtp-closure
     (cons function (sys:%binding-instances variables))))
.end_lisp
.end_defun

.defun sys:%using-binding-instances instance-list
This function is the primitive operation that invocation of closures
could use.  It takes a list such as 3sys:%binding-instances* returns,
and for each pair of elements in the list, it "adds" a binding to the
current stack frame, in the same manner that the 3bind* function
(which should be called 3%bind*) does.  These bindings remain in effect
until the frame returns or is unwound.

3sys:%using-binding-instances* checks for redundant bindings and ignores them.
(A binding is redundant if the symbol is already bound to the desired external
value cell).  This check avoids excessive growth of the special pdl in some cases
and is also made by the microcode which invokes closures, entities, and instances.
.end_defun

.defun sys:%internal-value-cell symbol
Returns the contents of the internal value cell of 2symbol*.
3dtp-one-q-forward* pointers are considered invisible, as usual, but
3dtp-external-value-cell-pointer*s are 2not*; this function can
return a 3dtp-external-value-cell-pointer*.  Such pointers will be
considered invisible as soon as they leave the "inside of the machine",
meaning internal registers and the stack.
.end_defun

@section Microcode Variables

The following variables' values actually reside in the scratchpad memory
of the processor.  They are put there by 3dtp-one-q-forward* invisible
pointers.  The values of these variables are used by the microcode.
Many of these variables are highly internal and you shouldn't expect to
understand them.

.defvar %microcode-version-number
This is the version number of the currently-loaded microcode, obtained
from the version number of the microcode source file.
.end_defvar

.defvar sys:%number-of-micro-entries
Size of 3micro-code-entry-area* and related areas.
.end_defvar

.nopara
3default-cons-area* is documented on (default-cons-area-var).

.defvar sys:number-cons-area
The area number of the area where bignums and flonums are consed.
Normally this variable contains the value of 3sys:extra-pdl-area*, which
enables the "temporary storage" feature for numbers, saving garbage collection
overhead.
.end_defvar

.nopara
3sys:%current-stack-group* and 3sys:%current-stack-group-previous-stack-group*
are documented on (sys:%current-stack-group-var).

.defvar sys:%current-stack-group-state
The 3sg-state* of the currently-running stack group.
.end_defvar

.defvar sys:%current-stack-group-calling-args-pointer
The argument list of the currently-running stack group.
.end_defvar

.defvar sys:%current-stack-group-calling-args-number
The number of arguments to the currently-running stack group.
.end_defvar

.defvar sys:%trap-micro-pc
The microcode address of the most recent error trap.
.end_defvar

.defvar sys:%initial-fef
The function which is called when the machine starts up.
Normally this is the definition of 3si:lisp-top-level*.
.end_defvar

.defvar sys:%initial-stack-group
The stack group in which the machine starts up.
.end_defvar

.defvar sys:%error-handler-stack-group
The stack group which receives control when a microcode-detected error
occurs.  This stack group cleans up, signals the appropriate condition,
or assigns a stack group to run the debugger on the erring stack group.
.end_defvar

.defvar sys:%scheduler-stack-group
The stack group which receives control when a sequence break occurs.
.end_defvar

.defvar sys:%chaos-csr-address
A fixnum which is the virtual address which maps to the Unibus location of the
Chaosnet interface.
.end_defvar

.defvar %mar-low
A fixnum which is the inclusive lower bound of the region of virtual
memory subject to the MAR feature (see (mar)).
.end_defvar

.defvar %mar-high
A fixnum which is the inclusive upper bound of the region of virtual
memory subject to the MAR feature (see (mar)).
.end_defvar

.defvar sys:%inhibit-read-only
If non-3nil*, you can write into read-only areas.  This is used by 3fasload*.
.end_defvar

.nopara
3self* is documented on (self-var).

.nopara
3inhibit-scheduling-flag* is documented on (inhibit-scheduling-flag-var).

.defvar inhibit-scavenging-flag
If non-3nil*, the scavenger is turned off.  The scavenger is
the quasi-asynchronous portion of the garbage collector,
which normally runs during consing operations.
.end_defvar

.defvar sys:%region-cons-alarm
Incremented whenever a new region is allocated.
.end_defvar

.defvar sys:%page-cons-alarm
Increments whenever a new page is allocated.
.end_defvar

.defvar sys:%gc-flip-ready
3t* while the scavenger is running, 3nil* when there are no pointers
to oldspace.
.end_defvar

.defvar sys:%gc-generation-number
A fixnum which is incremented whenever the garbage collector flips, converting
one or more regions from newspace to oldspace.
If this number has changed, the 3%pointer* of an object may have changed.
.end_defvar

.defvar sys:%disk-run-light
A fixnum which is the virtual address of the TV buffer location of the run-light
which lights up when the disk is active.  This plus 2 is the address of the run-light
for the processor.  This minus 2 is the address of the run-light for the garbage collector.
.end_defvar

.defvar sys:%loaded-band
A fixnum which contains the high 24 bits of the name of the disk partition
from which virtual memory was booted.  Used to create the greeting message.
.end_defvar

.defvar sys:%disk-blocks-per-track
.defvar1 sys:%disk-blocks-per-cylinder
Configuration of the disk being used for paging.  Don't change these!
.end_defvar

.defvar sys:%read-compare-enables
A fixnum which controls extra disk error-checking.  Bit 0 enables read-compare
after a read, bit 1 enables read-compare after a write.  Normally this is 0.
.end_defvar

.defvar sys:currently-prepared-sheet
Used for communication between the window system and the microcoded graphics primitives.
.end_defvar

.nopara
The next four have to do with a metering system which is not yet documented in this manual.

.defvar sys:%meter-global-enable
3t* if the metering system is turned on for all stack-groups.
.end_defvar

.defvar sys:%meter-buffer-pointer
A temporary buffer used by the metering system.
.end_defvar

.defvar sys:%meter-disk-address
Where the metering system writes its next block of results on the disk.
.end_defvar

.defvar sys:%meter-disk-count
The number of disk blocks remaining for recording of metering information.
.end_defvar

.defvar sys:a-memory-location-names
A list of all of the above symbols (and any others added after this documentation
was written).
.end_defvar

@section Meters

.defun read-meter name
Returns the contents of the microcode meter named 2name*, which can be a fixnum
or a bignum.  2name* must be one the symbols listed below.
.end_defun

.defun write-meter name value
Writes 2value*, a fixnum or a bignum, into the microcode meter named 2name*.
2name* must be one the symbols listed below.
.end_defun

.nopara
The microcode meters are as follows:

.defmeter sys:%count-chaos-transmit-aborts
The number of times transmission on the Chaosnet was aborted, either by a collision
or because the receiver was busy.
.end_defmeter

.defmeter sys:%count-cons-work
.defmeter1 sys:%count-scavenger-work
Internal state of the garbage collection algorithm.
.end_defmeter

.defmeter sys:%tv-clock-rate
The number of TV frames per clock sequence break.
The default value is 67 which causes clock sequence breaks to happen
about once per second.
.end_defmeter

.defmeter sys:%count-first-level-map-reloads
The number of times the first-level virtual-memory map was invalid
and had to be reloaded from the page hash table.
.end_defmeter

.defmeter sys:%count-second-level-map-reloads
The number of times the second-level virtual-memory map was invalid
and had to be reloaded from the page hash table.
.end_defmeter

.defmeter sys:%count-meta-bits-map-reloads
The number of times the virtual address map was reloaded to contain only
"meta bits", not an actual physical address.
.end_defmeter

.defmeter sys:%count-pdl-buffer-read-faults
The number of read references to the pdl buffer which were
virtual memory references that trapped.
.end_defmeter

.defmeter sys:%count-pdl-buffer-write-faults
The number of write references to the pdl buffer which were
virtual memory references that trapped.
.end_defmeter

.defmeter sys:%count-pdl-buffer-memory-faults
The number of virtual memory references which trapped in case
they should have gone to the pdl buffer, but turned out to be
real memory references after all (and therefore were needlessly
slowed down.)
.end_defmeter

.defmeter sys:%count-disk-page-reads
The number of pages read from the disk.
.end_defmeter

.defmeter sys:%count-disk-page-writes
The number of pages written to the disk.
.end_defmeter

.defmeter sys:%count-fresh-pages
The number of fresh (newly-consed) pages created in core,
which would have otherwise been read from the disk.
.end_defmeter

.defmeter sys:%count-disk-page-read-operations
The number of paging read operations; this can be smaller than the number of
disk pages read when more than one page at a time is read.
.end_defmeter

.defmeter sys:%count-disk-page-write-operations
The number of paging write operations; this can be smaller than the number of
disk pages written when more than one page at a time is written.
.end_defmeter

.defmeter sys:%count-disk-prepages-used
The number of times a page was used after being read in before it was needed.
.end_defmeter

.defmeter sys:%count-disk-prepages-not-used
The number of times a page was read in before it was needed, but got evicted
before it was ever used.
.end_defmeter

.defmeter sys:%count-disk-page-write-waits
The number of times the machine waited for a page to finish being written out
in order to evict the page.
.end_defmeter

.defmeter sys:%count-disk-page-write-busys
The number of times the machine waited for a page to finish being written out
in order to do something else with the disk.
.end_defmeter

.defmeter sys:%disk-wait-time
The time spent waiting for the disk, in microseconds.  This can be used to
distinguish paging time from running time when measuring and optimizing the`
performance of programs.
.end_defmeter

.defmeter sys:%count-disk-errors
The number of recoverable disk errors.
.end_defmeter

.defmeter sys:%count-disk-recalibrates
The number of times the disk seek mechanism was recalibrated,
usually as part of error recovery.
.end_defmeter

.defmeter sys:%count-disk-ecc-corrected-errors
The number of disk errors which were corrected through the error correcting code.
.end_defmeter

.defmeter sys:%count-disk-read-compare-differences
The number of times a read compare was done, no disk error occurred, but the
data on disk did not match the data in memory.
.end_defmeter

.defmeter sys:%count-disk-read-compare-rereads
The number of times a disk read was done over because after the read a read
compare was done and did not succeed (either it got an error or the data on disk
did not match the data in memory).
.end_defmeter

.defmeter sys:%count-disk-read-compare-rewrites
The number of times a disk write was done over because after the write a read
compare was done and did not succeed (either it got an error or the data on disk
did not match the data in memory).
.end_defmeter

.defmeter sys:%disk-error-log-pointer
Address of the next entry to be written in the disk error log.  The function
3si:print-disk-error-log* (see (si:print-disk-error-log-fun)) prints this log.
.end_defmeter

.defmeter sys:%count-aged-pages
The number of times the page ager set an age trap on a page, to determine
whether it was being referenced.
.end_defmeter

.defmeter sys:%count-age-flushed-pages
The number of times the page ager saw that a page still had an age trap
and hence made it "flushable", a candidate for eviction from main memory.
.end_defmeter

.defmeter sys:%aging-depth
A number from 0 to 3 which controls how long a page must remain unreferenced
before it becomes a candidate for eviction from main memory.
.end_defmeter

.defmeter sys:%count-findcore-steps
The number of pages inspected by the page replacement algorithm.
.end_defmeter

.defmeter sys:%count-findcore-emergencies
The number of times no evictable page was found and extra aging had to be done.
.end_defmeter

.defvar sys:a-memory-counter-block-names
A list of all of the above symbols (and any others added after this documentation
was written).
.end_defvar

@chapter "Areas"
'cindex area
.setq area section-page
.setq area-chapter chapter-number

Storage in the Lisp Machine is divided into 2areas*.  Each area
contains related objects, of any type.  Areas are intended to give the
user control over the paging behavior of his program, among other
things.  By putting related data together, locality can be greatly
increased.  Whenever a new object is created the area to be used can
optionally be specified.  For example, instead of using 3cons* you can
use 3cons-in-area* (see (cons-in-area-fun)).  Object-creating functions
which take keyword arguments generally accept a 3:area* argument.
You can also control which area is used by binding 3default-cons-area*
(see (default-cons-area-var)); most functions that allocate storage
use the value of this variable, by default, to specify the area to use.

There is a default Working Storage area which collects those objects
which the user has not chosen to control explicitly. 

	Areas also give the user a handle to control the garbage
collector.  Some areas can be declared to be "static", which means that
they change slowly and the garbage collector should not attempt to
reclaim any space in them.  This can eliminate a lot of useless
copying.  A "static" area can be explicitly
garbage-collected at infrequent intervals when it is believed that that
might be worthwhile. 

	Each area can potentially have a different storage discipline,
a different paging algorithm, and even a different data representation. 
The microcode will dispatch on an attribute of the area at the
appropriate times.  The structure of the machine makes the performance
cost of these features negligible; information about areas is stored
in extra bits in the memory mapping hardware where it can be quickly
dispatched on by the microcode; these dispatches usually have to be
done anyway to make the garbage collector work, and to implement
invisible pointers.  This feature is not currently used by the system,
except for the list/structure distinction described below.

	Each area has a name and a number.  The name is a symbol whose
value is the number.  The number is an index into various internal
tables.  Normally the name is treated as a special variable, so the
number is what is given as an argument to a function that takes an area
as an argument.  Thus, areas are not Lisp objects; you cannot
pass an area itself as an argument to a function; you just pass its
number.  There is a maximum number of areas (set at cold-load generation
time); you can only have that many areas before the various internal
tables overflow.  Currently (as this manual is written) the limit is
3256.* areas, of which 364.* already exist when you start.

	The storage of an area consists of one or more 2regions*.  Each region
is a contiguous section of address space with certain homogeneous properties.
The most important of these is the 2data representation type*.  A given region
can only store one type.  The two types that exist now are 2list* and 2structure*.
A list is anything made out of conses (a closure for instance).  A structure is
anything made out of a block of memory with a header at the front; symbols, strings,
arrays, instances, compiled functions, etc.  Since lists and structures cannot be stored
in the same region, they cannot be on the same page.  It is necessary to know about
this when using areas to increase locality of reference.

When you create an area, one region is created initially.  When you try
to allocate memory to hold an object in some area, the system tries to
find a region that has the right data representation type to hold this
object, and that has enough room for it to fit.  If there isn't any such
region, it makes a new one (or signals an error; see the 3:size* option
to 3make-area*, below).  The size of the new region is an attribute of
the area (controllable by the 3:region-size* option to 3make-area*).
If regions are too large, memory may get taken up by a region and never used.
If regions are too small, the system may run out of regions because regions,
like areas, are defined by internal tables that have a fixed size (set at
cold-load generation time).  Currently (as this manual is written) the limit
is 3256.* regions, of which about 390.* already exist when you start.
(If you're wondering why the limit on regions isn't higher than the limit
on areas, as it clearly ought to be, it's just because both limits have
to be multiples of 3256.* for internal reasons, and 3256.* regions seem
to be enough.)

@section Area Functions and Variables

.defvar default-cons-area
The value of this variable is the number of the area in which objects are created
by default.  It is initially the number of 3working-storage-area*.
Giving 3nil* where an area is required uses the value of 3default-cons-area*.
Note that to put objects into an area other than 3working-storage-area*
you can either bind this variable or use functions such as
3cons-in-area* (see (cons-in-area-fun)) which take the area as an explicit argument.
.end_defvar

.defun make-area &rest keywords
Creates a new area, whose name and attributes are specified by the keywords.
You must specify a symbol as a name; the symbol will be 3setq*'ed to
the area-number of the new area, and that number will also be returned,
so that you can use 3make-area* as the initialization of a 3defvar*.
The arguments are taken in pairs, the first being a keyword and the second
a "value" for that keyword.  The last three keywords documented herein
are in the nature of subprimitives; like the stuff in chapter
(subprimitive-chapter), their meaning is system-dependent and is not
documented here.  The following keywords exist:
.table
.kitem :name
A symbol which will be the name of the area.  This item is required.

.kitem :size
The maximum allowed size of the area, in words.  Defaults to infinite.
If the number of words allocated to the area reaches this size, attempting
to cons an object in the area will signal an error.

.kitem :region-size
The approximate size, in words, for regions within this area.  The
default is the area size if a 3:size* argument was given, otherwise a
suitable medium size.  Note that if you specify 3:size* and not
3:region-size*, the area will have exactly one region.  When making an
area which will be very big, it is desirable to make the region size
larger than the default region size to avoid creating very many regions
and possibly overflowing the system's fixed-size region tables.

.kitem :representation
The type of object to be contained in the area's initial region.
The argument to this keyword can be 3:list*, 3:structure*, or a numeric code.
3:structure* is the default.  If you are only going to cons lists in your
area, you should specify 3:list* so you don't get a useless structure region.

.kitem :gc
The type of garbage-collection to be employed.  The choices are 3:dynamic*
(which is the default) and 3:static*.  3:static* means that the area will
not be copied by the garbage collector, and nothing in the area or pointed to by
the area will ever be reclaimed, unless a garbage collection of this area is
manually requested.

.kitem :read-only
With an argument of 3t*, causes the area to be made read-only.  Defaults
to 3nil*.  If an area is read-only, then any attempt to change anything
in it (altering a data object in the area, or creating a new object in the
area) will signal an error unless 3sys:%inhibit-read-only*
(see (sys:%inhibit-read-only-var)) is bound to a non-3nil* value.

.kitem :pdl
With an argument of 3t*, makes the area suitable for storing
regular-pdls of stack-groups.  This is a special attribute due to the
pdl-buffer hardware.  Defaults to 3nil*.  Areas for which this is 3nil*
may 2not* be used to store regular-pdls.  Areas for which this is 3t*
are relatively slow to access; all references to pages in the area will
take page faults to check whether the referenced location is really in
the pdl-buffer.

.kitem sys:%%region-map-bits
Lets you specify the 2map bits* explicitly, overriding the specification
from the other keywords.  This is for special hacks only.

.kitem sys:%%region-space-type
Lets you specify the 2space type* explicitly, overriding the specification
from the other keywords.  This is for special hacks only.

.kitem sys:%%region-scavenge-enable
Lets you override the scavenge-enable bit explicitly.  This is an internal
flag related to the garbage collector.  Don't mess with this!

.kitem :room
With an argument of 3t*, adds this area to the list of areas which are
displayed by default by the 3room* function (see (room-fun)).
.end_table

.lisp
.exdent 96 Example:
(make-area ':name 'foo-area
	   ':gc ':dynamic
	   ':representation ':list)
.end_lisp
.end_defun

.defun describe-area area
2area* may be the name or the number of an area.  Various
attributes of the area are printed.
.end_defun

.defvar area-list
The value of 3area-list* is a list of the names of all existing areas.
This list shares storage with the internal area name table, so you should
not change it.
.end_defvar

.defun %area-number pointer
Returns the number of the area to which 2pointer* points, or 3nil* if
it does not point within any known area.  The data-type of 2pointer*
is ignored.
.end_defun

.defun %region-number pointer
Returns the number of the region to which 2pointer* points, or 3nil* if
it does not point within any known region.  The data-type of 2pointer*
is ignored.  (This information is generally not very interesting to users;
it is important only inside the system.)
.end_defun

.defun area-name number
Given an area number, returns the name.  This "function" is actually an array.
.end_defun

.nopara
See also 3cons-in-area* ((cons-in-area-fun)), 3list-in-area* ((list-in-area-fun)),
and 3room* ((room-fun)).


@section Interesting Areas

This section lists the names of some of the areas and tells what they are for.
Only the ones of the most interest to a user are listed; there are many others.

.defvar working-storage-area
This is the normal value of 3default-cons-area*.
Most working data are consed in this area.
.end_defvar

.defvar permanent-storage-area
This area is to be used for "permanent" data, which will (almost) never become
garbage.  Unlike 3working-storage-area*, the contents of this area
are not continually copied by the garbage collector; it is a static area.
.end_defvar

.defvar sys:p-n-string
Print-names of symbols are stored in this area.
.end_defvar

.defvar sys:nr-sym
This area contains most of the symbols in the Lisp world, except 3t* and 3nil*,
which are in a different place for historical reasons.
.end_defvar

.defvar sys:pkg-area
This area contains packages, principally the hash tables with which 3intern*
keeps track of symbols.
.end_defvar

.defvar macro-compiled-program
FEFs (compiled functions) are put here by the compiler and by 3fasload*.
.end_defvar

.defvar sys:property-list-area
This area holds the property lists of symbols.
.end_defvar

.defvar sys:init-list-area
.defvar1 sys:fasl-constants-area
These two areas contain constants used by compiled programs.
.end_defvar

@chapter "The Compiler"
.setq compiler section-page
.setq compiler-chapter chapter-number
.cindex compiler

@section "The Basic Operations of the Compiler"

	The purpose of the Lisp compiler is to convert Lisp functions
into programs in the Lisp Machine's instruction set, so that they
will run more quickly and take up less storage.  Compiled functions
are represented in Lisp by FEFs (Function
Entry Frames), which contain machine code as well as various other information.
The printed representation of a FEF is
.lisp
#<DTP-FEF-POINTER 2address* 2name*>
.end_lisp

	If you want to understand the output of the compiler, refer
to (understanding-compiled-code).

	There are three ways to invoke the compiler from the Lisp
Machine.  First, you may have an interpreted function in the Lisp
environment which you would like to compile.  The function 3compile*
is used to do this.  Second, you may have code in an editor buffer
which you would like to compile.  The Zwei editor has commands
to read code into Lisp and compile it.
Third, you may have a program (a group of function definitions and other forms) written in a
file on the file system.  The compiler can translate this file into a
QFASL file.  Loading in the QFASL file is almost the same as reading in the source
file; the difference is that the functions defined in the file will be
defined as compiled functions instead of interpreted functions.
The 3qc-file* function is used for translating source files into QFASL files.

@c Explain why the compiler expands macros.
@c Explain specialness versus localness, etc.

@section "How to Invoke the Compiler"

.defun compile function-spec &optional definition
If 2definition* is supplied, it should be a 3lambda*-expression.
Otherwise 2function-spec* (this is usually a symbol, but see (function-spec) for details)
should be defined as an interpreted function and
its definition will be used as the 3lambda*-expression to be compiled.
The compiler converts the 3lambda*-expression into a FEF, saves the
3lambda*-expression as the 3:previous-expr-definition* and
3:previous-definition* properties of 2function-spec* if it is a symbol, and changes
2function-spec*'s definition to be the FEF.  (See 3fdefine*,
(fdefine-fun)).  (Actually, if 2function-spec* is not defined as a
3lambda*-expression, and 2function-spec* is a symbol,
3compile* will try to find a 3lambda*-expression in
the 3:previous-expr-definition* property of 2function-spec* and use that
instead.)
.end_defun

.defun uncompile symbol
If 2symbol* is not defined as an interpreted function and it
has a 3:previous-expr-definition* property, then 3uncompile*
will restore the function cell from the value of the property.
(Otherwise, 3uncompile* does nothing and returns 3"Not compiled"*.)
This "undoes" the effect of 3compile*.  See also 3undefun*, (undefun-fun).
.end_defun

.defun qc-file filename &optional output-file load-flag in-core-flag package functions-defined file-local-declarations dont-set-default-p read-then-process-flag
This function takes a formidable number of arguments, but normally only one
argument is supplied.
The file 2filename* is given to the compiler, and the output of the
compiler is written to a file whose name is 2filename* except with a
file type of "QFASL".  The input format for files to the compiler is
described on (compiler-input-section).
Macro definitions, 3subst* definitions, and 3special* declarations created during
the compilation are undone when the compilation is
finished.

The optional arguments allow certain modifications to the standard procedure.
2output-file* lets you change where the output is written.
2package* lets you specify in what package the source file is to
be read.  Normally the system knows, or asks interactively,
and you need not supply this argument.
2load-flag* and 2in-core-flag* are incomprehensible; you don't
want to use them.  2functions-defined* and 2file-local-declarations* are for compiling
multiple files as if they were one.  2dont-set-default-p* suppresses the changing
of the default file name to 2filename* that normally occurs.

Normally, a form is read from the file and processed and then another
form is read and processed, and so on.  But if
2read-then-process-flag* is non-3nil*, the whole source file is read
before any of it is processed.  This is not done by default; it has the
problem that compile-time reader-macros defined in the file will not
work properly.
.end_defun

.defun qc-file-load filename &optional output-file load-flag in-core-flag package functions-defined file-local-declarations dont-set-default-p read-then-process-flag
3qc-file-load* compiles a file and then loads in the resulting QFASL file.
.end_defun

See also the 3disassemble* function ((disassemble-fun)), which lists the instructions
of a compiled function in symbolic form.


@section "Input to the Compiler"
.setq compiler-input-section section-page
.cindex input to the compiler

	The purpose of 3qc-file* is to take a file and produce
a translated version which does the same thing as the original except
that the functions are compiled.  3qc-file* reads through the input
file, processing the forms in it one by one.  For each form, suitable
binary output is sent to the QFASL file so that when the QFASL file is
loaded the effect of that source form will be reproduced.  The differences
between source files and QFASL files are that QFASL files are in a compressed
binary form which reads much faster (but cannot be edited), and that
function definitions in QFASL files have been translated from Lisp forms
to FEFs.

	So, if the source contains a 3(defun ...)* form at top level,
then when the QFASL file is loaded, the function will be defined as a
compiled function.  If the source file contains a form which is not of a
type known specially to the compiler, then that form (encoded in QFASL
format) will be output "directly" into the QFASL file, so that when the
QFASL file is loaded that form will be evaluated.  Thus, if the source
file contains 3(setq x 3)*, then the compiler will put in the QFASL
file instructions to set 3x* to 33* at load time (that is, when
the QFASL file is loaded into the Lisp environment).  It happens that QFASL
files have a specific way to 3setq* a symbol.  For a more general form,
the QFASL file would contain instructions to recreate the list structure
of a form and then call 3eval* on it.

	Sometimes we want to put things in the file
that are not merely meant to be translated into QFASL form.
One such occasion is top level macro definitions; the macros
must actually get defined within the compiler in order for the
compiler to be able to expand them at compile time.  So when a macro
form is seen, it should (sometimes) be evaluated at compile time,
and should (sometimes) be put into the QFASL file.

	Another thing we sometimes want to put in a file is
compiler declarations.  These are forms which should be evaluated
at compile time to tell the compiler something.  They should
not be put into the QFASL file, unless they are useful for working
incrementally on the functions in the file, compiling them one by one
from the editor.

	Therefore, a facility exists to allow the user to tell
the compiler just what to do with a form.  One might want a form
to be:
.table 1 500
.item Put into the QFASL file (compiled, of course), or not.
.item Evaluated within the compiler, or not.
.item Evaluated if the file is read directly into Lisp, or not.
.end_table

	Two forms are recognized by the compiler to allow this.  The less
general, old-fashioned one is 3declare*; the completely
general one is 3eval-when*.
'cindex eval-when

	An 3eval-when* form looks like
.lisp
(eval-when 2times-list*
	   2form1*
	   2form2*
           ...)
.end_lisp
The 2times-list* may contain one or more of the symbols 3load*, 3compile*,
or 3eval*.
If 3load* is present, the 2forms* are written into the QFASL file
to be evaluated when the QFASL file is loaded (except that 3defun* forms
will put the compiled definition into the QFASL file instead).
If 3compile* is present, the 2forms* are evaluated in the compiler.
If 3eval* is present, the 2forms* are evaluated when read into Lisp;
this is because 3eval-when* is defined as a special form in Lisp.  (The
compiler ignores 3eval* in the 2times-list*.)
For example,
.lisp
(eval-when (compile eval) (macro foo (x) (cadr x)))
.end_lisp
would define 3foo* as a macro in the compiler and when the file
is read in interpreted, but not when the QFASL file is fasloaded.

	For the rest of this section, we will use lists such as are
given to 3eval-when*, e.g. 3(load eval)*, 3(load compile)*, etc.
to describe when forms are evaluated.

	A 3declare* form looks like 3(declare 2form1 form2* ...)*.
3declare* is defined in Lisp as a special form which does nothing;
so the forms within a 3declare* are not evaluated at 3eval* time.
The compiler does the following upon finding 2form* within
a 3declare*:  if 2form* is a call to either 3special*
or 3unspecial*, 2form* is treated as 3(load compile)*;
otherwise it is treated as 3(compile)*.

	If a form is not enclosed in an 3eval-when* nor a 3declare*,
then the times at which it will be evaluated depend on the form.
The following table summarizes at what times evaluation will take
place for any given form seen at top level by the compiler.
.table 3
.item (eval-when 2times-list* 2form1* ...)
2times-list*

.item (declare (special ...)) 1or* (declare (unspecial ...))
3(load compile)*

.item (declare 2anything-else*)
3(compile)*

'cindex special variable
.item (special ...) 1or* (unspecial ...)
3(load compile eval)*

.item (macro ...) 1or* (defmacro ...) 1or* (defsubst ...)
3(load compile eval)*

.item (comment ...)
Ignored at all times.

.item (compiler-let ((2var val*) ...) 2body*...)
Processes the 2body* in its normal fashion, but
at 3(compile eval)* time, the indicated
variable bindings are in effect.  These variables will typically
affect the operation of the compiler or of macros.  See (compiler-let-discussion).

.item (local-declare (2decl decl ...*) 2body*...)
Processes the 2body* in its normal fashion, with the indicated
declarations added to the front of the list which is the value
of 3local-declarations*.

.item (defflavor ...) 1or* (defstruct ...)
3(load compile eval)*

.item (defun ...) 1or* (defmethod ...) 1or* (defselect ...)
3(load eval)*, but at load time what is processed is not this form
itself, but the result of compiling it.

.item 2anything-else*
3(load eval)*
.end_table

	Sometimes a macro wants to return more than one form
for the compiler top level to see (and to be evaluated).  The following
facility is provided for such macros.  If a form
.lisp
(progn (quote compile) 2form1* 2form2* ...)
.end_lisp
is seen at the compiler top level, all of the 2forms* are processed as if they had been at
compiler top level.  (Of course, in the interpreter they
will all be evaluated, and the 3(quote compile)* will harmlessly
evaluate to the symbol 3compile* and be ignored.)
See (progn-quote-compile-discussion) for additional discussion of this.

.defspec eval-when (time...) body...
When seen by the interpreter, if one of the 2times* is the symbol 3eval*
then the 2body* forms are evaluated; otherwise 3eval-when* does nothing.

But when seen by the compiler, this special form does the special things described above.
.end_defun

.defspec declare declaration...
3declare* does nothing, and returns the symbol 3declare*.

But when seen by the compiler, this special form does the special things described above.

There is also a different use of 3declare*, used in conjuction with the 3arglist*
function (see (arglist-fun)).
.end_defun


@section "Compiler Declarations"

'cindex declaration

	This section describes functions meant to be called during
compilation, and variables meant to be set or bound during compilation,
by using 3declare* or 3local-declare*.

.defspec local-declare (declaration...) body...
A 3local-declare* form looks like
.lisp
(local-declare (2decl1* 2decl2* ...)
   2form1*
   2form2*
   ...)
.end_lisp
Each 2decl* is consed onto the list 3local-declarations* while
the 2forms* are being evaluated (in the interpreter) or compiled
(in the compiler).  There are two uses for this.  First, it can be
used to pass information from outer macros to inner macros.  Secondly,
the compiler will specially interpret certain 2decls* as local
declarations, which only apply to the compilations of the 2forms*.
It understands the following forms:
.table 3
.item (special 2var1 var2 ...*)
The variables 2var1*, 2var2*, etc. will be treated as special
variables during the compilation of the 2forms*.

.item (unspecial 2var1 var2 ...*)
The variables 2var1*, 2var2*, etc. will be treated as local
variables during the compilation of the 2forms*.

.item (arglist . 2arglist*)
Putting this local declaration around a 3defun* saves 2arglist* as the
argument list of the function, to be used instead of its 3lambda*-list if
anyone asks what its arguments are.  This is purely documentation.

.item (return-list . 2values*)
Putting this local declaration around a 3defun* saves 2values* as the
return values list of the function, to be used if anyone asks what values
it returns.  This is purely documentation.

.item (def 2name*  . 2definition*)
2name* will be defined for the compiler during the compilation
of the 2forms*.  The compiler uses this to keep track of macros and
open-codable functions (3defsubst*s) defined in the file being compiled.
Note that the 3cddr* of this item is a function.
.end_table
.end_defspec

.defspec special variable...
Declares each 2variable* to be "special" for the compiler. 
.end_defun

.defspec unspecial variable...
Removes any "special" declarations of the 2variables* for the compiler.
.end_defun

.nopara
The next three declarations are primarily for Maclisp compatibility.

.defspec *expr symbol...
Declares each 2symbol*
to be the name of a function.  In addition it prevents these functions from appearing
in the list of functions referenced but not defined printed at the end of the compilation.
.end_defspec

.defspec *lexpr symbol...
Declares each 2symbol*
to be the name of a function.  In addition it prevents these functions from appearing
in the list of functions referenced but not defined printed at the end of the compilation.
.end_defspec

.defspec *fexpr symbol...
Declares each 2symbol*
to be the name of a special form.  In addition it prevents these names from appearing
in the list of functions referenced but not defined printed at the end of the compilation.
.end_defspec

	There are some advertised variables whose compile-time values affect
the operation of the compiler.  The user may set these variables by
including in his file forms such as
.lisp
(declare (setq open-code-map-switch t))
.end_lisp

.defvar run-in-maclisp-switch
If this variable is non-3nil*, the compiler will try to warn the
user about any constructs which will not work in Maclisp.  By no means
will all Lisp Machine system functions not built in to Maclisp be
cause for warnings;  only those which could not be written by the user
in Maclisp (for example, 3make-array*, 3value-cell-location*, etc.).
Also, lambda-list keywords such as
3&optional* and initialized 3prog* variables will be
mentioned.  This switch also inhibits the warnings for obsolete Maclisp functions.
The default value of this variable is 3nil*.
.end_defvar

.defvar obsolete-function-warning-switch
If this variable is non-3nil*, the compiler will try to warn
the user whenever an "obsolete" Maclisp-compatibility function such as
3maknam* or 3samepnamep* is used.  The default value is 3t*.
.end_defvar

.defvar allow-variables-in-function-position-switch
If this variable is non-3nil*, the compiler allows the use of
the name of a variable in function position to mean that the
variable's value should be 3funcall*'d.  This is for compatibility
with old Maclisp programs.  The default value of this variable is
3nil*.
.end_defvar

.defvar open-code-map-switch
If this variable is non-3nil*, the compiler will attempt
to produce inline code for the mapping functions (3mapc*, 3mapcar*, etc.,
but not 3mapatoms*) if the function being mapped is an anonymous
lambda-expression.  This allows that function to reference
the local variables of the enclosing function without the need for special
declarations.
The generated code is also more efficient.  The default value is 3t*.
.end_defvar

.defvar all-special-switch
If this variable is non-3nil*, the compiler regards all variables
as special, regardless of how they were declared.  This provides
compatibility with the interpreter at the cost of efficiency.
The default is 3nil*.
.end_defvar

.defvar inhibit-style-warnings-switch
If this variable is non-3nil*, all compiler style-checking is
turned off.  Style checking is used to issue obsolete function
warnings and won't-run-in-Maclisp warnings, and other sorts of
warnings.  The default value is 3nil*.  See also the
3inhibit-style-warnings* macro, which acts on one level only of an
expression.
.end_defvar

.defmac compiler-let ((variable value)...) body...
Syntactically identical to 3let*, 3compiler-let* allows
compiler switches to be bound locally at compile time, during the
processing of the 2body* forms.
.lisp
.exdent 96 Example:
(compiler-let ((open-code-map-switch nil))
          (map (function (lambda (x) ...)) foo))
.end_lisp
will prevent the compiler from open-coding the 3map*.
When interpreted, 3compiler-let* is equivalent to 3let*.  This
is so that global switches which affect the behavior of macro
expanders can be bound locally.
.end_defmac

@section Controlling Compiler Warnings
.cindex warnings from the compiler
.cindex compiler warnings

By controlling the compile-time values of the variables 3run-in-maclisp-switch*,
3obsolete-function-warning-switch*, and 3inhibit-style-warning-switch* (explained
above), you can enable or disable some of the warning messages of the compiler.
The following special form is also useful:

.defmac inhibit-style-warnings form
Prevents the compiler from performing style-checking on the top level
of 2form*.  Style-checking will still be done on the arguments of 2form*.
Both obsolete function warnings and won't-run-in-Maclisp warnings are
done by means of the style-checking mechanism, so, for example,
.lisp
(setq bar (inhibit-style-warnings (value-cell-location foo)))
.end_lisp
will not warn that 3value-cell-location* will not work in Maclisp,
but
.lisp
(inhibit-style-warnings (setq bar (value-cell-location foo)))
.end_lisp
will warn, since 3inhibit-style-warnings* applies only to the top
level of the form inside it (in this case, to the 3setq*).
.end_defmac

Sometimes functions take argument that they deliberately do not use.
Normally the compiler warns you if your program binds a variable that it
never references.  In order to disable this warning for variables that
you know you are not going to use, there are two things you can do.  The
first thing is to name the variables 3ignore* or 3ignored*.  The
compiler will not complain if a variable by one of these names is not
used.  Furthermore, by special dispensation, it is all right to have
more than one variable in a lambda-list that has one of these names.
The other thing you can do is simply use the variable, for effect
(ignoring its value), at the front of the function.  Example:
.lisp
(defun the-function (list fraz-name fraz-size)
  fraz-size       ; This argument is not used.
  ...)
.end_lisp
This has the advantage that 3arglist* (see (arglist-fun)) will return
a more meaningful argument list for the function, rather than returning
something with 3ignore*s in it.
.vindex ignore
.cindex ignored arguments

The following function is useful for requesting compiler warnings in
certain esoteric cases.  Normally, the compiler notices whenever any
function 2x* uses (calls) any other function 2y*; it makes notes of
all these uses, and then warns you at the end of the compilation if the
function 2y* got called but was neither defined nor declared (by
3*expr*, see (*expr-fun)).  This usually does what you want, but
sometimes there is no way the compiler can tell that a certain function is being
used.  Suppose that instead of 2x*'s containing any forms that call
2y*, 2x* simply stores 2y* away in a data structure somewhere, and
someplace else in the program that data structure is accessed and
3funcall* is done on it.  There is no way that the compiler can see
that this is going to happen, and so it can't notice the function usage,
and so it can't create a warning message.  In order to make such
warnings happen, you can explicitly call the following function at
compile-time.

.defun compiler:function-referenced what by
2what* is a symbol that is being used as a function.  2by* may be any function spec.  
3compiler:function-referenced* must be
called at compile-time while a compilation is in progress.  It tells the
compiler that the function 2what* is referenced by 2by*.  When the compilation
is finished, if the function 2what* has not been defined, the compiler will
issue a warning to the effect that 2by* referred to the function 2what*,
which was never defined.
.end_defun

.defspec compiler:make-obsolete function reason
This special form declares a function to be obsolete; code that calls it
will get a compiler warning, under the control of 3obsolete-function-warning-switch*.
This is used by the compiler to mark as obsolete some Maclisp functions which exist in
Zetalisp but should not be used in new programs.  It can also
be useful when maintaining a large system, as a reminder that a function has
become obsolete and usage of it should be phased out.  An example of an
obsolete-function declaration is:
.lisp
(compiler:make-obsolete create-mumblefrotz
	"use MUMBLIFY with the :FROTZ option instead")
.end_lisp
.end_defspec


@section "Compiler Source-Level Optimizers"
'cindex optimizer, compiler

The compiler stores optimizers for source code on property lists so as
to make it easy for the user to add them.  An optimizer can be used to
transform code into an equivalent but more efficient form (for
example, 3(eq 2obj* nil)* is transformed into 3(null 2obj*)*,
which can be compiled better).  An optimizer can also be used to
tell the compiler how to compile a special form.  For example,
in the interpreter 3do* is a special form, implemented by a function
which takes quoted arguments and calls 3eval*.  In the compiler,
3do* is expanded in a macro-like way by an optimizer, into
equivalent Lisp code using 3prog*, 3cond*, and 3go*, which
the compiler understands.

The compiler finds the optimizers to apply to a form by looking for
the 3compiler:optimizers* property of the symbol which is the
3car* of the form.  The value of this property should be a list of
optimizers, each of which must be a function of one argument.  The
compiler tries each optimizer in turn, passing the form to be
optimized as the argument.  An optimizer which returns the original
form unchanged (3eq* to the argument) has "done nothing", and
the next optimizer is tried.  If the optimizer returns anything else,
it has "done something", and the whole process starts over again.
Only after all the optimizers
have been tried and have done nothing is an ordinary macro definition
processed.  This is so that the macro definitions, which will be seen
by the interpreter, can be overridden for the compiler by optimizers.

Optimizers should not be used to define new language features, because
they only take effect in the compiler; the interpreter (that is, the
evaluator) doesn't know about optimizers.  So an optimizer should not
change the effect of a form; it should produce another form that does
the same thing, possibly faster or with less memory or something.  That
is why they are called optimizers.  If you want to actually change
the form to do something else, you should be using macros.

.defspec compiler:add-optimizer function optimizer optimized-into...
Puts 2optimizer* on 2function*'s optimizers list if it isn't there already.
2optimizer* is the name of an optimization function, and 2function*
is the name of the function calls which are to be processed.  Neither
is evaluated.

3(compiler:add-optimizer 2function* 2optimizer* 2optimize-into-1*
2optimize-into-2...*)* also remembers 2optimize-into-1*, etc., as
names of functions which may be called in place of 2function* as a result
of the optimization.
.end_defspec


@section "Files that Maclisp Must Compile"

Certain programs are intended to be run both in Maclisp and in
Zetalisp.  Their source files need some special conventions.  For
example, all 3special* declarations must be enclosed in 3declare*s,
so that the Maclisp compiler will see them.  The main issue is that many
functions and special forms of Zetalisp do not exist in
Maclisp.  It is suggested that you turn on 3run-in-maclisp-switch* in
such files, which will warn you about a lot of problems that your program
may have if you try to run it in Maclisp.

The macro-character combination "#Q" causes the object that follows it
to be visible only when compiling for Zetalisp.  The combination
"#M" causes the  following object to be visible only when compiling for
Maclisp.  These work both on subexpressions of the objects in the file,
and at top level in the file.  To conditionalize top-level objects,
however, it is better to put the macros 3if-for-lispm* and
3if-for-maclisp* around them.  (You can only put these around a single
object.)  The 3if-for-lispm* macro turns off 3run-in-maclisp-switch*
within its object, preventing spurious warnings from the compiler.  The
3#Q* macro-character cannot do this, since it can be used to
conditionalize any S-expression, not just a top-level form.

To allow a file to detect what environment it is being compiled in,
the following macros are provided:

.defmac if-for-lispm form
If 3(if-for-lispm 2form*)* is seen at the top level of
the compiler, 2form* is passed to the compiler top level if
the output of the compiler is a QFASL file intended for Zetalisp.
If the Zetalisp interpreter sees this it will evaluate 2form*
(the macro expands into 2form*).
.end_defmac

.defmac if-for-maclisp form
If 3(if-for-maclisp 2form*)* is seen at the top level of
the compiler, 2form* is passed to the compiler top level if
the output of the compiler is a FASL file intended for Maclisp
(e.g. if the compiler is COMPLR).
If the Zetalisp interpreter sees this it will ignore it
(the macro expands into 3nil*).
.end_defmac

.defmac if-for-maclisp-else-lispm maclisp-form lispm-form
If 3(if-for-maclisp-else-lispm 2form1* 2form2*)* is seen at the top level of
the compiler, 2form1* is passed to the compiler top level if
the output of the compiler is a FASL file intended for Maclisp;
otherwise 2form2* is passed to the compiler top level.
.end_defmac

.defmac if-in-lispm form
In Zetalisp, 3(if-in-lispm 2form*)* causes 2form*
to be evaluated; in Maclisp, 2form* is ignored.
.end_defmac

.defmac if-in-maclisp form
In Maclisp, 3(if-in-maclisp 2form*)* causes 2form*
to be evaluated; in Zetalisp, 2form* is ignored.
.end_defmac

	When you have two definitions of one function, one
conditionalized for one machine and one for the other, put them next to
each other in the source file with the second "3(defun*" indented by
one space, and the editor will put both function definitions on the
screen when you ask to edit that function.

	In order to make sure that those macros are
defined when reading the file into the Maclisp compiler, you must
make the file start with a prelude, which should look like:
.lisp
(declare (cond ((not (status feature lispm))
                (load '|AI: LISPM2; CONDIT|))))
.end_lisp
This will do nothing when you compile the program on the Lisp Machine.
If you compile it with the Maclisp compiler, it will load in definitions
of the above macros, so that they will be available to your
program.  The form 3(status feature lispm)* is generally useful in
other ways; it evaluates to 3t* when evaluated on the Lisp machine and
to 3nil* when evaluated in Maclisp.

@section Putting Data in QFASL Files
.cindex fasdump
.setq fasdump section-page

It is possible to make a QFASL file containing data, rather than a compiled program.
This can be useful to speed up loading of a data structure into the machine, as
compared with reading in printed representations.
Also, certain data structures such as arrays
do not have a convenient printed representation as text, but can be saved in
QFASL files.  For example, the system stores fonts this way.  Each font is in
a QFASL file (on the LMFONT directory) which contains the data structures for that
font.  When the file is loaded, the symbol which is the name of the font gets set
to the array which represents the font.  Putting data into a QFASL file is often
referred to as "2fasdumping* the data".

In compiled programs, the constants are saved in the QFASL file in this way.
The compiler optimizes by making constants which are 3equal* become 3eq*
when the file is loaded.  This does not happen when you make a data file yourself;
identity of objects is preserved.  Note that when a QFASL file is loaded,
objects that were 3eq* when the file was written are still 3eq*; this does not
normally happen with text files.

The following types of objects can be represented in QFASL files:  Symbols (but
uninterned symbols will be interned when the file is loaded),  numbers of all kinds,
lists,  strings,  arrays of all kinds,  instances, and FEFs.

When an instance is fasdumped (put into a QFASL file), it is sent a 3:fasd-form*
message, which must return a Lisp form which, when evaluated, will recreate the
equivalent of that instance.  This is because instances are often part of a large
data structure, and simply fasdumping all of the instance variables and making
a new instance with those same values is unlikely to work.  Instances remain
3eq*; the 3:fasd-form* message is only sent the first time a particular instance
is encountered during writing of a QFASL file.  If the instance does
not accept the 3:fasd-form* message, it cannot be fasdumped.

.defun compiler:fasd-symbol-value filename symbol
Writes a QFASL file named 2filename* which contains the value of 2symbol*.
When the file is loaded, 2symbol* will be 3setq*'ed to the same value.
2filename* is parsed with the same defaults that 3load* and 3qc-file* use.
The file type defaults to 3"qfasl"*.
.end_defun

.defun compiler:fasd-font name
Writes the font named 2name* into a QFASL file with the appropriate name
(on the LMFONT directory).
.end_defun

@c I wonder if this works?  I never heard of it until I found it in the file.
.defun compiler:fasd-file-symbols-properties filename symbols properties dump-values-p dump-functions-p new-symbol-function
This is a way to dump a complex data structure into a QFASL file.  The values,
the function definitions, and some of the properties of certain symbols are put into
the QFASL file in such a way that when the file is loaded the symbols will
be 3setq*ed, 3fdefine*d, and 3putprop*ed appropriately.  The user can
control what happens to symbols discovered in the data structures being fasdumped.

2filename* is the name of the file to be written.  It is parsed with
the same defaults that 3load* and 3qc-file* use.  The file type
defaults to 3"qfasl"*.

2symbols* is a list of symbols to be processed.  2properties* is a list
of properties which are to be fasdumped if they are found on the symbols.
2dump-values-p* and 2dump-functions-p* control whether the values and
function definitions are also dumped.

2new-symbol-function* is called whenever a new symbol is found in the
structure being dumped.  It can do nothing, or it can add the symbol to the
list to be processed by calling 3compiler:fasd-symbol-push*.  The value
returned by 2new-symbol-function* is ignored.
.end_defun

@c Note: there are still some sections to be written; see end of the file.

@chapter "Macros"
.setq macro section-page
.setq macros-chapter chapter-number
.cindex macros
@c Macros!!!!!!!

@section "Introduction to Macros"

If 3eval* is handed a list whose car is a symbol, then 3eval*
inspects the definition of the symbol to find out what to do.  If the
definition is a cons, and the car of the cons is the symbol
3macro*, then the definition (i.e. that cons) is called a 2macro*.
The cdr of the cons should be a function of one argument.
3eval* applies the function to the form it was originally given,
takes whatever is returned, and evaluates that in lieu of the
original form.

	Here is a simple example.  Suppose the definition of the symbol 3first* is
.lisp
(macro lambda (x) 
         (list 'car (cadr x)))
.end_lisp
This thing is a macro: it is a cons whose car is the symbol
3macro*.  What happens if we try to evaluate a form 3(first '(a b
c))*?  Well, 3eval* sees that it has a list whose car is a symbol
(namely, 3first*), so it looks at the definition of the symbol and
sees that it is a cons whose car is 3macro*; the definition is
a macro.

3eval* takes the cdr of the cons, which is supposed to be the
macro's 2expander function*, and calls it providing as an argument the
original form that 3eval* was handed.  So it calls
3(lambda (x) (list 'car (cadr x)))* with argument 3(first '(a b c))*.
Whatever this returns is the 2expansion* of the macro call.  It will
be evaluated in place of the original form.

In this case, 3x* is bound to 3(first '(a b c))*, 3(cadr x)*
evaluates to 3'(a b c)*, and 3(list 'car (cadr x))* evaluates to
3(car '(a b c))*, which is the expansion.  3eval* now evaluates the
expansion.  3(car '(a b c))* returns 3a*, and so the result is that
3(first '(a b c))* returns 3a*.

	What have we done?  We have defined a macro called 3first*.  What
the macro does is to 2translate* the form to some other form.  Our
translation is very simple--it just translates forms that look like
3(first 2x*)* into 3(car 2x*)*, for any form 2x*.
We can do much more
interesting things with macros, but first we will show how
to define a macro.

.defspec macro
The primitive special form for defining macros is 3macro*.
A macro definition looks like this:
.lisp
(macro 2name* (2arg*)
    2body*)
.end_lisp
2name* can be any function spec.  2arg* must be a variable.  2body* is
a sequence of Lisp forms that expand the macro; the last form should return
the expansion.
.end_defspec

To define our 3first* macro, we would say
.lisp
(macro first (x)
    (list 'car (cadr x)))
.end_lisp

	Here are some more simple examples of macros.  Suppose we want
any form that looks like 3(addone 2x*)* to be translated into
3(plus 1 2x*)*.  To define a macro to do this we would say
.lisp
(macro addone (x)
   (list 'plus '1 (cadr x)))
.end_lisp

	Now say we wanted a macro which would translate 3(increment 2x*)*
into 3(setq 2x* (1+ 2x*)*.  This would be:
.lisp
(macro increment (x)
    (list 'setq (cadr x) (list '1+ (cadr x))))
.end_lisp
Of course, this macro is of limited usefulness.  The reason is that the
form in the 2cadr* of the 3increment* form had better be a symbol.
If you tried 3(increment (car x))*, it would be translated into
3(setq (car x) (1+ (car x)))*, and 3setq* would complain.
(If you're interested in how to fix this problem, see 3setf* ((setf-fun));
but this is irrelevant to how macros work.)

	You can see from this discussion that macros are very different
from functions.  A function would not be able to tell what kind of
subforms are around in a call to itself; they get evaluated before the
function ever sees them.  However, a macro gets to look at the whole
form and see just what is going on there.  Macros are 2not* functions;
if 3first* is defined as a macro, it is not meaningful to apply
3first* to arguments.  A macro does not take arguments at all; its
expander function takes a 2Lisp form* and turns it into another 2Lisp
form*.

	The purpose of functions is to 2compute*; the purpose of
macros is to 2translate*.  Macros are used for a variety of purposes, the
most common being extensions to the Lisp language.  For example, Lisp
is powerful enough to express many different control structures, but it
does not provide every control structure anyone might ever possibly
want.  Instead, if a user wants some kind of control structure with a
syntax that is not provided, he can  translate it into some form that
Lisp 2does* know about.

	For example, someone might want a limited iteration construct
which increments a variable by one until it exceeds a limit (like the
FOR statement of the BASIC language).  He might want it to look like
.lisp
(for a 1 100 (print a) (print (* a a)))
.end_lisp
To get this, he could write a macro to translate it into
.lisp
(do a 1 (1+ a) (> a 100) (print a) (print (* a a)))
.end_lisp
A macro to do this could be defined with
.lisp
(macro for (x)
  (cons 'do
	(cons (cadr x)
	      (cons (caddr x)
		    (cons (list '1+ (cadr x))
			  (cons (list '> (cadr x) (cadddr x))
				(cddddr x)))))))
.end_lisp
Now he has defined his own new control structure primitive, and it
will act just as if it were a special form provided by Lisp itself.

@section "Aids for Defining Macros"

	The main problem with the definition for the 3for* macro is
that it is verbose and clumsy.  If it is that hard to write a macro
to do a simple specialized iteration construct, one would wonder how
anyone could write macros of any real sophistication.

	There are two things that make the definition so inelegant.
One is that the programmer must write things like "3(cadr x)*"
and "3(cddddr x)*" to refer to the parts of the form he wants
to do things with.  The other problem is that the long chains of calls
to the 3list* and 3cons* functions are very hard to read.

	Two features are provided to solve these two problems.
The 3defmacro* macro solves the former, and the "backquote" (3`*)
reader macro solves the latter.

@subsection "Defmacro"
.cindex macro-defining macros
.cindex defmacro

	Instead of referring to the parts of our form by "3(cadr x)*"
and such, we would like to give names to the various pieces of the form,
and somehow have the 3(cadr x)* automatically generated.  This is done
by a macro called 3defmacro*.  It is easiest to explain what 3defmacro* does
by showing an example. Here is how you would write the 3for* macro
using 3defmacro*:
.lisp
(defmacro for (var lower upper . body)
  (cons 'do
	(cons var
	      (cons lower
		    (cons (list '1+ var)
			  (cons (list '> var upper)
				body))))))
.end_lisp

	The 3(var lower upper . body)* is a 2pattern* to match against
the body of the form (to be more precise, to match against the cdr
of the argument to the macro's expander function).  If 3defmacro* tries to match the two
lists
.lisp
(var lower upper . body)
1and*
(a 1 100 (print a) (print (* a a)))
.end_lisp
3var* will get bound to the symbol 3a*, 3lower* to the fixnum 31*,
3upper* to the fixnum 3100*, and 3body* to the list
3((print a) (print (* a a)))*.  Then inside the body of the 3defmacro*,
3var, lower, upper,* and 3body* are variables, bound to the matching
parts of the macro form.

.defmac defmacro
3defmacro* is a general purpose macro-defining macro.  A 3defmacro*
form looks like 
.lisp
(defmacro 2name* 2pattern* . 2body*)
.end_lisp
The 2pattern* may be anything made up out of symbols and conses.
It is matched against the body of the macro form; both 2pattern*
and the form are car'ed and cdr'ed identically, and whenever
a non-3nil* symbol is hit in 2pattern*, the symbol is bound to the corresponding
part of the form.  All of the symbols in 2pattern* can be used
as variables within 2body*.  2name* is the name of the macro
to be defined; it can be any function spec (see (function-spec)).
2body* is evaluated with these bindings in effect,
and its result is returned to the evaluator as the expansion of the macro.
.end_defmac

	Note that the pattern need not be a list the way a lambda-list must.
In the above example, the pattern was a "dotted list", since the symbol
3body* was supposed to match the cddddr of the macro form.
If we wanted a new iteration form, like 3for* except that
our example would look like
.lisp
(for a (1 100) (print a) (print (* a a)))
.end_lisp
(just because we thought that was a nicer syntax), then we could
do it merely by modifying the pattern of the 3defmacro* above;
the new pattern would be 3(var (lower upper) . body)*.

	Here is how we would write our other examples using 3defmacro*:
.lisp
(defmacro first (the-list)
    (list 'car the-list))

(defmacro addone (form)
   (list 'plus '1 form))

(defmacro increment (symbol)
   (list 'setq symbol (list '1+ symbol)))
.end_lisp
All of these were very simple macros and have very simple patterns,
but these examples show that we can replace the 3(cadr x)* with a
readable mnemonic name such as 3the-list* or 3symbol*, which
makes the program clearer, and enables documentation facilities such
as the 3arglist* function to describe the syntax of the special form
defined by the macro.

	There is another version of 3defmacro* which defines
displacing macros (see (displacing-macro)).
3defmacro* has other, more complex features; see (defmacro-hair).

@subsection "Backquote"
.setq backquote section-page
.cindex backquote

	Now we deal with the other problem: the long strings of calls to
3cons* and 3list*.  This problem is relieved by introducing some new
characters that are special to the Lisp reader.  Just as the
single-quote character makes it easier to type things of the form
3(quote 2x*)*, so will some more new special characters make it
easier to type forms that create new list structure.  The functionality
provided by these characters is called the 2backquote* facility.

	The backquote facility is used by giving a backquote character
(3`*), followed by a form.  If the form does
not contain any use of the comma character, the backquote acts just
like a single quote: it creates a form which, when evaluated, produces
the form following the backquote.  For example,
.lisp
 '(a b c) => (a b c)
 `(a b c) => (a b c)
.end_lisp
So in the simple cases, backquote is just like the regular single-quote
macro.  The way to get it to do interesting things is to include a
comma somewhere inside of the form following the backquote.
The comma is followed by a form, and that form gets evaluated even
though it is inside the backquote.  For example,
.lisp
(setq b 1)
`(a b c)  => (a b c)
`(a ,b c) => (a 1 c)
`(abc ,(+ b 4) ,(- b 1) (def ,b)) => (abc 5 0 (def 1))
.end_lisp
In other words, backquote quotes everything 2except* things preceeded by
a comma; those things get evaluated.

	A list following a backquote can be thought of as a template for
some new list structure.  The parts of the list that are preceeded by
commas are forms that fill in slots in the template; everything else is
just constant structure that will appear in the result.  This is usually
what you want in the body of a macro; some of the form generated by the macro
is constant, the same thing on every invocation of the macro.  Other parts
are different every time the macro is called, often being functions of
the form that the macro appeared in (the "arguments" of the macro).  The
latter parts are the ones for which you would use the comma.  Several examples
of this sort of use follow.

	When the reader sees the 3`(a ,b c)* it is actually generating
a form such as 3(list 'a b 'c)*.  The actual form generated may use
3list*, 3cons*, 3append*, or whatever might be a good idea; you
should never have to concern yourself with what it actually turns into.
All you need to care about is what it evaluates to.  Actually, it
doesn't use the regular functions 3cons*, 3list*, and so forth, but
uses special ones instead so that the grinder can recognize a form which
was created with the backquote syntax, and print it using backquote so
that it looks like what you typed in.  You should never write any
program that depends on this, anyway, because backquote makes no
guarantees about how it does what it does.  In particular, in some
circumstances it may decide to create constant forms, that will cause
sharing of list structure at run time, or it may decide to create forms
that will create new list structure at run time.
For example, if the readers sees 3`(r . ,nil)*,
it may produce the same thing as 3(cons 'r nil)*, or 3'(r . nil)*.
Be careful that your program does not depend on which of these it does.

	This is generally found to be pretty confusing by most people; the best way
to explain further seems to be with examples.  Here is how we would write our
three simple macros using both the 3defmacro* and backquote facilities.
.lisp
(defmacro first (the-list)
    `(car ,the-list))

(defmacro addone (form)
   `(plus 1 ,form))

(defmacro increment (symbol)
   `(setq ,symbol (1+ ,symbol)))
.end_lisp
To finally demonstrate how easy it is to define macros with these two facilities,
here is the final form of the 3for* macro.
.lisp
(defmacro for (var lower upper . body)
  `(do ,var ,lower (1+ ,var) (> ,var ,upper) . ,body))
.end_lisp
Look at how much simpler that is than the original definition.  Also,
look how closely it resembles the code it is producing.  The functionality
of the 3for* really stands right out when written this way.

	If a comma inside a backquote form is followed by an "atsign"
character (3@@*), it has a special meaning.  The "3,@@*" should
be followed by a form whose value is a 2list*; then each of the elements
of the list is put into the list being created by the backquote.  In other
words, instead of generating a call to the 3cons* function, backquote
generates a call to 3append*.  For example, if 3a* is bound to
3(x y z)*, then 3`(1 ,a 2)* would evaluate to 3(1 (x y z) 2)*,
but 3`(1 ,@@a 2)* would evaluate to 3(1 x y z 2)*.

	Here is an example of a macro definition that uses the "3,@@*"
construction.  Suppose you wanted to extend Lisp by adding a kind of
special form called 3repeat-forever*, which evaluates all of its
subforms repeatedly.  One way to implement this would be to expand
.lisp
(repeat-forever 2form1* 2form2* 2form3*)
.end_lisp
into
.lisp
(prog ()
    a 2form1*
      2form2*
      2form3*
      (go a))
.end_lisp
	You could define the macro by
.lisp
(defmacro repeat-forever body
       `(prog ()
            a ,@@body
              (go a)))
.end_lisp

A similar construct is "3,.*" (comma, dot).  This means the same thing
as "3,@@*" except that the list which is the value of the following form
may be freely smashed; backquote uses 3nconc* rather than 3append*.
This should of course be used with caution.

Backquote does not make any guarantees about what parts of the structure it
shares and what parts it copies.  You should not do destructive operations
such as 3nconc* on the results of backquote forms such as
.lisp
`(,a b c d)
.end_lisp
since backquote might choose to implement this as
.lisp
(cons a '(b c d))
.end_lisp
and 3nconc* would smash the constant.  On the other hand, it would be
safe to 3nconc* the result of
.lisp
`(a b ,c ,d)
.end_lisp
since there is nothing this could expand into that does not involve
making a new list, such as
.lisp
(list 'a 'b c d)
.end_lisp

Backquote of course guarantees not to do any destructive operations
(3rplaca*, 3rplacd*, 3nconc*) on the components of the
structure it builds, unless the "3,.*" syntax is used.

	Advanced macro writers sometimes write "macro-defining macros":
forms which expand into forms which, when evaluated, define macros.  In
such macros it is often useful to use nested backquote constructs.  The
following example illustrates the use of nested backquotes in the
writing of macro-defining macros.

	This example is a very simple version of 3defstruct* (see (defstruct-fun)).
You should first understand the basic description of 3defstruct* before
proceeding with this example.  The 3defstruct* below does not accept
any options, and only allows the simplest kind of items; that is, it only
allows forms like
.lisp
(defstruct (2name*)
     2item1*
     2item2*
     2item3*
     2item4*
     ...)
.end_lisp
	We would like this form to expand into
.lisp
(progn 'compile
 (defmacro 2item1* (x)
      `(aref ,x 0))
 (defmacro 2item2* (x)
      `(aref ,x 1))
 (defmacro 2item3* (x)
      `(aref ,x 2))
 (defmacro 2item4* (x)
      `(aref ,x 3))
 ...)
.end_lisp

(The meaning of the 3(progn 'compile ...)* is discussed on
(progn-quote-compile-page).) Here is the macro to perform the
expansion:
.lisp
(defmacro defstruct ((name) . items)
     (do ((item-list items (cdr item-list))
	  (ans nil)
	  (i 0 (1+ i)))
	 ((null item-list)
          `(progn 'compile . ,(nreverse ans)))
       (setq ans
	     (cons `(defmacro ,(car item-list) (x)
			   `(aref ,x ,',i))
		   ans))))
.end_lisp
	The interesting part of this definition is the body of
the (inner) 3defmacro* form:
.lisp
`(aref ,x ,',i)
.end_lisp
Instead of using this backquote construction, we could have written
.lisp
(list 'aref x ,i)
.end_lisp
That is, the "3,',*"
acts like a comma which matches the outer backquote, while
the "3,*" preceeding the "3x*" matches with the inner
backquote.  Thus, the symbol 3i* is evaluated when the
3defstruct* form is expanded, whereas the symbol 3x* is
evaluated when the accessor macros are expanded.

	Backquote can be useful in situations other than the writing
of macros.  Whenever there is a piece of list structure to be consed
up, most of which is constant, the use of backquote can make the
program considerably clearer.

@section Substitutable Functions
.cindex subst
.cindex substitutable function

A substitutable function is a function which is open coded by the
compiler.  It is like any other function when applied, but it can be
expanded instead, and in that regard resembles a macro.

.defspec defsubst
3defsubst* is used for defining substitutable functions.  It is used just
like 3defun*.
.lisp
(defsubst 2name* 2lambda-list* . 2body*)
.end_lisp
and does almost the same thing.  It defines a function which executes
identically to the one which a similar call to 3defun* would define.  The
difference comes when a function which 2calls* this one is compiled.  Then,
the call will be open-coded by substituting the substitutable function's
definition into the code being compiled.  The function itself
looks like 3(named-subst 2name* 2lambda-list* . 2body*)*.  Such a function
is called a 3subst*.  For example, if
we define
.lisp
(defsubst square (x) (* x x))

(defun foo (a b) (square (+ a b)))
.end_lisp
then if 3foo* is used interpreted, 3square* will work just as if it had
been defined by 3defun*.  If 3foo* is compiled, however, the squaring
will be substituted into it and it will compile just like
.lisp
(defun foo (a b) (* (+ a b) (+ a b)))
.end_lisp
3square*'s definition would be
.lisp
(named-subst square (x) (* x x))
.end_lisp
(The internal formats of 3subst*s and 3named-subst*s are explained in (subst).)

A similar 3square* could be defined as a macro, with
.lisp
(defmacro square (x) `(* ,x ,x))
.end_lisp
In general, anything that is implemented as a 3subst* can be re-implemented
as a macro, just by changing the 3defsubst* to a 3defmacro* and putting
in the appropriate backquote and commas.  The disadvantage of macros
is that they are not functions, and so cannot be applied to arguments.
Their advantage is that they can do much more powerful things than
3subst*s can.  This is also a disadvantage since macros provide more
ways to get into trouble.  If something can be implemented either as a macro
or as a 3subst*, it is generally better to make it a 3subst*.

The 2lambda-list* of a 3subst* may contain 3&optional* and
3&rest*, but no other lambda-list keywords.  If there is a
rest-argument, it is replaced in the body with an explicit call to
3list*:
.lisp
(defsubst append-to-foo (&rest args) (setq foo (append args foo)))
(append-to-foo x y z)
.end_lisp
expands to
.lisp
(setq foo (append (list x y z) foo))
.end_lisp

Rest arguments in 3subst*s are most useful with
3lexpr-funcall*, because of an optimization that is done:
.lisp
(defsubst xhack (&rest indices) (lexpr-funcall 'xfun xarg1 indices))
(xhack a (car b))
.end_lisp
is equivalent to
.lisp
(xfun xarg1 a (car b))
.end_lisp
If 3xfun* is itself a 3subst*, it will be expanded in turn.

You will notice that the substitution performed is very simple and takes no care
about the possibility of computing an argument twice when it really ought to be
computed once.  
For instance, in the current implementation, the functions
.lisp
(defsubst reverse-cons (x y) (cons y x))
(defsubst in-order (a b c) (and (< a b) (< b c)))
.end_lisp
would present problems.  When compiled, because of the substitution
a call to 3reverse-cons* would evaluate its arguments in the
wrong order, and a call to 3in-order* could evaluate its second
argument twice.  This will be fixed at some point in the future,
but for now the writer of 3defsubst*'s must be cautious.
Also all occurrences of the argument names in the body are replaced
with the argument forms, wherever they appear.  Thus an argument name
should not be used in the body for anything else, such as a function
name or a symbol in a constant.

As with 3defun*, 2name* can be any function spec.
.end_defspec


@section Hints to Macro Writers

There are many useful techniques for writing macros.  Over the years,
Lisp programmers have discovered techniques that most programmers find
useful, and have identified pitfalls that must be avoided.  This
section discusses some of these techniques, and illustrates them with
examples.

The most important thing to keep in mind as you learn to write macros
is that the first thing you should do is figure out what the macro form
is supposed to expand into, and only then should you start to actually
write the code of the macro.  If you have a firm grasp of what the
generated Lisp program is supposed to look like, from the start, you
will find the macro much easier to write.

In general any macro that can be written as a substitutable
function (see (defsubst-fun)) should be written as one, not as a macro,
for several reasons: substitutable functions are easier to write and to
read; they can be passed as functional arguments (for example, you can
pass them to 3mapcar*); and there are some subtleties that can occur
in macro definitions that need not be worried about in substitutable
functions.  A macro can be a substitutable function only if it has
exactly the semantics of a function, rather than a special form.  The
macros we will see in this section are not semantically like functions;
they must be written as macros.

@subsection Name Conflicts

One of the most common errors in writing macros is best illustrated by
example.  Suppose we wanted to write 3dolist* (see (dolist-fun)) as
a macro that expanded into a 3do* (see (do-fun)).  The first step,
as always, is to figure out what the expansion should look like.  Let's
pick a representative example form, and figure out what its expansion
should be.  Here is a typical 3dolist* form.

.lisp
(dolist (element (append a b))
  (push element *big-list*)
  (foo element 3))
.end_lisp

We want to create a 3do* form that does the thing that the above
3dolist* form says to do.  That is the basic goal of the macro: it
must expand into code that does the same thing that the original code
says to do, but it should be in terms of existing Lisp constructs.
The 3do* form might look like this:

.lisp
(do ((list (append a b) (cdr list))
     (element))
    ((null list))
  (setq element (car list))
  (push element *big-list*)
  (foo element 3))
.end_lisp

Now we could start writing the macro that would generate this code, and
in general convert any 3dolist* into a 3do*, in an analogous way.
However, there is a problem with the above scheme for expanding the
3dolist*.  The above expansion works fine.  But what if the input
form had been the following:

.lisp
(dolist (list (append a b))
  (push list *big-list*)
  (foo list 3))
.end_lisp

This is just like the form we saw above, except that the user happened
to decide to name the looping variable 3list* rather than
3element*.  The corresponding expansion would be:

.lisp
(do ((list (append a b) (cdr list))
     (list))
    ((null list))
  (setq list (car list))
  (push list *big-list*)
  (foo list 3))
.end_lisp

This doesn't work at all!  In fact, this is not even a valid program,
since it contains a 3do* that uses the same variable in two different
iteration clauses.

Here's another example that causes trouble:

.lisp
(let ((list nil))
  (dolist (element (append a b))
    (push element list)
    (foo list 3)))
.end_lisp

If you work out the expansion of this form, you will see that there are
two variables named 3list*, and that the user meant to refer to the
outer one but the generated code for the 3push* actually uses
the inner one.

The problem here is an accidental name conflict.  This can happen in
any macro that has to create a new variable.  If that variable ever
appears in a context in which user code might access it, then you have
to worry that it might conflict with some other name that the user is
using for his own program.

One way to avoid this problem is to choose a name that is very
unlikely to be picked by the user, simply by choosing an unusual name.
This will probably work, but it is inelegant since there is no
guarantee that the user won't just happen to choose the same name.  The
way to really avoid the name conflict is to use an uninterned symbol as
the variable in the generated code.  The function 3gensym* (see
(gensym-fun)) is useful for creating such symbols.

Here is the expansion of the original form, using an uninterned
symbol created by 3gensym*.

.lisp
(do ((g0005 (append a b) (cdr g0005))
     (element))
    ((null g0005))
  (setq element (car g0005))
  (push element *big-list*)
  (foo element 3))
.end_lisp

This is the right kind of thing to expand into.  Now that we understand
how the expansion works, we are ready to actually write the macro.
Here it is:

.lisp
(defmacro dolist ((var form) . body)
  (let ((dummy (gensym)))
    `(do ((,dummy ,form (cdr ,dummy))
	  (,var))
	 ((null ,dummy))
       (setq ,var (car ,dummy))
       . ,body)))
.end_lisp

.cindex dot, in symbols
.cindex period, in symbols
Many system macros do not use 3gensym* for the internal variables in their
expansions.  Instead they use symbols whose print names begin and end with a dot.
This provides meaningful names for these variables when looking at the generated
code and when looking at the state of a computation in the error-handler.
However, this convention means that users should avoid naming variables this way.

@subsection prog-context Conflicts

A related problem occurs when you write a macro that expands into a
3prog* (or a 3do*, or something that expands into 3prog* or 3do*)
behind the user's back (unlike 3dolist*, which is documented to be like
3do*).
Consider the 3error-restart* special form (see (error-restart-fun));
suppose we wanted to implement it as a macro that expands into a 3prog*.
If it expanded into a plain-old 3prog*, then the following (contrived)
Lisp program would not behave correctly:

.lisp
(prog ()
   (setq a 3)
   (error-restart
     (cond ((> a 10)
            (return 5))
	   ((> a 4)
            (cerror nil t 'lose "You lose."))))
   (setq b 7))
.end_lisp

The problem is that the 3return* would return from the
3error-restart* instead of the 3prog*.  The way to avoid this
problem is to use a named 3prog* whose name is 3t*.  The name 3t*
is special in that it is invisible to the 3return* function.  If we
write 3error-restart* as a macro that expands into a 3prog* named
3t*, then the 3return* will pass right through the
3error-restart* form and return from the 3prog*, as it ought to.

In general, when a macro expands into a 3prog* or a 3do* around the
user's code, the 3prog* or 3do* should be named 3t* so that
3return* forms in the user code will return to the right place,
unless the macro is documented as generating a 3prog/do*-like form
which may be exited with 3return*.

@subsection Macros Expanding into Many Forms
.setq progn-quote-compile-discussion section-page
.setq progn-quote-compile-page page

Sometimes a macro wants to do several different things when its expansion
is evaluated.  Another way to say this is that sometimes a macro wants to
expand into several things, all of which should happen sequentially at run
time (not macro-expand time).  For example, suppose you wanted to implement
3defconst* (see (defconst-fun)) as a macro.  3defconst* must do two
things: declare the variable to be special, and set the variable to its
initial value.  (We will implement a simplified 3defconst* that only does
these two things, and doesn't have any options.)  What should a
3defconst* form expand into?  Well, what we would like is for an
appearance of
.lisp
(defconst a (+ 4 b))
.end_lisp
in a file to be the same thing as the appearance of the following two forms:
.lisp
(declare (special a))
(setq a (+ 4 b))
.end_lisp
However, because of the way that macros work, they only expand into one
form, not two.  So we need to have a 3defconst* form expand into
one form that is just like having two forms in the file.

There is such a form.  It looks like this:
.lisp
(progn 'compile
       (declare (special a))
       (setq a (+ 4 b)))
.end_lisp
In interpreted Lisp, it is easy to see what happens here.  This is a
3progn* special form, and so all its subforms are evaluated, in turn.
First the form 3'compile* is evaluated.  The result is the symbol
3compile*; this value is not used, and evaluation of 3'compile* has
no side-effects, so the 3'compile* subform is effectively ignored.
Then the 3declare* form and the 3setq* form are evaluated, and so
each of them happens, in turn.  So far, so good.

The interesting thing is the way this form is treated by the compiler.
The compiler specially recognizes any 3progn* form at top level in a
file whose first subform is 3'compile*.  When it sees such a
form, it processes each of the remaining subforms of the 3progn* just
as if that form had appeared at top level in the file.  So the compiler
behaves exactly as if it had encountered the 3declare* form at top
level, and then encountered the 3setq* form at top level, even though
neither of those forms was actually at top-level (they were both inside
the 3progn*).  This feature of the compiler is provided specifically for
the benefit of macros that want to expand into several things.

Here is the macro definition:
.lisp
(defmacro defconst (variable init-form)
  `(progn 'compile
	  (declare (special ,variable))
	  (setq ,variable ,init-form)))
.end_lisp

Here is another example of a form that wants to expand into several
things.  We will implement a special form called 3define-command*,
which is intended to be used in order to define commands in some
interactive user subsystem.  For each command, there are two things
provided by the 3define-command* form: a function that executes the
command, and a text string that contains the documentation for the
command (in order to provide an on-line interactive documentation
feature).  This macro is a simplified version of a macro that is
actually used in the Zwei editor.  Suppose that in
this subsystem, commands are always functions of no arguments,
documentation strings are placed on the 3help* property of the name
of the command, and the names of all commands are put onto a list.
A typical call to 3define-command* would look like:
.lisp
(define-command move-to-top
   "This command moves you to the top."
   (do ()
       ((at-the-top-p))
     (move-up-one)))
.end_lisp
This could expand into:
.lisp
(progn 'compile
       (defprop
	 move-to-top
	 "This command moves you to the top."
	 help)
       (push 'move-to-top *command-name-list*)
       (defun move-to-top ()
	 (do ()
	     ((at-the-top-p))
	   (move-up-one)))
       )
.end_lisp
The 3define-command* expands into three forms.  The first one sets up
the documentation string and the second one puts the command name onto
the list of all command names.  The third one is the 3defun* that
actually defines the function itself.  Note that the 3defprop* and
3push* happen at load-time (when the file is loaded); the function,
of course, also gets defined at load time.  (See the description of
3eval-when* ((eval-when-fun)) for more discussion of the differences
between compile time, load time, and eval time.)

This technique makes Lisp a powerful language in which to implement
your own language.  When you write a large system in Lisp, frequently
you can make things much more convenient and clear by using macros to
extend Lisp into a customized language for your application.  In the
above example, we have created a little language extension: a new
special form that defines commands for our system.  It lets the writer
of the system put his documentation strings right next to the code that
they document, so that the two can be updated and maintained together.
The way that the Lisp environment works, with load-time evaluation able
to build data structures, lets the documentation data base and the list
of commands be constructed automatically.

@subsection Macros that Surround Code

There is a particular kind of macro that is very useful for many
applications.  This is a macro that you place "around" some Lisp code,
in order to make the evaluation of that code happen in some context.
For a very simple example, we could define a macro called
3with-output-in-base*, that executes the forms within its body
with any output of numbers that is done defaulting to a specified base.
.lisp
(defmacro with-output-in-base ((base-form) &body body)
   `(let ((base ,base-form))
      . ,body))
.end_lisp
A typical use of this macro might look like:
.lisp
(with-output-in-base (*default-base*)
   (print x)
   (print y))
.end_lisp
which would expand into
.lisp
(let ((base *default-base*))
  (print x)
  (print y))
.end_lisp

This example is too trivial to be very useful; it is intended to
demonstrate some stylistic issues.  There are some special forms in
Zetalisp that are similar to this macro; see
3with-open-file* ((with-open-file-fun)) and 3with-input-from-string*
((with-input-from-string-fun)), for example.
The really interesting thing, of course, is that you can define your
own such special forms for your own specialized applications.  One very
powerful application of this technique was used in a system that
manipulates and solves the Rubik's cube puzzle.  The system heavily
uses a special form called 3with-front-and-top*, whose meaning is
"evaluate this code in a context in which this specified face of the
cube is considered the front face, and this other specified face is
considered the top face".

The first thing to keep in mind when you write this sort of macro is
that you can make your macro much clearer to people who might read your
program if you conform to a set of loose standards of syntactic style.
By convention, the names of such special forms start with "3with-*".
This seems to be a clear way of expressing the concept that we are
setting up a context; the meaning of the special form is "do this stuff
2with* the following things true".  Another convention is that any
"parameters" to the special form should appear in a list that is the
first subform of the special form, and that the rest of the subforms
should make up a body of forms that are evaluated sequentially with the
last one returned.  All of the examples cited above work this way.  In
our 3with-output-in-base* example, there was one parameter (the
base), which appears as the first (and only) element of a list that is
the first subform of the special form.  The extra level of parentheses
in the printed representation serves to separate the "parameter" forms
from the "body" forms so that it is textually apparent which is which;
it also provides a convenient way to provide default parameters (a good
example is the 3with-input-from-string* special form
((with-input-from-string-fun)), which takes two required and two
optional "parameters").  Another convention/technique is to use the
3&body* keyword in the 3defmacro* to tell the editor how to
correctly indent the special form (see (&body)).

The other thing to keep in mind is that control can leave the special
form either by the last form's returning, or by a non-local exit (that
is, something doing a 3*throw*).  You should write the special form
in such a way that everything will be cleaned up appropriately no
matter which way control exits.  In our 3with-output-in-base*
example, there is no problem, because non-local exits undo
lambda-bindings.  However, in even slightly more complicated cases, an
3unwind-protect* form (see (unwind-protect-fun)) is needed: the
macro must expand into an 3unwind-protect* that surrounds the body,
with "cleanup" forms that undo the context-setting-up that the macro
did.  For example, 3using-resource* (see (using-resource-fun))
is implemented as a macro
that does an 3allocate-resource* and then performs the body inside of
an 3unwind-protect* that has a 3deallocate-resource* in its
"cleanup" forms.  This way the allocated resource item will be
deallocated whenever control leaves the 3using-resource* special form.

@subsection Multiple and Out-of-order Evaluation

In any macro, you should always pay attention to the problem of
multiple or out-of-order evaluation of user subforms.  Here is an
example of a macro with such a problem.  This macro defines a special
form with two subforms.  The first is a reference, and the second is a
form.  The special form is defined to create a cons whose car and cdr
are both the value of the second subform, and then to set the reference
to be that cons.  Here is a possible definition:
.lisp
(defmacro test (reference form)
   `(setf ,reference (cons ,form ,form)))
.end_lisp
Simple cases will work all right:
.lisp
(test foo 3) ==>
  (setf foo (cons 3 3))
.end_lisp
But a more complex example, in which the subform has side effects,
can produce surprising results:
.lisp
(test foo (setq x (1+ x))) ==>
  (setf foo (cons (setq x (1+ x))
                  (setq x (1+ x))))
.end_lisp
The resulting code evaluates the 3setq* form twice, and so 3x*
is increased by two instead of by one.  A better definition of 3test*
that avoids this problem is:
.lisp
(defmacro test (reference form)
   (let ((value (gensym)))
     `(let ((,value ,form))
         (setf ,reference (cons ,value ,value)))))
.end_lisp
With this definition, the expansion works as follows:
.lisp
(test foo (setq x (1+ x))) ==>
  (let ((g0005 (setq x (1+ x))))
     (setf foo (cons g0005 g0005)))
.end_lisp

In general, when you define a new special form that has some forms as
its subforms, you have to be careful about just when those forms get
evaluated.  If you aren't careful, they can get evaluated more than
once, or in an unexpected order, and this can be semantically
significant if the forms have side-effects.  There's nothing
fundamentally wrong with multiple or out-of-order evalation if that is
really what you want and if it is what you document your special form
to do.  However, it is very common for special forms to simply behave
like functions, and when they are doing things like what functions do,
it's natural to expect them to be function-like in the evaluation of
their subforms.  Function forms have their subforms evaluated, each
only once, in left-to-right order, and special forms that are similar
to function forms should try to work that way too for clarity and
consistency.

There is a tool that makes it easier for you to follow the principle
explained above.  It is a macro called 3once-only*.  It is most easily
explained by example.  The way you would write 3test* using
3once-only* is as follows:
.lisp
(defmacro test (reference form)
  (once-only (form)
    `(setf ,reference (cons ,form ,form))))
.end_lisp
This defines 3test* in such a way that the 3form* is only evaluated
once, and references to 3form* inside the macro body refer to that
value.  3once-only* automatically introduces a lambda-binding of a
generated symbol to hold the value of the form.  Actually, it is more
clever than that; it avoids introducing the lambda-binding for forms
whose evaluation is trivial and may be repeated without harm nor cost,
such as numbers, symbols, and quoted structure.  This is just an
optimization that helps produce more efficient code.

The 3once-only* macro makes it easier to follow the principle, but it
does not completely nor automatically solve the problems of multiple and
out-of-order evaluation.  It is just a tool that can solve some of the
problems some of the time; it is not a panacea.

The following description attempts to explain what 3once-only* does,
but it is a lot easier to use 3once-only* by imitating the example
above than by trying to understand 3once-only*'s rather tricky
definition.

.defmac once-only
A 3once-only* form looks like 
.lisp
(once-only 2var-list*
  2form1*
  2form2*
  ...)
.end_lisp
2var-list* is a list of variables.  The 2forms* are a Lisp program,
that presumably uses the values of those variables.  When the form
resulting from the expansion of the 3once-only* is evaluated, the first
thing it does is to inspect the values of each of the variables in
2var-list*; these values are assumed to be Lisp forms.  For each of the
variables, it binds that variable either to its current value, if the
current value is a trivial form, or to a generated symbol.  Next,
3once-only* evaluates the 2forms*, in this new binding environment, and
when they have been evaluated it undoes the bindings.  The result of the
evaluation of the last 2form* is presumed to be a Lisp form, typically
the expansion of a macro.  If all of the variables had been bound to
trivial forms, then 2once-only* just returns that result.  Otherwise,
3once-only* returns the result wrapped in a lambda-combination that binds
the generated symbols to the result of evaluating the respective
non-trivial forms.

The effect is that the program produced by evaluating the 3once-only* form
is coded in such a way that it only evaluates each form once, unless evaluation
of the form has no side-effects, for each of the forms which were the values
of variables in 2var-list*.  At the same time, no unnecessary 3lambda*-binding
appears in this program, but the body of the 3once-only* is not cluttered up
with extraneous code to decide whether or not to introduce 3lambda*-binding
in the program it constructs.
.end_defmac

Caution!  A number of system macros, 3setf* for example, fail to
follow this convention.  Unexpected multiple evaluation and out-of-order
evaluation can occur with them.  This was done for the sake of efficiency,
is prominently mentioned in the documentation of these macros, and will
be fixed in the future.  It would be best not to compromise the semantic
simplicity of your own macros in this way.

@subsection Nesting Macros
.setq compiler-let-discussion section-page

A useful technique for building language extensions is to define
programming constructs that employ two special forms, one of which is
used inside the body of the other.  Here is a simple example.  There
are two special forms.  The outer one is called 3with-collection*,
and the inner one is called 3collect*.  3collect* takes one
subform, which it evaluates; 3with-collection* just has a body, whose
forms it evaluates sequentially.  3with-collection* returns a list of
all of the values that were given to 3collect* during the evaluation
of the 3with-collection*'s body.  For example,
.lisp
(with-collection
  (dotimes (i 5)
    (collect i)))

  => (1 2 3 4 5)
.end_lisp
Remembering the first piece of advice we gave about macros, the
next thing to do is to figure out what the expansion looks like.
Here is how the above example could expand:
.lisp
(let ((g0005 nil))
  (dotimes (i 5)
     (push i g0005))
  (nreverse g0005))
.end_lisp
Now, how do we write the definition of the macros?  Well,
3with-collection* is pretty easy:
.lisp
(defmacro with-collection (&body body)
  (let ((var (gensym)))
     `(let ((,var nil))
        ,@@body
        (nreverse ,var))))
.end_lisp
The hard part is writing 3collect*.  Let's try it:
.lisp
(defmacro collect (argument)
  `(push ,argument ,var))
.end_lisp
Note that something unusual is going on here: 3collect* is using the
variable 3var* freely.  It is depending on the binding that takes
place in the body of 3with-collection* in order to get access to the
value of 3var*.  Unfortunately, that binding took place when
3with-collection* got expanded; 3with-collection*'s expander
function bound 3var*, and it got unbound when the expander function
was done.  By the time the 3collect* form gets expanded, 3var* has
long since been unbound.  The macro definitions above do not work.
Somehow the expander function of 3with-collection* has to communicate
with the expander function of 3collect* to pass over the generated
symbol.

The only way for 3with-collection* to convey information to the
expander function of 3collect* is for it to expand into something
that passes that information.  What we can do is to define a special
variable (which we will call 3*collect-variable**), and have
3with-collection* expand into a form that binds this variable to the
name of the variable that the 3collect* should use.  Now, consider
how this works in the interpreter.  The evaluator will first see the
3with-collection* form, and call in the expander function to expand
it.  The expander function creates the expansion, and returns to the
evaluator, which then evaluates the expansion.  The expansion includes
in it a 3let* form to bind 3*collect-variable** to the generated
symbol.  When the evaluator ses this 3let* form during the evaluation
of the expansion of the 3with-collection* form, it will set up the
binding and recursively evaluate the body of the 3let*.  Now, during
the evaluation of the body of the 3let*, our special variable is
bound, and if the expander function of 3collect* gets run, it will be
able to see the value of 3collection-variable* and incorporate the
generated symbol into its own expansion.

Writing the macros this way is not quite right.  It works fine
interpreted, but the problem is that it does not work when we try to
compile Lisp code that uses these special forms.  When code is being
compiled, there isn't any interpreter to do the binding in our new
3let* form; macro expansion is done at compile time, but generated
code does not get run until the results of the compilation are loaded
and run.  The way to fix our definitions is to use 3compiler-let*
instead of 3let*.  3compiler-let* (see (compiler-let-fun)) is a
special form that exists specifically to do the sort of thing we are
trying to do here.  3compiler-let* is identical to 3let* as far as
the interpreter is concerned, so changing our 3let* to a
3compiler-let* won't affect the behavior in the interpreter; it will
continue to work.  When the compiler encounters a 3compiler-let*, however,
it actually performs the bindings that the 3compiler-let* specifies,
and proceeds to compile the body of the 3compiler-let* with all of
those bindings in effect.  In other words, it acts as the interpreter
would.

Here's the right way to write these macros:
.lisp
(defvar *collect-variable*)

(defmacro with-collection (&body body)
  (let ((var (gensym)))
     `(let ((,var nil))
        (compiler-let ((*collect-variable* ',var))
           . ,body)
        (nreverse ,var))))

(defmacro collect (argument)
  `(push ,argument ,*collect-variable*))
.end_lisp

@subsection Functions Used During Expansion

The technique of defining functions to be used during macro expansion
deserves explicit mention here.  It may not occur to you, but a macro
expander function is a Lisp program like any other Lisp program, and it
can benefit in all the usual ways by being broken down into a
collection of functions that do various parts of its work.  Usually
macro expander functions are pretty simple Lisp programs that take
things apart and put them together slightly differently and such, but
some macros are quite complex and do a lot of work.  Several features
of Zetalisp, including flavors, 3loop*, and 3defstruct*,
are implemented using very complex macros, which, like any complex
well-written Lisp program, are broken down into modular functions.  You should
keep this in mind if you ever invent an advanced language extension
or ever find yourself writing a five-page expander function.

A particular thing to note is that any functions used by macro-expander
functions must be available at compile-time.  You can make a function
available at compile time by surrounding its defining form with an
3(eval-when (compile load eval) ...)*; see (eval-when-fun) for more
details.  Doing this means that at compile time the definition of the
function will be interpreted, not compiled, and hence will run more
slowly.  Another approach is to separate macro definitions and the
functions they call during expansion into a separate file, often called
a "defs" (definitions) file.  This file defines all the macros but does
not use any of them.  It can be separately compiled and loaded up
before compiling the main part of the program, which uses the macros.
The 2system* facility (see (system-system)) helps keep these
various files straight, compiling and loading things in the right order.


@section "Aids for Debugging Macros"

.defun mexp
3mexp* goes into a loop in which it reads forms and sequentially
expands them, printing out the result of each expansion (using
the grinder (see (grind)) to improve readability).  It terminates
when it reads an atom (anything that is not a cons).  If you type
in a form which is not a macro form, there will be no expansions
and so it will not type anything out, but just prompt you for
another form.  This allows you to see what your macros are
expanding into, without actually evaluating the result of the expansion.
.end_defun

@section "Displacing Macros"
.setq displacing-macro section-page
.cindex displacing macros
	Every time the the evaluator sees a macro form, it must
call the macro to expand the form.  If this expansion always
happens the same way, then it is wasteful to expand the whole
form every time it is reached; why not just expand it once?
A macro is passed the macro form itself, and so it can change
the car and cdr of the form to something else by using 3rplaca*
and 3rplacd*!  This way the first time the macro is expanded,
the expansion will be put where the macro form used to be, and the
next time that form is seen, it will already be expanded.  A macro that
does this is called a 2displacing macro*, since it displaces
the macro form with its expansion.

	The major problem with this is that the Lisp form
gets changed by its evaluation.  If you were to write a program
which used such a macro, call 3grindef* to look at it,
then run the program and call 3grindef* again, you would
see the expanded macro the second time.  Presumably the reason
the macro is there at all is that it makes the program look nicer;
we would like to prevent the unnecessary expansions, but still let
3grindef* display the program in its more attractive form.
This is done with the function 3displace*.

	Anothing thing to worry about with displacing macros is that if
you change the definition of a displacing macro, then your new
definition will not take effect in any form that has already been
displaced.  If you redefine a displacing macro, an existing form using
the macro will use the new definition only if the form has never been
evaluated.

.defun displace form expansion
2form* must be a list.
3displace* replaces the car and cdr of 2form* so
that it looks like:
.lisp
(si:displaced 2original-form* 2expansion*)
.end_lisp
2original-form* is equal to 2form* but has a different
top-level cons so that the replacing mentioned above doesn't
affect it.  3si:displaced* is a macro, which returns
the caddr of its own macro form.  So when the 3si:displaced*
form is given to the evaluator, it "expands" to 2expansion*.
3displace* returns 2expansion*.
.end_defun

	The grinder knows specially about 3si:displaced* forms,
and will grind such a form as if it had seen the original-form
instead of the 3si:displaced* form.

	So if we wanted to rewrite our 3addone* macro as a displacing
macro, instead of writing
.lisp
(macro addone (x)
   (list 'plus '1 (cadr x)))
.end_lisp
we would write
.lisp
(macro addone (x)
   (displace x (list 'plus '1 (cadr x))))
.end_lisp

	Of course, we really want to use 3defmacro* to define
most macros.  Since there is no way to get at the original macro form itself
from inside the body of a 3defmacro*, another version of it is
provided:

.defmac defmacro-displace
3defmacro-displace* is just like 3defmacro* except that
it defines a displacing macro, using the 3displace* function.
.end_defmac

	Now we can write the displacing version of 3addone* as
.lisp
(defmacro-displace addone (val)
   (list 'plus '1 val))
.end_lisp
All we have changed in this example is the 3defmacro* into
3defmacro-displace*.  3addone* is now a displacing macro.

@section "Advanced Features of Defmacro"
.setq defmacro-hair section-page

The pattern in a 3defmacro* is more like the 3lambda*-list
of a normal function than revealed above.  It is allowed to
contain certain 3&*-keywords.

3&optional* is followed by 2variable*, 3(2variable*)*,
3(2variable* 2default*)*, or 3(2variable* 2default*
2present-p*)*, exactly the same as in a function.  Note that
2default* is still a form to be evaluated, even though 2variable*
is not being bound to the value of a form.  2variable* does not have
to be a symbol; it can be a pattern.  In this case the first form is
disallowed because it is syntactically ambigous.  The pattern must be
enclosed in a singleton list.  If 2variable* is a pattern, 2default*
can be evaluated more than once.

Using 3&rest* is the same as using a dotted list as the pattern,
except that it may be easier to read and leaves a place to put 3&aux*.

3&aux* is the same in a macro as in a function, and has nothing to do
with pattern matching.

3defmacro* has a couple of additional keywords not allowed in functions.

.setq &body page
3&body* is identical to 3&rest* except that it informs the editor and the grinder
that the remaining subforms constitute a "body" rather than "arguments"
and should be indented accordingly.

.setq &list-of page
3&list-of* 2pattern* requires the corresponding position of the
form being translated to contain a list (or 3nil*).  It
matches 2pattern* against each element of that list.  Each variable
in 2pattern* is bound to a list of the corresponding values in each element
of the list matched by the 3&list-of*.  This may be clarified by an
example.  Suppose we want to be able to say things like
.lisp
(send-commands (aref turtle-table i)
  (forward 100)
  (beep)
  (left 90)
  (pen 'down 'red)
  (forward 50)
  (pen 'up))
.end_lisp
We could define a 3send-commands* macro as follows:
.lisp
(defmacro send-commands (object
		&body &list-of (command . arguments))
  `(let ((o ,object))
     . ,(mapcar #'(lambda (com args) `(send o ',com . ,args))
		command arguments)))
.end_lisp
Note that this example uses 3&body* together with 3&list-of*, so you
don't see the list itself; the list is just the rest of the macro-form.

You can combine 3&optional* and 3&list-of*.  Consider the following example:
.lisp
(defmacro print-let (x &optional &list-of ((vars vals)
					   '((base 10.)
					     (*nopoint t))))
  `((lambda (,@@vars) (print ,x))
    ,@@vals))

(print-let foo)  ==>
((lambda (base *nopoint) 
   (print foo))
 12
 t)

(print-let foo ((bar 3)))  ==>
((lambda (bar)
   (print foo))
 3)
.end_lisp
In this example we aren't using 3&body* or anything like it, so you do see
the list itself; that is why you see parentheses around the 3(bar 3)*.

@section "Functions to Expand Macros"

	The following two functions are provided to allow the user to
control expansion of macros; they are often useful for the writer of
advanced macro systems, and in tools that want to examine and understand
code which may contain macros.

.defun macroexpand-1 form
If 2form* is a macro form, this expands it (once)
and returns the expanded form.  Otherwise it just
returns 2form*.  3macroexpand-1* expands 3defsubst*
function forms as well as macro forms.
.end_defun

.defun macroexpand form
If 2form* is a macro form, this expands it repeatedly
until it is not a macro form, and returns the final expansion.
Otherwise, it just returns 2form*.  3macroexpand* expands 3defsubst*
function forms as well as macro forms.
.end_defun

@section Generalized Variables
.cindex setf

In Lisp, a variable is something that can remember one piece of data.  The
main operations on a variable are to recover that piece of data, and to
change it.  These might be called 2access* and 2update*.  The concept of
variables named by symbols, explained in (variable-section), can be
generalized to any storage location that can remember one piece of data, no
matter how that location is named.

For each kind of generalized variable, there are typically two functions
which implement the conceptual 2access* and 2update* operations.  For
example, 3symeval* accesses a symbol's value cell, and 3set* updates
it.  3array-leader* accesses the contents of an array leader element, and
3store-array-leader* updates it.  3car* accesses the car of a cons,
and 3rplaca* updates it.

Rather than thinking of this as two functions, which operate on a storage
location somehow deduced from their arguments, we can shift our point of
view and think of the access function as a 2name* for the storage
location.  Thus 3(symeval 'foo)* is a name for the value of 3foo*, and
3(aref a 105)* is a name for the 105th element of the array 3a*.
Rather than having to remember the update function associated with each
access function, we adopt a uniform way of updating storage locations named
in this way, using the 3setf* special form.  This is analogous to the
way we use the 3setq* special form to convert the name of a variable
(which is also a form which accesses it) into a form which updates it.

3setf* is particularly useful in combination with structure-accessing
macros, such as those created with 3defstruct*, because the knowledge of the
representation of the structure is embedded inside the macro, and the programmer
shouldn't have to know what it is in order to alter an element of the structure.

3setf* is actually a macro which expands into the appropriate update function.
It has a database, explained below, which associates from access functions to
update functions.

.defmac setf access-form value
3setf* takes a form which 2accesses* something, and "inverts"
it to produce a corresponding form to 2update* the thing.
A 3setf* expands into an update form, which stores the result of evaluating
the form 2value* into the place referenced by the 2access-form*.
.lisp
.exdent 96 Examples:
(setf (array-leader foo 3) 'bar)
		==> (store-array-leader 'bar foo 3)
(setf a 3) ==> (setq a 3)
(setf (plist 'a) '(foo bar)) ==> (setplist 'a '(foo bar))
(setf (aref q 2) 56) ==> (aset 56 q 2)
(setf (cadr w) x) ==> (rplaca (cdr w) x)
.end_lisp

If 2access-form* invokes a macro or a substitutable function, then
3setf* expands the 2access-form* and starts over again.  This lets you
use 3setf* together with 3defstruct* accessor macros.

For the sake of efficiency, the code produced by 3setf*
does not preserve order of evaluation of the argument forms.  This is only a problem
if the argument forms have interacting side-effects.  For example,
if you evaluate
.lisp
(setq x 3)
(setf (aref a x) (setq x 4))
.end_lisp
then the form might set element 33* or element 34* of the array.
We do not guarantee which one it will do; don't just try it and see
and then depend on it, because it is subject to change without notice.

Furthermore, the value produced by 3setf* depends on the structure
type and is not guaranteed; 3setf* should be used for side effect
only.
.end_defmac

Besides the 2access* and 2update* conceptual operations on variables, there
is a third basic operation, which we might call 2locate*.  Given the name of
a storage cell, the 2locate* operation will return the address of that cell
as a locative pointer (see (locative)).  This locative pointer is a kind of
name for the variable which is a first-class Lisp data object.  It can be
passed as an argument to a function which operates on any kind of variable,
regardless of how it is named.  It can be used to 2bind* the variable, using
the 3bind* subprimitive (see (bind-fun)).

Of course this can only work on variables whose implementation is really to
store their value in a memory cell.  A variable with an 2update*
operation that encrypts the value and an 2access* operation that decrypts
it could not have the 2locate* operation, since the value per se is not
actually stored anywhere.

.defmac locf access-form
3locf* takes a form which 2accesses* some cell, and produces
a corresponding form to create a locative pointer to that cell.
.lisp
.exdent 96 Examples:
(locf (array-leader foo 3)) ==> (ap-leader foo 3)
(locf a) ==> (value-cell-location 'a)
(locf (plist 'a)) ==> (property-cell-location 'a)
(locf (aref q 2)) ==> (aloc q 2)
.end_lisp

If 2access-form* invokes a macro or a substitutable function, then
3locf* expands the 2access-form* and starts over again.  This lets you
use 3locf* together with 3defstruct* accessor macros.
.end_defmac

	Both 3setf* and 3locf* work by means of property lists.
When the form 3(setf (aref q 2) 56)* is expanded, 3setf* looks
for the 3setf* property of the symbol 3aref*.  The value of the
3setf* property of a symbol should be a cons whose car
is a pattern to be matched with the 2access-form*, and whose 3cdr*
is the corresponding 2update-form*, with the symbol 3si:val* in
place of the value to be stored.  The 3setf* property of 3aref*
is a cons whose car is 3(aref array . subscripts)* and whose
cdr is 3(aset si:val array . subscripts)*.  If the transformation which
3setf* is to do cannot be expressed as a simple pattern, an arbitrary
function may be used:  When the form 3(setf (foo bar) baz)*
is being expanded, if the 3setf* property of 3foo* is a symbol,
the function definition of that symbol will be applied to two arguments,
3(foo bar)* and 3baz*, and the result will be taken to be the
expansion of the 3setf*.

Similarly, the 3locf* function
uses the 3locf* property, whose value is analogous.  For example, the 3locf* property
of 3aref* is a cons whose car is 3(aref array . subscripts)*
and whose cdr is 3(aloc array . subscripts)*.  There is no 3si:val*
in the case of 3locf*.

.defmac incf access-form [amount]
Increments the value of a generalized variable.  3(incf 2ref*)* increments
the value of 2ref* by 1.  3(incf 2ref* 2amount*)* adds 2amount*
to 2ref* and stores the sum back into 2ref*.

3incf* expands into a 3setf* form, so 2ref* can be anything that
3setf* understands as its 2access-form*.  This also means that you
should not depend on the returned value of an 3incf* form.

You must take great care with 3incf* because it may evaluate
parts of 2ref* more than once.  For example,
.lisp
(incf (car (mumble))) ==>
(setf (car (mumble)) (1+ (car (mumble)))) ==>
(rplaca (mumble) (1+ (car (mumble))))
.end_lisp
The 3mumble* function is called more than once, which may be
significantly inefficient if 3mumble* is expensive, and which may be
downright wrong if 3mumble* has side-effects.  The same problem
can come up with the 3decf*, 3push*, and 3pop* macros (see below).
.end_defmac

.defmac decf access-form [amount]
Decrements the value of a generalized variable.  3(decf 2ref*)* decrements
the value of 2ref* by 1.  3(decf 2ref* 2amount*)* subtracts 2amount*
from 2ref* and stores the difference back into 2ref*.

3decf* expands into a 3setf* form, so 2ref* can be anything that
3setf* understands as its 2access-form*.  This also means that you
should not depend on the returned value of a 3decf* form.
.end_defmac

.defmac push item access-form
Adds an item to the front of a list which is stored in a generalized variable.
3(push 2item* 2ref*)*
creates a new cons whose car is the result of evaluating 2item*
and whose cdr is the contents of 2ref*, and stores the new cons
into 2ref*.

The form
.lisp
(push (hairy-function x y z) variable)
.end_lisp
replaces the commonly-used construct
.lisp
(setq variable (cons (hairy-function x y z) variable))
.end_lisp
and is intended to be more explicit and esthetic.

All the caveats that apply to 3incf* apply to 3push* as well:
forms within 2ref* may be evaluated more than once.  The returned value
of 3push* is not defined.
.end_defmac

.defmac pop access-form
Removes an element from the front of a list which is stored in a generalized variable.
3(pop 2ref*)* finds the cons in 2ref*, stores the cdr of the cons back into 2ref*,
and returns the car of the cons.
.lisp
.exdent 96 Example:
(setq x '(a b c))
(pop x) => a
x => (b c)
.end_lisp
All the caveats that apply to 3incf* apply to 3pop* as well:
forms within 2ref* may be evaluated more than once.
.end_defmac

.chapter The LOOP Iteration Macro

@section "Introduction"
@c For the sake of the Lispm Manual:
.setq loop-chapter chapter-number
.mindex loop
.cindex loop
.setq loop-fun page
.cindex iteration

	3loop* is a Lisp macro which provides a programmable
iteration facility.  The same 3loop* module operates compatibly in
Zetalisp, Maclisp (PDP-10 and Multics), and NIL, and a
moderately compatible package is under development for the MDL
programming environment.  3loop* was inspired by the "FOR"
facility of CLISP in InterLisp;  however, it is not compatible and
differs in several details.

	The general approach is that a form introduced by the word
3loop* generates a single program loop, into which a large variety
of features can be incorporated.  The loop consists of some
initialization (2prologue*) code, a body which may be executed
several times, and some exit (2epilogue*) code.  Variables may be
declared local to the loop.  The  features are concerned with loop
variables, deciding when to end the iteration, putting user-written
code into the loop, returning a value from the construct, and
iterating a variable through various real or virtual sets of values.
	The 3loop* form consists of a series of clauses, each
introduced by a keyword symbol.  Forms appearing in or implied by the
clauses of a 3loop* form are classed as those to be executed as
initialization code, body code, and/or exit code;  within each part of
the template that 3loop* fills in, they are executed strictly in
the order implied by the original composition.  Thus, just as in
ordinary Lisp code, side-effects may be used, and one piece of code
may depend on following another for its proper operation.  This is the
principal philosophy difference from InterLisp's "FOR" facility.
	Note that 3loop* forms are intended to look like stylized
English rather than Lisp code.  There is a notably low density of
parentheses, and many of the keywords are accepted in several
synonymous forms to allow writing of more euphonious and grammatical
English.  Some find this notation verbose and distasteful, while
others find it flexible and convenient.  The former are invited to
stick to 3do*.

	Here are some examples to illustrate the use of 3loop*.
.space 1
.group
.lisp
.setq print-elements-of-list-example page
(defun print-elements-of-list (list-of-elements)
    (loop for element in list-of-elements
	  do (print element)))
.end_lisp
	The above function prints each element in its argument, which
should be a list.  It returns 3nil*.
.end_group
.space 1
.group
.lisp
(defun gather-alist-entries (list-of-pairs)
    (loop for pair in list-of-pairs
	  collect (car pair)))
.end_lisp
	3gather-alist-entries* takes an association list and
returns a list of the "keys";  that is, 3(gather-alist-entries
'((foo 1 2) (bar 259) (baz)))* returns 3(foo bar baz)*.
.end_group
.space 1
.group
.lisp
(defun extract-interesting-numbers (start-value end-value)
   (loop for number from start-value to end-value
	 when (interesting-p number) collect number))
.end_lisp
	The above function takes two arguments, which should be
fixnums, and returns a list of all the numbers in that range
(inclusive) which satisfy the predicate 3interesting-p*.
.end_group
.space 1
.group
.lisp
(defun find-maximum-element (an-array)
   (loop for i from 0 below (array-dimension-n 1 an-array)
	 maximize (aref an-array i)))
.end_lisp
	3find-maximum-element* returns the maximum of the elements
of its argument, a one-dimensional array.  For Maclisp, 3aref*
could be a macro which turns into either 3funcall* or
3arraycall* depending on what is known about the type of the array.
.end_group
.group
.space 1
.lisp
(defun my-remove (object list)
   (loop for element in list
	 unless (equal object element) collect element))
.end_lisp
	3my-remove* is like the Lisp function 3delete*, except
that it copies the list rather than destructively splicing out
elements.  This is similar, although not identical, to the
Zetalisp function 3remove*.
.end_group
.space 1
.group
.lisp
(defun find-frob (list)
   (loop for element in list
	 when (frobp element) return element
	 finally (ferror nil "No frob found in the list ~S" list)))
.end_lisp
	This returns the first element of its list argument which
satisfies the predicate 3frobp*.  If none is found, an error is
generated.
.end_group

@section "Clauses"

	Internally, 3loop* constructs a 3prog* which includes
variable bindings, pre-iteration (initialization) code,
post-iteration (exit) code, the body of the iteration, and stepping
of variables of iteration to their next values (which happens on
every iteration after executing the body).
	A 2clause* consists of the keyword symbol and any Lisp
forms and keywords which it deals with.  For example,
.lisp
(loop for x in l do (print x)),
.end_lisp
contains two clauses, "7for x in l*" and "7do (print x)*".
Certain of the parts of the clause will be described as being
2expressions*, e.g. 3(print x)* in the above.  An expression can
be a single Lisp form, or a series of forms implicitly collected with
3progn*.  An expression is terminated by the next following atom,
which is taken to be a keyword.  This syntax allows only the first
form in an expression to be atomic, but makes misspelled keywords
more easily detectable.
	3loop* uses print-name equality to compare keywords so
that 3loop* forms may be written without package prefixes;  in
Lisp implementations that do not have packages, 3eq* is used for
comparison.

	Bindings and iteration variable steppings may be performed
either sequentially or in
'loop_topic sequential vs parallel binding and initialization
parallel, which affects how the stepping of one iteration variable
may depend on the value of another.  The syntax for distinguishing
the two will be described with the corresponding clauses.  When a set
of things is "in parallel", all of the bindings produced will be
performed in parallel by a single lambda binding.  Subsequent
bindings will be performed inside of that binding environment.

@subsection "Iteration-Driving Clauses"

	These clauses all create a 2variable of iteration*, which
is bound locally to the loop and takes on a new value on each
successive iteration.  Note that if more than one iteration-driving
clause is used in the same loop, several variables are created which
all step together through their values;  when any of the iterations
terminates, the entire loop terminates.  Nested iterations are not
generated;  for those, you need a second 3loop* form in the body of
the loop.  In order to not produce strange interactions, iteration
driving clauses are required to precede any clauses which produce
"body" code:  that is, all except those which produce prologue or
epilogue code (3initially* and 3finally*), bindings
(3with*), the 3named* clause, and the iteration termination
clauses (3while* and 3until*).

	Clauses which drive the iteration may be arranged to perform
their testing and stepping either in series or in parallel.  They are
by default grouped in series, which allows the stepping computation of
one clause to use the just-computed values of the iteration variables
of previous clauses.  They may be made to step "in parallel", as is
the case with the 3do* special form, by "joining" the iteration
clauses with the keyword 3and*.  The form this typically takes is
something like
.lisp
(loop ... for x = (f) and for y = 2init* then (g x) ...)
.end_lisp
which sets 3x* to 3(f)* on every iteration, and binds 3y*
to the value of 2init* for the first iteration, and on every
iteration thereafter sets it to 3(g x)*, where 3x* still has
the value from the 2previous* iteration.  Thus, if the calls to
3f* and 3g* are not order-dependent, this would be best
written as
.lisp
(loop ... for y = 2init* then (g x) for x = (f) ...)
.end_lisp
because, as a general rule, parallel stepping has more overhead than
sequential stepping.  Similarly, the example
.lisp
(loop for sublist on some-list
      and for previous = 'undefined then sublist
      ...)
.end_lisp
which is equivalent to the 3do* construct
.lisp
(do ((sublist some-list (cdr sublist))
     (previous 'undefined sublist))
    ((null sublist) ...)
  ...)
.end_lisp
in terms of stepping, would be better written as
.lisp
(loop for previous = 'undefined then sublist
      for sublist on some-list
      ...)
.end_lisp

	When iteration driving clauses are joined with 3and*, if
the token following the 3and* is not a keyword which introduces an
iteration driving clause, it is assumed to be the same as the keyword
which introduced the most recent clause;  thus, the above example
showing parallel stepping could have been written as
.lisp
(loop for sublist on some-list
      and previous = 'undefined then sublist
      ...)
.end_lisp

	The order of evaluation in iteration-driving clauses is that
'loop_topic order of evaluation in iteration clauses
those expressions which are only evaluated once are evaluated in order
at the beginning of the form, during the variable-binding phase, while
those expressions which are evaluated each time around the loop are
evaluated in order in the body.

	One common and simple iteration driving clause is
3repeat*:
.table 3 250 500
.item repeat 2expression*
.loop_keyword_index repeat
This evaluates 2expression* (during the variable binding phase),
and causes the 3loop* to iterate that many times.
2expression* is expected to evaluate to a fixnum.  If
2expression* evaluates to a zero or negative result, the body code
will not be executed.
.end_table

	All remaining iteration driving clauses are subdispatches of
the keyword 3for*, which is synonomous with 3as*.
'loop_keyword_index for as
In all of them a 2variable of iteration* is specified.  Note that,
in general, if an iteration driving clause implicitly supplies an
endtest, the value of this iteration variable as the loop is exited
(i.e., when the epilogue code is run) is undefined.  (This is
discussed in more detail in section
(loop-iteration-framework-section).)

	Here are all of the varieties of 3for* clauses.  Optional
parts are enclosed in curly brackets.  The 2data-type*s as used
here are discussed fully in section (loop-data-type-section).

.table 3 250 500

.item for 2var* @{2data-type*@} in 2expr1* @{by 2expr2*@}
.loop_keyword_index for
This iterates over each of the elements in the list 2expr1*.  If
the 3by* subclause is present, 2expr2* is evaluated once
on entry to the loop
to supply the function to be used to fetch successive sublists,
instead of 3cdr*.

.item for 2var* @{2data-type*@} on 2expr1* @{by 2expr2*@}
.loop_keyword_index for
This is like the previous 3for* format, except that 2var* is
set to successive sublists of the list instead of successive elements.
Note that since 2var* will always be a list, it is
not meaningful to specify a 2data-type* unless 2var* is
a 2destructuring pattern*, as described in the section on
2destructuring*, (loop-destructuring-page).  Note also that
3loop* uses a 3null* rather than an 3atom* test to
implement both this and the preceding clause.

.item for 2var* @{2data-type*@} = 2expr*
.loop_keyword_index for
On each iteration, 2expr* is evaluated and 2var* is set to the result.

.item for 2var* @{2data-type*@} = 2expr1* then 2expr2*
.loop_keyword_index for
2var* is bound to 2expr1* when the loop is entered, and set to
2expr2* (re-evaluated) at all but the first iteration.  Since
2expr1* is evaluated during the binding phase, it cannot reference
other iteration variables set before it;  for that, use the following:

.item for 2var* @{2data-type*@} first 2expr1* then 2expr2*
.loop_keyword_index for
This sets 2var* to 2expr1* on the first iteration, and to
2expr2* (re-evaluated) on each succeeding iteration.  The
evaluation of both expressions is performed 2inside* of the
3loop* binding environment, before the 3loop* body.  This
allows the first value of 2var* to come from the first value of
some other iteration variable, allowing such constructs as
.lisp
(loop for term in poly
      for ans first (car term) then (gcd ans (car term))
      finally (return ans))
.end_lisp

.item for 2var* @{2data-type*@} from 2expr1* @{to 2expr2*@} @{by 2expr3*@}
.loop_keyword_index for
'setq loop-arithmetic-stepping page
This performs numeric iteration.  2var* is initialized to
2expr1*, and on each succeeding iteration is incremented by
2expr3* (default 31*).  If the 3to* phrase is given, the
iteration terminates when 2var* becomes greater than 2expr2*.
Each of the expressions is evaluated only once, and the 3to* and
3by* phrases may be written in either order.  3downto* may be
used instead of 3to*, in which case 2var* is decremented by
the step value, and the endtest is adjusted accordingly.  If
3below* is used instead of 3to*, or 3above* instead of
3downto*, the iteration will be terminated before 2expr2* is
reached, rather than after.  Note that the 3to* variant
appropriate for the direction of stepping must be used for the endtest
to be formed correctly;  i.e. the code will not work if 2expr3*
is negative or zero.  If no limit-specifying clause is given, then the
direction of the stepping may be specified as being decreasing by
using 3downfrom* instead of 3from*.  3upfrom* may also be
used instead of 3from*;  it forces the stepping direction to be
increasing.  The 2data-type* defaults to 3fixnum*.

.item for 2var* @{2data-type*@} being 2expr* and its 2path* ...
.item1 for 2var* @{2data-type*@} being @{each|the@} 2path* ...
.loop_keyword_index for
This provides a user-definable iteration facility.  2path* names
the manner in which the iteration is to be performed.  The ellipsis
indicates where various path dependent preposition/expression pairs
may appear.  See the section on Iteration Paths
((iteration-path-page)) for complete documentation.
.end_table

@subsection "Bindings"
.setq with-clause page
.loop_keyword_index with
'loop_topic variable bindings
	The 3with* keyword may be used to establish initial
bindings, that is, variables which are local to the loop but are only
set once, rather than on each iteration.  The 3with* clause looks like:
.lisp
3with 2var1* @{2data-type*@} @{= 2expr1*@}
     @{and 2var2* @{2data-type*@} @{= 2expr2*@}@}...*
.end_lisp
If no 2expr* is given, the variable is initialized to the
appropriate value for its data type, usually 3nil*.
	3with* bindings linked by 3and* are performed in
parallel; those not linked are performed sequentially.  That is,
.lisp
(loop with a = (foo) and b = (bar) and c
      ...)
.end_lisp
binds the variables like
.lisp
((lambda (a b c) ...)
 (foo) (bar) nil)
.end_lisp
whereas
.lisp
(loop with a = (foo) with b = (bar a) with c ...)
.end_lisp
binds the variables like
.lisp
((lambda (a)
    ((lambda (b)
	((lambda (c) ...)
	 nil))
     (bar a)))
 (foo))
.end_lisp
All 2expr*'s in 3with* clauses are evaluated in the order they
are written, in lambda expressions surrounding the generated
3prog*.  The 3loop* expression
.lisp
(loop with a = 2xa* and b = 2xb*
      with c = 2xc*
      for d = 2xd* then (f d)
	and e = 2xe* then (g e d)
      for p in 2xp*
      with q = 2xq*
      ...)
.end_lisp
produces the following binding contour, where 3t1* is a
3loop*-generated temporary:
.lisp
((lambda (a b)
    ((lambda (c)
	((lambda (d e)
	     ((lambda (p t1)
		  ((lambda (q) ...)
		   2xq*))
	      nil 2xp*))
	 2xd* 2xe*))
     2xc*))
 2xa* 2xb*)
.end_lisp
Because all expressions in 3with* clauses are evaluated during the
variable binding phase, they are best placed near the front of the
3loop* form for stylistic reasons.

	For binding more than one variable with no particular
initialization, one may use the construct
.lisp
3with 2variable-list* @{2data-type-list*@} @{and ...@}*
.end_lisp
as in
.lisp
with (i j k t1 t2) (fixnum fixnum fixnum) ...
.end_lisp
A slightly shorter way of writing this is
.lisp
with (i j k) fixnum and (t1 t2) ...
.end_lisp
These are cases of 2destructuring* which 3loop* handles
specially;  destructuring and data type keywords are discussed in
sections (loop-destructuring-section) and
(loop-data-type-section).

	Occasionally there are various implementational reasons 
'setq loop-nodeclare-clause page
for a variable 2not* to be given a local type declaration.  If
this is necessary, the 3nodeclare* clause may be used:
.table 3 250 500
.item nodeclare 2variable-list*
'loop_keyword_index nodeclare
The variables in 2variable-list* are noted by 3loop* as not
requiring local type declarations.  Consider the following:
.lisp
(declare (special k) (fixnum k))
(defun foo (l)
    (loop for x in l as k fixnum = (f x) ...))
.end_lisp
If 3k* did not have the 3fixnum* data-type keyword given for
it, then 3loop* would bind it to 3nil*, and some compilers
would complain.  On the other hand, the 3fixnum* keyword also
produces a local 3fixnum* declaration for 3k*;  since 3k*
is special, some compilers will complain (or error out).  The solution
is to do:
.lisp
(defun foo (l)
    (loop nodeclare (k)
	  for x in l as k fixnum = (f x) ...))
.end_lisp
which tells 3loop* not to make that local declaration.  The
3nodeclare* clause must come 2before* any reference to the
variables so noted.  Positioning it incorrectly will cause this clause
to not take effect, and may not be diagnosed.
.end_table

@subsection "Entrance and Exit"

.table 3 250 500
.item initially 2expression*
.loop_keyword_index initially
This puts 2expression* into the 2prologue* of the iteration.  It
will be evaluated before any other initialization code other than the
initial bindings.  For the sake of good style, the 3initially*
clause should therefore be placed after any 3with* clauses but
before the main body of the loop.

.item finally 2expression*
.loop_keyword_index finally
.setq loop-finally-clause page
This puts 2expression* into the 2epilogue* of the loop, which is
evaluated when the iteration terminates (other than by an explicit
3return*).  For stylistic reasons, then, this clause should appear
last in the loop body.  Note that certain clauses may generate code
which terminates the iteration without running the epilogue code;
this behavior is noted with those clauses.  Most notable of these are
those described in the section (aggregated-boolean-tests-section),
Aggregated Boolean Tests.  This clause may be used to cause the loop
to return values in a non-standard way:
.lisp
(loop for n in l
      sum n into the-sum
      count t into the-count
      finally (return (quotient the-sum the-count)))
.end_lisp
.end_table

@subsection "Side Effects"
.setq side-effects-section css-number
.table 3 250 500
.item do 2expression*
.item1 doing 2expression*
.loop_keyword_index do doing
2expression* is evaluated each time through the loop, as shown in
the 3print-elements-of-list* example on
(print-elements-of-list-example).
.end_table

@subsection "Values"
.setq values-section css-number
	The following clauses accumulate a return value for the
iteration in some manner.  The general form is
.lisp
32type-of-collection expr* @{2data-type*@} @{into 2var*@}*
.end_lisp
where 2type-of-collection* is a 3loop* keyword, and 2expr*
is the thing being "accumulated" somehow.  If no 3into* is
specified, then the accumulation will be returned when the 3loop*
terminates.  If there is an 3into*, then when the epilogue of the
3loop* is reached, 2var* (a variable automatically bound
locally in the loop) will have been set to the accumulated
result and may be used by the epilogue code.  In this way, a user may
accumulate and somehow pass back multiple values from a single
3loop*, or use them during the loop.  It is safe to reference
these variables during the loop, but they should not be modified
until the epilogue code of the loop is reached.
For example,
.lisp
(loop for x in list
      collect (foo x) into foo-list
      collect (bar x) into bar-list
      collect (baz x) into baz-list
    finally (return (list foo-list bar-list baz-list)))
.end_lisp
has the same effect as
.lisp
(do ((g0001 list (cdr g0001))
     (x) (foo-list) (bar-list) (baz-list))
    ((null g0001)
     (list (nreverse foo-list)
	   (nreverse bar-list)
	   (nreverse baz-list)))
   (setq x (car g0001))
   (setq foo-list (cons (foo x) foo-list))
   (setq bar-list (cons (bar x) bar-list))
   (setq baz-list (cons (baz x) baz-list)))
.end_lisp
except that 3loop* arranges to form the lists in the correct
order, obviating the 3nreverse*s at the end, and allowing the
lists to be examined during the computation.

.table 3 250 500

.item collect 2expr* @{into 2var*@}
.item1 collecting ...
.loop_keyword_index collect collecting
.setq collect-clause page
This causes the values of 2expr* on each iteration to be collected
into a list.

.item nconc 2expr* @{into 2var*@}
.item1 nconcing ...
.item1 append ...
.item1 appending ...
.loop_keyword_index nconc nconcing append appending
These are like 3collect*, but the results are 3nconc*ed or
3append*ed together as appropriate.
.lisp
(loop for i from 1 to 3
      nconc (list i (* i i)))
  => (1 1 2 4 3 9)
.end_lisp

.item count 2expr* @{into 2var*@} @{2data-type*@}
.item1 counting ...
.loop_keyword_index count counting
If 2expr* evaluates non-3nil*, a counter is incremented.
The 2data-type* defaults to 3fixnum*.

.item sum 2expr* @{2data-type*@} @{into 2var*@}
.item1 summing ...
.loop_keyword_index sum summing
Evaluates 2expr* on each iteration, and accumulates the sum of all
the values.  2data-type* defaults to
3number*, which for all practical purposes is 3notype*.  Note
that specifying 2data-type* implies that 2both* the sum and
the number being summed (the value of 2expr*) will be of that type.

.item maximize 2expr* @{2data-type*@} @{into 2var*@}
.item1 minimize ...
.loop_keyword_index maximize minimize
Computes the maximum (or minimum) of 2expr* over all
iterations.  2data-type* defaults to 3number*.  Note that if
the loop iterates zero times, or if conditionalization prevents the
code of this clause from being executed, the result will be
meaningless.  If 3loop* can determine that the arithmetic being
performed is not contagious (by virtue of 2data-type* being
3fixnum*, 3flonum*, or 3small-flonum*), then it may choose
to code this by doing an arithmetic comparison rather than calling
either 3max* or 3min*.  As with the 3sum* clause,
specifying 2data-type* implies that both the result of the
3max* or 3min* operation and the value being maximized or
minimized will be of that type.
.end_table

	Not only may there be multiple 2accumulations* in a
'loop_topic multiple accumulations
3loop*, but a single 2accumulation* may come from multiple
places 2within the same 3loop* form*.  Obviously, the types of
the collection must be compatible.  3collect*, 3nconc*, and
3append* may all be mixed, as may 3sum* and 3count*, and
3maximize* and 3minimize*.  For example,
.lisp
(loop for x in '(a b c) for y in '((1 2) (3 4) (5 6))
      collect x
      append y)
  => (a 1 2 b 3 4 c 5 6)
.end_lisp
.group
The following computes the average of the entries in the list
2list-of-frobs*:
.lisp
(loop for x in list-of-frobs
      count t into count-var
      sum x into sum-var
    finally (return (quotient sum-var count-var)))
.end_lisp
.end_group

@subsection "Endtests"
.loop_topic terminating the iteration
	The following clauses may be used to provide additional
control over when the iteration gets terminated, possibly causing
exit code (due to 3finally*) to be performed and possibly returning
a value (e.g., from 3collect*).

.table 3 250 500
.item while 2expr*
.loop_keyword_index while
If 2expr* evaluates to 3nil*, the loop is exited, performing
exit code (if any), and returning any accumulated value.  The
test is placed in the body of the loop where it is written.  It may
appear between sequential 3for* clauses.

.item until 2expr*
.loop_keyword_index until
Identical to 3while (not 2expr*)*.
.end_table

	This may be needed, for example, to step through a strange
data structure, as in
.lisp
(loop until (top-of-concept-tree? concept)
      for concept = 2expr* then (superior-concept concept)
      ...)
.end_lisp
Note that the placement of the 3while* clause before the 3for*
clause is valid in this case because of the definition of this
particular variant of 3for*, which 2binds* 3concept* to
its first value rather than setting it from inside the 3loop*.

	The following may also be of use in terminating the iteration:
.defmac loop-finish
3(loop-finish)* causes the iteration to terminate "normally", the
same as implicit termination by an iteration driving clause, or by the
use of 3while* or 3until*--the epilogue code (if any) will be
run, and any implicitly collected result will be returned as the value
of the 3loop*.
For example,
.lisp
(loop for x in '(1 2 3 4 5 6)
      collect x
      do (cond ((= x 4) (loop-finish))))
 => (1 2 3 4)
.end_lisp
This particular example would be better written as 3until (= x 4)*
in place of the 3do* clause.
.end_defmac

@subsection "Aggregated Boolean Tests"
.setq aggregated-boolean-tests-section css-number
	All of these clauses perform some test, and may immediately
terminate the iteration depending on the result of that test.

.table 3 250 500
.item always 2expr*
.loop_keyword_index always
Causes the loop to return 3t* if 2expr* 3always* evaluates
non-3null*.  If 2expr* evaluates to 3nil*, the loop
immediately returns 3nil*, without running the epilogue code (if
any, as specified with the 3finally* clause);  otherwise, 3t*
will be returned when the loop finishes, after the epilogue code has
been run.

.item never 2expr*
.loop_keyword_index never
Causes the loop to return 3t* if 2expr* 3never* evaluates
non-3null*.  This is equivalent to 3always (not 2expr*)*.

.item thereis 2expr*
.loop_keyword_index thereis
If 2expr* evaluates non-3nil*, then the iteration is
terminated and that value is returned, without running the epilogue
code.
.end_table

@subsection "Conditionalization"
.loop_topic conditionalizing clause(s)
	These clauses may be used to "conditionalize" the following
clause.  They may precede any of the side-effecting or value-producing
clauses, such as 3do*, 3collect*, 3always*, or
3return*.

.table 3 250 500
.item when 2expr*
.item1 if 2expr*
.loop_keyword_index when if
.space 0
@c Make sure this starts it on a new line....
@c .break doesn't do it.
@c Will a ".space 0" do it?
If 2expr* evaluates to 3nil*, the following clause will be
skipped, otherwise not.

.item unless 2expr*
.loop_keyword_index unless
This is equivalent to 3when (not 2expr*))*.
.end_table

	Multiple conditionalization clauses may appear in sequence.
If one test fails, then any following tests in the immediate sequence,
and the clause being conditionalized, are skipped.

	Multiple clauses may be conditionalized under the same test by
joining them with 3and*, as in
.lisp
(loop for i from a to b
      when (zerop (remainder i 3))
        collect i and do (print i))
.end_lisp
which returns a list of all multiples of 33* from 3a* to
3b* (inclusive) and prints them as they are being collected.

	If-then-else conditionals may be written using the 3else* keyword, as in
.lisp
(loop for i from a to b
      when (oddp i)
        collect i into odd-numbers
      else collect i into even-numbers)
.end_lisp
Multiple clauses may appear in an 3else*-phrase, using 3and* to join them
in the same way as above.

	Conditionals may be nested.  For example,
.lisp
(loop for i from a to b
      when (zerop (remainder i 3))
	do (print i)
	and when (zerop (remainder i 2))
	      collect i)
.end_lisp
returns a list of all multiples of 36* from 3a* to 3b*,
and prints all multiples of 33* from 3a* to 3b*.

	When 3else* is used with nested conditionals, the "dangling else"
ambiguity is resolved by matching the 3else* with the innermost 3when*
not already matched with an 3else*.  Here is a complicated example.
.lisp
(loop for x in l
      when (atom x)
	when (memq x *distinguished-symbols*)
	  do (process1 x)
	else do (process2 x)
      else when (memq (car x) *special-prefixes*)
	     collect (process3 (car x) (cdr x))
	     and do (memoize x)
           else do (process4 x))
.end_lisp

	Useful with the conditionalization clauses is the 3return*
clause, which causes an explicit return of its "argument" as
the value of the iteration, bypassing any epilogue code.  That is,
.lisp
3when 2expr1* return 2expr2**
.end_lisp
is equivalent to
.lisp
3when 2expr1* do (return 2expr2*)*
.end_lisp
	Conditionalization of one of the "aggregated boolean value"
clauses simply causes the test which would cause the iteration to
terminate early not to be performed unless the condition succeeds.
For example,
.lisp
(loop for x in l
      when (significant-p x)
	do (print x) (princ "is significant.")
	and thereis (extra-special-significant-p x))
.end_lisp
does not make the 3extra-special-significant-p* check unless the
3significant-p* check succeeds.

.group
	The format of a conditionalized clause is typically something
like
.lisp
3when 2expr1* 2keyword* 2expr2**
.end_lisp
If 2expr2* is the keyword 3it*, then a variable is generated to
hold the value of 2expr1*, and that variable gets substituted for
2expr2*.  Thus, the composition
.lisp
3when 2expr* return it*
.end_lisp
is equivalent to the clause
.lisp
3thereis 2expr**
.end_lisp
and one may collect all non-null values in an iteration by saying
.lisp
3when 2expression* collect it*
.end_lisp
If multiple clauses are joined with 3and*, the 3it* keyword
may only be used in the first.  If multiple 3when*s,
3unless*es, and/or 3if*s occur in sequence, the value
substituted for 3it* will be that of the last test performed.
The 3it* keyword is not recognized in an 3else*-phrase.
.end_group

@subsection "Miscellaneous Other Clauses"

.table 3 250 500
.item named 2name*
.loop_keyword_index named
This gives the 3prog* which 3loop* generates a name of
2name*, so that one may use the 3return-from* form to return
explicitly out of that particular 3loop*:
.lisp
(loop named sue
      ...
      do (loop ... do (return-from sue 2value*) ...)
      ...)
.end_lisp
The 3return-from* form shown causes 2value* to be immediately
returned as the value of the outer 3loop*.  Only one name may be
given to any particular 3loop* construct.
This feature does not exist in the Maclisp version of 3loop*, since
Maclisp does not support "named progs".

.item return 2expression*
.loop_keyword_index return
Immediately returns the value of 2expression* as the value of the
loop, without running the epilogue code.  This is most useful with
some sort of conditionalization, as discussed in the previous
section.  Unlike most of the other clauses, 3return* is not
considered to "generate body code", so it is allowed to occur between
iteration clauses, as in
.lisp
(loop for entry in list
      when (not (numberp entry))
	return (error ...)
      as frob = (times entry 2)
      ...)
.end_lisp
If one instead desires the loop to have some return value when it
finishes normally, one may place a call to the 3return* function in the
epilogue (with the 3finally* clause, (loop-finally-clause)).
.end_table

@section "Loop Synonyms"

.defmac define-loop-macro keyword
May be used to make 2keyword*, a 3loop* keyword (such as
3for*), into a Lisp macro which may introduce a 3loop* form.
For example, after evaluating
.lisp
(define-loop-macro for),
.end_lisp
one may now write an iteration as
.lisp
(for i from 1 below n do ...)
.end_lisp
.end_defmac
	This facility exists primarily for diehard users of a
predecessor of 3loop*.  Its unconstrained use is not recommended,
as it tends to decrease the transportability of the code and
needlessly uses up a function name.

@section "Data Types"
.setq loop-data-type-section css-number
.setq loop-data-type-page page
.loop_topic data type keywords
	In many of the clause descriptions, an optional 2data-type*
is shown.  A 2data-type* in this sense is an atomic symbol, and is
recognizable as such by 3loop*.  These are used for declaration
and initialization purposes;  for example, in
.lisp
(loop for x in l
      maximize x flonum into the-max
      sum x flonum into the-sum
      ...)
.end_lisp
the 3flonum* data-type keyword for the 3maximize* clause
says that the result of the 3max* operation, and its "argument"
(3x*), will both be flonums;  hence 3loop* may choose to code
this operation specially since it knows there can be no contagious
arithmetic.  The 3flonum* data-type keyword for the 3sum*
clause behaves similarly, and in addition causes 3the-sum* to be
correctly initialized to 30.0* rather than 30*.  The
3flonum* keywords will also cause the variables 3the-max* and
3the-sum* to be declared to be 3flonum*, in implementations
where such a declaration exists.  In general, a numeric data-type more
specific than 3number*, whether explicitly specified or defaulted,
is considered by 3loop* to be license to generate code using
type-specific arithmetic functions where reasonable.  The following
data-type keywords are recognized by 3loop* (others may be
defined;  for that, consult the source code):

.table 3 250 750
.item fixnum
An implementation-dependent limited range integer.
.item flonum
An implementation-dependent limited precision floating point number.
.item small-flonum
This is recognized in the Zetalisp implementation only, where its
only significance is for initialization purposes, since no such
declaration exists.
.item integer
Any integer (no range restriction).
.item number
Any number.
.item notype
Unspecified type (i.e., anything else).
.end_table
	Note that explicit specification of a non-numeric type for an
operation which is numeric (such as the 3summing* clause) may
cause a variable to be initialized to 3nil* when it should be
30*.
	If local data-type declarations must be inhibited, one can use
the 3nodeclare* clause, which is described on
(loop-nodeclare-clause).

@section "Destructuring"
.setq loop-destructuring-section css-number
.setq loop-destructuring-page page
	2Destructuring* provides one with the ability to
"simultaneously" assign or bind multiple variables to components of
some data structure.  Typically this is used with list structure.
For example,
.lisp
(loop with (foo . bar) = '(a b c) ...)
.end_lisp
has the effect of binding 3foo* to 3a* and 3bar* to 3(b
c)*.
	3loop*'s destructuring support is intended to parallel if
not augment that provided by the host Lisp implementation, with a goal
of minimally providing destructuring over list structure patterns.
Thus, in Lisp implementations with no system destructuring support at
all, one may still use list-structure patterns as 3loop* iteration
variables, and in 3with* bindings.  In NIL, 3loop* also
supports destructuring over vectors.
	One may specify the data types of the components of a pattern
by using a corresponding pattern of the data type keywords in place of
a single data type keyword.  This syntax remains unambiguous because
wherever a data type keyword is possible, a 3loop* keyword is
the only other possibility.  Thus, if one wants to do
.lisp
(loop for x in l
      as i fixnum = (car x)
      and j fixnum = (cadr x)
      and k fixnum = (cddr x)
      ...)
.end_lisp
and no reference to 3x* is needed, one may instead write
.lisp
(loop for (i j . k) (fixnum fixnum . fixnum) in l ...)
.end_lisp
To allow some abbreviation of the data type pattern, an atomic
component of the data type pattern is considered to state that all
components of the corresponding part of the variable pattern are of
that type.  That is, the previous form could be written as
.lisp
(loop for (i j . k) fixnum in l ...)
.end_lisp
This generality allows binding of multiple typed variables in a
reasonably concise manner, as in
.lisp
(loop with (a b c) and (i j k) fixnum ...)
.end_lisp
which binds 3a*, 3b*, and 3c* to 3nil* and 3i*,
3j*, and 3k* to 30* for use as temporaries during the
iteration, and declares 3i*, 3j*, and 3k* to be fixnums
for the benefit of the compiler.
.group
.lisp
.space 1
(defun map-over-properties (fn symbol)
   (loop for (propname propval) on (plist symbol) by 'cddr
	 do (funcall fn symbol propname propval)))
.end_lisp
maps 2fn* over the properties on 2symbol*, giving it arguments
of the symbol, the property name, and the value of that property.
.end_group
	In Lisp implementations where 3loop* performs its own
destructuring, notably Multics Maclisp and Zetalisp, one can
cause 3loop* to use already provided destructuring support
instead:
.defvar si:loop-use-system-destructuring?
This variable 2only* exists in 3loop* implementations in Lisps
which do not provide destructuring support in the default environment.
It is by default 3nil*.  If changed, then 3loop* will behave
as it does in Lisps which 2do* provide destructuring support:
destructuring binding will be performed using 3let*, and
destructuring assignment will be performed using 3desetq*.
Presumably if one's personalized environment supplies these macros,
then one should set this variable to 3t*;  there is, however,
little (if any) efficiency loss if this is not done.
.end_defvar

@section "The Iteration Framework"
.setq loop-iteration-framework-section css-number
.setq loop-iteration-framework-page page
	This section describes the way 3loop* constructs
iterations.  It is necessary if you will be writing your own iteration
paths, and may be useful in clarifying what 3loop* does with its
input.
	3loop* considers the act of 2stepping* to have four
possible parts.  Each iteration-driving clause has some or all of these
four parts, which are executed in this order:
.table 2 200 450
.item pre-step-endtest
This is an endtest which determines if it is safe to step to the next
value of the iteration variable.
.item steps
Variables which get "stepped".  This is internally manipulated as a
list of the form 3(2var1* 2val1* 2var2* 2val2*
...)*;  all of those variables are stepped in parallel, meaning that
all of the 2val*s are evaluated before any of the 2var*s are
set.
.item post-step-endtest
Sometimes you can't see if you are done until you step to the next
value;  that is, the endtest is a function of the stepped-to value.
.item pseudo-steps
Other things which need to be stepped.  This is typically used for
internal variables which are more conveniently stepped here, or to
set up iteration variables which are functions of some internal
variable(s) which are actually driving the iteration.  This is a list
like 2steps*, but the variables in it do not get stepped in
parallel.
.end_table
	The above alone is actually insufficient in just about all
iteration driving clauses which 3loop* handles.  What is missing
is that in most cases the stepping and testing for the first time
through the loop is different from that of all other times.  So, what
3loop* deals with is two four-tuples as above;  one for the first
iteration, and one for the rest.  The first may be thought of as
describing code which immediately precedes the loop in the 3prog*,
and the second as following the body code--in fact, 3loop* does
just this, but severely perturbs it in order to reduce code
duplication.  Two lists of forms are constructed in parallel:  one is
the first-iteration endtests and steps, the other the
remaining-iterations endtests and steps.  These lists have dummy
entries in them so that identical expressions will appear in the same
position in both.  When 3loop* is done parsing all of the clauses,
these lists get merged back together such that corresponding identical
expressions in both lists are not duplicated unless they are "simple"
and it is worth doing.
	Thus, one 2may* get some duplicated code if one has
multiple iterations.  Alternatively, 3loop* may decide to use and
test a flag variable which indicates whether one iteration has been
performed.  In general, sequential iterations have less overhead than
parallel iterations, both from the inherent overhead of stepping
multiple variables in parallel, and from the standpoint of potential
code duplication.
	One other point which must be noted about parallel stepping is
that although the user iteration variables are guaranteed to be
stepped in parallel, the placement of the endtest for any particular
iteration may be either before or after the stepping.  A notable case
of this is
.lisp
(loop for i from 1 to 3 and dummy = (print 'foo)
      collect i)
  => (1 2 3)
.end_lisp
but prints 3foo* 2four* times.  Certain other constructs, such
as 3for 2var* on*, may or may not do this depending on the
particular construction.
	This problem also means that it may not be safe to examine an
iteration variable in the epilogue of the loop form.  As a general
rule, if an iteration driving clause implicitly supplies an endtest,
then one cannot know the state of the iteration variable when the loop
terminates.  Although one can guess on the basis of whether the
iteration variable itself holds the data upon which the endtest is
based, that guess 2may* be wrong.  Thus,
.lisp
(loop for subl on 2expr*
      ...
      finally (f subl))
.end_lisp
is incorrect, but
.lisp
(loop as frob = 2expr* while (g frob)
      ...
      finally (f frob))
.end_lisp
is safe because the endtest is explicitly dissociated from the
stepping.

@section "Iteration Paths"
.setq iteration-path-page page
	Iteration paths provide a mechanism for user extension of
iteration-driving clauses.  The interface is constrained so that the
definition of a path need not depend on much of the internals of
3loop*.  The typical form of an iteration path is
.lisp
for 2var* @{2data-type*@} being @{each|the@} 2pathname* @{2preposition1* 2expr1*@}...
.end_lisp
2pathname* is an atomic symbol which is defined as a 3loop* path
function.  The usage and defaulting of 2data-type* is up to the
path function.  Any number of preposition/expression pairs may be
present; the prepositions allowable for any particular path are
defined by that path.  For example,
.lisp
(loop for x being the array-elements of my-array from 1 to 10
      ...)
.end_lisp
To enhance readability, pathnames are usually defined in both the
singular and plural forms;  this particular example could have been
written as
.lisp
(loop for x being each array-element of my-array from 1 to 10
      ...)
.end_lisp

	Another format, which is not so generally applicable, is
.lisp
for 2var* @{2data-type*@} being 2expr0* and its 2pathname* @{2preposition1* 2expr1*@}...
.end_lisp
In this format, 2var* takes on the value of 2expr0* the first
time through the loop.  Support for this format is usually limited to
paths which step through some data structure, such as the "superiors"
of something.  Thus, we can hypothesize the 3cdrs* path, such that
.lisp
(loop for x being the cdrs of '(a b c . d) collect x)
 => ((b c . d) (c . d) d)
.end_lisp
but
.lisp
(loop for x being '(a b c . d) and its cdrs collect x)
 => ((a b c . d) (b c . d) (c . d) d)
.end_lisp
To satisfy the anthropomorphic among you, 3his*, 3her*, or
3their* may be substituted for the 3its* keyword, as may
3each*.  Egocentricity is not condoned.  Some example uses of
iteration paths are shown in section (predefined-paths-section).

	Very often, iteration paths step internal variables which the
'setq loop-using-crock page
user does not specify, such as an index into some data-structure.
Although in most cases the user does not wish to be concerned with
such low-level matters, it is occasionally useful to have a handle on
such things.  3loop* provides an additional syntax with which one
may provide a variable name to be used as an "internal" variable by an
iteration path, with the 3using* "prepositional phrase".
'loop_path_preposition_index using
The 3using* phrase is placed with the other phrases associated
with the path, and contains any number of keyword/variable-name pairs:
.lisp
(loop for x being the array-elements of a using (index i)
      ...)
.end_lisp
which says that the variable 3i* should be used to hold the index
of the array being stepped through.  The particular keywords which may
be used are defined by the iteration path;  the 3index* keyword is
recognized by all 3loop* sequence paths (section
(loop-sequence-section)).  Note that any individual 3using*
phrase applies to only one path;  it is parsed along with the
"prepositional phrases".  It is an error if the path does not call for
a variable using that keyword.

	By special dispensation, if a 2pathname* is not recognized,
then the 3default-loop-path* path will be invoked upon a syntactic
transformation of the original input. Essentially, the 3loop* fragment
'loop_path_preposition_index in
.lisp
for 2var* being 2frob*
.end_lisp
is taken as if it were
.lisp
for 2var* being default-loop-path in 2frob*
.end_lisp
and
.lisp
for 2var* being 2expr* and its 2frob* ...
.end_lisp
is taken as if it were
.lisp
for 2var* being 2expr* and its default-loop-path in 2frob*
.end_lisp
Thus, this "undefined pathname hook" only works if the
3default-loop-path* path is defined.  Obviously, the use of this
"hook" is competitive, since only one such hook may be in use, and the
potential for syntactic ambiguity exists if 2frob* is the name of
a defined iteration path.  This feature is not for casual use;  it is
intended for use by large systems which wish to use a special
syntax for some feature they provide.
@c In Brand X, for example, the two formats
@c .lisp
@c for 2var* being each 2p* of 2expr*
@c .end_lisp
@c where 2p* is not a 3loop* path, and
@c .lisp
@c for 2var* being the property-values of 2expr* in '2p*
@c .end_lisp
@c are equivalent, having the effect of stepping 2x* through the
@c 2p* property of 2expr* (Brand X manipulates "multiple
@c valued" properties).  Note that 2p* is implicitly quoted by the
@c first format; this behavior is defined by the default loop path
@c function which Brand X defines, not by 3loop*.

@subsection "Pre-Defined Paths"
.setq predefined-paths-section css-number
	3loop* comes with two pre-defined iteration path
functions;  one implements a 3mapatoms*-like iteration path
facility, and the other is used for defining iteration paths for
stepping through sequences.

.loop_subsection "The Interned-Symbols Path"
.loop_path_index interned-symbols
'loop_path_preposition_index in
	The 3interned-symbols* iteration path is like a
3mapatoms* for 3loop*.
.lisp
(loop for sym being interned-symbols ...)
.end_lisp
iterates over all of the symbols in the current package and its
superiors (or, in Maclisp, the current obarray).  This is the same set
of symbols which 3mapatoms* iterates over, although not
necessarily in the same order.  The particular package to look in may
be specified as in
.lisp
(loop for sym being the interned-symbols in 2package* ...)
.end_lisp
which is like giving a second argument to 3mapatoms*.
	In Lisp implementations with some sort of hierarchical package
structure such as Zetalisp, one may restrict the iteration to
be over just the package specified and not its superiors, by using the
3local-interned-symbols* path:
.lisp
(loop for sym being the local-interned-symbols  @{in 2package*@}
      ...)
.end_lisp
.space 1
Example:
.lisp
(defun my-apropos (sub-string &optional (pkg package))
    (loop for x being the interned-symbols in pkg
	  when (string-search sub-string x)
	    when (or (boundp x) (fboundp x) (plist x))
	      do (print-interesting-info x)))
.end_lisp
In the Zetalisp and NIL implementations of 3loop*, a package
specified with the 3in* preposition may be anything acceptable to
the 3pkg-find-package* function.  The code generated by this path
will contain calls to internal 3loop* functions, with the effect
that it will be transparent to changes to the implementation of
packages.  In the Maclisp implementation, the obarray 2must* be an
array pointer, 2not* a symbol with an 3array* property.

.loop_subsection "Sequence Iteration"
.setq loop-sequence-section css-number
.setq loop-sequence-page page
	One very common form of iteration is that over the elements
of some object which is accessible by means of an integer index.
3loop* defines an iteration path function for doing this in a
general way, and provides a simple interface to allow users to define
iteration paths for various kinds of "indexable" data.

.defmac define-loop-sequence-path
.nofill
7(define-loop-sequence-path 2path-name-or-names*
    2fetch-fun* 2size-fun*
    2sequence-type* 2default-var-type*)*
.fill
2path-name-or-names* is either an atomic path name or list of path
names.  2fetch-fun* is a function of two arguments: the sequence,
and the index of the item to be fetched.  (Indexing is assumed to be
zero-origined.)  2size-fun* is a function of one argument, the
sequence;  it should return the number of elements in the sequence.
2sequence-type* is the name of the data-type of the sequence, and
2default-var-type* the name of the data-type of the elements of
the sequence.  These last two items are optional.
.end_defmac

.group
   The Zetalisp implementation of 3loop* utilizes the
Zetalisp array manipulation primitives to define both
3array-element* and 3array-elements* as iteration paths:
'loop_path_index array-elements
.nofill
7(define-loop-sequence-path (array-element array-elements)
    aref array-active-length)*
.fill
.unbreak
Then, the 3loop* clause
'loop_path_preposition_index of
.lisp
for 2var* being the array-elements of 2array*
.end_lisp
will step 2var* over the elements of 2array*, starting from
30*.  The sequence path function also accepts 3in* as a
synonym for 3of*.
.end_group
	The range and stepping of the iteration may be specified with
the use of all of the same keywords which are accepted by the 3loop*
arithmetic stepper (3for 2var* from ...*);  they are
3by*, 3to*, 3downto*, 3from*, 3downfrom*,
3below*, and 3above*, and are interpreted in the same manner.
Thus,
.lisp
(loop for 2var* being the array-elements of 2array*
	  from 1 by 2
      ...)
.end_lisp
steps 2var* over all of the odd elements of 2array*, and
.lisp
(loop for 2var* being the array-elements of 2array*
	  downto 0
      ...)
.end_lisp
steps in "reverse" order.
.space 1
.lisp
(define-loop-sequence-path (vector-elements vector-element)
    vref vector-length notype notype)
.end_lisp
is how the 3vector-elements* iteration path can be defined in NIL
(which it is).  One can then do such things as
.lisp
(defun cons-a-lot (item &restv other-items)
    (and other-items
	 (loop for x being the vector-elements of other-items
	       collect (cons item x))))
.end_lisp
	All such sequence iteration paths allow one to specify the
variable to be used as the index variable, by use of the 3index*
keyword with the 3using* prepositional phrase, as described (with
an example) on (loop-using-crock).

.loop_insert_for_NIL "lsbdoc;()path >"

@subsection "Defining Paths"

	This section and the next may not be of interest to those
not interested in defining their own iteration paths.
	A 3loop* iteration clause (e.g. a 3for* or 3as*
clause) produces, in addition to the code which defines the iteration
(section (loop-iteration-framework-section)), variables which must
be bound, and pre-iteration (2prologue*) code.  This breakdown
allows a user-interface to 3loop* which does not have to depend on
or know about the internals of 3loop*.  To complete this
separation, the iteration path mechanism parses the clause before
giving it to the user function which will return those items.  A
function to generate code for a path may be declared to 3loop*
with the 3define-loop-path* function:
.defmac define-loop-path
@c  pathname-or-names path-function list-of-allowable-prepositions
@c &rest data
.nofill
7(define-loop-path 2pathname-or-names* 2path-function*
     2list-of-allowable-prepositions*
     2datum-1* 2datum-2* ...)*
'fill
This defines 2path-function* to be the handler for the path(s)
2pathname-or-names*, which may be either a symbol or a list of
symbols.  Such a handler should follow the conventions described
below.  The 2datum-i* are optional;  they are passed in to
2path-function* as a list.
.end_defun

The handler will be called with the following arguments:
.table 2 250 500
.item path-name
The name of the path which caused the path function to be invoked.
.item variable
The "iteration variable".
.item data-type
The data type supplied with the iteration variable, or 3nil* if
none was supplied.
.item prepositional-phrases
This is a list with entries of the form 2(preposition
expression)*, in the order in which they were collected.  This may
also include some supplied implicitly (e.g. an 3of* phrase when
the iteration is inclusive, and an 3in* phrase for the
3default-loop-path* path); the ordering will show the order of
evaluation which should be followed for the expressions.
.item inclusive?
This is 3t* if 2variable* should have the starting point of
the path as its value on the first iteration (by virtue of being
specified with syntax like 3for 2var* being 2expr* and its
2pathname**), 3nil* otherwise.  When 3t*, 2expr*
will appear in 2prepositional-phrases* with the 3of*
preposition;  for example, 3for x being foo and its cdrs* gets
2prepositional-phrases* of 3((of foo))*.
.item allowed-prepositions
This is the list of allowable prepositions declared for the pathname
that caused the path function to be invoked.  It and 2data*
(immediately below) may be used by the path function such that a
single function may handle similar paths.
.item data
This is the list of "data" declared for the pathname that caused the
path function to be invoked.  It may, for instance, contain a
canonicalized pathname, or a set of functions or flags to aid the
path function in determining what to do.  In this way, the same
path function may be able to handle different paths.
.end_table
	The handler should return a list of either six or ten
elements:
.table 2 250 500
.item variable-bindings
This is a list of variables which need to be bound.  The entries in it
may be of the form 2variable*, (2variable* 2expression*),
or (2variable* 2expression* 2data-type*).  Note that it is
the responsibility of the handler to make sure the iteration variable
gets bound.  All of these variables will be bound in parallel;
if initialization of one depends on others, it should be done with a
3setq* in the 2prologue-forms*.  Returning only the variable
without any initialization expression is not allowed if the variable
is a destructuring pattern.
.item prologue-forms
This is a list of forms which should be included in the 3loop*
prologue.
.item the four items of the iteration specification
These are the four items described in section
(loop-iteration-framework-section),
(loop-iteration-framework-page):  2pre-step-endtest*,
2steps*, 2post-step-endtest*, and 2pseudo-steps*.
.item another four items of iteration specification
If these four items are given, they apply to the first iteration, and
the previous four apply to all succeeding iterations;  otherwise, the
previous four apply to 2all* iterations.
.end_table

	Here are the routines which are used by 3loop* to compare
keywords for equality.  In all cases, a 2token* may be any Lisp
object, but a 2keyword* is expected to be an atomic symbol.  In
certain implementations these functions may be implemented as macros.

.defun si:loop-tequal token keyword
This is the 3loop* token comparison function.  2token* is any Lisp
object;  2keyword* is the keyword it is to be compared
against.  It returns 3t* if they represent the same token,
comparing in a manner appropriate for the implementation.
.end_defun

.defun si:loop-tmember token keyword-list
The 3member* variant of 3si:loop-tequal*.
.end_defun

.defun si:loop-tassoc token keyword-alist
The 3assoc* variant of 3si:loop-tequal*.
.end_defun

	If an iteration path function desires to make an internal
variable accessible to the user, it should call the following function
instead of 3gensym*:
'loop_path_preposition_index using
.defun si:loop-named-variable keyword
This should only be called from within an iteration path function.  If
2keyword* has been specified in a 3using* phrase for this
path, the corresponding variable is returned;  otherwise, 3gensym*
is called and that new symbol returned.  Within a given path function,
this routine should only be called once for any given keyword.

If the user specifies a 3using* preposition containing any keywords
for which the path function does not call 3si:loop-named-variable*,
3loop* will inform the user of his error.
.end_defun

.loop_subsection "An Example Path Definition"
	Here is an example function which defines the
3string-characters* iteration path.  This path steps a variable
through all of the characters of a string.  It accepts the format
.lisp
(loop for 2var* being the string-characters of 2str* ...)
.end_lisp
	The function is defined to handle the path by
.lisp
(define-loop-path string-characters string-chars-path
      (of))
.end_lisp
@c I may regret this later:
.page
	Here is the function:
.lisp
(defun string-chars-path (path-name variable data-type
			  prep-phrases inclusive?
			  allowed-prepositions data
			  &aux (bindings nil)
			       (prologue nil)
			       (string-var (gensym))
			       (index-var (gensym))
			       (size-var (gensym)))
   allowed-prepositions data ; unused variables
   ; To iterate over the characters of a string, we need
   ; to save the string, save the size of the string,
   ; step an index variable through that range, setting
   ; the user's variable to the character at that index.
   ; Default the data-type of the user's variable:
   (cond ((null data-type) (setq data-type 'fixnum)))
   ; We support exactly one "preposition", which is
   ; required, so this check suffices:
   (cond ((null prep-phrases)
	  (ferror nil "OF missing in ~S iteration path of ~S"
		  path-name variable)))
   ; We do not support "inclusive" iteration:
   (cond ((not (null inclusive?))
	  (ferror nil
	    "Inclusive stepping not supported in ~S path ~
	     of ~S (prep phrases = ~:S)"
	    path-name variable prep-phrases)))
   ; Set up the bindings
   (setq bindings (list (list variable nil data-type)
			(list string-var (cadar prep-phrases))
			(list index-var 0 'fixnum)
			(list size-var 0 'fixnum)))
   ; Now set the size variable
   (setq prologue (list `(setq ,size-var (string-length
					    ,string-var))))
   ; and return the appropriate stuff, explained below.
   (list bindings
	 prologue
	 `(= ,index-var ,size-var)
	 nil 
	 nil
	 ; 3char-n* 1is the NIL string referencing primitive.*
	 ; 1In Zetalisp, 3aref* could be used instead.*
	 (list variable `(char-n ,string-var ,index-var)
	       index-var `(1+ ,index-var))))
.end_lisp

	The first element of the returned list is the bindings.  The
second is a list of forms to be placed in the 2prologue*.  The
remaining elements specify how the iteration is to be performed.  This
example is a particularly simple case, for two reasons:  the actual
"variable of iteration", 3index-var*, is purely internal
(being 3gensym*med), and the stepping of it (31+*) is such
that it may be performed safely without an endtest.  Thus
3index-var* may be stepped immediately after the setting of the
user's variable, causing the iteration specification for the first
iteration to be identical to the iteration specification for all
remaining iterations.  This is advantageous from the standpoint of the
optimizations 3loop* is able to perform, although it is frequently
not possible due to the semantics of the iteration (e.g., 3for
2var* first 2expr1* then 2expr2**) or to subtleties of
the stepping.  It is safe for this path to step the user's variable in
the 2pseudo-steps* (the fourth item of an iteration specification)
rather than the "real" steps (the second), because the step value can
have no dependencies on any other (user) iteration variables.  Using
the pseudo-steps generally results in some efficiency gains.
	If one desired the index variable in the above definition to
be user-accessible through the 3using* phrase feature with the
'loop_path_preposition_index using
3index* keyword, the function would need to be changed in two
ways.  First, 3index-var* should be bound to
3(si:loop-named-variable 'index)* instead of 3(gensym)*.
Secondly, the efficiency hack of stepping the index variable ahead of
the iteration variable must not be done.  This is effected by changing
the last form to be
.lisp
(list bindings prologue
      nil
      (list index-var `(1+ ,index-var))
      `(= ,index-var ,size-var)
      (list variable `(char-n ,string-var ,index-var))
      nil
      nil
      `(= ,index-var ,size-var)
      (list variable `(char-n ,string-var ,index-var)))
.end_lisp
Note that although the second 3`(= ,index-var ,size-var)* could
have been placed earlier (where the second 3nil* is), it is best
for it to match up with the equivalent test in the first iteration
specification grouping.

@c This needs more work.  More examples are needed.
@c Everything needs more work....

@chapter "Defstruct"
.setq defstruct section-page
.setq defstruct-chapter chapter-number
.cindex structures
.cindex defstruct
.cindex record (structure)
@c Macro-defining macros!!!!!
.cindex macro defining macros

@section "Introduction to Structure Macros"

	3defstruct* provides a facility in Lisp for creating and
using aggregate datatypes with named elements.  These are like
"structures" in PL/I, or "records" in PASCAL.  In the last two chapters we
saw how to use macros to extend the control structures of Lisp; here we
see how they can be used to extend Lisp's data structures as well.

	To explain the basic idea, assume you were writing a Lisp
program that dealt with space ships.  In your program, you want to
represent a space ship by a Lisp object of some kind.  The interesting
things about a space ship, as far as your program is concerned, are
its position (X and Y), velocity (X and Y), and mass.  How do you
represent a space ship?

	Well, the representation could be a list of the x-position,
y-position, and so on.  Equally well it could be an array of five
elements, the zeroth being the x-position, the first being the
y-position, and so on.  The problem with both of these representations
is that the "elements" (such as x-position) occupy places in the object
which are quite arbitrary, and hard to remember (Hmm, was the mass the
third or the fourth element of the array?).  This would make programs
harder to write and read.  It would not be obvious when reading
a program that an expression such as 3(cadddr ship1)* or 3(aref ship2 3)*
means "the y component of the ship's velocity", and it would be very easy
to write 3caddr* in place of 3cadddr*.

What we would like to see are names, easy to remember and to understand.
If the symbol 3foo* were bound to a representation of a space ship, then
.lisp
(ship-x-position foo)
.end_lisp
could return its x-position, and
.lisp
(ship-y-position foo)
.end_lisp
its y-position, and so forth.  The 3defstruct* facility does just this.

	3defstruct* itself is a macro which defines a structure.  For the
space ship example above, we might define the structure by saying:
.lisp
(defstruct (ship)
     ship-x-position
     ship-y-position
     ship-x-velocity
     ship-y-velocity
     ship-mass)
.end_lisp

This says that every 3ship* is an object with five named components.
(This is a very simple case of 3defstruct*; we will see the general form
later.)  The evaluation of this form does several things.  First, it
defines 3ship-x-position* to be a function which, given a ship, returns
the x component of its position.  This is called an 2accessor function*,
because it 2accesses* a component of a structure.
'cindex accessor function
3defstruct* defines the other four accessor functions analogously.

3defstruct* will also define 3make-ship* to be a macro which expands
into the necessary Lisp code to create a 3ship* object.  So 3(setq x
(make-ship))* will make a new ship, and set 3x* to it.  This macro is
called the 2constructor macro*, because it constructs a new structure.
'cindex constructor macro

We also want to be able to change the contents of a structure.  To do this,
we use the 3setf* macro (see (setf-fun)), as follows (for example):
.lisp
(setf (ship-x-position x) 100)
.end_lisp
Here 3x* is bound to a ship, and after the evaluation of the 3setf*
form, the 3ship-x-position* of that ship will be 100.  Another way
to change the contents of a structure is to use the alterant macro,
which is described later, in (using-defstruct-alterant).

How does all this map into the familiar primitives of Lisp?  In this simple
example, we left the choice of implementation technique up to
3defstruct*; it will choose to represent a ship as an array.  The array has
five elements, which are the five components of the ship.  The accessor
functions are defined thus:
.lisp
(defun ship-x-function (ship)
  (aref ship 0))
.end_lisp
The constructor macro 3(make-ship)* expands into 3(make-array 5)*, which
makes an array of the appropriate size to be a ship.  Note that a program which
uses ships need not contain any explicit knowledge that ships are represented
as five-element arrays; this is kept hidden by 3defstruct*.

The accessor functions are not actually ordinary functions; instead they
are 3subst*s (see (subst)).  This difference has two implications: it allows
3setf* to understand the accessor functions, and it allows the compiler to
substitute the body of an accessor function directly into any function that uses it,
making compiled programs that use 3defstruct* exactly equal in efficiency to
programs that "do it by hand."  Thus writing 3(ship-mass s)* is exactly
equivalent to writing 3(aref s 4)*, and writing 3(setf (ship-mass s) m)*
is exactly equivalent to writing 3(aset m s 4)*, when the program is compiled.
It is also possible to tell 3defstruct* to implement the accessor
functions as macros; this is not normally done in Zetalisp, however.

	We can now use the 3describe-defstruct* function to look at the
3ship* object, and see what its contents are:
.lisp
(describe-defstruct x 'ship) =>

#<art-q-5 17073131> is a ship
   ship-x-position:              100
   ship-y-position:              nil
   ship-x-velocity:              nil
   ship-y-velocity:              nil
   ship-mass:                    nil
#<art-q-5 17073131>
.end_lisp
(The 3describe-defstruct* function is explained more fully on
(describe-defstruct-fun).)

	By itself, this simple example provides a powerful structure
definition tool.  But, in fact, 3defstruct* has many other features.  First
of all, we might want to specify what kind of Lisp object to use for the
"implementation" of the structure.  The example above implemented a "ship"
as an array, but 3defstruct* can also implement structures as array-leaders,
lists, and other things.  (For array-leaders, the accessor functions call
3array-leader*, for lists, 3nth*, and so on.)

	Most structures are implemented as arrays.  Lists take slightly less
storage, but elements near the end of a long list are slower to access.
Array leaders allow you to have a homogeneous aggregate (the array)
and a heterogeneous aggregate with named elements (the leader) tied
together into one object.

	3defstruct* allows you to specify to the constructor
macro what the various elements of the structure should be initialized
to.  It also lets you give, in the 3defstruct* form, default values
for the initialization of each element.

	The 3defstruct* in Zetalisp also works in various
dialects of Maclisp, and so it has some features that are not useful in
Zetalisp.  When possible, the Maclisp-specific features attempt
to do something reasonable or harmless in Zetalisp, to make it
easier to write code that will run equally well in Zetalisp and
Maclisp.  (Note that this 3defstruct* is not necessarily the default
one installed in Maclisp!)

@section "How to Use Defstruct"
.cindex slot

.defmac defstruct
A call to 3defstruct* looks like:
.lisp
(defstruct (2name* 2option-1* 2option-2* ...)
	   2slot-description-1*
	   2slot-description-2*
	   ...)
.end_lisp
2name* must be a symbol; it is the name of the structure.  It is given a
3si:defstruct-description* property that describes the attributes and elements of the
structure; this is intended to be used by programs that examine Lisp
programs, that want to display the contents of structures in a helpful
way.  2name* is used for other things, described below.

Each 2option* may be either a symbol, which should be one of the recognized
option names, listed in the next section, or a list, whose car should be one of the
option names and the rest of which should be "arguments" to the option.
Some options have arguments that default; others require that arguments be
given explicitly.

Each 2slot-description* may be in any of three forms:
.lisp
1(1)*	2slot-name*
1(2)*	3(2slot-name* 2default-init*)*
1(3)*	((2slot-name-1* 2byte-spec-1* 2default-init-1*)
	 (2slot-name-2* 2byte-spec-2* 2default-init-2*)
		...)
.end_lisp
Each 2slot-description* allocates one element of the physical structure,
even though in form (3) several slots are defined.

Each 2slot-name* must always be a symbol; an accessor function is defined
for each slot.

In form (1), 2slot-name* simply defines a slot with the given name.  An
accessor function will be defined with the name 2slot-name* (but see the
3:conc-name* option, (defstruct-conc-name-option)).  Form (2) is
similar, but allows a default initialization for the slot.  Initialization
is explained further on (defstruct-initialization).  Form (3) lets you pack
several slots into a single element of the physical underlying structure, using
the byte field feature of 3defstruct*, which is explained on
(defstruct-byte-field).
.end_defmac

Because evaluation of a 3defstruct* form causes many functions and macros
to be defined, you must take care not to define the same name with two
different 3defstruct* forms.  A name can only have one function
definition at a time; if it is redefined, the latest definition is the one
that takes effect, and the earlier definition is clobbered.  (This is no
different from the requirement that each 3defun* which is intended to
define a distinct function must have a distinct name.)

To systematize this necessary carefulness, as well as for
clarity in the code, it is conventional to prefix the names of all of the
accessor functions with some text unique to the structure.  In the example
above, all the names started with 3ship-*.  The 3:conc-name*
option can be used to provide such prefixes automatically (see (defstruct-conc-name-option)).
Similarly, the conventional name for the constructor macro in the example
above was 3make-ship*, and the conventional name for the alterant macro
(see (using-defstruct-alterant)) was 3alter-ship*.

.nopara
The 3describe-defstruct* function lets you examine an instance of
a structure.

.defun describe-defstruct instance &optional name
3describe-defstruct* takes an 2instance* of a structure, and prints
out a description of the instance, including the contents of each of its
slots.  2name* should be the name of the structure; you must provide
the name of the structure so that 3describe-defstruct* can know what
structure 2instance* is an instance of, and therefore figure out what
the names of the slots of 2instance* are.

If 2instance* is a named structure, you don't have to provide 2name*,
since it is just the named structure symbol of 2instance*.
Normally the 3describe* function (see (describe-fun)) will call
3describe-defstruct* if it is asked to describe a named structure;
however some named structures have their own idea of how to describe themselves.
See (named-structure) for more information about named structures.
.end_defun

@section "Options to Defstruct"

This section explains each of the options that can be given to 3defstruct*.

Here is an example that shows the typical syntax of a call to 3defstruct*
that gives several options.
.lisp
(defstruct (foo (:type :array)
		(:make-array (:type 'art-8b :leader-length 3))
		:conc-name
		(:size-symbol foo))
  a
  b)
.end_lisp

.table 3
.item :type
'kindex :type defstruct
The 3:type* option specifies what kind of Lisp object will be used
to implement the structure.  It must be given one argument, which must
be one of the symbols enumerated below, or a user-defined type.
If the option itself is not
provided, the type defaults to 3:array*.  You can define your
own types; this is explained in (defining-your-own-defstruct-types).

.table 3 0 500
.item :array
'kindex :array defstruct
Use an array, storing components in the body of the array.
.item :named-array
'kindex :named-array defstruct
Like 3:array*, but make the array a named structure (see
(named-structure)) using the name of the structure as the named
structure symbol.  Element 30* of the array will hold the named
structure symbol and so will not be used to hold a component of the
structure.
.item :array-leader
'kindex :array-leader defstruct
Use an array, storing components in the leader of the array.
(See the 3:make-array* option, described below.)
.item :named-array-leader
'kindex :named-array-leader defstruct
Like 3:array-leader*, but make the array a named structure (see
(named-structure)) using the name of the structure as the named
structure symbol.  Element 31* of the leader will hold the named
structure symbol and so will not be used to hold a component of the
structure.
.item :list
'kindex :list defstruct
Use a list.
.item :named-list
'kindex :named-list defstruct
Like 3:list*, but the first element of the list will hold the
symbol that is the name of the structure and so will not be used
as a component.
.item :fixnum-array
'kindex :fixnum-array defstruct
Like 3:array*, but the type of the array is 3art-32b*.
.item :flonum-array
'kindex :flonum-array defstruct
Like 3:array*, but the type of the array is 3art-float*.
.item :tree
'kindex :tree defstruct
The structure is implemented out of a binary tree of conses, with
the leaves serving as the slots.
.item :fixnum
'kindex :fixnum defstruct
This unusual type implements the structure as a single fixnum.  The
structure may only have one slot.  This is only useful with the
byte field feature (see (defstruct-byte-field)); it lets you store
a bunch of small numbers within fields of a fixnum, giving the
fields names.
.item :grouped-array
'kindex :grouped-array defstruct
This is described in (grouped-array).
.end_table

.item :constructor
'kindex :constructor defstruct
This option takes one argument, which specifies the name of the constructor
macro.  If the argument is not provided or if the option itself is not
provided, the name of the constructor is made by concatenating the
string 3"make-"* to the name of the structure.  If the argument is
provided and is 3nil*, no constructor is defined.  Use of the constructor
macro is explained in (using-defstruct-constructor).

.item :alterant
'kindex :alterant defstruct
This option takes one argument, which specifies the name of the alterant
macro.  If the argument is not provided or if the option itself is not
provided, the name of the alterant is made by concatenating the
string 3"alter-"* to the name of the structure.  If the argument is
provided and is 3nil*, no alterant is defined.  Use of the alterant
macro is explained in (using-defstruct-alterant).

.item :default-pointer
'kindex :default-pointer defstruct
'setq defstruct-default-pointer-option page
Normally, the accessors defined by 3defstruct* expect to
be given exactly one argument.  However, if the 3:default-pointer*
argument is used, the argument to each accessor is optional.  If you use
an accessor in the usual way it will do the usual thing, but if you
invoke it without its argument, it will behave as if you had invoked it
on the result of evaluating the form which is the argument to the
3:default-pointer* argument.  Here is an example:

.lisp
(defstruct (room (:default-pointer *default-room*))
   room-name
   room-contents)

(room-name x) ==> (aref x 0)
(room-name)   ==> (aref *default-room* 0)
.end_lisp

If the argument to the 3:default-pointer* argument is not given, it
defaults to the name of the structure.

.item :conc-name
'kindex :conc-name defstruct
'setq defstruct-conc-name-option page
It is conventional to begin the names of all the accessor functions of
a structure with a specific prefix, usually
the name of the structure followed by a hyphen.  The 3:conc-name*
option allows you to specify this prefix and have it concatenated
onto the front of all the slot names to make the names of the accessor
functions.  The argument should be a symbol; its print-name is used as
the prefix.  If 3:conc-name* is specified without an argument, the prefix will be the
name of the structure followed by a hyphen.  If you do not specify the
3:conc-name* option, the names of the accessors are the same as the slot
names, and it is up to you to name the slots according to some suitable convention.

The constructor and alterant macros are given slot names, not accessor names.
It is important to keep this in mind when using 3:conc-name*, since it
causes the slot and accessor names to be different.  Here is an example:
.lisp
(defstruct (door :conc-name)
   knob-color
   width)

(setq d (make-door knob-color 'red width 5.0))

(door-knob-color d) ==> red
.end_lisp

.item :include
'kindex :include defstruct
'setq defstruct-include-option page
This option is used for building a new structure definition as an extension of an old
structure definition.  Suppose you have a structure called 3person* that
looks like this:

.lisp
(defstruct (person :conc-name)
   name
   age
   sex)
.end_lisp

Now suppose you want to make a new structure to represent an astronaut.
Since astronauts are people too, you would like them to also have the
attributes of name, age, and sex, and you would like Lisp functions
that operate on 3person* structures to operate just as well on
3astronaut* structures.  You can do this by defining 3astronaut*
with the 3:include* option, as follows:

.lisp
(defstruct (astronaut (:include person))
   helmet-size
   (favorite-beverage 'tang))
.end_lisp

The 3:include* option inserts the slots of the included structure at
the front of the list of slots for this structure.  That is, an
3astronaut* will have five slots; first the three defined in
3person*, and then after those the two defined in 3astronaut*
itself.  The accessor functions defined by the 3person* structure
can be applied to instances of the 3astronaut* structure, and they
will work correctly.  The following examples illustrate how you can
use 3astronaut* structures:

.lisp
(setq x (make-astronaut name 'buzz
			age 45.
			sex t
			helmet-size 17.5))

(person-name x) => buzz
(favorite-beverage x) => tang
.end_lisp

Note that the 3:conc-name* option was 2not* inherited from the
included structure; it only applies to the accessor functions of 3person*
and not to those of 3astronaut*.  Similarly, the 3:default-pointer*
and 3:but-first* options, as well as the 3:conc-name* option, only
apply to the accessor functions for the structure in which they are enclosed; they are not
inherited if you 3:include* a structure that uses them.

The argument to the 3:include* option is required, and must be the
name of some previously defined structure of the same type as this
structure.  3:include* does not work with structures of type
3:tree* or of type 3:grouped-array*.

The following is an advanced feature.  Sometimes, when one structure
includes another, the default values for the slots that came from the
included structure are not what you want.  The new structure can specify
different default values for the included slots than the included
structure specifies, by giving the 3:include* option as:

.lisp
(:include 2name new-init-1 ... new-init-n*)
.end_lisp

Each 2new-init* is either the name of an included slot or a list of
the form 3(2name-of-included-slot init-form*)*.  If it is just a
slot name, then in the new structure the slot will have no initial
value.  Otherwise its initial value form will be replaced by the
2init-form*.  The old (included) structure is unmodified.

For example, if we had wanted to define 3astronaut* so that the
default age for an astronaut is 345.*, then we could have said:
.lisp
(defstruct (astronaut (:include person (age 45.)))
   helmet-size
   (favorite-beverage 'tang))
.end_lisp

.item :named
'kindex :named defstruct
This means that you want to use one of the "named" types.  If you
specify a type of 3:array*, 3:array-leader*, or 3:list*, and give
the 3:named* option, then the 3:named-array*,
3:named-array-leader*, or 3:named-list* type will be used instead.
Asking for type 3:array* and giving the 3:named* option as well
is the same as asking for the type 3:named-array*; the only difference
is stylistic.

.item :make-array
'kindex :make-array defstruct
'setq defstruct-make-array-option page
If the structure being defined is implemented as an array, this option
may be used to control those aspects of the array that are not otherwise constrained by
3defstruct*.  For example, you might want to control the area in which
the array is allocated.  Also, if you are creating a structure of type
3:array-leader*, you almost certainly want to specify the dimensions
of the array to be created, and you may want to specify the type of the
array.  Of course, this option is only meaningful if the structure is,
in fact, being implemented by an array.

The argument to the 3:make-array* option should be a list of alternating
keyword symbols to the 3make-array* function (see (make-array-fun)),
and forms whose values are the arguments to those keywords.  For example,
3(:make-array (:type 'art-16b))* would request that the type of the
array be 3art-16b*.  Note that the keyword symbol is 2not* evaluated.

3defstruct* overrides any of the 3:make-array* options that it
needs to.  For example, if your structure is of type 3:array*, then
3defstruct* will supply the size of that array regardless of what you
say in the 3:make-array* option.

Constructor macros for structures implemented as arrays all allow the
keyword 3:make-array* to be supplied.  Attributes supplied therein
overide any 3:make-array* option attributes supplied in the original
3defstruct* form.  If some attribute appears in neither the invocation
of the constructor nor in the 3:make-array* option to 3defstruct*,
then the constructor will chose appropriate defaults.

If a structure is of type 3:array-leader*, you probably want to
specify the dimensions of the array.  The dimensions of an array are
given to 3:make-array* as a position argument rather than a keyword
argument, so there is no way to specify them in the above syntax.  To
solve this problem, you can use the keyword 3:dimensions* or the
keyword 3:length* (they mean the same thing), with a value that is
anything acceptable as 3make-array*'s first argument.

.item :times
'kindex :times defstruct
This option is used for structures of type 3:grouped-array* to control
the number of repetitions of the structure that will be allocated by the
constructor macro.  (See (grouped-array).)  The constructor macro will
also allow 3:times* to be used as a keyword that will override the value
given in the original 3defstruct* form.  If 3:times* appears in
neither the invocation of the constructor nor in the 3:make-array* option
to 3defstruct*, then the constructor will only allocate one instance of
the structure.

.item :size-symbol
'kindex :size-symbol defstruct
'setq defstruct-size-symbol-option page
The 3:size-symbol* option allows a user to specify a global variable whose
value will be the "size" of the structure; this variable is declared with
3defconst*.  The exact meaning of the size
varies, but in general this number is the one you would need to know if
you were going to allocate one of these structures yourself.  The symbol
will have this value both at compile time and at run time.  If this
option is present without an argument, then the name of the structure is
concatenated with 3"-size"* to produce the symbol.
@c [The name :size-symbol is not so hot.]

.item :size-macro
'kindex :size-macro defstruct
This is similar to the 3:size-symbol* option.  A macro of no arguments
is defined that expands into the size of the structure.  The name of
this macro defaults as with 3:size-symbol*.

.item :initial-offset
'kindex :initial-offset defstruct
This allows you to tell 3defstruct* to skip over a certain
number of slots before it starts allocating the slots described in the
body.  This option requires an argument (which must be a fixnum) which
is the number of slots you want 3defstruct* to skip.  To make use of
this option requires that you have some familiarity with how 3defstruct*
is implementing your structure; otherwise, you will be unable to make
use of the slots that 3defstruct* has left unused.

.item :but-first
'kindex :but-first defstruct
This option is best explained by example:

.lisp
(defstruct (head (:type :list)
		 (:default-pointer person)
		 (:but-first person-head))
  nose
  mouth
  eyes)
.end_lisp

The accessors expand like this:

.lisp
(nose x)	==> (car (person-head x))
(nose)		==> (car (person-head person))
.end_lisp

The idea is that 3:but-first*'s argument will be an accessor from some
other structure, and it is never expected that this structure will be
found outside of that slot of that other structure.  Actually, you can
use any one-argument function, or a macro that acts like a one-argument
function.  It is an error for
the 3:but-first* option to be used without an argument.

.item :displace
'kindex :displace defstruct
Normally all of the macros defined by 3defstruct* will be simple
displacing macros.  They will use the function 3displace* to actually
change the original macro form, so that it will not have to be expanded
over and over (see (displace-fun)).  The 3:displace* option
allows the user to supply some other function to use instead of
3displace*.

The argument to the 3:displace* option should be a two argument
function that will be called whenever a macro expansion occurs.  The
two arguments will be the original form and the form resulting from
macro expansion.  The value returned by this function will be used for
further evaluation.  Note that the function 3displace* is the function
used if the 3:displace* option isn't given.  The function 3progn* will
cause the macro to be expanded every time.

Giving the 3:displace* argument with no arguments, or with an argument
of 3t*, or with an argument of 3displace*, is the same is not giving
it at all.  Giving an argument of 3nil* or 3progn* means to use
regular macros instead of displacing macros.

Note that accessor functions are normally 3subst*s rather than macros (unless you give the
3:callable-accessors* option with argument 3nil*).  If the accessors
are 3subst*s, they are not affected by 3:displace*.
However, the constructor and alterant macros, and the 3:size-macro*,
are still affected.

.item :callable-accessors
'kindex :callable-accessors defstruct
This option controls whether accessors are really functions,
and therefore "callable", or whether they are really macros.  With
an argument of 3t*, or with no argument, or if the option is not
provided, then the accessors are really functions.  Specifically,
they are 3subst*s, so that they have all the efficiency of macros
in compiled programs, while still being function objects that
can be manipulated (passed to 3mapcar*, etc.).  If
the argument is 3nil* then the accessors will really be macros;
either displacing macros or not, depending on the 3:displace* argument.

.item :eval-when
'kindex :eval-when defstruct
Normally the functions and macros defined by 3defstruct* are defined at
eval-time, compile-time, and load-time.  This option allows the user
to control this behavior.  The argument to the 3:eval-when* option
is just like the list that is the first subform of an 3eval-when*
special form (see (eval-when-fun)).  For example,
3(:eval-when (:eval :compile))*
will cause the functions and macros to be defined only when the code is running
interpreted or inside the compiler.

.item :property
'kindex :property defstruct
'setq defstruct-property-option page
For each structure defined by defstruct, a property list is maintained
for the recording of arbitrary properties about that structure.  (That
is, there is one property list per structure definition, not one for
each instantiation of the structure.)

The 3:property* option can be used to give a 3defstruct* an
arbitrary property.  3(:property 2property-name value*)* gives the
3defstruct* a 2property-name* property of 2value*.  Neither
argument is evaluated.  To access the property list, the user will have
to look inside the 3defstruct-description* structure himself (see
(defstruct-description)).

.item 2type*
In addition to the options listed above, any currently defined type
(any legal argument to the 3:type* option) can be used as an option.
This is mostly for compatibility with the old version of 3defstruct*.
It allows you to say just 2type* instead of 3(:type 2type*)*.  It
is an error to give an argument to one of these options.

.item 2other*
Finally, if an option isn't found among those listed above,
3defstruct* checks the property list of the name of the option to see if
it has a non-nil 3:defstruct-option* property.  If it does have such a
property, then if the option was of the form 3(2option-name value*)*,
it is treated just like 3(:property 2option-name value*)*.  That is,
the 3defstruct* is given an 2option-name* property of 2value*.  It is an
error to use such an option without a value.

This provides a primitive way for you to define your own options to
3defstruct*, particularly in connection with user-defined types (see
(defining-your-own-defstruct-types)).  Several of the options listed above
are actually implemented using this mechanism.
.end_table

@section "Using the Constructor and Alterant Macros"

After you have defined a new structure with 3defstruct*, you can
create instances of this structure using the constructor macro, and
you can alter the values of its slots using the alterant macro.  By
default, 3defstruct* defines both the constructor and the alterant,
forming their names by concatenating 3"make-"* and 3"alter-"*,
respectively, onto the name of the structure.  You can specify the names
yourself by passing the name you want to use as the argument to the
3:constructor* or 3:alterant* options, or specify that you don't
want the macro created at all by passing 3nil* as the argument.

@subsection Constructor Macros
.setq using-defstruct-constructor section-page
.cindex constructor macro

A call to a constructor macro, in general, has the form
.lisp
(2name-of-constructor-macro*
        2symbol-1* 2form-1*
        2symbol-2* 2form-2*
        ...)
.end_lisp
	Each 2symbol* may be either the name of a 2slot* of the structure,
or a specially recognized keyword.  All the 2forms* are evaluated.

'setq defstruct-initialization page
	If 2symbol* is the name of a 2slot* (2not* the name of an accessor),
then that element of
the created structure will be initialized to the value of 2form*.  If
no 2symbol* is present for a given slot, then the slot will be
initialized to the result of evaluating the default initialization form specified in
the call to 3defstruct*.  (In other words, the
initialization form specified to the constructor overrides the initialization form
specified to 3defstruct*.)  If the 3defstruct* itself also did not
specify any initialization, the element's initial value is undefined.
You should always specify the initialization, either in the 3defstruct*
or in the constructor macro, if you care about the initial value of the slot.

Notes: The order of evaluation of the initialization forms is 2not*
necessarily the same as the order in which they appear in the constructor
call, nor the order in which they appear in the 3defstruct*; you should
make sure your code does not depend on the order of evaluation.  The forms
are re-evaluated on every constructor-macro call, so that if, for example,
the form 3(gensym)* were used as an initialization form, either in a call
to a constructor macro or as a default initialization in the 3defstruct*, then every call
to the constructor macro would create a new symbol.

	There are two symbols which are specially recognized by the
constructor.  They are 3:make-array*, which should only be used for
3:array* and 3:array-leader* type structures (or the named versions
of those types), and 3:times*, which should only be used for
3:grouped-array* type structures.  If one of these symbols appears instead
of a slot name, then it is interpreted just as the 3:make-array*
option or the 3:times* option (see (defstruct-make-array-option)),
and it overrides what was requested in that option.  For example:
.lisp
(make-ship ship-x-position 10.0
	   ship-y-position 12.0
	   :make-array (:leader-length 5 :area disaster-area))
.end_lisp

@subsection By-position Constructor Macros

If the 3:constructor* option is given as
3(:constructor 2name* 2arglist*)*, then instead of making a keyword
driven constructor, 3defstruct* defines a "function style" constructor,
taking arguments whose meaning is determined by the argument's position
rather than by a keyword.
The 2arglist* is used to describe what the arguments to the
constructor will be.  In the simplest case something like
3(:constructor make-foo (a b c))* defines 3make-foo* to be a three-argument
constructor macro whose arguments are used to initialize the
slots named 3a*, 3b*, and 3c*.

In addition, the keywords 3&optional*, 3&rest*, and 3&aux* are
recognized in the argument list.  They work in the way you might expect,
but there are a few fine points worthy of explanation:

.lisp
(:constructor make-foo 
	(a &optional b (c 'sea) &rest d &aux e (f 'eff)))
.end_lisp

This defines 3make-foo* to be a constructor of one or more arguments.
The first argument is used to initialize the 3a* slot.  The second
argument is used to initialize the 3b* slot.  If there isn't any
second argument, then the default value given in the body of the
3defstruct* (if given) is used instead.  The third argument is used to
initialize the 3c* slot.  If there isn't any third argument, then the
symbol 3sea* is used instead.  Any arguments following the third
argument are collected into a list and used to initialize the 3d*
slot.  If there are three or fewer arguments, then 3nil* is placed in
the 3d* slot.  The 3e* slot 2is not initialized*; its initial
value is undefined.  Finally, the 3f* slot is initialized to contain
the symbol 3eff*.

	The actions taken in the 3b* and 3e* cases were carefully
chosen to allow the user to specify all possible behaviors.  Note that
the 3&aux* "variables" can be used to completely override the default
initializations given in the body.

	Since there is so much freedom in defining constructors this
way, it would be cruel to only allow the 3:constructor* option to be
given once.  So, by special dispensation, you are allowed to give the
3:constructor* option more than once, so that you can define several
different constructors, each with a different syntax.

	Note that even these "function style" constructors do not
guarantee that their arguments will be evaluated in the order that you
wrote them.  Also note that you cannot specify the 3:make-array*
nor 3:times* information in this form of constructor macro.

@subsection Alterant Macros
.setq using-defstruct-alterant section-page
.cindex alterant macro

A call to the alterant macro, in general, has the form
.lisp
(2name-of-alterant-macro* 2instance-form*
     2slot-name-1* 2form-1*
     2slot-name-2* 2form-2*
     2...*)
.end_lisp
2instance-form* is evaluated, and should return an instance of the
structure.  Each 2form* is evaluated, and the corresponding slot is
changed to have the result as its new value.  The slots are altered
after all the 2forms* are evaluated, so you can exchange the values
of two slots, as follows:
.lisp
(alter-ship enterprise
    ship-x-position (ship-y-position enterprise)
    ship-y-position (ship-x-position enterprise))
.end_lisp

As with the constructor macro, the order of evaluation of the 2forms* is
undefined.  Using the alterant macro can produce more efficient Lisp
than using consecutive 3setf*s when you are altering two byte fields
of the same object, or when you are using the 3:but-first* option.

@section "Byte Fields"
'setq defstruct-byte-field page
	The byte field feature of 3defstruct* allows you to specify that
several slots of your structure are bytes (see
(byte-manipulation-functions)) in an integer stored in one
element of the structure.  For example, suppose we had the following
structure:

.lisp
(defstruct (phone-book-entry (:type :list))
  name
  address
  (area-code 617.)
  exchange
  line-number)
.end_lisp

This will work correctly.  However, it wastes space.  Area codes and
exchange numbers are always less than 31000.*, and so both can fit
into 310.* bit fields when expressed as binary numbers.  Since Lisp
Machine fixnums have (more than) 320.* bits, both of these
values can be packed into a single fixnum.  To tell 3defstruct* to do
so, you can change the structure definition to the following:

.lisp
(defstruct (phone-book-entry (:type :list))
  name
  address
  ((area-code #o1212 617.)
   (exchange #o0012))
  line-number)
.end_lisp

The magic octal numbers 3#o1212* and 3#o0012* are byte specifiers to be used
with the functions 3ldb* and 3dpb*.  The accessors, constructor, and
alterant will now operate as follows:

.lisp
(area-code pbe)	==> (ldb #o1212 (caddr pbe))
(exchange pbe)	==> (ldb #o0012 (caddr pbe))
.end_lisp
.lisp

(make-phone-book-entry
   name "Fred Derf"
   address "259 Octal St."
   exchange ex
   line-number 7788.)

==> (list "Fred Derf" "259 Octal St." (dpb ex 12 2322000) 17154)

.end_lisp
.lisp
(alter-phone-book-entry pbe
   area-code ac
   exchange ex)

==> ((lambda (g0530)
       (setf (nth 2 g0530)
	     (dpb ac 1212 (dpb ex 12 (nth 2 g0530)))))
     pbe)
.end_lisp

Note that the alterant macro is optimized to only read and write the
second element of the list once, even though you are altering two
different byte fields within it.  This is more efficient than using two
3setf*s.  Additional optimization by the alterant macro occurs if the
byte specifiers in the 3defstruct* slot descriptions are constants.
However, you don't need to worry about the details of how the alterant
macro does its work.

If the byte specifier is 3nil*, then the accessor will
be defined to be the usual kind that accesses the entire Lisp object,
thus returning all the byte field components as a fixnum.  These slots
may have default initialization forms.

The byte specifier need not be a constant; a variable or, indeed, any
Lisp form, is legal as a byte specifier.  It will be evaluated each
time the slot is accessed.  Of course, unless you are doing something
very strange you will not want the byte specifier to change between
accesses.

Constructor macros initialize
words divided into byte fields as if they were deposited in in the
following order:

 1) Initializations for the entire word given in the defstruct form.

 2) Initializations for the byte fields given in the defstruct form.

 3) Initializations for the entire word given in the constructor macro
form. 

 4) Initializations for the byte fields given in the constructor macro
form. 

Alterant macros work similarly: the modification for the entire Lisp
object is done first, followed by modifications to specific byte fields.
If any byte fields being initialized or altered overlap each other, the
action of the constructor and alterant will be unpredictable.

@section "Grouped Arrays"
.setq grouped-array section-page
.cindex grouped array

	The grouped array feature allows you to store several instances
of a structure side-by-side within an array.  This feature is somewhat
limited; it does not support the 3:include* and 3:named* options.

	The accessor functions are defined to take an extra argument, which
should be an integer, and is the index into the array of where this
instance of the structure starts.  This index should normally be a multiple
of the size of the structure, for things to make sense.  Note that the
index is the 2first* argument to the accessor function and the structure
is the 2second* argument, the opposite of what you might expect.  This
is because the structure is 3&optional* if the 3:default-pointer* option
is used.

	Note that the "size" of the structure (for purposes of the 3:size-symbol*
and 3:size-macro* options) is the number of elements in 2one* instance of the structure;
the actual length of the array is the product of the size of the structure and the
number of instances.  The number of instances to be created by the constructor
macro is given as the argument to the 3:times* option to 3defstruct*, or 
the 3:times* keyword of the constructor macro.

@section Named Structures

'setq named-structure page
.cindex named structure

	The 2named structure* feature provides a very simple form of
user-defined data type.  Any array may be made a named structure,
although usually the 3:named* option of 3defstruct* is used to
create named structures.  The principal advantages to a named structure
are that it has a more informative printed representation than a normal
array and that the 3describe* function knows how to give a detailed
description of it.  (You don't have to use 3describe-defstruct*,
because 3describe* can figure out what the names of the slots of the
structure are by looking at the named structure's name.) Because of
these improved user-interface features it is recommended that "system"
data structures be implemented with named structures.

	Another kind of user-defined data type, more advanced but less
efficient when just used as a record structure, is provided by the
2flavor* feature (see (flavor)).

	A named structure has an associated symbol, called its "named
structure symbol", which represents what user-defined type it is an
instance of; the 3typep* function, applied to the named structure,
will return this symbol.  If the array has a leader, then the symbol is
found in element 1 of the leader; otherwise it is found in element 0 of
the array.  (Note: if a numeric-type array is to be a named structure,
it must have a leader, since a symbol cannot be stored in any element
of a numeric array.)

	If you call 3typep* with two arguments, the first being
an instance of a named structure and the second being its named
structure symbol, 3typep* will return 3t*.  3t* will also
be returned if the second argument is the named structure symbol of
a 3:named* 3defstruct* included (using the 3:include* option,
see (defstruct-include-option)), directly or indirectly, by the 3defstruct* for this
structure.  For example, if the structure 3astronaut* includes
the structure 3person*, and 3person* is a named structure,
then giving 3typep* an instance of an 3astronaut* as the first
argument, and the symbol 3person* as the second argument, will
return 3t*.  This reflects the fact that an astronaut is, in fact,
a person, as well as being an astronaut.

You may associate with a named structure a function that will handle
various operations that can be done on the named structure.  Currently,
you can control how the named structure is printed, and what 3describe*
will do with it.

To provide such a handler function, make the function be the 3named-structure-invoke*
property of the named structure symbol.  The functions
which know about named structures will apply this handler function to
several arguments.  The first is a "keyword" symbol to
identify the calling function, and the second is the named structure
itself.  The rest of the arguments passed depend on the caller; any
named structure function should have a "3&rest*" parameter to
absorb any extra arguments that might be passed.  Just what
the function is expected to do depends on the keyword it is passed
as its first argument.  The following are the keywords defined at present:
.table 3

.item :which-operations
Should return a list of the names of the operations the function handles.

.item :print-self
The arguments are 3:print-self*, the named structure, the stream to output to,
the current depth in
list-structure, and 3t* if slashification is enabled (3prin1*
versus 3princ*).  The printed representation of the named structure
should be output to the stream.  If the named structure symbol
is not defined as a function, or 3:print-self* is not in its
3:which-operations* list, the printer will default to a reasonable
printed representation, namely:
.lisp
#<2named-structure-symbol* 2octal-address*>
.end_lisp

.item :describe
'setq named-structure-describe-method page
The arguments are 3:describe* and the named structure.  It should
output a description of itself to 3standard-output*.  If the named
structure symbol is not defined as a function, or 3:describe* is not
in its 3:which-operations* list, the describe system will
check whether the named structure was created by using the 3:named*
option of 3defstruct*; if so, the names and values of the structure's
fields will be enumerated.
.end_table

Here is an example of a simple named-structure handler function:
.lisp
(defun (person named-structure-invoke) (op self &rest args)
  (selectq op
    (:which-operations '(:print-self))
    (:print-self
      (format (first args)
	      (if (third args) "#<person ~A>" "~A")
	      (person-name self)))
    (otherwise (ferror nil "Illegal operation ~S" op))))
.end_lisp
For this definition to have any effect, the person 3defstruct* used
as an example earlier must be modified to include the 3:named* attribute.

This handler causes a person structure to include its name in its printed
representation; it also causes 3princ* of a person to print just the
name, with no "3#<*" syntax.  Even though the astronaut structure of
our examples 3:include*s the person structure, this named-structure
handler will not be invoked when an astronaut is printed, and an astronaut
will not include his name in his printed representation.  This is because
named structures are not as general as flavors (see (flavor)).

.nopara
The following functions operate on named structures.

.defun named-structure-p x
This semi-predicate returns 3nil* if 2x* is not a named structure; otherwise
it returns 2x*'s named structure symbol.
.end_defun

.defun named-structure-symbol x
2x* should be a named structure.  This returns 2x*'s named structure
symbol: if 2x* has an array leader, element 1 of the leader is returned,
otherwise element 0 of the array is returned.
.end_defun

.defun make-array-into-named-structure array
2array* is made to be a named structure, and is returned.
.end_defun

.defun named-structure-invoke operation structure &rest args
2operation* should be a keyword symbol, and 2structure* should be a
named structure.  The handler function of the named structure symbol,
found as the value of the 3named-structure-invoke* property of the
symbol, is called with appropriate arguments.  (This function used
to take its first two arguments in the opposite order, and that
argument order will continue to work indefinitely, but it should
not be used in new programs.)
.end_defun

See also the 3:named-structure-symbol* keyword to 3make-array*, (make-array-fun).

@section The si:defstruct-description Structure
'setq defstruct-description page
	This section discusses the internal structures used by
3defstruct* that might be useful to programs that want to interface
to 3defstruct* nicely.  For example, if you want to write a program
that examines structures and displays them the way 3describe*
(see (describe-fun)) and the Inspector do, your program will work
by examining these structures.
The information in this section is also
necessary for anyone who is thinking of defining his own structure
types.

	Whenever the user defines a new structure using 3defstruct*,
3defstruct* creates an instance of the 3si:defstruct-description* structure.
This structure can be found as the 3si:defstruct-description* property of
the name of the structure; it contains such useful information as the
name of the structure, the number of slots in the structure, and so on.
	The 3si:defstruct-description* structure is defined as follows,
in the 3system-internals* package (also called the 3si* package):
(This is a simplified version of the real definition.  There are other slots
in the structure which we aren't telling you about.)

.lisp
(defstruct (defstruct-description
		(:default-pointer description)
		(:conc-name defstruct-description-))
	   name
	   size
	   property-alist
	   slot-alist) 
.end_lisp

	The 3name* slot contains the symbol supplied by the user to be
the name of his structure, such as 3spaceship* or
3phone-book-entry*.
	The 3size* slot contains the total number of locations in an
instance of this kind of structure.  This is 2not* the same number as
that obtained from the 3:size-symbol* or 3:size-macro* options to
3defstruct*.  A named structure, for example, usually uses up an extra
location to store the name of the structure, so the 3:size-macro* option
will get a number one larger than that stored in the 3defstruct*
description.
	The 3property-alist* slot contains an alist with pairs of the
form 3(2property-name* . 2property*)* containing properties placed there
by the 3:property* option to 3defstruct* or by property names used as
options to 3defstruct* (see the 3:property* option, (defstruct-property-option)).
	The 3slot-alist* slot contains an alist of pairs of the form
3(2slot-name* . 2slot-description*)*.  A 2slot-description* is
an instance of the 3defstruct-slot-description* structure.  The
3defstruct-slot-description* structure is defined something like
this, also in the 3si* package:
(This is a simplified version of the real definition.  There are other slots
in the structure which we aren't telling you about.)

.lisp
'setq defstruct-slot-description-structure page
(defstruct (defstruct-slot-description
		(:default-pointer slot-description)
		(:conc-name defstruct-slot-description-))
	   number
	   ppss
	   init-code
	   ref-macro-name)
.end_lisp
	The 3number* slot contains the number of the location of this
slot in an instance of the structure.  Locations are numbered
starting with 30*, and continuing up to one less than the size of the
structure.  The actual location of the slot is determined by the
reference-consing function associated with the type of the structure; see
(defstruct-reference-consing-function).
	The 3ppss* slot contains the byte specifier code for this slot if
this slot is a byte field of its location.  If this slot is the entire
location, then the 3ppss* slot contains 3nil*.
	The 3init-code* slot contains the initialization code supplied
for this slot by the user in his 3defstruct* form.  If there is no
initialization code for this slot then the init-code slot contains the
symbol 3si:%%defstruct-empty%%*.
	The 3ref-macro-name* slot contains the symbol that is defined as
a macro or a subst that expands into a reference to this slot (that is, the name
of the accessor function).

@section Extensions to Defstruct
.setq defining-your-own-defstruct-types section-page

	The macro 3defstruct-define-type* can be used to teach 3defstruct*
about new types that it can use to implement structures.

.defmac defstruct-define-type
This macro is used for teaching 3defstruct* about new types; it is described
in the rest of this chapter.
.end_defmac

@subsection An Example

	Let us start by examining a sample call to
3defstruct-define-type*.  This is how the 3:list* type of structure might
have been defined:

.lisp
(defstruct-define-type :list
	(:cons (initialization-list description keyword-options) 
	       :list
	       `(list . ,initialization-list))
	(:ref (slot-number description argument)
	      `(nth ,slot-number ,argument)))
.end_lisp

This is the simplest possible form of 3defstruct-define-type*.  It
provides 3defstruct* with two Lisp forms: one for creating forms to
construct instances of the structure, and one for creating forms to
become the bodies of accessors for slots of the structure.

The keyword 3:cons* is followed by a list of three variables that will
be bound while the constructor-creating form is evaluated.  The first,
3initialization-list*, will be bound to a list of the initialization
forms for the slots of the structure.  The second, 3description*, will
be bound to the 3defstruct-description* structure for the structure
(see (defstruct-description)).  The third variable and the 3:list* keyword
will be explained later.

The keyword 3:ref* is followed by a list of three variables that will
be bound while the accessor-creating form is evaluated.  The first,
3slot-number*, will bound to the number of the slot that the new accessor
should reference.  The second, 3description*, will be bound to the
3defstruct-description* structure for the structure.  The third, 3argument*,
will be bound to the form that was provided as the argument to the accessor.

@subsection Syntax of defstruct-define-type

	The syntax of 3defstruct-define-type* is:

.lisp
(defstruct-define-type 2type*
	2option-1*
	2option-2*
	...)
.end_lisp
where each 2option* is either the symbolic name of an option or a list of
the form 3(2option-name* .  2rest*)*.  Different options interpret
2rest* in different ways.  The symbol 2type* is given an
3si:defstruct-type-description* property of a structure that describes the type
completely.


@subsection Options to defstruct-define-type

	This section is a catalog of all the options currently known
about by 3defstruct-define-type*.

.table 3
.item :cons
'kindex :cons defstruct-define-type
'setq defstruct-reference-consing-function page
The 3:cons* option to 3defstruct-define-type* is how you
supply 3defstruct* with the necessary code that it needs to cons up a
form that will construct an instance of a structure of this type.

The 3:cons* option has the syntax:
.lisp
(:cons (2inits* 2description* 2keywords*) 2kind*
       2body*)
.end_lisp
2body* is some code that should construct and return a piece
of code that will construct, initialize, and return an instance of a
structure of this type.

The symbol 2inits* will be bound to the information that the
constructor conser should use to initialize the slots of the
structure.  The exact form of this argument is determined by the
symbol 2kind*.  There are currently two kinds of initialization.
There is the 3:list* kind, where 2inits* is bound to a list of
initializations, in the correct order, with 3nil*s in uninitialized
slots.  And there is the 3:alist* kind, where 2inits* is bound to an
alist with pairs of the form 3(2slot-number* . 2init-code*)*.

The symbol 2description* will be bound to the instance of the
3defstruct-description* structure (see (defstruct-description)) that
3defstruct* maintains for this particular structure.  This is so that
the constructor conser can find out such things as the total size of
the structure it is supposed to create.

The symbol 2keywords* will be bound to an alist with pairs of the form
3(2keyword* . 2value*)*, where each 2keyword* was a keyword supplied to
the constructor macro that wasn't the name of a slot, and 2value* was the Lisp
object that followed the keyword.  This is how you can make your own special
keywords, like the existing 3:make-array* and 3:times* keywords.  See the
section on using the constructor macro, (using-defstruct-constructor).  You
specify the list of acceptable keywords with
the 3:keywords* option (see (defstruct-define-type-keywords)).
	It is an error not to supply the 3:cons* option to
3defstruct-define-type*.

.item :ref
'kindex :ref defstruct-define-type
The 3:ref* option to 3defstruct-define-type* is how the user
supplies 3defstruct* with the necessary code that it needs to cons up a
form that will reference an instance of a structure of this type.

The 3:ref* option has the syntax:
.lisp
(:ref (2number* 2description* 2arg-1* ... 2arg-n*)
      2body*)
.end_lisp
2body* is some code that should construct and return a piece
of code that will reference an instance of a structure of this type.

The symbol 2number* will be bound to the location of the slot
that is to be referenced.  This is the same number that is found
in the number slot of the 3defstruct-slot-description* structure
(see (defstruct-slot-description-structure)).

The symbol 2description* will be bound to the instance of the
3defstruct-description* structure that 3defstruct* maintains for this
particular structure.

The symbols 2arg-i* are bound to the forms supplied to the accessor as
arguments.  Normally there should be only one of these.  The 2last* argument
is the one that will be defaulted by the 3:default-pointer* option (see
(defstruct-default-pointer-option)).  3defstruct* will check that the user
has supplied exactly 2n* arguments to the accessor function before calling the
reference consing code.

It is an error not to supply the 3:ref* option to
3defstruct-define-type*. 

.item :overhead
'kindex :overhead defstruct-define-type
The 3:overhead* option to 3defstruct-define-type* is how the user
declares to 3defstruct* that the implementation of this particular type
of structure "uses up" some number of locations in the object
actually constructed.  This option is used by various "named" types of
structures that store the name of the structure in one location.

The syntax of 3:overhead* is: 3(:overhead 2n*)* where 2n* is a
fixnum that says how many locations of overhead this type needs.

This number is only used by the 3:size-macro* and 3:size-symbol*
options to 3defstruct* (see (defstruct-size-symbol-option)).

.item :named
'kindex :named defstruct-define-type
The 3:named* option to 3defstruct-define-type* controls the use of
the 3:named* option to 3defstruct*.  With no argument, the 3:named* option
means that this type is an acceptable "named structure".  With an
argument, as in 3(:named 2type-name*)*, the symbol 2type-name* should be
the name of some other structure type that 3defstruct* should use if
someone asks for the named version of this type.  (For example, in the
definition of the 3:list* type the 3:named* option is used like this:
3(:named :named-list)*.)

.item :keywords
'kindex :keywords defstruct-define-type
'setq defstruct-define-type-keywords page
The 3:keywords* option to 3defstruct-define-type* allows the user to
define additional constructor keywords for this type of structure.  (The
3:make*-array constructor keyword for structures of type 3:array* is an
example.)  The syntax is: 3(:keywords 2keyword-1* ... 2keyword-n*)* where
each 2keyword* is a symbol that the constructor conser expects to find in
the 2keywords* alist (explained above).

.item :defstruct
'kindex :defstruct defstruct-define-type
The 3:defstruct* option to 3defstruct-define-type* allows the user
to run some code and return some forms as part of the expansion of the
3defstruct* macro.

The 3:defstruct* option has the syntax:
.lisp
(:defstruct (2description*)
	    2body*)
.end_lisp
2body* is a piece of code that will be run whenever 3defstruct*
is expanding a 3defstruct* form that defines a structure of this type.
The symbol 2description* will be bound to the instance of the
3defstruct-description* structure that 3defstruct* maintains for this
particular structure.

The value returned by the 2body* should be a 2list*
of forms to be included with those that the 3defstruct* expands into.
Thus, if you only want to run some code at 3defstruct*-expand time, and
you don't want to actually output any additional code, then you should
be careful to return 3nil* from the code in this option.
.end_table

@c I assume that this comes after the discussion of defstruct (chap 17) but
@c before the discussion of streams (sect 18.5).

@chapter Objects, Message Passing, and Flavors
.setq flavor-chapter chapter-number
.cindex flavor
.cindex message
.cindex method
.cindex object
.cindex instance
.setq flavor section-page

@section Introduction

The object oriented programming style used in the Smalltalk and
Actor families of languages is available in Zetalisp, and used
by the Lisp Machine software system.  Its purpose is to perform
2generic operations* on objects.  Part of its implementation is
simply a convention in procedure calling style; part is a powerful
language feature, called Flavors, for defining abstract objects.
This chapter attempts to explain what programming with objects and with
message passing means, the various means of implementing these in
Zetalisp, and when you should use them.  It assumes no prior
knowledge of any other languages.

@section Objects

When writing a program, it is often convenient to model what the program
does in terms of 2objects*: conceptual entities that can be likened to
real-world things.  Choosing what objects to provide in a program is
very important to the proper organization of the program.  In an
object-oriented design, specifying what objects exist is the first
task in designing the system.  In a text editor, the objects might be
"pieces of text", "pointers into text", and "display windows".  In an
electrical design system, the objects might be "resistors",
"capacitors", "transistors", "wires", and "display windows".  After
specifying what objects there are, the next task of the design is to
figure out what operations can be performed on each object.  In the text
editor example, operations on "pieces of text" might include inserting
text and deleting text; operations on "pointers into text" might include
moving forward and backward; and operations on "display windows" might
include redisplaying the window and changing with which "piece of text" the
window is associated.

In this model, we think of the program as being built around a set of
objects, each of which has a set of operations that can be performed on
it.  More rigorously, the program defines several 2types* of object
(the editor above has three types), and it can create many 2instances*
of each type (that is, there can be many pieces of text, many pointers
into text, and many windows).  The program defines a
set of types of object, and the operations that can be performed on
any of the instances of each type.

This should not be wholly unfamiliar to the reader.  Earlier in this
manual, we saw a few examples of this kind of programming.  A simple
example is disembodied property lists, and the functions 3get*,
3putprop*, and 3remprop*.  The disembodied property list is a type of
object; you can instantiate one with 3(cons nil nil)* (that is, by
evaluating this form you can create a new disembodied property list);
there are three operations on the object, namely 3get*, 3putprop*,
and 3remprop*.  Another example in the manual was the first example of
the use of 3defstruct*, which was called a 3ship*.  3defstruct*
automatically defined some operations on this object: the operations to
access its elements.  We could define other functions that did useful
things with 3ship*s, such as computing their speed, angle of travel,
momentum, or velocity, stopping them, moving them elsewhere, and so on.

In both cases, we represent our conceptual object by one Lisp object.
The Lisp object we use for the representation has 2structure*, and refers
to other Lisp objects.  In the property list case, the Lisp object is a
list with alternating indicators and values; in the 3ship* case, the
Lisp object is an array whose details are taken care of by
3defstruct*.  In both cases, we can say that the object keeps track of
an 2internal state*, which can be 2examined* and 2altered* by the
operations available for that type of object.  3get* examines the state
of a property list, and 3putprop* alters it; 3ship-x-position*
examines the state of a ship, and 3(setf (ship-mass) 5.0)* alters it.

We have now seen the essence of object-oriented programming.  A
conceptual object is modelled by a single Lisp object, which bundles up
some state information.  For every type of object, there is a set of
operations that can be performed to examine or alter the state of the
object.

@section Modularity

An important benefit of the object-oriented style is that it lends
itself to a particularly simple and lucid kind of modularity.
If you have modular programming constructs and techniques available,
it helps and encourages you to write
programs that are easy to read and understand, and so are more
reliable and maintainable.  Object-oriented programming lets a
programmer implement a useful facility that presents the caller with a set
of external interfaces, without requiring the caller to understand how
the internal details of the implementation work.  In other words, a program
that calls this facility can treat the facility as a black box; the
program knows what the facility's external interfaces guarantee to do,
and that is all it knows.

For example, a program that uses disembodied property lists never needs
to know that the property list is being maintained as a list of
alternating indicators and values; the program simply performs the
operations, passing them inputs and getting back outputs.  The program
only depends on the external definition of these operations: it knows
that if it 3putprop*s a property, and doesn't 3remprop* it (or
3putprop* over it), then it can do 3get* and be sure of getting back
the same thing it put in.  The important thing about this hiding of
the details of the implementation is that someone reading a program that uses disembodied
property lists need not concern himself with how they are implemented;
he need only understand what they undertake to do.  This saves the
programmer a lot of time, and lets him concentrate his energies on
understanding the program he is working on.  Another good thing about
this hiding is that the representation of property lists could be
changed, and the program would continue to work.  For example, instead
of a list of alternating elements, the property list could be
implemented as an association list or a hash table.  Nothing in the
calling program would change at all.

The same is true of the 3ship* example.  The caller is presented with
a collection of operations, such as 3ship-x-position*,
3ship-y-position*, 3ship-speed*, and 3ship-direction*; it simply
calls these and looks at their answers, without caring how they did what
they did.  In our example above, 3ship-x-position* and
3ship-y-position* would be accessor functions, defined automatically
by 3defstruct*, while 3ship-speed* and 3ship-direction* would be
functions defined by the implementor of the 3ship* type.  The code
might look like this:

.lisp
(defstruct (ship)
  ship-x-position
  ship-y-position
  ship-x-velocity
  ship-y-velocity
  ship-mass)

(defun ship-speed (ship)
  (sqrt (+ (^ (ship-x-velocity ship) 2)
           (^ (ship-y-velocity ship) 2))))

(defun ship-direction (ship)
  (atan (ship-y-velocity ship)
        (ship-x-velocity ship)))
.end_lisp

The caller need not know that the first two functions were structure accessors
and that the second two were written by hand and do arithmetic.  Those
facts would not be considered part of the black box characteristics of
the implementation of the 3ship* type.  The 3ship* type does not
guarantee which functions will be implemented in which ways; such aspects
are not part of the contract between 3ship* and its callers.  In fact,
3ship* could have been written this way instead:

.lisp
(defstruct (ship)
  ship-x-position
  ship-y-position
  ship-speed
  ship-direction
  ship-mass)

(defun ship-x-velocity (ship)
  (* (ship-speed ship) (cos (ship-direction ship))))

(defun ship-y-velocity (ship)
  (* (ship-speed ship) (sin (ship-direction ship))))
.end_lisp

In this second implementation of the 3ship* type, we have decided to
store the velocity in polar coordinates instead of rectangular
coordinates.  This is purely an implementation decision; the caller has
no idea which of the two ways the implementation works, because he just
performs the operations on the object by calling the appropriate
functions.

We have now created our own types of objects, whose implementations are
hidden from the programs that use them.  Such types are usually referred to as
2abstract types*.  The object-oriented style of programming can be
used to create abstract types by hiding the implementation of the
operations, and simply documenting what the operations are defined to do.

Some more terminology: the quantities being held by the elements of the
3ship* structure are referred to as 2instance variables*.  Each
instance of a type has the same operations defined on it; what
distinguishes one instance from another (besides identity (3eq*ness))
is the values that reside in its instance variables.  The example above
illustrates that a caller of operations does not know what the instance
variables are; our two ways of writing the 3ship* operations have
different instance variables, but from the outside they have exactly the
same operations.

One might ask: "But what if the caller evaluates 3(aref ship 2)* and
notices that he gets back the x-velocity rather than the speed?  Then he
can tell which of the two implementations were used."  This is true; if
the caller were to do that, he could tell.  However, when a facility is
implemented in the object-oriented style, only certain functions are
documented and advertised: the functions which are considered to be
operations on the type of object.  The contract from 3ship* to its
callers only speaks about what happens if the caller calls these
functions.  The contract makes no guarantees at all about what would
happen if the caller were to start poking around on his own using
3aref*.  A caller who does so 2is in error*; he is depending on
something that is not specified in the contract.  No guarantees were
ever made about the results of such action, and so anything may happen;
indeed, 3ship* may get reimplemented overnight, and the code that does
the 3aref* will have a different effect entirely and probably stop
working.  This example shows why the concept of a contract between a callee and
a caller is important: the contract is what specifies the interface
between the two modules.

Unlike some other languages that provide abstract types, Zetalisp
makes no attempt to have the language automatically forbid
constructs that circumvent the contract.  This is intentional.  One
reason for this is that the Lisp Machine is an interactive system, and
so it is important to be able to examine and alter internal state
interactively (usually from a debugger).  Furthermore, there is no
strong distinction between the "system" programs and the "user" programs
on the Lisp Machine; users are allowed to get into any part of the
language system and change what they want to change.

In summary: by defining a set of operations, and making only a
specific set of external entrypoints available to the caller, the
programmer can create his own abstract types.  These types can be useful
facilities for other programs and programmers.  Since the implementation
of the type is hidden from the callers, modularity is maintained, and
the implementation can be changed easily.

We have hidden the implementation of an abstract type by making its
operations into functions which the user may call.  The important thing
is not that they are functions--in Lisp everything is done with functions.
The important thing is that we have defined a new conceptual operation
and given it a name, rather than requiring anyone who wants to do the
operation to write it out step-by-step.  Thus we say 3(ship-x-velocity s)*
rather than 3(aref s 2)*.

It is just as true of such abstract-operation functions as of ordinary
functions that sometimes they are simple enough that we want the compiler
to compile special code for them rather than really calling the function.
(Compiling special code like this is often called 2open-coding*.)
The compiler is directed to do this through use of macros, defsubsts, or
optimizers.  3defstruct* arranges for this kind of special compilation
for the functions that get the instance variables of a structure.

When we use this optimization, the implementation of the abstract type
is only hidden in a certain sense.  It does not appear in the Lisp code
written by the user, but does appear in the compiled code.  The reason
is that there may be some compiled functions that use the macros (or whatever);
even if you change the definition of the macro, the existing compiled
code will continue to use the old definition.  Thus, if
the implementation of a module is changed programs that use it may need to be
recompiled.  This is something we sometimes accept for the sake of
efficiency.

In the present implementation of flavors, which is discussed below, there is
no such compiler incorporation of nonmodular knowledge into a
program, except when the "outside-accessible instance variables"
feature is used; see (outside-accessible-instance-variables-option),
where this problem is explained further.  If you don't use the "outside-accessible instance
variables" feature, you don't have to worry about this.

@section Generic Operations

Suppose we think about the rest of the program that uses the
3ship* abstraction.  It may want to deal with other objects that are
like 3ship*s in that they are movable objects with mass, but unlike
3ship*s in other ways.  A more advanced model of a ship might include
the concept of the ship's engine power, the number of passengers on
board, and its name.  An object representing a meteor probably would
not have any of these, but might have another attribute such as how
much iron is in it.

However, all kinds of movable objects have positions, velocities, and
masses, and the system will contain some programs that deal with these
quantities in a uniform way, regardless of what kind of object the
attributes apply to.  For example, a piece of the system that calculates
every object's orbit in space need not worry about the other, more
peripheral attributes of various types of objects; it works the same way
for all objects.  Unfortunately, a program that tries to calculate the
orbit of a ship will need to know the ship's attributes, and will have
to call 3ship-x-position* and 3ship-y-velocity* and so on.  The problem is
that these functions won't work for meteors.  There would have to be a
second program to calculate orbits for meteors that would be exactly the
same, except that where the first one calls 3ship-x-position*, the
second one would call 3meteor-x-position*, and so on.  This would be
very bad; a great deal of code would have to exist in multiple copies,
all of it would have to be maintained in parallel, and it would take up
space for no good reason.

What is needed is an operation that can be performed on objects of
several different types.  For each type, it should do the thing
appropriate for that type.  Such operations are called 2generic*
operations.  The classic example of generic operations is the arithmetic
functions in most programming languages, including Zetalisp.
The 3+* (or 3plus*) function will accept either fixnums or flonums,
and perform either fixnum addition or flonum addition, whichever is
appropriate, based on the data types of the objects being manipulated.
In our example, we need a generic 3x-position* operation that can be
performed on either 3ship*s, 3meteor*s, or any other kind of mobile
object represented in the system.  This way, we can write a single
program to calculate orbits.  When it wants to know the 2x* position
of the object it is dealing with, it simply invokes the generic
3x-position* operation on the object, and whatever type of object it
has, the correct operation is performed, and the 2x* position is
returned.

A terminology for the use of such generic operations has emerged from
the Smalltalk and Actor languages: performing a generic operation is
called 2sending a message*.  The objects in the program are thought of
as little people, who get sent messages and respond with answers.  In
the example above, the objects are sent 3x-position* messages, to
which they respond with their 2x* position.  This 2message passing*
is how generic operations are performed.

Sending a message is a way of invoking a function.  Along with the
2name* of the message, in general, some arguments are passed; when the
object is done with the message, some values are returned.  The sender
of the message is simply calling a function with some arguments, and
getting some values back.  The interesting thing is that the caller did
not specify the name of a procedure to call.  Instead, it specified a
message name and an object; that is, it said what operation to
perform, and what object to perform it on.  The function to invoke
was found from this information.

When a message is sent to an object, a function therefore must be found
to handle the message.  The two data used to figure out which function
to call are the 2type* of the object, and the 2name* of the message.
The same set of functions are used for all instances of a given type, so
the type is the only attribute of the object used to figure out which
function to call.  The rest of the message besides the name are data
which are passed as arguments to the function, so the name is the only
part of the message used to find the function.  Such a function is
called a 2method*.  For example, if we send an 3x-position* message
to an object of type 3ship*, then the function we find is "the
3ship* type's 3x-position* method".  A method is a function that
handles a specific kind of message to a specific kind of object; this
method handles messages named 3x-position* to objects of type
3ship*.

In our new terminology: the orbit-calculating program finds the 2x*
position of the object it is working on by sending that object a message
named 3x-position* (with no arguments).  The returned value of the
message is the 2x* position of the object.  If the object was of type
3ship*, then the 3ship* type's 3x-position* method was invoked; if
it was of type 3meteor*, then the 3meteor* type's 3x-position*
method was invoked.  The orbit-calculating program just sends the
message, and the right function is invoked based on the type of the
object.  We now have true generic functions, in the form of message
passing: the same operation can mean different things depending on the
type of the object.

@section Generic Operations in Lisp

How do we implement message passing in Lisp?  By convention, objects
that receive messages are always 2functional* objects (that is, you
can apply them to arguments), and a message is sent to an object by
calling that object as a function, passing the name of the message as
the first argument, and the arguments of the message as the rest of the
arguments.  Message names are represented by symbols; normally these
symbols are in the keyword package (see (package)) since messages are
a protocol for communication between different programs, which may
reside in different packages.  So if we have a variable 3my-ship*
whose value is an object of type 3ship*, and we want to know its
2x* position, we send it a message as follows:

.lisp
(funcall my-ship ':x-position)
.end_lisp

This form returns the 2x* position as its returned value.  To set the
ship's 2x* position to 33.0*, we send it a message like this:

.lisp
(funcall my-ship ':set-x-position 3.0)
.end_lisp

It should be stressed that no new features are added to Lisp for message
sending; we simply define a convention on the way objects take
arguments.  The convention says that an object accepts messages by
always interpreting its first argument as a message name.  The object
must consider this message name, find the function which is the method
for that message name, and invoke that function.

This raises the question of how message receiving works.  The object
must somehow find the right method for the message it is sent.
Furthermore, the object now has to be callable as a function; objects
can't just be 3defstructs* any more, since those aren't functions.  But
the structure defined by 3defstruct* was doing something useful: it
was holding the instance variables (the internal state) of the object.
We need a function with internal state; that is, we need a coroutine.

Of the Zetalisp features presented so far, the most appropriate
is the closure (see (closure)).  A message-receiving object could be
implemented as a closure over a set of instance variables.  The function
inside the closure would have a big 3selectq* form to dispatch on its
first argument.  (Actually, rather than using closures and a 3selectq*,
Zetalisp provides 2entities* and 3defselect*; see (entity).)

.setq entity-usage page

While using closures (or entities) does work, it has several serious
problems.  The main problem is that in order to add a new operation to a
system, it is necessary to modify a lot of code; you have to find all
the types that understand that operation, and add a new clause to the
3selectq*.  The problem with this is that you cannot textually
separate the implementation of your new operation from the rest of the
system; the methods must be interleaved with the other operations for
the type.  Adding a new operation should only require 2adding* Lisp code;
it should not require 2modifying* Lisp code.

The conventional way of making generic operations is to have a procedure
for each operation, which has a big 3selectq* for all the types; this
means you have to modify code to add a type.  The way described above is
to have a procedure for each type, which has a big 3selectq* for all
the operations; this means you have to modify code to add an operation.
Neither of these has the desired property that extending the system
should only require adding code, rather than modifying code.

Closures (and entities) are also somewhat clumsy and crude.  A far more
streamlined, convenient, and powerful system for creating
message-receiving objects exists; it is called the 2Flavor* mechanism.
With flavors, you can add a new method simply by adding code, without
modifying anything.  Furthermore, many common and useful things to do
are very easy to do with flavors.  The rest of this chapter describes
flavors.

@section Simple Use of Flavors

A 2flavor*, in its simplest form, is a definition of an abstract type.
New flavors are created with the 3defflavor* special form, and
methods of the flavor are created with the 3defmethod* special form.
New instances of a flavor are created with the 3make-instance*
function.  This section explains simple uses of these forms.

For an example of a simple use of flavors, here is how the 3ship*
example above would be implemented.

.lisp
(defflavor ship (x-position y-position 
                 x-velocity y-velocity mass)
	        ()
  :gettable-instance-variables)

(defmethod (ship :speed) ()
  (sqrt (+ (^ x-velocity 2)
           (^ y-velocity 2))))

(defmethod (ship :direction) ()
  (atan y-velocity x-velocity))
.end_lisp

The code above creates a new flavor.  The first subform of the
3defflavor* is 3ship*, which is the name of the new flavor.  Next
is the list of instance variables; they are the five that should be
familiar by now.  The next subform is something we will get to later.
The rest of the subforms are the body of the 3defflavor*, and each
one specifies an option about this flavor.  In our example, there is
only one option, namely 3:gettable-instance-variables*.  This means
that for each instance variable, a method should automatically be
generated to return the value of that instance variable.  The name of
the message is a symbol with the same name as the instance variable, but
interned on the keyword package.  Thus, methods are created to handle
the messages 3:x-position*, 3:y-position*, and so on.

Each of the two 3defmethod* forms adds a method to the flavor.  The
first one adds a handler to the flavor 3ship* for messages named
3:speed*.  The second subform is the lambda-list, and the rest is the
body of the function that handles the 3:speed* message.  The body can
refer to or set any instance variables of the flavor, the same as it can
with local variables or special variables.  When any instance of the
3ship* flavor is invoked with a first argument of 3:direction*, the
body of the second 3defmethod* will be evaluated in an environment in
which the instance variables of 3ship* refer to the instance variables
of this instance (the one to which the message was sent).  So when the
arguments of 3atan* are evaluated, the values of instance variables of
the object to which the message was sent will be used as the arguments.
3atan* will be invoked, and the result it returns will be returned by
the instance itself.

Now we have seen how to create a new abstract type: a new flavor.  Every
instance of this flavor will have the five instance variables named in
the 3defflavor* form, and the seven methods we have seen (five that
were automatically generated because of the
3:gettable-instance-variables* option, and two that we wrote
ourselves).  The way to create an instance of our new flavor is with the
3make-instance* function.  Here is how it could be used:

.lisp
(setq my-ship (make-instance 'ship))
.end_lisp

This will return an object whose printed representation is:

.lisp
#<SHIP 13731210>
.end_lisp

(Of course, the value of the magic number will vary; it is not
interesting anyway.)  The argument to 3make-instance* is,
as you can see, the name of the flavor to be instantiated.  Additional
arguments, not used here, are 2init options*, that is, commands
to the flavor of which we are making an instance, selecting optional
features.  This will be discussed more in a moment.

Examination of the flavor we have defined shows that it is quite
useless as it stands, since there is no way to set any of the
parameters.  We can fix this up easily, by putting the
3:settable-instance-variables* option into the 3defflavor* form.
This option tells 3defflavor* to generate methods for messages named
3:set-x-position*, 3:set-y-position*, and so on; each such method
takes one argument, and sets the corresponding instance variable to the
given value.

Another option we can add to the 3defflavor* is
3:initable-instance-variables*, to allow us to initialize the values
of the instance variables when an instance is first created.
3:initable-instance-variables* does not create any methods; instead,
it makes 2initialization keywords* named 3:x-position*,
3:y-position*, etc., that can be used as init-option arguments to
3make-instance* to initialize the corresponding instance variables.
The set of init options are sometimes called the 2init-plist* because
they are like a property list.

Here is the improved 3defflavor*:
.lisp
(defflavor ship (x-position y-position
                 x-velocity y-velocity mass) 
		()
  :gettable-instance-variables
  :settable-instance-variables
  :initable-instance-variables)
.end_lisp

All we have to do is evaluate this new 3defflavor*, and the existing
flavor definition will be updated and now include the new methods and
initialization options.  In fact, the instance we generated a while ago
will now be able to accept these new messages!  We can set the mass of
the ship we created by evaluating
.lisp
(funcall my-ship ':set-mass 3.0)
.end_lisp
and the 3mass* instance variable of 3my-ship* will properly get set
to 33.0*.  If you want to play around with flavors, it is useful
to know that 3describe* of an instance tells you the flavor of the
instance and the values of its instance variables.  If we were to evaluate
3(describe my-ship)* at this point, the following would be printed:

.lisp
#<SHIP 13731210>, an object of flavor SHIP,
 has instance variable values:
	X-POSITION:         unbound
	Y-POSITION:         unbound
	X-VELOCITY:         unbound
	Y-VELOCITY:         unbound
	MASS:               3.0
.end_lisp

Now that the instance variables are "initable", we can create another
ship and initialize some of the instance variables using the init-plist.
Let's do that and 3describe* the result:

.lisp
(setq her-ship (make-instance 'ship ':x-position 0.0
			            ':y-position 2.0
				    ':mass 3.5))
		==> #<SHIP 13756521>


(describe her-ship)
#<SHIP 13756521>, an object of flavor SHIP,
 has instance variable values:
	X-POSITION:         0.0
	Y-POSITION:         2.0
	X-VELOCITY:         unbound
	Y-VELOCITY:         unbound
	MASS:               3.5
.end_lisp

A flavor can also establish default initial values for instance
variables.  These default values are used when a new instance is created
if the values are not initialized any other way.  The syntax for
specifying a default initial value is to replace the name of the
instance variable by a list, whose first element is the name and whose
second is a form to evaluate to produce the default initial value.  For
example:

.lisp
(defvar *default-x-velocity* 2.0)
(defvar *default-y-velocity* 3.0)

(defflavor ship ((x-position 0.0)
		 (y-position 0.0)
		 (x-velocity *default-x-velocity*)
		 (y-velocity *default-y-velocity*)
		 mass) 
		()
  :gettable-instance-variables
  :settable-instance-variables
  :initable-instance-variables)

(setq another-ship (make-instance 'ship ':x-position 3.4))

(describe another-ship)
#<SHIP 14563643>, an object of flavor SHIP,
 has instance variable values:
	X-POSITION:         3.4
	Y-POSITION:         0.0
	X-VELOCITY:         2.0
	Y-VELOCITY:         3.0
	MASS:               unbound
.end_lisp

3x-position* was initialized explicitly, so the default was ignored.
3y-position* was initialized from the default value, which was
30.0*.  The two velocity instance variables were initialized from
their default values, which came from two global variables.  3mass*
was not explicitly initialized and did not have a default
initialization, so it was left unbound.

There are many other options that can be used in 3defflavor*, and the
init options can be used more flexibly than just to initialize instance
variables; full details are given later in this chapter.  But even with
the small set of features we have seen so far, it is easy to write
object-oriented programs.

@section Mixing Flavors

Now we have a system for defining message-receiving objects so that we
can have generic operations.  If we want to create a new type called
3meteor* that would accept the same generic operations as 3ship*, we
could simply write another 3defflavor* and two more 3defmethods*
that looked just like those of 3ship*, and then meteors and ships
would both accept the same operations.  3ship* would have some
more instance variables for holding attributes specific to ships,
and some more methods for operations that are not generic, but
are only defined for ships; the same would be true of 3meteor*.

However, this would be a a wasteful thing to do.  The same code has to
be repeated in several places, and several instance variables have to be
repeated.  The code now needs to be maintained in many places, which is
always undesirable.  The power of flavors (and the name "flavors") comes
from the ability to mix several flavors and get a new flavor.  Since the
functionality of 3ship* and 3meteor* partially overlap, we can take
the common functionality and move it into its own flavor, which might be
called 3moving-object*.  We would define 3moving-object* the same
way as we defined 3ship* in the previous section.  Then, 3ship* and
3meteor* could be defined like this:

.lisp
(defflavor ship (engine-power number-of-passengers name) 
                (moving-object)
   :gettable-instance-variables)

(defflavor meteor (percent-iron) (moving-object)
   :initable-instance-variables)
.end_lisp

These 3defflavor* forms use the second subform, which we ignored
previously.  The second subform is a list of flavors to be combined to
form the new flavor; such flavors are called 2components*.
Concentrating on 3ship* for a moment (analogous things are true of
3meteor*), we see that it has exactly one component flavor:
3moving-object*.  It also has a list of instance variables, which
includes only the ship-specific instance variables and not the ones that
it shares with 3meteor*.  By incorporating 3moving-object*, the 3ship*
flavor acquires all of its instance variables, and so need not name them
again.  It also acquires all of 3moving-object*'s methods, too.  So
with the new definition, 3ship* instances will still accept the
3:x-velocity* and 3:speed* messages, and they will do the same thing.
However, the 3:engine-power* message will also be understood (and will
return the value of the 3engine-power* instance variable).

What we have done here is to take an abstract type, 3moving-object*,
and build two more specialized and powerful abstract types on top of it.
Any ship or meteor can do anything a moving object can do, and each also
has its own specific abilities.  This kind of building can continue; we
could define a flavor called 3ship-with-passenger* that was built on
top of 3ship*, and it would inherit all of 3moving-object*'s
instance variables and methods as well as 3ship*'s instance variables
and methods.  Furthermore, the second subform of 3defflavor* can be a
list of several components, meaning that the new flavor should combine
all the instance variables and methods of all the flavors in the list,
as well as the ones 2those* flavors are built on, and so on.  All the
components taken together form a big tree of flavors.  A flavor is built
from its components, its components' components, and so on.  We
sometimes use the term "components" to mean the immediate components
(the ones listed in the 3defflavor*), and sometimes to mean all the
components (including the components of the immediate components and so
on).  (Actually, it is not strictly a tree, since some flavors might be
components through more than one path.  It is really a directed graph;
it can even be cyclic.)

The order in which the components are combined to form a flavor is
important.  The tree of flavors is turned into an ordered list by
performing a 2top-down, depth-first* walk of the tree, including
non-terminal nodes 2before* the subtrees they head, ignoring any
flavor that has been encountered previously somewhere else in the tree.
For example, if 3flavor-1*'s immediate components are 3flavor-2* and
3flavor-3*, and 3flavor-2*'s components are 3flavor-4* and
3flavor-5*, and 3flavor-3*'s component was 3flavor-4*, then the
complete list of components of 3flavor-1* would be:
.lisp
flavor-1, flavor-2, flavor-4, flavor-5, flavor-3
.end_lisp
The flavors earlier in this list are the more specific, less basic ones;
in our example, 3ship-with-passengers* would be first in the list,
followed by 3ship*, followed by 3moving-object*.  A flavor is always
the first in the list of its own components.  Notice that 3flavor-4*
does not appear twice in this list.  Only the first occurrence of a
flavor appears; duplicates are removed.  (The elimination of duplicates
is done during the walk; if there is a cycle in the directed graph, it
will not cause a non-terminating computation.)

The set of instance variables for the new flavor is the union of all the
sets of instance variables in all the component flavors.  If both
3flavor-2* and 3flavor-3* have instance variables named 3foo*,
then 3flavor-1* will have an instance variable named 3foo*, and any
methods that refer to 3foo* will refer to this same instance variable.
Thus different components of a flavor can communicate with one another
using shared instance variables.  (Typically, only one component ever
sets the variable, and the others only look at it.)  The default initial
value for an instance variable comes from the first component flavor to
specify one.

.cindex combined-method
.setq combined-method page
The way the methods of the components are combined is the heart of the
flavor system.  When a flavor is defined, a single function, called a
2combined method*, is constructed for each message supported by the
flavor.  This function is constructed out of all the methods for that
message from all the components of the flavor.  There are many different
ways that methods can be combined; these can be selected by the user
when a flavor is defined.  The user can also create new forms of
combination.

There are several kinds of methods, but
so far, the only kinds of methods we have seen are 2primary* methods.
The default way primary methods are combined is that all but the
earliest one provided are ignored.  In other words, the combined method
is simply the primary method of the first flavor to provide a primary
method.  What this means is that if you are starting with a flavor
3foo* and building a flavor 3bar* on top of it, then you can
override 3foo*'s method for a message by providing your own method.
Your method will be called, and 3foo*'s will never be called.

Simple overriding is often useful; if you want to make a new flavor
3bar* that is just like 3foo* except that it reacts completely
differently to a few messages, then this will work.  However, often you
don't want to completely override the base flavor's (3foo*'s) method;
sometimes you want to add some extra things to be done.  This is where
combination of methods is used.

The usual way methods are combined is that one flavor provides a primary
method, and other flavors provide 2daemon methods*.  The idea
is that the primary method is "in charge" of the main business of
handling the message, but other flavors just want to keep informed
that the message was sent, or just want to do the part of the operation
associated with their own area of responsibility.

When methods are combined, a single primary method is found; it comes
from the first component flavor that has one.  Any primary methods
belonging to later component flavors are ignored.  This is just
what we saw above; 3bar* could override 3foo*'s primary method
by providing its own primary method.

.cindex daemon methods

However, you can define other kinds of methods.  In particular, you can define
2daemon* methods.  They come in two kinds, 2before* and 2after*.  There is
a special syntax in 3defmethod* for defining such methods.  Here is an example
of the syntax.  To give the 3ship* flavor an after-daemon method for the
3:speed* message, the following syntax would be used:
.lisp
(defmethod (ship :after :speed) ()
   2body*)
.end_lisp

Now, when a message is sent, it is handled by a new function called the
2combined* method.  The combined method first calls all of the before daemons,
then the primary method, then all the after daemons.  Each method is passed the
same arguments that the combined method was given.  The returned values from the
combined method are the values returned by the primary method; any values
returned from the daemons are ignored.  Before-daemons are called in the order
that flavors are combined, while after-daemons are called in the reverse order.
In other words, if you build 3bar* on top of 3foo*, then 3bar*'s
before-daemons will run before any of those in 3foo*, and 3bar*'s
after-daemons will run after any of those in 3foo*.

The reason for this order is to keep the modularity order correct.  If
we create 3flavor-1* built on 3flavor-2*; then it should not matter
what 3flavor-2* is built out of.  Our new before-daemons go before all
methods of 3flavor-2*, and our new after-daemons go after all methods of
3flavor-2*.  Note that if you have no daemons, this reduces to the
form of combination described above.  The most recently added component
flavor is the highest level of abstraction; you build a higher-level
object on top of a lower-level object by adding new components to the
front.  The syntax for defining daemon methods can be found in the
description of 3defmethod* below.

To make this a bit more clear, let's consider a simple example that is
easy to play with: the 3:print-self* method.  The Lisp printer
(i.e. the 3print* function; see (printer)) prints instances of flavors by sending
them 3:print-self* messages.  The first argument to the
3:print-self* message is a stream (we can ignore the others for now),
and the receiver of the message is supposed to print its printed
representation on the stream.  In the 3ship* example above, the reason
that instances of the 3ship* flavor printed the way they did is
because the 3ship* flavor was actually built on top of a very basic
flavor called 3vanilla-flavor*; this component is provided
automatically by 3defflavor*.  It was 3vanilla-flavor*'s
3:print-self* method that was doing the printing.  Now, if we give
3ship* its own primary method for the 3:print-self* message, then
that method will take over the job of printing completely;
3vanilla-flavor*'s method will not be called at all.  However, if we
give 3ship* a before-daemon method for the 3:print-self* message,
then it will get invoked before the 3vanilla-flavor* message, and so
whatever it prints will appear before what 3vanilla-flavor* prints.
So we can use before-daemons to add prefixes to a printed
representation; similarly, after-daemons can add suffixes.

There are other ways to combine methods besides daemons, but this way is the
most common.  The more advanced ways of combining methods are explained
in a later section; see (method-combination).  The 3vanilla-flavor* and what it does for
you are also explained later; see (vanilla-flavor).

@section Flavor Functions

.defmac defflavor
A flavor is defined by a form
.lisp
(defflavor 2flavor-name* (2var1* 2var2*...) (2flav1* 2flav2*...)
	2opt1* 2opt2*...)
.end_lisp
2flavor-name* is a symbol which serves to name this flavor.  It will get an 3si:flavor*
property of the internal data-structure containing the details of the flavor.

3(typep 2obj*)*, where 2obj* is an instance of the flavor named
2flavor-name*, will return the symbol 2flavor-name*.
3(typep 2obj* 2flavor-name*)* is 3t* if 2obj* is an instance of a
flavor, one of whose components (possibly itself) is 2flavor-name*.

2var1*, 2var2*, etc. are the names of the instance-variables
containing the local state for this flavor.  A list of the name of an
instance-variable and a default initialization form is also acceptable;
the initialization form will be evaluated when an instance of
the flavor is created if no other initial value for
the variable is obtained.  If no initialization is specified, the variable
will remain unbound.

2flav1*, 2flav2*, etc. are the names of the component flavors out of
which this flavor is built.  The features of those flavors are inherited
as described previously.

2opt1*, 2opt2*, etc. are options; each option may be either a
keyword symbol or a list of a keyword symbol and arguments.  The options
to 3defflavor* are described on (defflavor-options).
.end_defmac

.defvar *all-flavor-names*
This is a list of the names of all the flavors that have ever been 3defflavor*'ed.
.end_defvar

.defmac defmethod
A method, that is, a function to handle a particular message sent to
an instance of a particular flavor, is defined by a form such as
.lisp
(defmethod (2flavor-name* 2method-type* 2message*) 2lambda-list*
  2form1* 2form2*...)
.end_lisp
2flavor-name* is a symbol which is the name of the flavor which is to
receive the method.  2method-type* is a keyword symbol for the type of method;
it is omitted when you are defining a primary method, which is the usual case.
2message* is a keyword symbol which names the message
to be handled.

The meaning of the 2method-type* depends on what kind of
method-combination is declared for this message.  For instance, for
daemons 3:before* and 3:after* are allowed.  See
(method-combination) for a complete description of method types and
the way methods are combined.

2lambda-list* describes the arguments and "aux variables" of the
function; the first argument to the method, which is the message
keyword, is automatically handled, and so it is not included in the
2lambda-list*.  Note that methods may not have 3&quote* arguments;
that is they must be functions, not special forms.  2form1*,
2form2*, etc. are the function body; the value of the last form
is returned.

The variant form
.lisp
(defmethod (2flavor-name* 2message*) 2function*)
.end_lisp
where 2function* is a symbol, says that 2flavor-name*'s method for
2message* is 2function*, a symbol which names a function.  That
function must take appropriate arguments; the first argument is the
message keyword.

If you redefine a method that is already defined, the old definition is
replaced by the new one.  Given a flavor, a message name, and a method
type, there can only be one function, so if you define a 3:before*
daemon method for the 3foo* flavor to handle the 3:bar* message,
then you replace the previous before-daemon; however, you do not affect
the primary method or methods of any other type, message name or flavor.

The function spec for a method (see (method-function-spec)) looks like:
.lisp
(:method 2flavor-name* 2message*)  1or*
(:method 2flavor-name* 2method-type* 2message*)
.end_lisp
This is useful to know if you want to trace ((trace-fun)), breakon
((breakon-fun)) or advise ((advise-fun)) a method, or if you want to
poke around at the method function itself, e.g.  disassemble
((disassemble-fun)) it.
.end_defmac

.defun make-instance flavor-name init-option1 value1 init-option2 value2... 
Creates and returns an instance of the specified flavor.  Arguments after
the first are alternating init-option keywords and arguments to those keywords.
These options are used to initialize instance variables and to select
arbitrary options, as described above.  If the flavor supports the 3:init*
message, it is sent to the newly-created object with one argument, the init-plist.
This is a disembodied property-list containing the init-options specified and
those defaulted from the flavor's 3:default-init-plist*.  3make-instance*
is an easy-to-call interface to 3instantiate-flavor*; for full details
refer to that function.
.end_defun

.defun instantiate-flavor flavor-name init-plist &optional send-init-message-p return-unhandled-keywords area
This is an extended version of 3make-instance*, giving you more features.
Note that it takes the init-plist as an argument, rather than taking a 3&rest*
argument of init-options and values.

The 2init-plist* argument must be a disembodied property list;
3locf* of a 3&rest* argument will do.  Beware!  This property list
can be modified; the properties from the default-init-plist are
3putprop*'ed on if not already present, and some 3:init* methods
do explicit 3putprop*s onto the init-plist.

In the event that 3:init* methods do 3remprop* of
properties already on the init-plist (as opposed to simply doing 3get*
and 3putprop*), then the init-plist will get
3rplacd*'ed.  This means that the actual list of options will be modified.
It also means that 3locf* of a 3&rest* argument will not work; the
caller of 3instantiate-flavor* must copy its rest argument (e.g. with 3append*);
this is because 3rplacd* is not allowed on 3&rest* arguments.

First, if the flavor's method-table and other internal information have
not been computed or are not up to date, they are computed.  This may
take a substantial amount of time and invoke the compiler, but will
only happen once for a particular flavor no matter how many instances
you make, unless you change something.

Next, the instance variables are initialized.  There are
several ways this initialization can happen.
If an instance variable is declared initable, and a keyword with
the same spelling as its name appears in 2init-plist*, it is set
to the value specified after that keyword.  If an instance variable
does not get initialized this way, and an initialization form was
specified for it in a 3defflavor*, that form is evaluated and the
variable is set to the result.  The initialization form may not depend
on any instance variables nor on 3self*; it will not be evaluated in the "inside"
environment in which methods are called.
If an instance variable does not get initialized either of these ways
it will be left unbound; presumably an 3:init* method should initialize it
(see below).  Note that a simple empty disembodied property list is
3(nil)*, which is what you should give if you want an empty init-plist.
If you use 3nil*, the property list of 3nil* will be used, which
is probably not what you want.

If any keyword appears in the 2init-plist* but is not used to
initialize an instance variable and is not declared in an
3:init-keywords* option (see (init-keywords-option)) it is presumed
to be a misspelling.  So any keywords that you handle in an 3:init*
handler should also be mentioned in the 3:init-keywords* option
of the definition of the flavor.

If the 2return-unhandled-keywords* argument is
not supplied, such keywords are complained about by signalling an error.
But if 2return-unhandled-keywords* is supplied non-3nil*, a list of
such keywords is returned as the second value of 3instantiate-flavor*.

Note that default values in the 2init-plist* can come from
the 3:default-init-plist* option to 3defflavor*.  See
(default-init-plist-option).

If the 2send-init-message-p* argument is supplied and non-3nil*, an
3:init* message is sent to the newly-created instance, with one
argument, the 2init-plist*.  3get* can be used to extract options
from this property-list.  Each flavor that needs initialization can
contribute an 3:init* method, by defining a daemon.

If the 2area* argument is specified, it is the number of an area in which
to cons the instance; otherwise it is consed in the default area.
.end_defun

.defmac defwrapper
This is hairy and if you don't understand it you should skip it.

Sometimes the way the flavor system combines the methods of different
flavors (the daemon system) is not powerful enough.  In that case 3defwrapper*
can be used to define a macro which expands into code which is wrapped around
the invocation of the methods.  This is best explained by an example;
suppose you needed a lock locked during the processing of the
3:foo* message to the 3bar* flavor, which takes two arguments,
and you have a 3lock-frobboz* special-form which knows how to lock the lock
(presumably it generates an 3unwind-protect*).  3lock-frobboz* needs to see
the first argument to the message; perhaps that tells it what sort of operation
is going to be performed (read or write).
.lisp
(defwrapper (bar :foo) ((arg1 arg2) . body)
  `(lock-frobboz (self arg1)
     . ,body))
.end_lisp
The use of the 3body* macro-argument prevents the 3defwrapper*'ed
macro from knowing the exact implementation and allows several 3defwrapper*s
from different flavors to be combined properly.

Note well that the argument variables, 3arg1* and 3arg2*, are not referenced
with commas before them.  These may look like 3defmacro* "argument" variables,
but they are not.  Those variables are not bound at the time the 3defwrapper*-defined
macro is expanded and the back-quoting is done; rather the result of that
macro-expansion and back-quoting is code which, when a message is sent, will
bind those variables to the arguments in the message as local variables of
the combined method.

Consider another example.  Suppose you thought you wanted a 3:before* daemon,
but found that if the argument was 3nil* you needed to return from processing
the message immediately, without executing the primary method.  You could write
a wrapper such as
.lisp
(defwrapper (bar :foo) ((arg1) . body)
  `(cond ((null arg1))		;Do nothing if arg1 is nil
	 (t 2before-code*
	    . ,body)))
.end_lisp

Suppose you need a variable for communication among the daemons for a particular
message; perhaps the 3:after* daemons need to know what the primary method did,
and it is something that cannot be easily deduced from just the arguments.  You
might use an instance variable for this, or you might create a special variable
which is bound during the processing of the message and used free by the methods.
.lisp
(defvar *communication*)
(defwrapper (bar :foo) (ignore . body)
  `(let ((*communication* nil))
     . ,body))
.end_lisp

Similarly you might want a wrapper which puts a 3*catch* around the processing
of a message so that any one of the methods could throw out in the event of
an unexpected condition.

By careful about inserting the body into an internal lambda-expression within
the wrapper's code.  This interacts with internals details of the way
combined methods are implemented.  It can be done if it is done
carefully.  The 3lambda* expression must have a local variable
named 3.daemon-mapping-table.*, which must be the second local
variable in the compiler function.  This means that if the
3lambda* takes a 3&rest* argument, it should be the first local you
specify.  It should be initialized to the value of
3sys:self-mapping-table*.  The 3lambda* must also provide the
variable 3.daemon-caller-args.*, which the expansion of the body
refers to to get the arguments to pass to other methods.  The value of
that variable outside the 3lambda* should be passed as an argument to
the 3lambda*, where another variable of the same name can be bound to
it.  Here is an example:
.lisp
(defwrapper (bar :foo) (ignore . body)
  `(bar-internal-function
     #'(lambda (si:.daemon-caller-args.
	        &aux ignore (si:.daemon-mapping-table. sys:self-mapping-table))	
	  . ,body)
     si:.daemon-caller-args.))
.end_lisp

Like daemon methods, wrappers work in outside-in order; when you add a
3defwrapper* to a flavor built on other flavors, the new wrapper
is placed outside any wrappers of the component flavors.  However,
2all* wrappers happen before 2any* daemons happen.  When the combined
method is built, the calls to the before-daemon methods, primary methods,
and after-daemon methods are all placed together, and then the wrappers
are wrapped around them.  Thus, if a component flavor defines a wrapper,
methods added by new flavors will execute within that wrapper's context.
.end_defmac

.defmac undefmethod (flavor [type] message)
.lisp
(undefmethod (flavor :before :message))
1removes the method created by*
(defmethod (flavor :before :message) (2args*) ...)
.end_lisp

To remove a wrapper, use 3undefmethod* with 3:wrapper* as the method type.

3undefmethod* is simply an interface to 3fundefine*
(see (fundefine-fun)) which accepts the same syntax as
3defmethod*.
.end_defmac

.defvar self
When a message is sent to an object, the variable 3self* is automatically
bound to that object, for the benefit of methods which want to manipulate
the object itself (as opposed to its instance variables).
.end_defvar

.defun funcall-self message arguments...
When 3self* is an instance or an entity, 3(funcall-self
2args*...)* has the same effect as 3(funcall self 2args*...)*
except that it is a little faster since it doesn't have to re-establish
the context in which the instance variables evaluate correctly.  If
3self* is not an instance (nor an "entity", see (entity)),
3funcall-self* and 3funcall self* do the same thing.

When 3self* is an instance, 3funcall-self* will only work correctly
if it is used in a method or a function, wrapped in a
3declare-flavor-instance-variables*, that was called (not necessarily
directly) from a method.  Otherwise the instance-variables will not be
already set up.
.end_defun

.defun lexpr-funcall-self message arguments... list-of-arguments
This function is a cross between 3lexpr-funcall* and 3funcall-self*.
When 3self* is an instance or an entity, 3(lexpr-funcall-self 2args*...)* has the
same effect as 3(lexpr-funcall self 2args*...)*
except that it is a little faster since it doesn't have to re-establish
the context in which the instance variables evaluate correctly.  If
3self* is not an instance  (nor an "entity", see (entity)),
3lexpr-funcall-self* and 3lexpr-funcall* do the same thing. 
.end_defun

.defmac declare-flavor-instance-variables (flavor) body...
Sometimes you will write a function which is not itself a method, but
which is to be called by methods and wants to be able to access the
instance variables of the object 3self*.  The form
.lisp
(declare-flavor-instance-variables (2flavor-name*)
  (defun 2function* 2args* 2body*...))
.end_lisp
surrounds the function definition with a declaration of
the instance variables for the specified flavor, which will make them
accessible by name.  Any kind of function definition is allowed;
it does not have to use 3defun* per se.

If you call such a function when 3self*'s value is an instance whose
flavor does not include 2flavor-name* as a component, it is an error.

Cleaner than using 3declare-flavor-instance-variables*, because it
does not involve putting anything around the function definition, is to
use a local declaration.  Put 3(declare (:self-flavor 2flavorname*))* as
the first expression in the body of the function.  For example:
.lisp
(defun foo (a b)
  (declare (:self-flavor myobject))
  (+ a (* b speed)))   ;Speed is an instance variable of instances of myobject.
.end_lisp
is equivalent to
.lisp
(declare-flavor-instance-variables (myobject)
(defun foo (a b)
  (+ a (* b speed))))   ;Speed is an instance variable of instances of myobject.
.end_lisp
.end_defmac

.defspec with-self-variables-bound body...
Within the body of this special form, all of 3self*'s instance
variables are bound as specials to the values inside 3self*.
(Normally this is true only of those instance variables which are
specified in 3:special-instance-variables* when 3self*'s flavor was
defined.)

As a result, inside the body you can use 3set*, 3boundp* and
3symeval* freely on the instance variables of 3self*.

This special form is used by the interpreter when a method that is not
compiled is executed, so that the interpreted references to instance
variables will work properly.
.end_defspec

.defun recompile-flavor flavor-name &optional single-message (use-old-combined-methods 3t*) (do-dependents 3t*)
Updates the internal data of the flavor and any flavors that depend on it.
If 2single-message* is supplied non-3nil*, only the methods for that
message are changed.  The system does this when you define a new method that
did not previously exist.
If 2use-old-combined-methods* is 3t*, then the existing combined
method functions will be used if possible.  New ones will only be generated
if the set of methods to be called has changed.  This
is the default.
If 2use-old-combined-methods* is 3nil*, automatically-generated functions
to call multiple methods or to contain code generated by wrappers will be regenerated
unconditionally.
If 2do-dependents* is 3nil*, only the specific flavor you specified
will be recompiled.  Normally it and all flavors that depend on it will be recompiled.

3recompile-flavor* only affects flavors that have already been compiled.
Typically this means it affects flavors that have been instantiated,
but does not bother with mixins (see (mixin-flavor)).
.end_defun

.defmac compile-flavor-methods flavor...
The form 3(compile-flavor-methods 2flavor-name-1*
2flavor-name-2*...)*, placed in a file to be compiled, will cause the
compiler to include the automatically-generated combined methods for the
named flavors in the resulting 3qfasl* file, provided all of the
necessary flavor definitions have been made.  Furthermore, when the 3qfasl* file is
loaded, internal data structures (such as the list of all methods of a
flavor) will get generated.

This means that the combined methods get compiled at compile time, and
the data structures get generated at load time, rather than both things
happening at run time.  This is a very good thing to use, since the
need to invoke the compiler at run-time makes programs that use flavors
slow the first time they are run.  (The compiler will still be called if
incompatible changes have been made, such as addition or deletion of
methods that must be called by a combined method.)

You should only use 3compile-flavor-methods* for flavors that are
going to be instantiated.  For a flavor that will never be instantiated
(that is, a flavor that only serves to be a component of other flavors
that actually do get instantiated), it is a complete waste of time,
except in the unusual case where those other flavors can all inherit
the combined methods of this flavor instead of each one having its
own copy of a combined method which happens to be identical to the
others.

The 3compile-flavor-methods* forms should be compiled after all of
the information needed to create the combined methods is available.  You
should put these forms after all of the definitions of all relevant
flavors, wrappers, and methods of all components of the flavors mentioned.

When a 3compile-flavor-methods* form is seen by the interpreter,
the combined methods are compiled and the internal data structures
are generated.
.end_defmac

.defun get-handler-for object message
Given an object and a message, will return that object's method for that
message, or 3nil* if it has none.  When 2object* is an instance of
a flavor, this function can be useful to find which of that flavor's
components supplies the method.  If you get back a combined method,
you can use the List Combined Methods editor command ((list-combined-methods))
to find out what it does.

This is related to the 3:handler* function spec
(see (function-spec)).

This function can be used with other
things than flavors, and has an optional argument which is not relevant here
and not documented.
.end_defun

.defun flavor-allows-init-keyword-p flavor-name keyword
Returns non-3nil* if the flavor named 2flavor-name* allows 2keyword*
in the init options when it is instantiated, or 3nil* if it does not.
The non-3nil* value is the name of the component flavor which contributes
the support of that keyword.
.end_defun

.defun symeval-in-instance instance symbol &optional no-error-p
This function is used to find the value of an instance variable
inside a particular instance.  2Instance* is the instance to
be examined, and 2symbol* is the instance variable whose value
should be returned.  If there is no such instance variable, an
error is signalled, unless 2no-error-p* is non-3nil* in which
case 3nil* is returned.
.end_defun

.defun set-in-instance instance symbol value
This function is used to alter the value of an instance variable inside
a particular instance. 2Instance* is the instance to be altered,
2symbol* is the instance variable whose value should be set, and
2value* is the new value.  If there is no such instance variable, an
error is signalled.
.end_defun

.defun locate-in-instance instance symbol
Returns a locative pointer to the cell inside 2instance* which holds the
value of the instance variable named 2symbol*.
.end_defun

.defun describe-flavor flavor-name
This function prints out descriptive information about a flavor; it is
self-explanatory.  An important thing it tells you that can be hard to
figure out yourself is the combined list of component flavors; this list
is what is printed after the phrase "and directly or indirectly depends
on".
.end_defun

.defvar si:*flavor-compilations*
This variable contains a history of when the flavor mechanism invoked
the compiler.  It is a list; elements toward the front of the list
represent more recent compilations.  Elements are typically of the
form
.lisp
(:method 2flavor-name type message-name*)
.end_lisp
and 2type* is typically 3:combined*.

You may 3setq* this variable to 3nil* at any time; for instance before
loading some files that you suspect may have missing or obsolete
3compile-flavor-methods* in them.
.end_defvar

@section Defflavor Options

.setq defflavor-options section-page

There are quite a few options to 3defflavor*.  They are all described here,
although some are for very specialized purposes and not of interest to most users.
Each option can be written in two forms; either the keyword by itself, or a list
of the keyword and "arguments" to that keyword.

Several of these options declare things about instance variables.
These options can be given with arguments which are instance variables,
or without any arguments in which case they refer to all of the
instance variables listed at the top of the 3defflavor*.  This is
2not* necessarily all the instance variables of the component
flavors; just the ones mentioned in this flavor's 3defflavor*.  When
arguments are given, they must be instance variables that were listed
at the top of the 3defflavor*; otherwise they are assumed to be
misspelled and an error is signalled.  It is legal to declare things
about instance variables inherited from a component flavor, but to do
so you must list these instance variables explicitly in the instance
variable list at the top of the 3defflavor*.

.table 3 0 500
.item :gettable-instance-variables
'kindex :gettable-instance-variables defflavor
.setq gettable-instance-variables-option page
Enables automatic generation of methods for getting the values of
instance variables.  The message name is the name of the variable, in
the keyword package (i.e. put a colon in front of it.) 

Note that there is nothing special about these methods; you could easily
define them yourself.  This option generates them automatically to save
you the trouble of writing out a lot of very simple method definitions.
(The same is true of methods defined by the
3:settable-instance-variables* option.)  If you define a method for the
same message name as one of the automatically generated methods, the new
definition will override the old one, just as if you had manually
defined two methods for the same message name.

.item :settable-instance-variables
'kindex :settable-instance-variables defflavor
Enables automatic generation of methods for setting the values of
instance variables.  The message name is "3:set-*" followed by the
name of the variable.  All settable instance
variables are also automatically made gettable and initable.
(See the note in the description of the 3:gettable-instance-variables*
option, above.)

.item :initable-instance-variables
'kindex :initable-instance-variables defflavor
The instance variables listed as arguments, or all instance variables
listed in this 3defflavor* if the keyword is given alone, are made
2initable*.  This means that they can be initialized through use of a
keyword (a colon followed by the name of the variable) as an init-option
argument to 3make-instance*.

.item :special-instance-variables
'kindex :special-instance-variables defflavor
The instance variables listed as arguments, or all instance variables
listed in this 3defflavor* if the keyword is given alone, are made
special.  Whenever a message is sent to an instance of this flavor (or
any containing flavor), these instance variables will actually be bound
as specials.

You must do this to any instance variables that you wish to be accesible
through 3symeval*, 3set*, 3boundp* and 3makunbound*.  Since
those functions refer only to the special value cell of a symbol, values
of instance variables not made special will not be visible to them.

This should also be done for any instance variables that are declared
globally special.  If you omit this, the flavor system will do it for
you automatically when you instantiate the flavor, and give you a
warning to remind you to fix the 3defflavor*.

.item :init-keywords
'kindex :init-keywords defflavor
.setq init-keywords-option page
The arguments are declared to be keywords in the initialization
property-list which are processed by this flavor's 3:init* methods.
The system uses this for error-checking: before the system sends the
3:init* message, it makes sure that all the keywords in the
init-plist are either initable-instance-variables, or elements of this
list.  If the caller misspells a keyword or otherwise uses a keyword
that no component flavor handles, this feature will signal an error.
When you write a 3:init* handler that accepts some keywords, they
should be listed in the 3:init-keywords* option of the flavor.

.item :default-init-plist
'kindex :default-init-plist defflavor
.setq default-init-plist-option page
The arguments are alternating keywords and value forms, like a
property-list.  When the flavor is instantiated, these properties and
values are put into the init-plist unless already present.  This allows
one component flavor to default an option to another component flavor.
The value forms are only evaluated when and if they are used.  For
example,
.lisp
(:default-init-plist :frob-array
		     (make-array 100))
.end_lisp
would provide a default "frob array" for any instance for which the
user did not provide one explicitly.

.item :required-instance-variables
'kindex :required-instance-variables defflavor
.setq required-instance-variables-option page
Declares that any flavor incorporating this one which is instantiated
into an object must contain the specified instance variables.
An error occurs if there is an attempt to instantiate a flavor that
incorporates this one if it does not have these in its set of instance
variables.  Note that this option is not one of those which checks
the spelling of its arguments in the way described at the start of this section
(if it did, it would be useless).

Required instance variables may be freely accessed by methods just like
normal instance variables.  The difference between listing instance
variables here and listing them at the front of the 3defflavor* is
that the latter declares that this flavor "owns" those variables and
will take care of initializing them, while the former declares that this
flavor depends on those variables but that some other flavor must be
provided to manage them and whatever features they imply.

.item :required-methods
'kindex :required-methods defflavor
The arguments are names of messages which any flavor incorporating this
one must handle.  An error occurs if there is an attempt to instantiate
such a flavor and it is lacking a method for one of these messages.
Typically this option appears in the 3defflavor* for a base flavor
(see (base-flavor)).  Usually this is used when a base flavor
does a 3funcall-self* ((funcall-self-fun)) to send itself
a message that is not handled by the base flavor itself; the
idea is that the base flavor will not be instantiated alone, but
only with other components (mixins) that do handle the message.
This keyword allows the error of having no handler for the message
be detected when the flavor is defined (which usually means at compile time)
rather than at run time.

.item :required-flavors
'kindex :required-flavors defflavor
The arguments are names of flavors which any flavor incorporating this one
must include as components, directly or indirectly.  The difference between
declaring flavors as required and listing them directly as components at the
top of the 3defflavor* is that declaring flavors to be required does not make
any commitments about where those flavors will appear in the ordered list of
components; that is left up to whoever does specify them as components.
The main thing that declaring a flavor as required accomplishes is to allow
instance variables declared by that flavor to be accessed.  It also provides
error checking: an attempt to instantiate a flavor which does not include the
required flavors as components will signal an error.  Compare this with
3:required-methods* and 3:required-instance-variables*.

For an example of the use of required flavors, consider the 3ship*
example given earlier, and suppose we want to define a 3relativity-mixin*
which increases the mass dependent on the speed.  We might write,
.lisp
(defflavor relativity-mixin () (moving-object))
(defmethod (relativity-mixin :mass) ()
  (// mass (sqrt (- 1 (^ (// (funcall-self ':speed)
			     *speed-of-light*)
			 2)))))
.end_lisp
but this would lose because any flavor that had 3relativity-mixin*
as a component would get 3moving-object* right after it in its
component list.  As a base flavor, 3moving-object* should be last
in the list of components so that other components mixed in can replace
its methods and so that daemon methods combine in the right order.
3relativity-mixin* has no business changing the order in which flavors
are combined, which should be under the control of its caller, for example:
.lisp
(defflavor starship ()
	   (relativity-mixin long-distance-mixin ship))
.end_lisp
which puts 3moving-object* last (inheriting it from 3ship*).

So instead of the definition above we write,
.lisp
(defflavor relativity-mixin () ()
	(:required-flavors moving-object))
.end_lisp
which allows 3relativity-mixin*'s methods to access 3moving-object*
instance variables such as 3mass* (the rest mass), but does not
specify any place for 3moving-object* in the list of components.

It is very common to specify the 2base flavor* of a mixin with the
3:required-flavors* option in this way.

.item :included-flavors
'kindex :included-flavors defflavor
The arguments are names of flavors to be included in this flavor.  The difference
between declaring flavors here and declaring them at the top of the 3defflavor*
is that when component flavors are combined, if an included flavor is not specified
as a normal component, it is inserted into the list of components immediately after
the last component to include it.  Thus included flavors act like defaults.
The important thing is that if an included flavor 2is* specified as a component,
its position in the list of components is completely controlled by that specification,
independently of where the flavor that includes it appears in the list.

3:included-flavors* and 3:required-flavors* are used in similar ways; it would
have been reasonable to use 3:included-flavors* in the 3relativity-mixin*
example above.  The difference is that when a flavor is required but not given
as a normal component, an error is signalled, but when a flavor is included
but not given as a normal component, it is automatically inserted into the list
of components at a "reasonable" place.

.item :no-vanilla-flavor
'kindex :no-vanilla-flavor defflavor
Normally when a flavor is instantiated, the special flavor
3si:vanilla-flavor* is included automatically at the end of its list of
components.  The vanilla flavor provides some default methods for the
standard messages which all objects are supposed to understand.  These
include 3:print-self*, 3:describe*, 3:which-operations*, and several
other messages.  See (vanilla-flavor).

If any component of a flavor specifies the 3:no-vanilla-flavor* option,
then 3si:vanilla-flavor* will not be included in that flavor.  This option
should not be used casually.

.item :default-handler
'kindex :default-handler defflavor
The argument is the name of a function which is to be called when a message
is received for which there is no method.
It will be called with whatever arguments the instance was called with,
including the message name; whatever values it returns will be returned.
If this option is not specified
on any component flavor, it defaults to a function which will signal an error.

.item :ordered-instance-variables
'kindex :ordered-instance-variables defflavor
This option is mostly for esoteric internal system uses.
The arguments are names of instance variables which must appear first (and in this order)
in all instances of this flavor, or any flavor depending on this flavor.
This is used for instance variables which are specially known about by
microcode, and in connection with the 3:outside-accessible-instance-variables*
option.  If the keyword is given alone, the arguments default to the list
of instance variables given at the top of this 3defflavor*.

.item :outside-accessible-instance-variables
'kindex :outside-accessible-instance-variables defflavor
.setq outside-accessible-instance-variables-option page
The arguments are instance variables which are to be accessible from
"outside" of this object, that is from functions other than methods.
A macro (actually a 3defsubst*) is defined which takes an object of
this flavor as an argument and returns the value of the instance variable;
3setf* may be used to set the value of the instance variable.  The name
of the macro is the name of the flavor concatenated with a hyphen and the
name of the instance variable.  These macros are similar to the accessor
macros created by 3defstruct* (see (defstruct).)

This feature works in two different ways, depending on whether the instance
variable has been declared to have a fixed slot in all instances, via the
3:ordered-instance-variables* option.

If the variable is not ordered, the position of its value cell in the
instance will have to be computed at run time.  This takes noticeable
time, although less than actually sending a message would take.  An
error will be signalled if the argument to the accessor macro is
not an instance or is an instance which does not have an instance
variable with the appropriate name.  However, there is no error check
that the flavor of the instance is the flavor the accessor macro was
defined for, or a flavor built upon that flavor.  This error check
would be too expensive.

If the variable is ordered, the compiler will compile a call to
the accessor macro into a subprimitive which simply accesses that
variable's assigned slot by number.  This subprimitive is only 3
or 4 times slower than 3car*.  The only error-checking
performed is to make sure that the argument is really an instance
and is really big enough to contain that slot.  There is no check
that the accessed slot really belongs to an instance variable of
the appropriate name.  Any functions that use these accessor macros will
have to be recompiled if the number or order of instance
variables in the flavor is changed.  The system will not
know automatically to do this recompilation.  If you aren't very careful,
you may forget to recompile something, and have a very
hard-to-find bug.  Because of this problem, and because using
these macros is less elegant than sending messages, the use of
this option is discouraged.  In any case the use of these accessor macros
should be confined to the module which owns the flavor, and the "general
public" should send messages.

.item :accessor-prefix
'kindex :accessor-prefix defflavor
Normally the accessor macro created by the 3:outside-accessible-instance-variables*
option to access the flavor 2f*'s instance variable 2v* is named 2f-v*.
Specifying 3(:accessor-prefix get$)* would cause it to be named 3get$2v** instead.

.item :select-method-order
'kindex :select-method-order defflavor
This is purely an efficiency hack due to the fact that currently the method-table
is searched linearly when a message is sent.  The arguments are names of messages
which are frequently used or for which speed is important.  Their methods
are moved to the front of the method table so that they are accessed
more quickly.

.item :method-combination
'kindex :method-combination defflavor
.setq method-combination-option page
Declares the way that methods from different flavors will be combined.
Each "argument" to this option is a list 3(2type order message1 message2*...)*.
2Message1*, 2message2*, etc. are names of messages whose methods
are to be combined in the declared fashion.  2type* is a keyword which
is a defined type of combination; see (method-combination).  2Order*
is a keyword whose interpretation is up to 2type*; typically it is
either 3:base-flavor-first* or 3:base-flavor-last*.

Any component of a flavor may specify the type of method combination
to be used for a particular message.  If no component specifies a type
of method combination, then the default type is used, namely 3:daemon*.
If more than one component of a flavor specifies it, then they must
agree on the specification, or else an error is signalled.

.item :documentation
'kindex :documentation defflavor
The list of arguments to this option is remembered on the flavor's property
list as the 3:documentation* property.  The (loose) standard for what can
be in this list is as follows; this may be extended in the future.  A string
is documentation on what the flavor is for; this may consist of a brief
overview in the first line, then several paragraphs of detailed documentation.
A symbol is one of the following keywords:
.table 3 0 1300
.item :mixin
'kindex :mixin "defflavor :documentation"
A flavor that you may want to mix with others to provide a useful feature.
.item :essential-mixin
'kindex :essential-mixin "defflavor :documentation"
A flavor that must be mixed in to all flavors of its class, or inappropriate
behavior will ensue.
.item :lowlevel-mixin
'kindex :lowlevel-mixin "defflavor :documentation"
A mixin used only to build other mixins.
.item :combination
'kindex :combination "defflavor :documentation"
A combination of flavors for a specific purpose.
.item :special-purpose
'kindex :special-purpose "defflavor :documentation"
A flavor used for some internal or kludgey purpose by a particular program,
which is not intended for general use.
.end_table

This documentation can be viewed with the 3describe-flavor* function
(see (describe-flavor-fun)) or the editor's 3Meta-X Describe Flavor*
command (see (describe-flavor-command)).

.end_table

@section Flavor Families

.setq base-flavor page
.setq mixin-flavor page
.cindex base-flavor
.cindex mixin

The following organization conventions are recommended for all programs that use flavors.

A 2base flavor* is a flavor that defines a whole family of related flavors,
all of which will have that base flavor as one of their components.
Typically the base flavor includes things relevant to the whole family,
such as instance variables, 3:required-methods* and 3:required-instance-variables*
declarations, default methods for certain messages, 3:method-combination*
declarations, and documentation on the general protocols and conventions
of the family.  Some base flavors are complete and can be instantiated, but
most are not instantiatable and merely serve as a base upon which to build
other flavors.  The base flavor for the 2foo* family is often named 3basic-2foo**.

A 2mixin flavor* is a flavor that defines one particular feature of an object.
A mixin cannot be instantiated, because it is not a complete description.
Each module or feature of a program
is defined as a separate mixin; a usable flavor can be constructed by choosing
the mixins for the desired characteristics and combining them, along with the
appropriate base flavor.  By organizing your flavors this way, you keep separate
features in separate flavors, and you can pick and choose among them.
Sometimes the order of combining mixins does not matter,
but often it does, because the order of flavor combination controls the order
in which daemons are invoked and wrappers are wrapped.  Such order dependencies
would be documented as part of the conventions of the appropriate family of flavors.
A mixin flavor that provides the 2mumble* feature is often named 2mumble3-mixin**.

If you are writing a program that uses someone else's facility to do something,
using that facility's flavors and methods, your program might still define
its own flavors, in a simple way.  The facility might provide a base flavor and
a set of mixins, and the caller can combine these in various combinations depending
on exactly what it wants, since the facility probably would not provide all possible
useful combinations.  Even if your private flavor has exactly the
same components as a pre-existing flavor, it can still be useful since
you can use its 3:default-init-plist* (see (default-init-plist-option)) to
select options of its component flavors and you can define one or two methods
to customize it "just a little".

@section Vanilla Flavor
.setq vanilla-flavor section-page

The messages described in this section are a standard protocol which all
message-receiving objects are assumed to understand.  The standard methods
that implement this protocol are automatically supplied by the flavor
system unless the user specifically tells it not to do so.  These methods
are associated with the flavor 3si:vanilla-flavor*:

.defflavor si:vanilla-flavor
Unless you specify otherwise (with the 3:no-vanilla-flavor* option to
3defflavor*), every flavor includes the "vanilla" flavor, which has no
instance variables but provides some basic useful methods.
.end_defflavor

.defmessage :print-self stream prindepth slashify-p
The object should output its printed-representation to a stream.  The
printer sends this message when it encounters an instance or an entity.
The arguments are the stream, the current depth in list-structure (for
comparison with 3prinlevel*), and whether slashification is enabled
(3prin1* vs 3princ*; see (slashification)).  Vanilla-flavor ignores
the last two arguments, and prints something like 3#<2flavor-name
octal-address*>*.  The 2flavor-name* tells you what type of object
it is, and the 2octal-address* allows you to tell different objects
apart (provided the garbage collector doesn't move them behind your back).
.end_defmessage

.defmessage :describe
The object should describe itself, printing a description onto
the 3standard-output* stream.  The 3describe*
function sends this message when it encounters an instance or an entity.
Vanilla-flavor outputs the object, the name of its flavor, and the names
and values of its instance-variables, in a reasonable format.
.end_defmessage

.defmessage :which-operations
The object should return a list of the messages it can handle.
Vanilla-flavor generates the list once per flavor and remembers it,
minimizing consing and compute-time.  If a new method is added, the
list is regenerated the next time someone asks for it.
.end_defmessage

.defmessage :operation-handled-p operation
2operation* is a message name.  The object should return 3t* if it
has a handler for the specified message, or 3nil* if it does not.
.end_defmessage

.defmessage :get-handler-for operation
2operation* is a message name.
The object should return the method it uses to handle 2operation*.
If it has no handler for that message, it should return 3nil*.
This is like the 3get-handler-for* function (see (get-handler-for-fun)),
but, of course, you can only use it on objects known to accept messages.
.end_defmessage

.defmessage :send-if-handles operation &rest arguments
2operation* is a message name and 2arguments* is a list of arguments
for that message.  The object should send itself that message with
those arguments, if it handles the message.  If it doesn't handle the
message it should just return 3nil*.
.end_defmessage

.defmessage :eval-inside-yourself form
The argument is a form which is evaluated in an environment in which special
variables with the names of the instance variables are bound to the values
of the instance variables.  It works to 3setq* one of these special variables;
the instance variable will be modified.  This is mainly intended to be used
for debugging.  An especially useful value of 2form* is 3(break t)*;
this gets you a Lisp top level loop inside the environment of the methods
of the flavor, allowing you to examine and alter instance variables, and
run functions that use the instance variables.
.end_defmessage

.defmessage :funcall-inside-yourself function &rest args
2function* is applied to 2args* in an environment in which special
variables with the names of the instance variables are bound to the values
of the instance variables.  It works to 3setq* one of these special variables;
the instance variable will be modified.  This is mainly intended to be used
for debugging.
.end_defmessage

.defmessage :break
3break* is called in an environment in which special
variables with the names of the instance variables are bound to the values
of the instance variables.
.end_defmessage

@section Method Combination

.setq method-combination section-page

As was mentioned earlier, there are many ways to combine methods.  The
way we have seen is called the 3:daemon* type of combination.  To use
one of the others, you use the 3:method-combination* option to
3defflavor* (see (method-combination-option)) to say that all the
methods for a certain message to this flavor, or a flavor built on it,
should be combined in a certain way.

The following types of method combination are supplied by the system.
It is possible to define your own types of method combination; for
information on this, see the code.  Note that for most types of method
combination other than 3:daemon* you must define the order in which
the methods are combined, either 3:base-flavor-first* or
3:base-flavor-last*, in the 3:method-combination* option.  In this
context, base-flavor means the last element of the flavor's
fully-expanded list of components.

Which method type keywords are allowed depends on the type of method
combination selected.  Many of them allow only untyped methods.  There
are also certain method types used for internal purposes.

.table 3
.item :daemon
This is the default type of method combination.  All the 3:before*
methods are called, then the primary (untyped) method for the outermost
flavor that has one is called, then all the 3:after* methods are
called.  The value returned is the value of the primary method.

.item :daemon-with-or
This is like the 3:daemon* method combination type, except the primary
method is wrapped in an 3:or* special form with all 3:or* methods.
Multiple values will be returned from the primary method, but not the
3:or* methods.  This will produce combined methods like this
(simplified to ignore multiple values):

.lisp
(progn (foo-before-method)
       (or (foo-or-method)
	   (foo-primary-method))
       (foo-after-method))
.end_lisp

This is primarily useful for flavors in which a mixin introduces an
alternative to the primary method.  Each 3:or* message gets a chance
to run before the primary method and to decide whether the primary
method should be run or not; if any 3:or* method returns a non-3nil*
value, the primary method is not run (nor are the rest of the 3:or*
methods).  Note that the ordering of the combination of the 3:or* methods
is controlled by the 2order* keyword in the 3:method-combination* option
to 3defflavor* (see (method-combination-option)).

.item :daemon-with-and
This is like 3:daemon-with-or* except combining 3:and* methods
in a 3and* special form.  The primary method will only be run
if all of the 3:and* methods return non-3nil* values.

.item :daemon-with-override
This is like the 3:daemon* method combination type, except a 3or*
special form is wrapped around the entire combined method with all
3:override* typed methods before the combined method.  This differs
from 3:daemon-with-or* in that the 3:before* and 3:after* daemons
are not run unless 2none* of the 3:override* methods is run.  The
combined method looks something like this:

.lisp
(or (foo-override-method)
    (progn (foo-before-method)
	   (foo-primary-method)
	   (foo-after-method)))
.end_lisp

.item :progn
All the methods are called, inside a 3progn* special form.
No typed methods are allowed.  This means that all of the
methods are called, and the result of the combined method is
whatever the last of the methods returns.

.item :or
All the methods are called, inside an 3or* special form.
No typed methods are allowed.  This means that each of the
methods is called in turn.  If a method returns a non-3nil* value,
that value is returned and none of the rest of the methods are called;
otherwise, the next method is called.  In other words, each method
is given a chance to handle the message; if it doesn't want to handle
the message, it should return 3nil*, and the next method will get
a chance to try.

.item :and
All the methods are called, inside an 3and* special form.
No typed methods are allowed.  The basic idea is much like 3:or*;
see above.

.item :list
Calls all the methods and returns a list of their returned values.  No typed
methods are allowed.

.item :inverse-list
Calls each method with one argument; these arguments are successive elements of the list which
is the sole argument to the message.  No typed methods are allowed.  Returns no
particular value.  If the result of a 3:list*-combined message is
sent back with an 3:inverse-list*-combined message, with the same
ordering and with corresponding method definitions, each component
flavor receives the value which came from that flavor.

.item :pass-on
Calls each method on the values returned by the preceeding one.  The values
returned by the combined method are those of the outermost call.  The format
of the declaration in the 3defflavor* is:

.lisp
(:method-combination (:pass-on (2ordering* . 2arglist*)) . 2operation-names*)
.end_lisp

Where 2ordering* is 3:base-flavor-first* or 3:base-flavor-last*.
2arglist* may include the 3&aux* and 3&optional* keywords.

.end_table

Here is a table of all the method types used in the standard system (a user
can add more, by defining new forms of method-combination).

.table 3
.item 1(no type)*
If no type is given to 3defmethod*, a primary method is created.
This is the most common type of method.

.item :before
.item1 :after
These are used for the before-daemon and after-daemon
methods used by 3:daemon* method-combination.

.item :override
This allows some of the features of 3:or* method-combination to
be used with daemons.  In 3:daemon* method combination, there is
only one primary method.  However, if an 3:override* method is
present, it is like a primary method in that it is called after the
3:before* methods and before the 3:after* methods.  The difference
is that if the 3:override* method returns 3nil*, then
any primary or override method inherited from "deeper" flavor components
is used.  If the 3:override* method returns non-3nil*, no
inherited primary method is called.  Thus an 3:override* method
can choose at run-time whether to act like a primary method or to
act is if it wasn't there.  In typical usages of this feature, the
3:override* method usually returns 3nil* and does nothing,
but in exceptional circumstances it takes over the handling of the
message.

.item :default
If there are no untyped methods among any of the flavors being combined,
then the 3:default* methods (if any) are treated as if they were untyped.
If there are any untyped methods, the 3:default* methods are ignored.

Typically a base-flavor (see (base-flavor)) will define some default
methods for certain of the messages understood by its family.  When
using the default kind of method-combination these default methods will
not be called if a flavor provides its own method.  But with certain
strange forms of method-combination (3:or* for example) the
base-flavor uses a 3:default* method to achieve its desired effect.

.item :or
.item1 :and
These are used for 3:daemon-with-or* and 3:daemon-with-and*
method combination.

.item :override
This is used with the 3:daemon-with-override* method combination.
If this method returns a non-3nil* value, its value is returned without
running the :daemon part of the combined method.

.item :wrapper
This type is used internally by 3defwrapper*.

.item :combined
Used internally for automatically-generated 2combined* methods.
.end_table

The most common form of combination is 3:daemon*.  One thing may not
be clear: when do you use a 3:before* daemon and when do you use an 3:after*
daemon?  In some cases the primary method performs a clearly-defined
action and the choice is obvious:  3:before :launch-rocket* puts in the
fuel, and 3:after :launch-rocket* turns on the radar tracking.

In other cases the choice can be less obvious.  Consider the 3:init*
message, which is sent to a newly-created object.  To decide what kind
of daemon to use, we observe the order in which daemon methods are
called.  First the 3:before* daemon of the highest level of
abstraction is called, then 3:before* daemons of successively lower
levels of abstraction are called, and finally the 3:before* daemon (if
any) of the base flavor is called.  Then the primary method is called.
After that, the 3:after* daemon for the lowest level of abstraction is
called, followed by the 3:after* daemons at successively higher levels
of abstraction.

Now, if there is no interaction among all these methods, if their
actions are completely orthogonal, then it doesn't matter whether you
use a 3:before* daemon or an 3:after* daemon.  It makes a difference
if there is some interaction.  The interaction we are talking about is
usually done through instance variables; in general, instance variables
are how the methods of different component flavors communicate with each
other.  In the case of the 3:init* message, the 2init-plist* can be
used as well.  The important thing to remember is that no method knows
beforehand which other flavors have been mixed in to form this flavor; a
method cannot make any assumptions about how this flavor has been
combined, and in what order the various components are mixed.

This means that when a 3:before* daemon has run, it must assume that
none of the methods for this message have run yet.  But the 3:after*
daemon knows that the 3:before* daemon for each of the other flavors
has run.  So if one flavor wants to convey information to the other, the
first one should "transmit" the information in a 3:before* daemon, and
the second one should "receive" it in an 3:after* daemon.  So while
the 3:before* daemons are run, information is "transmitted"; that is,
instance variables get set up.  Then, when the 3:after* daemons are
run, they can look at the instance variables and act on their values.

In the case of the 3:init* method, the 3:before* daemons typically set up
instance variables of the object based on the init-plist, while the
3:after* daemons actually do things, relying on the fact that all of the
instance variables have been initialized by the time they are called.

Of course, since flavors are not hierarchically organized, the notion of
levels of abstraction is not strictly applicable.  However, it remains a
useful way of thinking about systems.

@section Implementation of Flavors

An object which is an instance of a flavor is implemented using the
data type 3dtp-instance*.  The representation is a structure whose
first word, tagged with 3dtp-instance-header*, points to a structure
(known to the microcode as an "instance descriptor") containing the
internal data for the flavor.  The remaining words of the structure are value cells
containing the values of the instance variables.  The instance descriptor
is a 3defstruct* which appears on the 3si:flavor* property of the flavor
name.  It contains, among other things, the name of the flavor, the
size of an instance, the table of methods for handling messages, and
information for accessing the instance variables.

3defflavor* creates such a data structure for each flavor, and
links them together according to the dependency relationships
between flavors.

A message is sent to an instance simply by calling it as a function,
with the first argument being the message keyword.
The microcode binds 3self* to the object and binds those instance
variables which are defined to be special to the value
cells in the instance.  Then it
passes on the operation and arguments to a funcallable hash table taken
from the flavor-structure for this flavor.

When the funcallable hash table is called as a function, it hashes the
first argument (the operation) to find a function to handle the message
and an array called a mapping table.  The variable
3sys:self-mapping-table* is bound to the mapping table, which tells
the microcode how to access the other instance variables which are not
defined to be special.  Then the function is called.  If there is only
one method to be invoked, this function is that method; otherwise it is
an automatically-generated function called the combined method (see
(combined-method)),
which calls the appropriate methods in the right order.
If there are wrappers, they are incorporated into this combined
method.

The mapping table is an array whose elements correspond to the instance
variables which can be accessed by the flavor to which the currently
executing method belongs.  Each element contains the position in
3self* of that instance variable.  This position varies with the other
instance variables and component flavors of the flavor of 3self*.

Each time the combined method calls another method, it sets up the
mapping table which that method will require--not in general the same
one which the combined method itself uses.  The mapping tables for the
called methods are extracted from the array leader of the mapping table
used by the combined method, which is kept in a local variable of the
combined method's stack frame while 3sys:self-mapping-table* is set to
the mapping tables for the component methods.

The function-specifier syntax 3(:method 2flavor-name
optional-method-type message-name*)* is understood by 3fdefine* and
related functions.

@subsection Order of Definition

There is a certain amount of freedom to the order in which you do 3defflavor*'s,
3defmethod*'s, and 3defwrapper*'s.  This freedom is designed to make it easy
to load programs containing complex flavor structures without having to do things
in a certain order.  It is considered important that not all the methods for a flavor
need be defined in the same file.  Thus the partitioning of a program into files
can be along modular lines.

The rules for the order of definition are as follows.

Before a method can be defined (with 3defmethod* or 3defwrapper*) its flavor
must have been defined (with 3defflavor*).  This makes sense because the system
has to have a place to remember the method, and because it has to know the
instance-variables of the flavor if the method is to be compiled.

When a flavor is defined (with 3defflavor*) it is not necessary that
all of its component flavors be defined already.  This is to allow
3defflavor*'s to be spread between files according to the modularity
of a program, and to provide for mutually-dependent flavors.
Methods can be defined for a flavor some of whose component flavors are
not yet defined; however, in certain cases compiling those methods will
produce a spurious warning that an instance variable was declared
special (because the system did not realize it was an instance
variable).  If this happens, you should fix the problem and recompile.

The methods automatically generated by the 3:gettable-instance-variables*
and 3:settable-instance-variables* 3defflavor* options
(see (gettable-instance-variables-option)) are generated at the time
the 3defflavor* is done.

The first time a flavor is instantiated, the system looks through all of
the component flavors and gathers various information.  At this point an
error will be signalled if not all of the components have been
3defflavor*'ed.  This is also the time at which certain other errors
are detected, for instance lack of a required instance-variable (see the
3:required-instance-variables* 3defflavor* option,
(required-instance-variables-option)).  The combined methods (see
(combined-method)) are generated at this time also, unless they already
exist.  They will already exist if 3compile-flavor-methods* was used,
but if those methods are obsolete because of changes made to component
flavors since the compilation, new combined methods will be made.

After a flavor has been instantiated, it is possible to make changes to it.
These changes will affect all existing instances if possible.  This is
described more fully immediately below.

@subsection Changing a Flavor

You can change anything about a flavor at any time.  You can change the flavor's
general attributes by doing another 3defflavor* with the same name.  You
can add or modify methods by doing 3defmethod*'s.  If you do a 3defmethod*
with the same flavor-name, message-name, and (optional) method-type as an existing
method, that method is replaced with the new definition.  You can remove
a method with 3undefmethod* (see (undefmethod-fun)).

These changes will always propagate to all flavors that depend upon the
changed flavor.  Normally the system will propagate the changes to all
existing instances of the changed flavor and all flavors that depend on
it.  However, this is not possible when the flavor has been changed so
drastically that the old instances would not work properly with the new
flavor.  This happens if you change the number of instance variables, which
changes the size of an instance.  It also happens if you change the order
of the instance variables (and hence the storage layout of an instance),
or if you change the component flavors (which can change several subtle
aspects of an instance).  The system does not keep a list of all the
instances of each flavor, so it cannot find the instances and modify them
to conform to the new flavor definition.  Instead it gives you a warning
message, on the 3error-output* stream, to the effect that the flavor
was changed incompatibly and the old instances will not get the new version.
The system leaves the old flavor data-structure intact (the old instances
will continue to point at it) and makes a new one to contain the new version
of the flavor.  If a less drastic change is made, the system modifies the
original flavor data-structure, thus affecting the old instances that
point at it.  However, if you redefine methods in such a way that they
only work for the new version of the flavor, then trying to use those
methods with the old instances won't work.

@subsection Restrictions

There is presently an implementation restriction that when using daemons,
the primary method may return at most three values if there are any 3:after*
daemons.  This is because the combined method needs a place to remember the
values while it calls the daemons.  This will be fixed some day.

In this implementation, all message names must be in the keyword package,
in order for various tools in the editor to work correctly.
[This is gradually being fixed.]

@section Entities

.setq flavor-entity section-page

An 2entity* is a Lisp object; the entity is one of the primitive
datatypes provided by the Lisp Machine system (the 3data-type*
function (see (data-type-fun)) will return 3dtp-entity* if it is
given an entity).  Entities are just like closures: they have all the
same attributes and functionality.  The only difference between the two
primitive types is their data type: entities are clearly distinguished
from closures because they have a different data type.  The reason there
is an important difference between them is that various parts of the
(not so primitive) Lisp system treat them differently.  The Lisp functions
that deal with entities are discussed in (entity).

A closure is simply a kind of function, but
an entity is assumed to be a message-receiving object.  Thus, when the
Lisp printer (see (printer)) is given a closure, it prints a simple
textual representation, but when it is handed an entity, it sends the
entity a 3:print-self* message, which the entity is expected to
handle.  The 3describe* function (see (describe-fun)) also sends
entities messages when it is handed them.  So when you want to make a
message-receiving object out of a closure, as described on
(entity-usage), you should use an entity instead.

Usually there is no point in using entities instead of flavors.
Entities were introduced into Zetalisp before flavors were,
and perhaps they would not have been had flavors already existed.
Flavors have had considerably more attention paid to efficiency and
to good tools for using them.

Entities are created with the 3entity* function (see (entity-fun)).
The function part of an entity should usually be a function created
by 3defselect* (see (defselect-fun)).

@section Useful Editor Commands

Since we presently lack an editor manual, this section briefly documents
some editor commands that are useful in conjunction with flavors.

.table 3 0 500
.item meta-.
The 3meta-.* (Edit Definition) command can find the definition of a flavor
in the same way that it can find the definition of a function.

Edit Definition can find the definition of a method if you give
.lisp
(:method 2flavor* 2type* 2message*)
.end_lisp
as the function name.  The keyword 3:method* may be omitted
if the definition is in the editor already.  Completion
will occur on the flavor name and message name as usual with Edit Definition.

.setq describe-flavor-command page
.item meta-X Describe Flavor
Asks for a flavor name in the mini-buffer and describes its characteristics.
When typing the flavor name you have completion over the names of all defined
flavors (thus this command can be used to aid in guessing the name of a flavor).
The display produced is mouse sensitive where there are names of flavors and
of methods; as usual the right-hand mouse button gives you a menu of operations
and the left-hand mouse button does the most common operation, typically positioning
the editor to the source code for the thing you are pointing at.

.item meta-X List Methods
.item1 meta-X Edit Methods
Asks you for a message in the mini-buffer and lists all the flavors
which have a method for that message.  You may type in the message name,
point to it with the mouse, or let it default to the message which is
being sent by the Lisp form the cursor is inside of.  List Methods
produces a mouse-sensitive display allowing you to edit selected methods
or just see which flavors have methods, while Edit Methods skips the
display and proceeds directly to editing the methods.  As usual with
this type of command, the editor command 3control-.* is redefined to
advance the editor cursor to the next method in the list, reading in its
source file if necessary.  Typing 3control-.* while the display is on
the screen edits the first method.

.item meta-X List Combined Methods
.item1 meta-X Edit Combined Methods
.setq list-combined-methods page
Asks you for a message and a flavor in two mini-buffers and lists all
the methods which would be called if that message were sent to an instance of that
flavor.  You may point to the message and flavor with the mouse, and
there is completion for the flavor name.
As in List/Edit Methods, the display is mouse sensitive and
the Edit version of the command skips the display and proceeds directly
to the editing phase.

List Combined Methods can be very useful for telling what a flavor
will do in response to a message.  It shows you the primary method,
the daemons, and the wrappers and lets you see the code for all of
them; type 3control-.* to get to successive ones.

.end_table

@section Property List Messages

It is often useful to associate a property list with an
abstract object, for the same reasons that it is useful to have a
property list associated with a symbol.  This section describes a mixin
flavor that can be used as a component of any new flavor in order to
provide that new flavor with a property list.  For more details and
examples, see the general discussion of property lists ((plist)).
[Currently, the functions 3get*, 3putprop*, etc., do not accept
flavor instances as arguments and send the corresponding message; this
will be fixed.]

.defflavor si:property-list-mixin
This mixin flavor provides the basic operations on property lists.
.end_defflavor

.defmethod si:property-list-mixin :get indicator
The 3:get* message looks up the object's 2indicator* property.
If it finds such a property, it returns the value; otherwise it
returns 3nil*.
.end_defmethod

.defmethod si:property-list-mixin :getl indicator-list
The 3:getl* message is like the 3:get* message, except that
the argument is a list of indicators.  The 3:getl* message
searches down the property list for any of the indicators
in 2indicator-list*, until it finds a property whose indicator
is one of those elements.  It returns the portion of the property
list begining with the first such property that it found.  If it
doesn't find any, it returns 3nil*.
.end_defmethod

.defmethod si:property-list-mixin :putprop property indicator
This gives the object an 2indicator*-property of 2property*.
.end_defmethod

.defmethod si:property-list-mixin :remprop indicator
This removes the object's 2indicator* property, by splicing it
out of the property list.  It returns that portion of the list inside
the object of which the former 2indicator*-property was the 3car*.
.end_defmethod

.defmethod si:property-list-mixin :push-property value indicator
The 2indicator*-property of the object should be a list (note that
3nil* is a list and an absent property is 3nil*).  This message sets
the 2indicator*-property of the object to a list whose 3car* is
2value* and whose 3cdr* is the former 2indicator*-property of the
list.  This is analogous to doing
.lisp
(push 2value* (get 2object* 2indicator*))
.end_lisp
See the 3push* special form ((push-fun)).
.end_defmethod

.defmethod si:property-list-mixin :property-list
This returns the list of alternating indicators and values that implements
the property list.
.end_defmethod

.defmethod si:property-list-mixin :set-property-list list
This sets the list of alternating indicators and values that implements
the property list to 2list*.
.end_defmethod

.definitoption si:property-list-mixin :property-list list
This initializes the list of alternating indicators and values that implements
the property list to 2list*.
.end_definitoption

@c Need to add examples in the section on read, maybe print too.

@chapter "The I/O System"
.cindex input and output
.setq io-chapter chapter-number
	Zetalisp provides a powerful and flexible system for
performing input and output to peripheral devices.  To allow device
independent I/O (that is, to allow programs to be written in a general
way so that the program's input and output may be connected with any
device), the Zetalisp I/O system provides the concept of an "I/O
stream".  What streams are, the way they work, and the functions to create and
manipulate streams, are described in this chapter.  This chapter also
describes the Lisp "I/O" operations 3read* and 3print*, and the
printed representation they use for Lisp objects.

@section "The Character Set"
'cindex character set
.setq character-set section-page

	Zetalisp represents characters as fixnums.
The Lisp Machine's mapping between these numbers and the characters is listed here.
The mapping is similar to ASCII, but somewhat modified to allow the use
of the so-called SAIL extended graphics, while avoiding certain
ambiguities present in ITS.  For a long time ITS treated the Backspace,
Control-H, and Lambda keys on the keyboard identically as
character code 10 octal; this problem is avoided from the start in
the Lisp Machine's mapping.

	It is worth pointing out that although the Zetalisp character set
is different from the pdp-10 character set, when files are transferred between
Lisp Machines and pdp-10's the characters are automatically converted.  Details
of the mapping are explained below.

	Fundamental characters are eight bits wide.  Those less than
200 octal (with the 200 bit off) and only those are printing graphics;
when output to a device they are assumed to print a character and move
the "cursor" one character position to the right.  (All software provides
for variable-width fonts, so the term "character position" shouldn't
be taken too literally.)

	Characters in the range of 200 to 236 inclusive are used for special
characters.  Character 200 is a "null character", which does not correspond to
any key on the keyboard.  The null character is not used for anything much;
3fasload* uses it internally.  Characters 201 through 236 correspond to the special
function keys on the keyboard such as Return and Call.  The remaining characters
are reserved for future expansion.

	It should never be necessary for a user or a source program to know these numerical
values.  Indeed, they are likely to be changed in the future.  There are
symbolic names for all characters; see below.

	Most of the special characters do not normally appear in files (although
it is not forbidden for files to contain them).  These characters exist mainly
to be used as "commands" from the keyboard.

	A few special characters, however, are "format effectors" which are just
as legitimate as printing characters in text files.  The names and meanings of
these characters are:
.table
.item Return
The "carriage return" character which separates lines of text.  Note that the
pdp-10 convention that lines are ended by a pair of characters, "carriage return" and
"line feed", is not used.

.item Page
The "page separator" character which separates pages of text.

.item Tab
The "tabulation" character which spaces to the right until the next "tab stop".
Tab stops are normally every 8 character positions.
.end_table
The space character is considered to be a printing character whose printed image
happens to be blank, rather than a format effector.

	In some contexts, a fixnum can hold both a character code
and a font number for that character.  The following byte
specifiers are defined:

.defvar %%ch-char
The value of 3%%ch-char* is a byte specifier for the field
of a fixnum character which holds the character code.
.end_defvar

.defvar %%ch-font
The value of 3%%ch-font* is a byte specifier for the field
of a fixnum character which holds the font number.
.end_defvar

.cindex keyboard character
	Characters read in from the keyboard include a character code and
control bits.  A character cannot contain both a font number and control bits,
since these data are both stored in the same bits.  The following byte
specifiers are provided:
.setq %%kbd page
.cindex %%kbd fields

.defvar %%kbd-char
The value of 3%%kbd-char* is a byte specifier for the field
of a keyboard character which holds the normal eight-bit character code.
.end_defvar

.defvar %%kbd-control
The value of 3%%kbd-control* is a byte specifier for the field
of a keyboard character which is 1 if either Control key was held down.
.end_defvar

.defvar %%kbd-meta
The value of 3%%kbd-meta* is a byte specifier for the field
of a keyboard character which is 1 if either Meta key was held down.
.end_defvar

.defvar %%kbd-super
The value of 3%%kbd-super* is a byte specifier for the field
of a keyboard character which is 1 if either Super key was held down.
.end_defvar

.defvar %%kbd-hyper
The value of 3%%kbd-hyper* is a byte specifier for the field
of a keyboard character which is 1 if either Hyper key was held down.

This bit is also set if Control and/or Meta is typed in combination with
Shift and a letter.  Shift is much easier than Hyper to reach with the left hand.
.end_defvar

.defvar %%kbd-control-meta
The value of 3%%kbd-control-meta* is a byte specifier for the four-bit field
of a keyboard character which contains the above control bits.  The least-significant
bit is Control.  The most significant bit is Hyper.
.end_defvar

The following fields are used by some programs that encode signals from
the mouse in a the format of a character.  Refer to the window system
documentation for an explanation of how these characters are generated.

.defvar %%kbd-mouse
The value of 3%%kbd-mouse* is a byte specifier for the bit in a keyboard character
which indicates that the character is not really a character,
but a signal from the mouse.
.end_defvar

.defvar %%kbd-mouse-button
The value of 3%%kbd-mouse-button* is a byte specifier for the field in a mouse signal
which says which button was clicked.  The value is 30*, 31*, or 32* for
the left, middle, or right button, respectively.
.end_defvar

.defvar %%kbd-mouse-n-clicks
The value of 3%%kbd-mouse-n-clicks* 
is a byte specifier for the field in a mouse signal
which says how many times the button was clicked.
The value is one less than the number of times the button was clicked.
.end_defvar

	When any of the control bits (Control, Meta, Super, or Hyper) is
set in conjunction with a letter, the letter will always be upper-case.
The character codes which consist of a lower-case letter and non-zero control
bits are "holes" in the character set which are never used for anything.
Note that when Shift is typed in conjuction with Control and/or Meta and
a letter, it means Hyper rather than Shift.

	Since the control bits are not part of the fundamental 8-bit character
codes, there is no way to express keyboard input in terms of simple
character codes.  However, there is a convention which the relevant programs
accept for encoding keyboard input into a string of characters:  if a
character has its Control bit on, prefix it with an Alpha.  If a
character has its Meta bit on, prefix it with a Beta.  If a character
has both its Control and Meta bits on, prefix it with an Epsilon.
If a character has its Super bit on, prefix it with a Pi.  If
a character has its Hyper bit on, prefix it with a Lambda.
To get an Alpha, Beta, Epsilon, Pi, Lambda, or Equivalence into the string,
quote it by prefixing it with an Equivalence.

.setq character-set-differences page

	When characters are written to a file server computer that
normally uses the ASCII character set to store text, Lisp Machine
characters are mapped into an encoding that is reasonably close to an
ASCII transliteration of the text.  When a file is written, the
characters are converted into this encoding, and the inverse
transformation is done when a file is read back.  No information is
lost.  Note that the length of a file, in characters, will not be the
same measured in original Lisp Machine characters as it will measured in
the encoded ASCII characters.  In the currently implemented ASCII file
servers, the following encoding is used.  All printing characters and
any characters not mentioned explicitly here are represented as
themselves.  Codes 010 (lambda), 011 (gamma), 012 (delta), 014
(plus-minus), 015 (circle-plus), 177 (integral), 200 through 207
inclusive, 213 (delete/vt), and 216 and anything higher, are preceeded
by a 177; that is, 177 is used as a "quoting character" for these codes.
Codes 210 (overstrike), 211 (tab), 212 (line), and 214 (page), are
converted to their ASCII cognates, namely 010 (backspace), 011
(horizontal tab), 012 (line feed), and 014 (form feed) respectively.
Code 215 (return) is converted into 015 (carriage return) followed by
012 (line feed).  Code 377 is ignored completely, and so cannot be
stored in files.
7
.group
.nofill
000 center-dot ( )             040 space       100 @           140 `
001 down arrow ()             041 !           101 A           141 a
002 alpha ()                  042 "           102 B           142 b
003 beta ()                   043 #           103 C           143 c
004 and-sign ()               044 $           104 D           144 d
005 not-sign ()               045 %           105 E           145 e
006 epsilon ()                046 &           106 F           146 f
007 pi ()                     047 '           107 G           147 g
010 lambda ((ctl-h))                 050 (           110 H           150 h
011 gamma (	)                  051 )           111 I           151 i
012 delta ()                  052 *           112 J           152 j
013 uparrow ()                053 +           113 K           153 k
014 plus-minus ()             054 ,           114 L           154 l
015 circle-plus ((ctl-m))            055 -           115 M           155 m
016 infinity ()               056 .           116 N           156 n
017 partial delta ()          057 /           117 O           157 o
020 left horseshoe ()         060 0           120 P           160 p
021 right horseshoe ()        061 1           121 Q           161 q
022 up horseshoe ()           062 2           122 R           162 r
023 down horseshoe ()         063 3           123 S           163 s
024 universal quantifier ()   064 4           124 T           164 t
025 existential quantifier () 065 5           125 U           165 u
026 circle-X ()               066 6           126 V           166 v
027 double-arrow ()           067 7           127 W           167 w
030 left arrow ()             070 8           130 X           170 x
031 right arrow ()            071 9           131 Y           171 y
032 not-equals ()             072 :           132 Z           172 z
033 diamond (altmode) ()      073 ;           133 [           173 @{
034 less-or-equal ()          074 <           134 \           174 |
035 greater-or-equal ()       075 =           135 ]           175 @}
036 equivalence ()            076 >           136 ^           176 ~
037 or ()                     077 ?           137 _           177 (ctl-qm)
200 null character     210 overstrike    220 stop-output   230 roman-iv
201 break              211 tab           221 abort         231 hand-up
202 clear              212 line          222 resume        232 hand-down
203 call               213 delete/vt     223 status        233 hand-left
204 terminal escape    214 page          224 end           234 hand-right
205 macro/backnext     215 return        225 roman-i       235 system
206 help               216 quote         226 roman-ii      236 network
207 rubout             217 hold-output   227 roman-iii
237-377 reserved for the future


                    The Lisp Machine Character Set
.fill
.apart
*
@section "Printed Representation"

	People cannot deal directly with Lisp objects, because the
objects live inside the machine.  In order to let us get at and talk
about Lisp objects, Lisp provides a representation of objects in the
form of printed text; this is called the 2printed representation*.
This is what you have been seeing in the examples throughout this manual.
Functions such as 3print*, 3prin1*,  and 3princ* take a Lisp
object, and send the characters of its printed representation to a
stream.  These functions (and the internal functions they call) are
known as the 2printer*.  The 3read* function takes characters from a stream,
interprets them as a printed representation of a Lisp object, builds a
corresponding object and returns it; it and its subfunctions are known as the 2reader*.
(Streams are explained in (streams).)

	This section describes in detail what the printed
representation is for any Lisp object, and just what 3read* does.
For the rest of the chapter, the phrase "printed representation" will
usually be abbreviated as "p.r.".

@subsection "What the Printer Produces"
.setq printer section-page
.cindex printer
	The printed representation of an object depends on its
type.  In this section, we will consider each type of object
and explain how it is printed.

.setq slashification page
.cindex slashification
	Printing is done either with or without 2slashification*.
The non-slashified version is nicer looking in general, but
if you give it to 3read* it won't do the right thing.
The slashified version is carefully set up so that 3read*
will be able to read it in.  The primary effects of slashification
are that special characters used with other than their
normal meanings (e.g. a parenthesis appearing in the name
of a symbol) are preceeded by slashes or cause the name of the
symbol to be enclosed in vertical bars, and that symbols which
are not from the current package get printed out with their
package prefixes (a package prefix looks like a symbol followed
by a colon).

	For a fixnum or a bignum: if the number is negative, the printed representation
begins with a minus sign ("3-*").  Then, the value of the variable 3base*
is examined.  If 3base* is a positive fixnum, the number is printed
out in that base (3base* defaults to 8); if it is a symbol with
a 3si:princ-function* property, the value of the property will be
applied to two arguments: 3minus* of the number to be printed,
and the stream to which to print it
(this is a hook to allow output in Roman numerals and the like);
otherwise the value of 3base* is invalid and an error is signalled
Finally, if 3base* equals 10. and the variable 3*nopoint* is
3nil*, a decimal point is printed out.  Slashification does
not affect the printing of numbers.

.defvar base
The value of 3base* is a number which is the radix in which fixnums
are printed, or a symbol with a 3si:princ-function* property.
The initial value of 3base* is 8.
.end_defvar

.defvar *nopoint
If the value of 3*nopoint* is 3nil*, a trailing decimal point
is printed when a fixnum is printed out in base 10.  This allows
the numbers to be read back in correctly even if 3ibase*
is not 10. at the time of reading.  If 3*nopoint* is non-3nil*,
the trailing decimal points are suppressed.  The initial value of
3*nopoint* is 3nil*.
.end_defvar

	For a flonum: the printer first decides whether to use ordinary
notation or exponential notation.  If the magnitude of the number is too large
or too small, such that the ordinary notation would require an unreasonable
number of leading or trailing zeroes, then exponential notation will be used.
The number is printed as an optional leading minus sign, one or more digits,
a decimal point, one or more digits, and an optional trailing exponent,
consisting of the letter "e", an optional minus sign, and the power of ten.
The number of digits printed is the "correct" number; no information present
in the flonum is lost, and no extra trailing digits are printed that do not represent
information in the flonum.  Feeding the p.r. of a flonum back to the reader
is always supposed to produce an equal flonum.
Flonums are always printed in decimal; they are not affected by
slashification nor by 3base* and 3*nopoint*.

	For a small flonum: the printed representation is very similar to that
of a flonum, except that exponential notation is always used and the exponent
is delimited by "s" rather than "e".

	For a symbol: if slashification is off, the p.r. is simply the successive
characters of the print-name of the symbol. If slashification is on,
two changes must be made.  First, the symbol might require a package prefix
in order that 3read* work correctly, assuming that the package into which
3read* will read the symbol is the one in which it is being printed.
See the section on packages ((package)) for an explanation
of the package name prefix.
Secondly, if the p.r. would not read in as a symbol at all (that is, if
the print-name looks like a number, or contains special characters),
then the p.r. must have some quoting for those characters, either
by the use of slashes ("/") before each special character,
or by the use of vertical bars ("|") around the whole name.
The decision whether quoting is required is done using the readtable
(see (readtable)),
so it is always accurate provided that 3readtable* has the same value when
the output is read back in as when it was printed.

	For a string: if slashification is off, the p.r. is simply the
successive characters of the string.  If slashification is on, the
string is printed between double quotes, and any characters inside the
string which need to be preceeded by slashes will be.   Normally these
are just double-quote and slash.  Compatibly with Maclisp, carriage
return is 2not* ignored inside strings and vertical bars.

	For an instance or an entity: if the object has a method for the
3:print-self* message, that message is sent with three arguments:  the stream to
print to, the current 2depth* of list structure (see below), and whether
slashification is enabled.  The object should print a suitable p.r. on the stream.
See (flavor) for documentation on instances.  Most such objects print like
"any other data type" below, except with additional information such as a name.
Some objects print only their name when slashification is not in effect
(when 3princ*'ed).

	For an array which is a named structure: if the array has a
named structure symbol with a 3named-structure-invoke* property
which is the name of a function, then that
function is called on five arguments: the symbol 3:print-self*, the
object itself, the stream to print to, the current 2depth* of list
structure (see below), and whether slashification is enabled.  A
suitable printed representation should be sent to the stream.  This
allows a user to define his own p.r. for his named structures;
more information can be found in the named structure section (see
(named-structure)).  If the named structure symbol does not have a
3named-structure-invoke* property, the printed-representation is like that for
random data-types: a number sign and a less than sign, the named
structure symbol, the numerical address of the array, and a greater
than sign.

	Other arrays: the p.r. starts with a number sign and
a less-than sign.  Then the "3art-*" symbol for the array
type is printed.  Next the dimensions of the array are printed, separated 
by hyphens.  This is followed by a space, the machine address of the
array, and a greater-than sign.

	Conses:  The p.r. for conses tends to favor 2lists*.  It
starts with an open-parenthesis.  Then, the 2car* of the cons is
printed, and the 2cdr* of the cons is examined.  If it is 3nil*, a
close parenthesis is printed.  If it is anything else but a cons, space
dot space followed by that object is printed.  If it is a cons, we
print a space and start all over (from the point 2after* we printed
the open-parenthesis) using this new cons.  Thus, a list is printed as
an open-parenthesis, the p.r.'s of its elements separated by spaces, and a
close-parenthesis.

	This is how the usual printed representations such as 3(a b (foo bar) c)*
are produced.

	The following additional feature is provided for the p.r. of conses:
as a list is printed, 3print* maintains the length of the list so far,
and the depth of recursion of printing lists.  If the length exceeds the
value of the variable 3prinlength*, 3print* will terminate the printed
representation of the list with an ellipsis (three periods) and a close-parenthesis.
If the depth of recursion exceeds the value of the variable 3prinlevel*,
then the list will be printed as "**".  These two features allow a kind of abbreviated
printing which is more concise and suppresses detail.  Of course, neither
the ellipsis nor the "**" can be interpreted by 3read*, since the relevant information
is lost.

.defvar prinlevel
3prinlevel* can be set to the maximum number of nested
lists that can be printed before the printer will give up and just print a
"**".  If it is 3nil*, which it is initially, any number of nested
lists can be printed.  Otherwise, the value of 3prinlevel* must be a fixnum.
.end_defvar

.defvar prinlength
3prinlength* can be set to the maximum number of elements of a list
that will be printed before the printer will give up and print a "3...*".
If it is 3nil*, which it is initially, any length list may be
printed.  Otherwise, the value of 3prinlength* must be a fixnum.
.end_defvar

	For any other data type: the p.r. starts with a number sign and
a less-than sign ("3<*"), the "3dtp-*" symbol for this datatype, a space, and
the octal machine address of the object.  Then, if the object is a microcoded
function, compiled function, or stack group, its name
is printed.  Finally a greater-than sign ("3>*") is printed.

Including the machine address in the p.r. makes it possible to tell two objects of this
kind apart without explicitly calling 3eq* on them.  This can be very useful during
debugging.  It is important to know that if garbage collection is turned on, objects
will occasionally be moved, and therefore their octal machine addresses will be
changed.  It is best to shut off garbage collection temporarily when depending on
these numbers.

	None of the p.r.'s beginning with a number sign can be read back in,
nor, in general, can anything produced by instances, entities, and named structures.
(Just what 3read* accepts is the topic of the next section.)
This can be a problem if, for example, you are printing a structure into a
file with the intent of reading it in later.  The following feature allows
you to make sure that what you are printing may indeed be read with the reader.

.defvar si:print-readably
When 3si:print-readably* is bound to 3t*, the printer will signal an error
if there is an attempt to print an object which cannot be interpreted by 3read*.
When the printer sends a 3:print-self* or a 3:print* message, it assumes
that this error checking is done for it.  Thus it is possible for these messages
2not* to signal an error, if they see fit.
.end_defvar

.defmac si:printing-random-object (object stream . keywords) &body body
The vast majority of objects which define 3:print-self* messages have much
in common.  This macro is provided for convenience, so that users do not
have to write out that repetitious code.  It is also the preferred interface
to 3si:print-readably*.  With no keywords, 3si:printing-random-object*
checks the value of 3si:print-readably* and signals an error if it is not
3nil*.  It then prints a number sign and a less than sign, evaluates the
forms in 2body*, then prints a space, the octal machine address
of the object and
a greater-than sign.  A typical use of this macro might look like:
.lisp
(si:printing-random-object (ship stream)
  (princ (typep ship) stream)
  (tyo #\space stream)
  (prin1 (ship-name ship) stream))
.end_lisp
This might print 3#<ship "ralph" 23655126>*.
.end_defmac

The following keywords may be used to modify the behaviour of 3si:printing-random-object*:

.table 3
.kitem :no-pointer
This supresses printing of the octal address of the object.

.kitem :typep
This prints the result of 3(typep 2object*)* after the less-than sign.
In the example above, this option could have been used instead of
the first two forms in the body.
.end_table
.setq customizing-the-printer section-page

If you want to control the printed representation of some object,
usually the right way to do it is to make the object an array which is a
named structure (see (named-structure)), or an instance of a flavor
(see (flavor)).  However, occasionally it is desirable to get control
over all printing of objects, in order to change, in some way, how they
are printed.  If you need to do this, the best way to proceed is to
customize the behavior of 3si:print-object* (see
(si:print-object-fun)), which is the main internal function of the
printer.  All of the printing functions, such as 3print* and
3princ*, as well as 3format*, go through this function.  The way to
customize it is by using the "advice" facility (see (advise)).

@subsection "What The Reader Accepts"
.setq reader section-page
.cindex reader
	The purpose of the reader is to accept characters,
interpret them as the p.r. of a Lisp object, and return
a corresponding Lisp object.  The reader cannot accept
everything that the printer produces; for example, the
p.r.'s of arrays (other than strings), compiled code
objects, closures, stack groups etc. cannot be read in.
However, it has many features which are not seen in the
printer at all, such as more flexibility, comments, and
convenient abbreviations for frequently-used unwieldy constructs.

	This section shows what kind of p.r.'s the reader understands,
and explains the readtable, reader macros, and various features
provided by 3read*.

	In general, the reader operates by recognizing tokens in the input
stream.  Tokens can be self-delimiting or can be separated by delimiters such as
whitespace.  A token is the p.r. of an atomic object such as a symbol or a
number, or a special character such as a parenthesis.  The reader reads one
or more tokens until the complete p.r. of an object has been seen, and then
constructs and returns that object.

	The reader understands the p.r.'s of fixnums in a way
more general than is employed by the printer.  Here is a complete
description of the format for fixnums.

	Let a 2simple fixnum* be a string of digits, optionally
preceeded by a plus sign or a minus sign, and optionally followed by a
trailing decimal point.  A simple fixnum will be interpreted by
3read* as a fixnum.  If the trailing decimal point is present, the
digits will be interpreted in decimal radix; otherwise, they will be
considered as a number whose radix is the value of the variable
3ibase*.

.defvar ibase
The value of 3ibase* is a number which is the radix in which
fixnums are read.  The initial value of 3ibase* is 8.
.end_defvar

	3read* will also understand a simple fixnum,
followed by an underscore (3"_"*) or a circumflex (3"^"*),
followed by another simple fixnum.  The two simple fixnums
will be interpreted in the usual way,
then the character in between indicates an operation to be
performed on the two fixnums.  The underscore indicates a binary
"left shift"; that is, the fixnum to its left is doubled the
number of times indicated by the fixnum to its right.  The circumflex
multiplies the fixnum to its left by 3ibase* the number of
times indicated by the fixnum to its right.  (The second simple
fixnum is not allowed to have a leading minus sign.)  Examples:  3645_6*
means 364500* (in octal) and 3645^3* means 3645000*.
	Here are some examples of valid representations
of fixnums to be given to 3read*:
.lisp
4
23456.
-546
+45^+6
2_11
.end_lisp

The syntax for bignums is identical to the syntax for fixnums.  A number
is a bignum rather than a fixnum if and only if it is too large to be represented
as a fixnum.  Here are some examples of valid representations of bignums:
.lisp
72361356126536125376512375126535123712635
-123456789.
105_1000
105_1000.
.end_lisp

.setq flonum-examples page
The syntax for a flonum is an optional plus or minus sign, optionally some digits,
a decimal point, and one or more digits.  Such a flonum or a simple fixnum, followed
by an "e" (or "E") and a simple fixnum, is also a flonum; the fixnum after the "e"
is the exponent of 10 by which the number is to be scaled.  (The exponent is
not allowed to have a trailing decimal point.)  If the exponent is
introduced by "s" (or "S") rather than "e", the number is a small-flonum.
Here are some examples of printed-representations that read as flonums:
.lisp
0.0
1.5
14.0
0.01
.707
-.3
+3.14159
6.03e23
1E-9
1.e3
.end_lisp

Here are some examples of printed-representations that read as small-flonums:
.lisp
0s0
1.5s9
-42S3
1.s5
.end_lisp

	A string of letters, numbers, and "extended alphabetic"
characters is recognized by the reader as a symbol, provided
it cannot be interpreted as a number.  Alphabetic case is ignored
in symbols; lower-case letters are translated to upper-case.
When the reader sees the p.r. of a symbol, it 2interns* it on a 2package*
(see (package) for an explanation of interning and the package system).
Symbols may start with digits; you could even
have one named "-345T"; 3read* will accept this as a symbol
without complaint.  If you want to put strange characters (such as
lower-case letters, parentheses, or reader macro characters) inside the name of a symbol,
put a slash before each strange character.  If you want to have a symbol
whose print-name looks like a number, put a slash before some character
in the name.  You can also enclose the name of a symbol in vertical bars,
which quotes all characters inside, except vertical bars and slashes, which
must be quoted with slash.
.lisp
.exdent 96 Examples of symbols:
foo
bar/(baz/)
34w23
|Frob Sale|
.end_lisp

	The reader will also recognize strings, which should be
surrounded by double-quotes.  If you want to put a double-quote or
a slash inside a string, preceed it by a slash.
.lisp
.exdent 96 Examples of strings:
"This is a typical string."
"That is known as a /"cons cell/" in Lisp."
.end_lisp

	When 3read* sees an open parenthesis, it knows that
the p.r. of a cons is coming, and calls itself recursively to
get the elements of the cons or the list that follows.  Any of
the following are valid:
.lisp
(foo . bar)
(foo bar baz)
(foo . (bar . (baz . nil)))
(foo bar . quux)
.end_lisp
The first is a cons, whose car and cdr are both symbols.  The second
is a list, and the third is exactly the same as the second (although
3print* would never produce it).  The fourth is a "dotted list";
the cdr of the last cons cell (the second one) is not 3nil*, but
3quux*.
'cindex dotted list

	Whenever the reader sees any of the above, it creates new cons
cells; it never returns existing list structure.  This contrasts
with the case for symbols, as very often 3read* returns symbols
that it found interned in the package rather than creating new symbols
itself.  Symbols are the only thing that work this way.

	The dot that separates the two elements of a dotted-pair p.r.
for a cons is only recognized if it is surrounded by delimiters
(typically spaces).  Thus dot may be freely used within print-names of
symbols and within numbers.  This is not compatible with Maclisp; in
Maclisp 3(a.b)* reads as a cons of symbols 3a* and 3b*, whereas in
Zetalisp it reads as a list of a symbol 3a.b*.

	If the circle-X (7""*) character is encountered, it is an octal
escape, which may be useful for including weird characters in the input.  The
next three characters are read and interpreted as an octal number, and the
character whose code is that number replaces the circle-X and the digits in the
input stream.  This character is always taken to be an alphabetic character,
just as if it had been preceded by a slash.

@subsection "Macro Characters"
.cindex macro character

	Certain characters are defined to be macro characters.  When the reader
sees one of these, it calls a function associated with the character.  This
function reads whatever syntax it likes and returns the object represented by
that syntax.  Macro characters are always token delimiters; however, they are not
recognized when quoted by slash or vertical bar, nor when inside a string.
Macro characters are a syntax-extension mechanism available to the user.  Lisp
comes with several predefined macro characters:

Quote (3'*) is an abbreviation to make it easier to put
constants in programs.  3'2foo** reads the same as 3(quote 2foo*)*.

Semicolon (3;*) is used to enter comments.  The semicolon and everything 
up through the next carriage return are ignored.  Thus a comment can be put at
the end of any line without affecting the reader.

Backquote (3`*) makes it easier to write programs to construct lists and trees
by using a template.
See (backquote) for details.

Comma (3,*) is part of the syntax of backquote and is invalid if used other
than inside the body of a backquote.  See (backquote) for details.

Sharp sign (3#*) introduces a number of other syntax extensions.  See the
following section.  Unlike the preceding characters, sharp sign is not a
delimiter.  A sharp sign in the middle of a symbol is an ordinary character.

The function 3set-syntax-macro-char* (see (set-syntax-macro-char-fun))
can be used to define your own macro characters.


@subsection "Sharp-sign Abbreviations"
.cindex sharp sign reader macros
.cindex # reader macros

The reader's syntax includes several abbreviations introduced by sharp sign
(3#*).  These take the general form of a sharp sign, a second character
which identifies the syntax, and following arguments.  Certain abbreviations
allow a decimal number or certain special "modifier" characters between the
sharp sign and the second character.  Here are the currently-defined sharp
sign constructs; more are likely to be added in the future.

.table 3 0 500
.setq sharp-slash page
.item #/
3#/2x** reads in as the number which is the character code for the
character 2x*.  For example, 3#/a* is equivalent to 3141* but clearer
in its intent.  This is the recommended way to include character constants
in your code.  Note that the slash causes this construct to be parsed correctly
by the editors, Emacs and Zwei.

As in strings, upper and lower-case letters are distinguished after 3#/*.
Any character works after 3#/*, even those that are normally special to
3read*, such as parentheses.  Even non-printing characters may be used,
although for them 3#\* is preferred.

The character can be modified with control and meta bits by inserting one or more special
characters between the 7#* and the 7/*.  This syntax is obsolete since
it is not mnemonic and it generally unclear; it is superseded by the 3\#*
syntax (see below).  However, it is used in some old programs, so here is
how it is defined.  7#/2x** generates Control-2x*.
7#/2x** generates Meta-2x*.  7#/2x** generates Super-2x*.
7#(ctl-h)/2x** generates Hyper-2x*.  These can be combined, for instance
7#/&* generates Super-Meta-ampersand.  Also, 7#/2x** is an abbreviation
for 7#/2x**.  When control bits are specified, and 2x* is
a lower-case alphabetic character, the character code for the upper-case
version of the character is produced.

.item #\
3#\2name** reads in as the number which is the character code for the
non-printing character symbolized by 2name*.  A large number of character
names are recognized; these are documented below
((xr-special-character-names)).  For example, 3#\return* reads in as
a fixnum, being the character code for the "return" character in the Lisp Machine
character set.  In general, the names that are written on the
keyboard keys are accepted.  The abbreviations 3cr* for 3return* and 3sp* for
3space* are accepted and generally preferred, since these characters are
used so frequently.  The page separator character is
called 3page*, although 3form* and 3clear-screen* are also accepted since
the keyboard has one of those legends on the page key.  The rules for reading
2name* are the same as those for symbols; thus upper and lower-case letters
are not distinguished, and the name must be terminated by a delimiter such as a
space, a carriage return, or a parenthesis.

When the system types out the name of a special character, it uses the same table
as the 3#\* reader; therefore any character name typed out is acceptable as input.

3#\* can also be used to read in the names of characters that have
control and meta bits set.  The syntax looks like 3#\control-meta-b*
to get a "B" character with the control and meta bits set.  You can use
any of the prefix bit names 3control*, 3meta*, 3hyper*, and
3super*.  They may be in any order, and upper and lower-case letters
are not distinguished.  Also, 3control* may be spelled 3ctrl* as
it is on the keyboards.  The last hyphen may be followed by a single
character, or by any of the special character names normally recognized
by 3#\*.  If it is a single character, it is treated the same way the
reader normally treats characters in symbols; if you want to use a lower-case
character or a special character such as a parenthesis, you must preceed
it by a slash character.  Examples: 3#\Hyper-Super-A*, 3\meta-hyper-roman-i*,
3#\CTRL-META-/(*.

The character can also be modified with control and meta bits by
inserting special Greek characters as with 7#/*, but this is less
clear than spelling them out, and should be avoided in new programs.

.item #^
3#^2x** is exactly like 7#/2x** if the input is being
read by Zetalisp; it generates Control-2x*.
In Maclisp 2x* is converted to upper case and then exclusive-or'ed with 100 (octal).
Thus 3#^2x** always generates the character returned by 3tyi* if
the user holds down the control key and types 2x*.
(In Maclisp 7#/2x** sets the bit set by the Control key when the TTY is
open in 3fixnum* mode.)

.item #'
3#'2foo** is an abbreviation for 3(function 2foo*)*.
2foo* is the p.r. of any object.  This abbreviation can be remembered by
analogy with the 3'* macro-character, since the 3function* and 3quote*
special forms are somewhat analogous.

.item #,
3#,2foo** evaluates 2foo* (the p.r. of a Lisp form) at read
time, unless the compiler is doing the reading, in which case it is arranged
that 2foo* will be evaluated when the QFASL file is loaded.  This is a way,
for example, to include in your code complex list-structure constants which cannot
be written with 3quote*.  Note that the reader does not put 3quote*
around the result of the evaluation.  You must do this yourself if you
want it, typically by using the 3'* macro-character.  An example of 
a case where you do not want 3quote* around it is when this object is
an element of a constant list.

.item #.
3#.2foo** evaluates 2foo* (the p.r. of a lisp form) at read
time, regardless of who is doing the reading.

.item #O
3#O 2number** reads 2number* in octal regardless of the
setting of 3ibase*.  Actually, any expression can be prefixed
by 3#O*; it will be read with 3ibase* bound to 8.

.item #X
3#X 2number** reads 2number* in radix 16. (hexadecimal)
regardless of the setting of 2ibase*.  As with 3#O*,
any expression can be prefixed by 3#X*.
.br
[Unfortunately 3#X* does not completely work, currently, since
it does not cause the letters A through F to be recognized as numbers.
This does not seem to have bothered anyone yet.]

.item #R
3#2radix*R 2number** reads 2number* in radix 2radix* regardless
of the setting of 3ibase*.  As with 3#O*, any expression
can be prefixed by 3#2radix*R*; it will be read with 3ibase*
bound to 2radix*.  2radix* must consist of only digits, and
it is read in decimal.

For example, 3#3R102* is another way of writing 311.*
and 3#11R32* is another way of writing 335.*
Bases larger than ten do not work completely, since there are only
ten digit characters.

.cindex conditionalization, read-time
.item #Q
3#Q 2foo** reads as 2foo* if the input is being read by
Zetalisp, otherwise it reads as nothing (whitespace).

.item #M
3#M 2foo** reads as 2foo* if the input is being read into Maclisp,
otherwise it reads as nothing (whitespace).

.item #N
3#N 2foo** reads as 2foo* if the input is being read into NIL
or compiled to run in NIL, otherwise it reads as nothing (white space).
Also, during the reading of 2foo*,
the reader temporarily defines various NIL-compatible sharp-sign
abbreviations (such as 3#!* and 3#"*) in order to parse
the form correctly, even though its not going to be evaluated.
@c This doesn't work, but I doubt that anyone cares.  If anyone
@c squawks it can easily be fixed.

.item #+
'setq sharp-plus page
This abbreviation provides a read-time conditionalization facility similar
to, but more general than, that provided by 3#M*, 3#N*, and 3#Q*.  It is used
as 3#+2feature* 2form**.  If 2feature* is a symbol, then this is
read as 2form* if 3(status feature 2feature*)* is 3t*.
If 3(status feature 2feature*)* is 3nil*, then this is read as whitespace.
Alternately, 2feature* may be a boolean expression composed of 3and*, 3or*, and
3not* operators and symbols representing items which may appear on the 
3(status features)* list.
3(or lispm amber)* represents evaluation of the predicate
3(or (status feature lispm) (status feature amber))*
in the read-time environment.

For example, 3#+lispm 2form** makes 2form* exist if being read by Zetalisp,
and is thus equivalent to 3#Q 2form**.  Similarly, 3#+maclisp 2form** is equivalent
to 3#M 2form**.  3#+(or lispm nil) 2form** will make 2form* exist on either
Zetalisp or in NIL.  Note that items may be added to the 3(status features)*
list by means of 3(sstatus feature 2feature*)*, thus allowing the user to selectively
interpret or compile pieces of code by parameterizing this list.  See (sstatus-fun).

.item #-
3#-2feature* 2form** is equivalent to 3#+(not 2feature*) 2form**.

.item #<
This is not legal reader syntax.  It is used in the p.r. of objects which cannot
be read back in.  Attempting to read a 3#<* will cause an error.
.end_table

The function 3set-syntax-#-macro-char* (see (set-syntax-#-macro-char-fun)) can be
used to define your own sharp sign abbreviations.


@subsection Special Character Names
.setq xr-special-character-names section-page
.cindex special character

The following are the recognized special character names, in alphabetical order except
with synonyms together and linked with equal signs.  These names can be used after
a 3"#\"* to get the character code for that character.  Most of these characters
type out as this name enclosed in a lozenge.
First we list the special function keys.
.lisp
3abort		break		call		clear-input=clear
delete=vt		end		hand-down	hand-left
hand-right	hand-up		help		hold-output
roman-i		roman-ii		roman-iii		roman-iv
line=lf		macro=back-next	network
overstrike=backspace=bs		page=clear-screen=form
quote		resume		return=cr		rubout
space=sp		status		stop-output	system
tab		terminal=esc*
.end_lisp

These are printing characters which also have special names because they may be hard
to type on a pdp-10.
.lisp
3altmode		circle-plus	delta		gamma
integral		lambda		plus-minus	uparrow*
.end_lisp

The following are special characters sometimes used to represent single and double
mouse clicks.  The buttons can be called either 3l*, 3m*, 3r* or
31*, 32*, 33* depending on stylistic preference.  These characters all contain
the 3%%kbd-mouse* bit.
.lisp
3mouse-l-1=mouse-1-1		mouse-l-2=mouse-1-2
mouse-m-1=mouse-2-1		mouse-m-2=mouse-2-2
mouse-r-1=mouse-3-1		mouse-r-2=mouse-3-2*
.end_lisp

@subsection "The Readtable"
.setq readtable section-page
.cindex readtable

	There is a data structure called the 2readtable* which is
used to control the reader.  It contains information about the syntax of
each character.  Initially it is set up to give the standard Lisp
meanings to all the characters, but the user can change the meanings of
characters to alter and customize the syntax of characters.  It is also
possible to have several readtables describing different syntaxes and to
switch from one to another by binding the symbol 3readtable*.

.defvar readtable
The value of 3readtable* is the current readtable.  This starts
out as the initial standard readtable.  You can bind this variable
to temporarily change the readtable being used.
.end_defvar

.defvar si:initial-readtable
The value of 3si:initial-readtable* is the initial standard readtable.
You should not ever change the contents of this readtable; only examine
it, by using it as the 2from-readtable* argument to 3copy-readtable*
or 3set-syntax-from-char*.
.end_defvar

The user can program the reader by changing the readtable in any of three ways.
The syntax of a character can be set to one of several predefined possibilities.
A character can be made into a 2macro character*, whose interpretation
is controlled by a user-supplied function which is called when the character is read.
The user can create a completely new readtable, using the readtable compiler
(3sys: io; rtc*) to define new kinds of syntax and to assign syntax classes to
characters.  Use of the readtable compiler is not documented here.

.defun copy-readtable &optional from-readtable to-readtable
2from-readtable*, which defaults to the current readtable, is copied.
If 2to-readtable* is unsupplied or 3nil*, a fresh copy is made.  Otherwise
2to-readtable* is clobbered with the copy.
Use 3copy-readtable* to get a private readtable before using the following
functions to change the syntax of characters in it.  The value of 3readtable*
at the start of a Lisp Machine session is the initial standard readtable, which
usually should not be modified.
.end_defun

.defun set-syntax-from-char to-char from-char &optional to-readtable from-readtable
Makes the syntax of 2to-char* in 2to-readtable* be the same as the syntax of
2from-char* in 2from-readtable*.  2to-readtable* defaults to the current readtable,
and 2from-readtable* defaults to the initial standard readtable.
.end_defun

.defun set-character-translation from-char to-char &optional readtable
Changes 2readtable* so that 2from-char* will be translated to 2to-char* upon
read-in, when 2readtable* is the current readtable.
This is normally used only for translating lower case letters to upper case.
Character translations are turned off by slash, string quotes, and vertical bars.
2readtable* defaults to the current readtable.
.end_defun

.defun set-syntax-macro-char char function &optional readtable
Changes 2readtable* so that 2char* is a macro character.  When
2char* is read, 2function* is called.  2readtable* defaults to the
current readtable.

2function* is called with two arguments: 2list-so-far* and the input stream.
When a list is being read, 2list-so-far* is that list (3nil* if this is the
first element).  At the "top level" of 3read*, 2list-so-far* is the symbol
3:toplevel*.  After a dotted-pair dot, 2list-so-far* is the symbol 3:after-dot*.
2function* may read any number of characters from the input stream and process
them however it likes.

2function* should return three values, called 2thing*, 2type*, and 2splice-p*.
2thing* is the object read.  If 2splice-p* is 3nil*, 2thing* is the result.
If 2splice-p* is non-3nil*, then when reading a list 2thing* replaces
the list being read--often it will be 2list-so-far* with something else 
3nconc*'ed onto the end.  At top-level and after a dot if 2splice-p* is non-3nil*
the 2thing* is ignored and the macro-character does not contribute anything to
the result of 3read*.
2type* is a historical artifact and is not really used; 3nil* is a safe value.
Most macro character functions return just one value and let the other two
default to 3nil*.

2function* should not have any side-effects other than on the stream and 2list-so-far*.
Because of the way the rubout-handler works, 2function* can be called several times
during the reading of a single expression in which the macro character only appears once.

2char* is given the same syntax that single-quote, backquote, and comma have
in the initial readtable (it is called 3:macro* syntax).
.end_defun

.defun set-syntax-#-macro-char char function &optional readtable
Causes 2function* to be called when 3#2char** is read.
2readtable* defaults to the current readtable.
The function's arguments and return values are the same as for normal macro
characters, documented above.  When 2function* is called, the special variable
3si:xr-sharp-argument* contains 3nil* or a number which is the
number or special bits between the 3#* and 2char*.
.end_defun

.defun set-syntax-from-description char description &optional readtable
Sets the syntax of 2char* in 2readtable* to be that described by the
symbol 2description*.  The following descriptions are defined in the
standard readtable:
.table 3 0 1500
.item si:alphabetic
An ordinary character such as 3"A"*.
.item si:break
A token separator such as 3"("*.  (Obviously left parenthesis has other
properties besides being a break.
.item si:whitespace
A token separator which can be ignored, such as 3" "*.
.item si:single
'cindex single-character symbol
A self-delimiting single-character symbol.  The initial readtable does not
contain any of these.
.item si:slash
The character quoter.  In the initial readtable this is 3"/"*.
.item si:verticalbar
The symbol print-name quoter.  In the initial readtable this is 3"|"*.
.item si:doublequote
The string quoter.  In the initial readtable this is 3`"'*.
.item si:macro
A macro character.  Don't use this, use 3set-syntax-macro-char*.
.item si:circlecross
The octal escape for special characters.  In the initial readtable this is 3""*.
.end_table

These symbols will probably be moved to the standard keyword package at some point.
2readtable* defaults to the current readtable.
.end_defun

.defun setsyntax character arg2 arg3
This exists only for Maclisp compatibility.  The above functions are preferred in new
programs.  The syntax of 2character* is altered in the current readtable, according
to 2arg2* and 2arg3*.  2character* can be a fixnum, a symbol, or a string,
i.e. anything acceptable to the 3character* function.
2arg2* is usually a keyword; it can be in any package since this is a Maclisp
compatibility function.  The following values are allowed for 2arg2*:
.table 3
.kitem :macro
The character becomes a macro character.  2arg3* is the name of a function to be
invoked when this character is read.  The function takes no arguments, may 3tyi* or
3read* from 3standard-input* (i.e. may call 3tyi* or 3read* without
specifying a stream),
and returns an object which is taken as the result of the read.

.kitem :splicing
Like 3:macro* but the object returned by the macro function is a list which
is 3nconc*ed into the list being read.  If the character is read not inside a list
(at top level or after a dotted-pair dot), then it may return 3()* which means it
is ignored, or 3(2obj*)* which means that 2obj* is read.

.kitem :single
The character becomes a self-delimiting single-character symbol.  If 2arg3* is
a fixnum, the character is translated to that character.

.item nil
The syntax of the character is not changed, but if 2arg3* is
a fixnum, the character is translated to that character.

.item 1a symbol*
The syntax of the character is changed to be the same as that of
the character 2arg2* in the standard initial readtable.  2arg2*
is converted to a character by taking the first character of its print name.
Also if 2arg3* is
a fixnum, the character is translated to that character.
.end_table
.end_defun

.defun setsyntax-sharp-macro character type function &optional readtable
This exists only for Maclisp compatibility.  3set-syntax-#-macro-char* is preferred.
If 2function* is 3nil*, 3#2character** is turned off, otherwise it
becomes a macro which calls 2function*.  2type* can be 3:macro*, 3:peek-macro*,
3:splicing*, or 3:peek-splicing*.  The splicing part controls whether 2function* returns
a single object or a list of objects.  Specifying peek causes 2character*
to remain in the input stream when 2function* is called; this is useful if
2character* is something like a left parenthesis.  2function* gets one
argument, which is 3nil* or the number between the 3#* and the 2character*.
.end_defun


@section "Input Functions"

Most of these functions take optional arguments called 2stream* and 2eof-option*.
2stream* is the stream from which the input is to be read; if unsupplied it
defaults to the value of 3standard-input*.  The special pseudo-streams 3nil* and
3t* are also accepted, mainly for Maclisp compatibility.  3nil* means
the value of 3standard-input* (i.e. the default) and 3t* means the
value of 3terminal-io* (i.e. the interactive terminal).  This is all more-or-less
compatible with Maclisp, except that instead of the variable 3standard-input*
Maclisp has several variables and complicated rules.  For detailed documentation
of streams, refer to (streams).

2eof-option* controls what happens if input is from a file (or any other
input source that has a definite end) and the end of the file is reached.  If
no 2eof-option* argument is supplied, an error will be signalled.  If there
is an 2eof-option*, it is the value to be returned.  Note that an
2eof-option* of 3nil* means to return 3nil* if the end of the file is
reached; it is 2not* equivalent to supplying no 2eof-option*.

Functions such as 3read* which read an "object" rather than a single
character will always signal an error, regardless of 2eof-option*, if
the file ends in the middle of an object.  For example, if a file does
not contain enough right parentheses to balance the left parentheses in
it, 3read* will complain.  If a file ends in a symbol or a number
immediately followed by end-of-file, 3read* will read the symbol or
number successfully and when called again will see the end-of-file and
obey 2eof-option*.  If a file contains ignorable text at the end, such
as blank lines and comments, 3read* will not consider it to end in the
middle of an object and will obey 2eof-option*.

These end-of-file conventions are not completely compatible with Maclisp.
Maclisp's deviations from this are generally considered to be bugs rather than features.

The functions below that take 2stream* and 2eof-option* arguments
can also be called with the stream and eof-option in the other order.
This functionality is only for compatibility with old Maclisp programs,
and should never be used in new programs.  The functions attempt to
figure out which way they were called by seeing whether each argument is
a plausible stream.  Unfortunately, there is an ambiguity with symbols:
a symbol might be a stream and it might be an eof-option.  If there are
two arguments, one being a symbol and the other being something that is
a valid stream, or only one argument, which is a symbol, then these
functions will interpret the symbol as an eof-option instead of as a
stream.  To force them to interpret a symbol as a stream, give the
symbol an 3si:io-stream-p* property whose value is 3t*.

Note that all of these functions will echo their input if used on an
interactive stream (one which supports the 3:rubout-handler*
operation; see below.)  The functions that input more than one
character at a time (3read*, 3readline*) allow the input to be
edited using rubout.  3tyipeek* echoes all of the characters that
were skipped over if 3tyi* would have echoed them; the character not
removed from the stream is not echoed either.

.defun read &optional stream eof-option
3read* reads in the printed representation of a Lisp object
from 2stream*, builds a corresponding Lisp object, and returns
the object.  The details have been explained above.
(This function can take its arguments in the other order, for Maclisp
compatibility only; see the note above.)
.end_defun

.defvar read-preserve-delimiters
Certain printed representations given to 3read*, notably those of symbols
and numbers, require a delimiting character after them.  (Lists do not, because
the matching close parenthesis serves to mark the end of the list.)
Normally 3read* will throw away the delimiting character if it is "whitespace",
but will preserve it (with a 3:untyi* stream operation) if the character is
syntactically meaningful, since it may be the start of the next expression.

If 3read-preserve-delimiters* is bound to 3t* around a call to 3read*,
no delimiting characters will be thrown away, even if they are whitespace.
This may be useful for certain reader macros or special syntaxes.
.end_defvar

.defun tyi &optional stream eof-option
3tyi* inputs one character from 2stream* and returns it.
The character is echoed if 2stream* is interactive,
except that Rubout is not echoed.
The Control, Meta, etc. shifts echo as prefix alpha, beta, etc.

The 3:tyi* stream operation is preferred over the 3tyi* function for
some purposes.  Note that it does not echo.  See (general-stream-ops).

(This function can take its arguments in the other order, for Maclisp
compatibility only; see the note above.)
.end_defun

.defun read-for-top-level &optional stream eof-option
This is a slightly different version of 3read*.  It differs from 3read*
only in that it ignores close parentheses seen at top level,
and it returns the symbol 3si:eof* if the stream reaches end-of-file
if you have not supplied an 2eof-option* (instead of signalling
an error as 3read* would).  This version of 3read* is used in
the system's "read-eval-print" loops.

(This function can take its arguments in the other order, for uniformity
with 3read* only; see the note above.)
.end_defun

.defun readline &optional stream eof-option options
3readline* reads in a line of text, terminated by a return.  It
returns the line as a character string, 2without* the return
character.  This function is usually used to get a line of input from
the user.  If rubout processing is happening, then 2options* is passed
as the list of options to the rubout handler.  One option that is
particularly useful is the 3:do-not-echo* option (see
(:do-not-echo-option)), which you can use to make the 3return*
character that terminates the line not be echoed.  (This function can
take its arguments in the other order, for Maclisp compatibility only;
see the note above.)
.end_defun

.defun readch &optional stream eof-option
This function is provided only for Maclisp compatibility, since
in the Zetalisp characters are always represented as fixnums.
3readch* is just like 3tyi*, except that instead of returning
a fixnum character, it returns a symbol whose print name is the character
read in.  The symbol is interned in the current package.
'cindex character object
This is just like a Maclisp "character object".
(This function can take its arguments in the other order, for Maclisp
compatibility only; see the note above.)
.end_defun

.defun tyipeek &optional peek-type stream eof-option
This function is provided mainly for Maclisp compatibility;
the 3:tyipeek* stream operation is usually clearer (see (:tyipeek-stream-operation)).

What 3tyipeek* does depends on the 2peek-type*, which
defaults to 3nil*.  With a 2peek-type* of 3nil*,
3tyipeek* returns the next character to be read from 
2stream*, without actually removing it from the input stream.
The next time input is done from 2stream* the character will still
be there; in general, 3(= (tyipeek) (tyi))* is 3t*.  (See the
description of the 3:tyipeek* stream operation ((:tyipeek-stream-operation))
for details.)

If 2peek-type* is a fixnum less than 1000 octal, then 3tyipeek*
reads characters from 2stream* until it gets one equal to 2peek-type*.
That character is not removed from the input stream.

If 2peek-type* is 3t*, then 3tyipeek* skips over input characters
until the start of the printed representation of a Lisp object is reached.
As above, the last character (the one that starts an object)
is not removed from the input stream.

The form of 3tyipeek* supported by Maclisp in which 2peek-type*
is a fixnum not less than 1000 octal is not supported, since the readtable
formats of the Maclisp reader and the Zetalisp reader are quite different.

Characters passed over by 3tyipeek* are echoed if 2stream* is interactive.
.end_defun

.nopara
The following functions are related functions which do not operate on streams.
Most of the text at the beginning of this section does not apply to them.

.defun read-from-string string &optional eof-option (idx 0)
The characters of 2string* are given successively
to the reader, and the Lisp object built by the reader is returned.
Macro characters and so on will all take effect.  If 2string*
has a fill-pointer it controls how much can be read.

2eof-option* is what to return if the end of the string is reached,
as with other reading functions.  2idx* is the index in the string
of the first character to be read.

3read-from-string* returns two values; the first is the object read
and the second is the index of the first character in the string not read.
If the entire string was read, this will be either the length of the string
or 1 more than the length of the string.

.lisp
.exdent 96 Example:
(read-from-string "(a b c)") => (a b c) 1and* 7
.end_lisp
.end_defun

.defun readlist char-list
This function is provided mainly for Maclisp compatibility.
2char-list* is a list of characters.  The characters may
be represented by anything that the function 3character* accepts:
fixnums, strings, or symbols.  The characters are given successively
to the reader, and the Lisp object built by the reader is returned.
Macro characters and so on will all take effect.

If there are more characters in 2char-list* beyond those needed to
define an object, the extra characters are ignored.  If there are not
enough characters, an "eof in middle of object" error is signalled.
.end_defun

See also the 3with-input-from-string* special form ((with-input-from-string-fun)).


@section "Output Functions"

These functions all take an optional argument called 2stream*, which is
where to send the output.  If unsupplied 2stream* defaults to the value of
3standard-output*.  If 2stream* is 3nil*, the value of
3standard-output* (i.e. the default) is used.  If it is 3t*, the value of
3terminal-io* is used (i.e. the interactive terminal).  If 2stream* is a
list of streams, then the output is performed to all of the streams (this is
not implemented yet, and an error is signalled in this case).  This is all
more-or-less compatible with Maclisp, except that instead of the
variable 3standard-output* Maclisp has several variables and complicated rules.
For detailed documentation of streams, refer to (streams).

.defun prin1 x &optional stream
3prin1* outputs the printed representation of 2x* to
2stream*, with slashification (see (slashification)).
2x* is returned.
.end_defun

.defun prin1-then-space x &optional stream
3prin1-then-space* is like 3prin1* except that output
is followed by a space.
.end_defun

.defun print x &optional stream
3print* is just like 3prin1* except that output
is preceeded by a carriage return and followed by a space.
2x* is returned.
.end_defun

.defun princ x &optional stream
3princ* is just like 3prin1* except that the
output is not slashified.
2x* is returned.
.end_defun

.defun tyo char &optional stream
3tyo* outputs the character 2char* to 2stream*.
.end_defun

.defun terpri &optional stream
3terpri* outputs a carriage return character to 3stream*.
.end_defun

	The 3format* function (see (format-fun)) is very useful for producing
nicely formatted text.  It can do anything any of the above functions
can do, and it makes it easy to produce good looking messages and such.
3format* can generate a string or output to a stream.

The 3grindef* function (see (grindef-fun)) is useful for formatting Lisp programs.

See also the 3with-output-to-string* special form ((with-output-to-string-fun)).

.defun stream-copy-until-eof from-stream to-stream &optional leader-size
3stream-copy-until-eof* inputs characters from 2from-stream*
and outputs them to 2to-stream*, until it reaches the end-of-file
on the 2from-stream*.  For example, if 3x* is bound to a stream
for a file opened for input, then 3(stream-copy-until-eof x terminal-io)*
will print the file on the console.

If 2from-stream* supports the 3:line-in* operation and 2to-stream* 
supports the 3:line-out* operation, then 3stream-copy-until-eof* will
use those operations instead of 3:tyi* and 3:tyo*, for greater
efficiency.  2leader-size*  will be passed as the argument to the
3:line-in* operation.
.end_defun

.defun beep &optional beep-type (stream 3terminal-io*)
This function is intended to attract the user's attention by causing
an audible beep, or flashing the screen, or something similar.  If
the stream supports the 3:beep* operation, then this function sends
it a 3:beep* message, passing 2type* along as an argument.  Otherwise
it just causes an audible beep on the terminal.
2type* is a keyword selecting among several different beeping noises.
The allowed types have not yet been defined; 2type* is currently ignored
and should always be 3nil*.  (The 3:beep* message is described
on (:beep-message).)
.end_defun

.defun cursorpos &rest args
This function exists primarily for Maclisp compatibility.  Usually it is
preferable to send the appropriate messages (see the window system
documentation).

3cursorpos* normally operates on the 3standard-output* stream;
however, if the last argument is a stream or 3t* (meaning 3terminal-io*)
then 3cursorpos* uses that stream and ignores it when doing the operations
described below.  Note that 3cursorpos* only works on streams
which are capable of these operations, for instance windows.
A stream is taken to be any argument which is not a number and not a symbol,
or a symbol other than 3nil* with a name more than one character long.

3(cursorpos) => (2line* . 2column*)*, the current
cursor position.

3(cursorpos 2line* 2column*)* moves the cursor to that position.
It returns 3t* if it succeeds and 3nil* if it doesn't.

3(cursorpos 2op*)* performs a special operation coded by 2op*,
and returns 3t* if it succeeds and 3nil* if it doesn't.
2op* is tested by string comparison, it is not a keyword symbol
and may be in any package.
.table 3 500 250 0 0
.item F
Moves one space to the right.
.item B
Moves one space to the left.
.item D
Moves one line down.
.item U
Moves one line up.
.item T
Homes up (moves to the top left corner).  Note that 3t* as the last
argument to 3cursorpos* is interpreted as a stream, so a stream 2must*
be specified if the 3T* operation is used.
.item Z
Home down (moves to the bottom left corner).
.item A
Advances to a fresh line.  See the 3:fresh-line* stream operation.
.item C
Clears the window.
.item E
Clear from the cursor to the end of the window.
.item L
Clear from the cursor to the end of the line.
.item K
Clear the character position at the cursor.
.item X
B then K.
.end_table
.end_defun

.defun exploden x
3exploden* returns a list of characters (as fixnums) which
are the characters that would be typed out by 3(princ 2x*)*
(i.e. the unslashified printed representation of 2x*).
.lisp
.exdent 96 Example:
(exploden '(+ /12 3)) => (50 53 40 61 62 40 63 51)
.end_lisp
.end_defun

.defun explodec x
3explodec* returns a list of characters represented by symbols
which are the characters that would be typed out by 
3(princ 2x*)* (i.e. the unslashified printed representation of 2x*).
.lisp
.exdent 96 Example:
(explodec '(+ /12 3)) => ( /( + /  /1 /2 /  /3 /) )
.end_lisp
(Note that there are slashified spaces in the above list.)
.end_defun

.defun explode x
3explode* returns a list of characters represented by symbols
which are the characters that would be typed out by 
3(prin1 2x*)* (i.e. the slashified printed representation of 2x*).
.lisp
.exdent 96 Example:
(explode '(+ /12 3)) => ( /( + /  // /1 /2 /  /3 /) )
.end_lisp
(Note that there are slashified spaces in the above list.)
.end_defun

.defun flatsize x
3flatsize* returns the number of characters in the slashified printed representation
of 2x*.
.end_defun

.defun flatc x
3flatc* returns the number of characters in the unslashified printed representation
of 2x*.
.end_defun

.page
@c section on I/O streams
.insert lmman;stream >



@c sections on FORMAT and OUTPUT
.insert lmman;fd.fio >


@section "Rubout Handling"
.setq rubout-handler section-page
.setq rubout-handling section-page
.cindex rubout handler

The rubout handler is a feature of all interactive streams, that is, streams
which connect to terminals.  Its purpose is to allow the user to edit
minor mistakes in typein.  At the same time, it is not supposed to
get in the way; input is to be seen by Lisp as soon as a syntactically complete
form has been typed.  The definition of "syntactically complete form"
depends on the function that is reading from the stream; for 3read*, it
is a Lisp expression.

Some interactive streams ("editing Lisp listeners") have a rubout handler
which allows input to be edited with the full power of the Zwei editor.
Other streams have a simple rubout handler which just allows rubbing out
of single characters, and a few simple commands like clearing the screen
and erasing the entire input typed so far.  This section describes the
general protocol used to deal with any rubout handler, and it also discusses
the simple rubout handler and what commands it deals with.

The tricky thing about the rubout handler is the need for it to figure
out when you are all done.  The idea of a rubout handler is that you can
type in characters, and they are saved up in a buffer so that if you
change your mind, you can rub them out and type different characters.
However, at some point, the rubout handler has to decide that the time
has come to stop putting characters into the buffer, and let the
function, such as 3read*, start processing the characters.  This is
called "activating".  The right time to activate depends on the function
calling the rubout handler, and may be very complicated (if the function
is 3read*, figuring out when one Lisp expression has been typed
requires knowledge of all the various printed representations, what all
currently-defined reader macros do, and so on).  Rubout handlers should
not have to know how to parse the characters in the buffer to
figure out what the caller is reading and when to activate; only the
caller should have to know this.  The rubout handler interface is
organized so that the calling function can do all the parsing, while the
rubout handler does all the handling of rubouts, and the two are kept
completely separate.

The basic way that the rubout handler works is as follows.  When
an input function that reads an "object", such as 3read* or 3readline*
(but not 3tyi*), is called to read from a stream which has 3:rubout-handler*
in its 3:which-operations* list, that function "enters" the rubout handler.
It then goes ahead 3:tyi*'ing characters from the stream.  Because control
is inside the rubout handler, the stream will echo these characters so the user
can see what he is typing.  (Normally echoing is considered to be a higher-level
function outside of the province of streams, but when the higher-level function
tells the stream to enter the rubout handler it is also handing it the responsibility
for echoing).  The rubout handler is also saving all these characters in a buffer,
for reasons disclosed in the following paragraph.
When the function, 3read* or whatever, decides it has enough
input, it returns and control "leaves" the rubout handler.  That was the easy case.

If the user types a rubout, a 3*throw* is done, out of all recursive levels
of 3read*, reader macros, and so forth, back to the point where the rubout
handler was entered.  Also the rubout is echoed by erasing from the screen
the character which was rubbed out.  Now the 3read* is tried over again,
re-reading all the characters which had been typed and not rubbed out, not echoing
them this time.  When the saved characters have been exhausted, additional input is read
from the user in the usual fashion.

The effect of this is a complete separation of the functions of rubout
handling and parsing, while at the same time mingling the execution of
these two functions in such a way that input is always "activated" at
just the right time.  It does mean that the parsing function (in the
usual case, 3read* and all macro-character definitions) must be
prepared to be thrown through at any time and should not have
non-trivial side-effects, since it may be called multiple times.

If an error occurs while inside the rubout handler, the error message is printed
and then additional characters are read.  When the user types a rubout,
it rubs out the error message as well as the character that caused the error.
The user can then proceed to type the corrected expression;
the input will be reparsed from the beginning in the usual fashion.

The simple rubout handler also recognizes the special characters Clear-Input, Clear-Screen,
and Delete.  (These are Clear, Form, and VT on old keyboards.)
Clear-Screen clears the screen and echoes back the buffered input.  Clear-Input is like
hitting enough rubouts to flush all the buffered input.  Delete is like Clear-Screen
in that it echoes back the input, but it does not clear the screen.  [It should be
moved to a different key, shouldn't it?]

If a character with control shifts (Control, Meta, Super, or Hyper) is
typed at a rubout handler that does not support the full set of editing
commands, such as the simple rubout handler, it beeps and ignores the
character.  These characters are reserved in this context for editing
use.  The rubout handler based on the Zwei editor interprets control
characters in the usual Zwei way: as editing commands, allowing you to
edit your buffered input.  When not inside the rubout handler, and when
typing at a program that uses control characters for its own purposes,
control characters are treated the same as ordinary characters.

The following explanation tells you how to write your own function
that invokes the rubout handler.  The functions 3read* and 3readline*
both work this way.  You should use the 3readline1* example, below,
as a template for writing your own function.

The way that the rubout handler is entered is complicated, since a
3*catch* must be established.  The variable 3rubout-handler* is
non-3nil* if the current process is inside the rubout handler.  This is
used to handle recursive calls to 3read* from inside reader macros and the
like.  If 3rubout-handler* is 3nil*, and the stream being read from
has 3:rubout-handler* in its 3:which-operations*, functions such as
3read* send the 3:rubout-handler* message to the stream with arguments
of a list of options, the function, and its arguments.  The rubout handler
initializes itself and establishes its 3*catch*, then calls back to the
specified function with 3rubout-handler* bound to 3t*.  User-written input
reading functions should follow this same protocol, to get the same input
editing benefits as 3read* and 3readline*.

.defvar rubout-handler
3t* if control is inside the rubout handler in this process.
.end_defvar

As an example of how to use the rubout handler, here is a simplified
version of the 3readline* function.  It doesn't bother about end-of-file
handling, use of 3:line-in* for efficiency, etc.
.lisp
(defun readline1 (stream)
  ;; If stream does rubout handling, get inside rubout handler
  (cond ((and (not rubout-handler)
	      (memq ':rubout-handler
		    (funcall stream ':which-operations)))
	 (funcall stream ':rubout-handler '() #'readline1 stream))
	;; Accumulate characters until return
	(t (do ((ch (funcall stream ':tyi)
		    (funcall stream ':tyi))
		(len 100)
		(string (make-array 100 ':type 'art-string))
		(idx 0))
	       ((or (null ch) (= ch #\cr))
		(adjust-array-size string idx)
		string)
	     (if (= idx len)
		 (adjust-array-size string (setq len (+ len 40))))
	     (aset ch string idx)
	     (setq idx (1+ idx))))))
.end_lisp

The first argument to the 3:rubout-handler* message is a list of
options.  The second argument is the function that the rubout handler
should call to do the reading, and the rest of the arguments are passed
to that function.  Note that in the example above, 3readline1* is
sending the 3:rubout-handler* message passing itself as the function,
and its own arguments as the arguments.  This is the usual thing to do.
It isn't passing any options.  The returned values of the message are
normally the returned values of the function (except sometimes when the
3:full-rubout* option is used; see below).

Each option in the list of options given as the first argument to the 3:rubout-handler*
message consists of a list whose first element is a
keyword and whose remaining elements are "arguments" to that keyword.  Note
that this is not the same format as the arguments to a typical function
that takes keyword arguments; rather this is an a-list of options.
The standard options are:
.table 3 500
.item (:full-rubout 2val*)
If the user rubs out all the characters he typed, then control will be returned
from the rubout handler immediately.  Two values are returned; the first is
3nil* and the second is 2val*.  (if the user doesn't rub out all the
characters, then the rubout handler propagates multiple values back
from the function that it calls, as usual.)  In the absence of this option, the rubout
handler would simply wait for more characters to be typed in, and would ignore
any additional rubouts.

.item (:pass-through 2char1* 2char2*...)
The characters 2char1*, 2char2*, etc. are not to be treated as special by
the rubout handler.  You can use this to override the default processing of
characters such as Clear-Input and to receive control characters.  Any function
that reads input and uses non-printing characters for anything should list them
in a 3:pass-through* option.  This way, if input is being rubout-handled by
the editor, those non-printing characters will get their desired meaning rather
than their meaning as editor commands.

.item (:prompt 2function*)
.item1 (:reprompt 2function*)
When it is time for the user to be prompted, 2function* is called with
two arguments.  The first is a stream it may print on; the second is the
character which caused the need for prompting, e.g. 3#\clear-input*
or 3#\clear-screen*, or 3nil* if the rubout handler was just entered.

The difference between 3:prompt* and 3:reprompt* is that the latter does
not call the prompt function when the rubout handler is first entered, but only
when the input is redisplayed (e.g. after a screen clear).  If both options
are specified then 3:reprompt* overrides 3:prompt* except when the rubout
handler is first entered.

.item (:initial-input 2string*)
Pretends that the user typed 2string*.  When the rubout handler is entered,
2string* is typed out.  The user can add more characters to it or rubout
characters from it.

.setq :do-not-echo-option page

.item (:do-not-echo 2char-1* 2char-2*...)
The characters 2char-1*, 2char-2*, etc. are not to be echoed when
the user types them.  The comparison is done with 3=*, not
3char-equal*.  You can use this to suppress echoing of the 3return*
character that terminated a 3readline*, for example.
.end_table


@section The :read and :print Stream Operations

A stream can specially handle the reading and printing of objects by
handling the 3:read* and 3:print* stream operations.  Note that these
operations are optional and most streams do not support them.

If the 3read* function is given a stream which has 3:read* in its
which-operations, then instead of reading in the normal way it sends the
3:read* message to the stream with one argument, 3read*'s
2eof-option* if it had one or a magic internal marker if it didn't.
Whatever the stream returns is what 3read* returns.
If the stream wants to implement the 3:read* operation by internally
calling 3read*, it must use a different stream which does not have
3:read* in its which-operations.

If a stream has 3:print* in its which-operations, it may intercept all
object printing operations, including those due to the 3print*, 3prin1*,
and 3princ* functions, those due to 3format*, and those used internally,
for instance in printing the elements of a list.  The stream receives the
3:print* message with three arguments: the object being printed, the
2prindepth* (for comparison against the 3prinlevel* variable), and
2slashify-p* (3t* for 3prin1*, 3nil* for 3princ*).  If the stream
returns 3nil*, then normal printing takes place as usual.  If the stream
returns non-3nil*, then 3print* does nothing; the stream is assumed to have
output an appropriate printed representation for the object.
The two following functions are useful in this connection; however, they are
in the 3system-internals* package and may be changed without much notice.

.defun si:print-object object prindepth slashify-p stream &optional which-operations
Outputs the printed-representation of 2object* to 2stream*, as modified
by 2prindepth* and 2slashify-p*.  This is the internal guts of the Lisp printer.
When a stream's 3:print* handler calls this function, it should supply
the list 3(:string-out)* for 2which-operations*, to prevent itself from
being called recursively.  Or it can supply 3nil* if it does not want to
receive 3:string-out* messages.

If you want to customize the behavior of all printing of Lisp objects,
advising (see (advise)) this function is the way to do it.  See
(customizing-the-printer).
.end_defun

.defun si:print-list list prindepth slashify-p stream which-operations
This is the part of the Lisp printer that prints lists.  A stream's
3:print* handler can call this function, passing along its own arguments
and its own which-operations, to arrange for a list to be printed the
normal way and the stream's 3:print* hook to get a chance at each of the
list's elements.
.end_defun

@section "Accessing Files"
.setq file-stream section-page
.cindex file

The Lisp Machine can access files on a variety of remote file servers,
which are typically (but not necessarily) accessed through the Chaosnet,
as well as accessing files on the Lisp Machine itself, if the machine
has its its own file system.  This section tells you how to get a stream
which reads or writes a given file, and what the device-dependent
operations on that stream are.  Files are named with 2pathnames*.
Since pathnames are quite complex they have their own chapter; see
(pathname).

.defspec with-open-file (stream pathname options...) body...
Evaluates the 2body* forms with the variable 2stream* bound to a stream which
reads or writes the file named by the value of 2pathname*.  The 2options*
forms evaluate to the file-opening options to be used; see (file-opening-options).

When control leaves the body, either normally or abnormally (via 3*throw*),
the file is closed.  If a new output file is being written, and control leaves
abnormally, the file is aborted and it is as if it were never written.  Because
it always closes the file, even when an error exit is taken, 3with-open-file*
is preferred over 3open*.  Opening a large number of files and forgetting to
close them tends to break some remote file servers, ITS's for example.

2pathname* is the name of the file to be opened; it can be a pathname object,
a string, a symbol, or a Maclisp-compatible "namelist".  It can be anything
acceptable to 3fs:parse-pathname*; the complete rules for parsing pathnames
are explained in (pathname).

If an error, such as file not found, occurs the user is asked to supply an
alternate pathname, unless this is overridden by 2options*.
At that point he can quit out or enter the error handler, if the error was not
due to a misspelled pathname.
.end_defspec

.defun open pathname &rest options
Returns a stream which is connected to the specified file.  Unlike
Maclisp, the 3open* function only creates streams for 2files*;
streams for other devices are created by other functions.  The 2pathname*
and 2options* arguments are the same as in 3with-open-file*; see above.
If an error, such as file not found, occurs, the user is asked to supply an
alternate pathname, unless this is overridden by 2options*.

When the caller is finished with the stream, it should close the file by using
the 3:close* operation or the 3close* function.  The 3with-open-file*
special form does this automatically, and so is usually preferred.  3open*
should only be used when the control structure of the program necessitates opening
and closing of a file in some way more complex than the simple way provided
by 3with-open-file*.  Any program that uses 3open* should set up
3unwind-protect* handlers (see (unwind-protect-fun)) to close its files
in the event of an abnormal exit.
.end_defun

.defun close stream
The 3close* function simply sends the 3:close* message to 2stream*.
.end_defun

.defun renamef file new-name &optional (error-p 3t*)
2file* can be a pathname or a stream which is open to a file.  The specified
file is renamed to 2new-name* (a pathname).  If 2error-p* is 3t*, then
if an error occurs it will be signalled as a Lisp error.  If 2error-p* is 3nil*
and an error occurs, the error message will be returned as a string, otherwise
3t* will be returned.
.end_defun

.defun deletef file &optional (error-p 3t*)
2file* can be a pathname or a stream which is open to a file.  The specified
file is deleted.  If 2error-p* is 3t*, then
if an error occurs it will be signalled as a Lisp error.  If 2error-p* is 3nil*
and an error occurs, the error message will be returned as a string, otherwise
3t* will be returned.
.end_defun

.defun probef pathname
Returns 3nil* if there is no file named 2pathname*, otherwise returns a
pathname which is the true name of the file, which can be different from
2pathname* because of file links, version numbers, etc.
.end_defun

.defun fs:close-all-files
Closes all open files.  This is useful when a program has run wild opening
files and not closing them.  It closes all the files in 3:abort* mode
(see (close-message)), which means that files open for output will be
deleted.  Using this function is dangerous, because you may close files
out from under various programs like Zmacs and Zmail; only use it if you
have to and if you feel that you know what you're doing.
.end_defun

.setq file-opening-options page
The 2options* used when opening a file are normally alternating keywords and
values, like any other function that takes keyword arguments.  In addition,
for compatibility with the Maclisp 3open* function, if only a single option
is specified it is either a keyword or a list of keywords (not alternating with
values).

The file-opening options control things like whether the stream is for input
from a existing file or output to a new file, whether the file is text or binary, etc.

The following option keywords are standardly recognized; additional keywords
can be implemented by particular file system hosts.

[Are all these keywords supported by all file systems?]

.table 3
.item :direction
'kindex :direction open
The possible values are 3:input* (the default), 3:output*, and 3nil*.
The first two should be self-explanatory.
3nil* means that this is a "probe" opening; no data are to be transferred,
the file is only being opened to access or change its properties.

.item :characters
'kindex :characters open
The possible values are 3t* (the default), 3nil*, which means that the
file is a binary file, and 3:default*, which means that the file system should
decide whether the file contains characters or binary data and open it in the
appropriate mode.

.item :byte-size
'kindex :byte-size open
The possible values are 3nil* (the default), a number, which is the number
of bits per byte, and 3:default*, which means that the file system should
choose the byte size based on attributes of the file.  If the file is being
opened as characters, 3nil* selects the appropriate system-dependent byte
size for text files; it is usually not useful to use a different byte size.
If the file is being opened as binary, 3nil* selects the default byte size
of 16 bits.

.item :error
'kindex :error open
The possible values are 3t* (the default) and 3nil*.  If an error occurs,
this option controls whether the error is signalled to the user (3t*) or
a string containing an error message is returned instead of a stream (3nil*).

.item :new-file
'kindex :new-file open
If the value is 3t*, the file system is allowed to create a new file.
If the value is 3nil*, an existing file must be opened.
The default is 3t* if 3:direction* 3:output* is specified, otherwise 3nil*.

.item :new-version
'kindex :new-version open
This controls what happens if the version field of the pathname being opened
is 3:newest*.  If the value is 3nil*, the newest existing version of the
file is found.  If the value is 3t* (the default when 3:direction* 3:output*
is specified), then the next-higher-numbered version of the file is to be created.

.item :old-file
'kindex :old-file open
This keyword controls what happens if a file with the specified name already
exists, when 3:direction* 3:output* is specified.  Possible values are:
.table 3
.item nil 1or3 :replace
The existing file is to be replaced when the new file is closed (providing
3:abort* is not specified when closing.)  This is the default
if 3:new-file* is specified as, or defaults to, 3t*.

.item t 1or3 :rewrite
The existing file is to be clobbered with the new data.  This is the default
if 3:new-file* is specified as 3nil*.

.item :append
Append new data to the end of the file.

.item :error
Signal an error (file already exists).

.item :rename
The old file is to be renamed to some other name, to get it out of the way.

.item :rename-and-delete
The old file is renamed, and deleted when the new file is closed.

.item :new-version
Create a new version, instead of opening the version number specified in the pathname.
.end_table

.item :inhibit-links
'kindex :inhibit-links open
The default is 3nil*.  If the pathname is the name of a file-system link,
and this option is 3t*, the link itself is opened rather than the file it
points to.  This is only useful with probe openings, since links contain
no data.

.item :deleted
'kindex :deleted open
The default is 3nil*.  If 3t* is specified, and the file system has the
concept of deleted but not expunged files, it is possible to open a deleted
file.  Otherwise deleted files are invisible.

.item :temporary
'kindex :temporary open
The default is 3nil*.  If 3t* is specified, the file is marked as
temporary, if the file system has that concept.

.item :preserve-dates
'kindex :preserve-dates open
The default is 3nil*.  If 3t* is specified, the file's reference and
modification dates are not updated.

.item :flavor
'kindex :flavor open
This controls the kind of file to be opened.  The default is 3nil*, a
normal file.  Other possible values are 3:directory* and 3:link*.

.item :link-to
'kindex :link-to open
When creating a file with 3:flavor* 3:link*, this keyword must be
specified; its value is a pathname which becomes the target of the link.

.item :estimated-size
'kindex :estimated-size open
The value may be 3nil* (the default), which means there is no estimated
size, or a number of bytes.  Some file systems use this to optimize disk
allocation.

.item :physical-volume
'kindex :physical-volume open
The value may be 3nil* (the default), or a string which is the name
of a physical volume on which the file is to be stored.  This is not meaningful
for all file systems.

.item :logical-volume
'kindex :logical-volume open
The value may be 3nil* (the default), or a string which is the name
of a logical volume on which the file is to be stored.  This is not meaningful
for all file systems.

.item :incremental-update
'kindex :incremental-update open
The value may be 3nil* (the default), or 3t* to cause the file system
to take extra pains to write data onto the disk more often.

.item :super-image
'kindex :super-image open
The value may be 3nil* (the default), or 3t* which
disables the special treatment of rubout in ascii files.  Normally rubout is
an escape which causes the following character to be interpreted specially,
allowing all characters from 0 through 376 to be stored.  This applies to
pdp-10 file servers only.

.item :raw
'kindex :raw open
The value may be 3nil* (the default), or 3t* which
disables all character set translation in ascii files.  This applies to pdp-10
file servers only.

.end_table

In the Maclisp compatibility mode, there is only one 2option*, and it
is either a symbol or a list of symbols.  These symbols are recognized no
matter what package they are in, since Maclisp does not have packages.
The following symbols are recognized:
.table 3
.item in, read
Select opening for input (the default).

.item out, write, print
Select opening for output; a new file is to be created.

.item binary, fixnum
Select binary mode, otherwise character mode is used.  Note that fixnum mode
uses 16-bit binary words and is not compatible with Maclisp fixnum mode which
uses 36-bit words.  On the pdp-10, fixnum files are stored with two 16-bit words
per pdp-10 word, left-justified and in pdp-10 byte order.

.item character, ascii
The opposite of fixnum.  This is the default.

.item single, block
Ignored for compatibility with the Maclisp 3open* function.

.item byte-size
Must be followed by a number in the options list, and must be used in combination
with 3fixnum*.  The number is the number of bits per byte, which can be from
1 to 16.  On a pdp-10 file server these bytes will be packed into words in the
standard way defined by the 3ILDB* instruction.  The 3:tyi* stream operation
will (of course) return the bytes one at a time.

.item probe, error, noerror, raw, super-image, deleted, temporary
These are not available in Maclisp.  The corresponding keywords in the
normal form of file-opening options are preferred over these.

.end_table


@subsection Loading Files
.cindex loading
.cindex program source file

To 2load* a file is to read through the file, evaluating each form
in it.  Programs are typically stored in files; the expressions in the file are mostly
special forms such as 3defun* and 3defvar* which define the functions and
variables of the program.

Loading a compiled (or QFASL) file is similar, except that the file does not
contain text but rather pre-digested expressions created by the
compiler which can be loaded more quickly.

These functions are for loading single files.  There is a system for keeping track
of programs which consist of more than one file; for further information refer
to (system-system).

.defun load pathname &optional pkg nonexistent-ok dont-set-default
This function loads the file named by 2pathname* into the Lisp environment.
If the file is a QFASL file, it calls 3fasload*; otherwise
it calls 3readfile*.  Normally the file is read into its "home" package,
but if 2pkg* is supplied it is the package in which the file is to be read.
2pkg* can be either a package or the name of a package as a string or a symbol.
If 2pkg* is not specified, 3load* prints a message saying what package
the file is being loaded into.
If 2nonexistent-ok* is specified, 3load* just returns if the file cannot
be opened.

2pathname* can be anything acceptable to 3fs:parse-pathname*;
pathnames and the complete rules for parsing them are explained
in (pathname).  2pathname* is defaulted from 3fs:load-pathname-defaults*
(see (fs:load-pathname-defaults-var)), which is the set
of defaults used by 3load*, 3qc-file*, and similar functions.
Normally 3load* updates the pathname defaults from 2pathname*,
but if 2dont-set-default* is specified this is suppressed.

If 2pathname* contains an FN1 but no FN2, 3load* will first look for
the file with an FN2 of QFASL, then it will look for an FN2 of >.  For non-ITS
file systems, this generalizes to:  if 2pathname* specifies a type and/or a version,
3load* loads that file.  Otherwise it first looks for a type-QFASL file, then
a type-LISP file, in both cases looking for the newest version.
.end_defun

.defun readfile pathname &optional pkg no-msg-p
3readfile* is the version of 3load* for text files.  It reads and evaluates
each expression in the file.  As with 3load*, 2pkg* can specify what package
to read the file into.  Unless 2no-msg-p* is 3t*, a message is printed
indicating what file is being read into what package.  The defaulting of
2pathname* is the same as in 3load*.
.end_defun

.defun fasload pathname &optional pkg no-msg-p
3fasload* is the version of 3load* for QFASL files.  It defines
functions and performs other actions as directed by the specifications
inserted in the file by the compiler.  As with 3load*, 2pkg* can
specify what package to read the file into.  Unless 2no-msg-p* is
3t*, a message is printed indicating what file is being read into what
package.  The defaulting of 2pathname* is the same as in 3load*.
.end_defun


@subsection File Property Lists
.cindex file property list
.cindex property list, file
.setq file-property-list section-page

Any text file can contain a "property list" which specifies several attributes
of the file.  The above loading functions, the compiler, and the editor look
at this property list.  File property lists are especially useful in program
source files, i.e.  a file that is intended to be loaded (or compiled and
then loaded).

If the first non-blank line in the file contains the three characters 7"-*-"*,
some text, and 7"-*-"* again, the text is recognized as the file's property list.
Each property consists of the property name, a colon, and the property value.
If there is more than one property they are separated by semicolons.  An example
of such a property list is:
.lisp
; -*- Mode:Lisp; Package:Cellophane; Base:10 -*-
.end_lisp
The semicolon makes this line look like a comment rather than a Lisp expression.
This defines three properties: mode, package, and base.
Another example is:
.lisp
.c This is part of the Lisp machine manual.  -*- Mode:Bolio -*-
.end_lisp

A property name is made up of letters, numbers, and otherwise-undefined
punctuation characters such as hyphens.  A property value can be such a
name, or a decimal number, or several such items separated by commas.
Spaces may be used freely to separate tokens.  Upper and lower-case
letters are not distinguished.  There is 2no* quoting convention for
special characters such as colons and semicolons.  Thus file property
lists are similar in spirit to Lisp property lists.

The file property list format actually has nothing to do with Lisp; it
is just a convention for placing some information into a file that is
easy for a program to interpret.  The Emacs editor on the pdp-10 knows
how to interpret these property lists (primarily in order to look at the
3Mode* property).

Within the Lisp Machine, there exists a parser for file property lists
that creates some Lisp data structure that corresponds to the file
property list.  When a file property list is read in and given
to the parser (the 3fs:file-read-property-list* function, see below),
it is converted
into Lisp objects as follows:  Property names are interpreted as Lisp
symbols, and interned on the keyword package.  Numbers are interpreted
as Lisp fixnums, and are read in decimal.
If a property value contains any commas,
then the commas separate several expressions which are formed into a
list.

When a file is edited, loaded, or compiled, its file property list is
read in and the properties are stored on the property list of the
generic pathname (see (generic-pathname)) for that file, where they can
be retrieved with the 3:get* and 3:plist* messages.  So the way you
examine the properties of a file is usually to use messages to a
pathname object that represents the generic pathname of a file.  Note
that there other properties there, too.  The function
3fs:file-read-property-list* (see below)
reads the file property list of a file and sets up the properties on the
generic pathname; editing, loading, or compiling a file will call
this function, but you can call it yourself if you want to examine
the properties of an arbitrary file.

If the property list text contains no colons, it is an old Emacs format, containing only
the value of the 3Mode* property.

The following are some of the property names allowed and what they mean.
.table
.item Mode
The editor major mode to be used when editing this file.  This is typically
the name of the language in which the file is written.  The most common values
are Lisp and Text.

.item Package
The name of the package into which the file is to be loaded.  See (package)
for information about packages.

.item Base
The number base in which the file is written.  This affects both 3ibase*
and 3base*, since it is confusing to have the input and output bases be different.
The most common values are 8 and 10.

.item Lowercase
If the property value is not 3nil*, the file is written in lower-case letters
and the editor does not translate to upper case.  (The editor does not translate
to upper case by default unless the user selects "Electric Shift Lock" mode.)

.item Fonts
The property value is a list of font names, separated by commas.  The editor
uses this for files which are written in more than one font.

.item Backspace
If the property value is not 3nil*, the file may contain backspaces which cause
characters to overprint on each other.  The default is to disallow overprinting
and display backspaces the way other special function keys are displayed.  This
default is to prevent the confusion that can be engendered by overstruck text.

.item Patch-File
If the property value is not 3nil*, the file is a "patch file".  When it is loaded
the system will not complain about function redefinitions.  Furthermore, the remembered
source file names for functions defined in this file will not be changed to this file,
but will be left as whatever file the function came from originally.  In a patch
file, the 3defvar* special-form turns into 3defconst*; thus patch files will
always reinitialize variables.

.end_table

You are free to define additional file properties of your own.  Howver,
you should choose names that are different from all the names above, and
from any names likely to be defined by anybody else's programs, to avoid
accidental name conflicts.

The following function is the parser for file property lists.

.defun fs:file-read-property-list pathname stream
2pathname* should be a pathname object (2not* a string or namelist,
but an actual pathname); usually it is a generic pathname (see
(generic-pathname)).  2stream* should be a stream that has been
opened and is pointing to the beginning of the file whose file property
list is to be parsed.  This function reads from the stream until it gets
the file property list, parses it, puts corresponding properties onto
the property list of 2pathname*, and finally sets the stream back to
the beginning of the file by using the 3:set-pointer* file
stream operation (see (:set-pointer-message)).
.end_defun

[Is the above function really supposed to be called FS:READ-SYNTAX-PLIST?]

The fundamental way that programs in the Lisp Machine react to the
presence of properties on a file's file property list is to examine the
property list in the generic pathname.  However, there is another way
that is more convenient for some applications.  File properties can
cause special variables to be bound whenever Lisp expressions are being
read from the file--when the file is being loaded, when it is being
compiled, when it is being read from by the editor, and when its QFASL
file is being loaded.  This is how the Package and Base properties work.
You can also deal with properties this way, by using the following function:

.defun fs:file-property-bindings pathname
This function examines the property list of 2pathname*, and finds all
those property names that have 3fs:file-property-bindings* properties.
Each such property name specifies a set of variables to bind, and
a set of values to which to bind them.  This function returns two values:
a list of all the variables, and a list of all the corresponding values.
Usually you use this function by calling it on a generic pathname
what has had 3fs:file-read-property-list* done on it, and then
you use the two returned values as the first two subforms to a 3progv*
special form (see (progv-fun)).  Inside the body of the 3progv* the
specified bindings will be in effect.

Usually 2pathname* is a generic pathname.  It can also be a locative,
in which case it is interpreted to be the property list itself.

Of the standard property names, the following ones have
3fs:file-property-bindings*, with the following effects.  3Package*
binds the variable 3package* (see (package-var)) to the package.
3Base* binds the variables 3base* (see (base-var)) and 3ibase*
(see (ibase-var)) to the value.  3Patch-file* binds
3fs:this-is-a-patch-file* to the value.

Any properties whose names do not have a 3fs:file-property-bindings*
property are ignored completely.

You can also add your own property names that affect bindings.  If
an indicator symbol has an 3fs:file-property-bindings* property, the
value of that property is a function which is called when a file with a
file property of that name is going to be read from.  The function is
given three arguments: the file pathname, the property name, and the
property value.  It must return two values: a list of variables to be
bound and a list of values to bind them to.  The function for the
3Base* keyword could have been defined by:
.lisp
(defun (:base file-property-bindings) (file ignore bse)
  (if (not (and (typep bse 'fixnum)
	 (> bse 1)
	 (< bse 37.)))
      (ferror nil "File ~A has an illegal -*- Base:~s -*-"
	          file bse))
  (values (list 'base 'ibase) (list bse bse)))
.end_lisp
.end_defun

@subsection File Stream Operations
.setq file-stream-operations-section section-page

The following messages may be sent to file streams, in addition to the normal I/O
messages which work on all streams.  Note that several of these messages are
useful to send to a file stream which has been closed.  Some of these messages
use pathnames; refer to (pathname) for an explanation of pathnames.

.defmessage :pathname
Returns the pathname that was opened to get this stream.  This may not be
identical to the argument to 3open*, since missing components will have been
filled in from defaults, and the pathname may have been replaced wholesale if
an error occurred in the attempt to open the original pathname.
.end_defmessage

.defmessage :truename
Returns the pathname of the file actually open on this stream.  This can be
different from what 3:pathname* returns because of file links, logical
devices, mapping of "newest" version to a particular version number, etc.  For
an output stream the truename is not meaningful until after the stream has been
closed, at least when the file server is an ITS.
.end_defmessage

.defmessage :qfaslp
Returns 3t* if the file has a magic flag at the front that says it is a QFASL file,
3nil* if it is an ordinary file.
.end_defmessage

.defmessage :length
Returns the length of the file, in bytes or characters.  For text files on
pdp-10 file servers, this is the number of pdp-10 characters, not Lisp Machine
characters.  The numbers are different because of character-set translation;
see (character-set-differences) for a full explanation.
For an output stream the length is not meaningful until after the stream has
been closed, at least when the file server is an ITS.
.end_defmessage

.defmessage :creation-date
Returns the creation date of the file, as a number which is a universal time.
See the chapter on the time package ((time)).
.end_defmessage

.defmessage :info
Returns a string which contains the version number and creation date of the file.
This can be used to tell if the file has been modified between two 3open*s.
For an output stream the info is not meaningful until after the stream has
been closed, at least when the file server is an ITS.
.end_defmessage

@c .defmessage :status
@c Returns the status of the file stream.  This usually 3:open* or 3:closed*
@c (which should be self-explanatory).  3:eof* means that the file is open but
@c no more data are available.  There are other states associated with error handling.
@c [Maybe this shouldn't be documented.]
@c .end_defmessage

.defmessage :set-byte-size new-byte-size
This is only allowed on binary ("fixnum mode") file streams.  The byte size
can be changed to any number of bits from 1 to 16.
.end_defmessage

.defmessage :delete &optional (error-p 3t*)
Deletes the file open on this stream.  For the meaning of 2error-p*, see the 3deletef*
function.  The file doesn't really go away until the stream is closed.
.end_defmessage

.defmessage :rename new-name &optional (error-p 3t*)
Renames the file open on this stream.  For the meaning of 2error-p*, see the 3renamef*
function.
.end_defmessage

@c .defmessage :command mark-p command &rest strings
@c [Should this be documented?]
@c .end_defmessage
@c 
@c .defmessage :continue
@c [Should this be documented?]
@c .end_defmessage

.nopara
File output streams implement the 3:finish* and 3:force-output* messages.


@section Accessing Directories

To understand the functions in this section, it helps to have read the following
chapter, on 2pathnames*.

.cindex file directory
.cindex directory (of files)

.defun fs:directory-list pathname &rest options
Finds all the files that match 2pathname* and returns a list with one
element for each file.  Each element is a list whose car is the pathname
of the file and whose cdr is a list of the properties of the file; thus the element
is a "disembodied" property list and 3get* may be used to access the file's
properties.  The car of one element is 3nil*; the properties in this element
are properties of the file system as a whole rather than of a specific file.

The matching is done using both host-independent and host-dependent
conventions.  Any component of 2pathname* which is 3:wild* matches
anything; all files that match the remaining components of 2pathname*
will be listed, regardless of their value for the wild component.  In addition,
there is host-dependent matching.  Typically this uses the asterisk
character (3**) as a wild-card character.  A pathname component that
consists of just a 3** matches any value of that component (the same as
3:wild*).  A pathname component that contains 3** and other characters
matches any character (on ITS) or any string of characters (on TOPS-20) in
the starred positions and requires the specified characters otherwise.
Other hosts will follow similar but not necessarily identical conventions.

The 2options* are keywords which modify the operation.  The following options
are currently defined:
.table 3
.item :noerror
'kindex :noerror fs:directory-list
If a file-system error (such as no such directory) occurs during the operation,
normally an error will be signalled and the user will be asked to supply a new pathname.
However, if 3:noerror* is specified then in the event of an error
a string describing the error will be returned as the result of 3fs:directory-list*.
This is identical to the 3:noerror* option to 3open*.

.item :deleted
'kindex :deleted fs:directory-list
This is for TOPS-20 file servers.  It specifies that deleted (but not yet expunged)
files are to be included in the directory listing.
.end_table

The properties that may appear in the list of property lists returned by
3fs:directory-list* are host-dependent to some extent.  The following
properties are those that are defined for both ITS and TOPS-20 file servers.  This set of
properties is likely to be extended or changed in the future.
.table 3
.item :length-in-bytes
The length of the file expressed in terms of the basic units in which it is written
(characters in the case of a text file).
.item :byte-size
The number of bits in one of those units.
.item :length-in-blocks
The length of the file in terms of the file system's unit of storage allocation.
.item :block-size
The number of bits in one of those units.
.item :creation-date
The date the file was created, as a universal time.  See (time).
.item :reference-date
The most recent date that the file was used, as a universal time.
.item :author
The name of the person who created the file, as a string.
.item :not-backed-up
3t* if the file exists only on disk, 3nil* if it has been backed up on magnetic tape.

@c These are for ITS only
@c .item :dont-reap
@c .item :physical-volume
@c .item :link-to
@c .item :physical-volume-free-blocks

@c These are TOPS-20 only
@c .item :temporary
@c .item :deleted
@c .item :directory
@c .item :dont-dump
@c .item :offline
@c .item :dont-delete
@c .item :protection
@c .item :generation-retention-count
@c .item :account
.end_table
.end_defun

.defun fs:change-file-properties pathname error-p &rest properties
Some of the properties of a file may be changed; for instance, its creation
date or its author.  Exactly which properties may be changed depends on the
host file system; a list of the changeable property names is the 3:settable-properties*
property of the file system as a whole, returned by 3fs:directory-list*
as explained above.

3fs:change-file-properties* changes one or more properties of a file.
2pathname* names the file.  The 2properties* arguments are alternating
keywords and values.  The 2error-p* argument is the same as with 3renamef*;
if an error occurs and it is 3nil* a string describing the error will be
returned; if it is 3t* a Lisp error will be signalled.  If no error occurs,
3fs:change-file-properties* returns 3t*.
.end_defun

.defun fs:file-properties pathname &optional (error-p 3t*)
Returns a disembodied property list for a single file (compare this to
3fs:directory-list*).  The car of the returned list is the truename of
the file and the cdr is an alternating list of indicators and values.
The 2error-p* argument is the same as with 3renamef*;
if an error occurs and it is 3nil* a string describing the error will be
returned; if it is 3t* (the default) a Lisp error will be signalled.
.end_defun

.cindex filename completion
.cindex completion (of file names)

.defun fs:complete-pathname defaults string type version &rest options
2string* is a partially-specified file name.  (Presumably it was typed in by a user
and terminated with the altmode key or the 3END* key to request completion.)
3fs:complete-pathname* looks in the file system on the appropriate host and
returns a new, possibly more specific string.  Any unambiguous abbreviations
are expanded out in a host-dependent fashion.

2defaults*, 2type*, and 2version* are the arguments that will be given to
3fs:merge-pathname-defaults* (see (fs:merge-pathname-defaults-fun)) when the
user's input is eventually parsed and defaulted.

2options* are keywords (without following values) which control how the
completion will be performed.  The following option keywords are allowed:
.table 3
.kitem :deleted
Look for files which have been deleted but not yet expunged.

.item :read 1or* :in
'kindex :read fs:complete-pathname
'kindex :in fs:complete-pathname
The file is going to be read.  This is the default.

.item :print 1or* :write 1or* :out
'kindex :print fs:complete-pathname
'kindex :write fs:complete-pathname
'kindex :out fs:complete-pathname
The file is going to be written (i.e. a new version is going to be created).

.kitem :old
Look only for files that already exist.  This is the default.

.kitem :new-ok
Allow either a file that already exists, or a file that does not yet exist.
An example of the use of this is the c-X c-F (Find File) command in the editor.

.end_table

The first value returned is always a string containing a file name; either the
original string, or a new, more specific string.  The second value returned
indicates the success or failure status of the completion.  It is 3nil* if an
error occurred.  One possible error is that the file is on a file system that
does not support completion, in which case the original string will be returned
unchanged.  Other possible second values are 3:old*, which means that the
string completed to the name of a file that exists, 3:new*, which means that
the string completed to the name of a file which could be created, and 3nil*
again, which means that there is no possible completion.
.end_defun

@chapter Naming of Files
.cindex filename
.cindex pathname
.setq pathname section-page
.setq pathname-chapter chapter-number

A Lisp Machine generally has access to many file systems.  While it may
have its own file system on its own disks, usually a community of Lisp
Machine users want to have a shared file system accessible by any of the
Lisp Machines over a network.  These shared file systems can be
implemented by any computer that is capable of providing file system
service.  A file server computer may be a special-purpose computer that
does nothing but service file system requests from computers on a
network, or it might be an existing time-sharing system.

Programs need to use names to designate files within these file systems.
The main difficulty in dealing with names of files is that different
file systems have different naming formats for files.  For example, in
the ITS file system, a typical name looks like:
.lisp
	DSK: GEORGE; FOO QFASL
.end_lisp
with 3DSK* being a device name, 3GEORGE* being a directory name, 3FOO*
being the first file name and 3QFASL* being the second file name.  However, in
TOPS-20, a similar file name is expressed as:
.lisp
	PS:<GEORGE>FOO.QFASL
.end_lisp
It would be unreasonable for each program that deals with file names to
be expected to know about each different file name format that exists;
in fact, new formats could get added in the future, and existing
programs should retain their abilities to manipulate the names.

The functions and flavors described in this chapter exist to solve this
problem.  They provide an interface through which a program can deal with
names of files and manipulate them without depending on anything about
their syntax.  This lets a program deal with multiple remote file
servers simultaneously, using a uniform set of conventions.


@section Pathnames

All file systems dealt with by the Lisp Machine are mapped into a common model,
in which files are named by something called a 2pathname*.  A pathname always
has six components, described below.  These components are the common interface
that allows programs to work the same way with different file systems; the mapping
of the pathname components into the concepts peculiar to each file system is taken
care of by the pathname software.  This mapping is described for each file
system later in this chapter.

.cindex host (pathname)
.cindex device (pathname)
.cindex directory (pathname)
.cindex name (pathname)
.cindex type (pathname)
.cindex version (pathname)
These are the components of a pathname.  They will be clarified by an example below.
.table 1
.item host
An object which represents the file system machine on which the file
resides.  A host object is an instance of a flavor one of whose
components is SI:HOST.  The precise flavor varies depending on the type
of file system and how the files are to be accessed.

.item device
Corresponds to the "device" or "file structure" concept in many host file systems.

.item directory
The name of a group of related files belonging to a single user or project.
Corresponds to the "directory" concept in many host file systems.

.item name
The name of a group of files which can be thought of as conceptually the "same" file.

.item type
Corresponds to the "filetype" or "extension" concept in many host file systems.
This says what kind of file this is.

.item version
Corresponds to the "version number" concept in many host file systems.
This is a number which increments every time the file is modified.
.end_table

As an example, consider a Lisp program named 3CONCH*.  If it belongs
to 3GEORGE*, who uses the 3FISH* machine, the host would be the
host-object for the machine 3FISH*, the device would be the default
probably, and the directory would be 3GEORGE*.  On this directory
would be a number of files related to the 3CONCH* program.  The source
code for this program would live in a set of files with name 3CONCH*,
type 3LISP*, and versions 31*, 32*, 33*, etc.  The compiled form
of the program would live in files named 3CONCH* with type 3QFASL*;
each would have the same version number as the source file that it came
from.  If the program had a documentation file, it would have type
3INFO*.

Note that a pathname is not necessarily the name of a specific file.  Rather,
it is a way to get to a file; a pathname need not correspond to any file that
actually exists, and more than one pathname can refer to the same file.  For
example, the pathname with a version of "newest" will refer to the same file
as a pathname with the same components except a certain number as the version.
In systems with links, multiple file names, logical devices, etc. two pathnames
that look quite different may really turn out to address the same file.
To get from a pathname to a file requires doing a file system operation
such as 3open*.

A pathname is an instance of a flavor (see (flavor)); exactly which
flavor depends on what the host of the pathname is.  One of the messages
handled by host objects is the 3:pathname-flavor* operation, which
returns the name of the flavor to use for pathnames on that host.  And
one of the differences between flavors of host is how they handle this
operation.

If 2p* is a
pathname, then 3(typep 2p* 'fs:pathname)* will return 3t*.  (3fs* is
the file-system package.)  There are functions for manipulating pathnames,
and there are also messages that can be sent to them.  These are described
later in this chapter.

.cindex parse (pathname)
.cindex merge (pathname)
Two important operations of the pathname system are 2parsing* and 2merging*.
Parsing is the conversion of a string--which might be something typed in by the
user when asked to supply the name of a file--into a pathname object.  This involves
finding out what host the pathname is for, then using the file name syntax
conventions of that host to parse the string into the standard pathname components.
Merging is the operation which takes a pathname with missing components and
supplies values for those components from a set of defaults.

Since each kind of file server can have its own character string
representation of names of its files, there has to be a different parser
for each of these representations, capable of examining such a character
string and figuring out what each component is.  The parsers all work
differently.  How can the parsing operation know which parser to use?
The first thing that the parser does is to figure out which host this
filename belongs to.  A filename character string may specify a host
explicitly, by having the name of the host, followed by a colon, either
at the beginning or the end of the string.  For example, the following
strings all specify hosts explicitly:
.lisp
AI: COMMON; GEE WHIZ		;1 This specifies host AI.*
COMMON; GEE WHIZ AI:		;1 So does this.*
AI: ARC: USERS1; FOO BAR	;1 So does this.*
ARC: USERS1; FOO BAR AI:	;1 So does this.*
EE:PS:<COMMON>GEE.WHIZ.5	;1 This specifies host EE.*
PS:<COMMON>GEE.WHIZ.5 EE:	;1 So does this.*
.end_lisp
If the string does not specify a host explicitly, the parser will
assume some particular host is the one in question, and will use
the parser for that host's file system.  The optional arguments passed to
the parsing function (3fs:parse-pathname*) tell it which host to assume.
Note: the parser won't be confused by strings starting with 3"DSK:"*
or 3"PS:"* because it knows that neither of those is a valid host name.
(If some file system's syntax allowed file names that start with the name
of a valid host followed by a colon, there could be problems.)

Pathnames are kept unique, like symbols, so that there is only one
object with a given set of components.  This is useful because a
pathname object has a property list (see (plist)) on which you can
store properties describing the file or family of files which the
pathname represents.  The uniqueness implies that any time the same
components are typed in, the program will get the same pathname object,
and find there the properties it ought to find.

.setq pathname-plist-warning page

If you wish to store properties that refer to a specific file rather
than to a family of files, simply use the file's pathname.  To avoid
problems with links, logical hosts, multiple names for the same file,
and different versions that access the same file (such as 3:newest*
versus the version number itself), use the pathname you get by sending
3:truename* to a stream rather than the pathname you open.  By
following this convention you will avoid problems where two references
to two unequal pathnames that describe the same file fail to communicate
properties correctly.

To get a unique pathname object representing a family of files, send the
message 3:generic-pathname* to a pathname for any file in the family
(see (generic-pathname)).

A pathname can be converted into a string, which is in the file name syntax
of its host's file system, except that the name of the host followed by a colon
is inserted at the front.  3prin1* of a pathname (3~S* in 3format*)
prints it like a Lisp object (using the "3#*" syntax so it can be
read back in),
while 3princ* of a pathname (3~A* in 3format*) prints it like a file
name of the host file system.  The 3string* function, applied to a pathname,
returns the string that 3princ* would print.  Thus pathnames may be used as
arguments to functions like 3string-append*.

Not all of the components of a pathname need to be specified.  If a
component of a pathname is missing, its value is 3nil*.  Before a file
server can do anything interesting with a file, such as opening the
file, all the missing components of a pathname must be filled in from
defaults.  But pathnames with missing components are often handed around
inside the machine, since almost all pathnames typed by users do not
specify all the components explicitly.  The host is not allowed to be
missing from any pathname; since the behavior of a pathname is
host-dependent to some extent, it has to know what its host is.  All
pathnames have host attributes, even if the string being parsed does not
specify one explicitly.

.cindex unspecific pathname components

A component of a pathname can also be the special symbol 3:unspecific*.
This means that the component has been explicitly determined not to be there,
as opposed to being missing.  One way this can occur is with 2generic*
pathnames, which refer not to a file but to a whole family of files.  The
version, and usually the type, of a generic pathname are 3:unspecific*.  Another
way 3:unspecific* is used has to do with mapping of pathnames into file
systems such as ITS that do not have all six components.  A component that
is really not there will be 3:unspecific* in the pathname.  When a pathname
is converted to a string, 3nil* and 3:unspecific* both cause the component
not to appear in the string.  The difference occurs in the merging operation,
where 3nil* will be replaced with the default for that component, while
3:unspecific* overrides any defaults.

A component of a pathname can also be the special symbol 3:wild*.  This is
only useful when the pathname is being used with a directory primitive such
as 3fs:directory-list* (see (fs:directory-list-fun)), where it means that this pathname component matches
anything.  The printed representation of a pathname usually designates
3:wild* with an asterisk; however, this is host-dependent.

What values are allowed for components of a pathname depends, in general,
on the pathname's host.  However, in order for pathnames to be usable
in a system-independent way certain global conventions are adhered to.
These conventions are stronger for the type and version than for the
other components, since the type and version are actually understood by
many programs, while the other components are usually just treated as something
supplied by the user which just needs to be remembered.

The type is always a string (unless it is one of the special symbols 3nil*,
3:unspecific*, and 3:wild*).  Many programs that deal with files have an idea of what
type they want to use.  For example, Lisp source programs are 3"lisp"*,
compiled Lisp programs are 3"qfasl"*, text files are 3"text"*, tags files
are 3"tags"*, etc.  Just what characters are allowed in the type, and how many,
is system dependent.

The version is either a number (specifically, a positive fixnum), or a special symbol.
3nil*, 3:unspecific*, and 3:wild* have been explained above.  3:newest* refers
to the largest version number that exists when reading a file, or that number
plus one when writing a new file.  3:oldest* refers to the smallest version
number that exists.  Some file systems may define other special
version symbols, such as 3:installed* for example, or may allow
negative numbers.

.cindex structured pathname components
The device, directory, and name are more system-dependent.  These can be strings
(with host-dependent rules on allowed characters and length), or they can
be 2structured*.  A structured component is a list of strings.  This
is used for file system features such as hierarchical directories.  The system is
arranged so that programs do not need to know about structured components
unless they do host-dependent operations.  Giving a string as a pathname component
to a host that wants a structured value converts the string to the appropriate
form.  Giving a structured component to a host that does not understand them
converts it to a string by taking the first element and ignoring the rest.

Some host file systems have features that do not fit into this pathname
model.  For instance, directories might be accessible as files, there
might be complicated structure in the directories or names, or there
might be relative directories, such as "<" in Multics.  These features
appear in the parsing of strings into pathnames, which is one reason why
the strings are written in host-dependent syntax.  Pathnames for hosts with
these features are also likely to handle additional messages besides the
common ones documented in this chapter, for the benefit of
host-dependent programs which want to access those features.  However,
note that once your program depends on any such features, it will only
work for certain file servers and not others; in general, it is a good
idea to make your program work just as well no matter what file server
is being used.

@section Defaults and Merging
.cindex default (pathname)
.cindex merge (pathname)

When the user is asked to type in a pathname, it is of course unreasonable
to require the user to type a complete pathname, containing all components.
Instead there are defaults, so that components not specified by the user can
be supplied automatically by the system.  Each program that deals with pathnames
typically has its own set of defaults.

The system defines an object called a 2defaults a-list*.  Functions are
provided to create one, get the default pathname out of one, merge a pathname
with one, and store a pathname back into one.  A defaults a-list can remember
more than one default pathname if defaults are being kept separately for
each host; this is controlled by the variable 3fs:*defaults-are-per-host**.
The main primitive for using defaults is the function
3fs:merge-pathname-defaults* (see (fs:merge-pathname-defaults-fun)).

In place of a defaults a-list, you may use just a pathname.  Defaulting one
pathname from another is useful for cases such as a program that has an input
file and an output file, and asks the user for the name of both, letting
the unsupplied components of one name default from the other.  Unspecified
components of the output pathname will come from the input pathname, except
that the type should default not to the type of the input but to the appropriate
default type for output from this program.

The implementation of a defaults a-list is an association list of host names
and default pathnames.  The host name 3nil* is special and holds the
defaults for all hosts, when defaults are not per-host.

.setq pathname-merging-rules page
The 2merging* operation takes as input a pathname, a defaults a-list
(or another pathname), a default type, and a default version, and returns a
pathname.  Basically, the missing components in the pathname are filled
in from the defaults a-list.  However, if a name is specified but the
type or version is not, then the type or version is treated specially.

The full details of the merging rules are as follows.  First, if the
pathname explicitly specifies a host and does not supply a device, then
the device will be the default file device for that host.  Next, if the
pathname does not specify a host, device, directory, or name, that
component comes from the defaults.

If the value of 3fs:*always-merge-type-and-version** is non-3nil*,
the type and version are merged just like the other components.
Otherwise,
the merging rules for the type and version are more complicated, and
depend on whether the pathname specifies a name.  If the pathname
doesn't specify a name, then the type and version, if not provided, will
come from the defaults, just like the other components.  However, if the
pathname does specify a name, then the type and version are not affected
by the defaults.  The reason for this is that the type and version
"belong to" some other filename, and are thought to be unlikely to have
anything to do
with the new one you are typing in.  Instead, the type and version,if
not specified, come from the default type and default version arguments
to the merging operation.  If the default type and default version
arguments were omitted, the value of
3fs:*name-specified-default-type** (initially, 3"LISP"*) is used as the default
type, and 3:newest* is used as the default version.

The following special variables are parts of the pathname interface
that are relevant to defaults.

.defvar fs:*defaults-are-per-host*
This is a user customization option intended to be set by a user's
3LISPM INIT* file (see (lispm-init-file)).  The default value is
3nil*, which means that each program's set of defaults contains only
one default pathname.  If you type in just a host name and a colon, the
other components of the name will default from the previous host, with
appropriate translation to the new host's pathname syntax.  If
3fs:*defaults-are-per-host** is set to 3t*, each program's set of
defaults will maintain a separate default pathname for each host.  If
you type in just a host name and a colon, the last file that was
referenced on that host will be used. 
.end_defvar

.defvar fs:*always-merge-type-and-version*
If this variable is non-3nil*, then the type and version are defaulted
only from the pathname defaults just like the other components.
.end_defvar

.defvar fs:*name-specified-default-type*
If 3fs:*always-merge-type-and-version** is nil, then when a name is
specified but not a type, the type defaults from an argument to the
merging function.  If that argument is not specified, this variable's
value is used.  The value is initially 3"LISP"*.
.end_defvar

.defvar fs:*default-pathname-defaults*
This is the default defaults a-list; if the pathname primitives that need
a set of defaults are not given one, they use this one.  Most programs, however,
should have their own defaults rather than using these.
.end_defvar

.defvar fs:load-pathname-defaults
This is the defaults a-list for the 3load* and 3qc-file* functions.  Other
functions may share these defaults if they deem that to be an appropriate user
interface.
.end_defvar

.defvar fs:last-file-opened
This is the pathname of the last file that was opened.  Occasionally this
is useful as a default.  Since some programs deal with files without
notifying the user, you must not expect the user to know what the
value of this symbol is.  Using this symbol as a default may cause
unfortunate surprises, and so such use is discouraged.
.end_defvar


@section Generic Pathnames

.cindex generic pathname
.setq generic-pathname section-page

A generic pathname stands for a whole family of files.  The property
list of a generic pathname is used to remember information about the
family, some of which (such as the package) comes from the 7-*-* line
(see (file-property-list))
of a source file in the family.  Several types of files with that name, in
that directory, belong together.  They are different members of the same
family; for example, they might be source code and compiled code.
However, there may be several other types
of files which form a logically distinct group even thought they have
this same name; TEXT and PRESS for example.  The exact mapping is
done on a per host basis since it can sometimes be affected by host naming
conventions.

The generic pathname of pathname 2p* usually has the same host, device,
directory, and name as 2p* does.  However, it has a version of
3:unspecific*.  The type of the generic pathname is obtained by
sending a 3:generic-base-type* <type of 2p*> message to the host of
2p*.  The default response to this message is to return the associated
type from 3fs:*generic-base-type-alist** if there is one,
else <type of 2p*>.  (The old variable, 3fs:*known-types**, is
discontinued).  However ITS presents special problems.  One cannot
distinguish
multiple generic base types in this same way since the type component does not exist
as such; it is derived from the second filename, which unfortunately is also
sometimes used as a version number.  Thus, on ITS, the type of a 
generic pathname is always 3:unspecific* if there is any association for
the type of the pathname on 3fs:generic-base-type-alist**. 

  Since generic pathnames are primarily useful for storing properties,
it is important that they be as standardized and conceptualized as possible.
For this reason, generic pathnames are defined to be "backtranslated", ie
the generic pathname of a pathname which is (or could be) the result of a logical host
translation has the host and directory of the logical pathname.  For
example, the generic pathname of AI:LMWIN;STREAM > would be
SYS:WINDOW;STREAM LISP if AI is the system host.  On the other
hand, a pathname specifying a logical host but a directory that, strictly
speaking, is not defined for that host will have a generic pathname of the
forward translated host.  For example SYS:RG;FOO might have a generic pathname
of AI:RG;FOO.

  All version numbers of a particular pathname share the
same identical generic pathname.  If the values of particular properties have
changed between versions, it is possible for confusion to result.
One means to deal with this problem have the property be a list associating
version number with the actual desired property.  Then it is relatively
easy to determine which versions have which values for the property in question
and select one appropriately.  But usually in the applications for which
generic pathnames are used this is not necessary.

The 3:generic-pathname* message to a pathname returns its
corresponding generic pathname.  See (pathname-generic-pathname-method).

.defvar fs:*generic-base-type-alist*
This is an association list of the file types and the type of the generic pathname
used for the group of which that file type is a part.  Constructing a generic
pathname will replace the file type with the association from this list, if there
is one (except that ITS hosts, always replace with 3:UNSPECIFIC*).
File types not in this list are really part of the name in some sense.
The initial list is
.lisp
 (("TEXT" . "TEXT") ("DOC" . "TEXT") ("PRESS" . "TEXT") ("XGP" . "TEXT")
  ("LISP" . :UNSPECIFIC) ("QFASL" . :UNSPECIFIC) (NIL . :UNSPECIFIC))
.end_lisp
The association of "LISP" and :UNSPECIFIC is unfortunately made necessary by
the problems of ITS mentioned previously.  This way makes the generic pathnames
of logically mapped LISP files identical no matter whether the logical host
is mapped to an ITS host or not.

Some users may need to add to this list.
.end_defvar

The system records certain properties on generic pathnames
automatically.

.table 7
.item :warnings
This property is used to record compilation and other warnings for the
file.

.item :definitions
This property records all the functions and other things defined in the
file.  The value has one element for each
package into which the file has been loaded; the element's car is the
package itself and the cdr is a list of definitions made.

Each definition is a cons whose car is the symbol or function spec
defined and whose cdr is the type of definition (usually one of the
symbols 3defun*, 3defvar*, 3defflavor* and 3defstruct*).

.item :systems
This property's value is a list of the names of all the systems (defined
with 3defsystem*, see (defsystem-fun)) of which this is a source file.

.item :file-id-package-alist
This property records what version of the file was most recently loaded.
In case the file has been loaded into more than one package, as is
sometimes necessary, the loaded version is remembered for each package
separately.  This is how 3make-system* tells whether a file needs to
be reloaded.  The value is a list with an element for each package that
the file has been loaded into; the elements look like
.lisp
(package file-information)
.end_lisp
2package* is the package object itself; 2file-information*
is the value returned by the 3:info* operation on a file stream, and
is usually a cons whose car is the truename (a pathname) and whose cdr
is the file creation date (a universal time number).

Some additional properties are put on the generic pathname by reading
the attribute list of the file (see
(fs:file-read-attributes-list-fun)).  It is not completely clear that
this is the right place to store these properties, so it may change in
the future.  Any property name can appear in the attributes list and get
onto the generic pathname, but here are the typical ones.

.table 7
.item :mode
The value is a string, which is the major mode that should be used to
edit the file.

.item :base
The value is the number to be used as the radix which 3readfile* and
3qc-file* use for reading the file.

.item :package
The value is the name of the package to be used for reading and editing
the file.

.item :fonts
The value is a list of font names for the fonts to be used in displaying
this file.
.end_table 

@section Pathname Functions

.nopara
These functions are what programs use to parse and default file names
that have been typed in or otherwise supplied by the user.

.defun fs:parse-pathname thing &optional host defaults
This turns 2thing*, which can be a pathname, a string, a symbol, or a
Maclisp-style name list, into a pathname.  Most functions which are advertised
to take a pathname argument call 3fs:parse-pathname* on it so that they will
accept anything that can be turned into a pathname.

This function does 2not* do defaulting, even though it has an argument
named 2defaults*; it only does parsing.  The 2host* and 2defaults*
arguments are there because in order to parse a string into a pathname,
it is necessary to know what host it is for so that it can be parsed with
the file name syntax peculiar to that host.  If 2thing* does not contain
a manifest host name, then if 2host* is non-3nil*, it is the host name
to use, as a string.  If 2thing* is a string, a manifest host name may be
at the beginning or the end, and consists of the name of a host followed by a colon.
If 2host* is 3nil* then the host name is obtained
from the default pathname in 2defaults*.  If 2defaults* is not supplied,
the default defaults (3fs:*default-pathname-defaults**) are used.

Note that if 2host* is specified, and 2thing* contains a host name, an
error is signalled if they are not the same host.
.end_defun

.defun fs:merge-pathname-defaults pathname &optional defaults default-type default-version
Fills in unspecified components of 2pathname* from the defaults, and returns
a new pathname.  This is the function that most programs should call to
process a file name supplied by the user.  2pathname* can be a pathname,
a string, a symbol, or a Maclisp namelist.  The returned value will always
be a pathname.  The merging rules are documented on (pathname-merging-rules).

If 2defaults* is a pathname, rather than a defaults a-list, then the defaults
are taken from its components.  This is how you merge two pathnames (in Maclisp
that operation is called 3mergef*).

2defaults* defaults to the value of 3fs:*default-pathname-defaults**
if unsupplied.  2default-type* defaults to the value of
3fs:*name-specified-default-type**.  2default-version* defaults to 3:newest*.
.end_defun

.defun fs:merge-and-set-pathname-defaults pathname &optional defaults default-type default-version
This is the same as 3fs:merge-pathname-defaults* except that after it is done
the result is stored back into 2defaults*.  This is handy for programs that
have "sticky" defaults.  (If 2defaults* is a pathname rather than a defaults
a-list, then no storing back is done.)  The optional arguments default the same
way as in 3fs:merge-pathname-defaults*.
.end_defun

.need 1500
.nopara
This function yields a pathname given its components.

.defun fs:make-pathname &rest options
The 2options* are alternating keywords and values, which specify the
components of the pathname.  Missing components default to 3nil*,
except the host (all pathnames must have a host).  The 3:defaults*
option specifies what defaults to get the host from if none is
specified.  The other options allowed are 3:host*,
3:device*, 3:structured-device*, 3:directory*,
3:structured-directory*, 3:name*, 3:structured-name*, 3:type*,
and 3:version*.
.end_defun

.need 1500
.nopara
These functions are used to manipulate defaults a-lists directly.

.defun fs:make-pathname-defaults
Creates a defaults a-list initially containing no defaults.  Asking this empty set of
defaults for its default pathname before anything has been stored into it will return
the file 3FOO* on the user's home directory on the host he logged in to.
.end_defun

.defun fs:copy-pathname-defaults defaults
Creates a defaults a-list initially a copy of 2defaults*.
.end_defun

.defun fs:default-pathname &optional defaults host default-type default-version
This is the primitive function for getting a default pathname out of a defaults a-list.
Specifying the optional arguments 2host*, 2default-type*, and 2default-version*
to be non-3nil* forces those fields of the returned pathname to contain those values.

If 3fs:*defaults-are-per-host** is 3nil* (its default value), this gets the
one relevant default from the a-list.  If it is 3t*, this gets the default for
2host* if one is specified, otherwise for the host most recently used.

If 2defaults* is not specified, the default defaults are used.

This function has an additional optional argument 2internal-p*, which
users should never supply. 
.end_defun

.defun fs:set-default-pathname pathname &optional defaults
This is the primitive function for updating a set of defaults.  It
stores 2pathname* into 2defaults*.
If 2defaults* is not specified, the default defaults are used.
.end_defun

.need 1500
.nopara
These functions return useful information.

.defun fs:user-homedir &optional host reset-p
.cindex home directory
Returns the pathname of the logged-in user's home directory on 2host*, which defaults
to the host the user logged in to.  Home directory is a somewhat system-dependent
concept, but from the point of view of the Lisp Machine it is the directory where the
user keeps personal files such as init files and mail.
This function returns a pathname without any name, type, or version component
(those components are all 3nil*).
If 2reset-p* is specified non-3nil*, the machine the user is logged in to
is changed to be 2host*.
.end_defun

.defun fs:init-file-pathname program-name &optional host
.cindex init file
Returns the pathname of the logged-in user's init file for the program 2program-name*,
on the 2host*, which defaults to the host the user logged in to.  Programs that load
init files containing user customizations call this function to find where to look
for the file, so that they need not know the separate init file name conventions of
each host operating system.  The 2program-name* 3"LISPM"* is used by the 3login*
function.
.end_defun

.need 1500
.nopara
These functions are useful for poking around.

.defun fs:describe-pathname pathname
If 2pathname* is a pathname object, this describes it, showing you its properties
(if any) and information about files with that name that have been loaded into the
machine.  If 2pathname* is a string, this describes all interned pathnames that
match that string, ignoring components not specified in the string.
One thing this is useful for is finding what directory a file
whose name you remember is in.  Giving 3describe* (see (describe-fun)) a pathname
object will do the same thing as this function will.
.end_defun

.defun fs:pathname-plist pathname
Parses and defaults 2pathname* then returns the list of properties of that pathname.
.end_defun

.defvar fs:*pathname-hash-table*
This is the hash table in which pathname objects are interned.  Applying the
function 3maphash-equal* to this will extract all the pathnames in the world.
.end_defvar



@section Pathname Messages

This section documents the messages a user may send to a pathname object.  Pathnames
handle some additional messages which are only intended to be sent by the file system
itself, and therefore are not documented here.  Someone who wanted to add a new
host to the system would need to understand those internal messages.  This section
also does not document messages which are peculiar to pathnames of a particular
host; those would be documented under that host.

.defmethod pathname :host
.defmethod1 pathname :device
.defmethod1 pathname :directory
.defmethod1 pathname :name
.defmethod1 pathname :type
.defmethod1 pathname :version
These return the components of the pathname.  The returned values can be strings,
special symbols, or lists of strings in the case of structured components.  The type
will always be a string or a symbol.  The version will always be a number or a symbol.
.end_defmethod

.defmethod pathname :new-device dev
.defmethod1 pathname :new-directory dir
.defmethod1 pathname :new-name name
.defmethod1 pathname :new-type type
.defmethod1 pathname :new-version version
These return a new pathname which is the same as the pathname they are
sent to except that the value of one of the components has been changed.
The 3:new-device*, 3:new-directory* and 3:new-name* messages
accept a string (or a special symbol) or a list which is a
structured name.  If the host does not define structured components, and
you specify a list, its first element is used.
.end_defmethod

.defmethod pathname :new-pathname &rest options
This returns a new pathname which is the same as the pathname it is sent
to except that the values of some of the components have been changed.
2options* is a list of alternating keywords and values.  The keywords
all specify values of pathname components; they are 3:host*,
3:device*, 3:directory*, 3:name*, 3:type*,
and 3:version*. 

The operations 3:new-name*, etc., are equivalent to 3:new-pathname*
specifying only one component to be changed.
.end_defmethod

.defmethod pathname :generic-pathname
Returns the generic pathname for the family of files of which this pathname is a member.
See (generic-pathname) for documentation on generic pathnames.
.end_defmethod

.defmethod pathname :primary-device
Returns the default device name for the pathname's host.  This is used
in generating the initial default pathname for a host.
.end_defmethod

.need 1500
.nopara
Messages to get a path name string out of a pathname object:

.defmethod pathname :string-for-printing
Returns a string which is the printed representation of the path name.  This is
the same as what you get if you 3princ* the pathname or take 3string* of it.
.end_defmethod

.defmethod pathname :string-for-wholine
Returns a string which may be compressed in order to fit in the wholine.
.end_defmethod

.defmethod pathname :string-for-editor
Returns a string which is the path name with its components rearranged so
that the name is first.  The editor uses this form to name its buffers.
.end_defmethod

.defmethod pathname :string-for-dired
Returns a string to be used by the directory editor.  The string contains only
the name, type, and version.
.end_defmethod

.defmethod pathname :string-for-directory
Returns a string which contains only the device and directory of
the pathname.  It identifies one directory among all directories on the host.
.end_defmethod

.defmethod pathname :string-for-host
Returns a string which is the path name the way the host file system likes to see it.
.end_defmethod

.need 1500
.nopara
Messages to move around through a hierarchy of directories:

.defmethod pathname :pathname-as-directory
Assuming that the file described by the pathname is a directory,
return another pathname specifying that 2as* a directory.
Thus, if sent to a pathname OZ:<RMS>FOO.DIRECTORY, it would return the
pathname OZ:<RMS.FOO>.  The name, type and version of the returned
pathname are 3:unspecific*.
.end_defmethod

.defmethod pathname :directory-pathname-as-file
This is the inverse of the preceding operation.  It returns a pathname
specifying as a file the directory of the original pathname.  The name,
type and version of the original pathname are ignored.
.end_defmethod

The special symbol 3:root* can be used as the directory component of a
pathname on file systems which have a root directory.

.need 1500
.nopara
Messages to manipulate the property list of a pathname:

.defmethod pathname :get indicator
.defmethod1 pathname :getl list-of-indicators
.defmethod1 pathname :putprop value indicator
.defmethod1 pathname :remprop indicator
.defmethod1 pathname :plist
These manipulate the pathname's property list analogously to the functions of the
same names (see (get-fun)), which don't (currently) work on instances.
Please read the paragraph on (pathname-plist-warning) explaining some
care you must take in using property lists of pathnames.
.end_defmethod

@c omitted:
@c init-file because it's internal
@c open, rename, delete, truename, directory-stream because they are internal


@section Host File Systems Supported

This section lists the host file systems supported, gives an example
of the pathname syntax for each system, and discusses any special idiosyncracies.
More host types will no doubt be added in the future.

@subsection ITS

.cindex ITS pathnames

An ITS pathname looks like 3"HOST: DEVICE: DIR; FOO 69"*.
The primary device is 3DSK:* but other devices such as 3ML:*, 3ARC:*,
3DVR:*, or 3PTR:* may be used.

ITS does not exactly fit the virtual file system model, in that a file
name has two components (FN1 and FN2) rather than three (name, type, and
version).  Consequently to map any virtual pathname into an ITS
filename, it is necessary to choose whether the FN2 will be the type or
the version.  The rule is that usually the type goes in the FN2 and the
version is ignored; however, certain types (3LISP* and 3TEXT*) are
ignored and instead the version goes in the FN2.  Also if the type is 3:unspecific*
the FN2 is the version.

Given an ITS filename, it is converted into a pathname by making the FN2 the
version if it is "<", ">", or a number.  Otherwise the FN2 becomes the type.
ITS pathnames allow the special version symbols 3:oldest* and 3:newest*,
which correspond to "<" and ">" respectively.  If a version is specified,
the type is always 3:unspecific*.  If a type is specified, the version
is 3:newest* unless the type is a normally-ignored type (such as 3LISP*)
in which case the version is 3:unspecific* so that it does not override the type.

Each component of an ITS pathname is mapped to upper case and truncated to
six characters.

Special characters (space, colon, and semicolon) in a component of an ITS pathname
can be quoted by prefixing them with right horseshoe (7*)
or equivalence sign (7*).  Right horseshoe is the same character code in the
Lisp Machine character set as control-Q in the ITS character set.

An ITS pathname can have a structured name, which is a list of two strings,
the FN1 and the FN2.  In this case there is neither a type nor a version.

An ITS pathname with an FN2 but no FN1 (i.e. a type and/or version but no name)
is represented with the placeholder FN1 7""*, because ITS pathname syntax
provides no way to write an FN2 without an FN1 before it.

The ITS init file naming convention is "homedir; user program".

.defvar fs:*its-uninteresting-types*
The ITS file system does not have separate file types and version numbers;
both components are stored in the "FN2".  This variable is a list of the file
types which are "not important"; files with these types use the FN2 for a version
number.  Files with other types use the FN2 for the type and do not have a version
number.  The initial list is
.lisp
("lisp" "text" nil :unspecific)
.end_lisp
Some users may need to add to this list.
.end_defvar

.defmethod its-pathname :fn1
.defmethod1 its-pathname :fn2
These two messages return a string which is the FN1 or FN2 host-dependent
component of the pathname.
.end_defmethod

.defmethod pathname :type-and-version
.defmethod1 pathname :new-type-and-version new-type new-version
These two operations provide a way of pretending that ITS pathnames can
have both a type and a version.  It uses the first three characters of
the FN2 to store a type and the last three to store a version number.

On an its-pathname,
3:type-and-version* returns the type and version thus extracted (not
the same as the type and version of the pathname).
3:new-type-and-version* returns a new pathname constructed from the
specified new type and new version.

On any other type of pathname, these operations simply return or set
both the type component and the version component.
.end_defmethod

@subsection TOPS-20 (Twenex), Tenex, and VMS.

.cindex TOPS-20 pathnames
.cindex Twenex pathnames

A pathname on TOPS-20 (better known as Twenex) looks like
3"HOST:DEVICE:<DIRECTORY>NAME.TYPE.VERSION"*.  The primary device is
3PS:*.

TOPS-20 pathnames are mapped to upper case.  Special characters (including
lowercase letters) are quoted with the circle-x (7*) character, which
has the same character code in the Lisp Machine character set as control-V
in the TOPS-20 character set.

If you specify a period after the name, but nothing after that,
then the type is 3:unspecific*, which translates into an empty
extension on the TOPS-20 system.  If you omit the period, you have
allowed the type to be defaulted.

TOPS-20 pathnames allow the special version symbols 3:oldest* and
3:newest*.  In the string form of a pathname, these are expressed as
".-2" and ".0" respectively for the version.

The directory component of a TOPS-20 pathname may be structured.  The
directory 3<FOO.BAR>* is represented as the list 3("FOO" "BAR")*.

The TOPS-20 init file naming convention is "<user>program.INIT".

When there is an attempt to display a TOPS-20 file name in the who-line and
there isn't enough room to show the entire name, the name is truncated
and followed by a center-dot character to indicate that there is more to
the name than can be displayed.

.cindex Tenex pathnames
Tenex pathnames are almost the same as TOPS-20 pathnames, except that
the version is preceeded by a semi-colon instead of a period, the
default device is 3DSK* instead of 3PS*, and the quoting
requirements are slightly different.

.cindex VMS pathnames
.cindex Very Mangled Software

VMS pathnames are basically like TOPS-20 pathnames, with a few
complexities.  The primary device is SYS$SYSDISK.

First of all, only alphanumeric characters are allowed in filenames
(though $ and underscore can appear in device names).

Secondly, a version number is preceded by ";" rather than by ".".

Thirdly, file types ("extensions") are limited to three characters.
Because much Lisp Machine software uses specific types (such as "LISP")
which are longer, the system provides a set of translations between
specific standard system types and three-letter abbreviations.
The longer, standard names actually appear as the type components of
pathnames, and are used with the 3:type* and 3:new-type* operations.
The abbreviations appear in printed representations of pathnames, and
are used when a file is opened.

The type name translations are an alist in the value of
3fs:*vms-file-type-alist**.  The standard translations are:

lisp  lsp; text  txt; midas  mid; qfasl  qfs;
press  prs; (pdir)  pdr; patch-directory  pdr;
qwabl  qwb; babyl  bab; mail  mai; xmail  xml;
init  ini; unfasl  unf; cwarns  cwn; output  out.

@c How does one make a columnar table in Bolio, I wonder?

@subsection Unix pathnames
.cindex Unix pathnames

A Unix pathname is a sequence of directory or file names separated by
slashes.  The last name is the filename; preceding ones are directory
names (but directories are files anyway).  There are no devices or versions.
Alphabetic case is always significant in Unix pathnames.

Unix allows you to specify a pathname relative to your default directory
by using just a filename, or starting with the first subdirectory name;
or you can specify it starting from the root directory by starting with
a slash.  In addition, you can start with ".." as a directory name one
or more times, to refer upward in the hierarchy from the default
directory.

Unix pathnames on the Lisp Machine provide all these features too, but
the canonicalization to a simple descending list of directory names
starting from the root is done on the Lisp Machine itself when you merge
the specified pathname with the defaults.

If a pathname string starts with a slash, the pathname object that
results from parsing it is called "absolute".  Otherwise the pathname
object is called "relative".

In an absolute pathname object, the directory component is either a
symbol (3nil*, 3:unspecific* or 3:root*), a string, or a list of
strings.  A single string is used when there is only one level of
directory in the pathname.

A relative pathname has a directory which is a list of the symbol
3:relative* followed by some strings.  When the pathname is merged
with defaults, the strings in the list are appended to the strings
in the default directory.  The result of merging is always an absolute
pathname.

In a relative pathname's string form, the string ".." can be used as a
directory name.  It is translated to the symbol 3:up* when the string
is parsed.  That symbol is processed when the relative pathname is
merged with the defaults.

Restrictions on the length of Unix pathnames require abbreviations for
the standard Zetalisp pathname types, just as for VMS.  On Unix the
abbreviations are all one or two characters.  The alist of abbreviations
is stored in 3fs:*unix-file-type-alist*, and the default set is:

lisp  l, text  tx; qfasl  qf; midas  md;
press  pr; (pdir)  pd; patch-directory  pd;
qwabl  qw; babyl  bb; mail  ma; xmail  xm;
init  in; unfasl  uf; cwarns  cw; output  ot.

.cindex Multics pathnames

The Multics file system is much like the Unix one; there are absolute
and relative pathnames, absolute ones start with a directory delimiter,
and here are no devices or versions.  Alphabetic case is significant.

There are differences in details.  Diretory names are terminated, and
absolute pathnames begun, with the character ">".  The containing
directory is referred to by the character "<", which is complete in
itself.  It does not require a delimiter.  Thus, "<<FOO>BAR" refers to
subdirectory FOO, file BAR in the superdirectory of the superdirectory
of the default directory.

The limits on filename sizes are very large, so there is no translation
of type components.

@subsection Lisp Machine File Systems
.cindex Lisp machine pathnames

There are two file systems that run in the MIT Lisp Machine system.
They have different pathname syntax.  Both can be accessed either
locally, or remotely like any other file server.

.cindex Local-File pathnames

The Local-File system uses host name 3LM* for the machine you are on.
A Local-File system on another machine can be accessed using the name of
that machine as a host name, provided that machine is known as a file
server.

The remainder of the pathname for the Local-File system looks like
"DIRECTORY; NAME.TYPE#VERSION".  There is no restriction on the length
of names, and letters are mapped to upper case.

The Local-File system on the Filecomputer at MIT is called FS.

.cindex LMFILE pathnames

The LMFILE system is primarily for use as a file server.  At MIT, it
runs on the filecomputer, and is accessed remotely with host name FC.

The remainder of an LMFILE pathname looks like
"DIRECTORY; NAME TYPE#VERSION".  However, the directory and name
can be composed of any number of subnames, separated by backslashes.
This is how subdirectories are specified.
"FOO;BAR\X" refers to the same file as "FOO\BAR;X", but the two ways of
specifying the file have different consequences in defaulting, getting directory
listings, etc.

Case is significant in LMFILE pathnames; however, when you open a file,
the LMFILE system ignores the case when it matches your pathname against
the existing files.  As a result, the case you use matters when you
create or rename a file, and appears in directory listings, but it is
ignored when you refer to an existing file, and you cannot have two
files whose names differ only in case.

@subsection Logical Pathnames
.cindex logical pathnames

There is another kind of pathname that doesn't correspond to any
particular file server.  It is called a "logical" pathname, and its host
is called a "logical" host.  Every logical pathname can be translated
into a corresponding "physical" pathname; there is a mapping from
logical hosts into physical hosts used to effect this translation.

The reason for having logical pathnames is to make it easy to keep bodies
of software on more than one file system.  An important example is the body
of software that constitutes the Lisp Machine system.  Every site has a
copy of all of the sources of the programs that are loaded into the initial
Lisp environment.  Some sites may store the sources on an ITS file system,
while others might store them on a TOPS-20.  However, there is software
that wants to deal with the pathnames of these files in such a way that the
software will work correctly no matter which site it is run at.  The way
this is accomplished is that there is a logical host called 3SYS*, and
all pathnames for system software files are actually logical pathnames with
host 3SYS*.  At each site, 3SYS* is defined as a logical host, but
translation will work differently at one site than at another.  At a site
where the sources are stored on a certain TOPS-20, for example, pathnames
of the 3SYS* host will be translated into pathnames for that TOPS-20.

Here is how translation is done.  For each logical host, there is a mapping
that takes the name of a directory on the logical host, and produces a
device and a directory for the corresponding physical host.  To translate a
logical pathname, the system finds the mapping for that pathname's host and
looks up that pathname's directory in the mapping.  If the directory is
found, a new pathname is created whose host is the physical host, and whose
device and directory come from the mapping.  The other components of the
new pathname are left the same.  There is also, for each logical host, a
"default device" (it is an instance variable of the host object).  If the
directory is not found in the mapping, then the
new pathname will have the same directory name as the old one, and its
device will be the "default device" for the logical host.  The "default
device" is also used if a translation exists but specifies 3nil* as
the device.

This means that when you invent a new logical host for a certain set
of files, you also make up a set of logical directory names, one for
each of the directories that the set of files is stored in.  Now when
you create the mappings at particular sites, you can choose any physical
host for the files to reside on, and for each of your logical directory
names, you can specify the actual directory name to use on the physical
host.  This gives you flexibility in setting up your directory names; if
you used a logical directory name called 3fred* and you want to move
your set of files to a new file server that already has a directory
called 3fred*, being used by someone else, you can translate 3fred*
to some other name and so avoid getting in the way of the existing
directory.  Furthermore, you can set up your directories on each host
to conform to the local naming conventions of that host.

.defun fs:add-logical-pathname-host logical-host physical-host translations
This creates a new logical host named 2logical-host*.  Its
corresponding "physical" host (that is, the host to which it will
forward most operations) is 2physical-host*.  2logical-host* and
2physical-host* should both be strings.  2translations* should be a
list of translation specifications.  Each translation specification
should be a list of two strings.  The first is the name of a directory
on the logical host.  The second is a pathname whose device component
and directory component are the translation of that directory.
A translation for logical directory 3nil* specifies the default device
for the logical host; if there is none, the primary device of the
physical host is used.
Example:
.lisp
(fs:add-logical-pathname-host "music" "music-10-a"
      '(("melody" "ss:<melody>")
        ("doc" "ps:<music-documentation>")))
.end_lisp

This creates a new logical host called 3music*.  If you try to read the
file 3music:doc;manual  text  2*, you will be re-directed to the file
3music-10-a:ps:<music-documentation>manual.text.2* (assuming that the
host 3music-10-a* is a TOPS-20 system).
.end_defun

.defmethod fs:logical-pathname :translated-pathname
This converts a logical pathname to a physical pathname.  It returns the
translated pathname of this instance; a pathname whose 3:host*
component is the physical host that corresponds to this instance's
logical host.

If this message is sent to a physical pathname, it simply returns itself.
.end_defmethod

.defmethod fs:logical-pathname :back-translated-pathname pathname
This converts a physical pathname to a logical pathname.
2pathname* should be a pathname whose host is the physical host
corresponding to this instance's logical host.  This returns
a pathname whose host is the logical host and whose translation
is 2pathname*.

An example of how this would be used is in connection with truenames.
Given a stream which was obtained by opening a logical pathname,
.lisp
(funcall stream ':pathname)
.end_lisp
returns the logical pathname that was opened.
.lisp
(funcall stream ':truename)
.end_lisp
returns the true name of the file that is open, which of course is
a pathname on the physical host.  To get this in the form of a logical
pathname, one would do
.lisp
(funcall (funcall stream ':pathname)
	 ':back-translated-pathname
	 (funcall stream ':truename))
.end_lisp

If this message is sent to a physical pathname, it simply returns its
argument.  Thus the above example will work no matter what kind of
pathname was opened to create the stream.
.end_defmethod

A logical pathname looks like 3"HOST: DIRECTORY; NAME TYPE VERSION"*.
There is no way to specify a device; parsing a logical pathname
always returns a pathname whose device component is 3:unspecific*.
This is because devices don't have any meaning in logical pathnames.

The equivalence-sign character (3*) can be used for quoting special
characters such as spaces and semicolons.  The double-arrow character
(3*) can be used as a place-holder for unspecified components.
Components are not mapped to upper-case.  The 3:newest*, 3:oldest*,
and 3:wild* values for versions are specified with the strings
3">"*, 3"<"*, and 3"*"* respectively.

There isn't any init file naming convention for logical hosts; you
can't log into them.  The 3:string-for-host*,
3:string-for-wholine*, 3:string-for-dired*, and 3:string-for-editor* messages are all
passed on to the translated pathname, but the 3:string-for-printing*
is handled by the 3fs:logical-pathname* flavor itself and shows
the logical name.

@section Hosts
.cindex Host objects

Each host known to the Lisp Machine is represented by a flavor instance
known as a host object.  The host object records such things as the name(s)
of the host, its operating system type, and its network address(es).

Not all hosts support file access.  Those that do, appear on the list
3fs:*pathname-host-list** and can be the host component of pathnames.
A host object is also used as an argument when you make a chaosnet
connection for any purpose.

The hosts that you can use for making network connections appear in the
value of 3si:host-alist*.  Most of the hosts you can use for pathnames
are among these; but some, such as logical hosts, are not.

@subsection Parsing Hostnames

.defun si:parse-host namestring &optional no-error-p unknown-ok
Returns a host object that recognizes the specified name.
If the name is not recognized, it is an error, unless 2no-error-p* is
non-3nil*; in that case, 3nil* is returned.

If 2unknown-ok* is non-3nil*, an unrecognized string is used to
construct a new host object.  However, that host object will not have a
known operating system type or network addresses.

The first argument is allowed to be a host object instead of a string.
In this case, that argument is simply returned.
.end_defun

.defun si:get-host-from-address address network
Returns a host object given an address and the name of the network which
that address is for.  Usually the symbol 3:chaos* is used as the
network name.

3nil* is returned if there is no known host with that address.
.end_defun

.defun fs:get-pathname-host name &optional no-error-p
Returns a host object that can be used in pathnames.
If the name is not recognized, it is an error, unless 2no-error-p* is
non-3nil*; in that case, 3nil* is returned.

The first argument is allowed to be a host object instead of a string.
In this case, that argument is simply returned.
.end_defun

3si:parse-host* and 3fs:get-pathname-host* differ in the set of
hosts searched.

.defvar fs:*pathname-host-list*
This is a list of all the host objects that support file access.
.end_defvar

.defvar si:host-alist
This variable is a list of one element for each known network host.
The element looks like this:
.lisp
(full-name host-object (nickname nickname2 ... full-name)
 system-type machine-type site
 network list-of-addresses network2 list-of-addresses2 ...)
.end_lisp
The 2full-name* is the host's official name.  The :name operation on
the host object returns this.

The 2host-object* is a flavor instance that represents this host.
It may be 3nil* if none has been created yet; 3si:parse-host*
creates them when they are referred to.

The 2nickname*s are alternate names which 3si:parse-host* will
recognize for this host, but which are not its official name.

The 2system-type* is a symbol which tells what software the
host runs.  This is used to decide what flavor of host object to
construct.  Symbols now used include 3:lispm*, 3:its*, 3:tops-20*,
3:tenex*, 3:vms*, 3:unix*, 3:multics*, 3:minits*, 3:waits*,
3:chaos-gateway*, 3:dos*, 3:rsx*, 3:magicsix*, and others.  Not
all of these are specifically understood in any way by the Lisp machine.
If none of these applies to a host you wish to add, use a new symbol.

The 2machine-type* is a symbol which describes tha hardware of the
host.  Symbols in use include 3:lispm*, 3:pdp10*, 3:pdp11*,
3:vax*, 3:pe3230*.  3(nil)* has also been observed to appear here.
Note that these machine types attempt to have wide meanings, lumping
together as various brands, models, etc.

The 2site* does not describe anything about the host.  Instead it
serves to say what the Lisp Machine's site name was when the host was
defined.  This is so that, when a Lisp Machine system is moved to a
different institution which has a disjoint set of hosts, all the old
site's hosts can be deleted from the host alist by site
reinitialization.

The 2network*s and lists of addresses describe how to reach the host.
Usually there will be only one network and only one address in the list.
The generality is so that hosts with multiple addresses on multiple
networks can be recorded.  Networks include 3:chaos* and 3:arpa*.
The address is meaningful only to code for a specific network.
.end_defvar

@subsection Host Object Messages

.defmessage host :name
Returns the full, official name of the host.
.end_defmessage

.defmessage host :name-as-file-computer
Returns the name to print in pathnames on this host (assuming it
supports files).  This is likely to be a short nickname of the host.
.end_defmessage

.defmessage host :short-name
Returns the shortest known nickname for this host.
.end_defmessage

.defmessage host :pathname-host-namep string
Returns 3t* if 2string* is recognized as a name for this host for
purposes of pathname parsing.
.end_defmessage

.defmessage host :system-type
Returns the operating system type symbol for this host.
See (host-table).
.end_defmessage

.defmessage host :network-type
Returns the symbol for one network that this host is connected to,
or 3nil* if it is not connected to any.  3:chaos* is preferred if it
is one of the possible values.
.end_defmessage

.defmessage host :network-typep network
Returns 3t* if the host is connected to the specified network.
.end_defmessage

.defmessage host :open-streams
Returns a list of all the open file streams for files on this host.
.end_defmessage

.defmessage host :close-all-files
Closes all file streams open for files on this host.
.end_defmessage

.defmessage host :generic-base-type type-component
Returns the type component for a generic pathname assuming it is being
made from a pathname whose type component is the one specified.
.end_defmessage

@section Maclisp Conversion

.cindex namelists (Maclisp compatibility)
.cindex Maclisp file manipulation

This section briefly discusses how to convert from Maclisp I/O and filename
functions to the corresponding but often more general Lisp Machine ones.

The functions 3load*, 3open*, 3probef*, 3renamef*, and 3deletef*
are upward compatible.  Most of them take optional additional arguments to
do additional things, usually connected with error handling.
Where Maclisp wants to see a file name in the form of a symbol or a list,
the Lisp Machine will accept those or a string or a pathname object.
3probef* returns a pathname or 3nil* rather than a namelist or 3nil*.

3load* keeps defaults, which it updates from the file name it is given.

The old-I/O functions 3uread*, 3crunit*, etc. do not exist in the Lisp Machine.
3fasload* exists but is a function rather than a special form.

There is a special form, 3with-open-file*, which should replace most calls
to 3open*.  See (with-open-file-fun).

The functions for manipulating file names themselves are different.  The system
will accept a namelist as a pathname, but will never create a namelist.
3mergef* is replaced by 3fs:merge-pathname-defaults*.
3defaultf* is replaced by 3fs:default-pathname* or 3fs:set-default-pathname*,
depending on whether it is given an argument.
3namestring* is replaced by the 3:string-for-printing* message to a pathname,
or the 3string* function.
3namelist* is approximately replaced by 3fs:parse-pathname*.
3(status udir)* and 3(status homedir)* are approximately replaced by 3fs:user-homedir*.
The 3truename* function is replaced by the 3:truename* stream operation,
which returns a pathname containing the actual name of the file open on that
stream.
The 3directory* and 3allfiles* functions are replaced by 3fs:directory-list*.

@section Examples

The following examples illustrate some of the rules of parsing and
merging.  They assume that the default host is an ITS host named
3AI*.

If we parse the string 3"AI:COMMON;NOMEN 5"* (by calling
3fs:parse-pathname*), we get back a pathname that prints as
3#<ITS-PATHNAME "AI: COMMON; NOMEN 5">*.  Its host is 3"AI"*, its
device is 3"DSK"* (because of the rule that when you specify a host
and don't specify a device, the standard file-storage device for that host is used),
its directory is 3"COMMON"*,
its name is 3"NOMEN"*, its type is nonexistent (3:unspecific*), and its
version is 35*.  Call this pathname 2p*.

Parsing just the string 3"foo"* returns a pathname that prints as
3#<ITS-PATHNAME "AI: FOO">*.  The host is 3"AI"*, the name is
3"FOO"*, and all the other components are unspecified, i.e. 3nil*.

If we merge this with 2p* (by calling 3fs:merge-pathname-defaults*
with this pathname as its first argument and 2p* as its second), the
result is a pathname that prints as 3#<ITS-PATHNAME "AI: COMMON; FOO
>">*, with host 3"AI"*, device 3"DSK"*, directory 3"COMMON"*,
name 3"FOO"*, type 3:unspecific*, and version 3:newest*.  This is
because of the rule that when a name is explicitly specified, the type
and version of the defaults are ignored.  The version, 35*, was
ignored, and the version of the result came from the 2default-version*
argument to 3fs:merge-pathname-defaults*, which had the value
3:newest*.  The type, similarly, came from the 2default-type*
argument, which had the value 3:unspecific*.

Parsing 3"FOO BAR"* returns a pathname that prints as 3#<ITS-PATHNAME
"AI: FOO BAR">*.  It has host 3"AI"*, name 3"FOO"*, and type
3"BAR"*; the directory is 3nil* and the version is 3:newest*.
Merging this with 2p* gives a pathname that prints as 3#<ITS-PATHNAME
"AI: COMMON; FOO BAR">*; it has host 3"AI"*, device 3"DSK"*,
directory 3"COMMON"*, name 3"FOO"*, type 3"BAR"*, and version
3:newest*.  If we ask for the generic pathname of this new pathname,
what we get prints exactly the same, but one of its components is
different: its version is 3:unspecific*.  This difference does not
appear in the printed representation because ITS filenames cannot convey
both a meaningful type and a meaningful version number at the same time.

@chapter "Packages"
'cindex package
.setq package section-page
.setq package-chapter chapter-number
@section "The Need for Multiple Contexts"

	A Lisp program is a collection of function definitions.
The functions are known by their names, and so each must have its
own name to identify it.  Clearly a programmer must not use the same
name for two different functions.

	The Lisp Machine consists of a huge Lisp environment, in which many
programs must coexist. All of the "operating system", the compiler, the
editor, and a wide variety of programs are provided in the initial
environment.  Furthermore, every program which the user uses during
his session must be loaded into the same environment.  Each of these
programs is composed of a group of functions; apparently each function
must have its own distinct name to avoid conflicts.  For example, if
the compiler had a function named 3pull*, and the user loaded a program
which had its own function named 3pull*, the compiler's 3pull* would be
redefined, probably breaking the compiler.

	It would not really be possible to prevent these conflicts,
since the programs are written by many different people who could
never get together to hash out who gets the privilege of using
a specific name such as 3pull*.

	Now, if we are to enable two programs to coexist in the Lisp
world, each with its own function 3pull*, then each program must have
its own symbol named "3pull*", because there can't be two function
definitions on the same symbol.  This means that separate "name
spaces"--mappings between names and symbols--must be provided for
the two programs.  The package system is designed to do just that.

	Under the package system, the author of a program or a group
of closely related programs identifies them together as a "package".
The package system associates a distinct name space with each package.

	Here is an example: suppose there are two programs named 3chaos*
and 3arpa*, for handling the Chaosnet and Arpanet respectively.  The
author of each program wants to have a function called 3get-packet*,
which reads in a packet from the network (or something).  Also, each
wants to have a function called 3allocate-pbuf*, which allocates the
packet buffer.  Each "get" routine first allocates a packet buffer,
and then reads bits into the buffer; therefore, each version of
3get-packet* should call the respective version of 3allocate-pbuf*.

	Without the package system, the two programs could not coexist
in the same Lisp environment.  But the package feature can be used to
provide a separate name space for each program.  What is required is
to declare a package named 3chaos* to contain the Chaosnet program, and
another package 3arpa* to hold the Arpanet program.  When the Chaosnet
program is read into the machine, its symbols would be entered in the
3chaos* package's name space.  So when the Chaosnet program's
3get-packet* referred to 3allocate-pbuf*, the 3allocate-pbuf* in the 3chaos*
name space would be found, which would be the 3allocate-pbuf* of the
Chaosnet program--the right one.  Similarly, the Arpanet program's
3get-packet* would be read in using the 3arpa* package's name space and
would refer to the Arpanet program's 3allocate-pbuf*.

	To understand what is going on here, you should keep in mind
how Lisp reading and loading works.  When a file is gotten into the
Lisp Machine, either by being read or by being fasloaded, the file itself
obviously cannot contain Lisp objects; it contains printed representations
of those objects.  When the reader encounters a printed representation of a symbol,
it calls 3intern* to look up that string in some name space and find
a corresponding symbol.  The package system arranges that the correct
name space is used whenever a file is loaded.

@section "The Organization of Name Spaces"

	We could simply let every name space be implemented as one
obarray, e.g. one big table of symbols.  The problem with this is
that just about every name space wants to include the whole
Lisp language: 3car*, 3cdr*, and so on should be available to every
program.  We would like to share the main Lisp system between
several name spaces without making many copies.

	Instead of making each name space be one big array,
we arrange packages in a tree.  Each package has a
"superpackage" or "parent", from which it "inherits" symbols.  Also,
each package has a table, or "obarray", of its own additional
symbols.  The symbols belonging to a package are simply those in the
package's own obarray, followed by those belonging to the
superpackage.  The root of the tree of packages is the package called
3global*, which has no superpackage.  3global* contains 3car* and 3cdr* and
all the rest of the standard Lisp system.  In our example, we might
have two other packages called 3chaos* and 3arpa*, each of which would
have 3global* as its parent.  Here is a picture of the resulting tree
structure:
.lisp
                    global
                       |
          /----------------------------\
          |                            |
        chaos                         arpa
.end_lisp

	In order to make the sharing of the 3global* package work, the
3intern* function is made more complicated than in basic Lisp.  In
addition to the string or symbol to intern, it must be told which
package to do it in.  First it searches for a symbol with the
specified name in the obarray of the specified package.  If nothing is
found there, 3intern* looks at its superpackage, and then at the
superpackage's superpackage, and so on, until the name is found or a
root package such as 3global* is reached.
When 3intern* reaches the root package, and doesn't find the symbol there either,
it decides that there is no symbol known with that name, and adds a
symbol to the originally specified package.

	Since you don't normally want to worry about specifying
packages, 3intern* normally uses the "current" package, which is the
value of the symbol 3package*.  This symbol serves the purpose of the
symbol 3obarray* in Maclisp.

	Here's how that works in the above example.  When the Chaos
net program is read into the Lisp world, the current package would be
the 3chaos* package.  Thus all of the symbols in the Chaosnet program
would be interned on the 3chaos* package.  If there is a reference to
some well known global symbol such as 3append*, 3intern* would look for
"3append*" on the 3chaos* package, not find it, look for "3append*" on
3global*, and find the regular Lisp 3append* symbol, and return that.  If,
however, there is a reference to a symbol which the user made up
himself (say it is called 3get-packet*), the first time he uses it,
3intern* won't find it on either 3chaos* nor 3global*.  So 3intern* will make
a new symbol named 3get-packet*, and install it on the 3chaos* package.
When 3get-packet* is referred to later in the Chaosnet program, 3intern*
will find 3get-packet* on the 3chaos* package.

	When the Arpanet program is read in, the current package would
be 3arpa* instead of 3chaos*.  When the Arpanet program refers
to 3append*, it gets the 3global* one; that is, it shares the same one
that the Chaosnet program got.  However, if it refers to 3get-packet*,
it will 2not* get the same one the Chaosnet program got, because
the 3chaos* package is not being searched.  Rather, the 3arpa* and 3global*
packages are getting searched.  So 3intern* will create a new 3get-packet*
and install it on the 3arpa* package.

	So what has happened is that there are two 3get-packet*s: one for
3chaos* and one for 3arpa*.  The two programs are loaded together without name
conflicts.

@section "Shared Programs"

	Now, a very important feature of the Lisp Machine is that of
"shared programs"; if one person writes a function to, say, print
numbers in Roman numerals, any other function can call it to print
Roman numerals.  This contrasts sharply with PDP-10 system programs,
in which Roman numerals have been independently reimplemented several
times (and the ITS filename parser several dozen times).

	For example, the routines to manipulate a robot arm might be a
separate program, residing in a package named 3arm*.  If we
have a second program called 3blocks* (the blocks world, of course)
which wanted to manipulate the arm, it would want to call functions
which are defined on the 3arm* obarray, and therefore not in 3blocks*'s
own name space.  Without special provision, there would be no way for
any symbols not in the 3blocks* name space to be part of any 3blocks*
functions.

	The colon character ("3:*") has a special meaning to the Lisp
reader.  When the reader sees a colon preceeded by the name of a package,
it will read in the next Lisp object with 3package* bound to that package.
The way 3blocks* would
call a function named 3go-up* defined in 3arm* would be by asking to call
3arm:go-up*, because 3"go-up* would be interned on the 3arm* package.
What 3arm:go-up* means precisely is "the symbol named 3go-up* in
the name space of the package 3arm*."

	Similarly, if the 3chaos* program wanted to refer to the 3arpa*
program's 3allocate-pbuf* function (for some reason), it would simply
call 3arpa:allocate-pbuf*.

	An important question which should occur at this point is how
the names of packages are associated with their obarrays and other
data.  This is done by means of the "refname-alist" which each package
has.  This alist associates strings called 2reference names* or 2refnames*
with the packages they
name.  Normally, a package's refname-alist contains an entry for each
subpackage, associating the subpackage with its name.  In addition,
every package has its own name defined as a refname, referring to
itself.  However, the user can add any other refnames, associating
them with any packages he likes.  This is useful when multiple versions
of a program are loaded into different packages.  Of course, each
package inherits its superpackage's refnames just as it does symbols.

	In our example, since 3arm* is a subpackage of 3global*, the name
3arm* is on 3global*'s refname-alist, associated with the 3arm* package.
Since 3blocks* is also a subpackage of 3global*, when 3arm:go-up* is seen
the string "3arm*" is found on 3global*'s refname alist.

	When you want to refer to a symbol in a package which you and
your superpackages have no refnames for--say, a subpackage named 3foo*
of a package named 3bar* which is under 3global*--you can use multiple
colons.  For example, the symbol 3finish* in that package 3foo* could be
referred to as 3foo:bar:finish*.  What happens here is that the second
name, 3bar*, is interpreted as a refname in the context of the package
3foo*.

@section "Declaring Packages"
.setq declaring-packages section-page
.cindex declaring packages
.cindex package declarations

	Before any package can be referred to or loaded, it must be declared.
This is done with the special form 3package-declare*, which tells the package system
all sorts of things, including the name of the package, the place in the
package hierarchy for the new package to go, its estimated size,
and some of the symbols which belong in it.

  Here is a sample declaration:
.lisp
(package-declare foo global 1000
       ()
       (shadow array-push adjust-array-size)
       (extern foo-entry))
.end_lisp

	What this declaration says is that a package named 3foo* should be
created as an inferior of 3global*, the package which contains advertised
global symbols.  Its obarray should initially be large enough to hold 1000
symbols, though it will grow automatically if that isn't enough.
Unless there is a specific reason to do otherwise, you should make all
of your packages direct inferiors of 3global*.  The size you give is
increased slightly to be a good value for the hashing algorithm used.

	After the size comes the "file-alist", which is given as 3()*
in the example.  This is an obsolete feature which is not normally used.
The "system"-defining facilities should be used instead.  See (system-system).

	Finally, the 3foo* package "shadows" 3array-push* and 3adjust-array-size*,
and "externs" 3foo-entry*.  What shadowing means is that the 3foo* package
should have its own versions of those symbols, rather than inheriting
its superpackage's versions.  Symbols by these names will be added to the 3foo*
package even though there are symbols on 3global* already with those names.
This allows the 3foo* package to redefine
those functions for itself without redefining them in the 3global*
package for everyone else.  What externing means is that the 3foo*
package is allowed to redefine 3foo-entry* as inherited from the 3global*
package, so that it 2is* redefined for everybody.  If 3foo* attempts to
redefine a function such as 3car* which is present in the 3global* package
but neither shadowed nor externed, confirmation from the user will be
requested.

	Note that externing doesn't actually put any symbols into the 3global*
package.  It just asserts permission to redefine symbols already there.
This is deliberate; the intent is to enable the maintainers of the
3global* package to keep control over what symbols are present in it.
Because inserting a new symbol into the 3global* package can cause trouble
to unsuspecting programs which expect that symbol to be private, this is
not supposed to be done in a decentralized manner by programs written by
one user and used by another unsuspecting user.
Here is an example of the trouble that could be caused:
if there were two user programs, each with a function named 3move-square*,
and 3move-square* were put on the 3global* package, all of a sudden
the two functions would share the same symbol, resulting in a name conflict.
While all the definitions of the functions in 3global* are actually
supplied by subpackages which extern them (3global* contains no files of
its own), the list of symbol names is centralized in one place, the file
3"AI: LISPM2; GLOBAL >"*, and this file is not changed without notifying everyone,
and updating the documentation in this manual.

	Certain other things may be found in the declarations of various internal system
packages.  They are arcane and needed only to compensate for the fact
that parts of those packages are actually loaded before the package
system is.  They should not be needed by any user package.

	Your package declarations should go into separate files containing
only package declarations.  Group them however you like, one to a file
or all in one file.  Such files can be read with 3load*.  It doesn't
matter what package you load them into, so use 3user*, since that has to
be safe.

	If the declaration for a package is read in twice, no harm is done.
If you edit the size to replace it with a larger one, the package will
be expanded.  At the moment, however, there is no way to change the list of
shadowings or externals;  such changes will be ignored.  Also, you can't
change the superpackage.  If you edit the superpackage name and read the
declaration in again, you will create a new, distinct package without
changing the old one.

.defmac package-declare
The 3package-declare* macro is used to declare a package to the package
system.  Its form is:
.lisp
(package-declare 2name* 2superpackage* 2size*
		 2file-alist* 2option-1* 2option-2* ...)
.end_lisp
The interpretation of the declaration is complicated; see (declaring-packages).
.end_defmac

.defun describe-package package-name
3(describe-package 2package-name*)* is equivalent to
3(describe (pkg-find-package 2package-name*))*;
that is, it describes the package whose name is 2package-name*.
.end_defun

@section "Packages and Writing Code"

	The unsophisticated user need never be aware of the existence of
packages when writing his programs.  He should just load all of his
programs into the package 3user*, which is also what console type-in is
interned in.  Since all the functions which users are likely to need are
provided in the 3global* package, which is 3user*'s superpackage, they are
all available.  In this manual, functions which are not on the 3global*
package are documented with colons in their names, so typing the name
the way it is documented will work.

	However, if you are writing a generally useful tool, you should
put it in some package other than 3user*,
so that its internal functions will not conflict with
names other users use.  Whether for this reason or for any other, if you
are loading your programs into packages other than 3user* there are
special constructs that you will need to know about.

	One time when you as the programmer must be aware of the existence of
packages is when you want to use a function or variable in another
package.  To do this, write the name of the package, a colon, and then
the name of the symbol, as in 3eine:ed-get-defaulted-file-name*.  You will
notice that symbols in other packages print out that way, too.
Sometimes you may need to refer to a symbol in a package whose superior
is not 3global*.  When this happens, use multiple colons, as in
3foo:bar:ugh*, to refer to the symbol 3ugh* in the package named 3bar* which
is under the package named 3foo*.

	Another time that packages intrude is when you use a "keyword": when
you check for 3eq*ness against a constant symbol, or pass a constant
symbol to someone else who will check for it using 3eq*.  This includes
using the symbol as either argument to 3get*.  In such cases, the usual
convention is that the symbol should reside in the 3user* package,
rather than in the package with which its meaning is associated.  To
make it easy to specify 3user*, a colon before a symbol, as in 3:select*,
is equivalent to specifying 3user* by name, as in 3user:select*.
Since the 3user* package has no subpackages, putting symbols into it will not cause
name conflicts.

	Why is this convention used?  Well, consider the function
3make-array*, which takes one required argument followed by
any number of keyword arguments.
For example,
.lisp
(make-array 100 'leader-length 10 'type art-string)
.end_lisp
specifies, after the first required argument, two options with
names 3leader-length* and 3type* and values 310* and 3art-string*.
The file containing this
function's definition is in the 3system-internals* package, but the
function is available to everyone without the use of a colon prefix
because the symbol 3make-array* is itself inherited from 3global*.
But all the keyword names, such as 3type*, are short and should not have
to exist in 3global*.  However, it would be a shame if all callers of
3make-array* had to specify 3system-internals*: before the name of
each keyword.  After all, those callers can include programs loaded into
3user*, which should by rights not have to know about packages at all.
Putting those keywords in the 3user* package solves this problem.
The correct way to type the above form would be
.lisp
(make-array 100 ':leader-length 10 ':type art-string)
.end_lisp

	Exactly when should a symbol go in 3user*?  At least, all symbols
which the user needs to be able to pass as an argument to any function
in 3global* must be in 3user* if they aren't themselves in 3global*.
Symbols used as keywords for arguments by any function should usually
be in 3user*, to keep things consistent.  However, when a program uses a
specific property name to associate its own internal memoranda with
symbols passed in from outside, the property name should belong to the
program's package, so that two programs using the same property name
in that way don't conflict.

@section "Shadowing"

	Suppose the user doesn't like the system 3nth* function;  he
might be a former Interlisp user, and expect a completely
different meaning from it.  Were he to say 3(defun nth ---)* in his
program (call it 3snail*) he would clobber the 3global* symbol
named "3nth*", and so affect the "3nth*" in everyone else's name
space. (Actually, if he had not "externed" the symbol "3nth*", the
redefinition would be caught and the user would be warned.)

	In order to allow the 3snail* package to have its own 3(defun nth
---)* without interfering with the rest of the Lisp environment, it
must "shadow" out the global symbol "3nth*" by putting a new symbol
named "3nth*" on its own obarray.  Normally, this is done by writing
3(shadow nth)* in the declaration of the 3snail* package.  Since
3intern* looks on the subpackage's obarray before 3global*, it will find
the programmer's own 3nth*, and never the global one.  Since the global
one is now impossible to see, we say it has been "shadowed."

	Having shadowed 3nth*, if it is sometimes necessary to refer to the
global definition, this can be done by writing 3global:nth*.  This works
because the refname 3global* is defined in the 3global* package as a name
for the 3global* package.  Since 3global* is the superpackage of the
3snail* package, all refnames defined by 3global*, including 3"global"*,
are available in 3snail*.

@section "Packages and Interning"

	The function 3intern* allows you to specify a package as the second
argument.  It can be specified either by giving the package object
itself, or by giving a string or symbol which is the name of the
package.  3intern* returns three values.  The first is the interned symbol.  The
second is 3t* if the symbol is old (was already present, not just added to
the obarray).  The third is the package in which the symbol was actually
found.  This can be either the specified package or one of its
superiors.

	When you don't specify the second argument to 3intern*, the current
package, which is the value of the symbol 3package*, is used.  This
happens, in particular, when you call 3read*.  Bind the symbol 3package*
temporarily to the desired package, before calling things which call
3intern*, when you want to specify the package.  When you do this, the
function 3pkg-find-package*, which converts a string into the package it
names, may be useful.  While most functions that use packages will do
this themselves, it is better to do it only once when 3package* is bound.
The function 3pkg-goto* sets 3package* to a package specified by a string.
You shouldn't usually need to do this, but it can be useful to "put
the keyboard inside" a package when you are debugging.

.defvar package
The value of 3package* is the current package; many functions which
take packages as optional arguments default to the value of 3package*,
including 3intern* and related functions.
.end_defvar

.defun pkg-goto &optional pkg
2pkg* may be a package or the name of a package.
2pkg* is made the current package.  It defaults to the 3user* package.
.end_defun

.defmac pkg-bind pkg body...
2pkg* may be a package or a package name.  The forms of the 2body*
are evaluated sequentially with the variable 3package* bound to the
package named by 2pkg*.
.lisp
.exdent 96 Example:
(pkg-bind "zwei"
	  (read-from-string function-name))
.end_lisp
.end_defmac

	There are actually four forms of the 3intern* function:  regular 3intern*,
3intern-soft*, 3intern-local*, and 3intern-local-soft*.  3-soft* means that the
symbol should not be added to the package if there isn't already one;
in that case, all three values are 3nil*.  3-local* means that the
superpackages should not be searched.  Thus, 3intern-local* can be used to
cause shadowing.  3intern-local-soft* is a good low-level primitive for
when you want complete control of what to search and when to add symbols.
All four forms of 3intern* return the same three values, except that
the 3soft* forms return 3nil nil nil* when
the symbol isn't found.

.defun intern string &optional (pkg 3package*)
3intern* searches 2pkg* and its superpackages sequentially, looking
for a symbol whose print-name is equal to 2string*.  If it finds
such a symbol, it returns three values: the symbol, 3t*, and the package
on which the symbol is interned.  If it does not find one, it
creates a new symbol with a print name of 2string*, interns it into the
package 2pkg*,
and returns the new symbol, 3nil*, and 2pkg*.

If 2string* is not a string but a symbol, 3intern* searches for a symbol
with the same print-name.  If it doesn't find one, it interns
2string*--rather than a newly-created symbol--in 2pkg*
(even if it is also interned in some other package) and returns it.

Note: 3intern* is sensitive to case; that is, it will consider two
character strings different even if the only difference is one of
upper-case versus lower-case (unlike most string comparisons elsewhere
in the Lisp Machine system).  The reason that symbols get converted
to upper-case when you type them in is that the reader converts
the case of characters in symbols; the characters are converted to
upper-case before 3intern* is ever called.  So if you call 3intern*
with a lower-case 3"foo"* and then with an upper-case 3"FOO"*, you
won't get the same symbol.
.end_defun

.defun intern-local string &optional (pkg 3package*)
3intern* searches 2pkg* (but 2not* its superpackages), looking
for a symbol whose print-name is equal to 2string*.  If it finds
such a symbol, it returns three values: the symbol, 3t*, and 2pkg*
If it does not find one, it
creates a new symbol with a print name of 2string*, and
returns the new symbol, 3nil*, and 2pkg*.

If 2string* is not a string but a symbol, and no symbol with that print-name
is already interned in 2pkg*, 3intern-local* interns
2string*--rather than a newly-created symbol--in 2pkg*
(even if it is also interned in some other package) and returns it.
.end_defun

.defun intern-soft string &optional (pkg 3package*)
3intern* searches 2pkg* and its superpackages sequentially, looking
for a symbol whose print-name is equal to 2string*.  If it finds
such a symbol, it returns three values: the symbol, 3t*, and the package
on which the symbol is interned.  If it does not find one, it returns
3nil*, 3nil*, and 3nil*.
.end_defun

.defun intern-local-soft string &optional (pkg 3package*)
3intern* searches 2pkg* (but 2not* its superpackages), looking
for a symbol whose print-name is equal to 2string*.  If it finds
such a symbol, it returns three values: the symbol, 3t*, and 2pkg*
If it does not find one, it returns 3nil*, 3nil*, and 3nil*.
.end_defun

.setq symbol-package-cell-discussion page
Each symbol remembers which package it belongs to.  While you can
intern a symbol in any number of packages, the symbol will only remember
one:  normally, the first one it was interned in, unless you clobber it.
This package is available as 3(symbol-package 2symbol*)*.
If the value is 3nil*, the symbol believes that it is uninterned.

	The printer also implicitly uses the value of 3package* when
printing symbols.  If slashification is on, the printer tries to print
something such that if it were given back to the reader, the same object would be produced.
If a symbol which is not in the current name space were just printed as
its print name and read back in, the reader would intern it on the wrong
package, and return the wrong symbol.  So the printer figures out the right
colon prefix so that if the symbol's printed representation were read back
in to the same package, it would be interned correctly.  The prefix is
only printed if slashification is on, i.e. 3prin1* prints it
and 3princ* does not.

.defun remob symbol &optional package
3remob* removes 2symbol* from 2package* (the name means "REMove from OBarray").
2symbol* itself is unaffected, but 3intern* will no longer find
it on 2package*.  3remob* is always "local", in that it removes only from the specified
package and not from any superpackages.  It returns 3t* if the symbol was
found to be removed. 2package* defaults to the contents of the symbol's
package cell, the package it is actually in.  (Sometimes a symbol
can be in other packages also, but this is unusual.)
.end_defun

.defun symbol-package symbol
Returns the contents of 2symbol*'s package cell, which is the
package which owns 2symbol*, or 3nil* if 2symbol* is uninterned.
.end_defun

.defun package-cell-location symbol
Returns a locative pointer to 2symbol*'s package cell.  It is preferable to write
.lisp
(locf (symbol-package 2symbol*))
.end_lisp
rather than calling this function explicitly.
.end_defun

.defun mapatoms function &optional (package 3package*) (superiors-p 3t*)
2function* should be a function of one argument.  3mapatoms* applies
2function* to all of the symbols in 2package*.  If 2superiors-p* is
3t*, then the function is also applied to all symbols in 2package*'s
superpackages.  Note that the function will be applied to shadowed symbols
in the superpackages, even though they are not in 2package*'s name space.
If that is a problem, 2function* can try applying 3intern*
in 2package* on each symbol it gets, and ignore it if it is not 3eq*
to the result of 3intern*; this measure is rarely needed.
.end_defun

.defun mapatoms-all function &optional (package "3global*")
2function* should be a function of one argument.
3mapatoms-all* applies 2function* to all of the symbols
in 2package* and all of 2package*'s subpackages.  Since
2package* defaults to the 3global* package, this
normally gets at all of the symbols in all packages.
It is used by such functions as 3apropos* and 3who-calls* (see (apropos-fun))
.lisp
.exdent 96 Example:
(mapatoms-all
  (function
    (lambda (x)
      (and (alphalessp 'z x)
           (print x)))))
.end_lisp
.end_defun

.defun pkg-create-package name &optional (super 3package*) (size 3200*)
3pkg-create-package* creates and returns a new package.  Usually packages are created
by 3package-declare*, but sometimes it is useful to create
a package just to use as a hash table for symbols, or for some other
reason.

If 2name* is a list, its first element is taken as the package name
and the second as the program name; otherwise, 2name* is taken as both.
In either case, the package name and program name are coerced to strings.
2super* is the superpackage for this package; it may be 3nil*,
which is useful if you only want the package as a hash table, and don't
want it to interact with the rest of the package system.  2size* is
the size of the package; as in 3package-declare* it is rounded up
to a "good" size for the hashing algorithm used.
.end_defun

.defun pkg-kill pkg
2pkg* may be either a package or the name of a package.  The package
should have a superpackage and no subpackages.  3pkg-kill* takes
the package off its superior's subpackage list and refname alist.
.end_defun

.defun pkg-find-package x &optional (create-p 3nil*) (under "3global*")
3pkg-find-package* tries to interpret 2x* as a package.
Most of the functions whose descriptions say "... may be either
a package or the name of a package" call 3pkg-find-package* to interpret
their package argument.

If 2x* is a package, 3pkg-find-package* returns it.  Otherwise it
should be a symbol or string, which is taken to be the name of a package.
The name is looked up on the refname alists of 3package* and its
superpackages, the same as if it had been typed as part of a colon prefix.
If this finds the package, it is returned.  Otherwise, 2create-p*
controls what happens.  If 2create-p* is 3nil*, an error is signalled.
If 2create-p* is 3:find*, 3nil* is returned.  If 2create-p* is
3:ask* the user is asked whether to create it.  Otherwise, a new package
is created, and installed as an inferior of 2under*.
.end_defun

	A package is implemented as a structure, created by 3defstruct*.
The following accessor macros are available on the 3global* package:
.ftable 3 0 1500
.item pkg-name
The name of the package, as a string.
.item pkg-refname-alist
The refname alist of the package, associating strings with packages.
.item pkg-super-package
The superpackage of the package.
.end_table

@section "Status Information"

	The current package--where your type-in is being interned--is
always the value of the symbol 3package*.  A package is a named
structure which prints out nicely, so examining the value of
3package* is the best way to find out what the current package is.
(It is also displayed in the who-line.)
Normally, it should be 3user*, except when inside
compilation or loading of a file belonging to some other package.

  To get more information on the current package or any other, use the
function 3describe-package*.  Specify either a package object or a string
which is a refname for the desired package as the argument.  This will
print out everything except a list of all the symbols in the package.
If you want 2that*, use 3(mapatoms 'print 2package* nil)*.
3describe* of a package will call 3describe-package*.

@section "Packages, Loading, and Compilation"

	It's obvious that every file has to be loaded into the right package
to serve its purpose.  It may not be so obvious that every file must be
compiled in the right package, but it's just as true.  Luckily, this
usually happens automatically.

	When you have mentioned a file in a package's file-alist, requesting
to compile that file with 3qc-file* or loading it with 3load* automatically
selects that package to perform the operation.

	The system can get the package of a source file from its "file
property list" (see (file-property-list)).
For instance, you can put at the front of your file
a line such as "; -*- Mode:Lisp; Package:System-Internals -*-".  The
compiler puts the package name into the QFASL file for use when it is loaded.
If a file is not mentioned in a package's file-alist and doesn't
have such a package specification in it, the system loads it into
the current package, and tells you what it did.

@section "Subpackages"

	Usually, each independent program occupies one package, which is
directly under 3global* in the hierarchy.  But large programs, such as
Macsyma, are usually made up of a number of sub-programs, which are
maintained by a small number of people.  We would like each
sub-program to have its own name space, since the program as a whole
has too many names for anyone to remember.  So, we can make each
sub-program into its own package.  However, this practice requires
special care.

	It is likely that there will be a fair number of functions and
symbols which should be shared by all of the sub-programs of Macsyma.
These symbols should reside in a package named 3macsyma*, which would be
directly under 3global*.
Then, each part of 3macsyma* (which might be called 3sin*,
3risch*, 3input*, and so on) would have its own package, with the 3macsyma*
package as its superpackage.  To do this, first declare the 3macsyma*
package, and then declare the 3risch*, 3sin*, etc. packages, specifying
3macsyma* as the superpackage for each of them.  This way, each
sub-program gets its own name space.  All of these declarations would probably
be together in a file called something like "macpkg".

	However, to avoid a subtle pitfall, it is
necessary that the 3macsyma* package itself contain no
files;  only a set of symbols specified at declaration time.  This
list of symbols is specified using 3shadow* in the declaration of the
3macsyma* package.  At the same time, the file-alist specified in the
declaration must be 3nil* (otherwise, you will not be allowed to create
the subpackages).  The symbols residing in the 3macsyma* package can
have values and definitions, but these must all be supplied by files
in 3macsyma*'s subpackages (which must "3extern*" those symbols as
necessary).  Note that this is exactly the same treatment that 3global*
receives:  all its functions are actually defined in files which are
loaded into 3system-internals (si), compiler*, etc.

	To demonstrate the full power and convenience of
this scheme, suppose there were a second huge program called 3owl* which
also had a subprogram called 3input* (which, presumably, does all of the
3input*ting for 3owl*), and one called 3database*.  Then a picture of the
hierarchy of packages would look like this:
.lisp
			global
			   |
		/--------------------------------\
		|                                |
	     macsyma		                owl
		|                                |
 -----------------------------           -----------------------
  | | |      |       |       |           |         |       | | |
(others)   risch    sin    input       input   database   (others)
.end_lisp

	Now, the 3risch* program and the 3sin* program both do integration, and
so it would be natural for each to have a function called 3integrate*.
From inside 3sin*, 3sin's* 3integrate* would be referred to as "3integrate*"
(no prefix needed), while 3risch's* would be referred to as
"3risch:integrate*".  Similarly, from inside 3risch*, 3risch's* own
3integrate* would be called "3integrate*", whereas 3sin's* would be referred
to as "3sin:integrate*".

	If 3sin*'s 3integrate* were a recursive function, the implementor would
be referring to it from within 3sin* itself, and would be happy that he
need not type out "3sin:integrate*" every time; he can just say
"3integrate*".

	From inside the 3macsyma* package or any of its other sub-packages,
the two functions would be referred to as "3sin:integrate*" and as
"3risch:integrate*".  From
anywere else in the hierarchy, they would have to be called
"3macsyma:sin:integrate*" and "3macsyma:risch:integrate*".

	Similarly, assume that each of the 3input* packages has a function
called 3get-line*.  From inside 3macsyma* or any of 3macsyma's* subprograms
(other than 3input*), the relevant function would be called
3input:get-line*, and the irrelevant one 3owl:input:get-line*.  The
converse is true for 3owl* and its sub-programs.  Note that there is no
problem arising from the fact that both 3owl* and 3macsyma* have
subprograms of the same name (3input*).

	You might also want to put Macsyma's 3get-line* function on
the 3macsyma* package.  Then, from anywehere inside Macsyma, the function
would be called 3get-line*; from the 3owl* package and subpackages
it could be referred to as 3macsyma:get-line*.

@section "Initialization of the Package System"

	This section describes how the package system is initialized
when generating a new software release of the Lisp Machine system;
none of this should affect users.

	When the world begins to be loaded, there is no package system.
There is one "obarray", whose format is different from that used by
the package system.  After sufficiently much of the Lisp environment
is present for it to be possible to initialize the package system,
that is done.  At that time, it is necessary to split the symbols of
the old-style obarray up among the various initial packages.

  The first packages created by initialization are the most important
ones:  3global*, 3system*, 3user*, and 3system-internals*.  All
of the symbols already present are placed in one of those packages.  By
default, a symbol goes into 3system-internals*.  Only those placed on
special lists go into one of the others.  These lists are the file
3"AI: LISPM2; GLOBAL >"* of symbols which belong in 3global*, and
the file 3"AI: LISPM2; SYSTEM >"* of symbols which go in 3system*.

	After the four basic packages exist, the package system's
definition of 3intern* is installed, and packages exist.  Then, the
other initial packages 3format*, 3compiler*, 3zwei*, etc. are declared and
loaded in almost the normal
manner.  The exception is that a few of the symbols present before
packages exist really belong in one of these packages.  Their package
declarations contain calls to 3forward* and 3borrow*, which exist only for
this purpose and are meaningful only in package declarations, and are used
to move the symbols as appropriate.  These declarations are kept in
the file 3"AI: LISPM; PKGDCL >"*.

.defun globalize symbol &optional (package 3"global"*)
	Sometimes it will be discovered that a symbol which ought to be in
3global* is not there, and the file defining it has already been loaded,
thus mistakenly creating a symbol with that name in a package which
ought just to inherit the one from 3global*.  When this happens, you can
correct the situation by doing 3(globalize "2symbol-name*")*.  This
function creates a symbol with the desired name in 3global*, merges
whatever value, function definition, and properties can be found on
symbols of that name together into the new symbol (complaining if
there are conflicts), and forwards those slots of the existing symbols
to the slots of the new one using one-q-forward pointers, so that they
will appear to be one and the same symbol as far as value, function
definition, and property list are concerned.  They cannot all be made
3eq* to each other, but 3globalize* does the next-best thing:  it takes
an existing symbol from 3user*, if there is one, to put it in 3global*.
Since people who check for 3eq* are normally supposed to specify 3user*
anyway, they will not perceive any effect from moving the symbol from
3user* into 3global*.

	If 3globalize* is given a symbol instead of a string as argument,
the exact symbol specified is put into 3global*.  You can use this when
a symbol in another package, which should have been inherited from
3global*, is being checked for with 3eq*--as long as there are not 2two*
different packages doing so.  But, if the symbol is supposed to be in
3global*, there usually should not be.

	If the argument 2package* is specified, then the symbol is
moved into that package from all its subpackages, rather than into
3global*.
.end_defun

@section "Initial Packages"

The initially present packages include:

.table 3
.item global
Contains advertised global functions.
.item user
Used for interning the user's type-in.  Contains all keyword symbols.
.item sys 1or* system
Contains internal global symbols used by various system programs.
3global* is for symbols global to the Lisp language, while 3system*
is for symbols global to the Lisp Machine "operating system".
.item si 1or* system-internals
Contains subroutines of many advertised
system functions.  3si* is a subpackage of 3sys*.
.item compiler
Contains the compiler.  3compiler* is a subpackage
of 3sys*.
.item zwei
Contains the editor.
.item chaos
Contains the Chaosnet controller.
.item tv
Contains the window system.
.item format
Contains the function 3format* and its associated subfunctions.
.end_table
There are quite a few others, it would be pointless to list them all.

	Packages which are used for special sorts of data:
.table 3
.item fonts
Contains the names of all fonts.
.item format
Contains the keywords for 3format*, as well as the code.
.end_table

Here is a picture depicting the initial package hierarchy:
.lisp
                           global
                             |    
  /-----------------------------------------------------\
  |     |     |         |        |       |       |      |
user  zwei  chaos    system     tv     format  fonts   (etc)
                        |
                /--------------\
                |              |
         system-internals    compiler
.end_lisp

@c Remainder of this chapter deleted since it is wrong
.eof

@section "Multiple Instantiations of a Program"

	This isn't finished yet, which is why we don't say how to do
any of this.

	Suppose a maintainer of EINE (the Lisp Machine editor) has
made some changes to EINE, and would like to debug them.  He has a
problem: if he reads in the new version, which presumably may be full
of bugs, then he will not be able to do any editing!  This would be
annoying, since the editor is very useful.

	We would like both the regular and the experimental versions
of the editor to 2both* be loaded into the Lisp world.  In order for two
definitions of each editor function to coexist, we need to load the
new version into a separate package, which must have a different name
(not named "3eine*", like the package the original editor is in).  If
the test version's package is called "3test-eine*", then the user can
try it by calling 3(test-eine:ed)*, and edit it using 3(ed)*.

	However, there is a problem to be faced.  The editor redefines
a few entry-point functions (3ed*, 3edprop*, etc) which reside in 3global*.
If the test editor redefined them, the whole point of the separate
package would be lost.  So, the 3test-eine* package must 3shadow* all the
symbols which the regular 3eine* package 3extern*s.

	Further complications are needed to make it possible to test
one program using another instead of by hand.  Suppose that there is a
program named 3random* residing in its own package, and containing a
function named 3number*.  Suppose that we have a debugged program 3dp*
(Dissociated Press) which uses 3random:number*.  And now, we have
written a new version of 3random* and want to test it using 3dp*, without
installing it and breaking system tools which use 3random*.  What we
want to do is to load in a test version of 3random*, 3test-random*, and
also a 3test-dp* which will refer to it, to test it with.

	This can be done if we can make the 3test-dp* package
take references to 3random* as references to the 3test-random*
package.  All this takes is
an entry on 3test-dp*'s refname-alist, associating the name "3random*"
with the 3test-random* package.  Then, when 3random:number* is seen in the
course of reading in the old 3dp* program into 3test-dp*,
3test-random:number* will actually be used.  Note that normally 3test-dp*
wouldn't have an entry on its own refname-alist for "3random*";  it
would inherit the association from 3global*.  We are actually
"shadowing" in 3test-dp* the definition of "3random*" as a package refname
which is present in 3global*.  Here is what we will get.
.lisp
                            global  [random -> random]
                               |
      /-----------------------------------------------\
      |        |                      |               |
     dp  =>  random                test-dp  =>      test-random
                           [random -> test-random]
.end_lisp
("=>" indicates who calls whom;  "->" indicates a refname).

	So far, every package has had its own name as a refname for
itself.  A test package, however, shouldn't have its actual name as a
refname for itself, but the name its program expects:  "3random*", not
"3test-random*".  This is necessary to handle test packages with
subpackages right, together with shadowing.  In fact every package has
a "program name" as well as a "name".  For ordinary packages, they are
the same, but for a test package, the program name is identical to
that of the original package.

	Suppose we have the Macsyma program with all of its sub-packages as
described above. Further assume that the 3input* sub-program's author
has his own symbol named 3simp*, and he calls 3macsyma:simp*
in various places to get the
one in the 3macsyma* package.  Now, say someone wants to load an
experimental 3macsyma* into the machine: he would name the new obarray
3test-macsyma* or something.  In order to assure that the reference to
3macsyma:simp* is properly resolved, the refname-alist of 3test-macsyma*
must contain 3test-macsyma* under the name 3macsyma*.  This, finally,
is the reason why each package has a reference to itself on its refname-alist.

@chapter Maintaining Large Systems
.setq system-system section-page
.cindex system
.setq system-chapter chapter-number

When a program gets large, it is often desirable to split it up into
several files.  One reason for this is to help keep the parts of the
program organized, to make things easier to find.  It's also useful to
have the program broken into small pieces that are more convenient to
edit and compile.  It is particularly important to avoid the need to
recompile all of a large program every time any piece of it changes; if
the program is broken up into many files, only the files that have
changes in them need to be recompiled.

The apparent drawback to splitting up a program is that more "commands"
are needed to manipulate it.  To load the program, you now have to load
several files separately, insead of just loading one file.  To compile
it, you have to figure out which files need compilation, by seeing
which have been edited since they were last compiled, and then you have
to compile those files.

What's even more complicated is that files can have interdependencies.
You might have a file called "DEFS" that contains some macro
definitions (or flavor or structure definitions), and functions in
other files might use those macros.  This means that in order to
compile any of those other files, you must first load the file "DEFS"
into the Lisp environment, so that the macros will be defined and can
be expanded at compile time.  You'd have to remember this whenever you
compile any of those files.  Furthermore, if "DEFS" has changed, other
files of the program might need to be recompiled because the macros
might have changed and need to be re-expanded.

This chapter describes the 2system* facility, which takes care of all
these things for you.  The way it works is that you define a set of
files to be a 2system*, using the 3defsystem* special form,
described below.  This system definition says which files make up the
system, which ones depend on the presence of others, and so on.  You
put this system definition into its own little file, and then all you
have to do is load that file and the Lisp environment will know about
your system and what files are in it.  You can then use the
3make-system* function (see (make-system-fun)) to load in all the
files of the system, or recompile all the files that need compiling,
and so on.

The system facility is very general and extensible.  This chapter
explains how to use it and how to extend it.  This chapter also
explains the 2patch* facility, which lets you conveniently update a
large program with incremental changes, and how to save away Lisp
environments in disk partitions.

@section Defining a System

.defspec defsystem name (keyword args...)...
Defines a system named 2name*.  The options
selected by the keywords are explained in detail later.  In general,
they fall into two categories: properties of the system and
2transformations*.  A transformation is an operation such as compiling
or loading which takes one or more files and does something to them.
The simplest system is a set of files and a transformation to be
performed on them.
.end_defspec

.nopara
Here are a few examples.
.lisp
(defsystem mysys
  (:compile-load ("AI: GEORGE; PROG1" "AI: GEORG2; PROG2")))

(defsystem zmail
  (:name "ZMail")
  (:pathname-default "AI: ZMAIL;")
  (:package zwei)
  (:module defs "DEFS")
  (:module mult "MULT" :package tv)
  (:module main ("TOP" "COMNDS" "MAIL" "USER" "WINDOW"
		 "FILTER" mult "COMETH"))
  (:compile-load defs)
  (:compile-load main (:fasload defs)))

(defsystem bar
  (:module reader-macros "RDMAC")
  (:module other-macros "MACROS")
  (:module main-program "MAIN")
  (:compile-load reader-macros)
  (:compile-load other-macros (:fasload reader-macros))
  (:compile-load main-program (:fasload reader-macros
					other-macros)))
.end_lisp

The first example defines a new 2system* called 3mysys*, which
consists of two files, both of which are to be compiled and loaded.  The
second example is somewhat more complicated.  What all the options mean
will be specified shortly, but the primary difference is that there is a
file 3defs* which must be loaded before the rest of the files
(3main*) can be compiled.  The final example has two levels of dependency.
3reader-macros* must be compiled and loaded before 3other-macros* can be
compiled.  Both 3reader-macros* and 3other-macros* must then be loaded before
3main-program* can be compiled.

The 3defsystem* options other than transformations are:
.table 3 0 500
.kitem :name
Specifies a "pretty" version of the name for the system, for use in printing.

.kitem :short-name
Specified an abbreviated name used in constructing disk label comments
and in patch file names for some file systems.

.kitem :component-systems
Specifies the names of other systems used to make up this system.
Performing an operation on a system with component systems is equivalent
to performing the same operation on all the individual systems.  The format
is 3(:component-systems 2names*...)*.

.kitem :package
Specifies the package in which transformations are performed.  A package
specified here will override one in the 7-*-* line of the file in question.

.kitem :pathname-default
Gives a local default within the definition of the system for strings to be
parsed into pathnames.  Typically this specifies the directory, when all the
files of a system are on the same directory.

.kitem :patchable
Makes the system be a patchable system (see (patch-facility)).  An optional
argument specifies the directory to put patch files in.  The default is
the 3:pathname-default* of the system.

.kitem :initial-status
Specifies what the status of the system should be when 3make-system* is used
to create a new major version.  The default is 3:experimental*.  See
(patch-system-status) for further details.

.kitem :not-in-disk-label
Make a patchable system not appear in the disk label comment.  This
should probably never be specified for a user system.  It is used by
patchable systems internal to the main Lisp system, to avoid cluttering up
the label.

.kitem :module
'cindex module
Allows assigning a name to a set of files within the system.  This name
can then be used instead of repeating the filenames.  The format is
3(:module 2name* 2files* 2options*...)*.  2files* is usually
a list of filenames (strings).  In general, it is a
2module-specification*, which can be any of the following:
.table 1 0 500
.item a string
This is a file name.

.item a symbol
This is a module name.  It stands for all of the files which are in that module
of this system.

.item an 2external module component*
This is a list of the form 3(2system-name* 2module-names*...)*,
to specify modules in another system.  It stands for all of the files which
are in all of those modules.

.item a list of 2module components*
A module component is any of the above, or the following:

.item a list of file names
This is used in the case where the names of the input and output files
of a transformation are not related according to the standard naming
conventions, for example when a 3QFASL* file has a different name or
resides on a different directory than the source file.  The file names
in the list are used from left to right, thus the first name is the
source file.  Each file name after the first in the list is defaulted
from the previous one in the list.

To avoid syntactic ambiguity, this is allowed as a module component but not
as a module specification.
.end_table

The currently defined options for the 3:module* clause are
.table 3
.item :package
Overrides any package specified for the whole system for transformations performed
on just this module.
.end_table

In the second 3defsystem* example above, there are three modules.  The
first two each have only one file, and the third one (3main*) is made
up both of files and another module.  To take examples of the other
possibilities,
.lisp
(:module prog (("AI: GEORGE; PROG" "AI: GEORG2; PROG")))
(:module foo (defs (zmail defs)))
.end_lisp
The 3prog* module consists of one file, but it lives in two
directories, 3GEORGE* and 3GEORG2*.  If this were a Lisp program,
that would mean that the file 3"AI: GEORGE; PROG >"* would be compiled
into 3"AI: GEORG2; PROG QFASL"*.  The 3foo* module consists of two
other modules, the 3defs* module in the same system, and the 3defs*
module in the 3zmail* system.  It is not generally useful to
compile files that belong to other systems, thus this 3foo* module
would not normally be the subject of a transformation.
However, 2dependencies* (defined below) use modules and
need to be able to refer to (depend on) modules of other systems.
.end_table

.defun si:set-system-source-file system-name filename
This function specifies which file contains the 3defsystem* for the
system 2system-name*.  2filename* can be a pathname object or a
string.

Sometimes it is useful to say where the
definition of a system can be found without taking time to load that
file.  If 3make-system* is ever used on that system, the file whose
name has been specified will be loaded automatically.
.end_defun

@section Transformations

.cindex transformation
Transformations are of two types, simple and complex.  A simple
transformation is a single operation on a file, such as compiling it or
loading it.  A complex transformation takes the output from one
transformation and performs another transformation on it, for example,
loading the results of compilation.

The general format of a simple transformation is
3(2name* 2input* 2dependencies* 2condition*)*.
2input* is usually a module specification or another transformation whose output is used.
The transformation 2name* is to be performed on all the files in the module, or
all the output files of the other transformation.

2dependencies* and 2condition* are optional.

.cindex dependency
2dependencies* is a 2transformation specification*, either a list
3(2transformation-name* 2module-names*...)*, or a list of such lists.
A 2module-name* is either a symbol which is the name of a module in the current system,
or a list 3(2system-name* 2module-names*...)*.  A dependency declares that
all of the indicated transformations must be performed on the indicated modules
before the current transformation itself can take place.  Thus in
the zmail example above,  the 3defs* module must have the 3:fasload*
transformation performed on it before the 3:compile* transformation
can be performed on 3main*.

The dependency has to be a tranformation that was explicitly specified
as a transformation in the system definition, not just an action
that might have been performed by anything.  That is, if you have
a dependency 3(:fasload foo)*, it means that 3(fasload foo)* is
a tranformation of your system and you depend on that tranformation;
it does not simply mean that you depend on 3foo*'s being loaded.
Furthermore, it doesn't work if 3(:fasload foo)* was an implicit
piece of another tranformation.  For example, the following is
correct and will work:
.lisp
(defsystem foo
  (:module foo "FOO")
  (:module bar "BAR")
  (:compile-load (foo bar)))
.end_lisp
.nopara
but this doesn't work:
.lisp
(defsystem foo
  (:module foo "FOO")
  (:module bar "BAR")
  (:module blort "BLORT")
  (:compile-load (foo bar))
  (:compile-load blort (:fasload foo)))
.end_lisp
.nopara
because 3foo*'s 3:fasload* is not mentioned explicitly (i.e. at
top level) but is only implicit in the 3(:compile-load (foo bar))*.  One
must instead write: 
.lisp
(defsystem foo
  (:module foo "FOO")
  (:module bar "BAR")
  (:module blort "BLORT")
  (:compile-load foo)
  (:compile-load bar)
  (:compile-load blort (:fasload foo)))
.end_lisp

2condition* is a predicate which specifies when the transformation
should take place.  Generally it defaults according to the type of the
transformation.  Conditions are discussed further on
(transformation-condition-discussion).

The defined simple transformations are:
.table 3
.item :fasload
Calls the 3fasload* function to load the indicated files, which must
be 3QFASL* files.  The 2condition* defaults to
3si:file-newer-than-installed-p*, which is 3t* if a newer version of
the file exists on the file computer than was read into the current
environment.

.item :readfile
Calls the 3readfile* function to read in the indicated files.
Use this for files that are not to be compiled.
2condition* defaults to 3si:file-newer-than-installed-p*.

.item :compile
Calls the 3qc-file* function to compile the indicated files.
2condition* defaults to 3si:file-newer-than-file-p* which returns
3t* if the source file has been written more recently than the binary
file.
.end_table

A special simple transformation is
.table 3
.item :do-components
3(:do-components 2dependencies*)* inside a system with component
systems will cause the 2dependencies* to be done before anything in
the component systems.  This is useful when you have a module of macro
files used by all of the component systems.
.end_table

The defined complex transformations are
.table 3
.item :compile-load
3(:compile-load 2input* 2compile-dependencies* 2load-dependencies*
2compile-condition* 2load-condition*)* is the same as 3(:fasload (:compile
2input* 2compile-dependencies* 2compile-condition*) 2load-dependencies*
2load-condition*)*.  This is the most commonly-used transformation.
Everything after 2input* is optional.

.item :compile-load-init
See (compile-load-init-transformation).
.end_table

As was explained above, each filename in an input specification can
in fact be a list of strings for the case where the source file of a program
differs from the binary file in more than just the file type.  In fact, every
filename is treated as if it were an infinite list of filenames with
the last filename, or in the case of a single string the only filename,
repeated forever at the end.  Each simple transformation takes some
number of input filename arguments, and some number of output filename
arguments.  As transformations are performed, these arguments are taken
from the front of the filename list.  The input arguments are actually
removed and the output arguments left as input arguments to the next
higher transformation.  To make this clearer, consider the 3prog*
module above having the 3:compile-load* transformation performed on
it.  This means that 3prog* is given as the input to the 3:compile*
transformation and the output from this transformation is given as the
input to the 3:fasload* transformation.  The 3:compile*
transformation takes one input filename argument, the name of a lisp
source file, and one output filename argument, the name of the qfasl
file.  The 3:fasload* transformation takes one input filename
argument, the name of a qfasl file, and no output filename arguments.
So, for the first and only file in the 3prog* module, the filename
argument list looks like 3("AI: GEORGE; PROG" "AI: GEORG2; PROG" "AI:
GEORG2; PROG" ...)*.  The 3:compile* transformation is given
arguments of 3"AI: GEORGE; PROG"* and 3"AI: GEORG2; PROG"* and the
filename argument list which it outputs as the input to the 3:fasload*
transformation is 3("AI: GEORG2; PROG" "AI: GEORG2; PROG" ...)*.  The 3:fasload*
transformation then is given its one argument of 3"AI: GEORG2; PROG"*.

Note that dependencies are not "transitive" nor "inherited".  For example, if
module 3a* depends on macros defined in module 3b*, and therefore needs
3b* to be loaded in order to compile, and 3b* has a similar dependency
on 3c*, 3c* will not be loaded during compilation of 3a*.  Transformations
with these dependencies would be written
.lisp
(:compile-load a (:fasload b))
(:compile-load b (:fasload c))
.end_lisp
To say that compilation of 3a* depends on both 3b* and 3c*, you
would instead write
.lisp
(:compile-load a (:fasload b c))
(:compile-load b (:fasload c))
.end_lisp
If in addition 3a* depended on 3c* (but not 3b*) during loading
(perhaps 3a* contains 3defvar*s whose initial values depend on functions
or special variables defined in 3c*) you would write the transformations
.lisp
(:compile-load a (:fasload b c) (:fasload c))
(:compile-load b (:fasload c))
.end_lisp

@section Making a System

.defun make-system name &rest keywords
The 3make-system* function does the actual work of compiling and
loading.  In the example above, if 3PROG1* and 3PROG2* have both
been compiled recently, then
.lisp
(make-system 'mysys)
.end_lisp
will load them as necessary.  If either one might also need to be compiled, then
.lisp
(make-system 'mysys ':compile)
.end_lisp
will do that first as necessary.

The very first thing 3make-system* does is check whether the file
which contains the 3defsystem* for the specified system has changed
since it was loaded.  If so, it offers to load the latest version, so
that the remainder of the 3make-system* can be done using the latest
system definition.  (This only happens if the filetype of that file is
3LISP*.)  After loading this file or not, 3make-system* goes on to
process the files that compose the system.

3make-system* lists what transformations it is going to perform on what files,
asks the user for confirmation, then performs the transformations.  Before each
transformation a message is printed listing the transformation being performed,
the file it is being done to, and the package.  This behavior can be altered
by 2keywords*.
.end_defun

These are the keywords recognized by the 3make-system* function and
what they do.
.table 3
.kitem :noconfirm
Assumes a yes answer for all questions that would otherwise be asked of the user.

.kitem :selective
Asks the user whether or not to perform each transformation that appears to
be needed for each file.

.kitem :silent
Avoids printing out each transformation as it is performed.

.kitem :reload
Bypasses the specified conditions for performing a transformation.  Thus files are
compiled even if they haven't changed and loaded even if they aren't newer than the
installed version.

.kitem :noload
Does not load any files except those required by dependencies.  For use in
conjunction with the 3:compile* option.

.kitem :compile
Compiles files also if need be.  The default is to load but not compile.

.kitem :recompile
This is equivalent to a combination of 3:compile* and 3:reload*:
it specifies compilation of all files, even those whose sources have
not changed since last compiled.

.kitem :no-increment-patch
When given along with the 3:compile* option, disables the automatic
incrementing of the major system version that would otherwise take
place.  See (patch-facility).

.kitem :increment-patch
Increment a patchable system's major version without doing any
compilations.  See (patch-facility).

.kitem :batch
Allows a large compilation to be done unattended.  It acts
like 3:noconfirm* with regard to questions, turns off more-processing and
fdefine-warnings (see 3inhibit-fdefine-warnings*,
(inhibit-fdefine-warnings-var)), and saves the compiler warnings in
an editor buffer and a file
(it asks you for the name).

.kitem :print-only
Just prints out what transformations would be performed, does not actually do any
compiling or loading.

.kitem :noop
Is ignored.  This is mainly useful for programs that call 3make-system*,
so that such programs can include forms like
.lisp
(make-system 'mysys (if compile-p ':compile ':noop))
.end_lisp
.end_table

@section Adding New Keywords to make-system

3make-system* keywords are defined as functions on the
3si:make-system-keyword* property of the keyword.  The functions are
called with no arguments.  Some of the relevant variables they can use
are

.defvar si:*system-being-made*
The internal data structure which represents the system being made.
.end_defvar

.defvar si:*make-system-forms-to-be-evaled-before*
A list of forms which are evaluated before the transformations are performed.
.end_defvar

.defvar si:*make-system-forms-to-be-evaled-after*
A list of forms which are evaluated after the transformations have been performed.
.end_defvar

.defvar si:*make-system-forms-to-be-evaled-finally*
A list of forms which are evaluated after the body of 3make-system* has completed.
This differs from 3si:*make-system-forms-to-be-evaled-after** in that these forms
are evaluated outside of the "compiler context", which sometimes makes a difference.
.end_defvar

.defvar si:*query-type*
Controls how questions are asked.  Its normal value is 3:normal*.
3:noconfirm* means no questions will be asked and 3:selective*
asks a question for each individual file transformation.
.end_defvar

.defvar si:*silent-p*
If 3t*, no messages are printed out.
.end_defvar

.defvar si:*batch-mode-p*
If 3t*, 3:batch* was specified.
.end_defvar

.defvar si:*redo-all*
If 3t*, all transformations are performed, regardless of the condition functions.
.end_defvar

.defvar si:*top-level-transformations*
A list of the names of transformations that will be performed, such as
3(:fasload :readfile)*.
.end_defvar

.defvar si:*file-transformation-function*
The actual function that gets called with the list of transformations that need to be
performed.  The default is 3si:do-file-transformations*.
.end_defvar

.defspec si:define-make-system-special-variable variable value [defvar-p]
Causes 2variable* to be bound to 2value*, which is evaluated at
3make-system* time, during the body of the call to 3make-system*.
This allows you to define new variables similar to those listed above.
If 2defvar-p* is specified as (or defaulted to) 3t*, 2variable*
is defined with 3defvar*.  It is not given an initial value.
If 2defvar-p* is specified as 2nil*,
2variable* belongs to some other program and is not 3defvar*'ed here.
.end_defun

The following simple example adds a new keyword to 3make-system*
called 3:just-warn*, which means that 3fdefine* warnings (see
(fdefine-fun)) regarding  functions being overwritten should be printed
out, but the user should not be queried.
.lisp
(si:define-make-system-special-variable
   inhibit-fdefine-warnings inhibit-fdefine-warnings nil)

(defun (:just-warn si:make-system-keyword) ()
  (setq inhibit-fdefine-warnings ':just-warn))
.end_lisp
(See the description of the 3inhibit-fdefine-warnings* variable, on
(inhibit-fdefine-warnings-var).)

3make-system* keywords can have effect either directly when called,
or by pushing a form to be evaluated onto
3si:*make-system-forms-to-be-evaled-after** or one of the other two similar lists.
In general, the only
useful thing to do is to set some special variable defined by
3si:define-make-system-special-variable*.  In addition to the ones
mentioned above, user-defined transformations may have their behavior
controlled by new special variables, which can be set by new keywords.
If you want to get at the list of transformations to be performed, for
example, the right way would be to set
3si:*file-transformation-function** to a new function, which then
might call 3si:do-file-transformations* with a possibly modified
list.  That is how the 3:print-only* keyword works.

@section Adding New Options for defsystem

Options to 3defsystem* are defined as macros on the
3si:defsystem-macro* property of the option keyword.  Such a macro can
expand into an existing option or transformation, or it can have side effects
and return 3nil*.  There are several variables they can use; the only one
of general interest is

.defvar si:*system-being-defined*
The internal data structure which represents the system which is currently being constructed.
.end_defvar

.defspec si:define-defsystem-special-variable variable value
Causes 2value* to be evaluated and 2variable* to be bound to the
result during the expansion of the 3defsystem* special form.  This
allows you to define new variables similar to the one listed above.
.end_defspec

.defspec si:define-simple-transformation
This is the most convenient way to define a new simple transformation.
The form is
.lisp
(si:define-simple-transformation 2name* 2function*
	2default-condition* 2input-file-types* 2output-file-types*
        2pretty-names* 2compile-like* 2load-like*)
.end_lisp
For example,
.lisp
(si:define-simple-transformation :compile si:qc-file-1
	si:file-newer-than-file-p ("LISP") ("QFASL"))
.end_lisp
2input-file-types* and 2output-file-types* are how a transformation
specifies how many input filenames and output filenames it should
receive as arguments, in this case one of each.  They also, obviously, specify
the default file type for these pathnames.
The 3si:qc-file-1* function is mostly like 3qc-file*, except for its interface to
packages.  It takes input-file and output-file arguments.

2pretty-names*, 2compile-like*, and 2load-like* are optional.

2pretty-names* specifies how messages printed for the user should print
the name of the transformation.  It can be a list of the
imperative ("Compile"), the present participle ("Compiling"), and
the past participle ("compiled").  Note that the past participle is not
capitalized, because it is not used at the beginning of a sentence.
2pretty-names* can be just a string, which is taken to be the imperative,
and the system will conjugate the participles itself.  If 2pretty-names*
is omitted or 3nil* it defaults to the name of the transformation.

2compile-like* and 2load-like* say when the transformation should be performed.
Compile-like transformations are performed when the 3:compile*
keyword is given to 3make-system*.
Load-like transformations are performed unless the 3:noload*
keyword is given to 3make-system*.
By default 2compile-like* is 3t* but 2load-like* is 3nil*.
.end_defspec

Complex transformations are just defined as normal macro expansions, for example,
.lisp
(defmacro (:compile-load si:defsystem-macro)
		(input &optional com-dep load-dep
				 com-cond load-cond)
  `(:fasload (:compile ,input ,com-dep ,com-cond)
	     ,load-dep ,load-cond))
.end_lisp

@section More Esoteric Transformations

It is sometimes useful to specify a transformation upon which something
else can depend, but which is not performed by default, but rather only
when requested because of that dependency.  The transformation
nevertheless occupies a specific place in the hierarchy.  The 3:skip*
3defsystem* macro allows specifying a transformation of this type.
For example, suppose there is a special compiler for the read table
which is not ordinarily loaded into the system.  The compiled version
should still be kept up to date, and it needs to be loaded if ever the
read table needs to be recompiled.
.lisp
(defsystem reader
  (:pathname-default "AI: LMIO;")
  (:package system-internals)
  (:module defs "RDDEFS")
  (:module reader "READ")
  (:module read-table-compiler "RTC")
  (:module read-table "RDTBL")
  (:compile-load defs)
  (:compile-load reader (:fasload defs))
  (:skip :fasload (:compile read-table-compiler))
  (:rtc-compile-load read-table (:fasload read-table-compiler)))
.end_lisp
Assume that there is a complex transformation 3:rtc-compile-load*
which is like 3:compile-load*, except that is is built on a
transformation called something like 3:rtc-compile*, which uses the
read table compiler rather than the Lisp compiler.  In the above
system, then, if the 3:rtc-compile* transformation is to be performed,
the 3:fasload* transformation must be done on 3read-table-compiler*
first, that is the read table compiler must be loaded if the read table
is to be recompiled.  If you say 3(make-system 'reader ':compile)*,
then the 3:compile* transformation will still happen on the
3read-table-compiler* module, compiling the read table compiler if
need be.  But if you say 3(make-system 'reader)*, the reader and the
read table will be loaded, but the 3:skip* keeps this from happening
to the read table compiler.

.setq transformation-condition-discussion page
So far nothing has been said about what can be given as a 2condition*
for a transformation except for the default functions which check for a
source file being newer than the binary and so on.  In general, any
function which takes the same arguments as the transformation function
(e.g. 3qc-file*) and returns 3t* if the transformation needs to be
performed, can be in this place as a symbol, including for example a
closure.  To take an example, suppose there is a file which contains
3compile-flavor-methods* for a system, and which should therefore be
recompiled if any of the flavor method definitions change.  In this
case, the condition function for compiling that file should return 3t*
if either the source of that file itself or any of the files that define
the flavors have changed.  This is what the 3:compile-load-init*
complex transformation is for.  It is defined like this:
.lisp
.setq compile-load-init-transformation page
(defmacro (:compile-load-init si:defsystem-macro)
		(input add-dep &optional com-dep load-dep
		 &aux function)
  (setq function (let-closed ((*additional-dependent-modules*
			       add-dep))
		   'compile-load-init-condition))
  `(:fasload (:compile ,input ,com-dep ,function) ,load-dep))

(defun compile-load-init-condition (source-file qfasl-file)
  (or (si:file-newer-than-file-p source-file qfasl-file)
      (local-declare ((special *additional-dependent-modules*))
	(si:other-files-newer-than-file-p
			*additional-dependent-modules*
			qfasl-file))))
.end_lisp
The condition function which will be generated when this macro is used
returns 3t* either if 3si:file-newer-than-file-p* would with those
arguments, or if any of the other files in 3add-dep*, which presumably
is a 2module specification*, are newer than the qfasl file.  Thus
the file (or module) to which the 3:compile-load-init* transformation
applies will be compiled if it or any of the source files it depends on has
been changed, and will be loaded under the normal conditions.  In most
(but not all cases), 3com-dep* would be a 3:fasload* transformation
of the same files as 3add-dep* specifies, so that all the files this
one depends on would be loaded before compiling it.

@section The Patch Facility
.setq patch-facility section-page
.cindex patch
.cindex system maintenance

The patch facility allows a system maintainer to manage new releases of a
large system and issue patches to correct bugs.  It is designed to be
used to maintain both the Lisp Machine system itself, and applications
systems that are large enough to be loaded up and saved on a disk
partition.

When a system of programs is very large, it needs to be maintained.
Often problems are found and need to be fixed, or other little changes need to
be made.  However, it takes a long time to
load up all of the files that make up such a system, and so rather than
having every user load up all the files every time he wants to use the
system, usually the files just get loaded once into a Lisp world, and
then the Lisp world is saved away on a disk partition.  Users then use
this disk partition, and copies of it are distributed.  The problem is that since
the users don't load up the system every time they want to use it, they don't
get all the latest changes.

The purpose of the patch system is to solve this problem.  A 2patch* file
is a little file that, when you load it, updates
the old version of the system into the new version of the system.  Most
often, patch files just contain new function definitions; old functions
are redefined to do their new thing.  When you want to use a system, you
first use the Lisp environment saved on the disk, and then you load all
the latest patches.  Patch files are very small, so loading them doesn't
take much time.  You can even load the saved environment, load up the
latest patches, and then save it away, to save future users the trouble
of even loading the patches.  (Of course, new patches may be made
later, and then these will have to be loaded if you want to get the
very latest version.)

For every system, there is a series of patches that have been made to
that system.  To get the latest version of the system, you load each
patch file in the series, in order.  Sooner or later, the maintainer of a
system will want to stop building more and more patches, and recompile
everything, starting afresh.  A complete recompilation is also necessary when
a system is changed in a far-reaching way, that can't be done with a
small patch; for example, if you completely reorganize a program, or
change a lot of names or conventions, you might need to completely
recompile it to make it work again.  After a complete recompilation has
been done, the old patch files are no longer suitable to use; loading
them in might even break things.

The way all this is kept track of is by labelling each version of a
system with a two-part number.  The two parts are called the 2major
version number* and the 2minor version number*.  The minor version
number is increased every time a new patch is made; the patch is
identified by the major and minor version number together.  The major
version number is increased when the program is completely recompiled,
and at that time the minor version number is reset to zero.  A complete
system version is identified by the major version number, followed by
a dot, followed by the minor version number.

To clarify this, here is a typical scenario.  A new system is created;
its initial version number is 31.0*.  Then a patch file is created;
the version of the program that results from loading the first patch
file into version 31.0* is called 31.1*.  Then another patch file
might be created, and loading that patch file into system 31.1*
creates version 31.2*.  Then the entire system is recompiled, creating
version 32.0* from scratch.  Now the two patch files are irrelevant,
because they fix old software; the changes that they reflect are
integrated into system 32.0*.

Note that the second patch file should only be loaded into system
31.1* in order to create system 31.2*; you shouldn't load it into
31.0* or any other system besides 31.1*.  It is important that all
the patch files be loaded in the proper order, for two reasons.  First,
it is very useful that any system numbered 31.1* be exactly the same
software as any other system numbered 31.1*, so that if somebody
reports a bug in version 31.1*, it is clear just which software is
being complained about.  Secondly, one patch might patch another patch;
loading them in some other order might have the wrong effect.

The patch facility keeps track, in the file system, of all the patch
files that exist, remembering which version each one creates.  There
is a separate numbered sequence of patch files for each major version
of each system.  All of them are stored in the file system, and the
patch facility keeps track of where they all are.  In addition to the
patch files themselves, there are "patch directory" files which contain
the patch facility's data base by which it keeps track of what minor
versions exist for a major version, and what the last major version
of a system is.  These files and how to make them are described below.

In order to use the patch facility, you must define your system with
3defsystem* (see (system-system)) and declare it as patchable with the
3:patchable* option.  When you load your system (with 3make-system*,
see (make-system-fun)) it is added to the list of all systems present in
the world.  The patch facility keeps track of which version of each
patchable system is present, and where the data about that system reside in
the file system.  This information can be used to update the Lisp world
automatically to the latest versions of all the systems it contains.  Once
a system is present, you can ask for the latest patches to be loaded, ask
which patches are already loaded, and add new patches.

You can also load in patches or whole new systems and then save the
entire Lisp environment away in a disk partition.  This is explained on
(disk-partition).

When a Lisp Machine is booted, it prints out a line of information
telling you what systems are present, and which version of each
system is loaded.  This information is returned by the function
3si:system-version-info*.  It is followed by a text string containing
any additional information that was requested by whomever created
the current disk partition (see 3disk-save*, (disk-save-fun)).

.defun print-system-modifications &rest system-names
With no arguments, this lists all the systems present in this world and, for
each system, all the patches that have been loaded into this world.  For each patch
it shows the major version number (which will always be the same since
a world can only contain one major version), the minor version number,
and an explanation of what the patch does, as typed in by the person who
made the patch.

If 3print-system-modifications* is called with arguments, only the
modifications to the systems named are listed.
.end_defun

.defun si:get-system-version &optional system
Returns two values, the major and minor version numbers of the version
of 2system* currently loaded into the machine, or 3nil* if that
system is not present.  2system* defaults to 3"System"*.
.end_defun

.defun si:system-version-info &optional (brief-p 3nil*)
This returns a string giving information about which systems and what
versions of the systems are loaded into the machine, and what microcode
version is running.  A typical string for it to produce is:
.lisp
"System 65.12, ZMail 19.1, Vision 10.23, microcode 739"
.end_lisp
If 2brief-p* is 3t*, it uses short names, suppresses the microcode
version, any systems which should not appear in the disk label comment,
the name 3System*, and the commas:
.lisp
"65.12 Vis 10.23"
.end_lisp
.end_defun

@subsection Defining a System

In order to use the patch facility, you must declare your system as
patchable by giving the 3:patchable* option to 3defsystem* (see
(system-system)).  The major version of your system in the file system
will be incremented whenever 3make-system* is used to compile it.
Thus a major version is associated with a set of QFASL files.
The major version of your system that is remembered as having been loaded into the
Lisp environment will be set to the major version in the file system
whenever 3make-system* is used to load your system and the
major version in the file system is greater than what you had loaded before.

After loading your system, you can save it with the 3disk-save*
function (see (disk-save-fun)).  3disk-save* will ask you for any
additional information you want printed as part of the greeting when the
machine is booted.  This is in addition to the names and versions of all
the systems present in this world.  If the system version will not fit
in the 16-character field allocated in the disk label, 3disk-save*
will ask you to type in an abbreviated form.

@subsection Patch files

The patch system will maintain several different types of files in
the directory associated with your system.  This directory is specified
to 3defsystem* via either the 3:patchable* option or the 3:pathname-default*
option.  These files are maintained automatically,
but so that you will know what they are and when they are obsolete (because
they are associated with an obsolete version of your system), they are described here.

The file that tells the system's current major version has a name of the form
3AI: MYDIR; PATCH (PDIR)*  (on Tops-20, 3EE:PS:<MYDIR>PATCH.DIRECTORY*),
where the host, device, and directory (3AI:MYDIR;* or 3EE:PS:<MYDIR>* in this
example) come from the system definition as explained above.

For each major version of the system, there is a 2patch directory file*,
of the form 3AI: MYDIR; PAT259 (PDIR)*, which describes the individual
patches for that version, where 259 is the major version number in this
example.  (On Tops-20, this is 3EE:PS:<MYDIR>PATCH-259.DIRECTORY*).

Then for each minor version of the system, the source of the patch file
itself has a name of the form 3AI: MYDIR; P59.69 >*, for minor version 69
of major version 259.  Note that 3259* has been truncated to 359* to
fit into six characters for ITS.  On Tops-20 this would be
3EE:PS:<MYDIR>PATCH-259-69.LISP*.  Patch files get compiled, so there
will also be files like 3AI: MYDIR; P59.69 QFASL* (on Tops-20,
3EE:PS:<MYDIR>PATCH-259-69.QFASL*).

If the 3:patchable* option to 3defsystem* is given an argument, telling
it to put the patch files in a different directory than the one which holds
the other files of the system, then a slightly different set of file name
conventions are used.

On ITS, the file that tells the current major version is of the form 3AI:
PATDIR; 2system* (PDIR)*, where 2system* is the name of the system
and 3PATDIR* is the directory specified in the 3:patchable* option to 3defsystem*.
The patch directory file for major version 2nnn* is of the form 3AI:
PATDIR; 2sysnnn* (PDIR)*, where 2sys* is the short name specified
with the 3:short-name* option to 3defsystem*.  A patch file has a
name of the form 3AI: PATDIR; 2nnn*.2mm**; note that the major
version is truncated to three digits instead of two.  In this set of file name
conventions, the patch files don't all fall together in alphabetical order,
as they do in the first set.

On TOPS-20, the file names take the forms 3EE:PS:<PATDIR>2system*.PATCH-DIRECTORY*,
3EE:PS:<PATDIR>2system*-2nnn*.PATCH-DIRECTORY*, and
3EE:PS:<PATDIR>2system*-2nnn*-2mmm*.LISP* (or 3.QFASL*).  These file name
conventions allow the patches for multiple systems to coexist in the same directory.

@subsection Loading Patches

.defun load-patches &rest options
This function is used to bring the current world up to the latest minor
version of whichever major version it is, for all systems present, or
for certain specified systems.  If there are any patches
available, 3load-patches* will offer to read them in. 
With no arguments, 3load-patches* updates all the systems present in
this world.

2options* is a list of keywords.  Some keywords are followed by an argument.
The following options are accepted:
.table 3
.item :systems 2list*
'kindex :systems load-patches
2list* is a list of names of systems to be brought up to date.  If this
option is not specified, all systems are processed.

.kitem :verbose
Print an explanation of what is being done.  This is the default.

.kitem :selective
For each patch, say what it is and then ask the user whether or not to load it.
This is the default.  If the user answers "P", selective mode is turned off for
any remaining patches to the current system.

.kitem :noselective
Turns off 3:selective*.

.kitem :silent
Turns off both 3:selective* and 3:verbose*.  In 3:silent* mode all necessary
patches are loaded without printing anything and without querying the user.
.end_table
.end_defun

Currently 3load-patches* is not called automatically, but the system
may be changed to offer to load patches when the user logs in, in order
to keep things up to date.

@subsection Making Patches

There are two editor commands that are used to create patch files.
During a typical maintenance session on a system you will make several
edits to its source files.  The patch system can be used to copy these
edits into a patch file so that they can be automatically incorporated
into the system to create a new minor version.  Edits in a patch file
can be modified function definitions, new functions, modified
3defvar*'s and 3defconst*'s, or arbitrary forms to be evaluated, even including
3load*'s of new files.

Meta-X Add Patch adds the region (if there is one) or else the current
"defun" to the patch file currently being constructed.  The first time you
give this command it will ask you what system you are patching, allocate
a new minor version number, and start constructing the patch file for that
version.  If you change a function, you should recompile it, test it,
then once it works use Add Patch to put it in the patch file.

The patch file being constructed is in an editor buffer.  If you mistakenly
Add Patch something which doesn't work, you can select the buffer containing
the patch file and delete it.  Then later you can Add Patch the corrected
version.

While you are making your patch file, the minor version number that has
been allocated for you is reserved so that nobody else can use it.  This
way if two people are patching a system at the same time, they will not
both get the same minor version number.

After making and testing all of your patches, use meta-X Finish Patch to
install the patch file so that other users can load it.  This will compile
the patch file if you have not done so yourself (patches are always compiled).
It will ask you for a comment describing the reason for the patch; 3load-patches*
and 3print-system-modifications* print these comments.

After finishing your patch, if you do another Add Patch it will
ask you which system again and start a new minor version.  Note that you
can only be putting together patches for one system at a time.

If you start making a patch file and for some reason never do a Finish
Patch (you decide to give up or your machine crashes), the minor version
number that you were working on will remain reserved.  Since patch files
must always be loaded in strictly sequential order, nobody will be able
to load any further patches made to this major version past this point.
You must manually edit the patch directory file for this major version,
removing the line corresponding to the aborted patch.  It is OK for a
minor version number to be skipped.

@subsection System Status
.setq patch-system-status section-page
.cindex status, of a patchable system

The patch system has the concept of the "status" of a major version of a system.
The status is displayed when the system version is displayed, in places such
as the system greeting message and the disk partition comment.  This status
allows users of the system to know what is going on.  The status of a system
changes as patches are made to it.

The status is one of the following keywords:
.table 3
.item :experimental
The system has been built but has not yet been fully debugged and released to users.
This is the default status when a new major version is created, unless it is
overridden with the 3:initial-status* option to 3defsystem*.

.item :released
The system is released for general use.  This status produces no extra text
in the system greeting and the disk partition comment.

.item :obsolete
The system is no longer supported.

.item :broken
This is like 3:experimental* but is used when the system was thought incorrectly
to have been debugged, and hence was 3:released* for a while.
.end_table

.defun si:set-system-status system status &optional major-version
Changes the status of a system.  2system* is the name of the system.
2major-version* is the number of the major version to be changed; if unsupplied
it defaults to the version currently loaded into the Lisp world.
2status* should be one of the keywords above.
.end_defun

@section Saving New Versions: Disk Partitions
.setq disk-partition section-page
.cindex band
.cindex partition
.cindex saving the Lisp world

@subsection Concepts

The 3make-system* and 3load-patches* functions, described above,
load software into the Lisp world.  This takes time; it is wasteful for
everyone to sit through this loading of software every time the software
is to be used.  Usually someone loads up software into a Lisp world and
then saves away the whole Lisp world in a partition on a disk.  This section
explains how to do this and other things.

A Lisp Machine disk is divided into several named 2partitions* (also
called "bands" sometimes).  Partitions can be used for many things.
Every disk has a partition named 3PAGE*, which is used to implement the
virtual memory of the Lisp Machine.  When you run Lisp, this is where
the Lisp world actually resides.  There are also partitions that hold
saved images of the Lisp Machine microcode, conventionally named
3MCR2n** (where 2n* is a digit), and partitions that hold saved
images of Lisp worlds, conventionally named 3LOD2n**.  A saved
image of a Lisp world is also called a "virtual memory load" or "system load".

The directory of partitions is in a special block on the disk called the
label.  When you "cold-boot" a Lisp Machine by typing
CTRL/META/CTRL/META-Rubout, the machine checks the label to see which
two partitions contain two important "files": the current microcode
load, and the current saved image of the Lisp world. These are kept
separate so that the microcode can be easily changed without going
through the time-consuming process of generating a new system load.
When you "cold-boot", the contents of the current microcode band
are loaded into the microcode memory, and then the contents
of the current saved image of the Lisp world is copied into the
3PAGE* partition.  Then Lisp starts running.

For each partition, the directory of partitions contains a brief textual
description of the contents of the partition.  For microcode partitions,
a typical description might be 3"UCADR 739"*; this means that version
3739* of the microcode is in the partition.  For saved Lisp images, it
is a little more complicated.  Ideally, the description would say which
versions of which systems are loaded into the band.  Unfortunately,
there isn't enough room for that in most cases.  A typical description
is 3"65.8 ZMail 19.1"*, meaning that this band contains version
365.8* of 3System* and version 319.1* of 3ZMail*.  The description
is created when a Lisp world is saved away by 3disk-save* (see below).

@subsection Manipulating the Label

.defun print-disk-label &optional (unit 30*) (stream 3standard-output*)
Print a description of the label of the disk specified by 2unit* onto
2stream*.  The description starts with the name of the disk pack,
various information about the disk that is generally uninteresting, and
the names of the two current load partitions (microcode and saved Lisp
image).  This is followed by one line of description for each
partition.  Each one has a name, disk address, size, and textual
description.  The two partitions that are the current load partitions,
used when you cold-boot,
are preceeded by asterisks.  2unit* may be the unit number of
the disk (most Lisp machines just have one unit, numbered 30*),
or the "host name" of another Lisp Machine on the Chaosnet (in which
case the label of unit 30* on that machine will be printed, and the
user of that machine will be notified that you are looking at his label).
.end_defun

.defun set-current-band partition-name
Set the current saved Lisp image partition to be 2partition-name*.
If 2partition-name* is a number, the name 3LOD2n** will be used.
.end_defun

.defun set-current-microload partition-name
Set the current microcode partition to be 2partition-name*.
If 2partition-name* is a number, the name 3MCR2n** will be used.
.end_defun

When using the functions to set the current load partitions, be extra
sure that you are specifying the correct partition.  Having done it,
cold-booting the machine will reload from those partitions.  Some
versions of the microcode will not work with some versions of the
Lisp system, and if you set the two current partitions incompatibly,
cold-booting the machine will fail; you will need an expert to fix this.

.defun si:edit-disk-label unit &optional init-p
This runs an interactive label editor on the specified unit.
This editor allows you to change any field in the label.  The
3HELP* key documents the commands.  You have to be an expert
to need this and to understand what it does, so the commands
are not documented here.  Ask someone if you need help.
.end_defun

.defun print-loaded-band &optional format-dest
Tells you what you are currently running.  This includes where it came from on the disk
and what version of each system is present in your Lisp environment.
2format-dest* defaults to 3t*; if it is 3nil* the answer will be returned as
a string rather than printed out.
.end_defun

.defun disk-restore &optional partition
Allows booting from a band other than the current one.  2partition*
may be the name or the number of a disk partition containing a
virtual-memory load, or 3nil* or omitted, meaning to use the current
partition.  The specified partition is copied into the paging area of
the disk and then started.

Although you can use this to boot a different Lisp image than the installed
one, this does not provide a way to boot a different microcode image.
3disk-restore* brings up the new band with the currently running microcode.

3disk-restore* asks the user for confirmation before doing it.
.end_defun

@subsection Updating Software

Of all the procedures described in this section, the most common one
is to take a partition containing a Lisp image, update it to have
all the latest patches, and save it away into a partition.

The way you do this is to start by cold-booting the machine, to get a
fresh, empty system.  Next, you must log in as something whose INIT file
does not affect the Lisp world noticably (so that when you save away the
Lisp image, the side-effects of the INIT file won't get saved too); you
can log in as "LISPM".  Now you can load in any new software you want;
usually you just do 3(load-patches)* and answer the questions, to
bring all the present patchable systems up to date, but you might also
add a new system and load it up.  You may also want to call 3si:set-system-status*
to change the release status of the system.

When you're done loading everything, do 3(print-disk-label)* to find a
band in which to save your new Lisp world.  It is best not to reuse the
current band, since if something goes wrong during the saving of the
partition, while you have written, say,
half of the band that is current, it may be impossible to cold-boot the
machine.  Once you have found the partition, you use the 3disk-save*
function to save everything into that partition.

.defun disk-save partition-name
Save the current Lisp world in the designated partition.
2partition-name* may be a partition name (a string), or it may be a
number in which case the name 3LOD2n** is used.

It first asks you for yes-or-no confirmation that you really want to
reuse the named partition.  Then it tries to figure out what to put into
the textual description of the label.  It starts with the brief version
of 3si:system-version-info* (see (si:system-version-info-fun)).  Then
it asks you for an "additional comment" to append to this; usually you
just type a 3return* here, but you can also add a comment that will be
returned by 3si:system-version-info* (and thus printed when the system
is booted) from then on.  If this doesn't fit into the fixed size
available for the textual description, it asks you to retype the whole
thing (the version info as well as your comment) in a compressed
form that will fit.  The compressed version will appear in the textual
description in 3print-disk-label*.

The Lisp environment is then saved away into the designated partition,
and then the equivalent of a cold-boot from that partition is done.
.end_defun

Once the patched system has been successfully saved and the system
comes back up, you can make it current with 3set-current-band*.

Please don't save patched systems that have had the editor or the
compiler run.  This works, but it makes the saved system a lot bigger.
You should try to do as little as possible between the time you
cold-boot and the time you save the partition, in order to produce a
clean saved environment.

.defvar si:login-history
The value of 3si:login-history* is a list of entries, one for each person who
has logged into this world since it was created.  This makes it possible to
tell who 3disk-saved* a band with something broken in it.  Each entry is
a list of the user ID, the host logged into, the Lisp machine on which the
world was being executed, and the date and time.
.end_defvar

@subsection Installing New Software

The version numbers of the current microcode and system are announced to
the INFO-LISPM mailing list.  When a new system becomes available, mail
is sent to the list explaining where to find the new system and what is
new about it.  Sometimes a microcode and a system go together, and the new
system will not work with the old microcode and vice versa.  When this
happens extra care is required to avoid getting incompatible loads
current at the same time so that the machine will not be able to boot
itself.

All of the extant microcode versions can be found on the LISPM1
directory on AI.  Microcode version 2nnn* is in AI: LISPM1; UCADR 2nnn*MCR.
To copy a new microcode version into one of the microcode
load partitions, first do a 3(print-disk-label)* to ensure that the
partition you intend to bash is not the current one; if it was, and something
went wrong in the middle of loading the new microcode, it would
be impossible to cold-boot, and this is hard to fix.

Then, install the microcode (on the non-current partition)
by using 3si:load-mcr-file*.

.defun si:load-mcr-file microcode-file partition
Load the contents of the file 2microcode-file* into the designated
partition.  2microcode-file* is either the version number of the
system microcode to be loaded, or the pathname of a file containing
microcode (in "MCR" format), such as "AI: LISPM1; UCADR 2nnn*MCR".
2partition* is either the number of an 3MCR* partition, or the
name of one, such as "MCR1".
This takes about 30 seconds.
.end_defun

The system load, unlike the microcode load, is much too large to fit in
an AI file.  Therefore, the only way to install an updated system on a
machine is to copy it from another machine that already has it.  So the
first step is to find a machine that is not in use and has the desired
system.  We will call this the source machine.  The machine where the
new system will be installed is the target machine.  You can see who
is logged into which machines, see which ones are free, and use
3print-disk-label* with an argument to examine the label of that
machine's disk and see if it has the system you want.

The function for actually copying a system load partition off of
another machine is called as follows.  Before doing this, double-check
the partition names by printing the labels of both machines, and make
sure no one is using the source machine.

.defun si:receive-band source-host source-band target-band
Copy the partition on 2source-host*'s partition named 2source-band*
onto the local machine's partition named 2target-band*.  ("Band"
means "partition".)  This takes about ten minutes.  It types out the
size of the partition in pages, and types a number
every 100 pages telling how far it has gotten.  It puts up a display
on the remote machine saying what's going on.
.end_defun

To go the other direction, use 3si:transmit-band*.

.defun si:transmit-band source-band target-host target-band
This is just like 3si:receive-band*, except you use it on
the source machine instead of the target machine.  It copies
the local machine's partition named 2source-band* onto
2target-machine*'s partition named 2target-band*.
.end_defun

After transferring the band, it is good practice to make sure that it really
was copied successfully by comparing the original and the copy.  All of the
known reasons for errors during band transfer have (of course) been corrected,
but peace of mind is valuable.  If the copy was not perfectly faithful, you
might not find out about it until a long time later, when you use whatever part
of the system that had not been copied properly.

.defun si:compare-band source-host source-band target-band
This is like 3si:receive-band*, except that it does not change anything.
It compares the two bands and complains about any differences.
.end_defun

Having gotten the current microcode load and system load copied into
partitions on your machine, you can make them current using
3set-current-microload* and 3set-current-band*.  Double-check
everything with 3print-disk-label*.  Then cold-boot the machine, and
the new system should come up in a half-minute or so.

If the microcode you installed is not the same version as was installed
on the source machine from which you got the system load, you will need to
follow the procedure given below under "installing new microcode".
This can happen if someone hasn't installed the current microcode yet
on that other machine.

@subsection Installing New Microcode

When an existing system is to be used with a new microcode, certain changes
need to be made to the system, and it should then be dumped back out with
the changes.  Usually new microcode is released only along with a new
system, so you hardly ever have to do this.  The error handler has a table
of errors that are detected by microcode.  The hardware/microcode debugger
(CC) has a microcode symbol table.  These symbols are used when debugging
other machines, and are also used by certain metering programs.  These tables
should be updated when a new microcode is installed.

The error-handler will automatically update its table (from a file on the
3AI:LISPM1;* directory) when the machine is booted with the new
microcode.  The CC symbol table is updated by the following procedure:
.lisp
(login 'lispm)
(pkg-goto 'cadr)
(cc-load-ucode-symbols "AI: LISPM1; UCADR 2nnn*SYM")
(pkg-goto)
.end_lisp
where 2nnn* is the microcode version number.  This operation will take
a minute or two; after it has read in most of the file the machine will
stop for a long time while it sorts the symbols.  It will look like it
has crashed, but it hasn't, really, and will eventually come back.

After booting the system with the new microcode and following the above
procedure, the updated system should be saved with 3disk-save* as explained
above.  Note that this operation does not change the system version number.
Once the new band is verified to work, the old band can be removed from the
label with 3si:edit-disk-label* if desired.

@chapter Processes
.cindex process
.cindex multiprocessing
.setq process section-page
.cindex wait
.setq process-chapter chapter-number

The Lisp Machine supports 2multi-processing*;  several computations
can be executed "concurrently" by placing each in a separate
2process*.  A process is like a processor, simulated by software.
Each process has its own "program counter", its own stack of function
calls and its own special-variable binding environment in which to
execute its computation.  (This is implemented with stack groups, see
(stack-group).)

If all the processes are simply trying to compute, the machine time-slices
between them.  This is not a particularly efficient mode of operation
since dividing the finite memory and processor power of the machine
among several processes certainly cannot increase the available power
and in fact wastes some of it in overhead.  The way processes are normally
used is different; there can be several on-going computations, but at
a given moment only one or two processes will be trying to run.  The rest
will be either 2waiting* for some event to occur, or
2stopped*, that is, not allowed to compete for resources.

.cindex process wait function
A process waits for an event by means of the 3process-wait* primitive,
which is given a predicate function which defines the event being waited
for.  A module of the system called the process scheduler periodically
calls that function.  If it returns 3nil* the process continues to wait;
if it returns 3t* the process is made runnable and its call to
3process-wait* returns, allowing the computation to proceed.

.cindex run reason
.cindex arrest reason
.cindex active process
A process may be 2active* or 2stopped*.  Stopped processes are
never allowed to run; they are not considered by the scheduler, and so
will never become the current process until they are made active again.
The scheduler continually tests the waiting functions of all the active
processes, and those which return non-3nil* values are allowed to run.
When you first create a process with 3make-process*, it is inactive.

A process has two sets of Lisp objects associated with it, called its
2run reasons* and its 2arrest reasons*.  These sets are implemented
as lists.  Any kind of object can be in these sets; typically keyword
symbols and active objects such as windows and other processes are
found.  A process is considered 2active* when it has at least one run
reason and no arrest reasons.  A process that is not active is
2stopped*, is not referenced by the processor scheduler, and does not
compete for machine resources.

To get a computation to happen in another process, you must first create
a process, and then say what computation you want to happen in that
process.  The computation to be executed by a process is specified as an
2initial function* for the process and a list of arguments to that
function.  When the process starts up it applies the function to the
arguments.  In some cases the initial function is written so that it
never returns, while in other cases it performs a certain computation
and then returns, which stops the process.

To 2reset* a process means to throw (see 3*throw*, (*throw-fun))
out of its entire computation, then force it to call its initial
function again.  Resetting a process clears its waiting condition, and
so if it is active it will become runnable.  To 2preset* a function
is to set up its initial function (and arguments), and then reset it.
This is how you start up a computation in a process.

All processes in a Lisp Machine run in the same virtual address space,
sharing the same set of Lisp objects.  Unlike other systems which have
special restricted mechanisms for inter-process communication, the
Lisp Machine allows processes to communicate in arbitrary ways through
shared Lisp objects.  One process can inform another of an event simply
by changing the value of a global variable.  Buffers containing messages
from one process to another can be implemented as lists or arrays.
The usual mechanisms of atomic operations, critical sections, and
interlocks are provided
(see 3%store-conditional* ((%store-conditional-fun)),
3without-interrupts* ((without-interrupts-fun)),
and 3process-lock* ((process-lock-fun)).)

A process is a Lisp object, an instance of one of several flavors
of process (see (flavor)).  The remainder of this chapter describes
the messages you can send to a process, the functions you can apply to
a process, and the functions and variables a program running in a process
can use to manipulate its process.

@section The Scheduler

.setq scheduler section-page
.cindex scheduler
	At any time there is a set of 2active processes*; as described
above, these are all the processes which are not stopped.  Each active
process is either currently running, trying to run, or waiting for some condition to become
true.  The active processes are managed by a special stack group called
the 2scheduler*, which repeatedly cycles through the active processes,
determining for each process whether it is ready to be run, or whether
it is waiting.  The scheduler determines whether a process is ready to
run by applying the process's 2wait-function* to its
2wait-argument-list*.  If the wait-function returns a non-3nil*
value, then the process is ready to run; otherwise, it is waiting.  If
the process is ready to run, the scheduler resumes the
current stack group of the process.

	When a process's wait-function returns non-3nil*, the
scheduler will resume its stack group and let it proceed.  The process
is now the 2current process*, that is, the one process that is
running on the machine.  The scheduler sets the variable
3current-process* to it.  It will remain the current process and
continue to run until either it decides to wait, or a 2sequence
break* occurs.  In either case, the scheduler stack group will be
resumed and it will continue to cycle through the active processes.
This way, each process that is ready to run will get its share of time
in which to execute.

A process can wait for some condition to become true by calling
3process-wait* (see (process-wait-fun)),
which will set up its wait-function and wait-argument-list accordingly,
and resume the scheduler stack group.  A process can also wait for
just a moment by calling 3process-allow-schedule*
(see (process-allow-schedule-fun)), which resumes the scheduler stack
group but leaves the process runnable; it will run again as soon as all
other runnable processes have had a chance.

A sequence break is a kind of interrupt that is generated by the Lisp
system for any of a variety of reasons; when it occurs, the scheduler
is resumed.  The function 3si:sb-on* (see (si:sb-on-fun)) can be used
to control when sequence breaks occur.  The default is to sequence
break once a second.  Thus if a process runs continuously without
waiting, it will be forced to return control to the scheduler once
a second so that any other runnable processes will get their turn.

The system does not generate a sequence break when a page fault occurs;
thus time spent waiting for a page to come in from the disk is "charged"
to a process the same as time spent computing, and cannot be used by
other processes.  It is done this way for the sake of simplicity; this
allows the whole implementation of the process system to reside in ordinary
virtual memory, and not to have to worry specially about paging.  The
performance penalty is small since Lisp Machines are personal computers,
not multiplexed among a large number of processes.  Usually only one
process at a time is runnable.

A process's wait function is free to touch any data structure it likes
and to perform any computation it likes.  Of course, wait functions
should be kept simple, using only a small amount of time and touching
only a small number of pages, or system performance will be impacted
since the wait function will consume resources even when its process is
not running.  If a wait function gets an error, the error will occur
inside the scheduler.  All scheduling will come to a halt and the user will
be thrown into the error handler.  Wait functions should be written in such
a way that they cannot get errors.  Note that 3process-wait* calls the wait
function once before giving it to the scheduler, so an error due simply to
bad arguments will not occur inside the scheduler.

Note well that a process's wait function is executed inside the scheduler
stack-group, 2not* inside the process.  This means that a wait function
may not access special variables bound in the process.  It is allowed
to access global variables.  It could access variables bound by a process
through the closure mechanism ((closure)), but more commonly any values
needed by the wait function are passed to it as arguments.

@c [Here need to discuss quantum and priority.]

.defvar current-process
The value of 3current-process* is the process which is currently
executing, or 3nil* while the scheduler is running.  When the
scheduler calls a process's wait-function, it binds 3current-process*
to the process so that the wait-function can access its process.
.end_defvar

.defspec without-interrupts body...
The 2body* forms are evaluated with
3inhibit-scheduling-flag* bound to 3t*.  This is the recommended
way to lock out multi-processing over a small critical section of code
to prevent timing errors.  In other words the body is an
2atomic operation*.  The value(s) of a 3without-interrupts* is/are
the value(s) of the last form in the body.
.lisp
.exdent 96 Examples:
(without-interrupts
  (push item list))

(without-interrupts
  (cond ((memq item list)
	 (setq list (delq item list))
	 t)
	(t nil)))
.end_lisp
.end_defspec

.defvar inhibit-scheduling-flag
The value of 3inhibit-scheduling-flag* is normally 3nil*.  If it is
3t*, sequence breaks are deferred until 3inhibit-scheduling-flag*
becomes 3nil* again.  This means that no process other than the current
process can run.
.end_defvar

.defun process-wait whostate function &rest arguments
This is the primitive for waiting.  The current process waits until the
application of 2function* to 2arguments* returns non-3nil*
(at which time 3process-wait* returns).  Note that 2function* is applied
in the environment of the scheduler, not the environment of the 3process-wait*,
so bindings in effect when 3process-wait* was called will 2not* be
in effect when 2function* is applied.  Be careful when using any free
references in 2function*.  2whostate* is a string containing a brief
description of the reason for waiting.  If the who-line at the bottom
of the screen is looking at this process, it will show 2whostate*.
.lisp
.exdent 96 Examples:
(process-wait "sleep"
	#'(lambda (now)
             (> (time-difference (time) now) 100.))
	(time))

(process-wait "Buffer"
	#'(lambda (b) (not (zerop (buffer-n-things b))))
	the-buffer)
.end_lisp
.end_defun

.defun process-sleep interval
This simply waits for 2interval* sixtieths of a second, and then returns.
It uses 3process-wait*.
.end_defun

.defun process-wait-with-timeout whostate interval function &rest arguments
This is like 3process-wait* except that if 2interval* sixtieths of a
second go by and the application of 2function* to 2arguments* is
still returning 3nil*, then 3process-wait-with-timeout* returns
3t*.  If the application of 2function* to 2arguments* does return
non-3nil* during the interval, 3process-wait-with-timeout* returns
3nil*.
.end_defun

.defun process-allow-schedule
This function simply waits momentarily; all other processes will get a
chance to run before the current process runs again.
.end_defun

.defvar sys:scheduler-stack-group
This is the stack group in which the scheduler executes.
.end_defvar

.defvar sys:clock-function-list
This is a list of functions to be called by the scheduler 60 times a second.
Each function is passed one argument: the number of 60ths of a second
since the last time that the functions on this list were called.
These functions implement various
system overhead operations such as blinking the blinking cursor
on the screen.  Note that these functions are called inside the
scheduler, just as are the functions of simple processes (see (simple-process)).
The scheduler calls these functions as often as possible, but never
more often than 60 times a second.  That is, if there are no processes
ready to run, the scheduler will call the functions 60 times a second,
assuming that, all together, they take less than 1/60 second to run.
If there are processes continually ready to run, then the scheduler will call 
these functions as often as it can; usually this is once a second, since
usually the scheduler only gets control once a second.
.end_defvar

.defvar sys:active-processes
This is the scheduler's data-structure.  It is a list of lists, where
the car of each element is an active process or 3nil* and the cdr is information
about that process.
.end_defvar

.defvar sys:all-processes
This is a list of all the processes in existence.  It is mainly for
debugging.
.end_defvar

.defvar si:initial-process
This is the process in which the system starts up when it is booted.
.end_defvar

.defun si:sb-on &optional when
3si:sb-on* controls what events cause a sequence break, i.e. when
re-scheduling occurs.  The following keywords are names of events
which can cause a sequence break.
.table 3
.kitem :clock
This event happens periodically based on a clock.  The default period
is one second.  See 3sys:%tv-clock-rate*, (sys:%tv-clock-rate-meter).
.kitem :keyboard
Happens when a character is received from the keyboard.
.kitem :chaos
Happens when a packet is received from the Chaosnet,
or transmission of a packet to the Chaosnet is completed.
.end_table

Since the keyboard and Chaosnet are heavily buffered, there is no
particular advantage to enabling the 3:keyboard* and 3:chaos* events,
unless the 3:clock* event is disabled.

With no argument, 3si:sb-on* returns a list
of keywords for the currently enabled events.

With an argument, the set of enabled events is changed.  The argument
can be a keyword, a list of keywords, 3nil* (which disables sequence
breaks entirely since it is the empty list), or a number which is the
internal mask, not documented here.
.end_defun

@c with-real-time would be here except it's in the hacks package

@section Locks
'cindex "lock"

	A 2lock* is a software construct used for synchronization
of two processes.  A lock is either held by some process, or is free.
When a process tries to seize a lock, it waits until the lock is free,
and then it becomes the process holding the lock.  When it is finished,
it unlocks the lock, allowing some other process to seize it.
A lock protects some resource or data structure so that only one
process at a time can use it.

	In the Lisp Machine, a lock is a locative pointer to a cell.
If the lock is free, the cell contains 3nil*; otherwise it contains
the process that holds the lock.  The 3process-lock* and 3process-unlock*
functions are written in such a way as to guarantee that two processes
can never both think that they hold a certain lock; only one process
can ever hold a lock at a time.

.defun process-lock locative &optional (lock-value 3current-process*) (whostate 3"Lock"*)
This is used to seize the lock which 2locative* points to.
If necessary, 3process-lock* will wait until the lock becomes free.
When 3process-lock* returns, the lock has been seized.  2lock-value*
is the object to store into the cell specified by 2locative*, and
2whostate* is passed on to 3process-wait*.
.end_defun

.defun process-unlock locative &optional (lock-value 3current-process*)
This is used to unlock the lock which 2locative* points to.
If the lock is free or was locked by some other process, an
error is signaled.  Otherwise the lock is unlocked.  2lock-value*
must have the same value as the 2lock-value* parameter to the matching
call to 3process-lock*, or else an error is signalled.
.end_defun

	It is a good idea to use 3unwind-protect* to make sure that
you unlock any lock that you seize.  For example, if you write
.lisp
(unwind-protect
   (progn (process-lock lock-3)
	  (function-1)
	  (function-2))
   (process-unlock lock-3))
.end_lisp
then even if 3function-1* or 3function-2* does a 3*throw*,
3lock-3* will get unlocked correctly.  Particular programs that use
locks often define special forms which package this 3unwind-protect*
up into a convenient stylistic device.

	3process-lock* and 3process-unlock* are written in
terms of a sub-primitive function called 3%store-conditional*
(see (%store-conditional-fun)), which
is sometimes useful in its own right.

@section Creating a Process

There are two ways of creating a process.  One is to create a "permanent"
process which you will hold on to and manipulate as desired.  The other
way is to say simply, "call this function on these arguments in another
process, and don't bother waiting for the result."  In the latter case
you never actually use the process itself as an object.

.defun make-process name &rest options
Creates and returns a process named 2name*.  The process will not be
capable of running until it has been reset or preset in order to initialize
the state of its computation.

The 2options* are alternating keywords and values which allow you to
specify things about the process, however no options are necessary if
you aren't doing anything unusual.  The following options are allowed:
.table 3
.kitem :simple-p
Specifying 3t* here gives you a simple process (see (simple-process)).
.kitem :flavor
Specifies the flavor of process to be created.  See (process-flavors) for
a list of all the flavors of process supplied by the system.
.kitem :stack-group
The stack group the process is to use.  If this option is not specified
a stack group will be created according to the relevant options below.
.kitem :warm-boot-action
What to do with the process when the machine is booted.
See (process-warm-boot-action-method).
.kitem :quantum
See (process-quantum-method).
.kitem :priority
See (process-priority-method).
.kitem :run-reasons
Lets you supply an initial run reason.  The default is 3nil*.
.kitem :arrest-reasons
Lets you supply an initial arrest reason.  The default is 3nil*.
.kitem :sg-area
The area in which to create the stack group.  The default is
the value of 3default-cons-area*.
.kitem :regular-pdl-area
The area in which to create the stack group's regular pdl.
The default is 3sys:linear-pdl-area*.
.kitem :special-pdl-area
The area in which to create the stack group's special binding pdl.
The default is the value of 3default-cons-area*.
.kitem :regular-pdl-size
How big to make the stack group's regular pdl.  The default is large enough for most purposes.
.kitem :special-pdl-size
How big to make the stack group's special binding pdl.
The default is large enough for most purposes.
.kitem :swap-sv-on-call-out
.item1 :swap-sv-of-sg-that-calls-me
'kindex :swap-sv-of-sg-that-calls-me make-process
.item1 :trap-enable
'kindex :trap-enable make-process
Specify those attributes of the stack group.  You don't want to use
these.
.end_table

If you specify 3:flavor*, there can be additional options provided
by that flavor.
.end_defun

The following three functions allow you to call a function and have its
execution happen asynchronously in another process.  This can be used
either as a simple way to start up a process which will run "forever",
or as a way to make something happen without having to wait for it
complete.  When the function returns, the process is returned to a pool
of free processes, making these operations quite efficient.  The only
difference between these three functions is in what happens if the
machine is booted while the process is still active.

Normally the function to be run should not do any I/O to the terminal.
Refer to (sg-terminal-io-issues) for a discussion of the issues.

.defun process-run-function name function &rest args
Creates a process named 2name*, presets it so it will apply
2function* to 2args*, and starts it running.  If the machine
is booted, the process is flushed (see (flushed-process)).  If it is then reset,
2function* will be called again.
.end_defun

.defun process-run-temporary-function name function &rest args
Creates a process named 2name*, presets it so it will apply
2function* to 2args*, and starts it running.  If the machine
is booted, the process is killed (returned to the free pool).
.end_defun

.defun process-run-restartable-function name function &rest args
Creates a process named 2name*, presets it so it will apply
2function* to 2args*, and starts it running.  If the machine
is booted, the process is reset and restarted.
.end_defun

@section Process Messages

.nopara
These are the messages that can be sent to any flavor of process.
Certain process flavors may define additional messages.  Not all possible
messages are listed here, only those "of interest to the user".

@subsection Process Attributes

.defmethod process :name
Returns the name of the process, which was the first argument to 3make-process*
or 3process-run-function* when the process was created.  The name is
a string which appears in the printed-representation of the process, stands for
the process in the who-line and the 3peek* display, etc.
.end_defmethod

.defmethod process :stack-group
Returns the stack group currently executing on behalf of this process.
This can be different from the initial-stack-group if the process contains
several stack groups which coroutine among themselves,
or if the process is in the error-handler, which runs in its own stack group.

Note that the stack-group of a 2simple* process (see (simple-process))
is not a stack group at all, but a function.
.end_defmethod

.defmethod process :initial-stack-group
Returns the stack group the initial-function is called in when the process starts up
or is reset.
.end_defmethod

.defmethod process :initial-form
Returns the initial "form" of the process.
This isn't really a Lisp form; it is a cons whose car is the initial-function
and whose cdr is the list of arguments to which that function is applied
when the process starts up or is reset.

In a simple process (see (simple-process)), the initial form is a list of one
element, the process's function.

To change the initial form, send the 3:preset* message (see (process-preset-method)).
.end_defmethod

.defmethod process :wait-function
Returns the process's current wait-function, which is
the predicate used by the scheduler to determine if the process is runnable.
This is 3#'true* if the process is running, and 3#'false* if the
process has no current computation (just created, initial function has
returned, or "flushed" (see (flushed-process)).
.end_defmethod

.defmethod process :wait-argument-list
Returns the arguments to the process's current wait-function.  This will
frequently be the 3&rest* argument to 3process-wait* in the
process's stack, rather than a true list.  The system always uses it in
a safe manner, i.e. it forgets about it before 3process-wait* returns.
.end_defmethod

.defmethod process :whostate
Returns a string which is the state of the process to go in the who-line at
the bottom of the screen.  This is 3"run"* if the process is running or
trying to run, otherwise the reason why the process is waiting.  If the
process is stopped, then this whostate string is ignored and the who-line
displays 3arrest* if the process is arrested or 3stop* if the process has
no run reasons.
.end_defmethod

.defmethod process :quantum
.defmethod1 process :set-quantum 60ths
Return or change the number of 60ths of a second this process is allowed to
run without waiting before the scheduler will run someone else.  The quantum
defaults to 1 second.
@c [This feature doesn't really work very well.]
.end_defmethod

.defmethod process :quantum-remaining
Returns the amount of time remaining for this process to run, in 60ths of a second.
.end_defmethod

.defmethod process :priority
.defmethod1 process :set-priority priority-number
Return or change the priority of this process.  The larger the number, the
more this process gets to run.  Within a priority level the scheduler runs all
runnable processes in a round-robin fashion.  Regardless of priority a process
will not run for more than its quantum.  The default priority is 0, and no
normal process uses other than 0.
.end_defmethod

.defmethod process :warm-boot-action
.defmethod1 process :set-warm-boot-action action
Return or change the process's warm-boot-action, which controls what
happens if the machine is booted while this process is active.
(Contrary to the name, this applies to both cold and warm booting.) This
can be 3nil*, which means to "flush" the process (see
(flushed-process)), or a function to call.  The default is
3si:process-warm-boot-delayed-restart*, which resets the process,
causing it to start over at its initial function.  You can also use
3si:process-warm-boot-reset*, which throws out of the process'
computation and kills the process, or 3si:process-warm-boot-restart*,
which is like the default but restarts the process at an earlier stage
of system reinitialization.  This is used for processes like the
keyboard process and chaos background process which are needed for
reinitialization itself.

.end_defmethod

.defmethod process :simple-p
Returns 3nil* for a normal process, 3t* for a simple process.
See (simple-process).
.end_defmethod


@subsection Run and Arrest Reasons

.defmethod process :run-reasons
Returns the list of run reasons, which are the reasons why this process should
be active (allowed to run).
.end_defmethod

.defmethod process :run-reason object
Adds 2object* to the process's run reasons.  This can activate the process.
.end_defmethod

.defmethod process :revoke-run-reason object
Removes 2object* from the process's run reasons.  This can stop the process.
.end_defmethod

.defmethod process :arrest-reasons
Returns the list of arrest reasons, which are the reasons why this process
should be inactive (forbidden to run).
.end_defmethod

.defmethod process :arrest-reason object
Adds 2object* to the process's arrest reasons.  This can stop the process.
.end_defmethod

.defmethod process :revoke-arrest-reason object
Removes 2object* from the process's arrest reasons.  This can activate
the process.
.end_defmethod

.defmethod process :active-p
.defmethod1 process :runnable-p
These two messages are the same.  3t* is returned if the process is
active, i.e. it can run if its wait-function allows.  3nil* is returned
if the process is stopped.
.end_defmethod

@subsection Bashing the Process

.defmethod process :preset function &rest args
Sets the process's initial function to 2function* and initial arguments
to 2args*.  The process is then reset so that it will throw out of
any current computation and start itself up by 3apply*ing 2function* to 2args*.
A 3:preset* message to a stopped process
will return immediately, but will not activate the process, hence the
process will not really apply 2function* to 2args* until it is activated later.
.end_defmethod

.defmethod process :reset &optional no-unwind kill
Forces the process to throw out of its present computation and apply its
initial function to its initial arguments, when it next runs.  The
throwing out is skipped if the process has no present computation (e.g.
it was just created), or if the 2no-unwind* option so specifies.  The
possible values for 2no-unwind* are:
.table 3
.item :unless-current
.item1 nil
Unwind unless the stack group to be unwound is the one we are currently
executing in, or belongs to the current process.

.item :always
Unwind in all cases.  This may cause the message to throw through its
caller instead of returning.

.item t
Never unwind.
.end_table

If 2kill* is 3t*, the process is to be killed after unwinding it.
This is for internal use by the 3:kill* message only.

A 3:reset* message to a stopped process
will return immediately, but will not activate the process, hence the
process will not really get reset until it is activated later.
.end_defmethod

.defmethod process :flush
.setq flushed-process page
Forces the process to wait forever.  A process may not 3:flush* itself.
Flushing a process is different from stopping it, in that it is still active
and hence if it is reset or preset it will start running again.
@c A flushed process will be reset by the window system if it is a process
@c controlled by process-mixin and the window is selected or exposed.
@c Also it will be given a run-reason if it doesn't have one.
@c But this is not the place to document that.
.end_defmethod

.defmethod process :kill
Gets rid of the process.  It is reset, stopped,
and removed from 3sys:all-processes*.
.end_defmethod

.defmethod process :interrupt function &rest args
Forces the process to 3apply* 2function* to 2args*.  When 2function* returns,
the process will continue the interrupted computation.  If the process is waiting,
it wakes up, calls 2function*, then waits again when 2function* returns.

If the process is stopped it will not 3apply* 2function* to 2args* 
immediately, but later when it is activated.  Normally the 3:interrupt* message
returns immediately, but if the process's stack group is in an unusual internal
state it may have to wait for it to get out of that state.
.end_defmethod

@section Process Flavors
.setq process-flavors section-page

These are the flavors of process provided by the system.  It is possible for users
to define additional flavors of their own.

.defflavor si:process
This is the standard default kind of process.
.end_defflavor

.defflavor si:simple-process
.setq simple-process page
.cindex simple process
A simple process is not a process in the conventional sense.  It has no
stack group of its own; instead of having a stack group that gets
resumed when it is time for the process to run, it has a function that
gets called when it is time for the process to run.  When the
wait-function of a simple process becomes true, and the scheduler
notices it, the simple process's function is called, in the scheduler's
own stack group.  Since a simple process does not have any stack group
of its own, it can't save "control" state in between calls; any state
that it saves must be saved in data structure.

The only advantage of simple processes over normal processes is that
they use up less system overhead, since they can be scheduled without
the cost of resuming stack-groups.  They are intended as a special,
efficient mechanism for certain purposes.  For example, packets received
from the Chaosnet are examined and distributed to the proper receiver by
a simple process which wakes up whenever there are any packets in the
input buffer.  However, they are harder to use, because you can't save
state information across scheduling.  That is, when the simple process
is ready to wait again, it must return; it can't call 3process-wait*
and continue to do something else later.  In fact, it is an error to
call 3process-wait* from inside a simple process.  Another drawback
to simple processes is that if the function signals an error, the scheduler
itself will be broken, and multiprocessing will stop; this situation can
be hard to repair.  Also, while a simple process is running, no other
process will be scheduled; simple processes should never run for a long
time without returning, so that other processes can run.

Asking for the stack group of a simple process does not signal an error,
but returns the process's function instead.

Since a simple process cannot call 3process-wait*, it needs some other
way to specify its wait-function.  To set the wait-function of a simple
process, use 3si:set-process-wait* (see below).  So, when a simple
process wants to wait for a condition, it should call
3si:set-process-wait* to specify the condition, and then return.
.end_defflavor

.defun si:set-process-wait simple-process wait-function wait-argument-list
Set the 2wait-function* and 2wait-argument-list* of 2simple-process*.
See the description of the 3si:simple-process* flavor (above) for
more information.
.end_defun

@c [si:coroutining-process not documented here because it doesn't seem of general
@c enough interest and what it does is too hard to explain.]


@section Other Process Functions

.defun process-enable process
Activates 2process* by revoking all its run and arrest reasons,
then giving it a run reason of 3:enable*.
.end_defun

.defun process-reset-and-enable process
Resets 2process* then enables it.
.end_defun

.defun process-disable process
Stops 2process* by revoking all its run reasons.  Also revokes
all its arrest reasons.
.end_defun

.nopara
The remaining functions in this section are obsolete, since they simply
duplicate what can be done by sending a message.  They are documented here
because their names are in the 3global* package.

.defun process-preset process function &rest args
Just sends a 3:preset* message.
.end_defun

.defun process-reset process
Just sends a 3:reset* message.
.end_defun

.defun process-name process
Gets the name of a process, like the 3:name* message.
.end_defun

.defun process-stack-group process
Gets the current stack group of a process, like the 3:stack-group* message.
.end_defun

.defun process-initial-stack-group process
Gets the initial stack group of a process, like the 3:initial-stack-group* message.
.end_defun

.defun process-initial-form process
Gets the initial "form" of a process, like the 3:initial-form* message.
.end_defun

.defun process-wait-function process
Gets the current wait-function of a process, like the 3:wait-function* message.
.end_defun

.defun process-wait-argument-list p
Gets the arguments to the current wait-function of a process, like the
3:wait-argument-list* message.
.end_defun

.defun process-whostate p
Gets the current who-line state string of a process, like the 3:whostate* message.
.end_defun

@chapter Errors and Debugging
.cindex error system
.cindex handling errors
.setq error-chapter chapter-number

The first section of this chapter explains how programs
can handle errors, by means of condition handlers.  It also explains how
a program can signal an error if it detects something it doesn't like.

The second explains how users can handle errors, by means of an interactive debugger;
that is, it explains how to recover if you do something wrong.
A new user of the Lisp Machine, or someone who just wants to know how
to deal with errors and not how to cause them, should ignore the first
section and skip ahead to (debugger).

	The remaining sections describe some other debugging facilities.
Anyone who is going to be writing programs for the Lisp Machine should
familiarize himself with these.

	The 2trace* facility provides the ability to perform certain
actions at the time a function is called or at the time it returns.  The
actions may be simple typeout, or more sophisticated debugging functions.

	The 2advise* facility is a somewhat similar facility for modifying
the behavior of a function.

	The 2step* facility allows the evaluation of a form to be
intercepted at every step so that the user may examine just what is happening
throughout the execution of the form.

	The 2MAR* facility provides the ability to cause a trap
on any memory reference to a word (or a set of words) in memory.  If
something is getting clobbered by agents unknown, this can help track
down the source of the clobberage.

@section The Error System

@subsection Conditions
.cindex conditions
.setq condition section-page

	Programmers often want to control what action is taken by their
programs when errors or other exceptional situations occur.  Usually
different situations are handled in different ways, and in order to express
what kind of handling each situation should have, each situation
must have an associated name.  In Zetalisp there is the
concept of a 2condition*.  Every condition has a name, which is a
symbol.  When an unusual situation occurs, some condition is 2signalled*, and a
2handler* for that condition is invoked.

	When a condition is signalled, the system (essentially) searches
up the stack of nested function invocations looking for a handler
established to handle that condition.  The handler is a function which
gets called to deal with the condition.  The condition mechanism itself
is just a convenient way for finding an appropriate handler function
given the name of an exceptional situation.  On top of this is built the
error-condition system, which defines what arguments are passed to a
handler function and what is done with the values returned by a handler
function.  Almost all current use of the condition mechanism is for
errors, but the user may find other uses for the underlying mechanism.

.need 1000
.cindex signaller
.cindex signalling conditions
The search for an appropriate handler is done by the function 3signal*:

.defun signal condition-name &rest args
3signal* searches through all currently-established condition handlers,
starting with the most recent.  If it finds one that will handle
the condition 2condition-name*, then it calls that handler with a first argument
of 2condition-name*, and with 2args* as the rest of the arguments.
If the first value returned by the handler is 3nil*, 3signal*
will continue searching for another handler; otherwise,
it will return the first two values returned by the handler.
If 3signal* doesn't find any handler that returns a non-3nil*
value, it will return 3nil*.
.end_defun

.cindex condition handler
.cindex handling conditions

Condition handlers are established through the 3condition-bind* special form:

.defspec condition-bind
The 3condition-bind* special form is used for establishing handlers for conditions.
It looks like:
.lisp
(condition-bind ((2cond-1* 2hand-1*)
                 (2cond-2* 2hand-2*)
                 ...)
  2body*)
.end_lisp
Each 2cond-n* is either the name of a condition, or a list of names of conditions,
or 3nil*.  If it is 3nil*, a handler is set up for 2all* conditions
(this does not mean that the handler really has to handle all
conditions, but it will be offered the chance to do so, and can return
3nil* for conditions which it is not interested in).
Each 2hand-n* is a form which is evaluated to produce a handler function.
The handlers are established sequentially such that the 2cond-1*
handler would be looked at first.
.lisp
.exdent 96 Example:
(condition-bind ((:wrong-type-argument 'my-wta-handler)
                 ((lossage-1 lossage-2) lossage-handler))
    (princ "Hello there.")
    (= t 69))
.end_lisp
This first sets up the function 3my-wta-handler* to handle
the 3:wrong-type-argument* condition.  Then, it sets up the value
of the symbol 3lossage-handler* to handle both the 3lossage-1*
and 3lossage-2* conditions.  With these handlers set up, it prints out a message and
then runs headlong into a wrong-type-argument error by calling the
function 3=* with an argument which is not a number.
The condition handler 3my-wta-handler* will be given a chance to
handle the error.  3condition-bind*
makes use of ordinary variable binding, so that if the
3condition-bind* form is thrown through, the handlers will be
disestablished.  This also means that condition handlers are established
only within the current stack-group.
.end_defspec

@subsection Error Conditions

[This section is incorrect.  The mechanism by which errors are
signalled does not work.  It will be redesigned someday.]

The use of the condition mechanism by the error system defines an
additional protocol for what arguments are passed to error-condition
handlers and what values they may return.

There are basically four possible responses to an error: 2proceeding*,
2restarting*, 2throwing*, or entering the 2debugger*.
The default action, taken if no handler exists or deigns to handle
the error (returns non-3nil*), is to enter the debugger.
A handler may give up on the execution that produced the error by
throwing (see 3*throw*, (*throw-fun)).  2Proceeding* means to
repair the error and continue execution.  The exact meaning of this
depends on the particular error, but it generally takes the form of
supplying a replacement for an unacceptable argument to some function,
and retrying the invocation of that function.  2Restarting* means
throwing to a special standard catch-tag, 3error-restart*.  Handlers
cause proceeding and restarting by returning certain special values,
described below.

	Each error condition is signalled with some parameters, the meanings of which
depend on the condition.  For example, the condition 3:unbound-variable*,
which means that something tried to find the value of a symbol which was unbound,
is signalled with at least one parameter, the unbound symbol.  It is always
all right to signal an error condition with extra parameters beyond those whose
meanings are defined by the condition.

	An error condition handler is applied to several arguments.  The first
argument is the name of the condition that was signalled (a symbol).
This allows the same function to handle several different conditions,
which is useful if the handling of those conditions is very similar.
(The first argument is also the name of the condition for non-error conditions.)
The second argument is a 3format* control string (see the description
of 3format*, on (format-fun)).  The third argument
is 3t* if the error is 2proceedable*; otherwise it is 3nil*.  The
fourth argument is 3t* if the error is 2restartable*; otherwise it
is 3nil*.
The fifth argument is the name of the function that signalled the
error, or 3nil* if the signaller can't figure out the correct name to pass.
The rest of the arguments are the parameters with which the condition was signalled.
If the 3format* control string is used with these parameters,
a readable English message should be produced.  Since more
information than just the parameters might be needed to print a reasonable
message, the program signalling the condition is free to pass any extra
parameters it wants to, after the parameters which the condition is 2defined*
to take.  This means that every handler must expect to be called
with an arbitrarily high number of arguments, so every handler should
have a 3&rest* argument (see (&rest)).

	An error condition handler may return any of several values.  If it
returns 3nil*, then it is stating that it does not wish to handle
the condition after all; the process of signalling will continue
looking for a prior handler (established farther down on the stack) as
if the handler which returned 3nil* had not existed at all.
(This is also true for non-error conditions.)
If the handler does wish to handle the condition, it can try to
proceed from the error if it is proceedable, or restart from it if it
is restartable, or it can throw to a catch tag.
Proceeding and restarting are done by returning two values.  The first value
is one of the following symbols:
.table 3
.item :return
If the error was signalled by calling 3cerror*, the second value is returned
as the value of 3cerror*.  If the error was signalled by calling 3ferror*,
proceeding is not allowed.  If the error was detected by the Lisp system, the
error will be proceeded from, using the second value if a data object is needed.
For example, for an 3:undefined-function* error, the handler's second value will
be used as the function to be called, in place of the non-existent function definition.

.item eh:return-value
If the error was signalled by calling 3ferror* or 3cerror*, the second value
is returned from that function, regardless of whether the error was proceedable.
If the error was detected by the Lisp system, the second value is returned as the
result of the function in which the error was detected.  It should be obvious
that 3:return-value* allows you to do things that are totally unanticipated by
the program that got the error.

.item :error-restart
The second value is thrown to the catch tag 3error-restart*.
.end_table
The condition handler must not return any other sort of values.  However,
it can legitimately throw to any tag instead of returning at all.
If a handler tries to proceed an unproceedable error or
restart an unrestartable one, an error is signalled.

	Note that if the handler returns 3nil*, it is not said to have
handled the error; rather, it has decided not to handle it, but to "continue to signal"
it so that someone else may handle it.  If an error is signalled
and none of the handlers for the condition decide to handle it, the
debugger is entered.

	Here is an example of an excessively simple handler for the 3:wrong-type-argument*
condition.

[Note that this code does not work in system 56.]

.lisp
;;; This function handles the :wrong-type-argument condition,
;;; which takes two defined parameters: a symbol indicating
;;; the correct type, and the bad value.
(defun sample-wta-handler (condition control-string
			   proceedable-flag restartable-flag
			   function correct-type bad-value
			   &rest rest)
 (prog ()
   (format error-output "~%There was an error in ~S~%" function)
   (lexpr-funcall (function format) error-output
		  control-string correct-type bad-value rest)
   (cond ((and proceedable-flag
	       (yes-or-no-p "Do you want use nil instead?"))
	  (return 'return nil))
	 (t (return nil))))) ;don't handle
.end_lisp

If an error condition reaches the error handler, the 3RESUME* (or control-C) command may be
used to continue from it.  If the condition name has a 3eh:proceed* property,
that property is called as a function with two arguments, the stack-group and
the "ete" (an internal error-handler data structure).  Usually it will ignore
these arguments.  If this function returns, its value will be returned from the
3ferror* or 3cerror* that signalled the condition.  If no such property
exists, the error-handler asks the user for a form, evaluates it, and causes
3ferror* or 3cerror* to return that value.  Putting such a property on can
be used to change the prompt for this form, avoid asking the user, or change
things in more far-reaching ways.

@subsection Signalling Errors
.cindex signalling errors

	Some error conditions are signalled by the Lisp system when it detects
that something has gone wrong.  Lisp programs can also signal errors,
by using any of the functions 3ferror*, 3cerror*, or 3error*.
3ferror* is the most commonly used of these.  3cerror* is used
if the signaller of the error wishes to make the error be 2proceedable*
or 2restartable*, or both.  3error* is provided for Maclisp compatibility.

	A 3ferror* or 3cerror* that doesn't have any particular
condition to signal should use 3nil* as the condition name.  The
only kind of handler that will be invoked by the signaller in this case is the kind
that handles 2all* conditions, such as is set up by
.lisp
(condition-bind ((nil 2something*) ...) ...)
.end_lisp
In practice, the 3nil* condition is used a great deal.
.cindex nil, used as a condition name

.defun ferror condition-name control-string &rest params
3ferror* signals the error condition 2condition-name*.  The associated error
message is obtained by calling 3format* (see (format)) on 2control-string*
and 2params*.  The error is neither proceedable nor restartable, so 3ferror*
will not return unless the user forces it to by intervening with the debugger.
In most cases 2condition-name* is 3nil*, which means that no condition-handler
is likely to be found and the debugger will be entered.

.lisp
.exdent 96 Examples:
(cond ((> sz 60)
       (ferror nil
	       "The size, ~S, was greater than the maximum"
	       sz))
      (t (foo sz)))

(defun func (a b)
   (cond ((and (> a 3) (not (symbolp b)))
          (ferror ':wrong-type-argument
                  "The name, ~1G~S, must be a symbol"
                  'symbolp
                  b))
         (t (func-internal a b))))
.end_lisp

If the error is not handled and the debugger is entered, the error message is printed by
calling 3format* with 2control-string* as the control string and the elements of
2params* as the additional arguments.  Alternatively, the formatted output functions
((format:outfmt-fun)) can be used to generate the error message:

.lisp
(ferror nil
  (format:outfmt "Frob has "
		 (format:plural (format:onum n-elts)
				" element")
		 " which is too few"))
.end_lisp
In this case 2params* are not used for printing the error message, and often none are
needed.  They may still be useful as information for condition handlers, and those that a
condition is documented to expect should always be supplied.
.end_defun

.defun cerror proceedable-flag restartable-flag condition-name control-string &rest params
3cerror* is just like 3ferror* (see above) except for
2proceedable-flag* and 2restartable-flag*.  If 3cerror* is called with a
non-3nil* 2proceedable-flag*, the caller should be prepared
to accept the returned value of 3cerror* and use it to retry the
operation that failed.  Similarly, if he passes 3cerror* a non-3nil* 2restartable-flag*,
he should be sure that there is a 3*catch* above him for the tag 3error-restart*.

If 2proceedable-flag* is 3t* and the error goes to the debugger, if the
user says to proceed from the error he will be asked for a replacement object
which 3cerror* will return.  If 2proceedable-flag* is not 3t* and not
3nil*, the user will not be asked for a replacement object and 3cerror*
will return no particular value when the error is proceeded.

Note:  Many programs that want to signal restartable errors will want to use
the 3error-restart* special form; see (error-restart-fun).
.lisp
.exdent 96 Example:
(do ()
    ((symbolp a))
  1; Do this stuff until *a1 becomes a symbol.*
  (setq a (cerror t nil ':wrong-type-argument
	   "The argument ~2G~A was ~1G~S, which is not ~3G~A"
	   'symbolp a 'a "a symbol")))
.end_lisp
Note: the form in this example is so useful that there is a standard
special form to do it, called 3check-arg* (see (check-arg-fun)).
.end_defun

.defun error message &optional object interrupt
3error* is provided for Maclisp compatibility.  In Maclisp,
the functionality of 3error* is, essentially, that 2message*
gets printed, preceeded by 2object* if present, and that
2interrupt*, if present, is a user interrupt channel to be invoked.

	In order to fit this definition into Zetalisp way of handling
errors, 3error* is defined to be:
.lisp
(cerror (not (null 2interrupt*))
        nil
        (or (get 2interrupt* 'eh:condition-name)
            2interrupt*)
        (if (missing? 2object*) ;1If no 3object* given*
	    "~*~A"
	    "~S ~A")
        2object*
        2message*)
.end_lisp

	Here is what that means in English: first of all, the condition
to be signalled is 3nil* if 2interrupt* is 3nil*.  If there is some
condition whose meaning is close to that of one of the Maclisp user interrupt
channels, the name of that channel has an 3eh:condition-name* property,
and the value of that property is the name of the condition to signal.
Otherwise, 2interrupt* is the name of the condition to signal; probably
there will be no handler and the debugger will be entered.

	If 2interrupt* is specified, the error will be proceedable.
The error will not be restartable.  The 3format* control string
and the arguments are chosen so that the right error message gets printed,
and the handler is passed everything there is to pass.
.end_defun

.defmac error-restart body...
3error-restart* is useful for denoting a section of a program
that can be restarted if certain errors occur during its execution.
The forms of the body are evaluated sequentially.  If an error occurs
within the evaluation of the body and is restarted (by a condition handler
or the debugger), the evaluation resumes at the beginning of the 3error-restart*'s
body.  The only way a restartable error can occur is if 3cerror* is called
with a second argument of 3t*.
.lisp
1Example:*
(error-restart
  (setq a (* b d))
  (cond ((> a maxtemp)
         (cerror nil t 'overheat
	    "The frammistat will overheat by ~D. degrees!"
	    (- a maxtemp))))
  (setq q (cons a a)))
.end_lisp
If the 3cerror* happens, and the handler invoked (or the debugger) restarts
the error, then evaluation will continue with the 3(setq a (* b d))*,
and the condition 3(> a maxtemp)* will get checked again.

.lisp
13error-restart* is implemented as a macro that expands into:*
(prog ()
 loop (*catch 'error-restart
              (return (progn
                         2form-1*
                         2form-2*
                         2...*)))
      (go loop))
.end_lisp
.end_defmac

.defmac check-arg var-name predicate description [type-symbol]
'cindex argument checking
The 3check-arg* form is useful for checking arguments
to make sure that they are valid.  A simple example is:
.lisp
(check-arg foo stringp "a string")
.end_lisp
3foo* is the name of an argument whose value should be a string.
3stringp* is a predicate of one argument, which returns 3t*
if the argument is a string.  3"a string"* is an English description
of the correct type for the variable.

The general form of 3check-arg* is
.lisp
(check-arg 2var-name*
           2predicate*
           2description*
	   2type-symbol*)
.end_lisp
2var-name* is the name of the variable
whose value is of the wrong type.  If the error is proceeded this variable will
be 3setq*'ed to a replacement value.  2predicate* is a test for whether the
variable is of the correct type.  It can be either a symbol whose function definition
takes one argument and returns non-3nil* if the type is correct, or it can be a non-atomic
form which is evaluated to check the type, and presumably contains a reference to
the variable 2var-name*.  2description* is a string which expresses 2predicate*
in English, to be used in error messages.  2type-symbol* is a symbol which
is used by condition handlers to determine what type of argument was expected.
It may be omitted if it is to be the same as 2predicate*, which must be a symbol
in that case.

The use of the 2type-symbol* is not really well-defined yet, but the intention
is that if it is 3numberp* (for example), the
condition handlers can tell that a number was needed, and might try to
convert the actual supplied value to a number and proceed.

[We need to establish a conventional way of "registering" the
type-symbols to be used for various expected types.  It might as well
be in the form of a table right here.]

The 2predicate* is usually a symbol such as 3fixp*, 3stringp*,
3listp*, or 3closurep*, but when there isn't any convenient predefined
predicate, or when the condition is complex, it can be a form.  In this case
you should supply a 2type-symbol* which encodes the type.  For example:
.lisp
(check-arg a
           (and (numberp a) ( a 10.) (> a 0.))
           "a number from one to ten"
           one-to-ten)
.end_lisp
If this error got to the debugger, the message
.lisp
The argument a was 17, which is not a number from one to ten.
.end_lisp
would be printed.

In general, what constitutes a valid argument is specified in three
ways in a 3check-arg*.  2description* is human-understandable,
2type-symbol* is program-understandable, and 2predicate* is
executable.  It is up to the user to ensure that these three
specifications agree.

3check-arg* uses 2predicate* to determine
whether the value of the variable is of the correct type.  If it is not,
3check-arg* signals the 3:wrong-type-argument* condition, with four
parameters.  First, 2type-symbol* if it was supplied, or else 2predicate*
if it was atomic, or else 3nil*.  Second, the bad value.
Third, the name of the argument (2var-name*).
Fourth, a string describing the proper type (2description*).
If the error is proceeded, the variable is set to the value returned,
and 3check-arg* starts over, checking the type again.
Note that only the first two of these parameters are defined for
the 3:wrong-type-argument* condition, and so 3:wrong-type-argument*
handlers should only depend on the meaning of these two.
.end_defmac

.defmac check-arg-type var-name type-name [description]
This is a useful variant of the 3check-arg* form.  A simple example
is:
.lisp
(check-arg foo :number)
.end_lisp
3foo* is the name of an argument whose value should be a number.
3:number* is a value which is passed as a second argument to 3typep*
(see (typep-fun)); that is, it is a symbol that specifies a data type.
The English form of the type name, which gets put into the error message,
is found automatically.

The general form of 3check-arg-type* is:
.lisp
(check-arg-type 2var-name*
                2type-name*
                2description*)
.end_lisp
2var-name* is the name of the variable whose value is of the wrong
type.  If the error is proceeded this variable will be 3setq*'ed to a
replacement value.  2type-name* describes the type which the
variable's value ought to have.  It can be exactly those things
acceptable as the second argument to 3typep*.  2description* is a
string which expresses 2predicate* in English, to be used in error
messages.  It is optional.  If it is omitted, and 2type-name* is one
of the keywords accepted by 3:typep*, which describes a basic Lisp
data type, then the right 2description* will be provided correctly.
If it is omitted and 2type-name* describes some other data type, then
the description will be the word "a" followed by the printed
representation of 2type-name* in lower-case.
.end_defmac

@subsection Standard Condition Names

	Some condition names are used by the kernel Lisp system, and are
documented below; since they are of global interest, they are on
the keyword package.  Programs outside the kernel system are free
to define their own condition names; it is intended that the
description of a function include a description of any conditions
that it may signal, so that people writing programs that call
that function may handle the condition if they desire.  When you
decide what package your condition names should be in, you should
apply the same criteria you would apply for determining which package
a function name should be in; if a program
defines its own condition names, they should 2not* be on the
keyword package. For example, the condition names 3chaos:bad-packet-format*
and 3arpa:bad-packet-format* should be distinct.  For further
discussion, see (package).

	The following table lists all standard conditions and the
parameters they take; more will be added in the future.
These are all error-conditions, so in addition to the condition name
and the parameters, the handler receives the other arguments described above.

.table 3
.item :wrong-type-argument  2type-name*  2value*
2value* is the offending argument, and 2type-name* is
a symbol for what type is required.  Often, 2type-name*
is a predicate which returns non-3nil* if applied to an acceptable value.
If the error is proceeded, the value returned by the handler
should be a new value for the argument to be used instead of
the one which was of the wrong type.

.item :inconsistent-arguments  2list-of-inconsistent-argument-values*
These arguments were inconsistent with each other, but the fault
does not belong to any particular one of them.
This is a catch-all, and it would be good to identify subcases
in which a more specific categorization can be made.
If the error is proceeded, the value returned by the
handler will be returned by the function whose arguments were inconsistent.

.item :wrong-number-of-arguments  2function*  2number-of-args-supplied*  2list-of-args-supplied*
2function* was invoked with the wrong number of arguments.
The elements of 2list-of-args-supplied* have already been evaluated.
If the error is proceeded, the value returned should be
a value to be returned by 2function*.

.item :invalid-function  2function-name*
The name had a function definition but it was no good for calling.
You can proceed, supplying a value to return as the value of the
call to the function.

.item :invalid-form  2form*
The so-called 2form* was not a meaningful form for 3eval*.
Probably it was of a bad data type.
If the error is proceeded, the value returned
should be a new form; 3eval* will use it instead.

.item :undefined-function  2function-name*
The symbol 2function-name* was not defined as a function.
If the error is proceeded, then the value returned will be used instead
of the (non-existent) definition of 2function-name*.

.item :unbound-variable  2variable-name*
The symbol 2variable-name* had no value.
If the error is proceeded, then the value returned will be used instead
of the (non-existent) value of 2variable-name*.
.end_table

@subsection "Errset"

As in Maclisp, there is an 3errset* facility which allows a very simple
form of error handling.  If an error occurs inside an errset, and no condition
handler handles it, i.e. the debugger would be entered, control is
returned (2thrown*) to the errset.  The errset can control whether or
not the debugger's error message is printed.  All errors are caught by
3errset*, whether they are signalled by 3ferror*, 3cerror*, 3error*,
or the Lisp system itself.

	A problem with 3errset* is that it is 2too* powerful;
it will apply to any unhandled error at all.  If you are writing code
that anticipates some specific error, you should find out what condition
that error signals and set up a handler.  If you use 3errset* and
some unanticipated error crops up, you may not be told--this can cause
very strange bugs.  Note that the variable 3errset* allows all 3errset*s
to be disabled for debugging purposes.

.defspec errset form [flag]
The 3errset* special form catches errors during
the evaluation of 2form*.  If an error occurs, the usual error message
is printed unless 2flag* is 3nil*.  Then control is thrown and the errset-form
returns 3nil*.  2flag* is evaluated first and is optional, defaulting to 3t*.
If no error occurs, the value of the errset-form is a list of one element,
the value of 2form*.
.end_defspec

.defspec catch-error form [flag]
3catch-error* is a variant of 3errset*.  This special form
catches errors during the evaluation of
2form*, and returns two values.  Normally the first value is the value of
2form* and the second value is 3nil*.  If an error occurs, the usual
error message is printed unless 2flag* is 3nil*, and then control is thrown
out of the 3catch-error* form, which returns two values: first 3nil* and second a
non-3nil* value that indicates the occurrence of an error.  2flag* is
evaluated first and is optional, defaulting to 3t*.
.end_defspec

.defvar errset
If this variable is non-3nil*, 3errset* forms are not allowed to trap errors.
The debugger is entered just as if there were no errset.  This is intended mainly
for debugging.  The initial value of 3errset* is 3nil*.
.end_defvar

.defspec err
This is for Maclisp compatibility only and should not be used.

3(err)* is a dumb way to cause an error.  If executed inside an errset,
that errset returns 3nil*, and no message is printed.
Otherwise an unseen throw-tag error occurs.

3(err 2form*)* evaluates 2form* and causes the containing errset
to return the result.  If executed when not inside an errset, an unseen
throw-tag error occurs.

3(err 2form* 2flag*)*, which exists in Maclisp, is not supported.
.end_defspec

@section The Debugger
.cindex debugger
.setq debugger section-page

	When an error condition is signalled and no handlers decide to
handle the error, an interactive debugger is entered to allow the user to
look around and see what went wrong, and to help him continue the program
or abort it.  This section describes how to use the debugger.

@subsection Entering the Debugger

	There are two kinds of errors; those generated by the Lisp Machine's
microcode, and those generated by Lisp programs (by using 3ferror* or
related functions).  When there
is a microcode error, the debugger prints out a message such as the following:
.lisp
>>TRAP 5543 (TRANS-TRAP)
The symbol FOOBAR is unbound.
While in the function *EVAL  SI:LISP-TOP-LEVEL1
.end_lisp

	The first line of this error message indicates entry to
the debugger and contains some mysterious internal microcode information:
the micro program address, the microcode trap name and parameters, and a microcode backtrace.
Users can ignore this line in most cases.  The second line contains a description
of the error in English.  The third line indicates where the error
happened by printing a very abbreviated "backtrace" of the stack (see
below); in the example, it is saying that the error was signalled inside the
function 3*eval*, which was called by 3si:lisp-top-level1*.

	Here is an example of an error from Lisp code:
.lisp
>>ERROR: The argument X was 1, which is not a symbol,
While in the function FOO  *EVAL  SI:LISP-TOP-LEVEL1
.end_lisp

	Here the first line contains the English description of the
error message, and the second line contains the abbreviated backtrace.
3foo* signalled the error by calling 3ferror*, however 3ferror*
is censored out of the backtrace.

	After the debugger's initial message it prints the function that
got the error and its arguments.

	The debugger can be manually entered either by causing an error
(e.g. by typing a ridiculous symbol name such as 3ahsdgf* at the Lisp
read-eval-print loop) or by typing the 3BREAK* key with the 3META* shift
held down while the program is reading from the terminal.  Typing the 3BREAK*
key with both 3CONTROL* and 3META* held down will force the program
into the debugger immediately, even if it is running.  If the 3BREAK*
key is typed without 3META*, it puts you into a read-eval-print loop
using the 3break* function (see (break-fun)) rather into the debugger.

.defun eh process
Stops 2process* and calls the debugger on it so that you can look at its
current state.  Exit the debugger with the Control-Z command and 3eh*
will release the process and return.  2process* can be a window, in which
case the window's process will be used.

If 2process* is not a process but a stack group, the current state of the
stack group will be examined.  The caller should ensure that no one tries
to resume that stack group while the debugger is looking at it.
.end_defun

@subsection How to Use the Debugger

	Once inside the debugger, the user may give a wide variety
of commands.  This section describes how to give the commands, and then
explains them in approximate order of usefulness.  A summary is provided
at the end of the listing.

	When the error hander is waiting for a command, it prompts
with an arrow:

.lisp

.end_lisp

At this point, you may either type in a Lisp expression, or type a
command (a Control or Meta character is interpreted as a command,
whereas most normal characters are interpreted as the first character of
an expression).  If you type the 3HELP* key or the 3?* key, you will
get some introductory help with the error handler.

If you type a Lisp expression, it will be interpreted as a Lisp form,
and will be evaluated in the context of the function which got the
error.  That is, all bindings which were in effect at the time of the
error will be in effect when your form is evaluated, with certain
exceptions explained below.  The result of the evaluation will be
printed, and the debugger will prompt again with an arrow.  If, during
the typing of the form, you change your mind and want to get back to the
debugger's command level, type the 3ABORT* key or a Control-G; the debugger will respond
with an arrow prompt.  In fact, at any time that typein is expected from
you, while you are in the debugger, you may type 3ABORT* or Control-G to flush
what you are doing and get back to command level.  This
3read-eval-print* loop maintains the values of 3+*, 3**, and
3-* just as the top-level one does.

If an error occurs in the evaluation of the Lisp expression you type,
you will get into a second error handler looking at the new error.  You
can abort the computation and get back to the first error by typing the
3ABORT* key (see below).  However, if the error is trivial the abort
will be done automatically and the original error message will be reprinted.

Various debugger commands ask for Lisp objects, such as an
object to return, or the name of a catch-tag.  Whenever it tries to get
a Lisp object from you, it expects you to type in a 2form*; it will
evaluate what you type in.  This provides greater generality, since
there are objects to which you might want to refer that cannot be
typed in (such as arrays).  If the form you type is non-trivial (not
just a constant form), the debugger will show you the result of
the evaluation, and ask you if it is what you intended.  It expects a Y
or N answer (see the function 3y-or-n-p*, (y-or-n-p-fun)), and if you answer negatively
it will ask you for another form.  To quit out of the command, just type
3ABORT* or Control-G.

When the debugger evaluates a form, the variable bindings at the point of error
are in effect with the following exceptions:

3terminal-io* is rebound to the stream the error handler is using.  3eh:old-terminal-io*
is bound to the value 3terminal-io* had at the point of error.

3standard-input* and 3standard-output* are rebound to be synonymous with
3terminal-io*; their old bindings are saved in 3eh:old-standard-input*
and 3eh:old-standard-output*.

3+* and 3** are rebound to the error handler's previous form and previous value.
When the debugger is first entered, 3+* is the last form typed, which is typically
the one that caused the error, and 3** is the value of the 2previous* form.

3evalhook* (see (evalhook-var)) is rebound to 3nil*, turning off
the 3step* facility if it had been in use when the error occurred.

Note that the variable bindings are those in effect at the point of
error, 2not* those of the current frame being looked at.  This may be
changed in the future.

@subsection "Debugger Commands"

All debugger commands are single characters, usually with the Control or
Meta bits.  The single most useful command is 3ABORT* (or Control-Z),
which exits from the debugger and throws out of the computation that got
the error.  This is the 3ABORT* key, not a 5-letter command.  ITS
users should note that Control-Z is not 3CALL*.  Often you are not
interested in using the debugger at all and just want to get back to
Lisp top level; so you can do this in one character.  

The 3ABORT* command returns control to the most recent read-eval-print loop.
This can be Lisp top level, a 3break*, or the debugger command loop
associated with another error.  Typing 3ABORT* multiple times will throw
back to successively older read-eval-print or command loops until top level
is reached.  Typing Control-Meta-3ABORT*, on the other hand, will always throw
to top level.  Control-Meta-3ABORT* is not a debugger command, but a system
command which is always available no matter what program you are in.

Note that typing 3ABORT* in the middle of typing a form to be evaluated
by the debugger aborts that form, and returns to the debugger's command level,
while typing 3ABORT* as a debugger command returns out of the debugger
and the erring program, to the 2previous* command level.

Self-documentation is provided by the 3HELP* or 3?* command,
which types out some documentation on the debugger commands, including any
special commands which apply to the particular error currently being handled.

Often you want to try to proceed from the error.  To do this,
use the 3RESUME* (or Control-C) command.  The exact way 3RESUME* works depends on
the kind of error that happened.  For some errors, there is no standard
way to proceed at all, and 3RESUME* will just tell you this and
return to the debugger's command level.  For the very common "unbound variable" error,
it will get a Lisp object from you, which will be used in place of the (nonexistent) value
of the symbol.  For unbound-variable or undefined-function
errors, you can also just type Lisp forms to set the variable or define
the function, and then type 3RESUME*; it will proceed without asking
anything.

The debugger knows about a "current stack frame", and there
are several commands which use it.  The initially "current" stack frame
is the one which signalled the error; either the one which got the microcode-detected
error, or the one which called 3ferror*, 3cerror*, or 3error*.
When the debugger starts it up it shows you this frame in the following format:
.lisp
FOO:
   Arg 0 (X): 13
   Arg 1 (Y): 1
.end_lisp
and so on.  This means that 3foo* was called
with two arguments, whose names (in the Lisp source code) are 3x* and 3y*.
The current values of 3x* and 3y* are 313* and 31* respectively.  These
may not be the original arguments if 3foo* happens to 3setq* its argument variables.

The 3CLEAR-SCREEN* (or Control-L) command clears the screen, retypes
the error message that was initially printed when the debugger was
entered, and then prints out a description of the current frame, in the
above format.

Several commands are provided to allow you to examine the Lisp control
stack and to make other frames current than the one which got the error.
The control stack (or "regular pdl") keeps a record of all functions which are currently
active.  If you call 3foo* at Lisp's top level, and it calls 3bar*,
which in turn calls 3baz*, and 3baz* gets an error, then a
backtrace (a backwards trace of the stack) would show all of this
information.  The debugger has two backtrace commands.  Control-B
simply prints out the names of the functions on the stack; in the above
example it would print
.lisp
BAZ  BAR  FOO  SI:*EVAL  SI:LISP-TOP-LEVEL1  SI:LISP-TOP-LEVEL
.end_lisp
The arrows indicate the direction of calling.  The Meta-B command prints
a more extensive backtrace, indicating the names of the arguments to the functions
and their current values; for the example above it might look like:
.lisp
BAZ:
   Arg 0 (X): 13
   Arg 1 (Y): 1

BAR:
   Arg 0 (ADDEND): 13

FOO:
   Arg 0 (FROB): (A B C . D)
.end_lisp
and so on.

The Control-N command moves "down" to the "next" frame (that is, it
changes the current frame to be the frame which called it), and prints
out the frame in this same format.  Control-P moves "up" to the
"previous" frame (the one which this one called), and prints out the
frame in the same format.  Meta-< moves to the top of the stack, and
Meta-> to the bottom; both print out the new current frame.  Control-S
asks you for a string, and searches the stack for a frame whose
executing function's name contains that string.  That frame becomes
current and is printed out.  These commands are easy to remember since
they are analogous to editor commands.

Meta-L prints out the current frame in "full screen" format, which shows
the arguments and their values, the local variables and their values,
and the machine code with an arrow pointing to the next instruction to
be executed.  Refer to (understanding-compiled-code) for help in reading
this machine code.

Meta-N moves to the next frame and prints it out in
full-screen format, and Meta-P moves to the previous frame and prints it
out in full-screen format.  Meta-S is like Control-S but does a
full-screen display.

Commands such as Control-N and Meta-N, which are meaningful to repeat,
take a prefix numeric argument and repeat that many types.  The numeric argument
is typed by using Control- or Meta- and the number keys, as in the editor.

Control-E puts you into the editor, looking at the source code for the
function in the current frame.  This is useful when you have found a function
which caused the error and needs to be fixed.  The editor command Control-Z
will return to the error handler, if it is still there.

Meta-C is similar to Control-C, but in the case of an unbound variable or undefined
function, actually 3setq*s the variable or defines the function, so that the error
will not happen again.  Control-C (or 3RESUME*) provides a replacement value
but does not actually change the variable.

Control-R is used to return a value from the current frame; the frame
that called that frame continues running as if the function of the current frame
had returned.  This command prompts you for a form, which it will evaluate;
it returns the resulting value, possibly after confirming it with you.

The Control-T command does a 3*throw* to a given tag with a given value; you
are prompted for the tag and the value.

Control-Meta-R is a variation of Control-R; it starts the current frame over with
the same function and arguments.  If the function has been redefined in the meantime
(perhaps you edited it and fixed its bug) the new definition is used.  Control-Meta-R
asks for confirmation before doing it.

The Control-Meta-N, Control-Meta-P, and Control-Meta-B commands are
like the corresponding Control- commands but don't censor the stack.
When running interpreted code, the error handler usually tries to skip
over frames that belong to functions of the interpreter, such as
3*eval*, 3prog*, and 3cond*, and only show "interesting"
functions.  Control-Meta-N, Control-Meta-P, and Control-Meta-B show
everything.  They also show frames that are not yet active; that is,
frames whose arguments are still being computed for functions that are
going to be called.  The Control-Meta-U command goes up the stack
to the next interesting function, and makes that the current frame.

Control-Meta-A takes a numeric argument 2n*, and prints out
the value of the 2n*th argument of the current frame.  It leaves 3**
set to the value of the argument, so that you can use the Lisp 3read-eval-print*
loop to examine it.  It also leaves 3+* set to a locative pointing to the
argument on the stack, so that you can change that argument (by calling
3rplacd* on the locative).  Control-Meta-L is similar,
but refers to the 2n*th local variable of the frame.  Control-Meta-F is similar
but refers to the function executing in the frame; it ignores its numeric argument
and doesn't allow you to change the function.

Another way to examine and set the arguments, locals and values of a
frame is with the functions 3eh-arg*, 3eh-loc*, 3eh-val* and
3eh-fun*.  Use these functions in expressions you evaluate inside
the error handler, and they refer to the arguments, locals, values and
function, respectively, of the error handler's current frame.

.defun eh-arg arg-number-or-name
When used in an expression evaluated in the error handler, 3eh-arg*
returns the value of the specifed argument in the error handler's
current frame.  Argument names are compared ignoring packages; only
the pname of the symbol you supply is relevant.  3eh-arg* can appear
in 3setf* and 3locf* to set an argument or get its location.
.end_defun

.defun eh-loc local-numer-or-name
3eh-loc* is just like 3eh-arg* but accesses the current frame's
locals instead of its arguments.
.end_defun

.defun eh-val &optional value-number
3eh-val* is used in an expression evaluated in the error handler
when the current frame is returning multiple values, to examine those
values.  This is only useful if the function has already begun to
return some values (as in a trap-on-exit), since otherwise they are
all 3nil*.  Which value is specified only by number, because values
do not normally have names.

3eh-val* can be used with 3setf* and 3locf*.  You can make a
frame return a specific sequence of values by setting all but the last
value with 3eh-val* and doing Control-R to return the last value.

3eh-val* with no argument returns a list of all the
values this frame is returning.

3eh-val* is currently not useful on a frame which has not been asked
to return multiple values.
.end_defun

.defun eh-fun
3eh-fun* can be called in an expression being evalued inside the
error handler to return the function-object being called in the
current frame.  It can be used with 3setf* and 3locf*.
.end_defun

Control-Meta-W calls the window error handler, a display-oriented debugger which
is not documented in this manual.  It should, however, be usable without further
documentation.

@subsection "Summary of Commands"

.table 1 0 1500
.item Control-A
Print argument list of function in current frame.
.item Control-Meta-A
Examine or change the 2n*th argument of the current frame.
.item Control-B
Print brief backtrace.
.item Meta-B
Print longer backtrace.
.item Control-Meta-B
Print longer backtrace with no censoring of interpreter functions.
.item Control-C or 3RESUME*
Attempt to continue.
.item Meta-C
Attempt to continue, 3setq*ing the unbound variable or otherwise
"permanently" fixing the error.
.item Control-Meta-C
Attempt to restart (see the 3error-restart* special form, (error-restart-fun)).
.item Control-E
Edit the source code for the function in the current frame.
.item Control-Meta-F
Set 3** to the function in the current frame.
.item Control-G or ABORT
Quit to command level.  This is not a command, but something you can type to escape from
typing in a form.
.item Control-L or 3CLEAR SCREEN*
Redisplay error message and current frame.
.item Meta-L
Full-screen typeout of current frame.
.item Control-Meta-L
Get local variable 2n*.
.item Control-N or 3LINE*
Move to next frame.  With argument, move down 2n* frames.
.item Meta-N
Move to next frame with full-screen typeout.  With argument, move down 2n* frames.
.item Control-Meta-N
Move to next frame even if it is "uninteresting" or still accumulating
arguments.  With argument, move down 2n* frames.
.item Control-P or 3RETURN*
Move to previous frame.  With argument, move up 2n* frames.
.item Meta-P
Move to previous frame with full-screen typeout.  With argument, move up 2n* frames.
.item Control-Meta-P
Move to previous frame even if it is "uninteresting" or still
accumulating arguments.  With argument, move up 2n* frames.
.item Control-R
Return a value from the current frame.
.item Meta-R
Return multiple values from the current frame (doesn't work currently).
.item Control-Meta-R
Reinvoke the function in the current frame (throw back to it and start it over
at its beginning.)
.item Control-S
Search for a frame containing a specified function.
.item Meta-S
Same as control-S but does a full display.
.item Control-T
Throw a value to a tag.
.item Control-Meta-U
Move up the stack to the previous "interesting" frame.
.item Control-Meta-W
Call the window error handler.
.item Control-Z or 3ABORT*
Abort the computation and throw back to the most recent
3break* or debugger, to the program's "command level",
or to Lisp top level.
.item ? or Help
Print a help message.
.item Meta-<
Go to top of stack.
.item Meta->
Go to bottom of stack.
.item Control-0 through Control-Meta-9
Numeric arguments to the following command are specified by typing a decimal number
with Control and/or Meta held down.
.end_table

@section Tracing Function Execution
.cindex tracing function execution
.setq trace section-page

	The trace facility allows the user to 2trace* some functions.
When a function is traced, certain special actions will be taken when it is
called, and when it returns.  The default tracing action is to print a message when the
function is called, showing its name and arguments, and another message when
the function returns, showing its name and value(s).

	The trace facility is closely compatible with Maclisp.  One invokes
it through the 3trace* and 3untrace* special forms, whose syntax is described
below.  Alternatively, you can use the trace system by clicking "trace"
in the system menu, or by using the "meta-X Trace" command in the editor.
This allows you to select the trace options from a menu instead of having
to remember the following syntax.

.defspec trace
A 3trace* form looks like:
.lisp
(trace 2spec-1* 2spec-2* ...)
.end_lisp

Each 2spec* can take any of the following forms:
.table
.item a symbol
This is a function name, with no options.  The function will be traced in the
default way, printing a message each time it is called and each time it returns.

.item a list 3(2function-name* 2option-1* 2option-2* ...)*
2function-name* is a symbol and the 2options* control how it is to be
traced.  The various options are listed below.  Some options take "arguments",
which should be given immediately following the option name.

.item a list 3(:function 2function-spec* 2option-1* 2option-2* ...)*
This is like the previous form except that 2function-spec* need not be a symbol
(see (function-spec)).
It exists because if 2function-name* was a list in the previous form, it
would instead be interpreted as the following form:

.item a list 3((2function-1* 2function-2*...) 2option-1* 2option-2* ...)*
All of the functions are traced with the same options.  Each 2function* can
be either a symbol or a general function-spec.
.end_table
.end_defun

	The following 3trace* options exist:
.table 3 0 1500
.item :break 2pred*
'kindex :break trace
Causes a breakpoint to be entered after printing
the entry trace information but before applying the traced function to its
arguments, if and only if 2pred* evaluates to non-3nil*.  During the
breakpoint, the symbol 3arglist* is bound to a list of the arguments
of the function.

.item :exitbreak 2pred*
'kindex :exitbreak trace
This is just like 3break* except that the
breakpoint is entered after the function has been executed and the exit trace information
has been printed, but before control returns.    During the
breakpoint, the symbol 3arglist* is bound to a list of the arguments
of the function, and the symbol 3values* is bound to a list of
the values that the function is returning.

.item :error
'kindex :error trace
Causes the error handler to be called when the function is entered.  Use
3RESUME* (or Control-C) to continue execution of the function.  If this option
is specified, there is no printed trace output other than the error message
printed by the error handler.

.item :step
'kindex :step trace
Causes the function to be single-stepped whenever it is called.
See the documentation on the step facility, (stepper-section).

.item :entrycond 2pred*
'kindex :entrycond trace
Causes trace information to be printed on function
entry only if 2pred* evaluates to non-3nil*.

.item :exitcond 2pred*
'kindex :exitcond trace
Causes trace information to be printed on function
exit only if 2pred* evaluates to non-3nil*.

.item :cond 2pred*
'kindex :cond trace
This specifies both 3:exitcond* and 3:entrycond*
together.

.item :wherein 2function*
'kindex :wherein trace
Causes the function to be traced only when called, directly or indirectly,
from the specified function 2function*.  One can give several trace specs to
3trace*, all specifying the same function but with different 3wherein*
options, so that the function is traced in different ways when called from
different functions.

This is different from 3advise-within*, which only affects the function
being advised when it is called directly from the other function.  The 3trace*
3:wherein* option means that when the traced function is called, the special
tracing actions occur if the other function is the caller of this function,
or its caller's caller, or its caller's caller's caller, etc.

.item :argpdl 2pdl*
'kindex :argpdl trace
This specifies a symbol 2pdl*, whose value is
initially set to 3nil* by 3trace*.  When the function is traced, a
list of the current recursion level for the function, the function's
name, and a list of arguments is consed onto the 2pdl* when the
function is entered, and cdr'ed back off when the function is exited.
The 2pdl* can be inspected from within a breakpoint, for example, and
used to determine the very recent history of the function. This option
can be used with or without printed trace output.  Each function can be
given its own pdl, or one pdl may serve several functions.

.item :entryprint 2form*
'kindex :entryprint trace
The 2form* is evaluated and the value is included in the trace message
for calls to the function.  You can give this option more than once, and
all the values will appear, preceded by 3\\*.

.item :exitprint 2form*
'kindex :exitprint trace
The 2form* is evaluated and the value is included in the trace message
for returns from the function.  You can give this option more than once, and
all the values will appear, preceded by 3\\*.

.item :print 2form*
'kindex :print trace
The 2form* is evaluated and the value is included in the trace messages
for both calls to and returns from the function.  You can give this option more than once, and
all the values will appear, preceded by 3\\*.

.item :entry 2list*
'kindex :entry trace
This specifies a list of arbitrary forms whose
values are to be printed along with the usual entry-trace.  The list of
resultant values, when printed, is preceded by 3\\* to separate it
from the other information.

.item :exit 2list*
'kindex :exit trace
This is similar to 3entry*, but specifies expressions
whose values are printed with the exit-trace.  Again, the list of
values printed is preceded by 3\\*.

.item :arg  :value  :both  nil
'kindex :arg trace
'kindex :value trace
'kindex :both trace
These specify which of the usual trace
printouts should be enabled.  If 3:arg* is specified, then on function
entry the name of the function and the values of its arguments will be
printed.  If 3:value* is specified, then on function exit the returned
value(s) of the function will be printed.  If 3:both* is specified,
both of these will be printed.  If 3nil* is specified, neither will
be printed.  If none of these four options are specified the default is
to 3:both*.  If any further 2options* appear after one of these,
they will not be treated as options!  Rather, they will be considered to
be arbitrary forms whose values are to be printed on entry and/or exit
to the function, along with the normal trace information. The values
printed will be preceded by a 3//*, and follow any values specified
by 3:entry* or 3:exit*.  Note that since these options "swallow" all
following options, if one is given it should be the last option
specified.
.end_table

.vindex arglist
If the variable 3arglist* is used in any of the expressions given for
the 3:cond*, 3:break*, 3:entry*, or 3:exit* options, or after the 3:arg*,
3:value*, 3:both*, or 3nil* option, when those expressions are evaluated
the value of 3arglist* will be bound to a list of the arguments
given to the traced function.  Thus 
.lisp
(trace (foo :break (null (car arglist))))
.end_lisp
would cause a break in 3foo* if and only if the first
argument to 3foo* is 3nil*.
If the 3:break* or 3:error* option is used, the variable 3arglist* will be valid inside
the break-loop.  If you 3setq* 3arglist*, the arguments seen by the function will
change.
3arglist* should perhaps have a colon, but it can be omitted because this is
the name of a system function and therefore global.

.vindex values
Similarly, the variable 3values* will
be a list of the resulting values of the traced function.  For obvious
reasons, this should only be used with the 3:exit* option.
If the 3:exitbreak* option is used, the variables 3values* and 3arglist* 
are valid inside the break-loop.  If you 3setq* 3values*, the values returned
by the function will change.
3values* should perhaps have a colon, but it can be omitted because this is
the name of a system function and therefore global.

The trace specifications may be "factored", as explained above.  For example,
.lisp
(trace ((foo bar) :break (bad-p arglist) :value))
1is equivalent to*
(trace (foo :break (bad-p arglist) :value)
       (bar :break (bad-p arglist) :value))
.end_lisp
Since a list as a function name is interpreted as a list of
functions, non-atomic function names (see (function-spec))
are specified as follows:
.lisp
(trace (:function (:method flavor :message) :break t))
.end_lisp

3trace* returns as its value a list of names of all functions it traced.  If
called with no arguments, as just 3(trace)*, it returns a list of all the
functions currently being traced.

If you attempt to trace a function already being traced, 3trace* calls
3untrace* before setting up the new trace.

Tracing is implemented with encapsulation (see (encapsulate)), so if the
function is redefined (e.g. with 3defun* or by loading it from a QFASL file)
the tracing will be transferred from the old definition to the new definition.

Tracing output is printed on the stream which is the value of 3trace-output*.
This is synonymous with 3terminal-io* unless you change it.

.defspec untrace
3untrace* is used to undo the effects of 3trace* and restore functions to
their normal, untraced state.  3untrace* will take multiple specifications,
e.g. 3(untrace foo quux fuphoo)*.  Calling 3untrace* with no arguments
will untrace all functions currently being traced.
.end_defun

Unlike Maclisp, if there is an error 3trace* (or 3untrace*) will
invoke
'c shaft you by invoking
the error system and give an English message, instead of returning
lists with question marks in them.  Also, the 3remtrace* function
is not provided, since it is unnecessary.

.defvar trace-compile-flag
If the value of 3trace-compile-flag* is non-3nil*, the functions
created by 3trace* will get compiled, allowing you to trace special
forms such as 3cond* without interfering with the execution of the
tracing functions.  The default value of this flag is 3nil*.
.end_defvar

@section Advising a Function
.setq advise section-page
.cindex advice to functions

To advise a function is to tell it to do something extra in addition to its
actual definition.  It is done by means of the function 3advise*.  The
something extra is called a piece of advice, and it can be done before, after,
or around the definition itself.  The advice and the definition are independent,
in that changing either one does not interfere with the other.  Each function
can be given any number of pieces of advice.

Advising is fairly similar to tracing, but its purpose is different.  Tracing is
intended for temporary changes to a function to give the user information about
when and how the function is called and when and with what value it returns.
Advising is intended for semi-permanent changes to what a function actually
does.  The differences between tracing and advising are motivated by this
difference in goals.

Advice can be used for testing out a change to a function in a way
which is easy to retract.  In this case, you would call 3advise* from
the terminal.  It can also be used for customizing a
function which is part of a program written by someone else.  In this
case you would be likely to put a call to 3advise* in one of your
source files or your login init file (see (login-fun)), rather than modifying the other
person's source code.

Advising is implemented with encapsulation (see (encapsulate)), so if the
function is redefined (e.g. with 3defun* or by loading it from a QFASL file)
the advice will be transferred from the old definition to the new definition.

.defspec advise
A function is advised by the special form
.lisp
(advise 2function* 2class* 2name* 2position*
  2form1* 2form2*...)
.end_lisp
None of this is evaluated.  2function* is the function to put the advice on.
It is usually a symbol, but any function spec is allowed (see (function-spec)).
The 2forms* are the advice; they get evaluated when the function is called.
2class* should be either 3:before*, 3:after*, or 3:around*, and says
when to execute the advice (before, after, or around the execution of the
definition of the function).  The meaning of 3:around* advice is explained a
couple of sections below.

2name* is used to keep track of multiple pieces of advice on the same
function.  2name* is an arbitrary symbol which is remembered as the
name of this particular piece of advice.  If you have no name in mind,
use 3nil*; then we say the piece of advice is anonymous.  A given
function and class can have any number of pieces of anonymous advice,
but it can have only one piece of named advice for any one name.  If
you try to define a second one, it replaces the first.  Advice for
testing purposes is usually anonymous.  Advice used for customizing
someone else's program should usually be named so that multiple
customizations to one function have separate names.  Then, if you
reload a customization that is already loaded, it does not get put on
twice.

2position* says where to put this piece of advice in relation to
others of the same class already present on the same function.  If
2position* is 2nil*, the new advice goes in the default position: it
usually goes at the beginning (where it is executed before the other
advice), but if it is replacing another piece of advice with the same
name, it goes in the same place that the old piece of advice was in.

If you wish to specify the position, 2position* can be the numerical index of
which existing piece of advice to insert this one before.  Zero means
at the beginning; a very large number means at the end.  Or,
2position* can be the name of an existing piece of advice of the same
class on the same function; the new advice is inserted before that
one.

.lisp
.exdent 96 1For example,*
(advise factorial :before negative-arg-check nil
  (if (minusp (first arglist))
      (ferror nil "factorial of negative argument")))
.end_lisp
This modifies the factorial function so that if it is called with a negative argument
it signals an error instead of running forever.
.end_defspec

.defspec unadvise
.lisp
(unadvise 2function* 2class* 2position*)
.end_lisp
removes pieces of advice.  None of its "arguments" are evaluated.  2function*
and 2class* have the same meaning as they do in the function 3advise*.
2position* specifies which piece of advice to remove.  It can be the numeric
index (zero means the first one) or it can be the name of the piece of advice.

3unadvise* can remove more than one piece of advice if some of its arguments
are missing.  If 2position* is missing or 3nil*, then all advice of the specified class
on the specified function is removed.  If 2class* is missing or 3nil* as well, then all
advice on the specified function is removed.  3(unadvise)* removes all advice
on all functions, since 2function* is not specified.
.end_defspec

The following are the primitive functions for adding and removing advice.
Unlike the above special forms, these are functions and can be conveniently
used by programs.  3advise* and 3unadvise* are actually macros which
expand into calls to these two.

.defun si:advise-1 function class name position forms
Adds advice.  The arguments have the same meaning as in 3advise*.
Note that the 2forms* argument is 2not* a 3&rest* argument.
.end_defun

.defun si:unadvise-1 function &optional class position
Removes advice.  If 2class* or 2position* is 3nil* or unspecified,
all classes of advice or advice at all positions/with all names is removed.
.end_defun

You can find out manually what advice a function has with 3grindef*, which
grinds the advice on the function as forms which are calls to
3advise*.  These are in addition to the definition of the function.

To poke around in the advice structure with a program, you must work
with the encapsulation mechanism's primitives.  See (encapsulate).

.defvar si:advised-functions
A list of all functions which have been advised.
.end_defvar

@subsection Designing the Advice

For advice to interact usefully with the definition and intended
purpose of the function, it must be able to interface to the data flow
and control flow through the function.  We provide conventions for
doing this.

The list of the arguments to the function can be found in the variable
3arglist*.  3:before* advice can replace this list, or an element of it, to
change the arguments passed to the definition itself.  If you replace
an element, it is wise to copy the whole list first with
.lisp
(setq arglist (copylist arglist))
.end_lisp
After the function's definition has been executed, the list of the
values it returned can be found in the variable 3values*.  3:after* advice
can set this variable or replace its elements to cause different
values to be returned.

All the advice is executed within a 3prog*, so any piece of advice can
exit the entire function with 3return*.  The arguments of the 3return*
will be returned as the values of the function.  No further advice
will be executed.  If a piece of 3:before* advice does this, then the
function's definition will not even be called.

@subsection :around Advice

A piece of 3:before* or 3:after* advice is executed entirely before or
entirely after the definition of the function.  3:around* advice is wrapped
around the definition; that is, the call to the original definition of
the function is done at a specified place inside the piece of 3:around*
advice.  You specify where by putting the symbol 3:do-it* in that place.

For example, 3(+ 5 :do-it)* as a piece of 3:around* advice would add 35* to
the value returned by the function.  This could also be done by
3(setq values (list (+ 5 (car values))))* as 3:after* advice.

When there is more than one piece of 3:around* advice, they are stored
in a sequence just like 3:before* and 3:after* advice.  Then, the first
piece of advice in the sequence is the one started first.  The second
piece is substituted for 3:do-it* in the first one.  The third one is
substituted for 3:do-it* in the second one.  The original definition is
substituted for 3:do-it* in the last piece of advice.

3:around* advice can access 3arglist*, but 3values* is not set up until the
outermost 3:around* advice returns.  At that time, it is set to the
value returned by the 3:around* advice.  It is reasonable for the advice to
receive the values of the 3:do-it* (e.g. with 3multiple-value-list*) and
fool with them before returning them (e.g. with 3values-list*).

3:around* advice can 3return* from the 3prog* at any time, whether the
original definition has been executed yet or not.  It can also override
the original definition by failing to contain 3:do-it*.  Containing two
instances of 3:do-it* may be useful under peculiar circumstances.  If you
are careless, the original definition may be called twice, but
something like
.lisp
(if (foo) (+ 5 :do-it) (* 2 :do-it))
.end_lisp
will certainly work reasonably.

@subsection Advising One Function Within Another

It is possible to advise the function 3foo* only for when it is called
directly from a specific other function 3bar*.  You do this by advising
the function specifier 3(:within bar foo)*.  That works by finding all
occurrences of 3foo* in the definition of 3bar* and replacing them with
3altered-foo-within-bar*.  This can be done even if 3bar*'s definition is
compiled code.  The symbol 3altered-foo-within-bar* starts off with the
symbol 3foo* as its definition;
then the symbol 3altered-foo-within-bar*, rather than 3foo* itself,
is advised.  The system remembers that 3foo*
has been replaced inside 3bar*, so that if you change the definition of
3bar*, or advise it, then the replacement is propagated to the new
definition or to the advice.  If you remove all the advice on 3(:within
bar foo)*, so that its definition becomes the symbol 3foo* again, then
the replacement is unmade and everything returns to its original
state.

3(grindef bar)* will print 3foo* where it originally appeared, rather than
3altered-foo-within-bar*, so the replacement will not be seen.  Instead,
3grindef* will print out calls to 3advise* to describe all the advice that
has been put on 3foo* or anything else within 3bar*.

An alternate way of putting on this sort of advice is to use
3advise-within*.

.defspec advise-within
.lisp
(advise-within 2within-function* 2function-to-advise*
	       2class* 2name* 2position*
	2forms...*)
.end_lisp
advises 2function-to-advise* only when called directly from the function
2within-function*.  The other arguments mean the same thing as with
3advise*.  None of them are evaluated.
.end_defspec

To remove advice from 3(:within bar foo)*, you can use 3unadvise* on that
function specifier.  Alternatively, you can use 3unadvise-within*.

.defspec unadvise-within
.lisp
(unadvise-within 2within-function* 2function-to-advise* 2class* 2position*)
.end_lisp
removes advice
which has been placed on 3(:within 2within-function* 2function-to-advise*)*.
The arguments 2class* and 2position* are
interpereted as for 3unadvise*.  For example, if those two are omitted,
then all advice placed on 2function-to-advise* within
2within-function* is removed.  Additionally, if 2function-to-advise*
is omitted, all advise on any function within 2within-function* is
removed.  If there are no arguments, than all advice on one function
within another is removed.  Other pieces of advice, which have been
placed on one function and not limited to within another, are not
removed.

3(unadvise)* removes absolutely all advice, including advice for one
function within another.
.end_defspec

The function versions of 3advise-within* and 3unadvise-within* are
called 3si:advise-within-1* and 3si:unadvise-within-1*.  3advise-within* and
3unadvise-within* are macros which expand into calls to the other two.


@section Stepping Through an Evaluation
.setq stepper-section section-page
.cindex stepping through evaluation

	The Step facility gives you the ability to follow every step of
the evaluation of a form, and examine what is going on.  It is
analogous to a single-step proceed facility often found in
machine-language debuggers.  If your program is doing something
strange, and it isn't obvious how it's getting into its strange state,
then the stepper is for you.

	There are two ways to enter the stepper.  One is by use of the
3step* function.

.defun step form
	This evaluates 2form* with single stepping.  It returns
the value of 2form*.
.end_defun

	For example, if you have a function named 3foo*, and typical arguments
to it might be 3t* and 33*, you could say
.lisp
(step '(foo t 3))
.end_lisp
and the form 3(foo t 3)* will be evaluated with single stepping.

	The other way to get into the stepper is to use the 3:step* option 
of 3trace* (see (trace-fun)).  If a function is traced with the 3:step* option, then
whenever that function is called it will be single stepped.

	Note that any function to be stepped must be interpreted; that is, it
must be a lambda-expression.  Compiled code cannot be stepped by the stepper.

	When evaluation is proceeding with single stepping, before any
form is evaluated, it is (partially) printed out, preceded by a forward
arrow (7*) character  When a macro is expanded, the expansion is
printed out preceded by a double arrow (7*) character.  When a form
returns a value, the form and the values are printed out preceded by a
backwards arrow (7*) character; if there is more than one value being
returned, an and-sign (7*) character is printed between the values. 

	Since the forms may be very long, the stepper does not print all
of a form; it truncates the printed representation after a certain number
of characters.  Also, to show the recursion pattern of who calls whom in
a graphic fashion, it indents each form proportionally to its level
of recursion.

	After the stepper prints any of these things, it waits for a
command from the user.  There are several commands to tell the stepper
how to proceed, or to look at what is happening. The commands are:
.table 1 0 500
.item Control-N (Next)
Step to the Next thing.  The stepper continues until the next thing
to print out, and it accepts another command.

.item Space
Go to the next thing at this level.  In other words, continue to
evaluate at this level, but don't step anything at lower levels.  This is a good
way to skip over parts of the evaluation that don't interest you.

.item Control-U (Up)
Continue evaluating until we go up one level.  This is like
the space command, only more so; it skips over anything on the current level
as well as lower levels.

.item Control-X (eXit)
Exit; finish evaluating without any more stepping.

.item Control-T (Type)
Retype the current form in full (without truncation).

.item Control-G (Grind)
Grind (i.e. prettyprint) the current form.

.item Control-E (Editor)
Editor escape (enter the editor).

.item Control-B (Breakpoint)
Breakpoint.  This command puts you into a breakpoint (i.e.
a read-eval-print loop) from which you can examine the values of
variables and other aspects of the current environment.  From
within this loop, the following variables are available:
.table 3
.item step-form
which is the current form.
.item step-values
which is the list of returned values.
.item step-value
which is the first returned value.
.end_table
If you change the values of these variables, it will work.

.item Control-L
Clear the screen and redisplay the last 10. pending forms (forms
which are being evaluated).

.item Meta-L
Like Control-L, but doesn't clear the screen.

.item Control-Meta-L
Like Control-L, but redisplays all pending forms.

.item ? or Help
Prints documentation on these commands.
.end_table
	It is strongly suggested that you write some little function
and try the stepper on it.  If you get a feel for what the stepper does
and how it works, you will be able to tell when it is the right thing to use
to find bugs.

@section "Evalhook"

.setq evalhook-section section-page

The 3evalhook* facility provides a "hook" into the evaluator; it is a
way you can get a Lisp form of your choice to be executed whenever the
evaluator is called.  The stepper uses 3evalhook*, and usually it is
the only thing that ever needs to.  However, if you want to write your
own stepper or something similar, this is the primitive facility that
you can use to do so.  The way this works is a bit hairy, but unless
you need to write your own stepper you don't have to worry about it.

.defvar evalhook
If the value of 3evalhook* is non-3nil*, then special things
happen in the evaluator.  When a form (any form, even a number or
a symbol) is to be evaluated,
3evalhook* is bound to 3nil* and the function which
was 3evalhook*'s value is applied to one argument--the form that was trying
to be evaluated.  The value it returns is then returned from the evaluator.
.end_defvar

3evalhook* is bound to 3nil* by 3break* and by the error handler,
and 3setq*'ed to 3nil* when errors are dismissed by throwing to the
Lisp top level loop.  This provides the ability to escape from this mode
if something bad happens.

In order not to impair the efficiency of the Lisp interpreter,
several restrictions are imposed on 3evalhook*.
It only applies to evaluation--whether in a read-eval-print loop,
internally in evaluating arguments in forms, or by explicit use
of the function 3eval*.  It 2does not* have any effect
on compiled function references, on use of the function 3apply*,
or on the "mapping" functions.
(In Zetalisp, as opposed to Maclisp, it is not
necessary to do 3(*rset t)* nor 3(sstatus evalhook t)*.)
(Also, Maclisp's special-case check for 3store* is not implemented.)

.defun evalhook form hook
3evalhook* is a function which helps
exploit the 3evalhook* feature.  The 2form* is evaluated
with 3evalhook* lambda-bound to the function 2hook*.
The checking of 3evalhook* is bypassed in the evaluation
of 2form* itself, but not in any subsidiary evaluations,
for instance of arguments in the 2form*.
This is like a "one-instruction proceed" in a machine-language
debugger.  
.lisp
.exdent 96 Example:
1;; This function evaluates a form while printing debugging information.*
(defun hook (x)
   (terpri)
   (evalhook x 'hook-function))

1;; Notice how this function calls 3evalhook* to evaluate the form 3f*,*
1;; so as to hook the sub-forms.*
(defun hook-function (f)
   (let ((v (evalhook f 'hook-function)))
     (format t "form: ~s~%value: ~s~%" f v)
     v))

1;; This isn't a very good program, since if 3f* uses multiple*
1;; values, it will not work.*
.end_lisp

The following output might be seen from 3(hook '(cons (car '(a . b)) 'c))*:
.lisp
form: (quote (a . b))
value: (a . b)
form: (car (quote (a . b)))
value: a
form: (quote c)
value: c
(a . c)
.end_lisp
.end_defun

@section "The MAR"
.cindex MAR
.setq mar section-page

	The MAR facility allows any word or contiguous set of words to
be monitored constantly, and can cause an error if the words are
referenced in a specified manner.  The name MAR is from the similar
device on the ITS PDP-10's; it is an acronym for "Memory Address
Register".  The MAR checking is done by the Lisp Machine's memory
management hardware, and so the speed of general execution when the MAR is
enabled is not significantly slowed down.  However, the speed of accessing
pages of memory containing the locations being checked is slowed down somewhat, since every
reference involves a microcode trap.

	These are the functions that control the MAR:

.defun set-mar location cycle-type &optional n-words
	The 3set-mar* function clears any previous setting of the
MAR, and sets the MAR on 2n-words* words, starting at 2location*.
2location* may be any object.  Often it will be a locative pointer
to a cell, probably created with the 3locf* special form.
2n-words* currently defaults to 1,
but eventually it may default to the size of the object.
2cycle-type* says under what conditions to trap.  3:read* means that
only reading the location should cause an error, 3:write* means that
only writing the location should, 3t* means that both should.
To set the MAR to detect 3setq* (and binding) of the variable 3foo*, use
.lisp
(set-mar (value-cell-location 'foo) ':write)
.end_lisp
.end_defun

.defun clear-mar
This turns off the MAR.  Warm-booting the machine disables the
MAR but does not turn it off, i.e. references to the MARed pages
are still slowed down.  3clear-mar* does not currently speed
things back up until the next time the pages are swapped out;
this may be fixed some day.
.end_defun

.defun mar-mode
3(mar-mode)* returns a symbol indicating the current state of
the MAR.  It returns one of:
.table 3
.item nil
The MAR is not set.
.item :read
The MAR will cause an error if there is a read.
.item :write
The MAR will cause an error if there is a write.
.item t
The MAR will cause an error if there is any reference.
.end_table
.end_defun

Note that using the MAR makes the pages on which it is set
somewhat slower to access, until the next time they are
swapped out and back in again after the MAR is shut off.
Also, use of the MAR currently breaks the read-only feature
if those pages were read-only.

Proceeding from a MAR break allows the memory reference that got an error
to take place, and continues the program with the MAR still effective.  When
proceeding from a write, the error handler asks you whether to allow the
write to take place or to inhibit it, leaving the location with its old
contents.

Most--but not all--write operations first do a read.  3setq* and
3rplaca* are examples.  This means that if the MAR is in 3:read*
mode it will catch writes as well as reads, however they will trap
during the reading phase, and consequently the data to be written will
not be displayed.  This also means that setting the MAR to 3t* mode
causes most writes to trap twice, first for a read and then again for a
write.  So when the MAR says that it trapped because of a read, this
means a read at the hardware level, which may not look like a read in
your program.

@section Variable Monitoring
.cindex monitoring the value of a variable

.defun monitor-variable var &optional current-value-cell-only-p monitor-function
Calls a given function just after a given special variable is 3setq*'ed
(by compiled code or otherwise).  Does not trigger on binding of the
variable.  The function is given both the old and new values as arguments.
It does not get the name of the variable as an argument, so it is usually
necessary to use a closure as 2monitor-function* in order to remember
this.  The old value will be 3nil* if the variable had been unbound.

The default monitoring function just prints the symbol and the old and new
values.  This behavior can be changed by specifying the
2monitor-function* argument.

Normally this feature applies to all 3setq*'s, but if
2current-value-cell-only-p* is specified non-3nil*, it applies only to
those 3setq*'s which would alter the variable's currently active value
cell.  This is only relevant when 2var* is subject to a closure.

Don't try to use this with variables that are forwarded to A memory
(e.g. 3inhibit-scheduling-flag*).
.end_defun

.defun unmonitor-variable &optional var
If 2var* is being monitored, it is restored to normal.  If no 2var* is specified,
all variables that have been monitored are unmonitored.
.end_defun

@chapter How to Read Assembly Language
.cindex machine code
.cindex compiled code
.setq macro-code section-page
.setq code-chapter chapter-number
.setq understanding-compiled-code section-page

Sometimes it is useful to study the machine language code produced by
the Lisp Machine's compiler, usually in order to analyze an error, or
sometimes to check for a suspected compiler problem.  This chapter
explains how the Lisp Machine's instruction set works, and how to
understand what code written in that instruction set is doing.
Fortunately, the translation between Lisp and this instruction set is
very simple; after you get the hang of it, you can move back and forth
between the two representations without much trouble.  The following
text does not assume any special knowledge about the Lisp Machine,
although it sometimes assumes some general computer science background
knowledge.

@section Introduction

Nobody looks at machine language code by trying to interpret octal
numbers by hand.  Instead, there is a program called the Disassembler
which converts the numeric representation of the instruction set into a
more readable textual representation.  It is called the Disassembler
because it does the opposite of what an Assembler would do; however,
there isn't actually any assembler that accepts this input format, since
there is never any need to manually write assembly language for the Lisp
Machine.

The simplest way to invoke the Disassembler is with the Lisp function
3disassemble*.  Here is a simple example.  Suppose we type:

.lisp
(defun foo (x)
  (assq 'key (get x 'propname)))

(compile 'foo)

(disassemble 'foo)
.end_lisp

This defines the function 3foo*, compiles it, and invokes the Disassembler
to print out the textual representation of the result of the compilation.
Here is what it looks like:

.lisp
22 MOVE D-PDL FEF|6           ;'KEY
23 MOVE D-PDL ARG|0           ;X
24 MOVE D-PDL FEF|7           ;'PROPNAME
25 (MISC) GET D-PDL
26 (MISC) ASSQ D-RETURN
.end_lisp

The Disassembler is also used by the Error Handler and the Inspector.
When you see stuff like the above while using one of these programs, it
is disassembled code, in the same format as the 3disassemble* function
uses.  Inspecting a compiled code object shows the disassembled code.

Now, what does this mean?  Before we get started, there is just a little
bit of jargon to learn.

The acronym PDL stands for Push Down List, and means the same thing as
Stack: a last-in first-out memory.  The terms PDL and stack will be used
interchangeably.  The Lisp Machine's architecture is rather typical of
"stack machines"; there is a stack that most instructions deal with, and
it is used to hold values being computed, arguments, and local
variables, as well as flow-of-control information.  An important use of
the stack is to pass arguments to instructions, though not all
instructions take their arguments from the stack.

The acronym "FEF" stands for Function Entry Frame.  A FEF is a compiled
code object produced by the compiler.  After the 3defun* form above
was evaluated, the function cell of the symbol 3foo* contained a
lambda expression.  Then, we compiled the function 3foo*, and the
contents of the function cell were replaced by a "FEF" object.  The
printed representation of the "FEF" object for 3foo* looks like this:

.lisp
#<DTP-FEF-POINTER 11464337 FOO>
.end_lisp

The FEF has three parts (this is a simplified explanation): a header
with various fixed-format fields, a part holding constants and invisible
pointers, and the main body holding the machine language instructions.
The first part of the FEF, the header, is not very interesting and is
not documented here (you can look at it with 3describe* but it won't be easy
to understand what it all means).  The second part of the FEF holds various
constants referred to by the function; for example, our function 3foo*
references two constants (the symbols 3key* and 3propname*), and so
(pointers to) those symbols are stored in the FEF.  This part of the FEF
also holds invisible pointers to the value cells of all symbols that the
function uses as variables, and invisible pointers to the function cells
of all symbols that the function calls as functions.  The third part of
the FEF holds the machine language code itself.

Now we can read the disassembled code.  The first instruction looked
like this:

.lisp
22 MOVE D-PDL FEF|6           ;'KEY
.end_lisp

This instruction has several parts.  The 322* is the address of this
instruction.  The Disassembler prints out the address of each
instruction before it prints out the instruction, so that you can
interpret branching instructions when you see them (we haven't seen one
of these yet, but we will later).  The 3MOVE* is an opcode: this is a
3MOVE* instruction, which moves a datum from one place to another.  The
3D-PDL* is a destination specification.  The 3D* stands for
"Destination", and so 3D-PDL* means "Destination-PDL": the destination
of the datum being moved is the PDL.  This means that the
result will be pushed onto the PDL, rather than just moved to the top;
this instruction is pushing a datum onto the stack.  The next field of
the instruction is 3FEF|6*.  This is an 2address*, and it specifies
where the datum is coming from.  The vertical bar serves to separate the
two parts of the address.  The part before the vertical bar can be
thought of as a 2base register*, and the part after the bar can be
thought of as being an offset from that register.  3FEF* as a base
register means the address of the FEF that we are disassembling, and so
this address means the location six words into the FEF.  So what this
instruction does is to take the datum located six words into the FEF,
and push it onto the PDL.  The instruction is followed by a "comment"
field, which looks like 3;'KEY*.  This is not a comment that any person
wrote; the disassembler produces these to explain what is going on.  The
semicolon just serves to start the comment, the way semicolons in Lisp
code do.  In this case, the body of the comment, 3'KEY*, is telling us
that the address field (3FEF|6*) is addressing a constant (that is what
the single-quote in 3'KEY* means), and that the printed representation
of that constant is 3KEY*.  With the help of this "comment" we finally
get the real story about what this instruction is doing: it is pushing
(a pointer to) the symbol 3key* onto the stack.

The next instruction looks like this:

.lisp
23 MOVE D-PDL ARG|0           ;X
.end_lisp

This is a lot like the previous instruction; the only difference is that
a different "base register" is being used in the address.  The 3ARG*
"base register" is used for addressing your arguments: 3ARG|0* means
that the datum being addressed is the zeroth argument.  Again, the
"comment" field explains what that means: the value of X (which was the
zeroth argument) is being pushed onto the stack.

The third instruction is just like the first one; it pushes the symbol
3propname* onto the stack.

The fourth instruction is something new:

.lisp
25 (MISC) GET D-PDL
.end_lisp

The first thing we see here is 3(MISC)*.  This means that this is one of
the so-called 2miscellaneous* instructions.  There are quite a few of
these instructions.  With some exceptions, each miscellaneous
instruction corresponds to a Lisp function and has the same name as that
Lisp function.  If a Lisp function has a corresponding miscellaneous
instruction, then that function is hand-coded in Lisp Machine microcode.

Miscellaneous instructions only have a destination field; they don't
have any address field.  The inputs to the instruction come from the
stack: the top 2n* elements on the stack are used as inputs to the
instruction and popped off the stack, where 2n* is the number of arguments
taken by the function.  The result of the function is stored wherever
the destination field says.  In our case, the function being executed is
3get*, a Lisp function of two arguments.  The top two values will be
popped off the stack and used as the arguments to 3get* (the value
pushed first is the first argument, the value pushed second is the
second argument, and so on).  The result of the call to 3get* will be
sent to the destination 3D-PDL*; that is, it will be pushed onto the stack.
(In case you were wondering about how we handle optional arguments and
multiple-value returns, the answer is very simple: functions that use
either of those features cannot be miscellaneous instructions!)  (If you
are curious as to what functions are hand-microcoded and thus available
as miscellaneous instructions, you can look at the 3defmic* forms in the
file 3"AI: LISPM; DEFMIC >"*.)

The fifth and last instruction is similar to the fourth:

.lisp
26 (MISC) ASSQ D-RETURN
.end_lisp

What is new here is the new value of the destination field.  This one is
called 3D-RETURN*, and it can be used anywhere destination
fields in general can be used (like in 3MOVE* instructions).  Sending
something to "Destination-Return" means that this value should be the
returned value of the function, and that we should return from this
function.  This is a bit unusual in instruction sets; rather than having
a "return" instruction, we have a destination which, when stored into,
returns from the function.  What this instruction does, then, is to
invoke the Lisp function 3assq* on the top two elements of the stack,
and return the result of 3assq* as the result of this function.

Now, let's look at the program as a whole and see what it did:

.lisp
22 MOVE D-PDL FEF|6           ;'KEY
23 MOVE D-PDL ARG|0           ;X
24 MOVE D-PDL FEF|7           ;'PROPNAME
25 (MISC) GET D-PDL
26 (MISC) ASSQ D-RETURN
.end_lisp

First it pushes the symbol 3key*.  Then it pushes the value of 3x*.
Then it pushes the symbol 3propname*.  Then it invokes 3get*, which
pops the value of 3x* and the symbol 3propname* off the stack and
uses them as arguments, thus doing the equivalent of evaluating the form
3(get x 'propname)*.  The result is left on the stack; the stack now
contains the result of the 3get* on top, and the symbol 3key*
underneath that.  Next, it invokes 3assq* on these two values, thus
doing the equivalent of evaluating 3(assq 'key (get x 'propname))*.
Finally, it returns the value produced by 3assq*.  Now, the original
Lisp program we compiled was:

.lisp
(defun foo (x)
  (assq 'key (get x 'propname)))
.end_lisp

We can see that the code produced by the compiler is correct: it will do
the same thing as the function we defined will do.

In summary, we have seen two kinds of instructions so far: the 3MOVE*
instruction, which takes a destination and an address, and two of the
large set of miscellaneous instructions, which take only a destination,
and implicitly get their inputs from the stack.  We have seen two
destinations (3D-PDL* and 3D-RETURN*), and two forms of address (3FEF*
addressing and 3ARG* addressing).

@section A More Advanced Example

Here is a more complex Lisp function, demonstrating local variables,
function calling, conditional branching, and some other new
instructions.

.lisp
(defun bar (y)
  (let ((z (car y)))
    (cond ((atom z)
	   (setq z (cdr y))
	   (foo y))
	  (t
	   nil))))
.end_lisp

The disassembled code looks like this:

.lisp
20 CAR D-PDL ARG|0            ;Y
21 POP LOCAL|0                ;Z
22 MOVE D-IGNORE LOCAL|0      ;Z
23 BR-NOT-ATOM 30
24 CDR D-PDL ARG|0            ;Y
25 POP LOCAL|0                ;Z
26 CALL D-RETURN FEF|6        ;#'FOO
27 MOVE D-LAST ARG|0          ;Y
30 MOVE D-RETURN 'NIL
.end_lisp

The first instruction here is a 3CAR* instruction.  It has the same
format as 3MOVE*: there is a destination and an address.  The 3CAR*
instruction reads the datum addressed by the address, takes the 3car* of
it, and stores the result into the destination.   In our example, the
first instruction addresses the zeroth argument, and so it computes
3(car y)*; then it pushes the result onto the stack.

The next instruction is something new: the 3POP* instruction.  It has an
address field, but it uses it as a destination rather than as a source.
The 3POP* instruction pops the top value off the stack, and stores that
value into the address specified by the address field.  In our example,
the value on the top of the stack is popped off and stored into address
3LOCAL|0*.  This is a new form of address; it means the zeroth local
variable.  The ordering of the local variables is chosen by the
compiler, and so it is not fully predictable, although it tends to be
by order of appearance in the code; fortunately you never have to look
at these numbers, because the "comment" field explains what is going on.
In this case, the variable being addressed is 3z*.  So this instruction
pops the top value on the stack into the variable 3z*.  The first two
instructions work together to take the 3car* of 3y* and store it into
3z*, which is indeed the first thing the function 3bar* ought to do.
(If you have two local variables with the same name, then the "comment"
field won't tell you which of the two you're talking about; you'll have
to figure that out yourself.  You can tell two local variables with
the same name apart by looking at the number in the address.)

The next instruction is a familiar 3MOVE* instruction, but it uses a
new destination: 3D-IGNORE*.  This means that the datum being
addressed isn't moved anywhere.  If so, then why bother doing this
instruction?  The reason is that there is conceptually a set of
2indicator* bits, as in the PDP-11.  Every instruction that moves or
produces a datum sets the "indicator" bits from that datum so that
following instructions can test them.  So the reason that the 3MOVE*
instruction is being done is so that someone can test the "indicators"
set up by the value that was moved, namely the value of 3z*.

All instructions except the branch instructions set the "indicator" bits
from the result produced and/or stored by that instruction.  (In fact,
the 3POP* in instruction 21 set the "indicators" properly, and so the
3MOVE* at instruction 22 is superfluous.  However, the compiler is not
clever enough to notice that.)
@c We needn't explain that the "indicator" bits in CADR actually hold the
@c entire datum, not just a summary of its atom/cons and nil/non-nil status.

The next instruction is a conditional branch; it changes the flow of
control, based on the values in the "indicator" bits.  The instruction
is 3BR-NOT-ATOM 30*, which means "Branch, if the quantity was not an
atom, to location 30; otherwise proceed with execution".  If 3z* was an
atom, the Lisp Machine branches to location 30, and execution proceeds
there.  (As you can see by skipping ahead, location 30 just contains a
3MOVE* instruction, which will cause the function to return 3nil*.)

If 3z* is not an atom, the program keeps going, and the 3CDR*
instruction is next.  This is just like the 3CAR* instruction except
that it takes the 3cdr*; this instruction pushes the value of 3(cdr y)*
onto the stack.  The next one pops that value off into the variable 3z*.

There are just two more instructions left.  These two instructions will
be our first example of how function calling is compiled.  It is the
only really tricky thing in the instruction set.  Here is how it works
in our example:

.lisp
26 CALL D-RETURN FEF|6        ;#'FOO
27 MOVE D-LAST ARG|0          ;Y
.end_lisp

The form being compiled here is 3(foo y)*.  This means we are applying
the function which is in the function cell of the symbol 3foo*, and
passing it one argument, the value of 3y*.  The way function calling
works is in the following three steps.  First of all, there is a 3CALL*
instruction that specifies the function object being applied to
arguments.  This creates a new stack frame on the stack, and stores the
function object there.  Secondly, all the arguments being passed except
the last one are pushed onto the stack.  Thirdly and lastly, the last
argument is sent to a special destination, called 3D-LAST*,
meaning "this is the last argument".  Storing to this destination is
what actually calls the function, 2not* the 3CALL* instruction itself.

There are two things you might wonder about this.  First of all, when
the function returns, what happens to the returned value?  Well, this is
what we use the destination field of the 3CALL* instruction for.  The
destination of the 3CALL* is not stored into at the time the 3CALL*
instruction is executed; instead, it is saved on the stack (into the
stack frame created by the 3CALL* instruction, along with the function
object).  Then, when the function actually returns, its result is stored
into that destination.

The other question is what happens when there isn't any last argument;
that is, when there is a call with no arguments at all?  This is handled
by a special instruction called 3CALL0*.  The address of 3CALL0*
addresses the function object to be called; the call takes place
immediately, and the result is stored into the destination specified by
the destination field of the 3CALL0* instruction.

So, let's look at the two-instruction sequence above.  The first
instruction is a 3CALL*; the function object it specifies is at 3FEF|6*,
which the comment tells us is the contents of the function cell of 3foo*
(the FEF contains an invisible pointer to that function cell).  The
destination field of the 3CALL* is 3D-RETURN*, but we aren't going to
store into it yet; we will save it away in the stack frame and use it
later.  So the function doesn't return at this point, even though it
says 3D-RETURN* in the instruction; this is the tricky part.

Next we have to push all the arguments except the last one.  Well,
there's only one argument, so nothing needs to be done here.  Finally,
we move the last argument (that is, the only argument: the value of 3y*)
to 3D-LAST*, using the 3MOVE* instruction.  Moving to 3D-LAST* is what
actually invokes the function, so at this point the function 3foo* is
invoked.  When it returns, its result is sent to the destination stored
in the stack frame: 3D-RETURN*.  Therefore, the value returned by the
call to 3foo* will be returned as the value of the function 3bar*.  Sure
enough, this is what the original Lisp code says to do.

When the compiler pushes arguments to a function call, it sometimes does
it by sending the values to a destination called 3D-NEXT* (meaning the
"next" argument).  This is exactly the same as 3D-PDL*; the only reasons
for the difference are very historical.  They mean the same thing.

Here is another example to illustrate function calling.  This Lisp
function calls one function on the results of another function.

.lisp
(defun a (x y)
  (b (c x y) y))
.end_lisp

The disassembled code looks like this:

.lisp
22 CALL D-RETURN FEF|6        ;#'B
23 CALL D-PDL FEF|7           ;#'C
24 MOVE D-PDL ARG|0           ;X
25 MOVE D-LAST ARG|1          ;Y
26 MOVE D-LAST ARG|1          ;Y
.end_lisp

The first instruction starts off the call to the function 3b*.  The
destination field is saved for later: when this function returns, we
will return its result as 3a*'s result.  Next, the call to 3c* is
started.  Its destination field, too, is saved for later; when 3c*
returns, its result should be pushed onto the stack, so that it will be
the next argument to 3b*.  Next, the first and second arguments to
3c* are passed; the second one is sent to 3D-LAST* and so the
function 3c* is called.  Its result, as we said, will be pushed onto
the stack, and thus become the first argument to 3b*.  Finally, the
second argument to 3b* is passed, by storing in 3D-LAST*; 3b* gets
called, and its result is sent to 3D-RETURN* and is returned from
3a*.

@section The Rest of the Instructions

Now that we've gotten some of the feel for what is going on, I will
start enumerating the instructions in the instruction set.  The
instructions fall into four classes.  Class I instructions have both a
destination and an address.  Class II instructions have an address, but
no destination.  Class III instructions are the branch instructions,
which contain a branch address rather than a general base-and-offset
address.  Class IV instructions have a destination, but no address;
these are the miscellaneous instructions.

We have already seen just about all the Class I instructions.  There are
nine of them in all: 3MOVE*, 3CALL*, 3CALL0*, 3CAR*, 3CDR*, 3CAAR*,
3CADR*, 3CDAR*, and 3CDDR*.  3MOVE* just moves a datum from an address
to a destination; the 3CxR* and 3CxxR* instructions are the same but
perform the function on the value before sending it to the destination;
3CALL* starts off a call to a function with some arguments; 3CALL0*
performs a call to a function with no arguments.

We've seen most of the possible forms of address.  So far we have seen
the 3FEF*, 3ARG*, and 3LOCAL* base registers.  There are two other
kinds of addresses.  One uses a "constant" base register, which
addresses a set of standard constants: 3NIL*, 3T*, 30*, 31*, and
32*.  The disassembler doesn't even bother to print out
3CONSTANT|2n**, since the number 2n* would not be even slightly
interesting; it just prints out 3'NIL* or 3'1* or whatever.  The
other kind of address is a special one printed as 3PDL-POP*, which
means that to read the value at this address, an object should be popped
off the top of the stack.

There is a higher number of Class II instructions.  The only one we've
seen so far is 3POP*, which pops a value off the stack and stores it
into the specified address.  There is another instruction called 3MOVEM*
(from the PDP-10 opcode name, meaning MOVE to Memory), which stores the
top element of the stack into the specified address, but doesn't pop it
off the stack.

Then there are seven Class II instructions to implement heavily-used
two-argument functions: 3+*, 3-*, 3**, 3/*, 3LOGAND*, 3LOGXOR*, and
3LOGIOR*.  These instructions take their first argument from the top of
the stack (popping them off) and their second argument from the
specified address, and they push their result on the stack.  Thus the
stack level does not change due to these instructions.

Here is a small function that shows some of these new things:

.lisp
(defun foo (x y)
  (setq x (logxor y (- x 2))))
.end_lisp

The disassembled code looks like this:

.lisp
16 MOVE D-PDL ARG|1           ;Y
17 MOVE D-PDL ARG|0           ;X
20 - '2
21 LOGXOR PDL-POP
22 MOVEM ARG|0                ;X
23 MOVE D-RETURN PDL-POP
.end_lisp

Instructions 20 and 21 use two of the new Class II instructions: the 3-*
and 3LOGXOR* instructions.  Instructions 21 and 23 use the 3PDL-POP*
address type, and instruction 20 uses the "constant" base register to
get to a fixnum 32*.  Finally, instruction 22 uses the 3MOVEM*
instruction; the compiler wants to use the top value of the stack to
store it into the value of 3x*, but it doesn't want to pop it off the
stack because it has another use for it: to return it from the function.

Another four Class II instructions implement some commonly used
predicates: 3=*, 3>*, 3<*, and 3EQ*.  The two arguments come from the
top of the stack and the specified address; the stack is popped, the
predicate is applied to the two objects, and the result is left in the
"indicators" so that a branch instruction can test it and branch based
on the result of the comparison.  These instructions remove the top
item on the stack and don't put anything back, unlike the previous set
which put their results back on the stack.

Next, there are four Class II instructions to read, modify, and write a
quantity in ways that are common in Lisp code.  These instructions are
called 3SETE-CDR*, 3SETE-CDDR*, 3SETE-1+*, and 3SETE-1-*.  The 3SETE-*
means to set the addressed value to the result of applying the specified
one-argument function to the present value.  For example, 3SETE-CDR*
means to read the value addressed, apply 3cdr* to it, and store the
result back in the specified address.  This is used when compiling
3(setq x (cdr x))*, which commonly occurs in loops; the other functions
are used frequently in loops, too.

There are two instructions used to bind special variables.  The first is
3BIND-NIL*, which binds the cell addressed by the address field to
3nil*; the second is 3BIND-POP*, which binds the cell to an object
popped off the stack rather than 3nil*.  The latter instruction pops a
value off the stack; the former does not use the stack at all.

There are two instructions to store common values into addressed cells.
3SET-NIL* stores 3nil* into the cell specified by the address field;
3SET-ZERO* stores 30*.  Neither instruction uses the stack at all.

Finally, the 3PUSH-E* instruction creates a locative pointer to the cell
addressed by the specified address, and pushes it onto the stack.  This
is used in compiling 3(value-cell-location 'z)* where 3z* is an
argument or a local variable, rather than a symbol (special variable).

Those are all of the Class II instructions.  Here is a contrived
example that uses some of the ones we haven't seen, just to show
you what they look like:

.lisp
(declare (special *foo* *bar*))

(defun weird (x y)
  (cond ((= x y)
	 (let ((*foo* nil) (*bar* 5))
	   (setq x (cdr x)))
	 nil)
	(t
	 (setq x nil)
	 (caar (value-cell-location 'y)))))
.end_lisp

The disassembled code looks like this:

.lisp
24 MOVE D-PDL ARG|0           ;X
25 = ARG|1                    ;Y
26 BR-NIL 35
27 BIND-NIL FEF|6             ;*FOO*
30 MOVE D-PDL FEF|8           ;'5
31 BIND-POP FEF|7             ;*BAR*
32 SETE-CDR ARG|0             ;X
33 (MISC) UNBIND 2 bindings 
34 MOVE D-RETURN 'NIL
35 SET-NIL ARG|0              ;X
36 PUSH-E ARG|1               ;Y
37 CAAR D-RETURN PDL-POP
.end_lisp

Instruction 25 is an 3=* instruction; it numerically compares the top of the
stack, 3x*, with the addressed quantity, 3y*.  The 3x* is
popped off the stack, and the indicators are set to the result of the
equality test.  Instruction 26 checks the indicators, branching to 35 if
the result of the call to 3=* was NIL; that is, the machine will
branch to 35 if the two values were not equal.  Instruction 27 binds
3*foo** to 3nil*; instructions 30 and 31 bind 3*bar** to 35*.
Instruction 32 demonstrates the use of 3SETE-CDR* to compile 3(setq x
(cdr x))*, and instruction 35 demonstrates the use of 3SET-NIL* to
compile 3(setq x nil)*.  Instruction 36 demonstrates the use of
3PUSH-E* to compile 3(value-cell-location 'y)*.

The next class of instructions, Class III, are the branching
instructions.  These have neither addresses nor destinations of the
usual sort; instead, they have branch-addresses: they say where to
branch, if the branch is going to happen.  There are several
instructions, differing in the conditions under which they will branch,
and whether they pop the stack.  Branch-addresses are stored internally
as self-relative addresses, to make Lisp Machine code relocatable, but
the disassembler does the addition for you and prints out FEF-relative
addresses so that you can easily see where the branch is going to.

The branch instructions we have seen so far decide whether to branch on
the basis of the "nil indicator"; that is, whether the last value dealt
with was 3nil* or non-3nil*.  3BR-NIL* branches if it was 3nil*, and
3BR-NOT-NIL* branches if it was not 3nil*.  There are two more
instructions that test the result of the 3atom* predicate on the last
value dealt with.  3BR-ATOM* branches if the value was an atom (that is,
if it was anything besides a cons). and 3BR-NOT-ATOM* branches if the
value was not an atom (that is, if it was a cons).  The 3BR* instruction
is an unconditional branch (it always branches).

None of the above branching instructions deal with the stack.  There are
two more instructions called 3BR-NIL-POP* and 3BR-NOT-NIL-POP*, which
are the same as 3BR-NIL* and 3BR-NOT-NIL* except that if the branch is
not done, the top value on the stack is popped off the stack.  These are
used for compiling 3and* and 3or* special forms.

Finally, there are the Class IV instructions, most of which are
miscellaneous hand-microcoded Lisp functions. The file 3"AI: LISPM;
DEFMIC >"* has a list of all the miscellaneous instructions.  Most
correspond to Lisp functions, including the subprimitives, although some
of these functions are very low level internals that may not be
documented anywhere (don't be disappointed if you don't understand all
of them).  Please do not look at this file in hopes of finding obscure
functions that you think you can use to speed up your programs; in fact,
the compiler automatically uses these things when it can, and directly
calling weird internal functions will only serve to make your code hard
to read, without making it any faster.  In fact, we don't guarantee that
calling undocumented functions will continue to work in the future.

The 3DEFMIC* file can be useful for determining if a given function is in
microcode, although the only definitive way to tell is to compile some
code that uses it and look at the results, since sometimes the compiler
converts a documented function with one name into an undocumented one
with another name.


@section Function Entry

When a function is first entered in the Lisp Machine, interesting
things can happen because of the features that are invoked by use of the
various "3&*" keywords.  The microcode performs various services when
a function is entered, even before the first instruction of the function
is executed.  These services are called for by various fields of the header
portion of the FEF, including a list called the
2Argument Descriptor List*, or 2ADL*.  We won't go into the detailed
format of any of this, as it is complex and the details are not too
interesting.  The 3describe* function will disassemble it, but not
necessarily into a readily-comprehensible form.

The function-entry services include the initialization of unsupplied
optional arguments and of 3&AUX* variables.  The ADL
has a little instruction set of its own, and if the form that computes
the initial value is something simple, such as a constant, or just a
variable, then the ADL can handle things itself.  However, if things get
too complicated, instructions are needed, and the compiler generates
some instructions at the front of the function to initialize the
unsupplied variables.  In this case, the ADL specifies several different
starting addresses for the function, depending on which optional arguments
have been supplied and which have been omitted.  If all the optional
arguments are supplied, then the ADL starts the function off after all
the instructions that would have initialized the optional arguments;
since the arguments were supplied, their values should not be set, and
so all these instructions are skipped over.  Here's an example:

.lisp
(declare (special *y*))

(defun foo (&optional (x (car *y*)) (z (* x 3)))
  (cons x z))
.end_lisp

The disassembled code looks like this:

.lisp
32 CAR D-PDL FEF|6            ;*Y*
33 POP ARG|0                  ;X
34 MOVE D-PDL ARG|0           ;X
35 * FEF|11                   ;'3
36 POP ARG|1                  ;Z
37 MOVE D-PDL ARG|0           ;X
40 MOVE D-PDL ARG|1           ;Z
41 (MISC) CONS D-RETURN
.end_lisp

If no arguments are supplied, the function will be started at
instruction 32; if only one argument is supplied, it will be started at
instruction 34; if both arguments are supplied, it will be started at
instruction 37.  (If you do 3(describe 'foo)* and look at the
incomprehensible stuff that gets printed out, you can see the numbers 34
and 37 in lines that correspond to elements of the ADL.)

The thing to keep in mind here is that when there is initialization of
variables, you may see it as code at the beginning of the function, or
you may not, depending upon whether it is too complex for the ADL to handle.
This is true of 3&aux* variables as well as unsupplied 3&optional*
arguments.

When there is an 3&rest* argument, it is passed to the function as the
zeroth local variable, rather than as any of the arguments.  This is not
really so confusing as it might seem, since an 3&rest* argument is not
an argument passed by the caller, rather it is a list of some of the
arguments, created by the function-entry microcode services.  In any case
the "comment" tells you what is going on.  In fact, one hardly ever
looks much at the address fields in disassembled code, since the
"comment" tells you the right thing anyway.  Here is a silly example of the
use of an 3&rest* argument:

.lisp
(defun prod (&rest values)
  (apply #'* values))
.end_lisp

The disassembled code looks like this:

.lisp
20 MOVE D-PDL FEF|6           ;#'*
21 MOVE D-PDL LOCAL|0         ;VALUES
22 (MISC) APPLY D-RETURN
.end_lisp

As can be seen, 3values* is referred to as 3LOCAL|0*.

Another thing the microcode does at function entry is to bind the
values of any arguments or 3&aux* variables that are special.
Thus, you won't see 3BIND* instructions doing this, but it
is still being done.

@section Special Class IV Instructions

We said earlier that most of the Class IV instructions are miscellaneous
hand-microcoded Lisp functions.  However, a few of them are not Lisp
functions at all.  There are two instructions that are printed as
3UNBIND 3 bindings* or 3POP 7 values* (except that the number can be
anything up to 16 (these numbers are printed in decimal)).  These
instructions just do what they say, unbinding the last 2n* values that
were bound, or popping the top 2n* values off the stack.

There are also special instructions to implement the Lisp 3list*
function, which is special because it is a primitive which takes a
variable number of arguments.  Let's take a look at how the compiler
handles 3list*.

.lisp
(defun test-list (x y)
  (list 2 x y x))
.end_lisp

The disassembled code looks like this:

.lisp
16 (MISC) LIST 4 long D-RETURN
17 MOVE D-NEXT-LIST '2
20 MOVE D-NEXT-LIST ARG|0     ;X
21 MOVE D-NEXT-LIST ARG|1     ;Y
22 MOVE D-NEXT-LIST ARG|0     ;X
.end_lisp

The instruction 3LIST 4 long* prepares for the creation of a list of
four elements; it allocates the storage, but doesn't put anything into
it.  The destination is not used immediately, but is saved for later,
just as it is with 3CALL*.  Then the objects to be passed as arguments
are successively generated and sent to a special destination,
3D-NEXT-LIST*.  This causes them to be put into the storage allocated
by the 3LIST* instruction.  Once the fourth such sending is done,
all the elements of the list are filled in, and the result (i.e. the
list itself) is sent to whatever destination was specified in the
3LIST* instruction.

By the way, that is the last of the destination codes; now you have seen
all of them.  In summary, they are 3D-IGNORE*, 3D-PDL* (and 3D-NEXT*,
which is the same thing), 3D-LAST*, 3D-RETURN*, and 3D-NEXT-LIST*.

The array referencing functions--3aref*, 3aset*, and 3aloc*--also take a
variable number of arguments, but they are handled differently.  For
one, two, and three dimensional arrays, these functions are turned into
internal functions with names 3ar-1*, 3as-1*, and 3ap-1* (with the number
of dimensions substituted for 31*).  Again, there is no point in using
these functions yourself; it would only make your code harder to
understand but not any faster at all.  When there are more than three
dimensions, the old Maclisp way is used: arrays are referenced by
applying them as functions, using their dimensions as arguments, and
they are stored into using 3xstore*, which is like the Maclisp 3store*
but with its arguments in the other order.  You can try compiling
and disassembling some simple functions yourself if you want to see
this in action.

When you call a function and expect to get more than one value back,
a slightly different kind of function calling is used.  Here is an example
that uses 3multiple-value* to get two values back from a function call:

.lisp
(defun foo (x)
  (let (y z)
    (multiple-value (y z)
      (bar 3))
    (+ x y z)))
.end_lisp

The disassembled code looks like this:

.lisp
22 MOVE D-PDL FEF|6           ;#'BAR
23 MOVE D-PDL '2
24 (MISC) %CALL-MULT-VALUE D-IGNORE
25 MOVE D-LAST FEF|7          ;'3
26 POP LOCAL|1                ;Z
27 POP LOCAL|0                ;Y
30 MOVE D-PDL ARG|0           ;X
31 + LOCAL|0                  ;Y
32 + LOCAL|1                  ;Z
33 MOVE D-RETURN PDL-POP
.end_lisp

A 3%CALL-MULT-VALUE* instruction is used instead of a 3CALL*
instruction.  The destination field of 3%CALL-MULT-VALUE* is unused and
will always be 3D-IGNORE*.  3%CALL-MULT-VALUE* takes two "arguments",
which it finds on the stack; it pops both of them.  The first one is the
function object to be applied; the second is the number of return values
that are expected.  The rest of the call proceeds as usual, but when the
call returns, the returned values are left on the stack.  The number of
objects left on the stack is always the same as the second "argument" to
3%CALL-MULT-VALUE*.  In our example, the two values returned are left
on the stack, and they are immediately popped off into 3z* and 3y*.
There is also a 3%CALL0-MULT-VALUE* instruction, for the same
reason 3CALL0* exists.

The 3multiple-value-bind* form works similarly; here is an
example:

.lisp
(defun foo (x)
  (multiple-value-bind (y *foo* z)
      (bar 3)
    (+ x y z)))
.end_lisp

The disassembled code looks like this:

.lisp
24 MOVE D-PDL FEF|8           ;#'BAR
25 MOVE D-PDL FEF|7           ;'3
26 (MISC) %CALL-MULT-VALUE D-IGNORE
27 MOVE D-LAST FEF|7          ;'3
30 POP LOCAL|1                ;Z
31 BIND-POP FEF|6             ;*FOO*
32 POP LOCAL|0                ;Y
33 MOVE D-PDL ARG|0           ;X
34 + LOCAL|0                  ;Y
35 + LOCAL|1                  ;Z
36 MOVE D-RETURN PDL-POP
.end_lisp

The 3%CALL-MULT-VALUE* instruction is still used, leaving the results
on the stack; these results are used to bind the variables.

Calls done with 3multiple-value-list* work with the 3%CALL-MULT-VALUE-LIST*
instruction.  It takes one "argument" on the stack: the function object
to apply.  When the function returns, the list of values is left on the
top of the stack.  Here is an example:

.lisp
(defun foo (x y)
  (multiple-value-list (foo 3 y x)))
.end_lisp

The disassembled code looks like this:

.lisp
22 MOVE D-PDL FEF|6           ;#'FOO
23 (MISC) %CALL-MULT-VALUE-LIST D-IGNORE
24 MOVE D-PDL FEF|7           ;'3
25 MOVE D-PDL ARG|1           ;Y
26 MOVE D-LAST ARG|0          ;X
27 MOVE D-RETURN PDL-POP
.end_lisp

Returning of more than one value from a function is handled
by special miscellaneous instructions.  3%RETURN-2* and 3%RETURN-3* are
used to return two or three values; these instructions take two
and three arguments, respectively, on the stack, and return from the
current function just as storing to 3D-RETURN* would.  If there are more
than three return values, they are all pushed, then the number
that there were is pushed, and then the 3%RETURN-N* instruction is
executed.  None of these instructions use their destination field.
Note: the 3return-list* function is just an ordinary miscellaneous
instruction; it takes the list of values to return as an argument on the
stack, and it returns those values from the current function.

The function 3lexpr-funcall* is compiled using a special instruction
called 3%SPREAD* to iterate over the elements of its last argument, which
should be a list.  3%SPREAD* takes one argument (on the stack), which is
a list of values to be passed as arguments (pushed on the stack).  If
the destination of 3%SPREAD* is 3D-PDL* (or 3D-NEXT*), then the values
are just pushed; if it is 3D-LAST*, then after the values are pushed,
the function is invoked.  3lexpr-funcall* will always compile using a
3%SPREAD* whose destination is 3D-LAST*.  Here is an example:

.lisp
(defun foo (a b &rest c)
  (lexpr-funcall #'format t a c)
  b)
.end_lisp

The disassembled code looks like this:

.lisp
20 CALL D-IGNORE FEF|6        ;#'FORMAT
21 MOVE D-PDL 'T
22 MOVE D-PDL ARG|0           ;A
23 MOVE D-PDL LOCAL|0         ;C
24 (MISC) %SPREAD D-LAST
25 MOVE D-RETURN ARG|1        ;B
.end_lisp

Note that in instruction 23, the address 3LOCAL|0* is used to
access the 3&rest* argument.

The 3*catch* special form is also handled specially by the compiler.
Here is a simple example of 3*catch*:

.lisp
(defun a ()
  (*catch 'foo (bar)))
.end_lisp

The disassembled code looks like this:

.lisp
22 MOVE D-PDL FEF|6           ;'26
23 (MISC) %CATCH-OPEN D-PDL
24 MOVE D-PDL FEF|7           ;'FOO
25 CALL0 D-LAST FEF|8         ;#'BAR
26 MOVE D-RETURN PDL-POP
.end_lisp

The 3%CATCH-OPEN* instruction is like the 3CALL* instruction; it
starts a call to the 3*catch* function.  It takes one "argument" on
the stack, which is the location in the program that should be branched
to if this 3*catch* is 3*throw*n to.  In addition to saving that
program location, the instruction saves the state of the stack and
of special-variable binding so that they can be restored in the event
of a 3*throw*.  So instructions 22 and 23
start a 3*catch* block, and the rest of the function passes its two
arguments.  The 3*catch* function itself simply returns its second
argument; but if a 3*throw* happens during the evaluation of the
3(bar)* form, then the stack will be unwound and execution will resume
at instruction 26.  The destination field of 3%CATCH-OPEN* is like
that of 3CALL*; it is saved on the stack, and controls what will
be done with the result of the call to the 3*catch*.  Note that
even though 3*catch* is really a Lisp special form, it is compiled
more or less as if it were a function of two arguments.

To allow compilation of 3(multiple-value (...) (*catch ...))*, there
is a special instruction called 3%CATCH-OPEN-MULT-VALUE*, which is a
cross between 3%CATCH-OPEN* and 3%CALL-MULT-VALUE*.
3multiple-value-list* with 3*catch* is not supported.


@section Estimating Run Time

You may sometimes want to estimate the speed at which a function will
execute by examination of the compiled code.  This section gives some
rough guidelines to the relative cost of various instructions; the
actual speed may vary from these estimates by as much as a factor of
two.  Some of these speeds vary with time; they speed up as work is
done to improve system efficiency and slow down sometimes when
sweeping changes are made (for instance, when garbage collection was
introduced it slowed down some operations even when garbage collection
is not turned on.)  However these changes are usually much less than
a factor of two.

It is also important to realize that in many programs the
execution time is determined by paging rather than by CPU run time.  The
cost of paging is unfortunately harder to estimate than run time,
because it depends on dynamic program behavior and locality of data
structure.

On a conventional computer such as the pdp-10, rough estimates of the
run time of compiled code are fairly easy to make.  It is a reasonable
approximation to assume that all machine instructions take about the
same amount of time to execute.  When the compiler generates a call to
a runtime support routine, the user can estimate the speed of that
routine since it is implemented in the same instructions as the user's
compiled program.  Actual speeds can vary widely because of data
dependencies; for example, when using the 3plus* function the operation
will be much slower if an argument is a bignum than if the arguments are
all fixnums.  However, in Maclisp most performance-critical functions use
declarations to remove such data dependencies, because generic, data-dependent
operations are so much slower than type-specific operations.

Things are different in the Lisp Machine.  The instruction set we have just seen
is a high-level instruction set.  Rather than specifying each individual
machine operation, the compiler calls for higher-level Lisp operations such
as 3cdr* or 3memq*.  This means that some instructions take many times
longer to execute than others.  Furthermore, in the Lisp machine we do not
use data-type declarations.  Instead the machine is designed so that all
instructions can be 2generic*; that is, they determine the types of their
operands at run time.  This means that there are data dependencies that can
have major effects on the speed of execution of an instruction.  For instance,
the 3+* instruction is quite fast if both operands turn out to be fixnums,
but much slower if they are bignums.

The Lisp machine also has a large amount of microcode, both to implement certain
Lisp functions and to assist with common operations such as function calling.
It is not as easy for a user to read microcode and estimate its speed as with
compiled code, although it is a much more readable microcode than on most
computers.

In this section we give some estimates of the speed of various operations.
There are also facilities for measuring the actual achieved speed of a
program.  These will not be documented here as they are currently being changed.

We will express all times in terms of the time to execute the simplest
instruction, 3MOVE D-PDL ARG|0*.  This time is about two microseconds
and will be called a "unit".

3MOVE* takes the same amount of time if the destination is
3D-IGNORE* or 3D-NEXT*, or if the address is a 3LOCAL* or
3PDL-POP* rather than an 3ARG*.  A 3MOVE* that references a
constant, via either the 3FEF* base register or the 3CONSTANT* base
register, takes about two units.  A 3MOVE* that references a special
variable by means of the 3FEF* base register and an invisible pointer
takes closer to three units.

Use of a complex destination (3D-LAST*, 3D-RETURN*, or 3D-NEXT-LIST*)
takes extra time because of the extra work it has to do; calling a function,
returning from a function, or the bookkeeping associated with forming a list.
These costs will be discussed a bit later.

The other Class I instructions take longer than 3MOVE*.  Each memory
reference required by car/cdr operations costs about one unit.  Note
that 3cdr* requires one memory cycle if the list is compactly
cdr-coded and two cycles if it is not.  The 3CALL* instruction takes
three units.  The 3CALL0* instruction takes more, of course,
since it actually calls the function.

The Class II (no destination) instructions vary.  The 3MOVEM* and 3POP*
operations take about one unit.  (Of course they take more if 3FEF* or
3CONSTANT* addressing is used.)  The arithmetic and logical operations and
the predicates take two units when applied to fixnums, except for multiplication and division
which take five.  The 3SETE-1+* and 3SETE-1-* instructions take
two units, the same time as a push followed by a pop; i.e. 3(setq x (1+ x))* takes
the same amount of time as 3(setq x y)*.  The 3SET-NIL* and 3SET-ZERO*
instructions take one unit.  The special-variable binding instructions take
several units.

A branch takes between one and two units.

The cost of calling a function with no arguments and no local variables
that doesn't do anything but return 3nil* is about 15 units (7 cdrs or
additions).  This is the cost of a 3CALL FEF|2n** instruction,
a 3MOVE* to 3D-LAST*, the simplest
form of function-entry services, and a 3MOVE* to 3D-RETURN*.  If the
function takes arguments the cost of calling the function includes the cost
of the instructions in the caller that compute the arguments.  If the function
has local variables initialized to 3nil* or optional arguments defaulted
to 3nil* there is a negligible additional cost.  The cost of having an 3&rest*
argument is less than one additional unit.  But if the function binds special
variables there is an additional cost of 8 units per variable (this includes both
binding the variables on entry and unbinding them on return).

If the function needs an ADL, typically because of complex
optional-argument initializations, the cost goes up substantially.  It's
hard to characterize just how much it goes up by, since this depends on
what you do.  Also calling for multiple values is more expensive than
simple calling.

We consider the cost of calling functions to be somewhat higher than it should
be, and would like to improve it.  But this might require incompatible system
architecture changes and probably will not happen, at least not soon.

Flonum and bignum arithmetic are naturally slower than fixnum arithmetic.
For instance, flonum addition takes 8 units more than fixnum addition, and
addition of 60-bit bignums takes 15 units more.  Note that these times include
some garbage-collection overhead for the intermediate results which have
to be created in memory.  Fixnums and small flonums do not take up any
memory and avoid this overhead.  Thus small-flonum addition takes only about
2 units more than fixnum addition.  This garbage-collection overhead is
of the "extra-pdl-area" sort rather than the full Baker garbage collector
sort; if you don't understand this don't worry about it for now.

Floating-point subtraction, multiplication, and division take just about
the same time as floating-point addition.  Floating-point execution times
can be as many as 3 units longer depending on the arguments.

The run time of a Class IV (or miscellaneous) instruction depends on the
instruction and its arguments.  The simplest instructions, predicates
such as 3atom* and 3numberp*, take 2 units.  This is basically the
overhead for doing a Class IV instruction.  The cost of a more complex
instruction can be estimated by looking at what it has to do.  You can
get a reasonable estimate by charging one unit per memory reference, car
operation, or cdr-coded cdr operation.  A non-cdr-coded cdr operation
takes two units.  For instance, 3(memq 'nil '(a b c))* takes 13 units, of
which 4 are pushing the arguments on the stack, 2 are Class IV
instruction overhead, 6 are accounted for by cars and cdrs, and 1 is
"left over".

The cost of array accessing depends on the type of array and the number
of dimensions.  3aref* of a 1-dimensional non-indirect 3art-q* array
takes 6 units and 3aset* takes 5 units, not counting pushing the
arguments onto the stack.  (These are the costs of the 3AR-1* and
3AS-1* instructions.)  A 2-dimensional array takes 6 units more.
3aref* of a numeric array takes the same amount of time as 3aref* of
an 3art-q* array.  3aset* takes 1 unit longer.  3aref* of an
3art-float* array takes 5 units longer than 3aref* of an 3art-q*
array.  3aset* takes 3 units longer.

The functions 3copy-array-contents* and 3copy-array-portion*
optimize their array accessing to remove overhead from the inner loop.
3copy-array-contents* of an 3art-q* array has a startup overhead of
8 units, not including pushing the arguments, then costs just over 2
units per array element.

The 3cons* function takes 7 units if garbage collection is turned off.
3(list a b c d)* takes 24 units, which includes 4 units for getting the
local variables 3a*, 3b*, 3c*, and 3d*.

@chapter "Querying the User"
.cindex querying the user
.cindex yes-or-no
.setq query-chapter chapter-number

The following functions provide a convenient and consistent interface for
asking questions of the user.  Questions are printed and the answers are
read on the stream 3query-io*, which normally is synonymous with
3terminal-io* but can be rebound to another stream for special applications.

We will first describe two simple functions for yes-or-no questions, then
the more general function on which all querying is built.

.defun y-or-n-p &optional message stream
This is used for asking the user a question whose answer is either "yes"
or "no".  It types out 2message* (if any), reads a one-character
answer, echoes it as "3Yes*" or "3No*", and returns 3t* if the
answer is "yes" or 3nil* if the answer is "no".  The characters which
mean "yes" are Y, T, space, and hand-up.  The characters which mean "no"
are N, rubout, and hand-down.  If any other character is typed, the
function will beep and demand a "Y or N" answer.

If the 2message* argument is supplied, it will be printed on a fresh line
(using the 3:fresh-line* stream operation).
Otherwise the caller is assumed to have printed the message already.
If you want a question mark and/or a space at the end of the message,
you must put it there yourself; 3y-or-n-p* will not add it.
2stream* defaults to the value of 3query-io*.

3y-or-n-p* should only be used for questions which the user knows
are coming.  If the user is not going to be anticipating the question
(e.g. if the question is "Do you really want to delete all of your files?"
out of the blue)
then 3y-or-n-p* should not be used, because the user might type ahead
a T, Y, N, space, or rubout, and therefore accidentally answer the question.
In such cases, use 3yes-or-no-p*.
.end_defun

.defun yes-or-no-p &optional message stream
This is used for asking the user a question whose answer is either
"Yes" or "No".  It types out 2message* (if any), beeps, and reads in a line
from the keyboard.  If the line is the string "Yes", it returns 3t*.
If the line is "No", it returns 3nil*.  (Case is ignored, as are
leading and trailing spaces and tabs.)  If the input line is anything else,
3yes-or-no-p* beeps and demands a "yes" or "no" answer.

If the 2message* argument is supplied, it will be printed on a fresh line
(using the 3:fresh-line* stream operation).
Otherwise the caller is assumed to have printed the message already.
If you want a question mark and/or a space at the end of the message,
you must put it there yourself; 3yes-or-no-p* will not add it.
2stream* defaults to the value of 3query-io*.

To allow the user to answer a yes-or-no question with a single
character, use 3y-or-n-p*.  3yes-or-no-p* should be
used for unanticipated or momentous questions; this is why it beeps
and why it requires several keystrokes to answer it.
.end_defun

.defun fquery options format-string &rest format-args
Asks a question, printed by 3(format query-io 2format-string* 2format-args*...)*,
and returns the answer.  3fquery* takes care of checking for valid answers,
reprinting the question when the user clears the screen, giving help, and so
forth.

2options* is a list of alternating keywords and values, used to select among a variety
of features.  Most callers will have a constant list which they pass as 2options*
(rather than consing up a list whose contents varies).
The keywords allowed are:
.table 3
.kitem :type
What type of answer is expected.  The currently-defined types are 3:tyi* (a single
character) and 3:readline* (a line terminated by a carriage return).  3:tyi* is
the default.

.kitem :choices
Defines the allowed answers.  The allowed forms of choices are complicated and
explained below.  The default is the same set of choices as the 3y-or-n-p*
function (see above).  Note that the 3:type* and 3:choices* options should
be consistent with each other.

.kitem :list-choices
If 3t*, the allowed choices are listed (in parentheses) after the question.
The default is 3t*; supplying 3nil* causes the choices not to be listed unless
the user tries to give an answer which is not one of the allowed choices.

.kitem :help-function
Specifies a function to be called if the user hits the 3HELP* key.
The default help-function simply lists the available choices.
Specifying 3nil* disables special treatment of 3HELP*.
Specifying a function of three arguments--the stream, the list of choices,
and the type-function--allows smarter help processing.  The type-function
is the internal form of the 3:type* option and can usually be ignored.

.kitem :condition
If non-3nil*, a condition to be signalled before asking the question.
The handler of this condition may supply an answer, in which case the user
is not asked.  The details are given below.  The default condition is 3:fquery*.

.kitem :fresh-line
If 3t*, 3query-io* is advanced to a fresh line before asking the question.
If 3nil*, the question is printed wherever the cursor was left by previous typeout.
The default is 3t*.

.kitem :beep
If 3t*, 3fquery* beeps to attract the user's attention to the question.
The default is 3nil*, which means not to beep unless the user tries to
give an answer which is not one of the allowed choices.

.kitem :clear-input
If 3t*, 3fquery* throws away type-ahead before reading the user's response
to the question.  Use this for unexpected questions.  The default is 3nil*,
which means not to throw away typeahead unless the user tries to
give an answer which is not one of the allowed choices.  In that case, typeahead
is discarded since the user probably wasn't expecting the question.

.kitem :select
If 3t* and 3query-io* is a visible window, that window is temporarily
selected while the question is being asked.  The default is 3nil*.

.kitem :make-complete
If 3t* and 3query-io* is a typeout-window, the window is "made complete"
after the question has been answered.  This tells the system that the contents
of the window are no longer useful.  Refer to the window system documentation
for further explanation.  The default is 3t*.
.end_table

The argument to the 3:choices* option is a list each of whose elements is
a 2choice*.  The cdr of a choice is a list of the user inputs which correspond
to that choice.  These should be characters for 3:type :tyi* or strings
for 3:type :readline*.  The car of a choice is either a symbol which 3fquery*
should return if the user answers with that choice, or a list whose first element
is such a symbol and whose second element is the string to be echoed when the
user selects the choice.  In the former case nothing is echoed.
In most cases 3:type :readline* would use the first
format, since the user's input has already been echoed, and 3:type :tyi* would
use the second format, since the input has not been echoed and furthermore is
a single character, which would not be mnemonic to see on the display.

Perhaps this can be clarified by example.  The 3yes-or-no-p* function uses
this list of choices:
.lisp
((t "Yes") (nil "No"))
.end_lisp
and the 3y-or-n-p* function uses this list:
.lisp
(((t "Yes.") #/y #/t #\sp #\hand-up)
 ((nil "No.") #/n #\rubout #\hand-down))
.end_lisp

If a condition is specified (or allowed to default to 3:fquery*), before asking
the question 3fquery* will signal the condition.  (See (condition) for information
about conditions.)  The handler will receive four arguments: the condition name,
the 2options* argument to 3fquery*, the 2format-string* argument to 3fquery*,
and the list of 2format-args* arguments to 3fquery*.  As usual with conditions,
if the handler returns 3nil* the operation proceeds as if there had been no handler.
If the handler returns two values, 3t* and 2ans*, 3fquery* will immediately
return 2ans*.  No conventions have yet been defined for standard condition names
for use with 3fquery*.

If you want to use the formatted output functions instead of 3format* to produce the
promting message, write
.lisp
(fquery 2options* (format:outfmt 2exp-or-string* 2exp-or-string* ...))
.end_lisp
3format:outfmt* puts the output into a list of a string, which makes 3format*
print it exactly as is.  There is no need to supply additional arguments to the
3fquery* unless it signals a condition.  In that case the arguments might be passed so
that the condition handler can see them.  The condition handler will receive a list
containing one string, the message, as its third argument instead of just a string.  If
this argument is passed along to 3format*, all the right things happen.
.end_defun

@chapter Initializations
.cindex initialization
.setq initialization section-page

There are a number of programs and facilities in the Lisp Machine which require
that "initialization routines" be run either when the facility is first loaded, or when
the system is booted, or both.  These initialization routines may set up data structures,
start processes running, open network connections, and so on.

An initialization that needs to be done once, when a file is loaded, can be done simply
by putting the Lisp forms to do it in that file; when the file is loaded the
forms will be evaluated.  However, some initializations need to be done each time
the system is booted, and some initializations depend on several files having been loaded
before they can work.

The system provides a consistent scheme for managing these initializations.  Rather
than having a magic function which runs when the system is started and knows everything
that needs to be initialized, each thing that needs initialization contains its own
initialization routine.  The system keeps track of all the initializations through
a set of functions and conventions, and executes all the initialization routines when
necessary.  The system also avoids re-executing initializations if a program file
is loaded again after it has already been loaded and initialized.

There is something called an 2initialization list*.  This is a symbol
whose value is an ordered list of 2initializations*.  Each
initialization has a name, a form to be evaluated, a flag saying whether
the form has yet been evaluated, and the source file of the
initialization, if any.  When the time comes, initializations are
evaluated in the order that they were added to the list.  The name is a
string and lies in the 3car* of an initialization; thus 3assoc* may
be used on initialization lists.  All initialization lists also have a
3si:initialization-list* property of 3t*.  This is mainly for
internal use.

.defun add-initialization name form &optional list-of-keywords initialization-list-name
Adds an initialization called 2name* with the form 2form* to the initialization list
specified either by 2initialization-list-name* or by keyword.  If the initialization
list already contains an initialization called 2name*, change its form to 2form*.

2initialization-list-name*, if specified, is a symbol that has as its
value the initialization list.  If it is unbound, it is initialized (!)
to 3nil*, and is given a 3si:initialization-list* property of 3t*.
If a keyword specifies an initialization list,
2initialization-list-name* is ignored and should not be specified.

The keywords allowed in 2list-of-keywords* are of two kinds.  These specify
what initialization list to use:
.table 3
.item :cold
'kindex :cold add-initialization
Use the standard cold-boot list (see below).
.item :warm
'kindex :warm add-initialization
Use the standard warm-boot list (see below).  This is the default.
.item :before-cold
'kindex :before-cold add-initialization
Use the standard before-disk-save list (see below).
.item :once
'kindex :once add-initialization
Use the once-only list (see below).
.item :system
'kindex :system add-initialization
Use the system list (see below).
.item :login
'kindex :login add-initialization
Use the login list (see below).
.item :logout
'kindex :logout add-initialization
Use the logout list (see below).
.end_table

These specify when to evaluate 2form*:
.table 3
.item :normal
'kindex :normal add-initialization
Only place the form on the list.  Do not evaluate it until the time comes to do
this kind of initialization.  This is the default unless 3:system* or 3:once*
is specified.
.item :now
'kindex :now add-initialization
Evaluate the form now as well as adding it to the list.
.item :first
'kindex :first add-initialization
Evaluate the form now if it is not flagged as having been evaluated before.
This is the default if 3:system* or 3:once* is specified.
.item :redo
'kindex :redo add-initialization
Do not evaluate the form now, but set the flag to 3nil* even if the initialization
is already in the list and flagged 3t*.
.end_table

Actually, the keywords are compared with 3string-equal* and may be in any
package.  If both kinds of keywords are used, the list keyword should come
2before* the when keyword in 2list-of-keywords*; otherwise the list keyword
may override the when keyword.

The 3add-initialization* function keeps each list ordered so that
initializations added first are at the front of the list.  Therefore, by
controlling the order of execution of the additions, explicit dependencies on
order of initialization can be controlled.  Typically, the order of additions is
controlled by the loading order of files.  The system list (see below) is the
most critically ordered of the pre-defined lists.
.end_defun

.defun delete-initialization name &optional keywords initialization-list-name
Removes the specified initialization from the specified initialization list.
Keywords may be any of the list options allowed by 3add-initialization*.
.end_defun

.defun initializations initialization-list-name &optional redo-flag flag-value
Perform the initializations in the specified list.  2redo-flag* controls
whether initializations that have already been performed are re-performed;
3nil* means no, non-3nil* is yes, and the default is 3nil*.  2flag-value* is the
value to be bashed into the flag slot of an entry.  If it is unspecified, it
defaults to 2t*, meaning that the system should remember that the initialization
has been done.  The reason that there is no convenient way for you to
specify one of the specially-known-about lists is that you shouldn't
be calling 3initializations* on them.
.end_defun

.defun reset-initializations initialization-list-name
Bashes the flag of all entries in the specified list to 3nil*, thereby causing
them to get rerun the next time the function 3initializations* is called on
the initialization list.
.end_defun

@section System Initialization Lists

     The special initialization lists that are known about by the above functions allow
you to have your subsystems initialized at various critical times without
modifying any system code to know about your particular subsystems.  This also allows
only a subset of all possible subsystems to be loaded without necessitating
either modifying system code (such as 3lisp-reinitialize*) or such kludgy methods
as using 3fboundp* to check whether or not something is loaded.

     The 3:once* initialization list is used for initializations that
need to be done only once when the subsystem is loaded and must never be
done again.  For example, there are some databases that need to be
initialized the first time the subsystem is loaded, but should not be
reinitialized every time a new version of the software is loaded into a
currently running system.  This list is for that purpose.  The
3initializations* function is never run over it; its "when" keyword
defaults to 3:first* and so the form is normally only evaluated at
load-time, and only if it has not been evaluated before.  The 3:once*
initialization list serves a similar purpose to the 3defvar* special
form (see (defvar-fun)), which sets a variable only if it is unbound.

     The 3:system* initialization list is for things that need to be done before
other initializations stand any chance of working.  Initializing the process and
window systems, the file system, and the ChaosNet NCP falls in this category.
The initializations on this list are run every time the machine is cold or warm
booted, as well as when the subsystem is loaded unless explicitly overridden by
a 3:normal* option in the keywords list.  In general, the system list should not be
touched by user subsystems, though there may be cases when it is necessary to do
so.

     The 3:cold* initialization list is used for things which must be run once at cold-boot
time.  The initializations on this list are run after the ones on 3:system* but before the
ones on the 3:warm* list.  They are run only once, but are reset by 3disk-save*
thus giving the appearance of being run only at cold-boot time.

     The 3:warm* initialization list is used for things which must be
run every time the machine is booted, including warm boots.  The
function that prints the greeting, for example, is on this list.  Unlike
the 3:cold* list, the 3:warm* list initializations are run
regardless of their flags.

	The 3:before-cold* initialization list is a variant of the 3:cold* list.  These
initializations are run before the world is saved out by 3disk-save*.  Thus they
happen essentially at cold boot time, but only once when the world is saved, not each
time it is started up.

.setq login-init-list page

	The 3:login* and 3:logout* lists are run by the 3login* and
3logout* functions (see (login-fun)) respectively.  Note that 3disk-save*
calls 3logout*.  Also note that often people don't call 3logout*; they
often just cold-boot the machine.

	User programs are free to create their own initialization lists to be run
at their own times.  Some system programs, such as the editor, have their own
initialization list for their own purposes.

@chapter Dates and Times
.cindex dates and times
.cindex times and dates
.setq time section-page
.setq time-chapter chapter-number

The 3time:* package contains a set of functions for manipulating dates and
times: finding the current time, reading and printing dates and times,
converting between formats, and other miscellany regarding peculiarities
of the calendar system.  It also includes functions for accessing the
Lisp Machine's microsecond timer.

Times are represented in two different formats by the functions in the 3time*
package.  One way is to represent a time by many numbers, indicating a year, a
month, a date, an hour, a minute, and a second (plus, sometimes, a day of the
week and timezone).   The year is relative to 1900 (that is, if it is 1981, the
2year* value would be 381*); however, the functions that take a year as an
argument will accept either form.  The month is 1 for January, 2 for February,
etc.  The date is 1 for the first day of a month.  The hour is a number from 0
to 23.  The minute and second are numbers from 0 to 59.  Days of the week are
fixnums, where 0 means Monday, 1 means Tuesday, and so on.  A timezone
is specified as the number of hours west of GMT; thus in Massachusetts the timezone
is 5.  Any adjustment for daylight savings time is separate from this.

'cindex universal time

This "decoded" format is convenient for printing out times into a readable
notation, but it is inconvenient for programs to make sense of these numbers,
and pass them around as arguments (since there are so many of them).  So there
is a second representation, called Universal Time, which measures a time as the
number of seconds since January 1, 1900, at midnight GMT.  This "encoded" format
is easy to deal with inside programs, although it doesn't make much sense to
look at (it looks like a huge integer).  So both formats are provided; there are
functions to convert between the two formats; and many functions exist in two
forms, one for each format.

The Lisp Machine hardware includes a timer that counts once every
microsecond.  It is controlled by a crystal and so is fairly accurate.
The absolute value of this timer doesn't mean anything useful, since it
is initialized randomly; what you do with the timer is to read it at the
beginning and end of an interval, and subtract the two values to get the
length of the interval in microseconds.  These relative times allow you to time
intervals of up to an hour (32 bits) with microsecond accuracy.

The Lisp Machine keeps track of the time of day by maintaining a
"timebase", using the microsecond clock to count off the seconds.
When the machine first comes up, the timebase is initialized by querying
hosts on the Chaos net to find out the current time.

There is a similar timer which counts in 60ths of a second rather than
microseconds; it is useful for measuring intervals of a few seconds or
minutes with less accuracy.  Periodic housekeeping functions of the system
are scheduled based on this timer.

@section Getting and Setting the Time

.defun time:get-time
Get the current time, in decoded form.  Return seconds, minutes, hours, date,
month, year, day-of-the-week, and daylight-savings-time-p, with the same
meanings as 3time:decode-universal-time* (see (time:decode-universal-time-fun)).
.end_defun

.defun time:get-universal-time
Returns the current time, in Universal Time form.
.end_defun

.defun time:set-local-time &optional new-time
Set the local time to 2new-time*.  If 2new-time* is supplied, it must be
either a universal time or a suitable argument to 3time:parse*
(see (time:parse-fun)).  If it is not supplied, or if there is an error
parsing the argument, you will be prompted for the new time.  Note that
you will not normally need to call this function; it is mainly useful when
the timebase gets screwed up for one reason or another.
.end_defun

@subsection Elapsed Time in 60ths of a Second
.cindex 60ths of a second

The following functions deal with a different kind of time.  These are not
calendrical date/times, but simply elapsed time in 60ths of a second.  These
times are used for many internal purposes where the idea is to measure a small
interval accurately, not to depend on the time of day or day of month.

.defun time
Returns a number which increases by 1 every 1/60 of a second,
and wraps around roughly once a day.  Use the 3time-lessp* and
3time-difference* functions to avoid getting in trouble due to the
wrap-around.  3time* is completely incompatible with the Maclisp
function of the same name.
.end_defun

.defun time-lessp time1 time2
3t* if 2time1* is earlier than 2time2*, compensating for
wrap-around, otherwise 3nil*.
.end_defun

.defun time-difference time1 time2
Assuming 2time1* is later than 2time2*, returns the number of 60ths
of a second difference between them, compensating for wrap-around.
.end_defun

@subsection Elapsed Time in Microseconds
.cindex microseconds

.defun time:microsecond-time
Return the value of the microsecond timer, as a bignum.  The values
returned by this function "wrap around" about once per hour.
.end_defun

.defun time:fixnum-microsecond-time
Return the value of the low 23 bits of the microsecond timer, as a
fixnum.  This is like 3time:microsecond-time*, with the advantage that
it returns a value in the same format as the 3time* function, except
in microseconds rather than 60ths of a second.  This means that you can
compare fixnum-microsecond-times with 3time-lessp* and
3time-difference*.  3time:fixnum-microsecond-time* is also a bit
faster, but has the disadvantage that since you only see the low bits of
the clock, the value can "wrap around" more quickly (about every eight seconds).
Note that the Lisp Machine garbage collector is so designed that the
bignums produced by 3time:microsecond-time* are garbage-collected
quickly and efficiently, so the overhead for creating the bignums is
really not high.
.end_defun

@section Printing Dates and Times

The functions in this section create printed representations of times and
dates in various formats, and send the characters to a stream.  To any
of these functions, you may pass 3nil* as the 2stream* parameter,
and the function will return a string containing the printed representation
of the time, instead of printing the characters to any stream.

.defun time:print-current-time &optional (stream 3standard-output*)
Print the current time, formatted as in 311/25/80 14:50:02*, to
the specified stream.
.end_defun

.defun time:print-time seconds minutes hours date month year &optional (stream 3standard-output*)
Print the specified time, formatted as in 311/25/80 14:50:02*, to
the specified stream.
.end_defun

.defun time:print-universal-time universal-time &optional (stream 3standard-output*) (timezone 3time:*timezone**)
Print the specified time, formatted as in 311/25/80 14:50:02*, to the specified stream.
.end_defun

.defun time:print-current-date &optional (stream 3standard-output*)
Print the current time, formatted as in 3Tuesday the twenty-fifth of
November, 1980; 3:50:41 pm*, to the specified stream. 
.end_defun

.defun time:print-date seconds minutes hours date month year day-of-the-week &optional (stream 3standard-output*)
Print the specified time, formatted as in 3Tuesday the twenty-fifth of
November, 1980; 3:50:41 pm*, to the specified stream.
.end_defun

.defun time:print-universal-date universal-time &optional (stream 3standard-output*) (timezone 3time:*timezone**)
Print the specified time, formatted as in 3Tuesday the twenty-fifth of
November, 1980; 3:50:41 pm*, to the specified stream.
.end_defun

.defun time:print-brief-universal-time universal-time &optional (stream 3standard-output*) reference-time
This is like 3time:print-universal-time* except that it omits seconds and
only prints those parts of 2universal-time* that differ from
2reference-time*, a universal time that defaults to the current time.
Thus the output will be in one of the following three forms:
.lisp
02:59		;1the same day*
3/4 14:01	;1a different day in the same year*
8/17/74 15:30	;1a different year*
.end_lisp
.end_defun


@section Reading Dates and Times

These functions will accept most reasonable printed representations of date and time
and convert them to the standard internal forms.  The following are
representative formats that are accepted by the parser.

.lisp
"March 15, 1960" "15 March 1960" "3//15//60"
"15//3//60" "3//15//1960" "3-15-60" "15-3-1960"
"3-15" "15-March-60" "15-Mar-60" "March-15-60"
"1130." "11:30" "11:30:17" "11:30 pm" "11:30 AM" "1130" "113000"
"11.30" "11.30.00" "11.3" "11 pm" "12 noon"
"midnight" "m" "Friday, March 15, 1980" "6:00 gmt" "3:00 pdt"
"15 March 60" "15 march 60 seconds"
"Fifteen March 60" "The Fifteenth of March, 1960;"
"One minute after March 3, 1960"
"Two days after March 3, 1960"
"Three minutes after 23:59:59 Dec 31, 1959"
"Now" "Today" "Yesterday" "two days after tomorrow"
"one day before yesterday" "the day after tomorrow"
"five days ago"
.end_lisp

.defun time:parse string &optional (start 30*) (end 3nil*) (futurep 3t*) base-time must-have-time date-must-have-year time-must-have-second (day-must-be-valid 3t*)
Interpret 2string* as a date and/or time, and return seconds, minutes,
hours, date, month, year, day-of-the-week, daylight-savings-time-p, and relative-p.
2start* and 2end* delimit a substring
of the string; if 2end* is 3nil*, the end of the string is used.
2must-have-time* means that 2string* must not be empty.
2date-must-have-year* means that a year must be explicitly specified.
2time-must-have-second* means that the second must be specified.
2day-must-be-valid* means that if a day of the week is given, then it
must actually be the day that corresponds to the date.  2base-time* provides
the defaults for unspecified components; if it is 3nil*, the current time
is used.  2futurep* means that the time should be interpreted as being
in the future; for example, if the base time is 5:00 and the string refers
to the time 3:00, that means the next day if 2futurep* is non-3nil*, but
it means two hours ago if 2futurep* is 3nil*.  The 2relative-p*
returned value is 3t* if the string included a relative part, such
as "one minute after" or "two days before" or "tomorrow" or "now"; otherwise,
it is 3nil*.  If the parse encounters an error, the first returned value is a string
giving an error message.
.end_defun

.defun time:parse-universal-time string &optional (start 30*) (end 3nil*) (futurep 3t*) base-time must-have-time date-must-have-year time-must-have-second (day-must-be-valid 3t*)
This is the same as 3time:parse* except that it returns one integer,
representing the time in Universal Time, and the 2relative-p* value.
If the parse encounters an error, the first returned value is a string
giving an error message.
.end_defun

@section Time Conversions

.defun time:decode-universal-time universal-time &optional (timezone 3time:*timezone**)
Convert 2universal-time* into its decoded representation.  The
following values are returned: seconds, minutes, hours, date, month,
year, day-of-the-week, daylight-savings-time-p.
2daylight-savings-time-p* tells you whether or not
daylight savings time is in effect; if so, the value of 2hour* has been
adjusted accordingly.  You can specify 2timezone* explicitly if you
want to know the equivalent representation for this time in other parts
of the world.
.end_defun

.defun time:encode-universal-time seconds minutes hours date month year &optional timezone
Convert the decoded time into Universal Time format, and return the
Universal Time as an integer.  If you don't specify 2timezone*, it
defaults to the current timezone adjusted for daylight savings time; if
you provide it explicitly, it is not adjusted for daylight savings time.
2year* may be absolute, or relative to 1900 (that is, 381* and 31981*
both work).
.end_defun

.defvar time:*timezone*
The value of 3time:*timezone** is the time zone in which this Lisp Machine
resides, expressed in terms of the number of hours west of GMT this time
zone is.  This value does not change to reflect daylight savings time; it
tells you about standard time in your part of the world.
.end_defvar

@section Internal Functions

These functions provide support for those listed above.  Some user programs
may need to call them directly, so they are documented here.

.defun time:initialize-timebase
Initialize the timebase by querying Chaos net hosts to find out the
current time.  This is called automatically during system initialization.
You may want to call it yourself to correct the time if it appears to be
inaccurate or downright wrong.  See also 3time:set-local-time*,
(time:set-local-time-fun).
.end_defun

.defun time:daylight-savings-time-p hours date month year
Return 3t* if daylight savings time is in effect for the specified
hour; otherwise, return 3nil*. 
2year* may be absolute, or relative to 1900 (that is, 381* and 31981*
both work).
.end_defun

.defun time:daylight-savings-p
Return 3t* if daylight savings time is currently in effect; otherwise,
return 3nil*.
.end_defun

.defun time:month-length month year
Return the number of days in the specified 2month*; you must supply
a 2year* in case the month is February (which has a different length
during leap years).
2year* may be absolute, or relative to 1900 (that is, 381* and 31981*
both work).
.end_defun

.defun time:leap-year-p year
Return 3t* if 2year* is a leap year; otherwise return 3nil*.
2year* may be absolute, or relative to 1900 (that is, 381* and 31981*
both work).
.end_defun

.defun time:verify-date date month year day-of-the-week
If the day of the week of the date specified by 2date*, 2month*, and
2year* is the same as 2day-of-the-week*, return 3nil*; otherwise,
return a string which contains a suitable error message.  2year* may
be absolute, or relative to 1900 (that is, 381* and 31981* both
work).
.end_defun

.defun time:day-of-the-week-string day-of-the-week &optional (mode 3':long*)
Return a string representing the day of the week.  As usual, 30* means
Monday, 31* means Tuesday, and so on.  Possible values of 2mode*
are:
.table 3
.kitem :long
Return the full English name, such as 3"Monday"*, 3"Tuesday"*, etc.  This
is the default.
.kitem :short
Return a three-letter abbreviation, such as 3"Mon"*, 3"Tue"*, etc.
.kitem :medium
Same as 3:short*, but use 3"Tues"* and 3"Thurs"*.
.kitem :french
Return the French name, such as 3"Lundi"*, 3"Mardi"*, etc.
.kitem :german
Return the German name, such as 3"Montag"*, 3"Dienstag"*, etc.
.end_table
.end_defun

.defun time:month-string month &optional (mode 3':long*)
Return a string representing the month of the year.  As usual, 31* means January,
32* means February, etc.  Possible values of 2mode* are:
.table 3
.kitem :long
Return the full English name, such as 3"January"*, 3"February"*, etc.  This
is the default.
.kitem :short
Return a three-letter abbreviation, such as 3"Jan"*, 3"Feb"*, etc.
.kitem :medium
Same as 3:short*, but use 3"Sept"*, 3"Novem"*, and 3"Decem"*.
.kitem :roman
Return the Roman numeral for 2month* (this convention is used in Europe).
.kitem :french
Return the French name, such as 3"Janvier"*, 3"Fevrier"*, etc.
.kitem :german
Return the German name, such as 3"Januar"*, 3"Februar"*, etc.
.end_table
.end_defun

.defun time:timezone-string &optional (timezone 3time:*timezone**) (daylight-savings-p 3(time:daylight-savings-p)*)
Return the three-letter abbreviation for this time zone.  For example, if
2timezone* is 35*, then either 3"EST"* (Eastern Standard Time) or 3"CDT"*
(Central Daylight Time) will be used, depending on 2daylight-savings-p*.
.end_defun

@c This file is all fucked and should be moved to other places such as the OPERAT document

@c This file documents those functions which are totally random but
@c which are in the global package and seem generally useful.
@c It is not clear how to organize this, so we will do that later;
@c this file is here so that the function descriptions can live
@c somewhere until we sort them out.

@chapter "Miscellaneous Useful Functions"
.setq misc-chapter chapter-number

This chapter describes a number of functions which don't logically fit in anywhere else.
Most of these functions are not normally used in programs, but are "commands", i.e.
things that you type directly at Lisp.

@section Poking Around in the Lisp World

.defun who-calls x &optional package
.defun1 who-uses x &optional package
2x* must be a symbol or a list of symbols.
3who-calls* tries
to find all of the functions in the Lisp world
which call 2x* as a function, use 2x* as a variable,
or use 2x* as a constant.  (It won't find things
that use constants which contain 2x*, such as a list one
of whose elements is 2x*; it will only find it if 2x*
itself is used as a constant.)  It tries to find all of the functions
by searching all of the function cells of
all of the symbols on 2package* and 2package*'s descendants.
2package* defaults to the 3global* package, and so normally
all packages are checked.

If 3who-calls* encounters an interpreted function definition, it
simply tells you if 2x* appears anywhere in the interpreted code.
3who-calls* is smarter about compiled code, since it has been
nicely predigested by the compiler.

If 2x* is a list of symbols, 3who-calls* does them all simultaneously,
which is faster than doing them one at a time.

3who-uses* is an obsolete name for 3who-calls*.

The editor has a command, Meta-X List Callers, which is similar to 3who-calls*.

The symbol 3unbound-function* is treated specially by 3who-calls*.
3(who-calls 'unbound-function)* will search the compiled
code for any calls through a symbol which is not currently
defined as a function.  This is useful for finding errors such
as functions you misspelled the names of or forgot to write.

3who-calls* prints one line of information for each caller it finds.  It also
returns a list of the names of all the callers.
.end_defun

.defun what-files-call x &optional package
Similar to 3who-calls* but returns a list of the pathnames of all the files
which contain functions that 3who-calls* would have printed out.  This is useful
if you need to recompile and/or edit all of those files.
.end_defun

.defun apropos string &optional package
3(apropos 2string*)* tries to find all symbols whose print-names
contain 2string* as a substring.  Whenever it finds a symbol, it prints
out the symbol's name; if the symbol is defined as a function and/or bound
to a value, it tells you so, and prints the names of the arguments (if any)
to the function.  It finds the symbols on 2package* and 2package*'s
decendants.  2package* defaults to the 3global* package, so normally
all packages are searched.  3apropos* returns a list of all the symbols
it finds.
.end_defun

.defun where-is pname &optional package
Prints the names of all packages which contain a symbol with the print-name
2pname*.  If 2pname* is a string it gets upper-cased.  The package 2package* and
all its sub-packages are searched; 2package* defaults to the 3global* package,
which causes all packages to be searched.
3where-is* returns a list of all the symbols it finds.
.end_defun

.defun describe x
3describe* tries to tell you all of the interesting information
about any object 2x* (except for array contents).  3describe* knows
about arrays, symbols, flonums, packages, stack groups, closures, and FEFs, and prints
out the attributes of each in human-readable form.  Sometimes
it will describe something which it finds inside something else;
such recursive descriptions are indented appropriately.  For instance,
3describe* of a symbol will tell you about the symbol's value,
its definition, and each of its properties.  3describe* of a flonum
(regular or small) will show you its internal representation in a way
which is useful for tracking down roundoff errors and the like.

If 2x* is a named-structure, 3describe* handles it specially.
To understand this, you should read the section on named structures
(see (named-structure)).
First it gets the named-structure symbol, and sees whether its function knows
about the 3:describe* operation.  If the operation is known, it applies
the function to two arguments: the symbol 3:describe*, and the named-structure
itself.  Otherwise, it looks on the named-structure symbol for information
which might have been left by 3defstruct*; this information would
tell it what the symbolic names for the entries in the structure are,
and 3describe* knows how to use the names to print out what each field's
name and contents is.

3describe* always returns its argument, in case you want to do something else to it.
.end_defun

.defun inspect x
A window-oriented version of 3describe*.  See the window system documentation
for details, or try it.
.end_defun

.defun disassemble function
2function* should be a FEF, or a symbol which is defined as a FEF.
This prints out a human-readable version of the macro-instructions
in 2function*.  The macro-code instruction set is explained in (macro-code).
.end_defun

.nopara
The 3grindef* function (see (grindef-fun)) may be used to display the definition
of a non-compiled function.

.defun room &rest areas
2room* tells you the amount of physical memory on the machine, the
amount of available virtual memory not yet filled with data (that is,
the portion of the available virtual memory that has not yet been allocated
to any region of any area), and the amount
of "wired" physical memory (i.e. memory not available for paging). 
Then it tells you how much room is left in some areas.  For each
area it tells you about, it prints out the name of the area, the number
of regions which currently make up the area, the current size of the area in kilowords,
and the amount of the area which has been allocated, also in kilowords.
If the area cannot grow, the percentage which is free is displayed.

3(room)* tells you about those areas which are in the list which is the value
of the variable 3room*.  These are the most interesting ones.

3(room 2area1* 2area2*...)* tells you about those areas, which can
be either the names or the numbers.

3(room t)* tells you about all the areas.

3(room nil)* does not tell you about any areas; it only prints the header.
This is useful if you just want to know how much memory is on the machine
or how much virtual memory is available.
.end_defun

.defvar room
The value of 3room* is a list of area names and/or area numbers,
denoting the areas which the function 3room* will describe if given
no arguments.  Its initial value is:
.lisp
(working-storage-area macro-compiled-program)
.end_lisp
.end_defvar

.defun set-memory-size n-words
3set-memory-size* tells the virtual memory system to use only
2n-words* words of main memory for paging.  Of course, 2n-words* may
not exceed the amount of main memory on the machine.
.end_defun


@section Utility Programs

.defun ed &optional x
3ed* is the main function for getting into the editor, Zwei.  Zwei
is not yet documented in this manual, but the commands are very similar to Emacs.

3(ed)* or 3(ed nil)* simply enters the editor, leaving you in the same
buffer as the last time you were in the editor.

3(ed t)* puts you in a fresh buffer with a generated name (like BUFFER-4).

3(ed 2pathname*)* edits that file.  2pathname* may be an actual pathname
or a string.

3(ed 'foo)* tries hard to edit the definition of the 3foo* function.
It will find a buffer or file containing the source code for 3foo*
and position the cursor at the beginning of the code.  In general, 3foo*
can be any function-spec (see (function-spec)).

3(ed 'zwei:reload)* reinitializes the editor.  It will forget about all
existing buffers, so use this only as a last resort.
.end_defun

.defun zwei:save-all-files
This function is useful in emergencies in which you have modified material
in Zmacs buffers that needs to be saved, but the editor is partially broken.
This function does what the editor's 3Save All Files* command does, but
it stays away from redisplay and other advanced facilities so that
it might work if other things are broken.
.end_defun

.defun dired &optional pathname
Puts up a window and edits the directory named by 2pathname*, which defaults to
the last file opened.  While editing a directory you may view, edit, compare, hardcopy,
and delete the files it contains.  While in the directory editor type the 3HELP*
key for further information.
.end_defun

.defun mail &optional who what
Sends mail by putting up a window in which you may compose the mail.  2who* is
a symbol or a string which is who to send it to.  2what* is a string which is the initial
contents of the mail.  If these are unspecified they can be typed in during composition
of the mail.  Type the 3END* key to send the mail and return from the 3mail* function.
.end_defun

.defun bug &optional who what
Reports a bug.  2who* is the name of the faulty program (a symbol or a
string).  It defaults to 3lispm* (the Lisp Machine system itself).
2what* is a string which is the initial contents of the mail.
3bug* is like 3mail* but includes information about the system version
and what machine you are on in the text of the message.  This information is
important to the maintainers of the faulty program; it aids them in reproducing
the bug and in determining whether it is one which is already being worked on
or has already been fixed.
.end_defun

.defun qsend who &optional what
Sends a message to another user.  3qsend* is different from 3mail* because it
sends the message immediately; it will appear within seconds on the other user's
screen, rather than being saved in her mail file.

2who* is a string of the form "2user7@@*host*"; 2host* is the name of the
Lisp Machine or timesharing system the user is currently logged-in to.  2what*
is a string which is the message.  If 2what* is not specified, you will be prompted
to type in a message.  Unlike 3mail* and 3bug*, 3qsend* does not put
up a window to allow you to edit the message; it just sends it.

[3qsend* currently does not evaluate its arguments, and is implemented as a macro,
but this should probably be changed.]
.end_defun

.defun print-sends
Reprints any messages that have been received.  This is useful if you want to see
a message again.
.end_defun

.defun print-notifications
Reprints any notifications that have been received.  The difference between notifications
and sends is that sends come from other users, while notifications are asynchronous
messages from the Lisp Machine system itself.
.end_defun

.defun si:print-disk-error-log
Prints information about the half dozen most recent disk errors (since the last cold boot).
.end_defun

.defun peek &optional character
3peek* is similar to the ITS program of the same name.
It displays various information about the system, periodically
updating it.  Like ITS PEEK, it has several modes, which are entered
by typing a single key which is the name of the mode.  The initial
mode is selected by the argument, 2character*.  If no argument
is given, 3peek* starts out by explaining what its modes are.
.end_defun

.defun hostat &rest hosts
Asks each of the 2hosts* for its status, and prints the results.  If no hosts are
specified, all hosts on the Chaosnet are asked.  Hosts can be specified either
by name or by number.

For each host, a line is output which either says that the host is not
responding or gives metering information for the host's network
attachments.  If a host is not responding, that usually means that it is down
or there is no such host at that address.  A Lisp Machine can fail to respond
if it is looping inside 3without-interrupts* or paging extremely heavily,
such that it is simply unable to respond within a reasonable amount of time.
.end_defun

.defun supdup &optional host
2host* may be a string or symbol, which will be taken as a host name,
or a number, which will be taken as a host number.  If no 2host* is
given, the machine you are logged-in to is assumed.
This function opens a connection to the host
over the Chaosnet using the Supdup protocol, and allows the Lisp
Machine to be used as a terminal for any ITS or TOPS-20 system.

To give commands to 3supdup*, type the 3NETWORK* key followed by one character.
Type 3NETWORK* followed by 3HELP* for documentation.
.end_defun

.defun telnet &optional host simulate-imlac
3telnet* is similar to 3supdup* but uses the Arpanet-standard Telnet
protocol, simulating a printing terminal rather than a display terminal.
.end_defun

@section "The Lisp Top Level"

	These functions constitute the Lisp top level,
and its associated functions.

.cindex lisp top level
.cindex read-eval-print loop

.defun si:lisp-top-level
This is the first function called in the initial Lisp environment.
It calls 3lisp-reinitialize*, clears the screen, and calls 3si:lisp-top-level1*.
.end_defun

.defun lisp-reinitialize
This function does a wide variety of things, such as resetting the values
of various global constants and initializing the error system.
.end_defun

.defun si:lisp-top-level1
This is the actual top level loop.  It reads
a form from 3standard-input*,
evaluates it, prints the result (with slashification) to
3standard-output*, and repeats indefinitely.  If several values are returned by the form
all of them will be printed.  Also the values of 3**, 3+*, 3-*, 3//*,
3++*, 3***, 3+++*, and 3****
are maintained (see below).
.end_defun

.cindex break loop
.cindex breakpoint

.defspec break [tag] [conditional-form]
3break* is used to enter a breakpoint loop, which is similar
to a Lisp top level loop.  3(break 2tag*)* will always
enter the loop; 3(break 2tag* 2conditional-form*)*
will evaluate 2conditional-form* and only enter the break loop
if it returns non-3nil*.  If the break loop is entered, 3break*
prints out
.lisp
;Breakpoint 2tag*; Resume to continue, Abort to quit.
.end_lisp
and then enters a loop reading, evaluating, and printing forms.  A
difference between a break loop and the top level loop is that when
reading a form, 3break* checks for the following special cases: If the
Abort key is typed, control is returned to the previous break or
error-handler, or to top-level if there is none.  If the Resume key is
typed, 3break* returns 3nil*.  If the symbol 3p* is typed,
3break* returns 3nil*.  If the list 3(return 2form*)* is typed,
3break* evaluates 2form* and returns the result.

Inside the 3break* loop, the streams 3standard-output*,
3standard-input*, and 3query-io* are bound to be synonymous
to 3terminal-io*; 3terminal-io* itself is not rebound.  Several
other internal system variables are bound, and you can add your
own symbols to be bound by pushing elements onto the
value of the variable 3sys:*break-bindings**
(see (sys:*break-bindings*-var)).

If 2tag* is omitted, it defaults to 3nil*.
.end_defun

.defvar prin1
The value of this variable is normally 3nil*.  If it is non-3nil*,
then the read-eval-print loop will use its value instead of the
definition of 3prin1* to print the values returned by functions.
This hook lets you control how things are printed by all read-eval-print
loops--the Lisp top level, the 3break* function, and any utility
programs that include a read-eval-print loop.  It does not affect output
from programs that call the 3prin1* function or any of its relatives such
as 3print* and 3format*; if you want to do that, read about
customizing the printer, on (customizing-the-printer).  If you
set 3prin1* to a new function, remember that the read-eval-print loop
expects the function to print the value but not to output a 3return*
character or any other delimiters.
.end_defvar

.defvar -
While a form is being evaluated by a read-eval-print loop,
3-* is bound to the form itself.
.end_defvar

.defvar +
While a form is being evaluated by a read-eval-print loop,
3+* is bound to the previous form that was read by the loop.
.end_defvar

.defvar *
While a form is being evaluated by a read-eval-print loop,
3** is bound to the result printed the last time through
the loop.  If there were several values printed (because
of a multiple-value return), 3** is bound to the first
value.
.end_defvar

.defvar //
While a form is being evaluated by a read-eval-print loop,
3//* is bound to a list of the results printed the last
time through the loop.
.end_defvar

.defvar ++
3++* holds the previous value of 3+*, that is, the form evaluated
two interactions ago.
.end_defvar

.defvar +++
3+++* holds the previous value of 3++*.
.end_defvar

.defvar **
3*** holds the previous value of 3**, that is, the result of the
form evaluated two interactions ago.
.end_defvar

.defvar ***
3**** holds the previous value of 3***.
.end_defvar

.defvar sys:*break-bindings*
When 3break* is called, it binds some special variables under control of
the list which is the value of 3sys:*break-bindings**.  Each element of the
list is a list of two elements: a variable and a form which is evaluated to
produce the value to bind it to.  The bindings happen sequentially.  Users may
3push* things on this list (adding to the front of it), but should not replace
the list wholesale since several of the variable bindings on this list are
essential to the operation of 3break*.
.end_defvar

.defvar lisp-crash-list
The value of 3lisp-crash-list* is a list of forms.
3lisp-reinitialize* sequentially evaluates these
forms, and then sets 3lisp-crash-list* to 3nil*.

In most cases, the 2initialization* facility should be used rather than
3lisp-crash-list*.  Refer to (initialization).
.end_defvar


@section The Garbage Collector
.cindex Garbage collector

.defun gc-on
Turns garbage collection on.  It is off by default, currently.
.end_defun

.defun gc-off
Turns garbage collection off.
.end_defun

.defun number-gc-on &optional (on-p 3t*)
Turns the special bignum/flonum garbage collector on, or off if 2on-p* is 3nil*.
This garbage collector is on by default, since it has negligible overhead and
significantly improves the performance of computational programs.
.end_defun

.defun si:full-gc
Performs a complete garbage collection immediately, turning off all other processing.
.end_defun

.defun si:set-scavenger-ws number-of-pages
Specifies the number of pages of memory which real-time garbage
collection can use.  400 (256.) is a good value for a 256k machine.  If
the garbage collector gets very poor paging performance, use of this
function may fix it.
.end_defun

.defvar si:%scavenger-ws-enable
If nil, garbage collection can compete with the user for all of the machine's memory.
Otherwise, this variable should be the number of a page of physical memory.
Pages below that one can be used by garbage collection; other pages cannot.
The previous function sets this variable.
.end_defvar

@section "Logging In"
.setq lispm-init-file section-page

	Logging in tells the Lisp Machine who you are, so that
other users can see who is logged in, you can receive messages,
and your INIT file can be run.  An INIT file is a Lisp program
which gets loaded when you log in; it can be used to set up
a personalized environment.

	When you log out, it should be possible to undo any
personalizations you have made so that they do not affect the next user
of the machine.  Therefore, anything done by an INIT file should be
undoable.  In order to do this, for every form in the INIT file, a Lisp
form to undo its effects should be added to the list which is the value
of 3logout-list*.  The functions 3login-setq* and 3login-eval*
help make this easy; see below.

.defvar user-id
The value of 3user-id* is either the name of the logged in user, as a string,
or else an empty string if there is no user logged in.
It appears in the who-line.
.end_defvar

.defvar logout-list
The value of 3logout-list* is a list of forms which are evaluated
when a user logs out.
.end_defvar

.defun login name &optional host load-init-file
Sets your name (the variable 3user-id*) to 2name* and logs in a file
server on 2host*.  2host* also becomes your
default file host.  If 2host* requires passwords for logging in you
will be asked for a password.  When logging in to a TOPS-20 host, typing
an asterisk before your password will enable any special capabilities
you may be authorized to use.  The default value of 2host* depends
on which Lisp Machine you use using.  It is found from the value of
3chaos:machine-location-alist*, which is a list that has one element
for every known individual Lisp Machine.  3login* also runs the
3:login* initialization list (see (login-init-list)).

Unless 2load-init-file* is specified as 3nil*, 3login* will load
your init file if it exists.  On ITS, your init file is 2name* LISPM
on your home directory.  On TOPS-20 your init file is LISPM.INIT on your
directory.

If anyone is logged into the machine already, 3login* logs him out
before logging in 2name*.  (See 3logout*.)  Init files should be
written using the 3login-setq* and 3login-eval* functions below so
that 3logout* can undo them.  Usually, however, you cold-boot the
machine before logging in, to remove any traces of the previous user.
3login* returns 3t*.
.end_defun

.defun logout
First, 3logout* evaluates the forms on 3logout-list*.
Then it sets 3user-id* to an empty string and 3logout-list*
to 3nil*.  Then it runs the 3:logout* initialization list
(see (login-init-list)), and returns 3t*.
.end_defun

.defspec login-setq @{variable value@}...
3login-setq* is like 3setq* except that it puts
a 3setq* form on 3logout-list* to set the variables
to their previous values.
.end_defun

.defun login-eval x
3login-eval* is used for functions which are "meant to be called"
from INIT files, such as 3zwei:set-comtab-return-undo*, which conveniently
return a form to undo what they did.  3login-eval* adds
the result of the form 2x* to the 3logout-list*.
.end_defun


@section Dribble Files

.defun dribble-start filename &optional editor-p
3dribble-start* opens 2filename* as a "dribble file" (also
known as a "wallpaper file").  It rebinds 3standard-input*
and 3standard-output* so that all of the terminal interaction
is directed to the file as well as the terminal.  If 2editor-p*
is non-3nil*, then instead of opening 2filename* on the file
computer, 3dribble-start* dribbles into a Zmacs buffer whose
name is 2filename*, creating it if it doesn't exist.
.end_defun

.defun dribble-end
This closes the file opened by 3dribble-start* and resets
the I/O streams.
.end_defun

@section Status and SStatus

	The 3status* and 3sstatus* special forms exist for compatibility
with Maclisp.  Programs that wish to run in both Maclisp and Zetalisp
can use 3status* to determine which of these they are running in.  Also,
3(sstatus feature ...)* can be used as it is in Maclisp.

.defspec status
3(status features)* returns a list of symbols indicating features
of the Lisp environment.  The complete list of all symbols which may
appear on this list, and their meanings, is given in the Maclisp
manual.  The default list for the Lisp Machine is:
.lisp
(loop defstruct 2site* sort fasload string
 newio roman trace grindef grind lispm)
.end_lisp
The value of this list will be kept up to date as features are added
or removed from the Lisp Machine system.  Most important is the symbol
3lispm*, which is the last element of the list; this indicates
that the program is executing on the Lisp Machine.  2site* is
a symbol indicating where the machine is located, such as 3:mit*
or 3:xerox*.  The order of this list should not be depended on,
and may not be the same as shown above.

This features list is used by the 3#+* read-time conditionalization
syntax.  See (sharp-plus).

3(status feature 2symbol*)* returns 3t* if 2symbol*
is on the 3(status features)* list, otherwise 3nil*.

3(status nofeature 2symbol*)* returns 3t* if 2symbol*
is not on the 3(status features)* list, otherwise 3nil*.

3(status userid)* returns the name of the logged-in user.

3(status tabsize)* returns the number of spaces per tab stop (always
8).  Note that this can actually be changed on a per-window basis, however
the 3status* function always returns the default value of 8.

3(status opsys)* returns the name of the operating system, always
the symbol 3:lispm*.

3(status site)* returns the name of the local machine, e.g. 3"MIT-LISPM-6"*.
Note that this is not the 2site* as described above, under 3(status features)*.

3(status status)* returns a list of all 3status* operations.

3(status sstatus)* returns a list of all 3sstatus* operations.
.end_defspec

.defspec sstatus
3(sstatus feature 2symbol*)* adds 2symbol* to the list
of features.

3(sstatus nofeature 2symbol*)* removes 2symbol* from
the list of features.
.end_defspec

@bye
